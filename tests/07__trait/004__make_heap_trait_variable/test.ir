type Square = struct {
  side: i32
}

type Circle = struct {
  radius: i32
}

type Shape = struct {
  self: ptr<Any>
  area: ptr<func (self: ptr<Any>) -> i32>
}

$pSquare__area(%self: ptr<Square>): i32 {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<Square>> = alloc ptr<Square>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %1: ptr<Square> = load %self.ptr
  [ %self.ptr %1 ]
  %2: ptr<i32> = offset %1 Square.side
  [ %self.ptr %2 ]
  %3: i32 = load %2
  [ %3 %self.ptr ]
  %4: ptr<Square> = load %self.ptr
  [ %3 %4 ]
  %5: ptr<i32> = offset %4 Square.side
  [ %3 %5 ]
  %6: i32 = load %5
  [ %3 %6 ]
  %7: i32 = mul %3 %6
  [ %7 ]
  ret %7
  [ ]
}

$pCircle__area(%self: ptr<Circle>): i32 {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<Circle>> = alloc ptr<Circle>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %1: i32 = const 312
  [ %self.ptr %1 ]
  %2: ptr<Circle> = load %self.ptr
  [ %self.ptr %1 %2 ]
  %3: ptr<i32> = offset %2 Circle.radius
  [ %self.ptr %1 %3 ]
  %4: i32 = load %3
  [ %self.ptr %1 %4 ]
  %5: i32 = mul %1 %4
  [ %5 %self.ptr ]
  %6: ptr<Circle> = load %self.ptr
  [ %5 %6 ]
  %7: ptr<i32> = offset %6 Circle.radius
  [ %5 %7 ]
  %8: i32 = load %7
  [ %5 %8 ]
  %9: i32 = mul %5 %8
  [ %9 ]
  %10: i32 = const 100
  [ %9 %10 ]
  %11: i32 = div %9 %10
  [ %11 ]
  ret %11
  [ ]
}

$main(): i32 {
@1:
  [ ]
  %square.ptr: ptr<ptr<Square>> = alloc ptr<Square>
  [ %square.ptr ]
  %1: u64 = const 4
  [ %square.ptr %1 ]
  %2: ptr<Square> = call $malloc %1
  [ %square.ptr %2 ]
  %3: i32 = const 10
  [ %square.ptr %2 %3 ]
  %4: Square = struct { Square.side: %3 }
  [ %square.ptr %2 %3 ]
  %5: ptr<i32> = offset %2 Square.side
  [ %square.ptr %2 %5 %3 ]
  store %5 %3
  [ %square.ptr %2 ]
  store %square.ptr %2
  [ %square.ptr ]
  %square_shape.ptr: ptr<ptr<Shape>> = alloc ptr<Shape>
  [ %square_shape.ptr %square.ptr ]
  %6: u64 = const 16
  [ %square_shape.ptr %square.ptr %6 ]
  %7: ptr<Shape> = call $malloc %6
  [ %square_shape.ptr %7 %square.ptr ]
  %square.1: ptr<Square> = load %square.ptr
  [ %square_shape.ptr %7 %square.1 ]
  %8: ptr<func (self: ptr<Square>) -> i32> = address $pSquare__area
  [ %square_shape.ptr %7 %8 %square.1 ]
  %9: Shape = struct { Shape.self: %square.1, Shape.area: %8 }
  [ %square_shape.ptr %7 %8 %square.1 ]
  %10: ptr<ptr<Any>> = offset %7 Shape.self
  [ %square_shape.ptr %7 %8 %10 %square.1 ]
  store %10 %square.1
  [ %square_shape.ptr %7 %8 ]
  %11: ptr<ptr<func (self: ptr<Any>) -> i32>> = offset %7 Shape.area
  [ %square_shape.ptr %7 %11 %8 ]
  store %11 %8
  [ %square_shape.ptr %7 ]
  store %square_shape.ptr %7
  [ %square_shape.ptr ]
  %circle.ptr: ptr<ptr<Circle>> = alloc ptr<Circle>
  [ %square_shape.ptr %circle.ptr ]
  %12: u64 = const 4
  [ %square_shape.ptr %circle.ptr %12 ]
  %13: ptr<Circle> = call $malloc %12
  [ %square_shape.ptr %circle.ptr %13 ]
  %14: i32 = const 10
  [ %square_shape.ptr %circle.ptr %13 %14 ]
  %15: Circle = struct { Circle.radius: %14 }
  [ %square_shape.ptr %circle.ptr %13 %14 ]
  %16: ptr<i32> = offset %13 Circle.radius
  [ %square_shape.ptr %circle.ptr %13 %16 %14 ]
  store %16 %14
  [ %square_shape.ptr %circle.ptr %13 ]
  store %circle.ptr %13
  [ %square_shape.ptr %circle.ptr ]
  %square_shape.1: ptr<Shape> = load %square_shape.ptr
  [ %square_shape.1 %circle.ptr ]
  %17: ptr<ptr<func (self: ptr<Any>) -> i32>> = offset %square_shape.1 Shape.area
  [ %square_shape.1 %17 %circle.ptr ]
  %18: ptr<func (self: ptr<Any>) -> i32> = load %17
  [ %18 %square_shape.1 %circle.ptr ]
  %19: ptr<ptr<Any>> = offset %square_shape.1 Shape.self
  [ %18 %19 %circle.ptr ]
  %20: ptr<Any> = load %19
  [ %18 %20 %circle.ptr ]
  %21: i32 = call %18 %20
  [ %21 %circle.ptr ]
  %22: i32 = const 100
  [ %21 %22 %circle.ptr ]
  %23: bool = cmp_ne %21 %22
  [ %23 %circle.ptr ]
  br %23 @2 @3
  [ %circle.ptr ]
@2:
  [ ]
  %24: i32 = const 1
  [ %24 ]
  ret %24
  [ ]
@3:
  [ %circle.ptr ]
  %25: u64 = const 16
  [ %circle.ptr %25 ]
  %26: ptr<Shape> = call $malloc %25
  [ %26 %circle.ptr ]
  %circle.1: ptr<Circle> = load %circle.ptr
  [ %26 %circle.1 ]
  %27: ptr<func (self: ptr<Circle>) -> i32> = address $pCircle__area
  [ %26 %27 %circle.1 ]
  %28: Shape = struct { Shape.self: %circle.1, Shape.area: %27 }
  [ %26 %27 %circle.1 ]
  %29: ptr<ptr<Any>> = offset %26 Shape.self
  [ %26 %27 %29 %circle.1 ]
  store %29 %circle.1
  [ %26 %27 ]
  %30: ptr<ptr<func (self: ptr<Any>) -> i32>> = offset %26 Shape.area
  [ %26 %30 %27 ]
  store %30 %27
  [ %26 ]
  %31: ptr<ptr<func (self: ptr<Any>) -> i32>> = offset %26 Shape.area
  [ %26 %31 ]
  %32: ptr<func (self: ptr<Any>) -> i32> = load %31
  [ %32 %26 ]
  %33: ptr<ptr<Any>> = offset %26 Shape.self
  [ %32 %33 ]
  %34: ptr<Any> = load %33
  [ %32 %34 ]
  %35: i32 = call %32 %34
  [ %35 ]
  %36: i32 = const 312
  [ %35 %36 ]
  %37: bool = cmp_ne %35 %36
  [ %37 ]
  br %37 @4 @5
  [ ]
@4:
  [ ]
  %38: i32 = const 2
  [ %38 ]
  ret %38
  [ ]
@5:
  [ ]
  %39: i32 = const 0
  [ %39 ]
  ret %39
  [ ]
}

$malloc(%size: u64): ptr<Any>
