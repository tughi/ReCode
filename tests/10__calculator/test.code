func main(anon argc: i32, anon argv: [[u8; ?]; ?]) {
    if argc != 2 {
        exit(1)
    }

    let tokenizer = make Tokenizer(
        data: argv[1]
        index: 0
    )

    while tokenizer.has_next_token() {
        let token = tokenizer.next_token()
        if token.kind == 0 {
            break
        }
        stdout.write(char: token.value)
    }
}

struct Tokenizer {
    data: [u8; ?]
    index: i32

    func has_next_token(self) -> bool {
        return self.data[self.index] != 0
    }

    func next_token(self) -> @Token {
        let value = self.data[self.index]
        self.index = self.index + 1
        return make @Token(
            kind: 1
            value: value
        )
    }
}

struct Token {
    kind: i32
    value: u8
}

\ ----------- Stream -----------

func @FILE.write(self, char: u8) -> @FILE {
    fputc(char, stdout)
    return self
}

\ ------------ LibC ------------

external type FILE

external stdin: @FILE
external stdout: @FILE
external stderr: @FILE

external func fputc(anon c: u8, anon file: @FILE) -> i32

external func malloc(anon size: u64) -> @Any

external func exit(anon code: i32)
