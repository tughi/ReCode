func main(anon argc: i32, anon argv: [@][@]u8) {
    if argc != 2 {
        exit(1)
    }

    let tokenizer = make Tokenizer(
        data: argv[1]
        index: 0
    )

    let stdout_writer = make Writer(stdout)

    stdout_writer.write(string: "Tokens:").end_line()

    while tokenizer.has_next_token() {
        let token = tokenizer.next_token()
        if token.kind == 0 {
            break
        }
        stdout_writer.write(token: token).end_line()
    }
}

\ ------------------------------------------------------------------------------ Tokenizer

struct Tokenizer {
    data: [@]u8
    index: i32

    func has_next_token(self) -> bool {
        return self.data[self.index] != 0
    }

    func next_token(self) -> @Token {
        let lexeme_builder = make_string_builder(initial_data_size: 4)
        let c = self.data[self.index]
        if c >= '0' and c <= '9' {
            return self.scan_number_token(@lexeme_builder)
        }
        self.index = self.index + 1
        return make @Token(
            kind: c
            span: make Span(
                lexeme: lexeme_builder.write(char: c).build()
            )
            value: 0
        )
    }

    func scan_number_token(self, anon lexeme_builder: @String_Builder) -> @Token {
        let value = 0
        loop {
            let c = self.data[self.index]
            if c < '0' or c > '9' {
                break
            }
            lexeme_builder.write(char: c)
            value = value * 10 + (c - '0').as(i32)
            self.index = self.index + 1
        }
        return make @Token(
            kind: 'n'
            span: make Span(
                lexeme: lexeme_builder.build()
            )
            value: value
        )
    }
}

\ ------------------------------------------------------------------------------ String

struct String {
    data: [@]u8
    length: i32
}

func @Writer.write(self, string: str) -> @Writer {
    let string_data = (@string).as(@String).data
    let index = 0usize
    while index < string.length {
        self.write(char: string_data[index])
        index = index + 1
    }
    return self
}

\ ------------------------------------------------------------------------------ Token

struct Span {
    lexeme: str
}

struct Token {
    kind: u8
    span: Span
    value: i32
}

func @Writer.write(self, token: @Token) -> @Writer {
    self.write(char: token.kind)
    if token.kind == 'n' {
        self.write(char: ':').write(char: ' ').write(signed: token.value)
    }
    return self
}

\ ------------------------------------------------------------------------------ String_Builder

struct String_Builder {
    data: [@]u8
    data_size: i32
    length: i32

    func write(self, char c: u8) -> @String_Builder {
        if self.length == self.data_size {
            self.data_size = self.data_size + 8
            self.data = realloc(
                self.data.as(@Any)
                self.data_size.as(u64)
            ).as([@]u8)
        }
        self.data[self.length] = c
        self.length = self.length + 1
        return self
    }

    func build(self) -> str {
        self.write(char: 0)
        let string = make String(
            data: self.data
            length: self.length
        )
        return (@string).as(@str).@
    }
}

func make_string_builder(initial_data_size: i32) -> String_Builder {
    return make String_Builder(
        data: malloc(initial_data_size.as(u64)).as([@]u8)
        data_size: initial_data_size
        length: 0
    )
}

func @String_Builder.write_char(self, anon c: u8) {
    self.write(char: c)
}

\ ------------------------------------------------------------------------------ Writer

trait Writer {
    func write_char(self, anon c: u8)
}

func @Writer.write(self, char c: u8) -> @Writer {
    self.write_char(c)
    return self
}

func @Writer.write(self, signed value: i32) -> @Writer {
    \ TODO: Use a buffer to avoid recursion
    if value < 0 {
        self.write(char: '-')
        return self.write(signed: -value)
    }
    if value >= 10 {
        self.write(signed: value / 10)
    }
    return self.write(char: (value // 10).as(u8) + '0')
}

func @Writer.end_line(self) -> @Writer {
    self.write(char: '\n')
    return self
}

\ ------------------------------------------------------------------------------ LibC

external type FILE

external stdin: @FILE
external stdout: @FILE
external stderr: @FILE

external func fputc(anon c: i32, anon file: @FILE) -> i32

func @FILE.write_char(self, anon c: u8) {
    fputc(c.as(i32), stdout)
}

external func malloc(anon size: u64) -> @Any
external func realloc(anon block: @Any, anon size: u64) -> @Any

external func exit(anon code: i32)
