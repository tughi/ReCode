func main(anon argc: i32, anon argv: [@][@]u8) {
    if argc != 2 {
        exit(1)
    }

    let tokenizer = Tokenizer(
        data: argv[1]
        index: 0
    )

    let stdout_writer = Writer(stdout)

    while tokenizer.peek_token() is not Stop {
        let token = tokenizer.next_token()
        stdout_writer.write(token: @token).end_line()
    }

    let parser = Parser(tokenizer: Tokenizer(
        data: argv[1]
        index: 0
    ))
    let expression = parser.parse_expression()
    stdout_writer.write("Expression: ").write(expression: @expression).end_line()

    let result = evaluate(expression: @expression)
    stdout_writer.write("Result: ").write(signed: result).end_line()
}

\ ------------------------------------------------------------------------------ Evaluator

func evaluate(expression: @Expression) -> i32 {
    switch expression {
        is Number as number {
            return number.value
        }
        is Addition as addition {
            return evaluate(expression: addition.left) + evaluate(expression: addition.right)
        }
        is Division as division {
            return evaluate(expression: division.left) / evaluate(expression: division.right)
        }
        is Multiplication as multiplication {
            return evaluate(expression: multiplication.left) * evaluate(expression: multiplication.right)
        }
        is Subtraction as subtraction {
            return evaluate(expression: subtraction.left) - evaluate(expression: subtraction.right)
        }
        else {
            exit(1)
        }
    }
}

\ ------------------------------------------------------------------------------ Parser

struct Parser {
    tokenizer: Tokenizer
}

func @Parser.parse_expression(self) -> Expression {
    return self.parse_additive_expression()
}

func @Parser.parse_additive_expression(self) -> Expression {
    let expression = self.parse_multiplicative_expression()
    loop {
        switch self.tokenizer.peek_token() {
            is Plus as plus {
                self.tokenizer.next_token()
                let other_expression = self.parse_multiplicative_expression()
                expression = Addition(
                    span: Span(start: expression.span().start, end: other_expression.span().end)
                    left: alloc(expression)
                    right: alloc(other_expression)
                )
            }
            is Minus as minus {
                self.tokenizer.next_token()
                let other_expression = self.parse_multiplicative_expression()
                expression = Subtraction(
                    span: Span(start: expression.span().start, end: other_expression.span().end)
                    left: alloc(expression)
                    right: alloc(other_expression)
                )
            }
            else {
                break
            }
        }
    }
    return expression
}

func @Parser.parse_multiplicative_expression(self) -> Expression {
    let expression = self.parse_primary_expression()
    loop {
        let token = self.tokenizer.peek_token()
        if token is Multiply as multiply {
            self.tokenizer.next_token()
            let other_expression = self.parse_primary_expression()
            expression = Multiplication(
                span: Span(start: expression.span().start, end: other_expression.span().end)
                left: alloc(expression)
                right: alloc(other_expression)
            )
        } else if token is Divide as divide {
            self.tokenizer.next_token()
            let other_expression = self.parse_primary_expression()
            expression = Division(
                span: Span(start: expression.span().start, end: other_expression.span().end)
                left: alloc(expression)
                right: alloc(other_expression)
            )
        } else {
            break
        }
    }
    return expression
}

func @Parser.parse_primary_expression(self) -> Expression {
    let token = self.tokenizer.next_token()
    if token is Number as number {
        return number
    }
    return Error(
        span: token.span()
        message: "Expected number"
    )
}

\ ------------------------------------------------------------------------------ Parsed_Expression

union Expression {
    Number
    Addition
    Division
    Multiplication
    Subtraction
    Error
}

struct Addition {
    span: Span
    left: @Expression
    right: @Expression
}

struct Division {
    span: Span
    left: @Expression
    right: @Expression
}

struct Multiplication {
    span: Span
    left: @Expression
    right: @Expression
}

struct Subtraction {
    span: Span
    left: @Expression
    right: @Expression
}

func @Expression.span(self) -> Span {
    switch self {
        is Number as variant {
            return variant.span
        }
        is Addition as variant {
            return variant.span
        }
        is Division as variant {
            return variant.span
        }
        is Multiplication as variant {
            return variant.span
        }
        is Subtraction as variant {
            return variant.span
        }
        is Error as variant {
            return variant.span
        }
        is nil {
            return Span(start: 0, end: 0)
        }
    }
}

func @Writer.write(self, expression: @Expression) -> @Writer {
    switch expression {
        is Number as number {
            return self.write(signed: number.value)
        }
        is Addition as addition {
            return self.write("(").write(expression: addition.left).write(" + ").write(expression: addition.right).write(")")
        }
        is Division as division {
            return self.write("(").write(expression: division.left).write(" / ").write(expression: division.right).write(")")
        }
        is Multiplication as multiplication {
            return self.write("(").write(expression: multiplication.left).write(" * ").write(expression: multiplication.right).write(")")
        }
        is Subtraction as subtraction {
            return self.write("(").write(expression: subtraction.left).write(" - ").write(expression: subtraction.right).write(")")
        }
        is Error as error {
            return self.write("Error: ").write(error.message)
        }
        is nil {
            return self.write("Nil!")
        }
    }
    return self
}

\ ------------------------------------------------------------------------------ Tokenizer

struct Tokenizer {
    data: [@]u8
    index: i32

    current_token: Token
}

func @Tokenizer.peek_token(self) -> Token {
    if self.current_token is nil {
        self.current_token = self.scan_token()
    }
    return self.current_token
}

func @Tokenizer.next_token(self) -> Token {
    let token = self.peek_token()
    self.current_token = nil
    return token
}

func @Tokenizer.scan_token(self) -> Token {
    while self.data[self.index] == ' ' {
        self.index = self.index + 1
    }
    let ch = self.data[self.index]
    if ch == 0 {
        return Stop(span: Span(start: self.index, end: self.index))
    }
    if ch != ' ' {
        if ch >= '0' and ch <= '9' {
            return self.scan_number_token()
        }
        self.index = self.index + 1
        if ch == '+' {
            return Plus(span: Span(start: self.index - 1, end: self.index))
        }
        if ch == '-' {
            return Minus(span: Span(start: self.index - 1, end: self.index))
        }
        if ch == '*' {
            return Multiply(span: Span(start: self.index - 1, end: self.index))
        }
        if ch == '/' {
            return Divide(span: Span(start: self.index - 1, end: self.index))
        }
        return Error(
            span: Span(start: self.index - 1, end: self.index)
            message: "Unexpected character"
        )
    }
}

func @Tokenizer.scan_number_token(self) -> Token {
    let start = self.index
    let value = 0
    loop {
        let c = self.data[self.index]
        if c < '0' or c > '9' {
            break
        }
        value = value * 10 + (c - '0').as(i32)
        self.index = self.index + 1
    }
    return Token(Number(
        span: Span(start: start, end: self.index)
        value: value
    ))
}

\ ------------------------------------------------------------------------------ Token


struct Span {
    start: i32
    end: i32
}

struct Number {
    span: Span
    value: i32
}

struct Plus {
    span: Span
}

struct Minus {
    span: Span
}

struct Multiply {
    span: Span
}

struct Divide {
    span: Span
}

struct Stop {
    span: Span
}

struct Error {
    span: Span
    message: str
}

union Token {
    Number
    Plus
    Minus
    Multiply
    Divide
    Stop
    Error
}

func @Token.span(self) -> Span {
    switch self {
        is Number as variant {
            return variant.span
        }
        is Plus as variant {
            return variant.span
        }
        is Minus as variant {
            return variant.span
        }
        is Multiply as variant {
            return variant.span
        }
        is Divide as variant {
            return variant.span
        }
        is Stop as variant {
            return variant.span
        }
        is Error as variant {
            return variant.span
        }
        is nil {
            return Span(start: 0, end: 0)
        }
    }
}

func @Writer.write(self, token: @Token) -> @Writer {
    switch token {
        is Number as number {
            return self.write("Number: ").write(signed: number.value)
        }
        is Plus {
            return self.write("Plus")
        }
        is Minus {
            return self.write("Minus")
        }
        is Multiply {
            return self.write("Multiply")
        }
        is Divide {
            return self.write("Divide")
        }
        is Stop {
            return self.write("Stop")
        }
        is Error as error {
            return self.write("Error: ").write(error.message)
        }
        is nil {
            return self.write("Nil!")
        }
    }
    return self
}


\ ------------------------------------------------------------------------------ Writer

trait Writer {
    func write_char(self, anon c: u8)
}

func @Writer.write(self, char c: u8) -> @Writer {
    self.write_char(c)
    return self
}

func @Writer.write(self, signed value: i32) -> @Writer {
    \ TODO: Use a buffer to avoid recursion
    if value < 0 {
        self.write(char: '-')
        return self.write(signed: -value)
    }
    if value >= 10 {
        self.write(signed: value / 10)
    }
    return self.write(char: (value // 10).as(u8) + '0')
}

func @Writer.end_line(self) -> @Writer {
    self.write(char: '\n')
    return self
}

\ ------------------------------------------------------------------------------ String_Builder

struct String_Builder {
    data: [@]u8
    data_size: i32
    length: i32
}

func @String_Builder.write(self, char c: u8) -> @String_Builder {
    if self.length == self.data_size {
        self.data_size = self.data_size + 8
        self.data = realloc(
            self.data.as(@Any)
            self.data_size.as(u64)
        ).as([@]u8)
    }
    self.data[self.length] = c
    self.length = self.length + 1
    return self
}

func @String_Builder.build(self) -> str {
    self.write(char: 0)
    let string = String(
        data: self.data
        length: self.length - 1
    )
    return (@string).as(@str).@
}

func make_string_builder() -> String_Builder {
    return make_string_builder(initial_data_size: 4)
}

func make_string_builder(initial_data_size: i32) -> String_Builder {
    return String_Builder(
        data: malloc(initial_data_size.as(u64)).as([@]u8)
        data_size: initial_data_size
        length: 0
    )
}

func @String_Builder.write_char(self, anon c: u8) {
    self.write(char: c)
}

\ ------------------------------------------------------------------------------ String

struct String {
    data: [@]u8
    length: i32
}

func @Writer.write(self, anon string: str) -> @Writer {
    let string_copy = string
    let string_data = (@string_copy).as(@String).data
    let index = 0usize
    while index < string.length {
        self.write(char: string_data[index])
        index = index + 1
    }
    return self
}

\ ------------------------------------------------------------------------------ LibC

external type FILE

external stdin: @FILE
external stdout: @FILE
external stderr: @FILE

external func fputc(anon c: i32, anon file: @FILE) -> i32

func @FILE.write_char(self, anon c: u8) {
    fputc(c.as(i32), stdout)
}

external func malloc(anon size: u64) -> @Any
external func realloc(anon block: @Any, anon size: u64) -> @Any

external func exit(anon code: i32)
