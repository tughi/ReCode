type FILE = opaque

type Tokenizer = struct {
  data: ptr<u8>
  index: i32
}

type Token = struct {
  kind: u8
  value: i32
}

external $stdin: ptr<FILE>

external $stdout: ptr<FILE>

external $stderr: ptr<FILE>

$main(%argc: i32, %argv: ptr<ptr<u8>>) {
@1:
  [ %argv %argc $stdout ]
  %argc.ptr: ptr<i32> = alloc i32
  [ %argc.ptr %argv %argc $stdout ]
  store %argc.ptr %argc
  [ %argc.ptr %argv $stdout ]
  %argv.ptr: ptr<ptr<ptr<u8>>> = alloc ptr<ptr<u8>>
  [ %argc.ptr %argv.ptr %argv $stdout ]
  store %argv.ptr %argv
  [ %argc.ptr %argv.ptr $stdout ]
  %argc.1: i32 = load %argc.ptr
  [ %argc.1 %argv.ptr $stdout ]
  %1: i32 = const 2
  [ %argc.1 %1 %argv.ptr $stdout ]
  %2: bool = cmp_ne %argc.1 %1
  [ %2 %argv.ptr $stdout ]
  br %2 @2 @3
  [ %argv.ptr $stdout ]
@2:
  [ ]
  %3: i32 = const 1
  [ %3 ]
  call $exit %3
  [ ]
@3:
  [ %argv.ptr $stdout ]
  %tokenizer.ptr: ptr<Tokenizer> = alloc Tokenizer
  [ %tokenizer.ptr %argv.ptr $stdout ]
  %4: i32 = const 1
  [ %tokenizer.ptr %argv.ptr %4 $stdout ]
  %5: ptr<ptr<u8>> = offset %argv.ptr %4
  [ %tokenizer.ptr %5 $stdout ]
  %6: ptr<u8> = load %5
  [ %tokenizer.ptr %6 $stdout ]
  %7: i32 = const 0
  [ %7 %tokenizer.ptr %6 $stdout ]
  %8: Tokenizer = struct { Tokenizer.data: %6, Tokenizer.index: %7 }
  [ %7 %tokenizer.ptr %6 $stdout ]
  %9: ptr<ptr<u8>> = offset %tokenizer.ptr Tokenizer.data
  [ %7 %tokenizer.ptr %9 %6 $stdout ]
  store %9 %6
  [ %7 %tokenizer.ptr $stdout ]
  %10: ptr<i32> = offset %tokenizer.ptr Tokenizer.index
  [ %10 %7 %tokenizer.ptr $stdout ]
  store %10 %7
  [ %tokenizer.ptr $stdout ]
  jmp @4
  [ %tokenizer.ptr $stdout ]
@4:
  [ %tokenizer.ptr $stdout ]
  %11: bool = call $pTokenizer__has_next_token %tokenizer.ptr
  [ %11 %tokenizer.ptr $stdout ]
  br %11 @5 @6
  [ %tokenizer.ptr $stdout ]
@5:
  [ %tokenizer.ptr $stdout ]
  %token.ptr: ptr<ptr<Token>> = alloc ptr<Token>
  [ %token.ptr %tokenizer.ptr $stdout ]
  %12: ptr<Token> = call $pTokenizer__next_token %tokenizer.ptr
  [ %token.ptr %12 %tokenizer.ptr $stdout ]
  store %token.ptr %12
  [ %token.ptr %tokenizer.ptr $stdout ]
  %13: ptr<Token> = load %token.ptr
  [ %13 %tokenizer.ptr %token.ptr $stdout ]
  %14: ptr<u8> = offset %13 Token.kind
  [ %14 %tokenizer.ptr %token.ptr $stdout ]
  %15: u8 = load %14
  [ %15 %tokenizer.ptr %token.ptr $stdout ]
  %16: u8 = const 0
  [ %15 %16 %tokenizer.ptr %token.ptr $stdout ]
  %17: bool = cmp_eq %15 %16
  [ %17 %tokenizer.ptr %token.ptr $stdout ]
  br %17 @7 @8
  [ %tokenizer.ptr %token.ptr $stdout ]
@6:
  [ ]
  ret
  [ ]
@7:
  [ ]
  jmp @6
  [ ]
@8:
  [ %tokenizer.ptr %token.ptr $stdout ]
  %18: ptr<FILE> = load $stdout
  [ %tokenizer.ptr %18 %token.ptr $stdout ]
  %token.1: ptr<Token> = load %token.ptr
  [ %tokenizer.ptr %18 %token.1 $stdout ]
  %19: ptr<FILE> = call $pFILE__write__token %18 %token.1
  [ %tokenizer.ptr %19 $stdout ]
  %20: ptr<FILE> = call $pFILE__end_line %19
  [ %tokenizer.ptr $stdout ]
  jmp @4
  [ %tokenizer.ptr $stdout ]
@9:
  [ %tokenizer.ptr %token.ptr $stdout ]
  jmp @8
  [ %tokenizer.ptr %token.ptr $stdout ]
}

$pTokenizer__has_next_token(%self: ptr<Tokenizer>): bool {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<Tokenizer>> = alloc ptr<Tokenizer>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %1: ptr<Tokenizer> = load %self.ptr
  [ %self.ptr %1 ]
  %2: ptr<ptr<u8>> = offset %1 Tokenizer.data
  [ %2 %self.ptr ]
  %3: ptr<Tokenizer> = load %self.ptr
  [ %2 %3 ]
  %4: ptr<i32> = offset %3 Tokenizer.index
  [ %2 %4 ]
  %5: i32 = load %4
  [ %2 %5 ]
  %6: ptr<u8> = offset %2 %5
  [ %6 ]
  %7: u8 = load %6
  [ %7 ]
  %8: u8 = const 0
  [ %7 %8 ]
  %9: bool = cmp_ne %7 %8
  [ %9 ]
  ret %9
  [ ]
}

$pTokenizer__next_token(%self: ptr<Tokenizer>): ptr<Token> {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<Tokenizer>> = alloc ptr<Tokenizer>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %char.ptr: ptr<u8> = alloc u8
  [ %char.ptr %self.ptr ]
  %1: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %self.ptr %1 ]
  %2: ptr<ptr<u8>> = offset %1 Tokenizer.data
  [ %char.ptr %2 %self.ptr ]
  %3: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %2 %3 %self.ptr ]
  %4: ptr<i32> = offset %3 Tokenizer.index
  [ %char.ptr %2 %4 %self.ptr ]
  %5: i32 = load %4
  [ %char.ptr %2 %5 %self.ptr ]
  %6: ptr<u8> = offset %2 %5
  [ %char.ptr %6 %self.ptr ]
  %7: u8 = load %6
  [ %char.ptr %7 %self.ptr ]
  store %char.ptr %7
  [ %char.ptr %self.ptr ]
  %char.1: u8 = load %char.ptr
  [ %char.1 %char.ptr %self.ptr ]
  %8: u8 = const '0'
  [ %char.1 %8 %char.ptr %self.ptr ]
  %9: bool = cmp_ge %char.1 %8
  [ %9 %char.ptr %self.ptr ]
  br %9 @4 @5
  [ %char.ptr %self.ptr %9 ]
@2:
  [ %self.ptr ]
  %self.1: ptr<Tokenizer> = load %self.ptr
  [ %self.1 ]
  %13: ptr<Token> = call $pTokenizer__scan_number_token %self.1
  [ %13 ]
  ret %13
  [ ]
@3:
  [ %char.ptr %self.ptr ]
  %14: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %self.ptr %14 ]
  %15: ptr<i32> = offset %14 Tokenizer.index
  [ %char.ptr %15 %self.ptr ]
  %16: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %15 %16 ]
  %17: ptr<i32> = offset %16 Tokenizer.index
  [ %char.ptr %15 %17 ]
  %18: i32 = load %17
  [ %char.ptr %15 %18 ]
  %19: i32 = const 1
  [ %char.ptr %15 %18 %19 ]
  %20: i32 = add %18 %19
  [ %char.ptr %15 %20 ]
  store %15 %20
  [ %char.ptr ]
  %21: u64 = const 5
  [ %char.ptr %21 ]
  %22: ptr<Token> = call $malloc %21
  [ %22 %char.ptr ]
  %char.3: u8 = load %char.ptr
  [ %22 %char.3 ]
  %23: i32 = const 0
  [ %22 %23 %char.3 ]
  %24: Token = struct { Token.kind: %char.3, Token.value: %23 }
  [ %22 %23 %char.3 ]
  %25: ptr<u8> = offset %22 Token.kind
  [ %22 %23 %25 %char.3 ]
  store %25 %char.3
  [ %22 %23 ]
  %26: ptr<i32> = offset %22 Token.value
  [ %22 %26 %23 ]
  store %26 %23
  [ %22 ]
  ret %22
  [ ]
@4:
  [ %char.ptr %self.ptr ]
  %char.2: u8 = load %char.ptr
  [ %char.2 %self.ptr %char.ptr ]
  %10: u8 = const '9'
  [ %char.2 %10 %self.ptr %char.ptr ]
  %11: bool = cmp_le %char.2 %10
  [ %11 %self.ptr %char.ptr ]
  jmp @5
  [ %self.ptr %char.ptr %11 ]
@5:
  [ %self.ptr %char.ptr ]
  %12: bool = phi @1 %9 @4 %11
  [ %self.ptr %char.ptr %12 ]
  br %12 @2 @3
  [ %self.ptr %char.ptr ]
}

$pTokenizer__scan_number_token(%self: ptr<Tokenizer>): ptr<Token> {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<Tokenizer>> = alloc ptr<Tokenizer>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %value.ptr: ptr<i32> = alloc i32
  [ %value.ptr %self.ptr ]
  %1: i32 = const 0
  [ %value.ptr %1 %self.ptr ]
  store %value.ptr %1
  [ %self.ptr %value.ptr ]
  jmp @2
  [ %self.ptr %value.ptr ]
@2:
  [ %self.ptr %value.ptr ]
  %char.ptr: ptr<u8> = alloc u8
  [ %char.ptr %self.ptr %value.ptr ]
  %2: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %self.ptr %2 %value.ptr ]
  %3: ptr<ptr<u8>> = offset %2 Tokenizer.data
  [ %char.ptr %3 %self.ptr %value.ptr ]
  %4: ptr<Tokenizer> = load %self.ptr
  [ %char.ptr %3 %4 %self.ptr %value.ptr ]
  %5: ptr<i32> = offset %4 Tokenizer.index
  [ %char.ptr %3 %5 %self.ptr %value.ptr ]
  %6: i32 = load %5
  [ %char.ptr %3 %6 %self.ptr %value.ptr ]
  %7: ptr<u8> = offset %3 %6
  [ %char.ptr %7 %self.ptr %value.ptr ]
  %8: u8 = load %7
  [ %char.ptr %8 %self.ptr %value.ptr ]
  store %char.ptr %8
  [ %char.ptr %self.ptr %value.ptr ]
  %digit.ptr: ptr<i32> = alloc i32
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.1: u8 = load %char.ptr
  [ %char.1 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %9: u8 = const '0'
  [ %char.1 %9 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %10: bool = cmp_eq %char.1 %9
  [ %10 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %10 @4 @5
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@3:
  [ %value.ptr ]
  %49: u64 = const 5
  [ %value.ptr %49 ]
  %50: ptr<Token> = call $malloc %49
  [ %50 %value.ptr ]
  %51: u8 = const 'n'
  [ %50 %51 %value.ptr ]
  %value.2: i32 = load %value.ptr
  [ %50 %value.2 %51 ]
  %52: Token = struct { Token.kind: %51, Token.value: %value.2 }
  [ %50 %value.2 %51 ]
  %53: ptr<u8> = offset %50 Token.kind
  [ %50 %value.2 %53 %51 ]
  store %53 %51
  [ %50 %value.2 ]
  %54: ptr<i32> = offset %50 Token.value
  [ %50 %54 %value.2 ]
  store %54 %value.2
  [ %50 ]
  ret %50
  [ ]
@4:
  [ %digit.ptr %self.ptr %value.ptr ]
  %11: i32 = const 0
  [ %digit.ptr %11 %self.ptr %value.ptr ]
  store %digit.ptr %11
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @6
  [ %self.ptr %value.ptr %digit.ptr ]
@5:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.2: u8 = load %char.ptr
  [ %char.2 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %12: u8 = const '1'
  [ %char.2 %12 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %13: bool = cmp_eq %char.2 %12
  [ %13 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %13 @7 @8
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@6:
  [ %self.ptr %value.ptr %digit.ptr ]
  %value.1: i32 = load %value.ptr
  [ %self.ptr %value.ptr %digit.ptr %value.1 ]
  %39: i32 = const 10
  [ %self.ptr %value.ptr %digit.ptr %value.1 %39 ]
  %40: i32 = mul %value.1 %39
  [ %self.ptr %value.ptr %40 %digit.ptr ]
  %digit.1: i32 = load %digit.ptr
  [ %self.ptr %value.ptr %40 %digit.1 ]
  %41: i32 = add %40 %digit.1
  [ %self.ptr %value.ptr %41 ]
  store %value.ptr %41
  [ %self.ptr %value.ptr ]
  %42: ptr<Tokenizer> = load %self.ptr
  [ %self.ptr %42 %value.ptr ]
  %43: ptr<i32> = offset %42 Tokenizer.index
  [ %self.ptr %43 %value.ptr ]
  %44: ptr<Tokenizer> = load %self.ptr
  [ %self.ptr %43 %44 %value.ptr ]
  %45: ptr<i32> = offset %44 Tokenizer.index
  [ %self.ptr %43 %45 %value.ptr ]
  %46: i32 = load %45
  [ %self.ptr %43 %46 %value.ptr ]
  %47: i32 = const 1
  [ %self.ptr %43 %46 %47 %value.ptr ]
  %48: i32 = add %46 %47
  [ %self.ptr %43 %48 %value.ptr ]
  store %43 %48
  [ %self.ptr %value.ptr ]
  jmp @2
  [ %self.ptr %value.ptr ]
@7:
  [ %digit.ptr %self.ptr %value.ptr ]
  %14: i32 = const 1
  [ %digit.ptr %14 %self.ptr %value.ptr ]
  store %digit.ptr %14
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @9
  [ %self.ptr %value.ptr %digit.ptr ]
@8:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.3: u8 = load %char.ptr
  [ %char.3 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %15: u8 = const '2'
  [ %char.3 %15 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %16: bool = cmp_eq %char.3 %15
  [ %16 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %16 @10 @11
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@9:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @6
  [ %self.ptr %value.ptr %digit.ptr ]
@10:
  [ %digit.ptr %self.ptr %value.ptr ]
  %17: i32 = const 2
  [ %digit.ptr %17 %self.ptr %value.ptr ]
  store %digit.ptr %17
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @12
  [ %self.ptr %value.ptr %digit.ptr ]
@11:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.4: u8 = load %char.ptr
  [ %char.4 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %18: u8 = const '3'
  [ %char.4 %18 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %19: bool = cmp_eq %char.4 %18
  [ %19 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %19 @13 @14
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@12:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @9
  [ %self.ptr %value.ptr %digit.ptr ]
@13:
  [ %digit.ptr %self.ptr %value.ptr ]
  %20: i32 = const 3
  [ %digit.ptr %20 %self.ptr %value.ptr ]
  store %digit.ptr %20
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @15
  [ %self.ptr %value.ptr %digit.ptr ]
@14:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.5: u8 = load %char.ptr
  [ %char.5 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %21: u8 = const '4'
  [ %char.5 %21 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %22: bool = cmp_eq %char.5 %21
  [ %22 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %22 @16 @17
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@15:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @12
  [ %self.ptr %value.ptr %digit.ptr ]
@16:
  [ %digit.ptr %self.ptr %value.ptr ]
  %23: i32 = const 4
  [ %digit.ptr %23 %self.ptr %value.ptr ]
  store %digit.ptr %23
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @18
  [ %self.ptr %value.ptr %digit.ptr ]
@17:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.6: u8 = load %char.ptr
  [ %char.6 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %24: u8 = const '5'
  [ %char.6 %24 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %25: bool = cmp_eq %char.6 %24
  [ %25 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %25 @19 @20
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@18:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @15
  [ %self.ptr %value.ptr %digit.ptr ]
@19:
  [ %digit.ptr %self.ptr %value.ptr ]
  %26: i32 = const 5
  [ %digit.ptr %26 %self.ptr %value.ptr ]
  store %digit.ptr %26
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @21
  [ %self.ptr %value.ptr %digit.ptr ]
@20:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.7: u8 = load %char.ptr
  [ %char.7 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %27: u8 = const '6'
  [ %char.7 %27 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %28: bool = cmp_eq %char.7 %27
  [ %28 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %28 @22 @23
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@21:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @18
  [ %self.ptr %value.ptr %digit.ptr ]
@22:
  [ %digit.ptr %self.ptr %value.ptr ]
  %29: i32 = const 6
  [ %digit.ptr %29 %self.ptr %value.ptr ]
  store %digit.ptr %29
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @24
  [ %self.ptr %value.ptr %digit.ptr ]
@23:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.8: u8 = load %char.ptr
  [ %char.8 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %30: u8 = const '7'
  [ %char.8 %30 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %31: bool = cmp_eq %char.8 %30
  [ %31 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %31 @25 @26
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@24:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @21
  [ %self.ptr %value.ptr %digit.ptr ]
@25:
  [ %digit.ptr %self.ptr %value.ptr ]
  %32: i32 = const 7
  [ %digit.ptr %32 %self.ptr %value.ptr ]
  store %digit.ptr %32
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @27
  [ %self.ptr %value.ptr %digit.ptr ]
@26:
  [ %char.ptr %digit.ptr %self.ptr %value.ptr ]
  %char.9: u8 = load %char.ptr
  [ %char.9 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %33: u8 = const '8'
  [ %char.9 %33 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  %34: bool = cmp_eq %char.9 %33
  [ %34 %digit.ptr %char.ptr %self.ptr %value.ptr ]
  br %34 @28 @29
  [ %digit.ptr %self.ptr %value.ptr %char.ptr ]
@27:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @24
  [ %self.ptr %value.ptr %digit.ptr ]
@28:
  [ %digit.ptr %self.ptr %value.ptr ]
  %35: i32 = const 8
  [ %digit.ptr %35 %self.ptr %value.ptr ]
  store %digit.ptr %35
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @30
  [ %self.ptr %value.ptr %digit.ptr ]
@29:
  [ %char.ptr %digit.ptr %value.ptr %self.ptr ]
  %char.10: u8 = load %char.ptr
  [ %char.10 %digit.ptr %value.ptr %self.ptr ]
  %36: u8 = const '9'
  [ %char.10 %36 %digit.ptr %value.ptr %self.ptr ]
  %37: bool = cmp_eq %char.10 %36
  [ %37 %digit.ptr %value.ptr %self.ptr ]
  br %37 @31 @32
  [ %digit.ptr %self.ptr %value.ptr ]
@30:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @27
  [ %self.ptr %value.ptr %digit.ptr ]
@31:
  [ %digit.ptr %self.ptr %value.ptr ]
  %38: i32 = const 9
  [ %digit.ptr %38 %self.ptr %value.ptr ]
  store %digit.ptr %38
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @33
  [ %self.ptr %value.ptr %digit.ptr ]
@32:
  [ %value.ptr ]
  jmp @3
  [ %value.ptr ]
@33:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @30
  [ %self.ptr %value.ptr %digit.ptr ]
@34:
  [ %self.ptr %value.ptr %digit.ptr ]
  jmp @33
  [ %self.ptr %value.ptr %digit.ptr ]
}

$pFILE__write__char(%self: ptr<FILE>, %char: u8): ptr<FILE> {
@1:
  [ $stdout %char %self ]
  %self.ptr: ptr<ptr<FILE>> = alloc ptr<FILE>
  [ %self.ptr $stdout %char %self ]
  store %self.ptr %self
  [ %self.ptr $stdout %char ]
  %char.ptr: ptr<u8> = alloc u8
  [ %self.ptr $stdout %char.ptr %char ]
  store %char.ptr %char
  [ %self.ptr $stdout %char.ptr ]
  %char.1: u8 = load %char.ptr
  [ %self.ptr %char.1 $stdout ]
  %1: ptr<FILE> = load $stdout
  [ %self.ptr %char.1 %1 ]
  %2: i32 = call $fputc %char.1 %1
  [ %self.ptr ]
  %self.1: ptr<FILE> = load %self.ptr
  [ %self.1 ]
  ret %self.1
  [ ]
}

$pFILE__write__signed(%self: ptr<FILE>, %value: i32): ptr<FILE> {
@1:
  [ %value %self ]
  %self.ptr: ptr<ptr<FILE>> = alloc ptr<FILE>
  [ %value %self.ptr %self ]
  store %self.ptr %self
  [ %value %self.ptr ]
  %value.ptr: ptr<i32> = alloc i32
  [ %value.ptr %value %self.ptr ]
  store %value.ptr %value
  [ %value.ptr %self.ptr ]
  %value.1: i32 = load %value.ptr
  [ %value.1 %value.ptr %self.ptr ]
  %1: i32 = const 0
  [ %value.1 %1 %value.ptr %self.ptr ]
  %2: bool = cmp_lt %value.1 %1
  [ %2 %value.ptr %self.ptr ]
  br %2 @2 @3
  [ %value.ptr %self.ptr ]
@2:
  [ %value.ptr %self.ptr ]
  %self.1: ptr<FILE> = load %self.ptr
  [ %value.ptr %self.ptr %self.1 ]
  %3: u8 = const '-'
  [ %value.ptr %self.ptr %self.1 %3 ]
  %4: ptr<FILE> = call $pFILE__write__char %self.1 %3
  [ %value.ptr %self.ptr ]
  %self.2: ptr<FILE> = load %self.ptr
  [ %self.2 %value.ptr ]
  %value.2: i32 = load %value.ptr
  [ %self.2 %value.2 ]
  %5: i32 = neg %value.2
  [ %self.2 %5 ]
  %6: ptr<FILE> = call $pFILE__write__signed %self.2 %5
  [ %6 ]
  ret %6
  [ ]
@3:
  [ %value.ptr %self.ptr ]
  %value.3: i32 = load %value.ptr
  [ %value.3 %value.ptr %self.ptr ]
  %7: i32 = const 10
  [ %value.3 %7 %value.ptr %self.ptr ]
  %8: bool = cmp_ge %value.3 %7
  [ %8 %value.ptr %self.ptr ]
  br %8 @4 @5
  [ %value.ptr %self.ptr ]
@4:
  [ %value.ptr %self.ptr ]
  %self.3: ptr<FILE> = load %self.ptr
  [ %self.3 %value.ptr %self.ptr ]
  %value.4: i32 = load %value.ptr
  [ %self.3 %value.4 %value.ptr %self.ptr ]
  %9: i32 = const 10
  [ %self.3 %value.4 %9 %value.ptr %self.ptr ]
  %10: i32 = div %value.4 %9
  [ %self.3 %10 %value.ptr %self.ptr ]
  %11: ptr<FILE> = call $pFILE__write__signed %self.3 %10
  [ %value.ptr %self.ptr ]
  jmp @5
  [ %value.ptr %self.ptr ]
@5:
  [ %value.ptr %self.ptr ]
  %digit.ptr: ptr<i32> = alloc i32
  [ %digit.ptr %value.ptr %self.ptr ]
  %value.5: i32 = load %value.ptr
  [ %digit.ptr %value.5 %self.ptr ]
  %12: i32 = const 10
  [ %digit.ptr %value.5 %12 %self.ptr ]
  %13: i32 = mod %value.5 %12
  [ %digit.ptr %13 %self.ptr ]
  store %digit.ptr %13
  [ %digit.ptr %self.ptr ]
  %char.ptr: ptr<u8> = alloc u8
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.1: i32 = load %digit.ptr
  [ %digit.1 %char.ptr %digit.ptr %self.ptr ]
  %14: i32 = const 0
  [ %digit.1 %14 %char.ptr %digit.ptr %self.ptr ]
  %15: bool = cmp_eq %digit.1 %14
  [ %15 %char.ptr %digit.ptr %self.ptr ]
  br %15 @6 @7
  [ %char.ptr %self.ptr %digit.ptr ]
@6:
  [ %char.ptr %self.ptr ]
  %16: u8 = const '0'
  [ %char.ptr %16 %self.ptr ]
  store %char.ptr %16
  [ %self.ptr %char.ptr ]
  jmp @8
  [ %self.ptr %char.ptr ]
@7:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.2: i32 = load %digit.ptr
  [ %digit.2 %char.ptr %digit.ptr %self.ptr ]
  %17: i32 = const 1
  [ %digit.2 %17 %char.ptr %digit.ptr %self.ptr ]
  %18: bool = cmp_eq %digit.2 %17
  [ %18 %char.ptr %digit.ptr %self.ptr ]
  br %18 @9 @10
  [ %char.ptr %self.ptr %digit.ptr ]
@8:
  [ %self.ptr %char.ptr ]
  %self.4: ptr<FILE> = load %self.ptr
  [ %self.ptr %self.4 %char.ptr ]
  %char.1: u8 = load %char.ptr
  [ %self.ptr %self.4 %char.1 ]
  %44: ptr<FILE> = call $pFILE__write__char %self.4 %char.1
  [ %self.ptr ]
  %self.5: ptr<FILE> = load %self.ptr
  [ %self.5 ]
  ret %self.5
  [ ]
@9:
  [ %char.ptr %self.ptr ]
  %19: u8 = const '1'
  [ %char.ptr %19 %self.ptr ]
  store %char.ptr %19
  [ %self.ptr %char.ptr ]
  jmp @11
  [ %self.ptr %char.ptr ]
@10:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.3: i32 = load %digit.ptr
  [ %digit.3 %char.ptr %digit.ptr %self.ptr ]
  %20: i32 = const 2
  [ %digit.3 %20 %char.ptr %digit.ptr %self.ptr ]
  %21: bool = cmp_eq %digit.3 %20
  [ %21 %char.ptr %digit.ptr %self.ptr ]
  br %21 @12 @13
  [ %char.ptr %self.ptr %digit.ptr ]
@11:
  [ %self.ptr %char.ptr ]
  jmp @8
  [ %self.ptr %char.ptr ]
@12:
  [ %char.ptr %self.ptr ]
  %22: u8 = const '2'
  [ %char.ptr %22 %self.ptr ]
  store %char.ptr %22
  [ %self.ptr %char.ptr ]
  jmp @14
  [ %self.ptr %char.ptr ]
@13:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.4: i32 = load %digit.ptr
  [ %digit.4 %char.ptr %digit.ptr %self.ptr ]
  %23: i32 = const 3
  [ %digit.4 %23 %char.ptr %digit.ptr %self.ptr ]
  %24: bool = cmp_eq %digit.4 %23
  [ %24 %char.ptr %digit.ptr %self.ptr ]
  br %24 @15 @16
  [ %char.ptr %self.ptr %digit.ptr ]
@14:
  [ %self.ptr %char.ptr ]
  jmp @11
  [ %self.ptr %char.ptr ]
@15:
  [ %char.ptr %self.ptr ]
  %25: u8 = const '3'
  [ %char.ptr %25 %self.ptr ]
  store %char.ptr %25
  [ %self.ptr %char.ptr ]
  jmp @17
  [ %self.ptr %char.ptr ]
@16:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.5: i32 = load %digit.ptr
  [ %digit.5 %char.ptr %digit.ptr %self.ptr ]
  %26: i32 = const 4
  [ %digit.5 %26 %char.ptr %digit.ptr %self.ptr ]
  %27: bool = cmp_eq %digit.5 %26
  [ %27 %char.ptr %digit.ptr %self.ptr ]
  br %27 @18 @19
  [ %char.ptr %self.ptr %digit.ptr ]
@17:
  [ %self.ptr %char.ptr ]
  jmp @14
  [ %self.ptr %char.ptr ]
@18:
  [ %char.ptr %self.ptr ]
  %28: u8 = const '4'
  [ %char.ptr %28 %self.ptr ]
  store %char.ptr %28
  [ %self.ptr %char.ptr ]
  jmp @20
  [ %self.ptr %char.ptr ]
@19:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.6: i32 = load %digit.ptr
  [ %digit.6 %char.ptr %digit.ptr %self.ptr ]
  %29: i32 = const 5
  [ %digit.6 %29 %char.ptr %digit.ptr %self.ptr ]
  %30: bool = cmp_eq %digit.6 %29
  [ %30 %char.ptr %digit.ptr %self.ptr ]
  br %30 @21 @22
  [ %char.ptr %self.ptr %digit.ptr ]
@20:
  [ %self.ptr %char.ptr ]
  jmp @17
  [ %self.ptr %char.ptr ]
@21:
  [ %char.ptr %self.ptr ]
  %31: u8 = const '5'
  [ %char.ptr %31 %self.ptr ]
  store %char.ptr %31
  [ %self.ptr %char.ptr ]
  jmp @23
  [ %self.ptr %char.ptr ]
@22:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.7: i32 = load %digit.ptr
  [ %digit.7 %char.ptr %digit.ptr %self.ptr ]
  %32: i32 = const 6
  [ %digit.7 %32 %char.ptr %digit.ptr %self.ptr ]
  %33: bool = cmp_eq %digit.7 %32
  [ %33 %char.ptr %digit.ptr %self.ptr ]
  br %33 @24 @25
  [ %char.ptr %self.ptr %digit.ptr ]
@23:
  [ %self.ptr %char.ptr ]
  jmp @20
  [ %self.ptr %char.ptr ]
@24:
  [ %char.ptr %self.ptr ]
  %34: u8 = const '6'
  [ %char.ptr %34 %self.ptr ]
  store %char.ptr %34
  [ %self.ptr %char.ptr ]
  jmp @26
  [ %self.ptr %char.ptr ]
@25:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.8: i32 = load %digit.ptr
  [ %digit.8 %char.ptr %digit.ptr %self.ptr ]
  %35: i32 = const 7
  [ %digit.8 %35 %char.ptr %digit.ptr %self.ptr ]
  %36: bool = cmp_eq %digit.8 %35
  [ %36 %char.ptr %digit.ptr %self.ptr ]
  br %36 @27 @28
  [ %char.ptr %self.ptr %digit.ptr ]
@26:
  [ %self.ptr %char.ptr ]
  jmp @23
  [ %self.ptr %char.ptr ]
@27:
  [ %char.ptr %self.ptr ]
  %37: u8 = const '7'
  [ %char.ptr %37 %self.ptr ]
  store %char.ptr %37
  [ %self.ptr %char.ptr ]
  jmp @29
  [ %self.ptr %char.ptr ]
@28:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.9: i32 = load %digit.ptr
  [ %digit.9 %char.ptr %digit.ptr %self.ptr ]
  %38: i32 = const 8
  [ %digit.9 %38 %char.ptr %digit.ptr %self.ptr ]
  %39: bool = cmp_eq %digit.9 %38
  [ %39 %char.ptr %digit.ptr %self.ptr ]
  br %39 @30 @31
  [ %char.ptr %self.ptr %digit.ptr ]
@29:
  [ %self.ptr %char.ptr ]
  jmp @26
  [ %self.ptr %char.ptr ]
@30:
  [ %char.ptr %self.ptr ]
  %40: u8 = const '8'
  [ %char.ptr %40 %self.ptr ]
  store %char.ptr %40
  [ %self.ptr %char.ptr ]
  jmp @32
  [ %self.ptr %char.ptr ]
@31:
  [ %digit.ptr %char.ptr %self.ptr ]
  %digit.10: i32 = load %digit.ptr
  [ %digit.10 %char.ptr %self.ptr ]
  %41: i32 = const 9
  [ %digit.10 %41 %char.ptr %self.ptr ]
  %42: bool = cmp_eq %digit.10 %41
  [ %42 %char.ptr %self.ptr ]
  br %42 @33 @34
  [ %char.ptr %self.ptr ]
@32:
  [ %self.ptr %char.ptr ]
  jmp @29
  [ %self.ptr %char.ptr ]
@33:
  [ %char.ptr %self.ptr ]
  %43: u8 = const '9'
  [ %char.ptr %43 %self.ptr ]
  store %char.ptr %43
  [ %self.ptr %char.ptr ]
  jmp @34
  [ %self.ptr %char.ptr ]
@34:
  [ %self.ptr %char.ptr ]
  jmp @32
  [ %self.ptr %char.ptr ]
}

$pFILE__write__token(%self: ptr<FILE>, %token: ptr<Token>): ptr<FILE> {
@1:
  [ %token %self ]
  %self.ptr: ptr<ptr<FILE>> = alloc ptr<FILE>
  [ %self.ptr %token %self ]
  store %self.ptr %self
  [ %self.ptr %token ]
  %token.ptr: ptr<ptr<Token>> = alloc ptr<Token>
  [ %token.ptr %self.ptr %token ]
  store %token.ptr %token
  [ %token.ptr %self.ptr ]
  %self.1: ptr<FILE> = load %self.ptr
  [ %token.ptr %self.1 %self.ptr ]
  %1: ptr<Token> = load %token.ptr
  [ %token.ptr %self.1 %1 %self.ptr ]
  %2: ptr<u8> = offset %1 Token.kind
  [ %token.ptr %self.1 %2 %self.ptr ]
  %3: u8 = load %2
  [ %token.ptr %self.1 %3 %self.ptr ]
  %4: ptr<FILE> = call $pFILE__write__char %self.1 %3
  [ %token.ptr %self.ptr ]
  %5: ptr<Token> = load %token.ptr
  [ %5 %token.ptr %self.ptr ]
  %6: ptr<u8> = offset %5 Token.kind
  [ %6 %token.ptr %self.ptr ]
  %7: u8 = load %6
  [ %7 %token.ptr %self.ptr ]
  %8: u8 = const 'n'
  [ %7 %8 %token.ptr %self.ptr ]
  %9: bool = cmp_eq %7 %8
  [ %9 %token.ptr %self.ptr ]
  br %9 @2 @3
  [ %token.ptr %self.ptr ]
@2:
  [ %token.ptr %self.ptr ]
  %self.2: ptr<FILE> = load %self.ptr
  [ %token.ptr %self.2 %self.ptr ]
  %10: u8 = const ':'
  [ %token.ptr %self.2 %10 %self.ptr ]
  %11: ptr<FILE> = call $pFILE__write__char %self.2 %10
  [ %token.ptr %11 %self.ptr ]
  %12: u8 = const ' '
  [ %token.ptr %11 %12 %self.ptr ]
  %13: ptr<FILE> = call $pFILE__write__char %11 %12
  [ %13 %token.ptr %self.ptr ]
  %14: ptr<Token> = load %token.ptr
  [ %13 %14 %self.ptr ]
  %15: ptr<i32> = offset %14 Token.value
  [ %13 %15 %self.ptr ]
  %16: i32 = load %15
  [ %13 %16 %self.ptr ]
  %17: ptr<FILE> = call $pFILE__write__signed %13 %16
  [ %self.ptr ]
  jmp @3
  [ %self.ptr ]
@3:
  [ %self.ptr ]
  %self.3: ptr<FILE> = load %self.ptr
  [ %self.3 ]
  ret %self.3
  [ ]
}

$pFILE__end_line(%self: ptr<FILE>): ptr<FILE> {
@1:
  [ %self ]
  %self.ptr: ptr<ptr<FILE>> = alloc ptr<FILE>
  [ %self.ptr %self ]
  store %self.ptr %self
  [ %self.ptr ]
  %self.1: ptr<FILE> = load %self.ptr
  [ %self.ptr %self.1 ]
  %1: u8 = const '\n'
  [ %self.ptr %self.1 %1 ]
  %2: ptr<FILE> = call $pFILE__write__char %self.1 %1
  [ %self.ptr ]
  %self.2: ptr<FILE> = load %self.ptr
  [ %self.2 ]
  ret %self.2
  [ ]
}

$fputc(%c: u8, %file: ptr<FILE>): i32

$malloc(%size: u64): ptr<Any>

$exit(%code: i32)
