struct String {
    data: [@]u8
    length: usize
}

external func malloc(anon size: usize) -> @Any

func str.concat(self, anon other: str) -> str {
    if self.length == 0 {
        return other
    }
    let result = make String(
        data: malloc(self.length + other.length).as([@]u8)
        length: self.length + other.length
    )
    if self.length > 0 {
        let self_data = (@self).as(@String).data
        let index: usize = 0
        while index < self.length {
            result.data[index] = self_data[index]
            index = index + 1
        }
    }
    if other.length > 0 {
        let other_data = (@other).as(@String).data
        let index: usize = 0
        while index < other.length {
            result.data[self.length + index] = other_data[index]
            index = index + 1
        }
    }
    return (@result).as(@str).@
}

func str.equals(self, anon other: str) -> bool {
    if self.length != other.length {
        return false
    }
    let self_data = (@self).as(@String).data
    let other_data = (@other).as(@String).data
    if self_data == other_data {
        return true
    }
    let index: usize = 0
    while index < self.length {
        if self_data[index] != other_data[index] {
            return false
        }
        index = index + 1
    }
    return true
}

func main() -> i32 {
    let message = "Hello".concat(" world!")
    if not message.equals("Hello world!") {
        return 1
    }
    if not "Hello".equals("Hello") {
        return 2
    }
    if "".concat("").length != 0 {
        return 3
    }
    return 0
}
