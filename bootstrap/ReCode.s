  .file 1 "bootstrap/ReCode.code"
  .file 2 "bootstrap/code/compiler/Generator.code"
  .file 3 "bootstrap/code/compiler/IR_Builder.code"
  .file 4 "bootstrap/code/compiler/Counter.code"
  .file 5 "bootstrap/code/compiler/IR.code"
  .file 6 "bootstrap/code/compiler/IR_Values_Map.code"
  .file 7 "bootstrap/code/compiler/Parser.code"
  .file 8 "bootstrap/code/compiler/AST.code"
  .file 9 "bootstrap/code/compiler/Scanner.code"
  .file 10 "bootstrap/code/compiler/Token.code"
  .file 11 "bootstrap/code/compiler/Source.code"
  .file 12 "bootstrap/code/compiler/List.code"
  .file 13 "bootstrap/code/lang/Object.code"
  .file 14 "bootstrap/code/lang/String.code"
  .file 15 "bootstrap/code/core/Platform.code"

  .intel_syntax noprefix

  .bss

  .loc 1 3 1
  .text
  .globl main
main:
main_1:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR main_1__stack_frame_size[rip]
  sub rsp, rax
.LABEL__main_1__1:
  # argc.1: Int = load_variable(argc)
  # [live values]: argc.1:rdi 
  # argv.1: @@Int8 = load_variable(argv)
  # [live values]: argc.1:rdi argv.1:rsi 
  .loc 1 4 9
  # $1.1: Boolean = argc.1 < 3
  cmp rdi, 3
  setl al
  # [live values]: argc.1:rdi argv.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__main_1__2, .LABEL__main_1__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__main_1__3
.LABEL__main_1__2:
  .loc 1 5 9
  # $2.1: @FILE = call(write_337, stdout, "Usage:")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_0[rip] # "Usage:"
  call write_337
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 5 9
  # $3.1: @FILE = call(end_line_340, $2.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  .loc 1 6 9
  # $4.1: @FILE = call(write_339, stdout, '\t')
  mov rdi, stdout[rip]
  mov sil, 9
  call write_339
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 6 34
  # $5.1: @Int8 = load_array_item(argv.1, 0)
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax $5.1:rbx 
  .loc 1 6 9
  # $6.1: @FILE = call(write_338, $4.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_338
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 6 9
  # $7.1: @FILE = call(write_337, $6.1, " <INPUT FILE> <OUTPUT FILE>")
  mov rdi, rax
  lea rsi, .LABEL__string_1[rip] # " <INPUT FILE> <OUTPUT FILE>"
  call write_337
  # [discarded value]: $6.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $7.1:rax 
  .loc 1 6 9
  # $8.1: @FILE = call(end_line_340, $7.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  .loc 1 7 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__main_1__3:
  .loc 1 10 39
  # $9.1: @Int8 = load_array_item(argv.1, 1)
  mov rax, [rbp-9]
  add rax, 8
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 10 25
  # source_file_path.1: @String = call(create_string_344, $9.1)
  mov rdi, rax
  call create_string_344
  # [discarded value]: $9.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:rax 
  .loc 1 11 9
  # $11.1: Boolean = call(ends_with_349, source_file_path.1, ".code")
  mov rdi, rax
  lea rsi, .LABEL__string_2[rip] # ".code"
  mov [rbp-25], rax
  call ends_with_349
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $11.1:rax 
  .loc 1 11 9
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:rbx 
  # jump($12.1, .LABEL__main_1__4, .LABEL__main_1__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__main_1__5
.LABEL__main_1__4:
  .loc 1 12 9
  # $13.1: @FILE = call(write_337, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_337
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $13.1:rax 
  .loc 1 12 9
  # $14.1: @FILE = call(write_337, $13.1, source_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_337
  # [discarded value]: $13.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $14.1:rax 
  .loc 1 12 9
  # $15.1: @FILE = call(write_337, $14.1, "' doesn't end with '.code'.")
  mov rdi, rax
  lea rsi, .LABEL__string_4[rip] # "' doesn't end with '.code'."
  call write_337
  # [discarded value]: $14.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $15.1:rax 
  .loc 1 12 9
  # $16.1: @FILE = call(end_line_340, $15.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  .loc 1 13 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
.LABEL__main_1__5:
  .loc 1 16 39
  # $17.1: @Int8 = load_array_item(argv.1, 2)
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $17.1:rax 
  .loc 1 16 25
  # output_file_path.1: @String = call(create_string_344, $17.1)
  mov rdi, rax
  call create_string_344
  # [discarded value]: $17.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:rax 
  .loc 1 17 9
  # $19.1: Boolean = call(ends_with_349, output_file_path.1, ".s")
  mov rdi, rax
  lea rsi, .LABEL__string_5[rip] # ".s"
  mov [rbp-34], rax
  call ends_with_349
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $19.1:rax 
  .loc 1 17 9
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:rbx 
  # jump($20.1, .LABEL__main_1__6, .LABEL__main_1__7)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__main_1__7
.LABEL__main_1__6:
  .loc 1 18 9
  # $21.1: @FILE = call(write_337, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_337
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $21.1:rax 
  .loc 1 18 9
  # $22.1: @FILE = call(write_337, $21.1, output_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_337
  # [discarded value]: $21.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $22.1:rax 
  .loc 1 18 9
  # $23.1: @FILE = call(write_337, $22.1, "' doesn't end with '.s'.")
  mov rdi, rax
  lea rsi, .LABEL__string_6[rip] # "' doesn't end with '.s'."
  call write_337
  # [discarded value]: $22.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $23.1:rax 
  .loc 1 18 9
  # $24.1: @FILE = call(end_line_340, $23.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  .loc 1 19 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
.LABEL__main_1__7:
  .loc 1 22 5
  # dump_file_path.1: @String = null
  xor rax, rax
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax 
  .loc 1 23 9
  # $25.1: Boolean = argc.1 >= 4
  cmp QWORD PTR [rbp-17], 4
  setge bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax $25.1:rbx 
  # jump($25.1, .LABEL__main_1__8, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__main_1__9
.LABEL__main_1__8:
  .loc 1 24 40
  # $26.1: @Int8 = load_array_item(argv.1, 3)
  mov rax, [rbp-9]
  add rax, 24
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] $26.1:rax 
  .loc 1 24 26
  # dump_file_path.2: @String = call(create_string_344, $26.1)
  mov rdi, rax
  call create_string_344
  # [discarded value]: $26.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:rax:[rbp-43] 
  .loc 1 25 13
  # $28.1: Boolean = call(ends_with_349, dump_file_path.2, ".ir")
  mov rdi, rax
  lea rsi, .LABEL__string_7[rip] # ".ir"
  mov [rbp-43], rax
  call ends_with_349
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $28.1:rax 
  .loc 1 25 13
  # $29.1: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:rbx 
  # jump($29.1, .LABEL__main_1__10, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__main_1__9
.LABEL__main_1__10:
  .loc 1 26 13
  # $30.1: @FILE = call(write_337, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_337
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $30.1:rax 
  .loc 1 26 13
  # $31.1: @FILE = call(write_337, $30.1, dump_file_path.2)
  mov rdi, rax
  mov rsi, [rbp-43]
  call write_337
  # [discarded value]: $30.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $31.1:rax 
  .loc 1 26 13
  # $32.1: @FILE = call(write_337, $31.1, "' doesn't end with '.ir'.")
  mov rdi, rax
  lea rsi, .LABEL__string_8[rip] # "' doesn't end with '.ir'."
  call write_337
  # [discarded value]: $31.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $32.1:rax 
  .loc 1 26 13
  # $33.1: @FILE = call(end_line_340, $32.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  .loc 1 27 13
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
.LABEL__main_1__9:
  # dump_file_path.4: @String = phi(dump_file_path.1, dump_file_path.2)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] 
  .loc 1 31 25
  # compilation_unit.1: @Compilation_Unit = call(parse_250, source_file_path.1)
  mov rdi, [rbp-25]
  call parse_250
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] compilation_unit.1:rax 
  .loc 1 34 14
  # build.1: @IR_Build = call(build_63, compilation_unit.1)
  mov rdi, rax
  call build_63
  # [discarded value]: compilation_unit.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax 
  .loc 1 35 9
  # $36.1: Boolean = dump_file_path.4 != null
  cmp QWORD PTR [rbp-43], 0
  setne bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax $36.1:rbx 
  # jump($36.1, .LABEL__main_1__12, .LABEL__main_1__13)
  test bl, bl
  mov [rbp-53], rax
  mov [rbp-54], bl
  jz .LABEL__main_1__13
.LABEL__main_1__12:
  .loc 1 36 28
  # $37.1: @Int8 = load_struct_member(dump_file_path.4, data)
  mov rax, [rbp-43]
  mov rbx, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx 
  .loc 1 36 49
  # $38.1: @Int8 = load_struct_member("w", data)
  lea r15, .LABEL__string_9[rip] # "w"
  mov r14, [r15]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx $38.1:r14 
  .loc 1 36 22
  # dump_file.1: @FILE = call(fopen, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call fopen
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:rax 
  .loc 1 37 9
  # call(dump_64, build.1, dump_file.1)
  mov rdi, [rbp-53]
  mov rsi, rax
  mov [rbp-62], rax
  call dump_64
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:[rbp-62] 
  .loc 1 38 9
  # $40.1: Int32 = call(fclose, dump_file.1)
  mov rdi, [rbp-62]
  call fclose
  # [discarded value]: $40.1
  # [discarded value]: dump_file.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # jump(.LABEL__main_1__13)
.LABEL__main_1__13:
  .loc 1 41 5
  # call(generate_2, build.1, output_file_path.1)
  mov rdi, [rbp-53]
  mov rsi, [rbp-34]
  call generate_2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # return()
  jmp .LABEL__main_1__end
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [discarded value]: $36.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] 
  # [discarded value]: build.1
  # [discarded value]: dump_file_path.4
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  # [discarded value]: $29.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] 
  # [discarded value]: dump_file_path.2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] 
  # [discarded value]: $25.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] 
  # [discarded value]: dump_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  # [discarded value]: $20.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] 
  # [discarded value]: output_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  # [discarded value]: $12.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] 
  # [discarded value]: source_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] 
  # [discarded value]: argv.1
  # [discarded value]: argc.1
  # [live values]: 
.LABEL__main_1__end:
  mov rsp, rbp
  pop rbp
  xor rax, rax
  ret

main_1__stack_frame_size: .word 64

  .loc 2 3 1
  .text
generate_2:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_2__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_2__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: build.1:rdi output_file_path.1:rsi 
  .loc 2 4 18
  # generator.1: @MC_Generator = call(create_mc_generator_36, output_file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_mc_generator_36
  # [discarded value]: output_file_path.1
  # [live values]: build.1:[rbp-8] generator.1:rax 
  .loc 2 6 27
  # $2.1: @List = load_struct_member(build.1, sources)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax $2.1:r15 
  .loc 2 6 27
  # build_sources_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax build_sources_item.1:r14 
  # jump(.LABEL__generate_2__2)
  mov [rbp-16], rax
  mov [rbp-24], r14
.LABEL__generate_2__2:
  # build_sources_item.2: @List_Item = phi(build_sources_item.1, build_sources_item.4)
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  .loc 2 7 12
  # $4.1: Boolean = build_sources_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__generate_2__3, .LABEL__generate_2__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_2__4
.LABEL__generate_2__3:
  .loc 2 8 25
  # build_source.1: @Source = load_struct_member(build_sources_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx 
  .loc 2 9 9
  # $7.1: @FILE = load_struct_member(generator.1, output_file)
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: build.1:[rbp-8] generator.1:r15:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx $7.1:r14 
  .loc 2 9 9
  # $8.1: @FILE = call(write_337, $7.1, "  .file ")
  mov rdi, r14
  lea rsi, .LABEL__string_10[rip] # "  .file "
  mov [rbp-33], rbx
  call write_337
  # [discarded value]: $7.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $8.1:rax 
  .loc 2 9 55
  # $9.1: Int = load_struct_member(build_source.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:rbx:[rbp-33] $8.1:rax $9.1:r15 
  .loc 2 9 9
  # $10.1: @FILE = call(write_336, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $10.1:rax 
  .loc 2 9 9
  # $11.1: @FILE = call(write_337, $10.1, " \"")
  mov rdi, rax
  lea rsi, .LABEL__string_11[rip] # " \""
  call write_337
  # [discarded value]: $10.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $11.1:rax 
  .loc 2 9 91
  # $12.1: @String = load_struct_member(build_source.1, file_path)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: build_source.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $11.1:rax $12.1:r15 
  .loc 2 9 9
  # $13.1: @FILE = call(write_337, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $13.1:rax 
  .loc 2 9 9
  # $14.1: @FILE = call(write_337, $13.1, "\"")
  mov rdi, rax
  lea rsi, .LABEL__string_12[rip] # "\""
  call write_337
  # [discarded value]: $13.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $14.1:rax 
  .loc 2 9 9
  # $15.1: @FILE = call(end_line_340, $14.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 10 30
  # build_sources_item.4: @List_Item = load_struct_member(build_sources_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:rbx:[rbp-24] 
  # jump(.LABEL__generate_2__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_2__2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:[rbp-24] 
  # [discarded value]: build_sources_item.4
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_2__4:
  .loc 2 13 5
  # $17.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $17.1:rbx 
  .loc 2 13 5
  # $18.1: @FILE = call(write_line_335, $17.1, "  .intel_syntax noprefix")
  mov rdi, rbx
  lea rsi, .LABEL__string_13[rip] # "  .intel_syntax noprefix"
  call write_line_335
  # [discarded value]: $17.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $18.1:rax 
  .loc 2 13 5
  # $19.1: @FILE = call(end_line_340, $18.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 15 41
  # $20.1: @List = load_struct_member(build.1, global_variables)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $20.1:rbx 
  .loc 2 15 5
  # call(generate_global_variables_62, generator.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_global_variables_62
  # [discarded value]: $20.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 17 18
  # $21.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $21.1:rbx 
  .loc 2 17 18
  # functions.1: @List_Iterator = call(create_iterator_329, $21.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $21.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:rax 
  # jump(.LABEL__generate_2__5)
  mov [rbp-33], rax
.LABEL__generate_2__5:
  .loc 2 18 12
  # $23.1: Boolean = call(has_next_332, functions.1)
  mov rdi, [rbp-33]
  call has_next_332
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:rax 
  # jump($23.1, .LABEL__generate_2__6, .LABEL__generate_2__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_2__7
.LABEL__generate_2__6:
  .loc 2 19 21
  # function.1: @IR_Function = call(next_333, functions.1)
  mov rdi, [rbp-33]
  call next_333
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax 
  .loc 2 20 13
  # $26.1: Boolean = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax $26.1:rbx 
  .loc 2 20 13
  # $27.1: Boolean = $26.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $26.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax $27.1:r15 
  # jump($27.1, .LABEL__generate_2__8, .LABEL__generate_2__5)
  test r15b, r15b
  mov [rbp-42], rax
  mov [rbp-43], r15b
  jz .LABEL__generate_2__5
.LABEL__generate_2__8:
  .loc 2 21 13
  # call(generate_function_3, generator.1, function.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  call generate_function_3
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] $27.1:[rbp-43] 
  # jump(.LABEL__generate_2__5)
  jmp .LABEL__generate_2__5
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] $27.1:[rbp-43] 
  # [discarded value]: $27.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] 
  # [discarded value]: function.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
.LABEL__generate_2__7:
  .loc 2 25 5
  # call(generate_strings_58, generator.1)
  mov rdi, [rbp-16]
  call generate_strings_58
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  .loc 2 27 37
  # $28.1: @List = load_struct_member(build.1, named_types)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] $28.1:rbx 
  .loc 2 27 5
  # call(generate_object_types_60, generator.1, $28.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_object_types_60
  # [discarded value]: $28.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  .loc 2 29 5
  # $29.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] $29.1:rbx 
  .loc 2 29 5
  # $30.1: Int32 = call(fclose, $29.1)
  mov rdi, rbx
  call fclose
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  # return()
  jmp .LABEL__generate_2__end
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  # [discarded value]: $23.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [discarded value]: functions.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [discarded value]: build_sources_item.2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [discarded value]: build_sources_item.1
  # [discarded value]: generator.1
  # [discarded value]: build.1
  # [live values]: 
.LABEL__generate_2__end:
  mov rsp, rbp
  pop rbp
  ret

generate_2__stack_frame_size: .word 48

  .loc 2 32 1
  .text
generate_function_3:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_function_3__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_function_3__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 2 33 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi function.1:rsi $1.1:rax 
  .loc 2 33 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_340
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 34 5
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $3.1:rbx 
  .loc 2 34 5
  # $4.1: @FILE = call(write_337, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_337
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax 
  .loc 2 34 45
  # $5.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  .loc 2 34 45
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $6.1:r14 
  .loc 2 34 45
  # $7.1: Int = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $7.1:r15 
  .loc 2 34 5
  # $8.1: @FILE = call(write_336, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $8.1:rax 
  .loc 2 34 5
  # $9.1: @FILE = call(write_339, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax 
  .loc 2 34 91
  # $10.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $10.1:r15 
  .loc 2 34 91
  # $11.1: Int = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $11.1:r14 
  .loc 2 34 5
  # $12.1: @FILE = call(write_336, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $12.1:rax 
  .loc 2 34 5
  # $13.1: @FILE = call(write_339, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax 
  .loc 2 34 132
  # $14.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $14.1:r15 
  .loc 2 34 132
  # $15.1: Int = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $15.1:r14 
  .loc 2 34 5
  # $16.1: @FILE = call(write_336, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $16.1:rax 
  .loc 2 34 5
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 35 5
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $18.1:rbx 
  .loc 2 35 5
  # $19.1: @FILE = call(write_337, $18.1, "  .text")
  mov rdi, rbx
  lea rsi, .LABEL__string_15[rip] # "  .text"
  call write_337
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $19.1:rax 
  .loc 2 35 5
  # $20.1: @FILE = call(end_line_340, $19.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 36 9
  # $21.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $21.1:rbx 
  .loc 2 36 9
  # $22.1: Boolean = call(equals_346, $21.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_346
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:rax 
  # jump($22.1, .LABEL__generate_function_3__2, .LABEL__generate_function_3__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_function_3__3
.LABEL__generate_function_3__2:
  .loc 2 37 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $23.1:rbx 
  .loc 2 37 9
  # $24.1: @FILE = call(write_337, $23.1, "  .globl main")
  mov rdi, rbx
  lea rsi, .LABEL__string_17[rip] # "  .globl main"
  call write_337
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $24.1:rax 
  .loc 2 37 9
  # $25.1: @FILE = call(end_line_340, $24.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 38 9
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $26.1:rbx 
  .loc 2 38 9
  # $27.1: @FILE = call(write_337, $26.1, "main:")
  mov rdi, rbx
  lea rsi, .LABEL__string_18[rip] # "main:"
  call write_337
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $27.1:rax 
  .loc 2 38 9
  # $28.1: @FILE = call(end_line_340, $27.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # jump(.LABEL__generate_function_3__3)
.LABEL__generate_function_3__3:
  .loc 2 40 5
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $29.1:rbx 
  .loc 2 40 5
  # $30.1: @FILE = call(write_function_label_4, $29.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $30.1:rax 
  .loc 2 40 5
  # $31.1: @FILE = call(write_339, $30.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $31.1:rax 
  .loc 2 40 5
  # $32.1: @FILE = call(end_line_340, $31.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 41 5
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $33.1:rbx 
  .loc 2 41 5
  # $34.1: @FILE = call(write_337, $33.1, "  push rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_19[rip] # "  push rbp"
  call write_337
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $34.1:rax 
  .loc 2 41 5
  # $35.1: @FILE = call(end_line_340, $34.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 42 5
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $36.1:rbx 
  .loc 2 42 5
  # $37.1: @FILE = call(write_337, $36.1, "  mov rbp, rsp")
  mov rdi, rbx
  lea rsi, .LABEL__string_20[rip] # "  mov rbp, rsp"
  call write_337
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $37.1:rax 
  .loc 2 42 5
  # $38.1: @FILE = call(end_line_340, $37.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 43 5
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $39.1:rbx 
  .loc 2 43 5
  # $40.1: @FILE = call(write_337, $39.1, "  movsx rax, WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_21[rip] # "  movsx rax, WORD PTR "
  call write_337
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $40.1:rax 
  .loc 2 43 5
  # $41.1: @FILE = call(write_function_label_4, $40.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $41.1:rax 
  .loc 2 43 5
  # $42.1: @FILE = call(write_337, $41.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_337
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $42.1:rax 
  .loc 2 43 5
  # $43.1: @FILE = call(write_337, $42.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_337
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $43.1:rax 
  .loc 2 43 5
  # $44.1: @FILE = call(end_line_340, $43.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 44 5
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $45.1:rbx 
  .loc 2 44 5
  # $46.1: @FILE = call(write_337, $45.1, "  sub rsp, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_24[rip] # "  sub rsp, rax"
  call write_337
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $46.1:rax 
  .loc 2 44 5
  # $47.1: @FILE = call(end_line_340, $46.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 46 15
  # $48.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] $48.1:rbx 
  .loc 2 46 15
  # blocks.1: @List_Iterator = call(create_iterator_329, $48.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:rax 
  # jump(.LABEL__generate_function_3__4)
  mov [rbp-25], rax
.LABEL__generate_function_3__4:
  .loc 2 47 12
  # $50.1: Boolean = call(has_next_332, blocks.1)
  mov rdi, [rbp-25]
  call has_next_332
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:rax 
  # jump($50.1, .LABEL__generate_function_3__5, .LABEL__generate_function_3__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_function_3__6
.LABEL__generate_function_3__5:
  .loc 2 48 18
  # block.1: @IR_Block = call(next_333, blocks.1)
  mov rdi, [rbp-25]
  call next_333
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block.1:rax 
  .loc 2 49 30
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:rbx 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
.LABEL__generate_function_3__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 2 50 16
  # $54.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:rax 
  # jump($54.1, .LABEL__generate_function_3__8, .LABEL__generate_function_3__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_function_3__4
.LABEL__generate_function_3__8:
  .loc 2 51 17
  # $55.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $55.1:rbx 
  .loc 2 51 17
  # $56.1: Boolean = $55.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $56.1:r15 
  # jump($56.1, .LABEL__generate_function_3__10, .LABEL__generate_function_3__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_function_3__11
.LABEL__generate_function_3__10:
  .loc 2 52 17
  # call(create_mc_value_39, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  call create_mc_value_39
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_function_3__11)
.LABEL__generate_function_3__11:
  .loc 2 54 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:rbx:[rbp-34] 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
  jmp .LABEL__generate_function_3__7
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:[rbp-34] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
.LABEL__generate_function_3__6:
  .loc 2 58 25
  # $58.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $58.1:rbx 
  .loc 2 58 25
  # $60.1: @IR_Block = call(first_327, $58.1)
  mov rdi, rbx
  call first_327
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $60.1:rax 
  .loc 2 58 5
  # call(generate_block_7, self.1, $60.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_7
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 60 5
  # call(output_unreached_ir_instructions_6, self.1)
  mov rdi, [rbp-8]
  call output_unreached_ir_instructions_6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 62 5
  # $61.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $61.1:rbx 
  .loc 2 62 5
  # $62.1: @FILE = call(write_function_end_label_5, $61.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_end_label_5
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $62.1:rax 
  .loc 2 62 5
  # $63.1: @FILE = call(write_337, $62.1, ":")
  mov rdi, rax
  lea rsi, .LABEL__string_25[rip] # ":"
  call write_337
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $63.1:rax 
  .loc 2 62 5
  # $64.1: @FILE = call(end_line_340, $63.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 63 5
  # $65.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $65.1:rbx 
  .loc 2 63 5
  # $66.1: @FILE = call(write_337, $65.1, "  mov rsp, rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_26[rip] # "  mov rsp, rbp"
  call write_337
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $66.1:rax 
  .loc 2 63 5
  # $67.1: @FILE = call(end_line_340, $66.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 64 5
  # $68.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $68.1:rbx 
  .loc 2 64 5
  # $69.1: @FILE = call(write_337, $68.1, "  pop rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_27[rip] # "  pop rbp"
  call write_337
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $69.1:rax 
  .loc 2 64 5
  # $70.1: @FILE = call(end_line_340, $69.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 65 9
  # $71.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $71.1:rbx 
  .loc 2 65 9
  # $73.1: Boolean = call(equals_346, $71.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_346
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:rax 
  # jump($73.1, .LABEL__generate_function_3__12, .LABEL__generate_function_3__13)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_function_3__13
.LABEL__generate_function_3__12:
  .loc 2 65 41
  # $74.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $74.1:rbx 
  .loc 2 65 41
  # $73.2: Boolean = call(is_343, $74.1, IR_Nothing_Type)
  mov rdi, rbx
  mov rsi, IR_Nothing_Type[rip]
  call is_343
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:rax:[rbp-27] 
  # jump(.LABEL__generate_function_3__13)
  mov [rbp-27], al
.LABEL__generate_function_3__13:
  .loc 2 65 9
  # $73.3: Boolean = phi($73.1, $73.2)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump($73.3, .LABEL__generate_function_3__14, .LABEL__generate_function_3__15)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_function_3__15
.LABEL__generate_function_3__14:
  .loc 2 66 9
  # $76.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $76.1:rbx 
  .loc 2 66 9
  # $77.1: @FILE = call(write_337, $76.1, "  xor rax, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_28[rip] # "  xor rax, rax"
  call write_337
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $77.1:rax 
  .loc 2 66 9
  # $78.1: @FILE = call(end_line_340, $77.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $78.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump(.LABEL__generate_function_3__15)
.LABEL__generate_function_3__15:
  .loc 2 68 5
  # $79.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $79.1:rbx 
  .loc 2 68 5
  # $80.1: @FILE = call(write_337, $79.1, "  ret")
  mov rdi, rbx
  lea rsi, .LABEL__string_29[rip] # "  ret"
  call write_337
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $80.1:rax 
  .loc 2 68 5
  # $81.1: @FILE = call(end_line_340, $80.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $81.1:rax 
  .loc 2 68 5
  # $82.1: @FILE = call(end_line_340, $81.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  .loc 2 70 25
  # stack_frame_size.1: Int = load_struct_member(self.1, stack_frame_size)
  mov rax, [rbp-8]
  mov rbx, [rax+161]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx 
  .loc 2 71 9
  # $84.1: Int = stack_frame_size.1 // 16
  mov rax, rbx
  cqto
  mov r15, 16
  idiv r15
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $84.1:rdx 
  .loc 2 71 9
  # $85.1: Boolean = $84.1 != 0
  cmp rdx, 0
  setne al
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $85.1:rax 
  # jump($85.1, .LABEL__generate_function_3__16, .LABEL__generate_function_3__17)
  test al, al
  mov [rbp-28], al
  mov [rbp-36], rbx
  jz .LABEL__generate_function_3__17
.LABEL__generate_function_3__16:
  .loc 2 72 28
  # $86.1: Int = stack_frame_size.1 + 16
  mov rax, [rbp-36]
  add rax, 16
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:rax 
  .loc 2 72 52
  # $87.1: Int = stack_frame_size.1 // 16
  mov [rbp-44], rax
  mov rax, [rbp-36]
  cqto
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:[rbp-44] $87.1:rdx 
  .loc 2 72 28
  # $88.1: Int = $86.1 - $87.1
  mov rax, [rbp-44]
  sub rax, rdx
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $88.1:rax 
  .loc 2 72 9
  # stack_frame_size.3: Int = $88.1
  mov [rbp-44], rax
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:rax:[rbp-36] 
  # jump(.LABEL__generate_function_3__17)
  mov [rbp-36], rax
.LABEL__generate_function_3__17:
  # stack_frame_size.4: Int = phi(stack_frame_size.1, stack_frame_size.3)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] 
  .loc 2 74 5
  # $89.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $89.1:rbx 
  .loc 2 74 5
  # $90.1: @FILE = call(write_function_label_4, $89.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $90.1:rax 
  .loc 2 74 5
  # $91.1: @FILE = call(write_337, $90.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_337
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $91.1:rax 
  .loc 2 74 5
  # $92.1: @FILE = call(write_337, $91.1, ": .word ")
  mov rdi, rax
  lea rsi, .LABEL__string_30[rip] # ": .word "
  call write_337
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $92.1:rax 
  .loc 2 74 5
  # $93.1: @FILE = call(write_336, $92.1, stack_frame_size.4)
  mov rdi, rax
  mov rsi, [rbp-36]
  call write_336
  # [discarded value]: $92.1
  # [discarded value]: stack_frame_size.4
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] $93.1:rax 
  .loc 2 74 5
  # $94.1: @FILE = call(end_line_340, $93.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $94.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  .loc 2 76 5
  # call(reset_37, self.1)
  mov rdi, [rbp-8]
  call reset_37
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # return()
  jmp .LABEL__generate_function_3__end
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [discarded value]: stack_frame_size.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] 
  # [discarded value]: stack_frame_size.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [discarded value]: $73.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [discarded value]: $73.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [discarded value]: blocks.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [discarded value]: function.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_function_3__end:
  mov rsp, rbp
  pop rbp
  ret

generate_function_3__stack_frame_size: .word 48

  .loc 2 79 1
  .text
write_function_label_4:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_label_4__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_label_4__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 80 16
  # $1.1: @String = load_struct_member(function.1, name)
  mov rax, [rsi+24]
  # [live values]: file.1:rdi function.1:rsi $1.1:rax 
  .loc 2 80 5
  # $2.1: @FILE = call(write_337, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call write_337
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  .loc 2 81 9
  # $3.1: Boolean = load_struct_member(function.1, is_external)
  mov rax, [rbp-8]
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 81 9
  # $4.1: Boolean = $3.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $4.1:r15 
  # jump($4.1, .LABEL__write_function_label_4__2, .LABEL__write_function_label_4__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__write_function_label_4__3
.LABEL__write_function_label_4__2:
  .loc 2 82 9
  # $5.1: @FILE = call(write_339, file.1, '_')
  mov rdi, [rbp-16]
  mov sil, 95
  call write_339
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] $5.1:rax 
  .loc 2 82 31
  # $6.1: Int = load_struct_member(function.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-16] function.1:rbx:[rbp-8] $4.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 82 9
  # $7.1: @FILE = call(write_336, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # jump(.LABEL__write_function_label_4__3)
.LABEL__write_function_label_4__3:
  .loc 2 84 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__write_function_label_4__end
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [discarded value]: function.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_function_label_4__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_label_4__stack_frame_size: .word 32

  .loc 2 87 1
  .text
write_function_end_label_5:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_end_label_5__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_end_label_5__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 88 12
  # $1.1: @FILE = call(write_337, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_337
  # [discarded value]: file.1
  # [live values]: function.1:[rbp-8] $1.1:rax 
  .loc 2 88 12
  # $2.1: @FILE = call(write_function_label_4, $1.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_function_label_4
  # [discarded value]: $1.1
  # [discarded value]: function.1
  # [live values]: $2.1:rax 
  .loc 2 88 12
  # $3.1: @FILE = call(write_337, $2.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_337
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  .loc 2 88 12
  # $4.1: @FILE = call(write_337, $3.1, "end")
  mov rdi, rax
  lea rsi, .LABEL__string_33[rip] # "end"
  call write_337
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 2 88 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__write_function_end_label_5__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__write_function_end_label_5__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_end_label_5__stack_frame_size: .word 16

  .loc 2 91 1
  .text
output_unreached_ir_instructions_6:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_unreached_ir_instructions_6__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_unreached_ir_instructions_6__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 92 9
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 92 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__output_unreached_ir_instructions_6__2, .LABEL__output_unreached_ir_instructions_6__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__output_unreached_ir_instructions_6__3
.LABEL__output_unreached_ir_instructions_6__2:
  .loc 2 93 9
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_unreached_ir_instructions_6__3:
  .loc 2 95 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-9]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
.LABEL__output_unreached_ir_instructions_6__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  .loc 2 96 12
  # $4.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__output_unreached_ir_instructions_6__6, .LABEL__output_unreached_ir_instructions_6__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__output_unreached_ir_instructions_6__7
.LABEL__output_unreached_ir_instructions_6__6:
  .loc 2 97 32
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-17]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 2 97 32
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $6.1:r15 
  .loc 2 97 32
  # ir_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
.LABEL__output_unreached_ir_instructions_6__8:
  # ir_instruction_item.2: @List_Item = phi(ir_instruction_item.1, ir_instruction_item.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  .loc 2 98 16
  # $8.1: Boolean = ir_instruction_item.2 != null
  cmp QWORD PTR [rbp-26], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:rax 
  # jump($8.1, .LABEL__output_unreached_ir_instructions_6__9, .LABEL__output_unreached_ir_instructions_6__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__output_unreached_ir_instructions_6__10
.LABEL__output_unreached_ir_instructions_6__9:
  .loc 2 99 31
  # ir_instruction.1: @IR_Instruction = load_struct_member(ir_instruction_item.2, data)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx 
  .loc 2 100 17
  # $11.1: Boolean = load_struct_member(ir_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $11.1:r15 
  .loc 2 100 17
  # $12.1: Boolean = $11.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__output_unreached_ir_instructions_6__11, .LABEL__output_unreached_ir_instructions_6__12)
  test r14b, r14b
  mov [rbp-35], rbx
  mov [rbp-36], r14b
  jz .LABEL__output_unreached_ir_instructions_6__12
.LABEL__output_unreached_ir_instructions_6__11:
  .loc 2 101 17
  # $13.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(ir_instruction.1, dump)
  mov rax, [rbp-35]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx 
  .loc 2 101 37
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx $14.1:r14 
  .loc 2 101 17
  # $15.1: @FILE = call($13.1, ir_instruction.1, $14.1, "  # [unreachable instruction]: ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_34[rip] # "  # [unreachable instruction]: "
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # jump(.LABEL__output_unreached_ir_instructions_6__12)
.LABEL__output_unreached_ir_instructions_6__12:
  .loc 2 103 35
  # ir_instruction_item.5: @List_Item = load_struct_member(ir_instruction_item.2, next_item)
  mov rax, [rbp-26]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:rbx:[rbp-26] 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__8
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:[rbp-26] 
  # [discarded value]: ir_instruction_item.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] 
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
.LABEL__output_unreached_ir_instructions_6__10:
  .loc 2 105 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:rbx:[rbp-17] 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  # [discarded value]: ir_instruction_item.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [discarded value]: ir_instruction_item.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
.LABEL__output_unreached_ir_instructions_6__7:
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_unreached_ir_instructions_6__end:
  mov rsp, rbp
  pop rbp
  ret

output_unreached_ir_instructions_6__stack_frame_size: .word 48

  .loc 2 109 1
  .text
generate_block_7:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_block_7__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_block_7__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 110 5
  # store_struct_member(block.1, is_being_generated, true)
  mov BYTE PTR [rsi+48], 1
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 111 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  .loc 2 111 5
  # $2.1: @FILE = call(write_block_label_8, $1.1, block.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call write_block_label_8
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $2.1:rax 
  .loc 2 111 5
  # $3.1: @FILE = call(write_339, $2.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $3.1:rax 
  .loc 2 111 5
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  .loc 2 112 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:rbx 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
.LABEL__generate_block_7__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.8)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  .loc 2 113 12
  # $6.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__generate_block_7__3, .LABEL__generate_block_7__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_block_7__4
.LABEL__generate_block_7__3:
  .loc 2 114 9
  # call(generate_instruction_9, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call generate_instruction_9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  .loc 2 115 13
  # $7.1: Boolean = call(is_343, block_instruction.2, IR_Load_Variable_Instruction)
  mov rdi, [rbp-24]
  mov rsi, IR_Load_Variable_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $7.1:rax 
  .loc 2 115 13
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $8.1:rbx 
  .loc 2 115 13
  # $9.1: Boolean = $8.1
  mov [rbp-26], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:rbx 
  # jump($9.1, .LABEL__generate_block_7__7, .LABEL__generate_block_7__8)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__8
.LABEL__generate_block_7__7:
  .loc 2 115 76
  # $10.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $10.1:rbx 
  .loc 2 115 76
  # $11.1: Boolean = $10.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $11.1:r15 
  .loc 2 115 13
  # $9.2: Boolean = $11.1
  mov [rbp-27], r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:r15:[rbp-26] 
  # jump(.LABEL__generate_block_7__8)
  mov [rbp-26], r15b
.LABEL__generate_block_7__8:
  .loc 2 115 13
  # $12.1: Boolean = phi($9.1, $9.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:rax 
  # jump($12.1, .LABEL__generate_block_7__5, .LABEL__generate_block_7__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_block_7__6
.LABEL__generate_block_7__5:
  .loc 2 115 118
  # $13.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $13.1:rbx $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 115 118
  # $14.1: @IR_Variable = load_struct_member($13.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $14.1:r15 $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 115 118
  # $12.2: Boolean = call(is_343, $14.1, IR_Global_Variable)
  mov rdi, r15
  mov rsi, IR_Global_Variable[rip]
  call is_343
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:rax:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__6)
  mov [rbp-27], al
.LABEL__generate_block_7__6:
  .loc 2 115 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump($12.3, .LABEL__generate_block_7__9, .LABEL__generate_block_7__10)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_block_7__10
.LABEL__generate_block_7__9:
  .loc 2 116 55
  # $16.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $16.1:rbx 
  .loc 2 116 40
  # $17.1: @MC_Value = call(get_value_42, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $17.1:rax 
  .loc 2 116 13
  # call(spill_global_variable_45, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call spill_global_variable_45
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__10)
.LABEL__generate_block_7__10:
  .loc 2 118 9
  # $18.1: Int = call(discard_used_values_48, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_48
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 119 9
  # call(output_live_values_50, self.1)
  mov rdi, [rbp-8]
  call output_live_values_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 120 9
  # call(output_used_registers_52, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_52
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 121 29
  # block_instruction.8: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-24]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:rbx:[rbp-24] 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_block_7__2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:[rbp-24] 
  # [discarded value]: block_instruction.8
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
.LABEL__generate_block_7__4:
  .loc 2 123 5
  # store_struct_member(block.1, is_generated, true)
  mov rax, [rbp-16]
  mov BYTE PTR [rax+49], 1
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  .loc 2 124 9
  # $20.1: Int = call(discard_used_values_48, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $20.1:rax 
  .loc 2 124 9
  # $21.1: Boolean = $20.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:rbx 
  # jump($21.1, .LABEL__generate_block_7__11, .LABEL__generate_block_7__12)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__12
.LABEL__generate_block_7__11:
  .loc 2 125 9
  # call(output_live_values_50, self.1)
  mov rdi, [rbp-8]
  call output_live_values_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  .loc 2 126 9
  # call(output_used_registers_52, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_52
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # jump(.LABEL__generate_block_7__12)
.LABEL__generate_block_7__12:
  # return()
  jmp .LABEL__generate_block_7__end
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_block_7__end:
  mov rsp, rbp
  pop rbp
  ret

generate_block_7__stack_frame_size: .word 32

  .loc 2 130 1
  .text
write_block_label_8:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_block_label_8__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_block_label_8__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: file.1:rdi block.1:rsi 
  .loc 2 131 12
  # $1.1: @FILE = call(write_337, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_337
  # [discarded value]: file.1
  # [live values]: block.1:[rbp-8] $1.1:rax 
  .loc 2 131 41
  # $2.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  .loc 2 131 41
  # $3.1: @String = load_struct_member($2.1, name)
  mov r14, [r15+24]
  # [discarded value]: $2.1
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $3.1:r14 
  .loc 2 131 12
  # $4.1: @FILE = call(write_337, $1.1, $3.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] $4.1:rax 
  .loc 2 131 12
  # $5.1: @FILE = call(write_339, $4.1, '_')
  mov rdi, rax
  mov sil, 95
  call write_339
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] $5.1:rax 
  .loc 2 131 79
  # $6.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  .loc 2 131 79
  # $7.1: Int = load_struct_member($6.1, id)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $7.1:r14 
  .loc 2 131 12
  # $8.1: @FILE = call(write_336, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: block.1:[rbp-8] $8.1:rax 
  .loc 2 131 12
  # $9.1: @FILE = call(write_337, $8.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_337
  # [discarded value]: $8.1
  # [live values]: block.1:[rbp-8] $9.1:rax 
  .loc 2 131 116
  # $10.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: block.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 2 131 12
  # $11.1: @FILE = call(write_336, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 2 131 5
  # return($11.1)
  mov [rbp-8], rax
  jmp .LABEL__write_block_label_8__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__write_block_label_8__end:
  mov rsp, rbp
  pop rbp
  ret

write_block_label_8__stack_frame_size: .word 16

  .loc 2 134 1
  .text
generate_instruction_9:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_instruction_9__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_instruction_9__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 135 9
  # $1.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 135 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_instruction_9__2, .LABEL__generate_instruction_9__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_instruction_9__3
.LABEL__generate_instruction_9__2:
  .loc 2 136 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 136 9
  # $4.1: @FILE = call(write_337, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_337
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  .loc 2 136 49
  # $5.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $5.1:r15 
  .loc 2 136 49
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $6.1:r14 
  .loc 2 136 49
  # $7.1: Int = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $7.1:r15 
  .loc 2 136 9
  # $8.1: @FILE = call(write_336, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $8.1:rax 
  .loc 2 136 9
  # $9.1: @FILE = call(write_339, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $9.1:rax 
  .loc 2 136 98
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 2 136 98
  # $11.1: Int = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $11.1:r14 
  .loc 2 136 9
  # $12.1: @FILE = call(write_336, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 136 9
  # $13.1: @FILE = call(write_339, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $13.1:rax 
  .loc 2 136 142
  # $14.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $14.1:r15 
  .loc 2 136 142
  # $15.1: Int = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $15.1:r14 
  .loc 2 136 9
  # $16.1: @FILE = call(write_336, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 136 9
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__generate_instruction_9__3)
.LABEL__generate_instruction_9__3:
  .loc 2 138 9
  # $18.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov rax, [rbp-17]
  mov bl, [rax+16]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:rbx 
  # jump($18.1, .LABEL__generate_instruction_9__4, .LABEL__generate_instruction_9__5)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__generate_instruction_9__5
.LABEL__generate_instruction_9__4:
  .loc 2 139 9
  # $19.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(instruction.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx 
  .loc 2 139 26
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-17]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx $20.1:r14 
  .loc 2 139 9
  # $21.1: @FILE = call($19.1, instruction.1, $20.1, "  # ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_35[rip] # "  # "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # jump(.LABEL__generate_instruction_9__5)
.LABEL__generate_instruction_9__5:
  .loc 2 141 9
  # $22.1: Boolean = call(is_343, instruction.1, IR_Add_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Add_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:rax 
  # jump($22.1, .LABEL__generate_instruction_9__6, .LABEL__generate_instruction_9__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__generate_instruction_9__8
.LABEL__generate_instruction_9__6:
  .loc 2 142 39
  # $65.1: @IR_Add_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $65.1:rax 
  .loc 2 142 9
  # call(generate_add_instruction_10, self.1, $65.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_add_instruction_10
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # jump(.LABEL__generate_instruction_9__7)
.LABEL__generate_instruction_9__7:
  .loc 2 184 5
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # return()
  jmp .LABEL__generate_instruction_9__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
.LABEL__generate_instruction_9__8:
  .loc 2 143 16
  # $23.1: Boolean = call(is_343, instruction.1, IR_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Call_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:rax 
  # jump($23.1, .LABEL__generate_instruction_9__9, .LABEL__generate_instruction_9__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__generate_instruction_9__11
.LABEL__generate_instruction_9__9:
  .loc 2 144 40
  # $64.1: @IR_Call_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $64.1:rax 
  .loc 2 144 9
  # call(generate_call_instruction_11, self.1, $64.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_call_instruction_11
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
.LABEL__generate_instruction_9__11:
  .loc 2 145 16
  # $24.1: Boolean = call(is_343, instruction.1, IR_Cast_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Cast_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:rax 
  # jump($24.1, .LABEL__generate_instruction_9__12, .LABEL__generate_instruction_9__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__generate_instruction_9__14
.LABEL__generate_instruction_9__12:
  .loc 2 146 40
  # $63.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $63.1:rax 
  .loc 2 146 9
  # call(generate_cast_instruction_12, self.1, $63.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_cast_instruction_12
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
.LABEL__generate_instruction_9__14:
  .loc 2 147 16
  # $25.1: Boolean = call(is_343, instruction.1, IR_Conditional_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Conditional_Jump_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:rax 
  # jump($25.1, .LABEL__generate_instruction_9__15, .LABEL__generate_instruction_9__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__generate_instruction_9__17
.LABEL__generate_instruction_9__15:
  .loc 2 148 52
  # $62.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $62.1:rax 
  .loc 2 148 9
  # call(generate_conditional_jump_instruction_13, self.1, $62.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_conditional_jump_instruction_13
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
.LABEL__generate_instruction_9__17:
  .loc 2 149 16
  # $26.1: Boolean = call(is_343, instruction.1, IR_Comparison_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_instruction_9__18, .LABEL__generate_instruction_9__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_instruction_9__20
.LABEL__generate_instruction_9__18:
  .loc 2 150 46
  # $61.1: @IR_Comparison_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $61.1:rax 
  .loc 2 150 9
  # call(generate_comparison_instruction_14, self.1, $61.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_comparison_instruction_14
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
.LABEL__generate_instruction_9__20:
  .loc 2 151 16
  # $27.1: Boolean = call(is_343, instruction.1, IR_Direct_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:rax 
  # jump($27.1, .LABEL__generate_instruction_9__21, .LABEL__generate_instruction_9__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_instruction_9__23
.LABEL__generate_instruction_9__21:
  .loc 2 152 47
  # $60.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $60.1:rax 
  .loc 2 152 9
  # call(generate_direct_jump_instruction_15, self.1, $60.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_direct_jump_instruction_15
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
.LABEL__generate_instruction_9__23:
  .loc 2 153 16
  # $28.1: Boolean = call(is_343, instruction.1, IR_Divide_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Divide_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:rax 
  # jump($28.1, .LABEL__generate_instruction_9__24, .LABEL__generate_instruction_9__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_instruction_9__26
.LABEL__generate_instruction_9__24:
  .loc 2 154 42
  # $59.1: @IR_Divide_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $59.1:rax 
  .loc 2 154 9
  # call(generate_divide_instruction_16, self.1, $59.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_divide_instruction_16
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
.LABEL__generate_instruction_9__26:
  .loc 2 155 16
  # $29.1: Boolean = call(is_343, instruction.1, IR_Load_Array_Item_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Array_Item_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:rax 
  # jump($29.1, .LABEL__generate_instruction_9__27, .LABEL__generate_instruction_9__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_instruction_9__29
.LABEL__generate_instruction_9__27:
  .loc 2 156 51
  # $58.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $58.1:rax 
  .loc 2 156 9
  # call(generate_load_array_item_instruction_17, self.1, $58.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_array_item_instruction_17
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
.LABEL__generate_instruction_9__29:
  .loc 2 157 16
  # $30.1: Boolean = call(is_343, instruction.1, IR_Load_Struct_Member_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Struct_Member_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:rax 
  # jump($30.1, .LABEL__generate_instruction_9__30, .LABEL__generate_instruction_9__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_instruction_9__32
.LABEL__generate_instruction_9__30:
  .loc 2 158 54
  # $57.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $57.1:rax 
  .loc 2 158 9
  # call(generate_load_struct_member_instruction_20, self.1, $57.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_struct_member_instruction_20
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
.LABEL__generate_instruction_9__32:
  .loc 2 159 16
  # $31.1: Boolean = call(is_343, instruction.1, IR_Load_Variable_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Variable_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__generate_instruction_9__33, .LABEL__generate_instruction_9__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_instruction_9__35
.LABEL__generate_instruction_9__33:
  .loc 2 160 49
  # $56.1: @IR_Load_Variable_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $56.1:rax 
  .loc 2 160 9
  # call(generate_load_variable_instruction_19, self.1, $56.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_variable_instruction_19
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__generate_instruction_9__35:
  .loc 2 161 16
  # $32.1: Boolean = call(is_343, instruction.1, IR_Load_Variable_Address_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Variable_Address_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  # jump($32.1, .LABEL__generate_instruction_9__36, .LABEL__generate_instruction_9__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_instruction_9__38
.LABEL__generate_instruction_9__36:
  .loc 2 162 57
  # $55.1: @IR_Load_Variable_Address_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $55.1:rax 
  .loc 2 162 9
  # call(generate_load_variable_address_instruction_18, self.1, $55.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_variable_address_instruction_18
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
.LABEL__generate_instruction_9__38:
  .loc 2 163 16
  # $33.1: Boolean = call(is_343, instruction.1, IR_Modulo_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Modulo_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:rax 
  # jump($33.1, .LABEL__generate_instruction_9__39, .LABEL__generate_instruction_9__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_instruction_9__41
.LABEL__generate_instruction_9__39:
  .loc 2 164 42
  # $54.1: @IR_Modulo_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $54.1:rax 
  .loc 2 164 9
  # call(generate_modulo_instruction_21, self.1, $54.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_modulo_instruction_21
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
.LABEL__generate_instruction_9__41:
  .loc 2 165 16
  # $34.1: Boolean = call(is_343, instruction.1, IR_Multiply_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Multiply_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:rax 
  # jump($34.1, .LABEL__generate_instruction_9__42, .LABEL__generate_instruction_9__44)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_instruction_9__44
.LABEL__generate_instruction_9__42:
  .loc 2 166 44
  # $53.1: @IR_Multiply_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $53.1:rax 
  .loc 2 166 9
  # call(generate_multiply_instruction_22, self.1, $53.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_multiply_instruction_22
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
.LABEL__generate_instruction_9__44:
  .loc 2 167 16
  # $35.1: Boolean = call(is_343, instruction.1, IR_New_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_New_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:rax 
  # jump($35.1, .LABEL__generate_instruction_9__45, .LABEL__generate_instruction_9__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_instruction_9__47
.LABEL__generate_instruction_9__45:
  .loc 2 168 39
  # $52.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $52.1:rax 
  .loc 2 168 9
  # call(generate_new_instruction_23, self.1, $52.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_new_instruction_23
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
.LABEL__generate_instruction_9__47:
  .loc 2 169 16
  # $36.1: Boolean = call(is_343, instruction.1, IR_Phi_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Phi_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:rax 
  # jump($36.1, .LABEL__generate_instruction_9__48, .LABEL__generate_instruction_9__50)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_instruction_9__50
.LABEL__generate_instruction_9__48:
  .loc 2 170 39
  # $51.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $51.1:rax 
  .loc 2 170 9
  # call(generate_phi_instruction_24, self.1, $51.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_phi_instruction_24
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
.LABEL__generate_instruction_9__50:
  .loc 2 171 16
  # $37.1: Boolean = call(is_343, instruction.1, IR_Return_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Return_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:rax 
  # jump($37.1, .LABEL__generate_instruction_9__51, .LABEL__generate_instruction_9__53)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_instruction_9__53
.LABEL__generate_instruction_9__51:
  .loc 2 172 42
  # $50.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $50.1:rax 
  .loc 2 172 9
  # call(generate_return_instruction_25, self.1, $50.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_return_instruction_25
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
.LABEL__generate_instruction_9__53:
  .loc 2 173 16
  # $38.1: Boolean = call(is_343, instruction.1, IR_Set_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Set_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:rax 
  # jump($38.1, .LABEL__generate_instruction_9__54, .LABEL__generate_instruction_9__56)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_instruction_9__56
.LABEL__generate_instruction_9__54:
  .loc 2 174 39
  # $49.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $49.1:rax 
  .loc 2 174 9
  # call(generate_set_instruction_26, self.1, $49.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_set_instruction_26
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
.LABEL__generate_instruction_9__56:
  .loc 2 175 16
  # $39.1: Boolean = call(is_343, instruction.1, IR_Store_Array_Item_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Store_Array_Item_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:rax 
  # jump($39.1, .LABEL__generate_instruction_9__57, .LABEL__generate_instruction_9__59)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_instruction_9__59
.LABEL__generate_instruction_9__57:
  .loc 2 176 52
  # $48.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $48.1:rax 
  .loc 2 176 9
  # call(generate_store_array_item_instruction_27, self.1, $48.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_array_item_instruction_27
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
.LABEL__generate_instruction_9__59:
  .loc 2 177 16
  # $40.1: Boolean = call(is_343, instruction.1, IR_Store_Struct_Member_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Store_Struct_Member_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:rax 
  # jump($40.1, .LABEL__generate_instruction_9__60, .LABEL__generate_instruction_9__62)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_instruction_9__62
.LABEL__generate_instruction_9__60:
  .loc 2 178 55
  # $47.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $47.1:rax 
  .loc 2 178 9
  # call(generate_store_struct_member_instruction_28, self.1, $47.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_struct_member_instruction_28
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
.LABEL__generate_instruction_9__62:
  .loc 2 179 16
  # $41.1: Boolean = call(is_343, instruction.1, IR_Substract_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Substract_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:rax 
  # jump($41.1, .LABEL__generate_instruction_9__63, .LABEL__generate_instruction_9__65)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_instruction_9__65
.LABEL__generate_instruction_9__63:
  .loc 2 180 45
  # $46.1: @IR_Substract_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $46.1:rax 
  .loc 2 180 9
  # call(generate_substract_instruction_29, self.1, $46.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_substract_instruction_29
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
.LABEL__generate_instruction_9__65:
  .loc 2 182 20
  # $42.1: @String = call(clone_345, "Unsupported instruction: ")
  lea rdi, .LABEL__string_36[rip] # "Unsupported instruction: "
  call clone_345
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax 
  .loc 2 182 62
  # $43.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $43.1:r15 
  .loc 2 182 62
  # $44.1: @String = load_struct_member_address($43.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $43.1:r15 $44.1:r14 
  .loc 2 182 20
  # $45.1: @String = call(append_354, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $45.1:rax 
  .loc 2 182 9
  # call(abort_35, self.1, $45.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call abort_35
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_instruction_9__end:
  mov rsp, rbp
  pop rbp
  ret

generate_instruction_9__stack_frame_size: .word 48

  .loc 2 187 1
  .text
generate_add_instruction_10:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_add_instruction_10__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_add_instruction_10__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Add_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 188 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 189 47
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 189 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 190 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 190 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 191 5
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 191 5
  # $6.1: @FILE = call(write_337, $5.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  .loc 2 191 44
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 191 5
  # $8.1: @FILE = call(write_337, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 191 5
  # $9.1: @FILE = call(write_337, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 191 100
  # $10.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  .loc 2 191 5
  # $11.1: @FILE = call(write_operand_34, $9.1, self.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_34
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: self.1
  # [live values]: $11.1:rax 
  .loc 2 191 5
  # $12.1: @FILE = call(end_line_340, $11.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_add_instruction_10__end
  # [live values]: 
.LABEL__generate_add_instruction_10__end:
  mov rsp, rbp
  pop rbp
  ret

generate_add_instruction_10__stack_frame_size: .word 32

  .loc 2 194 1
  .text
generate_call_instruction_11:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_call_instruction_11__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_call_instruction_11__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 195 9
  # $1.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 195 9
  # $2.1: Boolean = $1.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_call_instruction_11__2, .LABEL__generate_call_instruction_11__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__2:
  .loc 2 196 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-17]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 196 53
  # $4.1: @IR_Value = call(get_argument_value_188, instruction.1, 0)
  mov rdi, [rbp-9]
  xor rsi, rsi
  mov [rbp-25], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $4.1:rax 
  .loc 2 196 9
  # call(generate_load_value_30, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 197 13
  # $5.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:rbx 
  .loc 2 197 13
  # $6.1: Boolean = $5.1 > 1
  cmp rbx, 1
  setg r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:r15 
  # jump($6.1, .LABEL__generate_call_instruction_11__4, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__4:
  .loc 2 198 38
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:rbx 
  .loc 2 198 57
  # $8.1: @IR_Value = call(get_argument_value_188, instruction.1, 1)
  mov rdi, [rbp-9]
  mov rsi, 1
  mov [rbp-26], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:[rbp-26] $8.1:rax 
  .loc 2 198 13
  # call(generate_load_value_30, self.1, $7.1, $8.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-26]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  .loc 2 199 17
  # $9.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $9.1:rbx 
  .loc 2 199 17
  # $10.1: Boolean = $9.1 > 2
  cmp rbx, 2
  setg r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:r15 
  # jump($10.1, .LABEL__generate_call_instruction_11__6, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__6:
  .loc 2 200 42
  # $11.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-17]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:rbx 
  .loc 2 200 61
  # $12.1: @IR_Value = call(get_argument_value_188, instruction.1, 2)
  mov rdi, [rbp-9]
  mov rsi, 2
  mov [rbp-27], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:[rbp-27] $12.1:rax 
  .loc 2 200 17
  # call(generate_load_value_30, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-27]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  .loc 2 201 21
  # $13.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $13.1:rbx 
  .loc 2 201 21
  # $14.1: Boolean = $13.1 > 3
  cmp rbx, 3
  setg r15b
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:r15 
  # jump($14.1, .LABEL__generate_call_instruction_11__8, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__8:
  .loc 2 202 46
  # $15.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-17]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:rbx 
  .loc 2 202 65
  # $16.1: @IR_Value = call(get_argument_value_188, instruction.1, 3)
  mov rdi, [rbp-9]
  mov rsi, 3
  mov [rbp-28], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:[rbp-28] $16.1:rax 
  .loc 2 202 21
  # call(generate_load_value_30, self.1, $15.1, $16.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-28]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  .loc 2 203 25
  # $17.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $17.1:rbx 
  .loc 2 203 25
  # $18.1: Boolean = $17.1 > 4
  cmp rbx, 4
  setg r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:r15 
  # jump($18.1, .LABEL__generate_call_instruction_11__10, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__10:
  .loc 2 204 50
  # $19.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-17]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:rbx 
  .loc 2 204 68
  # $20.1: @IR_Value = call(get_argument_value_188, instruction.1, 4)
  mov rdi, [rbp-9]
  mov rsi, 4
  mov [rbp-29], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:[rbp-29] $20.1:rax 
  .loc 2 204 25
  # call(generate_load_value_30, self.1, $19.1, $20.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-29]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  .loc 2 205 29
  # $21.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $21.1:rbx 
  .loc 2 205 29
  # $22.1: Boolean = $21.1 > 5
  cmp rbx, 5
  setg r15b
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:r15 
  # jump($22.1, .LABEL__generate_call_instruction_11__12, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__12:
  .loc 2 206 54
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-17]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:rbx 
  .loc 2 206 72
  # $24.1: @IR_Value = call(get_argument_value_188, instruction.1, 5)
  mov rdi, [rbp-9]
  mov rsi, 5
  mov [rbp-30], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:[rbp-30] $24.1:rax 
  .loc 2 206 29
  # call(generate_load_value_30, self.1, $23.1, $24.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-30]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__3)
.LABEL__generate_call_instruction_11__3:
  .loc 2 213 9
  # $25.1: Boolean = call(is_343, instruction.1, IR_Direct_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Call_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:rax $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump($25.1, .LABEL__generate_call_instruction_11__14, .LABEL__generate_call_instruction_11__16)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_call_instruction_11__16
.LABEL__generate_call_instruction_11__14:
  .loc 2 214 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 215 9
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_46
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 216 9
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $38.1:rbx 
  .loc 2 216 9
  # $39.1: @FILE = call(write_337, $38.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_337
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax 
  .loc 2 216 65
  # $40.1: @IR_Direct_Call_Instruction = instruction.1
  mov rbx, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $40.1:rbx 
  .loc 2 216 64
  # $41.1: @IR_Function = load_struct_member($40.1, function)
  mov r15, [rbx+73]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $41.1:r15 
  .loc 2 216 9
  # $42.1: @FILE = call(write_function_label_4, $39.1, $41.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $41.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $42.1:rax 
  .loc 2 216 9
  # $43.1: @FILE = call(end_line_340, $42.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__15)
.LABEL__generate_call_instruction_11__15:
  .loc 2 225 9
  # $44.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $44.1:rbx 
  .loc 2 225 9
  # $45.1: Boolean = $44.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:r15 
  # jump($45.1, .LABEL__generate_call_instruction_11__20, .LABEL__generate_call_instruction_11__21)
  test r15b, r15b
  mov [rbp-24], r15b
  jz .LABEL__generate_call_instruction_11__21
.LABEL__generate_call_instruction_11__20:
  .loc 2 226 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx 
  .loc 2 226 59
  # $47.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-17]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx $47.1:r14 
  .loc 2 226 9
  # $48.1: @MC_Value = call(map_variable_value_41, self.1, $46.1, $47.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__21)
.LABEL__generate_call_instruction_11__21:
  # return()
  jmp .LABEL__generate_call_instruction_11__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
.LABEL__generate_call_instruction_11__16:
  .loc 2 217 16
  # $26.1: Boolean = call(is_343, instruction.1, IR_Dynamic_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Dynamic_Call_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_call_instruction_11__17, .LABEL__generate_call_instruction_11__19)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_call_instruction_11__19
.LABEL__generate_call_instruction_11__17:
  .loc 2 218 34
  # $29.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-17]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx 
  .loc 2 218 54
  # $30.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov r15, [rbp-9]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx $30.1:r15 
  .loc 2 218 53
  # $31.1: @IR_Variable_Value = call(get_function_address_194, $30.1)
  mov rdi, r15
  mov [rbp-32], rbx
  call get_function_address_194
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:[rbp-32] $31.1:rax 
  .loc 2 218 9
  # call(generate_load_value_30, self.1, $29.1, $31.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-32]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $31.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 219 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 220 9
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_46
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 221 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $32.1:rbx 
  .loc 2 221 9
  # $33.1: @FILE = call(write_337, $32.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_337
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax 
  .loc 2 221 49
  # $34.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-17]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $34.1:r15 
  .loc 2 221 49
  # $35.1: @String = load_struct_member($34.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $34.1
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $35.1:r14 
  .loc 2 221 9
  # $36.1: @FILE = call(write_337, $33.1, $35.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $35.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $36.1:rax 
  .loc 2 221 9
  # $37.1: @FILE = call(end_line_340, $36.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__15)
  jmp .LABEL__generate_call_instruction_11__15
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
.LABEL__generate_call_instruction_11__19:
  .loc 2 223 15
  # $27.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx 
  .loc 2 223 37
  # $28.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx $28.1:r15 
  .loc 2 223 9
  # call(abort_141, $27.1, $28.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_call_instruction_11__end:
  mov rsp, rbp
  pop rbp
  ret

generate_call_instruction_11__stack_frame_size: .word 32

  .loc 2 230 1
  .text
generate_cast_instruction_12:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_cast_instruction_12__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_cast_instruction_12__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Cast_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 231 17
  # ir_value.1: @IR_Value = call(get_value_197, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_197
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  .loc 2 232 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rax 
  .loc 2 233 5
  # call(generate_load_value_30, self.1, result_register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 234 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $3.1:rbx 
  .loc 2 234 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-32]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 235 9
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $5.1:rbx 
  .loc 2 235 9
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 
  .loc 2 235 9
  # $7.1: Boolean = call(is_343, $6.1, IR_Int_Type)
  mov rdi, r15
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:rax 
  # jump($7.1, .LABEL__generate_cast_instruction_12__2, .LABEL__generate_cast_instruction_12__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__2:
  .loc 2 236 13
  # $8.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $8.1:rbx 
  .loc 2 236 13
  # $9.1: Boolean = call(is_343, $8.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_cast_instruction_12__4, .LABEL__generate_cast_instruction_12__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_cast_instruction_12__5
.LABEL__generate_cast_instruction_12__4:
  .loc 2 237 13
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $10.1:rbx 
  .loc 2 237 13
  # $11.1: @FILE = call(write_337, $10.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_337
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $11.1:rax 
  .loc 2 237 54
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $11.1:rax $12.1:r15 
  .loc 2 237 13
  # $13.1: @FILE = call(write_337, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $13.1:rax 
  .loc 2 237 13
  # $14.1: @FILE = call(write_337, $13.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $14.1:rax 
  .loc 2 237 96
  # $15.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $14.1:rax $15.1:r15 
  .loc 2 237 13
  # $16.1: @FILE = call(write_337, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $16.1:rax 
  .loc 2 237 13
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  .loc 2 238 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__generate_cast_instruction_12__5:
  .loc 2 240 13
  # $18.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $18.1:rbx 
  .loc 2 240 13
  # $19.1: Boolean = call(is_343, $18.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__generate_cast_instruction_12__7, .LABEL__generate_cast_instruction_12__3)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__7:
  .loc 2 241 13
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 2 241 13
  # $21.1: @FILE = call(write_337, $20.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_337
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $21.1:rax 
  .loc 2 241 54
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $21.1:rax $22.1:r15 
  .loc 2 241 13
  # $23.1: @FILE = call(write_337, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $23.1:rax 
  .loc 2 241 13
  # $24.1: @FILE = call(write_337, $23.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $24.1:rax 
  .loc 2 241 96
  # $25.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $24.1:rax $25.1:r15 
  .loc 2 241 13
  # $26.1: @FILE = call(write_337, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] $26.1:rax 
  .loc 2 241 13
  # $27.1: @FILE = call(end_line_340, $26.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
  .loc 2 242 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__generate_cast_instruction_12__3:
  .loc 2 245 9
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $28.1:rbx $19.1:[rbp-35] 
  .loc 2 245 9
  # $29.1: @IR_Type = load_struct_member($28.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $29.1:r15 $19.1:[rbp-35] 
  .loc 2 245 9
  # $30.1: Boolean = call(is_343, $29.1, IR_Int32_Type)
  mov rdi, r15
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:rax $19.1:[rbp-35] 
  # jump($30.1, .LABEL__generate_cast_instruction_12__10, .LABEL__generate_cast_instruction_12__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__10:
  .loc 2 246 13
  # $31.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $31.1:rbx 
  .loc 2 246 13
  # $32.1: Boolean = call(is_343, $31.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:rax 
  # jump($32.1, .LABEL__generate_cast_instruction_12__12, .LABEL__generate_cast_instruction_12__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__13
.LABEL__generate_cast_instruction_12__12:
  .loc 2 247 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__13:
  .loc 2 249 13
  # $33.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $33.1:rbx 
  .loc 2 249 13
  # $34.1: Boolean = call(is_343, $33.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:rax 
  # jump($34.1, .LABEL__generate_cast_instruction_12__15, .LABEL__generate_cast_instruction_12__11)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__15:
  .loc 2 250 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $35.1:rbx 
  .loc 2 250 13
  # $36.1: @FILE = call(write_337, $35.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # "  movsx "
  call write_337
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $36.1:rax 
  .loc 2 250 54
  # $37.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $36.1:rax $37.1:r15 
  .loc 2 250 13
  # $38.1: @FILE = call(write_337, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $38.1:rax 
  .loc 2 250 13
  # $39.1: @FILE = call(write_337, $38.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $39.1:rax 
  .loc 2 250 96
  # $40.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $39.1:rax $40.1:r15 
  .loc 2 250 13
  # $41.1: @FILE = call(write_337, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] $41.1:rax 
  .loc 2 250 13
  # $42.1: @FILE = call(end_line_340, $41.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
  .loc 2 251 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__11:
  .loc 2 254 9
  # $43.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $43.1:rbx $34.1:[rbp-38] 
  .loc 2 254 9
  # $44.1: @IR_Type = load_struct_member($43.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $44.1:r15 $34.1:[rbp-38] 
  .loc 2 254 9
  # $45.1: Boolean = call(is_343, $44.1, IR_Int8_Type)
  mov rdi, r15
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:rax $34.1:[rbp-38] 
  # jump($45.1, .LABEL__generate_cast_instruction_12__18, .LABEL__generate_cast_instruction_12__19)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__18:
  .loc 2 255 13
  # $46.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $46.1:rbx 
  .loc 2 255 13
  # $47.1: Boolean = call(is_343, $46.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:rax 
  # jump($47.1, .LABEL__generate_cast_instruction_12__20, .LABEL__generate_cast_instruction_12__21)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_cast_instruction_12__21
.LABEL__generate_cast_instruction_12__20:
  .loc 2 256 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] 
.LABEL__generate_cast_instruction_12__21:
  .loc 2 258 13
  # $48.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $48.1:rbx 
  .loc 2 258 13
  # $49.1: Boolean = call(is_343, $48.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:rax 
  # jump($49.1, .LABEL__generate_cast_instruction_12__23, .LABEL__generate_cast_instruction_12__19)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_cast_instruction_12__19
.LABEL__generate_cast_instruction_12__23:
  .loc 2 259 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:[rbp-41] 
.LABEL__generate_cast_instruction_12__19:
  .loc 2 262 16
  # $50.1: @String = call(clone_345, "Cannot cast ")
  lea rdi, .LABEL__string_41[rip] # "Cannot cast "
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $49.1:[rbp-41] 
  .loc 2 262 45
  # $51.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $51.1:r15 $49.1:[rbp-41] 
  .loc 2 262 45
  # $52.1: @Object_Type = load_struct_member($51.1, object_type)
  mov r14, [r15]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $52.1:r14 $49.1:[rbp-41] 
  .loc 2 262 45
  # $53.1: @String = load_struct_member_address($52.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $50.1:rax $52.1:r14 $53.1:r15 $49.1:[rbp-41] 
  .loc 2 262 16
  # $54.1: @String = call(append_354, $50.1, $53.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $54.1:rax $49.1:[rbp-41] 
  .loc 2 262 16
  # $55.1: @String = call(append_354, $54.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # " to "
  call append_354
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $49.1:[rbp-41] 
  .loc 2 262 99
  # $56.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $56.1:r15 $49.1:[rbp-41] 
  .loc 2 262 99
  # $57.1: @IR_Type = load_struct_member($56.1, type)
  mov r14, [r15+8]
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $57.1:r14 $49.1:[rbp-41] 
  .loc 2 262 99
  # $58.1: @Object_Type = load_struct_member($57.1, object_type)
  mov r15, [r14]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $58.1:r15 $49.1:[rbp-41] 
  .loc 2 262 99
  # $59.1: @String = load_struct_member_address($58.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $55.1:rax $58.1:r15 $59.1:r14 $49.1:[rbp-41] 
  .loc 2 262 16
  # $60.1: @String = call(append_354, $55.1, $59.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $60.1:rax $49.1:[rbp-41] 
  .loc 2 262 5
  # call(abort_35, self.1, $60.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] $49.1:[rbp-41] 
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] $47.1:[rbp-40] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $45.1:[rbp-39] $34.1:[rbp-38] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] $34.1:[rbp-38] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] $32.1:[rbp-37] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $30.1:[rbp-36] $19.1:[rbp-35] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [discarded value]: result_register.1
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_cast_instruction_12__end:
  mov rsp, rbp
  pop rbp
  ret

generate_cast_instruction_12__stack_frame_size: .word 48

  .loc 2 265 1
  .text
generate_conditional_jump_instruction_13:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_conditional_jump_instruction_13__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_conditional_jump_instruction_13__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Conditional_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 266 24
  # condition_value.1: @IR_Value = call(get_condition_value_199, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_condition_value_199
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax 
  .loc 2 267 9
  # $2.1: @IR_Type = load_struct_member(condition_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx 
  .loc 2 267 9
  # $3.1: Boolean = call(is_343, $2.1, IR_Boolean_Type)
  mov rdi, rbx
  mov rsi, IR_Boolean_Type[rip]
  mov [rbp-24], rax
  call is_343
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $3.1:rax 
  .loc 2 267 9
  # $4.1: Boolean = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:rbx 
  # jump($4.1, .LABEL__generate_conditional_jump_instruction_13__2, .LABEL__generate_conditional_jump_instruction_13__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_conditional_jump_instruction_13__3
.LABEL__generate_conditional_jump_instruction_13__2:
  .loc 2 268 9
  # call(abort_35, self.1, "Unsupported value type")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_43[rip] # "Unsupported value type"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_conditional_jump_instruction_13__3:
  .loc 2 271 9
  # $5.1: Boolean = call(is_343, condition_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__generate_conditional_jump_instruction_13__4, .LABEL__generate_conditional_jump_instruction_13__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_conditional_jump_instruction_13__6
.LABEL__generate_conditional_jump_instruction_13__4:
  .loc 2 272 28
  # condition_value.1: @IR_Variable_Value = condition_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:rax 
  .loc 2 273 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 274 13
  # $9.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax $9.1:rbx 
  # jump($9.1, .LABEL__generate_conditional_jump_instruction_13__7, .LABEL__generate_conditional_jump_instruction_13__8)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__generate_conditional_jump_instruction_13__8
.LABEL__generate_conditional_jump_instruction_13__7:
  .loc 2 275 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
.LABEL__generate_conditional_jump_instruction_13__8:
  .loc 2 277 30
  # condition_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx 
  .loc 2 278 13
  # $11.1: Boolean = condition_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx $11.1:r15 
  # jump($11.1, .LABEL__generate_conditional_jump_instruction_13__9, .LABEL__generate_conditional_jump_instruction_13__5)
  test r15b, r15b
  mov [rbp-51], rbx
  mov [rbp-52], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__5
.LABEL__generate_conditional_jump_instruction_13__9:
  .loc 2 279 34
  # condition_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:rax:[rbp-51] 
  .loc 2 280 13
  # call(generate_load_value_30, self.1, condition_register.4, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-34]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
.LABEL__generate_conditional_jump_instruction_13__5:
  # condition_register.5: @MC_Register = phi(condition_register.2, condition_register.4, condition_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $13.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $14.1: @FILE = call(write_337, $13.1, "  test ")
  mov rdi, rbx
  lea rsi, .LABEL__string_45[rip] # "  test "
  call write_337
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $14.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 45
  # $15.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:rbx:[rbp-51] $14.1:rax $15.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $16.1: @FILE = call(write_337, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $16.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $17.1: @FILE = call(write_337, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $17.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 90
  # $18.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [discarded value]: condition_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $17.1:rax $18.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $19.1: @FILE = call(write_337, $17.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $19.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 286 5
  # $20.1: @FILE = call(end_line_340, $19.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 287 5
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_46
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 288 9
  # $21.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $21.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 288 9
  # $22.1: Boolean = load_struct_member($21.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump($22.1, .LABEL__generate_conditional_jump_instruction_13__11, .LABEL__generate_conditional_jump_instruction_13__13)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__13
.LABEL__generate_conditional_jump_instruction_13__11:
  .loc 2 289 9
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $33.1:rbx 
  .loc 2 289 9
  # $34.1: @FILE = call(write_337, $33.1, "  jnz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_46[rip] # "  jnz "
  call write_337
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax 
  .loc 2 289 60
  # $35.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax $35.1:r15 
  .loc 2 289 9
  # $36.1: @FILE = call(write_block_label_8, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $36.1:rax 
  .loc 2 289 9
  # $37.1: @FILE = call(end_line_340, $36.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 290 13
  # $38.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $38.1:rbx 
  .loc 2 290 13
  # $39.1: Boolean = load_struct_member($38.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:r15 
  # jump($39.1, .LABEL__generate_conditional_jump_instruction_13__16, .LABEL__generate_conditional_jump_instruction_13__17)
  test r15b, r15b
  mov [rbp-54], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__17
.LABEL__generate_conditional_jump_instruction_13__16:
  .loc 2 291 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
.LABEL__generate_conditional_jump_instruction_13__17:
  .loc 2 293 29
  # $40.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] $40.1:rbx 
  .loc 2 293 9
  # call(generate_block_7, self.1, $40.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
.LABEL__generate_conditional_jump_instruction_13__12:
  # return()
  jmp .LABEL__generate_conditional_jump_instruction_13__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
.LABEL__generate_conditional_jump_instruction_13__13:
  .loc 2 295 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $23.1:rbx 
  .loc 2 295 9
  # $24.1: @FILE = call(write_337, $23.1, "  jz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_47[rip] # "  jz "
  call write_337
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax 
  .loc 2 295 59
  # $25.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax $25.1:r15 
  .loc 2 295 9
  # $26.1: @FILE = call(write_block_label_8, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $26.1:rax 
  .loc 2 295 9
  # $27.1: @FILE = call(end_line_340, $26.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 296 29
  # $28.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $28.1:rbx 
  .loc 2 296 9
  # call(generate_block_7, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 297 13
  # $29.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $29.1:rbx 
  .loc 2 297 13
  # $30.1: Boolean = load_struct_member($29.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $30.1:r15 
  .loc 2 297 13
  # $31.1: Boolean = $30.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:rbx 
  # jump($31.1, .LABEL__generate_conditional_jump_instruction_13__14, .LABEL__generate_conditional_jump_instruction_13__12)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__generate_conditional_jump_instruction_13__12
.LABEL__generate_conditional_jump_instruction_13__14:
  .loc 2 298 33
  # $32.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] $32.1:rbx 
  .loc 2 298 13
  # call(generate_block_7, self.1, $32.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
  jmp .LABEL__generate_conditional_jump_instruction_13__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: condition_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] 
  # [discarded value]: condition_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__generate_conditional_jump_instruction_13__6:
  .loc 2 283 30
  # condition_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:rax:[rbp-51] 
  .loc 2 284 9
  # call(generate_load_value_30, self.1, condition_register.2, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
  jmp .LABEL__generate_conditional_jump_instruction_13__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # [discarded value]: condition_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [discarded value]: condition_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_conditional_jump_instruction_13__end:
  mov rsp, rbp
  pop rbp
  ret

generate_conditional_jump_instruction_13__stack_frame_size: .word 64

  .loc 2 303 1
  .text
generate_comparison_instruction_14:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_comparison_instruction_14__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_comparison_instruction_14__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Comparison_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 304 19
  # left_value.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_left_value_232
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:rax 
  .loc 2 305 20
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax 
  .loc 2 306 9
  # $4.1: Boolean = call(is_343, left_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-32], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__generate_comparison_instruction_14__2, .LABEL__generate_comparison_instruction_14__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_comparison_instruction_14__3
.LABEL__generate_comparison_instruction_14__2:
  .loc 2 306 45
  # $4.2: Boolean = call(is_343, right_value.1, IR_Variable_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:rax:[rbp-33] 
  # jump(.LABEL__generate_comparison_instruction_14__3)
  mov [rbp-33], al
.LABEL__generate_comparison_instruction_14__3:
  .loc 2 306 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, .LABEL__generate_comparison_instruction_14__4, .LABEL__generate_comparison_instruction_14__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__4:
  .loc 2 307 41
  # $6.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $6.1:rax 
  .loc 2 307 26
  # mc_left_value.1: @MC_Value = call(get_value_42, self.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] mc_left_value.1:rax 
  .loc 2 308 13
  # $8.1: @MC_Register = load_struct_member(mc_left_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_left_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:rbx 
  .loc 2 308 13
  # $9.1: Boolean = $8.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_comparison_instruction_14__6, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__6:
  .loc 2 309 46
  # $10.1: @IR_Variable_Value = right_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $10.1:rax 
  .loc 2 309 31
  # mc_right_value.1: @MC_Value = call(get_value_42, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] mc_right_value.1:rax 
  .loc 2 310 17
  # $12.1: @MC_Register = load_struct_member(mc_right_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_right_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $12.1:rbx 
  .loc 2 310 17
  # $13.1: Boolean = $12.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:rax 
  # jump($13.1, .LABEL__generate_comparison_instruction_14__8, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__8:
  .loc 2 311 29
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:rax 
  .loc 2 312 17
  # call(generate_load_value_30, self.1, register.1, left_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-43], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] 
  .loc 2 313 41
  # $15.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] $15.1:rax 
  .loc 2 313 17
  # $16.1: @MC_Value = call(map_variable_value_41, self.1, $15.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__5)
.LABEL__generate_comparison_instruction_14__5:
  .loc 2 317 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $17.1:rbx $13.1:[rbp-35] 
  .loc 2 317 5
  # $18.1: @FILE = call(write_337, $17.1, "  cmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_48[rip] # "  cmp "
  call write_337
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $18.1:rax $13.1:[rbp-35] 
  .loc 2 317 5
  # $19.1: @FILE = call(write_operand_34, $18.1, self.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-24]
  call write_operand_34
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $19.1:rax $13.1:[rbp-35] 
  .loc 2 317 5
  # $20.1: @FILE = call(write_337, $19.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $20.1:rax $13.1:[rbp-35] 
  .loc 2 317 5
  # $21.1: @FILE = call(write_operand_34, $20.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call write_operand_34
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $21.1:rax $13.1:[rbp-35] 
  .loc 2 317 5
  # $22.1: @FILE = call(end_line_340, $21.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  .loc 2 318 17
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rax $13.1:[rbp-35] 
  .loc 2 319 9
  # $24.1: Boolean = call(is_343, instruction.1, IR_Equals_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Equals_Comparison_Instruction[rip]
  mov [rbp-43], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:rax $13.1:[rbp-35] 
  # jump($24.1, .LABEL__generate_comparison_instruction_14__10, .LABEL__generate_comparison_instruction_14__12)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_comparison_instruction_14__12
.LABEL__generate_comparison_instruction_14__10:
  .loc 2 320 9
  # $69.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $69.1:rbx 
  .loc 2 320 9
  # $70.1: @FILE = call(write_337, $69.1, "  sete ")
  mov rdi, rbx
  lea rsi, .LABEL__string_49[rip] # "  sete "
  call write_337
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax 
  .loc 2 320 49
  # $71.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax $71.1:r15 
  .loc 2 320 9
  # $72.1: @FILE = call(write_337, $70.1, $71.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $72.1:rax 
  .loc 2 320 9
  # $73.1: @FILE = call(end_line_340, $72.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  .loc 2 321 33
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $74.1:rbx 
  .loc 2 321 9
  # $75.1: @MC_Value = call(map_variable_value_41, self.1, $74.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
.LABEL__generate_comparison_instruction_14__11:
  # return()
  jmp .LABEL__generate_comparison_instruction_14__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
.LABEL__generate_comparison_instruction_14__12:
  .loc 2 322 16
  # $25.1: Boolean = call(is_343, instruction.1, IR_Greater_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Greater_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__generate_comparison_instruction_14__13, .LABEL__generate_comparison_instruction_14__15)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_comparison_instruction_14__15
.LABEL__generate_comparison_instruction_14__13:
  .loc 2 323 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $62.1:rbx 
  .loc 2 323 9
  # $63.1: @FILE = call(write_337, $62.1, "  setg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_50[rip] # "  setg "
  call write_337
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax 
  .loc 2 323 49
  # $64.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax $64.1:r15 
  .loc 2 323 9
  # $65.1: @FILE = call(write_337, $63.1, $64.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $65.1:rax 
  .loc 2 323 9
  # $66.1: @FILE = call(end_line_340, $65.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  .loc 2 324 33
  # $67.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $67.1:rbx 
  .loc 2 324 9
  # $68.1: @MC_Value = call(map_variable_value_41, self.1, $67.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $68.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
.LABEL__generate_comparison_instruction_14__15:
  .loc 2 325 16
  # $26.1: Boolean = call(is_343, instruction.1, IR_Greater_Or_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:rax 
  # jump($26.1, .LABEL__generate_comparison_instruction_14__16, .LABEL__generate_comparison_instruction_14__18)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_comparison_instruction_14__18
.LABEL__generate_comparison_instruction_14__16:
  .loc 2 326 9
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $55.1:rbx 
  .loc 2 326 9
  # $56.1: @FILE = call(write_337, $55.1, "  setge ")
  mov rdi, rbx
  lea rsi, .LABEL__string_51[rip] # "  setge "
  call write_337
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax 
  .loc 2 326 50
  # $57.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax $57.1:r15 
  .loc 2 326 9
  # $58.1: @FILE = call(write_337, $56.1, $57.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $58.1:rax 
  .loc 2 326 9
  # $59.1: @FILE = call(end_line_340, $58.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  .loc 2 327 33
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $60.1:rbx 
  .loc 2 327 9
  # $61.1: @MC_Value = call(map_variable_value_41, self.1, $60.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
.LABEL__generate_comparison_instruction_14__18:
  .loc 2 328 16
  # $27.1: Boolean = call(is_343, instruction.1, IR_Less_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Less_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:rax 
  # jump($27.1, .LABEL__generate_comparison_instruction_14__19, .LABEL__generate_comparison_instruction_14__21)
  test al, al
  mov [rbp-47], al
  jz .LABEL__generate_comparison_instruction_14__21
.LABEL__generate_comparison_instruction_14__19:
  .loc 2 329 9
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $48.1:rbx 
  .loc 2 329 9
  # $49.1: @FILE = call(write_337, $48.1, "  setl ")
  mov rdi, rbx
  lea rsi, .LABEL__string_52[rip] # "  setl "
  call write_337
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax 
  .loc 2 329 49
  # $50.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax $50.1:r15 
  .loc 2 329 9
  # $51.1: @FILE = call(write_337, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $51.1:rax 
  .loc 2 329 9
  # $52.1: @FILE = call(end_line_340, $51.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  .loc 2 330 33
  # $53.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $53.1:rbx 
  .loc 2 330 9
  # $54.1: @MC_Value = call(map_variable_value_41, self.1, $53.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
.LABEL__generate_comparison_instruction_14__21:
  .loc 2 331 16
  # $28.1: Boolean = call(is_343, instruction.1, IR_Less_Or_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Less_Or_Equal_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:rax 
  # jump($28.1, .LABEL__generate_comparison_instruction_14__22, .LABEL__generate_comparison_instruction_14__24)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_comparison_instruction_14__24
.LABEL__generate_comparison_instruction_14__22:
  .loc 2 332 9
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $41.1:rbx 
  .loc 2 332 9
  # $42.1: @FILE = call(write_337, $41.1, "  setle ")
  mov rdi, rbx
  lea rsi, .LABEL__string_53[rip] # "  setle "
  call write_337
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax 
  .loc 2 332 50
  # $43.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax $43.1:r15 
  .loc 2 332 9
  # $44.1: @FILE = call(write_337, $42.1, $43.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $44.1:rax 
  .loc 2 332 9
  # $45.1: @FILE = call(end_line_340, $44.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  .loc 2 333 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $46.1:rbx 
  .loc 2 333 9
  # $47.1: @MC_Value = call(map_variable_value_41, self.1, $46.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
.LABEL__generate_comparison_instruction_14__24:
  .loc 2 334 16
  # $29.1: Boolean = call(is_343, instruction.1, IR_Not_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Not_Equal_Comparison_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:rax 
  # jump($29.1, .LABEL__generate_comparison_instruction_14__25, .LABEL__generate_comparison_instruction_14__27)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_comparison_instruction_14__27
.LABEL__generate_comparison_instruction_14__25:
  .loc 2 335 9
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $34.1:rbx 
  .loc 2 335 9
  # $35.1: @FILE = call(write_337, $34.1, "  setne ")
  mov rdi, rbx
  lea rsi, .LABEL__string_54[rip] # "  setne "
  call write_337
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax 
  .loc 2 335 50
  # $36.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax $36.1:r15 
  .loc 2 335 9
  # $37.1: @FILE = call(write_337, $35.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $37.1:rax 
  .loc 2 335 9
  # $38.1: @FILE = call(end_line_340, $37.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  .loc 2 336 33
  # $39.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $39.1:rbx 
  .loc 2 336 9
  # $40.1: @MC_Value = call(map_variable_value_41, self.1, $39.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
.LABEL__generate_comparison_instruction_14__27:
  .loc 2 338 20
  # $30.1: @String = call(clone_345, "Unsupported comparison instruction type: ")
  lea rdi, .LABEL__string_55[rip] # "Unsupported comparison instruction type: "
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax 
  .loc 2 338 78
  # $31.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $31.1:r15 
  .loc 2 338 78
  # $32.1: @String = load_struct_member_address($31.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $31.1:r15 $32.1:r14 
  .loc 2 338 20
  # $33.1: @String = call(append_354, $30.1, $32.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $33.1:rax 
  .loc 2 338 9
  # call(abort_35, self.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $13.1:[rbp-35] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_comparison_instruction_14__end:
  mov rsp, rbp
  pop rbp
  ret

generate_comparison_instruction_14__stack_frame_size: .word 64

  .loc 2 342 1
  .text
generate_direct_jump_instruction_15:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_direct_jump_instruction_15__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_direct_jump_instruction_15__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Direct_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 343 5
  # call(release_all_registers_46, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_46
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 344 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 344 9
  # $2.1: Boolean = load_struct_member($1.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__generate_direct_jump_instruction_15__2, .LABEL__generate_direct_jump_instruction_15__4)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__generate_direct_jump_instruction_15__4
.LABEL__generate_direct_jump_instruction_15__2:
  .loc 2 345 9
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $4.1:rbx 
  .loc 2 345 9
  # $5.1: @FILE = call(write_337, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  jmp "
  call write_337
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 2 345 60
  # $6.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $2.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 345 9
  # $7.1: @FILE = call(write_block_label_8, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $7.1:rax 
  .loc 2 345 9
  # $8.1: @FILE = call(end_line_340, $7.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
.LABEL__generate_direct_jump_instruction_15__3:
  # return()
  jmp .LABEL__generate_direct_jump_instruction_15__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
.LABEL__generate_direct_jump_instruction_15__4:
  .loc 2 347 29
  # $3.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 2 347 9
  # call(generate_block_7, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
  jmp .LABEL__generate_direct_jump_instruction_15__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_direct_jump_instruction_15__end:
  mov rsp, rbp
  pop rbp
  ret

generate_direct_jump_instruction_15__stack_frame_size: .word 32

  .loc 2 351 1
  .text
generate_divide_instruction_16:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_divide_instruction_16__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_divide_instruction_16__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Divide_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 352 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 352 5
  # call(release_register_47, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 353 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 353 49
  # $3.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 353 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 354 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 354 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 355 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 355 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 356 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 356 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 357 5
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  .loc 2 357 5
  # $8.1: @FILE = call(write_337, $7.1, "  cqto")
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  cqto"
  call write_337
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 357 5
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 358 20
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  .loc 2 359 9
  # $11.1: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, .LABEL__generate_divide_instruction_16__2, .LABEL__generate_divide_instruction_16__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_divide_instruction_16__4
.LABEL__generate_divide_instruction_16__2:
  .loc 2 360 21
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 361 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 362 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-33], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 363 9
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $17.1:rbx 
  .loc 2 363 9
  # $18.1: @FILE = call(write_337, $17.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_337
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $18.1:rax 
  .loc 2 363 49
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rbx:[rbp-33] $18.1:rax $19.1:r15 
  .loc 2 363 9
  # $20.1: @FILE = call(write_337, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $20.1:rax 
  .loc 2 363 9
  # $21.1: @FILE = call(end_line_340, $20.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 364 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-33]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_divide_instruction_16__3)
.LABEL__generate_divide_instruction_16__3:
  .loc 2 368 5
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $22.1:rbx 
  .loc 2 368 5
  # store_struct_member($22.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 369 5
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $23.1:rbx 
  .loc 2 369 5
  # store_struct_member($23.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 370 29
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 
  .loc 2 370 55
  # $25.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r14, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 $25.1:r14 
  .loc 2 370 5
  # $26.1: @MC_Value = call(map_variable_value_41, self.1, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_divide_instruction_16__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
.LABEL__generate_divide_instruction_16__4:
  .loc 2 366 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $12.1:rbx 
  .loc 2 366 9
  # $13.1: @FILE = call(write_337, $12.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $13.1:rax 
  .loc 2 366 9
  # $14.1: @FILE = call(write_operand_34, $13.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_34
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $14.1:rax 
  .loc 2 366 9
  # $15.1: @FILE = call(end_line_340, $14.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_divide_instruction_16__3)
  jmp .LABEL__generate_divide_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: right_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_divide_instruction_16__end:
  mov rsp, rbp
  pop rbp
  ret

generate_divide_instruction_16__stack_frame_size: .word 48

  .loc 2 373 1
  .text
generate_load_array_item_instruction_17:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_array_item_instruction_17__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_array_item_instruction_17__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 374 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 375 47
  # $2.1: @IR_Value = call(get_array_value_203, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_203
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 375 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 376 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 376 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 377 50
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 377 50
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $6.1:r15 
  .loc 2 377 31
  # result_value_type_size.1: Int = call(get_type_size_56, self.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:rax 
  .loc 2 379 20
  # index_value.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_index_value_204
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax 
  .loc 2 380 9
  # $9.1: Boolean = call(is_343, index_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_array_item_instruction_17__2, .LABEL__generate_load_array_item_instruction_17__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_array_item_instruction_17__4
.LABEL__generate_load_array_item_instruction_17__2:
  .loc 2 381 24
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax 
  .loc 2 382 13
  # $29.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax $29.1:rbx 
  .loc 2 382 13
  # $30.1: Boolean = call(is_343, $29.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  mov [rbp-49], rax
  call is_343
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $30.1:rax 
  .loc 2 382 13
  # $31.1: Boolean = $30.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:rbx 
  # jump($31.1, .LABEL__generate_load_array_item_instruction_17__7, .LABEL__generate_load_array_item_instruction_17__8)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__generate_load_array_item_instruction_17__8
.LABEL__generate_load_array_item_instruction_17__7:
  .loc 2 383 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
.LABEL__generate_load_array_item_instruction_17__8:
  .loc 2 385 25
  # $33.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-49]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] $33.1:rbx 
  .loc 2 385 24
  # index_value.1: Int = load_struct_member($33.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 
  .loc 2 386 13
  # $35.1: Boolean = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 $35.1:rbx 
  # jump($35.1, .LABEL__generate_load_array_item_instruction_17__9, .LABEL__generate_load_array_item_instruction_17__3)
  test bl, bl
  mov [rbp-51], bl
  mov [rbp-59], r15
  jz .LABEL__generate_load_array_item_instruction_17__3
.LABEL__generate_load_array_item_instruction_17__9:
  .loc 2 387 17
  # $36.1: Boolean = index_value.1 < 0
  cmp QWORD PTR [rbp-59], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:rax 
  # jump($36.1, .LABEL__generate_load_array_item_instruction_17__11, .LABEL__generate_load_array_item_instruction_17__12)
  test al, al
  mov [rbp-60], al
  jz .LABEL__generate_load_array_item_instruction_17__12
.LABEL__generate_load_array_item_instruction_17__11:
  .loc 2 388 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__12:
  .loc 2 390 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $37.1:rbx 
  .loc 2 390 13
  # $38.1: @FILE = call(write_337, $37.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax 
  .loc 2 390 52
  # $39.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax $39.1:r15 
  .loc 2 390 13
  # $40.1: @FILE = call(write_337, $38.1, $39.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $40.1:rax 
  .loc 2 390 13
  # $41.1: @FILE = call(write_337, $40.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax 
  .loc 2 390 94
  # $42.1: Int = index_value.1 * result_value_type_size.1
  mov rbx, [rbp-59]
  imul rbx, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax $42.1:rbx 
  .loc 2 390 13
  # $43.1: @FILE = call(write_336, $41.1, $42.1)
  mov rdi, rax
  mov rsi, rbx
  call write_336
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $43.1:rax 
  .loc 2 390 13
  # $44.1: @FILE = call(end_line_340, $43.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
.LABEL__generate_load_array_item_instruction_17__3:
  .loc 2 401 16
  # address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = result_register.1, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = result_register.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  .loc 2 402 9
  # $46.1: Boolean = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete r15b
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax $46.1:r15 index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump($46.1, .LABEL__generate_load_array_item_instruction_17__13, .LABEL__generate_load_array_item_instruction_17__15)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_array_item_instruction_17__15
.LABEL__generate_load_array_item_instruction_17__13:
  .loc 2 403 9
  # $70.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $70.1:rbx 
  .loc 2 403 9
  # $71.1: @FILE = call(write_337, $70.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax 
  .loc 2 403 48
  # $72.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax $72.1:r15 
  .loc 2 403 9
  # $73.1: @FILE = call(write_337, $71.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $73.1:rax 
  .loc 2 403 9
  # $74.1: @FILE = call(write_337, $73.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $74.1:rax 
  .loc 2 403 9
  # $75.1: @FILE = call(write_55, $74.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $75.1:rax 
  .loc 2 403 9
  # $76.1: @FILE = call(end_line_340, $75.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
.LABEL__generate_load_array_item_instruction_17__14:
  # return()
  jmp .LABEL__generate_load_array_item_instruction_17__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__15:
  .loc 2 404 16
  # $47.1: Boolean = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:rax 
  # jump($47.1, .LABEL__generate_load_array_item_instruction_17__16, .LABEL__generate_load_array_item_instruction_17__18)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_array_item_instruction_17__18
.LABEL__generate_load_array_item_instruction_17__16:
  .loc 2 405 9
  # $63.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $63.1:rbx 
  .loc 2 405 9
  # $64.1: @FILE = call(write_337, $63.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax 
  .loc 2 405 48
  # $65.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax $65.1:r15 
  .loc 2 405 9
  # $66.1: @FILE = call(write_337, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $66.1:rax 
  .loc 2 405 9
  # $67.1: @FILE = call(write_337, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $67.1:rax 
  .loc 2 405 9
  # $68.1: @FILE = call(write_55, $67.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $68.1:rax 
  .loc 2 405 9
  # $69.1: @FILE = call(end_line_340, $68.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
.LABEL__generate_load_array_item_instruction_17__18:
  .loc 2 406 16
  # $48.1: Boolean = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:rax 
  # jump($48.1, .LABEL__generate_load_array_item_instruction_17__19, .LABEL__generate_load_array_item_instruction_17__21)
  test al, al
  mov [rbp-71], al
  jz .LABEL__generate_load_array_item_instruction_17__21
.LABEL__generate_load_array_item_instruction_17__19:
  .loc 2 407 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $56.1:rbx 
  .loc 2 407 9
  # $57.1: @FILE = call(write_337, $56.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax 
  .loc 2 407 48
  # $58.1: @String = load_struct_member(result_register.1, name_w)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax $58.1:r15 
  .loc 2 407 9
  # $59.1: @FILE = call(write_337, $57.1, $58.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $59.1:rax 
  .loc 2 407 9
  # $60.1: @FILE = call(write_337, $59.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $60.1:rax 
  .loc 2 407 9
  # $61.1: @FILE = call(write_55, $60.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $61.1:rax 
  .loc 2 407 9
  # $62.1: @FILE = call(end_line_340, $61.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
.LABEL__generate_load_array_item_instruction_17__21:
  .loc 2 409 9
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $49.1:rbx 
  .loc 2 409 9
  # $50.1: @FILE = call(write_337, $49.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax 
  .loc 2 409 48
  # $51.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax $51.1:r15 
  .loc 2 409 9
  # $52.1: @FILE = call(write_337, $50.1, $51.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $52.1:rax 
  .loc 2 409 9
  # $53.1: @FILE = call(write_337, $52.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $53.1:rax 
  .loc 2 409 9
  # $54.1: @FILE = call(write_55, $53.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $54.1:rax 
  .loc 2 409 9
  # $55.1: @FILE = call(end_line_340, $54.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
.LABEL__generate_load_array_item_instruction_17__4:
  .loc 2 393 27
  # index_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rax 
  .loc 2 394 50
  # $11.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-49], rax
  call get_index_value_204
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $11.1:rax 
  .loc 2 394 9
  # call(generate_load_value_30, self.1, index_register.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-49]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  .loc 2 395 13
  # $12.1: Boolean = result_value_type_size.1 > 1
  cmp QWORD PTR [rbp-32], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:rax 
  # jump($12.1, .LABEL__generate_load_array_item_instruction_17__5, .LABEL__generate_load_array_item_instruction_17__6)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_array_item_instruction_17__6
.LABEL__generate_load_array_item_instruction_17__5:
  .loc 2 396 13
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $13.1:rbx 
  .loc 2 396 13
  # $14.1: @FILE = call(write_337, $13.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_337
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $14.1:rax 
  .loc 2 396 53
  # $15.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $14.1:rax $15.1:r15 
  .loc 2 396 13
  # $16.1: @FILE = call(write_337, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $16.1:rax 
  .loc 2 396 13
  # $17.1: @FILE = call(write_337, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $17.1:rax 
  .loc 2 396 13
  # $18.1: @FILE = call(write_336, $17.1, result_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_336
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $18.1:rax 
  .loc 2 396 13
  # $19.1: @FILE = call(end_line_340, $18.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__6)
.LABEL__generate_load_array_item_instruction_17__6:
  .loc 2 398 9
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $20.1:rbx 
  .loc 2 398 9
  # $21.1: @FILE = call(write_337, $20.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax 
  .loc 2 398 48
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax $22.1:r15 
  .loc 2 398 9
  # $23.1: @FILE = call(write_337, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $23.1:rax 
  .loc 2 398 9
  # $24.1: @FILE = call(write_337, $23.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $24.1:rax 
  .loc 2 398 90
  # $25.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $24.1:rax $25.1:r15 
  .loc 2 398 9
  # $26.1: @FILE = call(write_337, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $26.1:rax 
  .loc 2 398 9
  # $27.1: @FILE = call(end_line_340, $26.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
  jmp .LABEL__generate_load_array_item_instruction_17__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [discarded value]: index_value.1
  # [discarded value]: result_value_type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_array_item_instruction_17__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_array_item_instruction_17__stack_frame_size: .word 80

  .loc 2 413 1
  .text
generate_load_variable_address_instruction_18:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_address_instruction_18__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_address_instruction_18__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Address_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 414 38
  # $1.1: @IR_Variable_Value = call(get_variable_value_210, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_variable_value_210
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $1.1:rax 
  .loc 2 414 23
  # variable_value.1: @MC_Value = call(get_value_42, self.1, $1.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax 
  .loc 2 415 9
  # $3.1: Boolean = variable_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__generate_load_variable_address_instruction_18__2, .LABEL__generate_load_variable_address_instruction_18__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_load_variable_address_instruction_18__3
.LABEL__generate_load_variable_address_instruction_18__2:
  .loc 2 416 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__generate_load_variable_address_instruction_18__3:
  .loc 2 418 9
  # $4.1: @MC_Address = load_struct_member(variable_value.1, address)
  mov rax, [rbp-24]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax:[rbp-24] $3.1:[rbp-25] $4.1:rbx 
  .loc 2 418 9
  # $5.1: Boolean = $4.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax:[rbp-24] $3.1:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__generate_load_variable_address_instruction_18__4, .LABEL__generate_load_variable_address_instruction_18__5)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__generate_load_variable_address_instruction_18__5
.LABEL__generate_load_variable_address_instruction_18__4:
  .loc 2 419 9
  # call(abort_35, self.1, "Variable has no address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_61[rip] # "Variable has no address"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__generate_load_variable_address_instruction_18__5:
  .loc 2 421 45
  # $6.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 421 71
  # $7.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-34], rbx
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $6.1:[rbp-34] $7.1:rax 
  .loc 2 421 21
  # result_value.1: @MC_Value = call(map_variable_value_41, self.1, $6.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  mov rdx, rax
  call map_variable_value_41
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:rax 
  .loc 2 422 5
  # $9.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:rax $9.1:r15 
  .loc 2 422 5
  # $10.1: @FILE = call(write_337, $9.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-34], rax
  call write_337
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:[rbp-34] $10.1:rax 
  .loc 2 422 44
  # $11.1: @MC_Register = load_struct_member(result_value.1, register)
  mov rbx, [rbp-34]
  mov r15, [rbx+32]
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $10.1:rax $11.1:r15 
  .loc 2 422 44
  # $12.1: @String = load_struct_member($11.1, name_q)
  mov rbx, [r15+8]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $10.1:rax $12.1:rbx 
  .loc 2 422 5
  # $13.1: @FILE = call(write_337, $10.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call write_337
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $13.1:rax 
  .loc 2 422 5
  # $14.1: @FILE = call(write_337, $13.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $14.1:rax 
  .loc 2 422 92
  # $15.1: @MC_Address = load_struct_member(variable_value.1, address)
  mov rbx, [rbp-24]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rbx:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $14.1:rax $15.1:r15 
  .loc 2 422 5
  # $16.1: @FILE = call(write_55, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $16.1:rax 
  .loc 2 422 5
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
  # return()
  jmp .LABEL__generate_load_variable_address_instruction_18__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] 
  # [discarded value]: variable_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_variable_address_instruction_18__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_address_instruction_18__stack_frame_size: .word 48

  .loc 2 425 1
  .text
generate_load_variable_instruction_19:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_instruction_19__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_instruction_19__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 426 9
  # $1.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 426 9
  # $2.1: Boolean = call(is_343, $1.1, IR_Function_Parameter)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, IR_Function_Parameter[rip]
  call is_343
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_variable_instruction_19__2, .LABEL__generate_load_variable_instruction_19__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_load_variable_instruction_19__4
.LABEL__generate_load_variable_instruction_19__2:
  .loc 2 427 22
  # parameter.1: @IR_Function_Parameter = load_struct_member(instruction.1, variable)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx 
  .loc 2 428 28
  # $10.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov r15, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $10.1:r15 
  .loc 2 428 28
  # $11.1: @IR_Function = load_struct_member($10.1, function)
  mov r14, [r15+16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $11.1:r14 
  .loc 2 428 28
  # $12.1: @List = load_struct_member($11.1, parameters)
  mov r15, [r14+32]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $12.1:r15 
  .loc 2 428 28
  # parameter_index.1: Int = call(index_of_325, $12.1, parameter.1)
  mov rdi, r15
  mov rsi, rbx
  call index_of_325
  # [discarded value]: $12.1
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax 
  .loc 2 429 13
  # $14.1: Boolean = parameter_index.1 < 0
  cmp rax, 0
  setl bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax $14.1:rbx 
  # jump($14.1, .LABEL__generate_load_variable_instruction_19__5, .LABEL__generate_load_variable_instruction_19__6)
  test bl, bl
  mov [rbp-25], rax
  mov [rbp-26], bl
  jz .LABEL__generate_load_variable_instruction_19__6
.LABEL__generate_load_variable_instruction_19__5:
  .loc 2 430 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] 
.LABEL__generate_load_variable_instruction_19__6:
  .loc 2 432 13
  # $15.1: Boolean = parameter_index.1 == 0
  cmp QWORD PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:rax 
  # jump($15.1, .LABEL__generate_load_variable_instruction_19__7, .LABEL__generate_load_variable_instruction_19__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_load_variable_instruction_19__9
.LABEL__generate_load_variable_instruction_19__7:
  .loc 2 433 37
  # $37.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $37.1:rbx 
  .loc 2 433 63
  # $38.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov r15, [rbp-8]
  mov r14, [r15+57]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $37.1:rbx $38.1:r14 
  .loc 2 433 13
  # $39.1: @MC_Value = call(map_variable_value_41, self.1, $37.1, $38.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
.LABEL__generate_load_variable_instruction_19__3:
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
.LABEL__generate_load_variable_instruction_19__9:
  .loc 2 434 20
  # $16.1: Boolean = parameter_index.1 == 1
  cmp QWORD PTR [rbp-25], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:rax 
  # jump($16.1, .LABEL__generate_load_variable_instruction_19__10, .LABEL__generate_load_variable_instruction_19__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_variable_instruction_19__12
.LABEL__generate_load_variable_instruction_19__10:
  .loc 2 435 37
  # $34.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $34.1:rbx 
  .loc 2 435 63
  # $35.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov r15, [rbp-8]
  mov r14, [r15+49]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $34.1:rbx $35.1:r14 
  .loc 2 435 13
  # $36.1: @MC_Value = call(map_variable_value_41, self.1, $34.1, $35.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
.LABEL__generate_load_variable_instruction_19__12:
  .loc 2 436 20
  # $17.1: Boolean = parameter_index.1 == 2
  cmp QWORD PTR [rbp-25], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:rax 
  # jump($17.1, .LABEL__generate_load_variable_instruction_19__13, .LABEL__generate_load_variable_instruction_19__15)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_variable_instruction_19__15
.LABEL__generate_load_variable_instruction_19__13:
  .loc 2 437 37
  # $31.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $31.1:rbx 
  .loc 2 437 63
  # $32.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r15, [rbp-8]
  mov r14, [r15+33]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $31.1:rbx $32.1:r14 
  .loc 2 437 13
  # $33.1: @MC_Value = call(map_variable_value_41, self.1, $31.1, $32.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
.LABEL__generate_load_variable_instruction_19__15:
  .loc 2 438 20
  # $18.1: Boolean = parameter_index.1 == 3
  cmp QWORD PTR [rbp-25], 3
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:rax 
  # jump($18.1, .LABEL__generate_load_variable_instruction_19__16, .LABEL__generate_load_variable_instruction_19__18)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_load_variable_instruction_19__18
.LABEL__generate_load_variable_instruction_19__16:
  .loc 2 439 37
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $28.1:rbx 
  .loc 2 439 63
  # $29.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov r15, [rbp-8]
  mov r14, [r15+25]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $28.1:rbx $29.1:r14 
  .loc 2 439 13
  # $30.1: @MC_Value = call(map_variable_value_41, self.1, $28.1, $29.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
.LABEL__generate_load_variable_instruction_19__18:
  .loc 2 440 20
  # $19.1: Boolean = parameter_index.1 == 4
  cmp QWORD PTR [rbp-25], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:rax 
  # jump($19.1, .LABEL__generate_load_variable_instruction_19__19, .LABEL__generate_load_variable_instruction_19__21)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__19:
  .loc 2 441 37
  # $25.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $25.1:rbx 
  .loc 2 441 63
  # $26.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov r15, [rbp-8]
  mov r14, [r15+81]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $25.1:rbx $26.1:r14 
  .loc 2 441 13
  # $27.1: @MC_Value = call(map_variable_value_41, self.1, $25.1, $26.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
.LABEL__generate_load_variable_instruction_19__21:
  .loc 2 442 20
  # $20.1: Boolean = parameter_index.1 == 5
  cmp QWORD PTR [rbp-25], 5
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:rax 
  # jump($20.1, .LABEL__generate_load_variable_instruction_19__22, .LABEL__generate_load_variable_instruction_19__24)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_load_variable_instruction_19__24
.LABEL__generate_load_variable_instruction_19__22:
  .loc 2 443 37
  # $22.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $22.1:rbx 
  .loc 2 443 63
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov r15, [rbp-8]
  mov r14, [r15+89]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $22.1:rbx $23.1:r14 
  .loc 2 443 13
  # $24.1: @MC_Value = call(map_variable_value_41, self.1, $22.1, $23.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
.LABEL__generate_load_variable_instruction_19__24:
  .loc 2 445 24
  # $21.1: @String = call(clone_345, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $21.1:rax 
  .loc 2 445 13
  # call(abort_35, self.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] 
  # [discarded value]: parameter_index.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__generate_load_variable_instruction_19__4:
  .loc 2 448 20
  # $3.1: @String = call(clone_345, "Unsupported variable type: ")
  lea rdi, .LABEL__string_63[rip] # "Unsupported variable type: "
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 2 448 64
  # $4.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $4.1:r15 
  .loc 2 448 64
  # $5.1: @Object_Type = load_struct_member($4.1, object_type)
  mov r14, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $5.1:r14 
  .loc 2 448 64
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $5.1:r14 $6.1:r15 
  .loc 2 448 20
  # $7.1: @String = call(append_354, $3.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 2 448 9
  # call(abort_35, self.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_variable_instruction_19__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_instruction_19__stack_frame_size: .word 32

  .loc 2 452 1
  .text
generate_load_struct_member_instruction_20:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_struct_member_instruction_20__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_struct_member_instruction_20__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 453 32
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_207, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_207
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  .loc 2 455 9
  # $2.1: Boolean = call(is_343, ir_struct_pointer_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_struct_member_instruction_20__2, .LABEL__generate_load_struct_member_instruction_20__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_load_struct_member_instruction_20__4
.LABEL__generate_load_struct_member_instruction_20__2:
  .loc 2 456 36
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 457 36
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_42, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 458 13
  # $6.1: Boolean = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__generate_load_struct_member_instruction_20__5, .LABEL__generate_load_struct_member_instruction_20__6)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_load_struct_member_instruction_20__6
.LABEL__generate_load_struct_member_instruction_20__5:
  .loc 2 459 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_load_struct_member_instruction_20__6:
  .loc 2 461 35
  # struct_pointer_register.3: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx 
  .loc 2 462 13
  # $8.1: Boolean = struct_pointer_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx $8.1:r15 
  # jump($8.1, .LABEL__generate_load_struct_member_instruction_20__7, .LABEL__generate_load_struct_member_instruction_20__3)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__3
.LABEL__generate_load_struct_member_instruction_20__7:
  .loc 2 463 17
  # $9.1: @MC_Address = load_struct_member(mc_struct_pointer_value.1, address)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $9.1:rbx 
  .loc 2 463 17
  # $10.1: Boolean = $9.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:r15 
  # jump($10.1, .LABEL__generate_load_struct_member_instruction_20__9, .LABEL__generate_load_struct_member_instruction_20__10)
  test r15b, r15b
  mov [rbp-52], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__10
.LABEL__generate_load_struct_member_instruction_20__9:
  .loc 2 464 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
.LABEL__generate_load_struct_member_instruction_20__10:
  .loc 2 466 39
  # struct_pointer_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:rax:[rbp-50] 
  .loc 2 467 13
  # call(generate_load_value_30, self.1, struct_pointer_register.4, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 468 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, ir_struct_pointer_value.1, struct_pointer_register.4)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
.LABEL__generate_load_struct_member_instruction_20__3:
  # struct_pointer_register.8: @MC_Register = phi(struct_pointer_register.2, struct_pointer_register.4, struct_pointer_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 476 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 477 29
  # $14.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax $14.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 477 5
  # $15.1: @MC_Value = call(map_variable_value_41, self.1, $14.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  mov [rbp-60], rax
  call map_variable_value_41
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 478 50
  # $16.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] $16.1:rbx struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 478 34
  # struct_type_member_offset.1: Int = call(get_offset_33, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 479 9
  # $18.1: Boolean = load_struct_member(instruction.1, load_address)
  mov rbx, [rbp-16]
  mov r15b, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax $18.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump($18.1, .LABEL__generate_load_struct_member_instruction_20__11, .LABEL__generate_load_struct_member_instruction_20__13)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__13
.LABEL__generate_load_struct_member_instruction_20__11:
  .loc 2 480 9
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $45.1:rbx 
  .loc 2 480 9
  # $46.1: @FILE = call(write_337, $45.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax 
  .loc 2 480 48
  # $47.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax $47.1:r15 
  .loc 2 480 9
  # $48.1: @FILE = call(write_337, $46.1, $47.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $48.1:rax 
  .loc 2 480 9
  # $49.1: @FILE = call(write_337, $48.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax 
  .loc 2 480 90
  # $50.1: @String = load_struct_member(struct_pointer_register.8, name_q)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax $50.1:r15 
  .loc 2 480 9
  # $51.1: @FILE = call(write_337, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $51.1:rax 
  .loc 2 480 9
  # $52.1: @FILE = call(end_line_340, $51.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 481 13
  # $53.1: Boolean = struct_type_member_offset.1 > 0
  cmp QWORD PTR [rbp-68], 0
  setg al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:rax 
  # jump($53.1, .LABEL__generate_load_struct_member_instruction_20__26, .LABEL__generate_load_struct_member_instruction_20__12)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_struct_member_instruction_20__12
.LABEL__generate_load_struct_member_instruction_20__26:
  .loc 2 482 13
  # $54.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $54.1:rbx 
  .loc 2 482 13
  # $55.1: @FILE = call(write_337, $54.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax 
  .loc 2 482 52
  # $56.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax $56.1:r15 
  .loc 2 482 13
  # $57.1: @FILE = call(write_337, $55.1, $56.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $57.1:rax 
  .loc 2 482 13
  # $58.1: @FILE = call(write_337, $57.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $58.1:rax 
  .loc 2 482 13
  # $59.1: @FILE = call(write_336, $58.1, struct_type_member_offset.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_336
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $59.1:rax 
  .loc 2 482 13
  # $60.1: @FILE = call(end_line_340, $59.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
.LABEL__generate_load_struct_member_instruction_20__12:
  .loc 2 500 5
  # store_struct_member(struct_pointer_register.8, is_reserved, false)
  mov rax, [rbp-50]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rax:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # return()
  jmp .LABEL__generate_load_struct_member_instruction_20__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
.LABEL__generate_load_struct_member_instruction_20__13:
  .loc 2 485 54
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $19.1:rbx 
  .loc 2 485 54
  # $20.1: @IR_Type = load_struct_member($19.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $20.1:r15 
  .loc 2 485 35
  # result_value_type_size.1: Int = call(get_type_size_56, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax 
  .loc 2 486 9
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax $22.1:r15 
  .loc 2 486 9
  # $23.1: @FILE = call(write_337, $22.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  mov [rbp-77], rax
  call write_337
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  .loc 2 487 13
  # $24.1: Boolean = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-77], 8
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__generate_load_struct_member_instruction_20__14, .LABEL__generate_load_struct_member_instruction_20__16)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_load_struct_member_instruction_20__16
.LABEL__generate_load_struct_member_instruction_20__14:
  .loc 2 488 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx 
  .loc 2 488 36
  # $38.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-60]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx $38.1:r14 
  .loc 2 488 13
  # $39.1: @FILE = call(write_337, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
.LABEL__generate_load_struct_member_instruction_20__15:
  .loc 2 498 9
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $40.1:rbx 
  .loc 2 498 9
  # $41.1: @FILE = call(write_337, $40.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:rax 
  .loc 2 498 44
  # $42.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.8, offset = struct_type_member_offset.1)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.8
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-68]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:r15:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:[rbp-86] $42.1:rax 
  .loc 2 498 9
  # $43.1: @FILE = call(write_55, $41.1, $42.1)
  mov rdi, [rbp-86]
  mov rsi, rax
  call write_55
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $43.1:rax 
  .loc 2 498 9
  # $44.1: @FILE = call(end_line_340, $43.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
  jmp .LABEL__generate_load_struct_member_instruction_20__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__generate_load_struct_member_instruction_20__16:
  .loc 2 489 20
  # $25.1: Boolean = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-77], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:rax 
  # jump($25.1, .LABEL__generate_load_struct_member_instruction_20__17, .LABEL__generate_load_struct_member_instruction_20__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_load_struct_member_instruction_20__19
.LABEL__generate_load_struct_member_instruction_20__17:
  .loc 2 490 13
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx 
  .loc 2 490 36
  # $35.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx $35.1:r14 
  .loc 2 490 13
  # $36.1: @FILE = call(write_337, $34.1, $35.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
.LABEL__generate_load_struct_member_instruction_20__19:
  .loc 2 491 20
  # $26.1: Boolean = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-77], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:rax 
  # jump($26.1, .LABEL__generate_load_struct_member_instruction_20__20, .LABEL__generate_load_struct_member_instruction_20__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_load_struct_member_instruction_20__22
.LABEL__generate_load_struct_member_instruction_20__20:
  .loc 2 492 13
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx 
  .loc 2 492 36
  # $32.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-60]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx $32.1:r14 
  .loc 2 492 13
  # $33.1: @FILE = call(write_337, $31.1, $32.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
.LABEL__generate_load_struct_member_instruction_20__22:
  .loc 2 493 20
  # $27.1: Boolean = result_value_type_size.1 == 1
  cmp QWORD PTR [rbp-77], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:rax 
  # jump($27.1, .LABEL__generate_load_struct_member_instruction_20__23, .LABEL__generate_load_struct_member_instruction_20__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_load_struct_member_instruction_20__25
.LABEL__generate_load_struct_member_instruction_20__23:
  .loc 2 494 13
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx 
  .loc 2 494 36
  # $29.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-60]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx $29.1:r14 
  .loc 2 494 13
  # $30.1: @FILE = call(write_337, $28.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
.LABEL__generate_load_struct_member_instruction_20__25:
  .loc 2 496 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  # [discarded value]: result_value_type_size.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: result_register.1
  # [discarded value]: struct_pointer_register.8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_pointer_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] 
  # [discarded value]: struct_pointer_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_load_struct_member_instruction_20__4:
  .loc 2 471 35
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 472 9
  # store_struct_member(struct_pointer_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 473 9
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
  jmp .LABEL__generate_load_struct_member_instruction_20__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_struct_member_instruction_20__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_struct_member_instruction_20__stack_frame_size: .word 96

  .loc 2 503 1
  .text
generate_modulo_instruction_21:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_modulo_instruction_21__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_modulo_instruction_21__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Modulo_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 504 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 504 5
  # call(release_register_47, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 505 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 505 49
  # $3.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 505 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 506 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 506 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 507 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 507 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 508 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 508 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 509 5
  # $7.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $7.1:rbx 
  .loc 2 509 5
  # $8.1: @FILE = call(write_337, $7.1, "  cqto")
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  cqto"
  call write_337
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 509 5
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 510 20
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:rax 
  .loc 2 511 9
  # $11.1: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:rax 
  # jump($11.1, .LABEL__generate_modulo_instruction_21__2, .LABEL__generate_modulo_instruction_21__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_modulo_instruction_21__4
.LABEL__generate_modulo_instruction_21__2:
  .loc 2 512 21
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 513 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rax 
  .loc 2 514 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-33], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 515 9
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $17.1:rbx 
  .loc 2 515 9
  # $18.1: @FILE = call(write_337, $17.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_337
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $18.1:rax 
  .loc 2 515 49
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:rbx:[rbp-33] $18.1:rax $19.1:r15 
  .loc 2 515 9
  # $20.1: @FILE = call(write_337, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] $20.1:rax 
  .loc 2 515 9
  # $21.1: @FILE = call(end_line_340, $20.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] register.1:[rbp-33] 
  .loc 2 516 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-33]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
.LABEL__generate_modulo_instruction_21__3:
  .loc 2 520 5
  # $22.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $22.1:rbx 
  .loc 2 520 5
  # store_struct_member($22.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 521 5
  # $23.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $23.1:rbx 
  .loc 2 521 5
  # store_struct_member($23.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  .loc 2 522 29
  # $24.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 
  .loc 2 522 55
  # $25.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r14, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $24.1:r15 $25.1:r14 
  .loc 2 522 5
  # $26.1: @MC_Value = call(map_variable_value_41, self.1, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_modulo_instruction_21__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
.LABEL__generate_modulo_instruction_21__4:
  .loc 2 518 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $12.1:rbx 
  .loc 2 518 9
  # $13.1: @FILE = call(write_337, $12.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_58[rip] # "  idiv "
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $13.1:rax 
  .loc 2 518 9
  # $14.1: @FILE = call(write_operand_34, $13.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call write_operand_34
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] $14.1:rax 
  .loc 2 518 9
  # $15.1: @FILE = call(end_line_340, $14.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
  jmp .LABEL__generate_modulo_instruction_21__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] $11.1:[rbp-25] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] right_value.1:[rbp-24] 
  # [discarded value]: right_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_modulo_instruction_21__end:
  mov rsp, rbp
  pop rbp
  ret

generate_modulo_instruction_21__stack_frame_size: .word 48

  .loc 2 525 1
  .text
generate_multiply_instruction_22:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_multiply_instruction_22__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_multiply_instruction_22__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Multiply_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 526 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 527 47
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 527 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 528 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 528 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 529 5
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 529 5
  # $6.1: @FILE = call(write_337, $5.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $6.1:rax 
  .loc 2 529 45
  # $7.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 529 5
  # $8.1: @FILE = call(write_337, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $8.1:rax 
  .loc 2 529 5
  # $9.1: @FILE = call(write_337, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 529 101
  # $10.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $9.1:[rbp-24] $10.1:rax 
  .loc 2 529 5
  # $11.1: @FILE = call(write_operand_34, $9.1, self.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_34
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: self.1
  # [live values]: $11.1:rax 
  .loc 2 529 5
  # $12.1: @FILE = call(end_line_340, $11.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_multiply_instruction_22__end
  # [live values]: 
.LABEL__generate_multiply_instruction_22__end:
  mov rsp, rbp
  pop rbp
  ret

generate_multiply_instruction_22__stack_frame_size: .word 32

  .loc 2 532 1
  .text
generate_new_instruction_23:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_new_instruction_23__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_new_instruction_23__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_New_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 533 5
  # call(release_all_registers_46, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_46
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 534 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $1.1:rbx 
  .loc 2 534 5
  # $2.1: @FILE = call(write_337, $1.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  .loc 2 534 44
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $3.1:r15 
  .loc 2 534 44
  # $4.1: @String = load_struct_member($3.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $4.1:r14 
  .loc 2 534 5
  # $5.1: @FILE = call(write_337, $2.1, $4.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  .loc 2 534 5
  # $6.1: @FILE = call(write_337, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  .loc 2 534 107
  # $7.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 534 88
  # $8.1: Int = call(get_type_size_56, self.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call get_type_size_56
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:[rbp-24] $8.1:rax 
  .loc 2 534 5
  # $9.1: @FILE = call(write_336, $6.1, $8.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call write_336
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 534 5
  # $10.1: @FILE = call(end_line_340, $9.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 535 5
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $11.1:rbx 
  .loc 2 535 5
  # $12.1: @FILE = call(write_337, $11.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  call "
  call write_337
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rax 
  .loc 2 535 5
  # $13.1: @FILE = call(write_337, $12.1, "malloc")
  mov rdi, rax
  lea rsi, .LABEL__string_64[rip] # "malloc"
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  .loc 2 535 5
  # $14.1: @FILE = call(end_line_340, $13.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 536 29
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $15.1:rbx 
  .loc 2 536 55
  # $16.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-16]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] $15.1:rbx $16.1:r14 
  .loc 2 536 5
  # $17.1: @MC_Value = call(map_variable_value_41, self.1, $15.1, $16.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 537 31
  # $18.1: @IR_Value = call(get_init_value_215, instruction.1)
  mov rdi, [rbp-8]
  call get_init_value_215
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $18.1:rax 
  .loc 2 537 102
  # $19.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-16]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-16] $18.1:rax $19.1:r15 
  .loc 2 537 61
  # $20.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $19.1, offset = 0)
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $19.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] $18.1:[rbp-24] $20.1:rax 
  .loc 2 537 5
  # call(generate_store_value_31, self.1, $18.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_new_instruction_23__end
  # [live values]: 
.LABEL__generate_new_instruction_23__end:
  mov rsp, rbp
  pop rbp
  ret

generate_new_instruction_23__stack_frame_size: .word 32

  .loc 2 540 1
  .text
generate_phi_instruction_24:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_phi_instruction_24__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_phi_instruction_24__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Phi_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 541 24
  # $1.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 541 24
  # result_variable.1: @IR_Variable = load_struct_member($1.1, variable)
  mov rbx, [rax+48]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx 
  .loc 2 542 33
  # $3.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx $3.1:rax 
  .loc 2 542 33
  # instruction_values_entry.1: @IR_Values_Map_Entry = load_struct_member($3.1, first_entry)
  mov r15, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx instruction_values_entry.1:r15 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
.LABEL__generate_phi_instruction_24__2:
  # instruction_values_entry.2: @IR_Values_Map_Entry = phi(instruction_values_entry.1, instruction_values_entry.5)
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  .loc 2 543 12
  # $5.1: Boolean = instruction_values_entry.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:rax 
  # jump($5.1, .LABEL__generate_phi_instruction_24__3, .LABEL__generate_phi_instruction_24__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_phi_instruction_24__4
.LABEL__generate_phi_instruction_24__3:
  .loc 2 544 30
  # instruction_value.1: @IR_Variable_Value = load_struct_member(instruction_values_entry.2, value)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx 
  .loc 2 545 32
  # $8.1: @IR_Variable = load_struct_member(instruction_value.1, variable)
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $8.1:r15 
  .loc 2 545 13
  # $9.1: Boolean = result_variable.1 != $8.1
  cmp QWORD PTR [rbp-8], r15
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $9.1:r14 
  # jump($9.1, .LABEL__generate_phi_instruction_24__5, .LABEL__generate_phi_instruction_24__6)
  test r14b, r14b
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__generate_phi_instruction_24__6
.LABEL__generate_phi_instruction_24__5:
  .loc 2 546 32
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-24]
  call find_unused_register_38
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:rax 
  .loc 2 547 13
  # call(generate_load_value_30, self.1, result_register.1, instruction_value.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-41]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] 
  .loc 2 548 37
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] instruction.1:rax:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] $11.1:rbx 
  .loc 2 548 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, $11.1, result_register.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 549 13
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__generate_phi_instruction_24__6:
  .loc 2 551 36
  # instruction_values_entry.5: @IR_Values_Map_Entry = load_struct_member(instruction_values_entry.2, next_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:rbx:[rbp-32] 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-32], rbx
  jmp .LABEL__generate_phi_instruction_24__2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:[rbp-32] 
  # [discarded value]: instruction_values_entry.5
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] 
  # [discarded value]: instruction_value.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
.LABEL__generate_phi_instruction_24__4:
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  # [discarded value]: instruction_values_entry.2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [discarded value]: instruction_values_entry.1
  # [discarded value]: result_variable.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_phi_instruction_24__end:
  mov rsp, rbp
  pop rbp
  ret

generate_phi_instruction_24__stack_frame_size: .word 64

  .loc 2 555 1
  .text
generate_return_instruction_25:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_return_instruction_25__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_return_instruction_25__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Return_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 556 21
  # return_value.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_return_value_218
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax 
  .loc 2 557 9
  # $2.1: Boolean = return_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__generate_return_instruction_25__2, .LABEL__generate_return_instruction_25__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_return_instruction_25__3
.LABEL__generate_return_instruction_25__2:
  .loc 2 558 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 558 9
  # call(generate_load_value_30, self.1, $3.1, return_value.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call generate_load_value_30
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # jump(.LABEL__generate_return_instruction_25__3)
.LABEL__generate_return_instruction_25__3:
  .loc 2 560 5
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_46
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  .loc 2 561 5
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $4.1:rbx 
  .loc 2 561 5
  # $5.1: @FILE = call(write_337, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  jmp "
  call write_337
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax 
  .loc 2 561 63
  # $6.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $6.1:r15 
  .loc 2 561 63
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  mov r14, [r15+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $7.1:r14 
  .loc 2 561 5
  # $8.1: @FILE = call(write_function_end_label_5, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_function_end_label_5
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 561 5
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_return_instruction_25__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [discarded value]: return_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_return_instruction_25__end:
  mov rsp, rbp
  pop rbp
  ret

generate_return_instruction_25__stack_frame_size: .word 32

  .loc 2 564 1
  .text
generate_set_instruction_26:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_set_instruction_26__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_set_instruction_26__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Set_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 565 17
  # ir_value.1: @IR_Value = call(get_value_221, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_221
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  .loc 2 566 9
  # $2.1: Boolean = call(is_343, ir_value.1, IR_Undefined_Value)
  mov rdi, rax
  mov rsi, IR_Undefined_Value[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_set_instruction_26__2, .LABEL__generate_set_instruction_26__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_set_instruction_26__3
.LABEL__generate_set_instruction_26__2:
  .loc 2 567 20
  # $3.1: @String = call(clone_345, "Looks like ")
  lea rdi, .LABEL__string_65[rip] # "Looks like "
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 2 567 48
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $4.1:r15 
  .loc 2 567 48
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $5.1:r14 
  .loc 2 567 48
  # $6.1: @String = load_struct_member($5.1, name)
  mov r15, [r14+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $6.1:r15 
  .loc 2 567 20
  # $7.1: @String = call(append_354, $3.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $6.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $7.1:rax 
  .loc 2 567 20
  # $8.1: @String = call(append_354, $7.1, " is not properly initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_66[rip] # " is not properly initialized"
  call append_354
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 567 9
  # call(abort_35, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_set_instruction_26__3:
  .loc 2 569 9
  # $9.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $9.1:rbx 
  .loc 2 569 9
  # $10.1: Boolean = call(is_343, $9.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:rax 
  # jump($10.1, .LABEL__generate_set_instruction_26__4, .LABEL__generate_set_instruction_26__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_set_instruction_26__6
.LABEL__generate_set_instruction_26__4:
  .loc 2 570 36
  # $20.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $20.1:rbx 
  .loc 2 570 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax 
  .loc 2 571 13
  # $22.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $22.1:rbx 
  .loc 2 571 13
  # $23.1: Boolean = $22.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $23.1:r15 
  # jump($23.1, .LABEL__generate_set_instruction_26__13, .LABEL__generate_set_instruction_26__14)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__generate_set_instruction_26__14
.LABEL__generate_set_instruction_26__13:
  .loc 2 572 87
  # $24.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $24.1:rbx 
  .loc 2 572 68
  # $25.1: Int = call(get_type_size_56, self.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $25.1:rax 
  .loc 2 572 33
  # mc_value_address.1: @MC_Local_Variable_Address = call(create_local_variable_address_44, self.1, $25.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_local_variable_address_44
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax 
  .loc 2 573 37
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax $27.1:r15 
  .loc 2 573 13
  # call(map_variable_value_40, self.1, $27.1, mc_value_address.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  call map_variable_value_40
  # [discarded value]: $27.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__14)
.LABEL__generate_set_instruction_26__14:
  .loc 2 575 45
  # $28.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax:[rbp-34] $23.1:[rbp-35] $28.1:rbx 
  .loc 2 575 9
  # call(generate_store_value_31, self.1, ir_value.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  mov rdx, rbx
  call generate_store_value_31
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__5)
.LABEL__generate_set_instruction_26__5:
  # return()
  jmp .LABEL__generate_set_instruction_26__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__generate_set_instruction_26__6:
  .loc 2 578 13
  # $11.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__generate_set_instruction_26__7, .LABEL__generate_set_instruction_26__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_set_instruction_26__9
.LABEL__generate_set_instruction_26__7:
  .loc 2 579 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:rax 
  .loc 2 580 25
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-35], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] mc_value.1:rax 
  .loc 2 581 31
  # result_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx 
  .loc 2 582 17
  # $16.1: Boolean = result_register.3 != null
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx $16.1:rax 
  # jump($16.1, .LABEL__generate_set_instruction_26__10, .LABEL__generate_set_instruction_26__12)
  test al, al
  mov [rbp-36], al
  mov [rbp-44], rbx
  jz .LABEL__generate_set_instruction_26__12
.LABEL__generate_set_instruction_26__10:
  .loc 2 583 17
  # call(release_register_47, self.1, result_register.3)
  mov rdi, [rbp-8]
  mov rsi, [rbp-44]
  call release_register_47
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__8)
.LABEL__generate_set_instruction_26__8:
  # result_register.6: @MC_Register = phi(result_register.2, result_register.4, result_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] 
  .loc 2 592 33
  # $18.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] $18.1:rbx 
  .loc 2 592 9
  # $19.1: @MC_Value = call(map_variable_value_41, self.1, $18.1, result_register.6)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-44]
  call map_variable_value_41
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: result_register.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__5)
  jmp .LABEL__generate_set_instruction_26__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
.LABEL__generate_set_instruction_26__12:
  .loc 2 585 35
  # result_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:rax:[rbp-44] 
  .loc 2 586 17
  # call(generate_load_value_30, self.1, result_register.4, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-35]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # [discarded value]: result_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] 
  # [discarded value]: result_register.3
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__generate_set_instruction_26__9:
  .loc 2 589 31
  # result_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:rax:[rbp-44] 
  .loc 2 590 13
  # call(generate_load_value_30, self.1, result_register.2, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # [discarded value]: result_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_set_instruction_26__end:
  mov rsp, rbp
  pop rbp
  ret

generate_set_instruction_26__stack_frame_size: .word 48

  .loc 2 596 1
  .text
generate_store_array_item_instruction_27:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_array_item_instruction_27__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_array_item_instruction_27__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 597 25
  # address_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 598 5
  # store_struct_member(address_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 599 48
  # $2.1: @IR_Value = call(get_array_value_224, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_224
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  .loc 2 599 5
  # call(generate_load_value_30, self.1, address_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  .loc 2 601 17
  # ir_value.1: @IR_Value = call(get_value_226, instruction.1)
  mov rdi, [rbp-8]
  call get_value_226
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax 
  .loc 2 602 46
  # $4.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax $4.1:rbx 
  .loc 2 602 27
  # ir_value_type_size.1: Int = call(get_type_size_56, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call get_type_size_56
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:rax 
  .loc 2 604 20
  # index_value.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_index_value_225
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax 
  .loc 2 605 9
  # $7.1: Boolean = call(is_343, index_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-48], rax
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, .LABEL__generate_store_array_item_instruction_27__2, .LABEL__generate_store_array_item_instruction_27__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_store_array_item_instruction_27__4
.LABEL__generate_store_array_item_instruction_27__2:
  .loc 2 606 24
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax 
  .loc 2 607 13
  # $27.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax $27.1:rbx 
  .loc 2 607 13
  # $28.1: Boolean = call(is_343, $27.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  mov [rbp-57], rax
  call is_343
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $28.1:rax 
  .loc 2 607 13
  # $29.1: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:rbx 
  # jump($29.1, .LABEL__generate_store_array_item_instruction_27__7, .LABEL__generate_store_array_item_instruction_27__8)
  test bl, bl
  mov [rbp-58], bl
  jz .LABEL__generate_store_array_item_instruction_27__8
.LABEL__generate_store_array_item_instruction_27__7:
  .loc 2 608 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
.LABEL__generate_store_array_item_instruction_27__8:
  .loc 2 610 25
  # $31.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-57]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] $31.1:rbx 
  .loc 2 610 24
  # index_value.1: Int = load_struct_member($31.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 
  .loc 2 611 13
  # $33.1: Boolean = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 $33.1:rbx 
  # jump($33.1, .LABEL__generate_store_array_item_instruction_27__9, .LABEL__generate_store_array_item_instruction_27__3)
  test bl, bl
  mov [rbp-59], bl
  mov [rbp-67], r15
  jz .LABEL__generate_store_array_item_instruction_27__3
.LABEL__generate_store_array_item_instruction_27__9:
  .loc 2 612 17
  # $34.1: Boolean = index_value.1 < 0
  cmp QWORD PTR [rbp-67], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:rax 
  # jump($34.1, .LABEL__generate_store_array_item_instruction_27__11, .LABEL__generate_store_array_item_instruction_27__12)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_array_item_instruction_27__12
.LABEL__generate_store_array_item_instruction_27__11:
  .loc 2 613 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
.LABEL__generate_store_array_item_instruction_27__12:
  .loc 2 615 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $35.1:rbx 
  .loc 2 615 13
  # $36.1: @FILE = call(write_337, $35.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax 
  .loc 2 615 52
  # $37.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax $37.1:r15 
  .loc 2 615 13
  # $38.1: @FILE = call(write_337, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $38.1:rax 
  .loc 2 615 13
  # $39.1: @FILE = call(write_337, $38.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax 
  .loc 2 615 95
  # $40.1: Int = index_value.1 * ir_value_type_size.1
  mov rbx, [rbp-67]
  imul rbx, QWORD PTR [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax $40.1:rbx 
  .loc 2 615 13
  # $41.1: @FILE = call(write_336, $39.1, $40.1)
  mov rdi, rax
  mov rsi, rbx
  call write_336
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $41.1:rax 
  .loc 2 615 13
  # $42.1: @FILE = call(end_line_340, $41.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
.LABEL__generate_store_array_item_instruction_27__3:
  .loc 2 628 9
  # $43.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:rax index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump($43.1, .LABEL__generate_store_array_item_instruction_27__13, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-69], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__13:
  .loc 2 629 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:rax 
  .loc 2 630 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-77], rax
  call get_value_42
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] mc_value.1:rax 
  .loc 2 631 13
  # $46.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $46.1:rbx 
  .loc 2 631 13
  # $47.1: Boolean = $46.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:rax 
  # jump($47.1, .LABEL__generate_store_array_item_instruction_27__15, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__15:
  .loc 2 632 25
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:rax 
  .loc 2 633 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-77]
  mov [rbp-86], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:[rbp-86] 
  .loc 2 634 13
  # $49.1: @MC_Value = call(map_variable_value_41, self.1, ir_value.1, register.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-77]
  mov rdx, [rbp-86]
  call map_variable_value_41
  # [discarded value]: $49.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # jump(.LABEL__generate_store_array_item_instruction_27__14)
.LABEL__generate_store_array_item_instruction_27__14:
  .loc 2 638 5
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $50.1:rbx 
  .loc 2 638 5
  # $51.1: @FILE = call(write_337, $50.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  .loc 2 639 9
  # $52.1: Boolean = ir_value_type_size.1 == 8
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:rax 
  # jump($52.1, .LABEL__generate_store_array_item_instruction_27__17, .LABEL__generate_store_array_item_instruction_27__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_store_array_item_instruction_27__19
.LABEL__generate_store_array_item_instruction_27__17:
  .loc 2 640 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $62.1:rbx 
  .loc 2 640 9
  # $63.1: @FILE = call(write_337, $62.1, "QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_67[rip] # "QWORD PTR "
  call write_337
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
.LABEL__generate_store_array_item_instruction_27__18:
  .loc 2 650 5
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:rbx 
  .loc 2 650 28
  # $65.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = address_register.1, offset = 0)
  mov [rbp-87], rbx
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = address_register.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:[rbp-87] $65.1:rax 
  .loc 2 650 5
  # $66.1: @FILE = call(write_55, $64.1, $65.1)
  mov rdi, [rbp-87]
  mov rsi, rax
  call write_55
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $66.1:rax 
  .loc 2 650 5
  # $67.1: @FILE = call(write_337, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $67.1:rax 
  .loc 2 650 5
  # $68.1: @FILE = call(write_operand_34, $67.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-32]
  call write_operand_34
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $68.1:rax 
  .loc 2 650 5
  # $69.1: @FILE = call(end_line_340, $68.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  .loc 2 651 5
  # store_struct_member(address_register.1, is_reserved, false)
  mov rax, [rbp-24]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # return()
  jmp .LABEL__generate_store_array_item_instruction_27__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
.LABEL__generate_store_array_item_instruction_27__19:
  .loc 2 641 16
  # $53.1: Boolean = ir_value_type_size.1 == 4
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:rax 
  # jump($53.1, .LABEL__generate_store_array_item_instruction_27__20, .LABEL__generate_store_array_item_instruction_27__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_store_array_item_instruction_27__22
.LABEL__generate_store_array_item_instruction_27__20:
  .loc 2 642 9
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $60.1:rbx 
  .loc 2 642 9
  # $61.1: @FILE = call(write_337, $60.1, "DWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_68[rip] # "DWORD PTR "
  call write_337
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
.LABEL__generate_store_array_item_instruction_27__22:
  .loc 2 643 16
  # $54.1: Boolean = ir_value_type_size.1 == 2
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:rax 
  # jump($54.1, .LABEL__generate_store_array_item_instruction_27__23, .LABEL__generate_store_array_item_instruction_27__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_store_array_item_instruction_27__25
.LABEL__generate_store_array_item_instruction_27__23:
  .loc 2 644 9
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $58.1:rbx 
  .loc 2 644 9
  # $59.1: @FILE = call(write_337, $58.1, "WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_69[rip] # "WORD PTR "
  call write_337
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
.LABEL__generate_store_array_item_instruction_27__25:
  .loc 2 645 16
  # $55.1: Boolean = ir_value_type_size.1 == 1
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:rax 
  # jump($55.1, .LABEL__generate_store_array_item_instruction_27__26, .LABEL__generate_store_array_item_instruction_27__28)
  test al, al
  mov [rbp-82], al
  jz .LABEL__generate_store_array_item_instruction_27__28
.LABEL__generate_store_array_item_instruction_27__26:
  .loc 2 646 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] $56.1:rbx 
  .loc 2 646 9
  # $57.1: @FILE = call(write_337, $56.1, "BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_70[rip] # "BYTE PTR "
  call write_337
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
.LABEL__generate_store_array_item_instruction_27__28:
  .loc 2 648 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
.LABEL__generate_store_array_item_instruction_27__4:
  .loc 2 618 27
  # index_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 619 9
  # store_struct_member(index_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 620 50
  # $9.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-57], rax
  call get_index_value_225
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $9.1:rax 
  .loc 2 620 9
  # call(generate_load_value_30, self.1, index_register.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-57]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  .loc 2 621 13
  # $10.1: Boolean = ir_value_type_size.1 > 1
  cmp QWORD PTR [rbp-40], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:rax 
  # jump($10.1, .LABEL__generate_store_array_item_instruction_27__5, .LABEL__generate_store_array_item_instruction_27__6)
  test al, al
  mov [rbp-58], al
  jz .LABEL__generate_store_array_item_instruction_27__6
.LABEL__generate_store_array_item_instruction_27__5:
  .loc 2 622 13
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $11.1:rbx 
  .loc 2 622 13
  # $12.1: @FILE = call(write_337, $11.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  imul "
  call write_337
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $12.1:rax 
  .loc 2 622 53
  # $13.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $12.1:rax $13.1:r15 
  .loc 2 622 13
  # $14.1: @FILE = call(write_337, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $14.1:rax 
  .loc 2 622 13
  # $15.1: @FILE = call(write_337, $14.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $15.1:rax 
  .loc 2 622 13
  # $16.1: @FILE = call(write_336, $15.1, ir_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_336
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $16.1:rax 
  .loc 2 622 13
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__6)
.LABEL__generate_store_array_item_instruction_27__6:
  .loc 2 624 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $18.1:rbx 
  .loc 2 624 9
  # $19.1: @FILE = call(write_337, $18.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  add "
  call write_337
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax 
  .loc 2 624 48
  # $20.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax $20.1:r15 
  .loc 2 624 9
  # $21.1: @FILE = call(write_337, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $21.1:rax 
  .loc 2 624 9
  # $22.1: @FILE = call(write_337, $21.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $22.1:rax 
  .loc 2 624 91
  # $23.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $22.1:rax $23.1:r15 
  .loc 2 624 9
  # $24.1: @FILE = call(write_337, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $24.1:rax 
  .loc 2 624 9
  # $25.1: @FILE = call(end_line_340, $24.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  .loc 2 625 9
  # store_struct_member(index_register.1, is_reserved, false)
  mov rax, [rbp-57]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
  jmp .LABEL__generate_store_array_item_instruction_27__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: index_value.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: ir_value.1
  # [discarded value]: address_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_array_item_instruction_27__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_array_item_instruction_27__stack_frame_size: .word 96

  .loc 2 654 1
  .text
generate_store_struct_member_instruction_28:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_member_instruction_28__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_member_instruction_28__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 655 32
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_229, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_229
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  .loc 2 656 9
  # $2.1: Boolean = call(is_343, ir_struct_pointer_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_store_struct_member_instruction_28__2, .LABEL__generate_store_struct_member_instruction_28__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_store_struct_member_instruction_28__4
.LABEL__generate_store_struct_member_instruction_28__2:
  .loc 2 657 36
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 658 36
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_42, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 659 13
  # $15.1: Boolean = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $15.1:rbx 
  # jump($15.1, .LABEL__generate_store_struct_member_instruction_28__8, .LABEL__generate_store_struct_member_instruction_28__9)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_store_struct_member_instruction_28__9
.LABEL__generate_store_struct_member_instruction_28__8:
  .loc 2 660 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] 
.LABEL__generate_store_struct_member_instruction_28__9:
  .loc 2 662 36
  # struct_pointer_register.1: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:rbx 
  .loc 2 663 13
  # $17.1: Boolean = struct_pointer_register.1 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:rbx $17.1:r15 
  # jump($17.1, .LABEL__generate_store_struct_member_instruction_28__10, .LABEL__generate_store_struct_member_instruction_28__11)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_store_struct_member_instruction_28__11
.LABEL__generate_store_struct_member_instruction_28__10:
  .loc 2 664 39
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 665 13
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  .loc 2 666 13
  # $19.1: @MC_Value = call(map_variable_value_41, self.1, ir_struct_pointer_value.1, struct_pointer_register.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__11)
.LABEL__generate_store_struct_member_instruction_28__11:
  # struct_pointer_register.5: @MC_Register = phi(struct_pointer_register.1, struct_pointer_register.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] 
  .loc 2 669 54
  # $20.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] $20.1:rbx 
  .loc 2 669 38
  # struct_type_member_offset.1: Int = call(get_offset_33, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:rax 
  .loc 2 670 21
  # ir_value.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-59], rax
  call get_value_230
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax 
  .loc 2 671 13
  # $24.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-67], rax
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:rax 
  # jump($24.1, .LABEL__generate_store_struct_member_instruction_28__12, .LABEL__generate_store_struct_member_instruction_28__13)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_struct_member_instruction_28__13
.LABEL__generate_store_struct_member_instruction_28__12:
  .loc 2 671 47
  # $25.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-67]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax:[rbp-67] $24.1:[rbp-68] $25.1:rbx 
  .loc 2 671 47
  # $26.1: Boolean = call(is_343, $25.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $26.1:rax 
  .loc 2 671 47
  # $27.1: Boolean = $26.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $27.1:rbx 
  .loc 2 671 13
  # $24.2: Boolean = $27.1
  mov [rbp-69], bl
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:rbx:[rbp-68] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__13)
  mov [rbp-68], bl
.LABEL__generate_store_struct_member_instruction_28__13:
  .loc 2 671 13
  # $24.3: Boolean = phi($24.1, $24.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] 
  # jump($24.3, .LABEL__generate_store_struct_member_instruction_28__14, .LABEL__generate_store_struct_member_instruction_28__15)
  mov al, [rbp-68]
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__15
.LABEL__generate_store_struct_member_instruction_28__14:
  .loc 2 672 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-67]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:rax 
  .loc 2 673 25
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-76], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] mc_value.1:rax 
  .loc 2 674 17
  # $30.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $30.1:rbx 
  .loc 2 674 17
  # $31.1: Boolean = $30.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:rax 
  # jump($31.1, .LABEL__generate_store_struct_member_instruction_28__16, .LABEL__generate_store_struct_member_instruction_28__15)
  test al, al
  mov [rbp-77], al
  jz .LABEL__generate_store_struct_member_instruction_28__15
.LABEL__generate_store_struct_member_instruction_28__16:
  .loc 2 675 29
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] register.1:rax 
  .loc 2 676 17
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-76]
  mov [rbp-85], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] register.1:[rbp-85] 
  .loc 2 677 17
  # $33.1: @MC_Value = call(map_variable_value_41, self.1, ir_value.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-76]
  mov rdx, [rbp-85]
  call map_variable_value_41
  # [discarded value]: $33.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__15)
.LABEL__generate_store_struct_member_instruction_28__15:
  .loc 2 680 39
  # struct_type_member_address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.5, offset = struct_type_member_offset.1)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.5
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-59]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: struct_pointer_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] struct_type_member_address.1:rax 
  .loc 2 681 9
  # call(generate_store_value_31, self.1, ir_value.1, struct_type_member_address.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-67]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: struct_type_member_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__3)
.LABEL__generate_store_struct_member_instruction_28__3:
  # return()
  jmp .LABEL__generate_store_struct_member_instruction_28__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] 
  # [discarded value]: $24.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] 
  # [discarded value]: $24.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] 
  # [discarded value]: $24.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] 
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_store_struct_member_instruction_28__4:
  .loc 2 682 16
  # $3.1: Boolean = call(is_343, ir_struct_pointer_value.1, IR_Global_Variable_Address_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable_Address_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__generate_store_struct_member_instruction_28__5, .LABEL__generate_store_struct_member_instruction_28__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_store_struct_member_instruction_28__7
.LABEL__generate_store_struct_member_instruction_28__5:
  .loc 2 683 36
  # struct_pointer_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rax 
  .loc 2 684 9
  # store_struct_member(struct_pointer_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rax 
  .loc 2 685 9
  # call(generate_load_value_30, self.1, struct_pointer_register.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-34], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] 
  .loc 2 686 54
  # $9.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] $9.1:rbx 
  .loc 2 686 38
  # struct_type_member_offset.1: Int = call(get_offset_33, self.1, $9.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] struct_type_member_offset.1:rax 
  .loc 2 687 39
  # struct_type_member_address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.1, offset = struct_type_member_offset.1)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-42]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: struct_type_member_offset.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rbx:[rbp-34] struct_type_member_address.1:rax 
  .loc 2 688 35
  # $12.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-42], rax
  call get_value_230
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] struct_type_member_address.1:[rbp-42] $12.1:rax 
  .loc 2 688 9
  # call(generate_store_value_31, self.1, $12.1, struct_type_member_address.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-42]
  call generate_store_value_31
  # [discarded value]: $12.1
  # [discarded value]: struct_type_member_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] 
  .loc 2 689 9
  # store_struct_member(struct_pointer_register.1, is_reserved, false)
  mov rax, [rbp-34]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__3)
  jmp .LABEL__generate_store_struct_member_instruction_28__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__generate_store_struct_member_instruction_28__7:
  .loc 2 691 20
  # $4.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  call clone_345
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax 
  .loc 2 691 55
  # $5.1: @Object_Type = load_struct_member(ir_struct_pointer_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rbx:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax $5.1:r15 
  .loc 2 691 55
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rbx:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax $5.1:r15 $6.1:r14 
  .loc 2 691 20
  # $7.1: @String = call(append_354, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $7.1:rax 
  .loc 2 691 9
  # call(abort_35, self.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_struct_member_instruction_28__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_member_instruction_28__stack_frame_size: .word 96

  .loc 2 695 1
  .text
generate_substract_instruction_29:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_substract_instruction_29__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_substract_instruction_29__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Substract_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 696 24
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 697 19
  # left_value.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:rax 
  .loc 2 698 20
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:rax 
  .loc 2 699 9
  # $4.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:rax 
  # jump($4.1, .LABEL__generate_substract_instruction_29__2, .LABEL__generate_substract_instruction_29__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__2:
  .loc 2 700 23
  # left_value.1: @IR_Constant_Value = left_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] left_value.1:rax 
  .loc 2 701 14
  # $7.1: @Integer_Token = load_struct_member(left_value.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $7.1:rbx 
  .loc 2 701 13
  # $8.1: Int = load_struct_member($7.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $8.1:rax 
  .loc 2 701 13
  # $9.1: Boolean = $8.1 == 0
  cmp rax, 0
  sete bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:rbx 
  # jump($9.1, .LABEL__generate_substract_instruction_29__4, .LABEL__generate_substract_instruction_29__3)
  test bl, bl
  mov [rbp-42], bl
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__4:
  .loc 2 702 13
  # call(generate_load_value_30, self.1, result_register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-40]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 703 13
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $10.1:rbx 
  .loc 2 703 13
  # $11.1: @FILE = call(write_337, $10.1, "  neg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_72[rip] # "  neg "
  call write_337
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $11.1:rax 
  .loc 2 703 52
  # $12.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $11.1:rax $12.1:r15 
  .loc 2 703 13
  # $13.1: @FILE = call(write_337, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $13.1:rax 
  .loc 2 703 13
  # $14.1: @FILE = call(end_line_340, $13.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 704 37
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $15.1:rbx 
  .loc 2 704 13
  # $16.1: @MC_Value = call(map_variable_value_41, self.1, $15.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 705 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__generate_substract_instruction_29__3:
  .loc 2 708 5
  # call(generate_load_value_30, self.1, result_register.1, left_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 709 29
  # $17.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $17.1:rbx 
  .loc 2 709 5
  # $18.1: @MC_Value = call(map_variable_value_41, self.1, $17.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 710 9
  # $19.1: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:rax 
  # jump($19.1, .LABEL__generate_substract_instruction_29__7, .LABEL__generate_substract_instruction_29__8)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__7:
  .loc 2 711 24
  # right_value.1: @IR_Constant_Value = right_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] right_value.1:rax 
  .loc 2 712 14
  # $22.1: @Integer_Token = load_struct_member(right_value.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $22.1:rbx 
  .loc 2 712 13
  # $23.1: Int = load_struct_member($22.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $23.1:rax 
  .loc 2 712 13
  # $24.1: Boolean = $23.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:rbx 
  # jump($24.1, .LABEL__generate_substract_instruction_29__9, .LABEL__generate_substract_instruction_29__8)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__9:
  .loc 2 713 13
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $25.1:rbx 
  .loc 2 713 13
  # $26.1: @FILE = call(write_337, $25.1, "  dec ")
  mov rdi, rbx
  lea rsi, .LABEL__string_73[rip] # "  dec "
  call write_337
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $26.1:rax 
  .loc 2 713 52
  # $27.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $26.1:rax $27.1:r15 
  .loc 2 713 13
  # $28.1: @FILE = call(write_337, $26.1, $27.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $28.1:rax 
  .loc 2 713 13
  # $29.1: @FILE = call(end_line_340, $28.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  .loc 2 714 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
.LABEL__generate_substract_instruction_29__8:
  .loc 2 717 5
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $30.1:rbx 
  .loc 2 717 5
  # $31.1: @FILE = call(write_337, $30.1, "  sub ")
  mov rdi, rbx
  lea rsi, .LABEL__string_74[rip] # "  sub "
  call write_337
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $31.1:rax 
  .loc 2 717 44
  # $32.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $31.1:rax $32.1:r15 
  .loc 2 717 5
  # $33.1: @FILE = call(write_337, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $33.1:rax 
  .loc 2 717 5
  # $34.1: @FILE = call(write_337, $33.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $34.1:rax 
  .loc 2 717 5
  # $35.1: @FILE = call(write_operand_34, $34.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-40]
  call write_operand_34
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] $35.1:rax 
  .loc 2 717 5
  # $36.1: @FILE = call(end_line_340, $35.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] $24.1:[rbp-44] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] $19.1:[rbp-43] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] $4.1:[rbp-41] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] left_value.1:[rbp-32] right_value.1:[rbp-40] 
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_substract_instruction_29__end:
  mov rsp, rbp
  pop rbp
  ret

generate_substract_instruction_29__stack_frame_size: .word 48

  .loc 2 720 1
  .text
generate_load_value_30:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_value_30__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_value_30__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx 
  .loc 2 721 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $1.1:rax 
  .loc 2 721 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $2.1:rbx 
  # jump($2.1, .LABEL__generate_load_value_30__2, .LABEL__generate_load_value_30__3)
  test bl, bl
  mov [rbp-8], rdx
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__generate_load_value_30__3
.LABEL__generate_load_value_30__2:
  .loc 2 722 13
  # $3.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rax 
  # jump($3.1, .LABEL__generate_load_value_30__4, .LABEL__generate_load_value_30__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__4:
  .loc 2 723 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax 
  .loc 2 724 29
  # $5.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-17]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $5.1:r15 
  .loc 2 724 29
  # $6.1: @IR_Variable_Value = load_struct_member($5.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $6.1:r14 
  .loc 2 724 17
  # $7.1: Boolean = ir_value.1 == $6.1
  cmp rax, r14
  sete r15b
  # [discarded value]: $6.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__generate_load_value_30__6, .LABEL__generate_load_value_30__5)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__6:
  .loc 2 725 17
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__5:
  .loc 2 728 9
  # call(release_register_47, self.1, register.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-17]
  call release_register_47
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__generate_load_value_30__3)
.LABEL__generate_load_value_30__3:
  .loc 2 730 9
  # $8.1: Boolean = call(is_343, ir_value.1, IR_Constant_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:rax $7.1:[rbp-27] 
  # jump($8.1, .LABEL__generate_load_value_30__9, .LABEL__generate_load_value_30__11)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_value_30__11
.LABEL__generate_load_value_30__9:
  .loc 2 731 21
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax 
  .loc 2 732 13
  # $197.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax $197.1:rbx 
  .loc 2 732 13
  # $198.1: Boolean = call(is_343, $197.1, Boolean_Token)
  mov rdi, rbx
  mov rsi, Boolean_Token[rip]
  mov [rbp-36], rax
  call is_343
  # [discarded value]: $197.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:rax 
  # jump($198.1, .LABEL__generate_load_value_30__76, .LABEL__generate_load_value_30__78)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_load_value_30__78
.LABEL__generate_load_value_30__76:
  .loc 2 733 24
  # literal.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] literal.1:rbx 
  .loc 2 734 17
  # $270.1: Boolean = load_struct_member(literal.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $270.1:r15 
  # jump($270.1, .LABEL__generate_load_value_30__97, .LABEL__generate_load_value_30__99)
  test r15b, r15b
  mov [rbp-38], r15b
  jz .LABEL__generate_load_value_30__99
.LABEL__generate_load_value_30__97:
  .loc 2 735 17
  # $278.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $278.1:rbx 
  .loc 2 735 17
  # $279.1: @FILE = call(write_337, $278.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $278.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $279.1:rax 
  .loc 2 735 56
  # $280.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $279.1:rax $280.1:r15 
  .loc 2 735 17
  # $281.1: @FILE = call(write_337, $279.1, $280.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $280.1
  # [discarded value]: $279.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $281.1:rax 
  .loc 2 735 17
  # $282.1: @FILE = call(write_337, $281.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $281.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $282.1:rax 
  .loc 2 735 17
  # $283.1: @FILE = call(write_336, $282.1, 1)
  mov rdi, rax
  mov rsi, 1
  call write_336
  # [discarded value]: $282.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $283.1:rax 
  .loc 2 735 17
  # $284.1: @FILE = call(end_line_340, $283.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $284.1
  # [discarded value]: $283.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
.LABEL__generate_load_value_30__10:
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] 
.LABEL__generate_load_value_30__99:
  .loc 2 737 17
  # $271.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $271.1:rbx 
  .loc 2 737 17
  # $272.1: @FILE = call(write_337, $271.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $271.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $272.1:rax 
  .loc 2 737 56
  # $273.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $272.1:rax $273.1:r15 
  .loc 2 737 17
  # $274.1: @FILE = call(write_337, $272.1, $273.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $273.1
  # [discarded value]: $272.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $274.1:rax 
  .loc 2 737 17
  # $275.1: @FILE = call(write_337, $274.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $274.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $275.1:rax 
  .loc 2 737 17
  # $276.1: @FILE = call(write_336, $275.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_336
  # [discarded value]: $275.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] $276.1:rax 
  .loc 2 737 17
  # $277.1: @FILE = call(end_line_340, $276.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $277.1
  # [discarded value]: $276.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $270.1:[rbp-38] 
  # [discarded value]: $270.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] 
.LABEL__generate_load_value_30__78:
  .loc 2 739 20
  # $199.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $199.1:rbx 
  .loc 2 739 20
  # $200.1: Boolean = call(is_343, $199.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_343
  # [discarded value]: $199.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:rax 
  # jump($200.1, .LABEL__generate_load_value_30__79, .LABEL__generate_load_value_30__81)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_load_value_30__81
.LABEL__generate_load_value_30__79:
  .loc 2 740 13
  # $257.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $257.1:rbx 
  .loc 2 740 13
  # $258.1: @FILE = call(write_337, $257.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $257.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $258.1:rax 
  .loc 2 740 52
  # $259.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $258.1:rax $259.1:r15 
  .loc 2 740 13
  # $260.1: @FILE = call(write_337, $258.1, $259.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $259.1
  # [discarded value]: $258.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $260.1:rax 
  .loc 2 740 13
  # $261.1: @FILE = call(write_337, $260.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $260.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $261.1:rax 
  .loc 2 740 88
  # $263.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $261.1:rax $263.1:r15 
  .loc 2 740 87
  # $264.1: Int8 = load_struct_member($263.1, value)
  mov r14b, [r15+32]
  # [discarded value]: $263.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $261.1:rax $264.1:r14 
  .loc 2 740 87
  # $265.1: Int = cast($264.1)
  mov r15b, r14b
  movsx r15, r15b
  # [discarded value]: $264.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $261.1:rax $265.1:r15 
  .loc 2 740 13
  # $266.1: @FILE = call(write_336, $261.1, $265.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $265.1
  # [discarded value]: $261.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $266.1:rax 
  .loc 2 740 13
  # $267.1: @FILE = call(end_line_340, $266.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $267.1
  # [discarded value]: $266.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] 
.LABEL__generate_load_value_30__81:
  .loc 2 741 20
  # $201.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $201.1:rbx 
  .loc 2 741 20
  # $202.1: Boolean = call(is_343, $201.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_343
  # [discarded value]: $201.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:rax 
  # jump($202.1, .LABEL__generate_load_value_30__82, .LABEL__generate_load_value_30__84)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_load_value_30__84
.LABEL__generate_load_value_30__82:
  .loc 2 742 24
  # literal.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:rbx 
  .loc 2 743 17
  # $239.1: Int = load_struct_member(literal.1, value)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:rbx $239.1:r15 
  .loc 2 743 17
  # $240.1: Boolean = $239.1 == 0
  cmp r15, 0
  sete r14b
  # [discarded value]: $239.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:rbx $240.1:r14 
  # jump($240.1, .LABEL__generate_load_value_30__94, .LABEL__generate_load_value_30__96)
  test r14b, r14b
  mov [rbp-47], rbx
  mov [rbp-48], r14b
  jz .LABEL__generate_load_value_30__96
.LABEL__generate_load_value_30__94:
  .loc 2 744 17
  # $249.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $249.1:rbx 
  .loc 2 744 17
  # $250.1: @FILE = call(write_337, $249.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_75[rip] # "  xor "
  call write_337
  # [discarded value]: $249.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $250.1:rax 
  .loc 2 744 56
  # $251.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $250.1:rax $251.1:r15 
  .loc 2 744 17
  # $252.1: @FILE = call(write_337, $250.1, $251.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $251.1
  # [discarded value]: $250.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $252.1:rax 
  .loc 2 744 17
  # $253.1: @FILE = call(write_337, $252.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $252.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $253.1:rax 
  .loc 2 744 91
  # $254.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $253.1:rax $254.1:r15 
  .loc 2 744 17
  # $255.1: @FILE = call(write_337, $253.1, $254.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $254.1
  # [discarded value]: $253.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $255.1:rax 
  .loc 2 744 17
  # $256.1: @FILE = call(end_line_340, $255.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $256.1
  # [discarded value]: $255.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] 
.LABEL__generate_load_value_30__96:
  .loc 2 746 17
  # $241.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $241.1:rbx 
  .loc 2 746 17
  # $242.1: @FILE = call(write_337, $241.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $241.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $242.1:rax 
  .loc 2 746 56
  # $243.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $242.1:rax $243.1:r15 
  .loc 2 746 17
  # $244.1: @FILE = call(write_337, $242.1, $243.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $243.1
  # [discarded value]: $242.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $244.1:rax 
  .loc 2 746 17
  # $245.1: @FILE = call(write_337, $244.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $244.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $245.1:rax 
  .loc 2 746 91
  # $246.1: Int = load_struct_member(literal.1, value)
  mov rbx, [rbp-47]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:rbx:[rbp-47] $240.1:[rbp-48] $245.1:rax $246.1:r15 
  .loc 2 746 17
  # $247.1: @FILE = call(write_336, $245.1, $246.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $246.1
  # [discarded value]: $245.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] $247.1:rax 
  .loc 2 746 17
  # $248.1: @FILE = call(end_line_340, $247.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $248.1
  # [discarded value]: $247.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] $240.1:[rbp-48] 
  # [discarded value]: $240.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] literal.1:[rbp-47] 
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] 
.LABEL__generate_load_value_30__84:
  .loc 2 748 20
  # $203.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $203.1:rbx 
  .loc 2 748 20
  # $204.1: Boolean = call(is_343, $203.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_343
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:rax 
  # jump($204.1, .LABEL__generate_load_value_30__85, .LABEL__generate_load_value_30__87)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_load_value_30__87
.LABEL__generate_load_value_30__85:
  .loc 2 749 13
  # $229.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $229.1:rbx 
  .loc 2 749 13
  # $230.1: @FILE = call(write_337, $229.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_75[rip] # "  xor "
  call write_337
  # [discarded value]: $229.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $230.1:rax 
  .loc 2 749 52
  # $231.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $230.1:rax $231.1:r15 
  .loc 2 749 13
  # $232.1: @FILE = call(write_337, $230.1, $231.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $231.1
  # [discarded value]: $230.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $232.1:rax 
  .loc 2 749 13
  # $233.1: @FILE = call(write_337, $232.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $232.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $233.1:rax 
  .loc 2 749 87
  # $234.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $233.1:rax $234.1:r15 
  .loc 2 749 13
  # $235.1: @FILE = call(write_337, $233.1, $234.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $234.1
  # [discarded value]: $233.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $235.1:rax 
  .loc 2 749 13
  # $236.1: @FILE = call(end_line_340, $235.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $236.1
  # [discarded value]: $235.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] 
.LABEL__generate_load_value_30__87:
  .loc 2 750 20
  # $205.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $205.1:rbx 
  .loc 2 750 20
  # $206.1: Boolean = call(is_343, $205.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_343
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:rax 
  # jump($206.1, .LABEL__generate_load_value_30__88, .LABEL__generate_load_value_30__90)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_value_30__90
.LABEL__generate_load_value_30__88:
  .loc 2 751 46
  # $215.1: @String_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $215.1:rbx 
  .loc 2 751 26
  # mc_string.1: @MC_String = call(convert_string_57, self.1, $215.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  call convert_string_57
  # [discarded value]: $215.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:rax 
  .loc 2 752 13
  # $217.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:rax $217.1:r15 
  .loc 2 752 13
  # $218.1: @FILE = call(write_337, $217.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-49], rax
  call write_337
  # [discarded value]: $217.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $218.1:rax 
  .loc 2 752 52
  # $219.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $218.1:rax $219.1:r15 
  .loc 2 752 13
  # $220.1: @FILE = call(write_337, $218.1, $219.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $219.1
  # [discarded value]: $218.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $220.1:rax 
  .loc 2 752 13
  # $221.1: @FILE = call(write_337, $220.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $220.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $221.1:rax 
  .loc 2 752 13
  # $222.1: @FILE = call(write_string_label_59, $221.1, mc_string.1)
  mov rdi, rax
  mov rsi, [rbp-49]
  call write_string_label_59
  # [discarded value]: $221.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $222.1:rax 
  .loc 2 752 13
  # $223.1: @FILE = call(write_337, $222.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_337
  # [discarded value]: $222.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $223.1:rax 
  .loc 2 752 13
  # $224.1: @FILE = call(write_337, $223.1, " # ")
  mov rdi, rax
  lea rsi, .LABEL__string_76[rip] # " # "
  call write_337
  # [discarded value]: $223.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] mc_string.1:[rbp-49] $224.1:rax 
  .loc 2 752 145
  # $225.1: @String_Token = load_struct_member(mc_string.1, literal)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [discarded value]: mc_string.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $224.1:rax $225.1:r15 
  .loc 2 752 145
  # $226.1: @String = load_struct_member($225.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $225.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $224.1:rax $226.1:rbx 
  .loc 2 752 13
  # $227.1: @FILE = call(write_337, $224.1, $226.1)
  mov rdi, rax
  mov rsi, rbx
  call write_337
  # [discarded value]: $226.1
  # [discarded value]: $224.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $227.1:rax 
  .loc 2 752 13
  # $228.1: @FILE = call(end_line_340, $227.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $228.1
  # [discarded value]: $227.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] 
.LABEL__generate_load_value_30__90:
  .loc 2 753 20
  # $207.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $207.1:rbx 
  .loc 2 753 20
  # $208.1: Boolean = call(is_343, $207.1, Undefined_Token)
  mov rdi, rbx
  mov rsi, Undefined_Token[rip]
  call is_343
  # [discarded value]: $207.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:rax 
  # jump($208.1, .LABEL__generate_load_value_30__10, .LABEL__generate_load_value_30__93)
  test al, al
  mov [rbp-42], al
  jnz .LABEL__generate_load_value_30__10
.LABEL__generate_load_value_30__93:
  .loc 2 756 24
  # $209.1: @String = call(clone_345, "Unsupported literal type: ")
  lea rdi, .LABEL__string_77[rip] # "Unsupported literal type: "
  call clone_345
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] $209.1:rax 
  .loc 2 756 67
  # $210.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] $209.1:rax $210.1:r15 
  .loc 2 756 67
  # $211.1: @Object_Type = load_struct_member($210.1, object_type)
  mov r14, [r15]
  # [discarded value]: $210.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] $209.1:rax $211.1:r14 
  .loc 2 756 67
  # $212.1: @String = load_struct_member_address($211.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] $209.1:rax $211.1:r14 $212.1:r15 
  .loc 2 756 24
  # $213.1: @String = call(append_354, $209.1, $212.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $212.1
  # [discarded value]: $211.1
  # [discarded value]: $209.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] $213.1:rax 
  .loc 2 756 13
  # call(abort_35, self.1, $213.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $213.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] $208.1:[rbp-42] 
  # [discarded value]: $208.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] $206.1:[rbp-41] 
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] $204.1:[rbp-40] 
  # [discarded value]: $204.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] $202.1:[rbp-39] 
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] $200.1:[rbp-38] 
  # [discarded value]: $200.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $198.1:[rbp-37] 
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__11:
  .loc 2 758 16
  # $9.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_value_30__12, .LABEL__generate_load_value_30__14)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_value_30__14
.LABEL__generate_load_value_30__12:
  .loc 2 759 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax 
  .loc 2 760 26
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax ir_value_type.1:rbx 
  .loc 2 761 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov [rbp-37], rbx
  call get_value_42
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax 
  .loc 2 762 13
  # $69.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax $69.1:rbx 
  # jump($69.1, .LABEL__generate_load_value_30__32, .LABEL__generate_load_value_30__33)
  test bl, bl
  mov [rbp-45], rax
  mov [rbp-46], bl
  jz .LABEL__generate_load_value_30__33
.LABEL__generate_load_value_30__32:
  .loc 2 763 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] 
.LABEL__generate_load_value_30__33:
  .loc 2 765 9
  # store_struct_member(register.1, loaded_value, mc_value.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-45]
  mov QWORD PTR [rax+49], rbx
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] 
  .loc 2 766 13
  # $70.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $70.1:r15 
  .loc 2 766 13
  # $71.1: Boolean = $70.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:r14 
  # jump($71.1, .LABEL__generate_load_value_30__34, .LABEL__generate_load_value_30__36)
  test r14b, r14b
  mov [rbp-47], r14b
  jz .LABEL__generate_load_value_30__36
.LABEL__generate_load_value_30__34:
  .loc 2 767 17
  # $132.1: Boolean = call(is_343, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Boolean_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:rax 
  # jump($132.1, .LABEL__generate_load_value_30__58, .LABEL__generate_load_value_30__60)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_load_value_30__60
.LABEL__generate_load_value_30__58:
  .loc 2 768 17
  # $187.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $187.1:rbx 
  .loc 2 768 17
  # $188.1: @FILE = call(write_337, $187.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $188.1:rax 
  .loc 2 768 56
  # $189.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $188.1:rax $189.1:r15 
  .loc 2 768 17
  # $190.1: @FILE = call(write_337, $188.1, $189.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $189.1
  # [discarded value]: $188.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $190.1:rax 
  .loc 2 768 17
  # $191.1: @FILE = call(write_337, $190.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $191.1:rax 
  .loc 2 768 91
  # $192.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $191.1:rax $192.1:r15 
  .loc 2 768 91
  # $193.1: @String = load_struct_member($192.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $191.1:rax $193.1:r14 
  .loc 2 768 17
  # $194.1: @FILE = call(write_337, $191.1, $193.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $193.1
  # [discarded value]: $191.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $194.1:rax 
  .loc 2 768 17
  # $195.1: @FILE = call(end_line_340, $194.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $195.1
  # [discarded value]: $194.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] 
.LABEL__generate_load_value_30__60:
  .loc 2 769 24
  # $133.1: Boolean = call(is_343, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:rax 
  # jump($133.1, .LABEL__generate_load_value_30__61, .LABEL__generate_load_value_30__63)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__63
.LABEL__generate_load_value_30__61:
  .loc 2 770 17
  # $178.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $178.1:rbx 
  .loc 2 770 17
  # $179.1: @FILE = call(write_337, $178.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $179.1:rax 
  .loc 2 770 56
  # $180.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $179.1:rax $180.1:r15 
  .loc 2 770 17
  # $181.1: @FILE = call(write_337, $179.1, $180.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $180.1
  # [discarded value]: $179.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $181.1:rax 
  .loc 2 770 17
  # $182.1: @FILE = call(write_337, $181.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $182.1:rax 
  .loc 2 770 91
  # $183.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $182.1:rax $183.1:r15 
  .loc 2 770 91
  # $184.1: @String = load_struct_member($183.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $182.1:rax $184.1:r14 
  .loc 2 770 17
  # $185.1: @FILE = call(write_337, $182.1, $184.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $184.1
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $185.1:rax 
  .loc 2 770 17
  # $186.1: @FILE = call(end_line_340, $185.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $186.1
  # [discarded value]: $185.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] 
.LABEL__generate_load_value_30__63:
  .loc 2 771 24
  # $134.1: Boolean = call(is_343, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:rax 
  # jump($134.1, .LABEL__generate_load_value_30__64, .LABEL__generate_load_value_30__66)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__66
.LABEL__generate_load_value_30__64:
  .loc 2 772 17
  # $169.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $169.1:rbx 
  .loc 2 772 17
  # $170.1: @FILE = call(write_337, $169.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $170.1:rax 
  .loc 2 772 56
  # $171.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $170.1:rax $171.1:r15 
  .loc 2 772 17
  # $172.1: @FILE = call(write_337, $170.1, $171.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $171.1
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $172.1:rax 
  .loc 2 772 17
  # $173.1: @FILE = call(write_337, $172.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $173.1:rax 
  .loc 2 772 91
  # $174.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $173.1:rax $174.1:r15 
  .loc 2 772 91
  # $175.1: @String = load_struct_member($174.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $173.1:rax $175.1:r14 
  .loc 2 772 17
  # $176.1: @FILE = call(write_337, $173.1, $175.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $175.1
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $176.1:rax 
  .loc 2 772 17
  # $177.1: @FILE = call(end_line_340, $176.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $177.1
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] 
.LABEL__generate_load_value_30__66:
  .loc 2 773 24
  # $135.1: Boolean = call(is_343, ir_value_type.1, IR_Int32_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:rax 
  # jump($135.1, .LABEL__generate_load_value_30__67, .LABEL__generate_load_value_30__69)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__69
.LABEL__generate_load_value_30__67:
  .loc 2 774 17
  # $160.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $160.1:rbx 
  .loc 2 774 17
  # $161.1: @FILE = call(write_337, $160.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $161.1:rax 
  .loc 2 774 56
  # $162.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $161.1:rax $162.1:r15 
  .loc 2 774 17
  # $163.1: @FILE = call(write_337, $161.1, $162.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $162.1
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $163.1:rax 
  .loc 2 774 17
  # $164.1: @FILE = call(write_337, $163.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $164.1:rax 
  .loc 2 774 91
  # $165.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $164.1:rax $165.1:r15 
  .loc 2 774 91
  # $166.1: @String = load_struct_member($165.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $164.1:rax $166.1:r14 
  .loc 2 774 17
  # $167.1: @FILE = call(write_337, $164.1, $166.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $166.1
  # [discarded value]: $164.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $167.1:rax 
  .loc 2 774 17
  # $168.1: @FILE = call(end_line_340, $167.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $168.1
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] 
.LABEL__generate_load_value_30__69:
  .loc 2 775 24
  # $136.1: Boolean = call(is_343, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:rax 
  # jump($136.1, .LABEL__generate_load_value_30__70, .LABEL__generate_load_value_30__72)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__72
.LABEL__generate_load_value_30__70:
  .loc 2 776 17
  # $151.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $151.1:rbx 
  .loc 2 776 17
  # $152.1: @FILE = call(write_337, $151.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $152.1:rax 
  .loc 2 776 56
  # $153.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $152.1:rax $153.1:r15 
  .loc 2 776 17
  # $154.1: @FILE = call(write_337, $152.1, $153.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $153.1
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $154.1:rax 
  .loc 2 776 17
  # $155.1: @FILE = call(write_337, $154.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $155.1:rax 
  .loc 2 776 91
  # $156.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $155.1:rax $156.1:r15 
  .loc 2 776 91
  # $157.1: @String = load_struct_member($156.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $155.1:rax $157.1:r14 
  .loc 2 776 17
  # $158.1: @FILE = call(write_337, $155.1, $157.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $157.1
  # [discarded value]: $155.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $158.1:rax 
  .loc 2 776 17
  # $159.1: @FILE = call(end_line_340, $158.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $159.1
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] 
.LABEL__generate_load_value_30__72:
  .loc 2 777 24
  # $137.1: Boolean = call(is_343, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:rax 
  # jump($137.1, .LABEL__generate_load_value_30__73, .LABEL__generate_load_value_30__75)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__75
.LABEL__generate_load_value_30__73:
  .loc 2 778 17
  # $142.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $142.1:rbx 
  .loc 2 778 17
  # $143.1: @FILE = call(write_337, $142.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $143.1:rax 
  .loc 2 778 56
  # $144.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $143.1:rax $144.1:r15 
  .loc 2 778 17
  # $145.1: @FILE = call(write_337, $143.1, $144.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $144.1
  # [discarded value]: $143.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $145.1:rax 
  .loc 2 778 17
  # $146.1: @FILE = call(write_337, $145.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $146.1:rax 
  .loc 2 778 91
  # $147.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $146.1:rax $147.1:r15 
  .loc 2 778 91
  # $148.1: @String = load_struct_member($147.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $146.1:rax $148.1:r14 
  .loc 2 778 17
  # $149.1: @FILE = call(write_337, $146.1, $148.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $148.1
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $149.1:rax 
  .loc 2 778 17
  # $150.1: @FILE = call(end_line_340, $149.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $150.1
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] 
.LABEL__generate_load_value_30__75:
  .loc 2 780 28
  # $138.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $138.1:rax 
  .loc 2 780 69
  # $139.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $138.1:rax $139.1:r15 
  .loc 2 780 69
  # $140.1: @String = load_struct_member_address($139.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $138.1:rax $139.1:r15 $140.1:r14 
  .loc 2 780 28
  # $141.1: @String = call(append_354, $138.1, $140.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $140.1
  # [discarded value]: $139.1
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] $141.1:rax 
  .loc 2 780 17
  # call(abort_35, self.1, $141.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] $137.1:[rbp-53] 
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] $136.1:[rbp-52] 
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] $135.1:[rbp-51] 
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] $134.1:[rbp-50] 
  # [discarded value]: $134.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] $133.1:[rbp-49] 
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $132.1:[rbp-48] 
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] 
.LABEL__generate_load_value_30__36:
  .loc 2 782 20
  # $72.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-45]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $72.1:rbx 
  .loc 2 782 20
  # $73.1: Boolean = $72.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:r15 
  # jump($73.1, .LABEL__generate_load_value_30__37, .LABEL__generate_load_value_30__39)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__generate_load_value_30__39
.LABEL__generate_load_value_30__37:
  .loc 2 783 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] 
.LABEL__generate_load_value_30__39:
  .loc 2 784 20
  # $74.1: Boolean = call(is_343, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Boolean_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:rax 
  # jump($74.1, .LABEL__generate_load_value_30__40, .LABEL__generate_load_value_30__42)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__42
.LABEL__generate_load_value_30__40:
  .loc 2 785 13
  # $124.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $124.1:rbx 
  .loc 2 785 13
  # $125.1: @FILE = call(write_337, $124.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $125.1:rax 
  .loc 2 785 52
  # $126.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $125.1:rax $126.1:r15 
  .loc 2 785 13
  # $127.1: @FILE = call(write_337, $125.1, $126.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $126.1
  # [discarded value]: $125.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $127.1:rax 
  .loc 2 785 13
  # $128.1: @FILE = call(write_337, $127.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $128.1:rax 
  .loc 2 785 87
  # $129.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $128.1:rax $129.1:r15 
  .loc 2 785 13
  # $130.1: @FILE = call(write_55, $128.1, $129.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $129.1
  # [discarded value]: $128.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $130.1:rax 
  .loc 2 785 13
  # $131.1: @FILE = call(end_line_340, $130.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $131.1
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
.LABEL__generate_load_value_30__42:
  .loc 2 786 20
  # $75.1: Boolean = call(is_343, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:rax 
  # jump($75.1, .LABEL__generate_load_value_30__43, .LABEL__generate_load_value_30__45)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__45
.LABEL__generate_load_value_30__43:
  .loc 2 787 13
  # $116.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $116.1:rbx 
  .loc 2 787 13
  # $117.1: @FILE = call(write_337, $116.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $117.1:rax 
  .loc 2 787 52
  # $118.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $117.1:rax $118.1:r15 
  .loc 2 787 13
  # $119.1: @FILE = call(write_337, $117.1, $118.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $118.1
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $119.1:rax 
  .loc 2 787 13
  # $120.1: @FILE = call(write_337, $119.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $119.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $120.1:rax 
  .loc 2 787 87
  # $121.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $120.1:rax $121.1:r15 
  .loc 2 787 13
  # $122.1: @FILE = call(write_55, $120.1, $121.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $121.1
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $122.1:rax 
  .loc 2 787 13
  # $123.1: @FILE = call(end_line_340, $122.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $123.1
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
.LABEL__generate_load_value_30__45:
  .loc 2 788 20
  # $76.1: Boolean = call(is_343, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:rax 
  # jump($76.1, .LABEL__generate_load_value_30__46, .LABEL__generate_load_value_30__48)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__48
.LABEL__generate_load_value_30__46:
  .loc 2 789 13
  # $108.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $108.1:rbx 
  .loc 2 789 13
  # $109.1: @FILE = call(write_337, $108.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $109.1:rax 
  .loc 2 789 52
  # $110.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $109.1:rax $110.1:r15 
  .loc 2 789 13
  # $111.1: @FILE = call(write_337, $109.1, $110.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $110.1
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $111.1:rax 
  .loc 2 789 13
  # $112.1: @FILE = call(write_337, $111.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $112.1:rax 
  .loc 2 789 87
  # $113.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $112.1:rax $113.1:r15 
  .loc 2 789 13
  # $114.1: @FILE = call(write_55, $112.1, $113.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $113.1
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $114.1:rax 
  .loc 2 789 13
  # $115.1: @FILE = call(end_line_340, $114.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $115.1
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
.LABEL__generate_load_value_30__48:
  .loc 2 790 20
  # $77.1: Boolean = call(is_343, ir_value_type.1, IR_Int32_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:rax 
  # jump($77.1, .LABEL__generate_load_value_30__49, .LABEL__generate_load_value_30__51)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__51
.LABEL__generate_load_value_30__49:
  .loc 2 791 13
  # $100.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $100.1:rbx 
  .loc 2 791 13
  # $101.1: @FILE = call(write_337, $100.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $101.1:rax 
  .loc 2 791 52
  # $102.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $101.1:rax $102.1:r15 
  .loc 2 791 13
  # $103.1: @FILE = call(write_337, $101.1, $102.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $102.1
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $103.1:rax 
  .loc 2 791 13
  # $104.1: @FILE = call(write_337, $103.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $104.1:rax 
  .loc 2 791 87
  # $105.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $104.1:rax $105.1:r15 
  .loc 2 791 13
  # $106.1: @FILE = call(write_55, $104.1, $105.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $105.1
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $106.1:rax 
  .loc 2 791 13
  # $107.1: @FILE = call(end_line_340, $106.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $107.1
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
.LABEL__generate_load_value_30__51:
  .loc 2 792 20
  # $78.1: Boolean = call(is_343, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:rax 
  # jump($78.1, .LABEL__generate_load_value_30__52, .LABEL__generate_load_value_30__54)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__54
.LABEL__generate_load_value_30__52:
  .loc 2 793 13
  # $92.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $92.1:rbx 
  .loc 2 793 13
  # $93.1: @FILE = call(write_337, $92.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $93.1:rax 
  .loc 2 793 52
  # $94.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $93.1:rax $94.1:r15 
  .loc 2 793 13
  # $95.1: @FILE = call(write_337, $93.1, $94.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $94.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $95.1:rax 
  .loc 2 793 13
  # $96.1: @FILE = call(write_337, $95.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $96.1:rax 
  .loc 2 793 87
  # $97.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $96.1:rax $97.1:r15 
  .loc 2 793 13
  # $98.1: @FILE = call(write_55, $96.1, $97.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $98.1:rax 
  .loc 2 793 13
  # $99.1: @FILE = call(end_line_340, $98.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $99.1
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
.LABEL__generate_load_value_30__54:
  .loc 2 794 20
  # $79.1: Boolean = call(is_343, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:rax 
  # jump($79.1, .LABEL__generate_load_value_30__55, .LABEL__generate_load_value_30__57)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_load_value_30__57
.LABEL__generate_load_value_30__55:
  .loc 2 795 13
  # $84.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $84.1:rbx 
  .loc 2 795 13
  # $85.1: @FILE = call(write_337, $84.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $85.1:rax 
  .loc 2 795 52
  # $86.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $85.1:rax $86.1:r15 
  .loc 2 795 13
  # $87.1: @FILE = call(write_337, $85.1, $86.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $86.1
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $87.1:rax 
  .loc 2 795 13
  # $88.1: @FILE = call(write_337, $87.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $88.1:rax 
  .loc 2 795 87
  # $89.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $88.1:rax $89.1:r15 
  .loc 2 795 13
  # $90.1: @FILE = call(write_55, $88.1, $89.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $89.1
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $90.1:rax 
  .loc 2 795 13
  # $91.1: @FILE = call(end_line_340, $90.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $91.1
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
.LABEL__generate_load_value_30__57:
  .loc 2 797 24
  # $80.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:rax 
  .loc 2 797 65
  # $81.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:rax $81.1:r15 
  .loc 2 797 65
  # $82.1: @String = load_struct_member_address($81.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:rax $81.1:r15 $82.1:r14 
  .loc 2 797 24
  # $83.1: @String = call(append_354, $80.1, $82.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $83.1:rax 
  .loc 2 797 13
  # call(abort_35, self.1, $83.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] 
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] 
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value_type.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
.LABEL__generate_load_value_30__14:
  .loc 2 799 16
  # $10.1: Boolean = call(is_343, ir_value.1, IR_Variable_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Address_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:rax 
  # jump($10.1, .LABEL__generate_load_value_30__15, .LABEL__generate_load_value_30__17)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_load_value_30__17
.LABEL__generate_load_value_30__15:
  .loc 2 800 21
  # ir_value.1: @IR_Variable_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] ir_value.1:rax 
  .loc 2 801 30
  # ir_variable_value.1: @IR_Variable_Value = load_struct_member(ir_value.1, variable_value)
  mov rbx, [rax+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] ir_variable_value.1:rbx 
  .loc 2 802 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_variable_value.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: ir_variable_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rax 
  .loc 2 803 13
  # $57.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rax $57.1:rbx 
  # jump($57.1, .LABEL__generate_load_value_30__30, .LABEL__generate_load_value_30__31)
  test bl, bl
  mov [rbp-38], rax
  mov [rbp-39], bl
  jz .LABEL__generate_load_value_30__31
.LABEL__generate_load_value_30__30:
  .loc 2 804 13
  # call(abort_35, self.1, "The required variable value has been discarded already?")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_79[rip] # "The required variable value has been discarded already?"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
.LABEL__generate_load_value_30__31:
  .loc 2 806 9
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $58.1:rbx 
  .loc 2 806 9
  # $59.1: @FILE = call(write_337, $58.1, "  lea ")
  mov rdi, rbx
  lea rsi, .LABEL__string_62[rip] # "  lea "
  call write_337
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $59.1:rax 
  .loc 2 806 48
  # $60.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $59.1:rax $60.1:r15 
  .loc 2 806 9
  # $61.1: @FILE = call(write_337, $59.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $61.1:rax 
  .loc 2 806 9
  # $62.1: @FILE = call(write_337, $61.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $62.1:rax 
  .loc 2 806 83
  # $63.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-38]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rbx:[rbp-38] $57.1:[rbp-39] $62.1:rax $63.1:r15 
  .loc 2 806 9
  # $64.1: @FILE = call(write_55, $62.1, $63.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $64.1:rax 
  .loc 2 806 9
  # $65.1: @FILE = call(end_line_340, $64.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] 
.LABEL__generate_load_value_30__17:
  .loc 2 807 16
  # $11.1: Boolean = call(is_343, ir_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:rax 
  # jump($11.1, .LABEL__generate_load_value_30__18, .LABEL__generate_load_value_30__20)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_load_value_30__20
.LABEL__generate_load_value_30__18:
  .loc 2 808 21
  # ir_value.1: @IR_Global_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax 
  .loc 2 809 26
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax ir_value_type.1:rbx 
  .loc 2 810 13
  # $40.1: Boolean = call(is_343, ir_value_type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-39], rax
  mov [rbp-47], rbx
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:rax 
  # jump($40.1, .LABEL__generate_load_value_30__27, .LABEL__generate_load_value_30__29)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_load_value_30__29
.LABEL__generate_load_value_30__27:
  .loc 2 811 78
  # $45.1: @IR_Variable = load_struct_member(ir_value.1, variable)
  mov rax, [rbp-39]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $45.1:rbx 
  .loc 2 811 33
  # variable_address.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $45.1)
  mov [rbp-56], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $45.1
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:rax 
  .loc 2 812 13
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:rax $47.1:r15 
  .loc 2 812 13
  # $48.1: @FILE = call(write_337, $47.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  mov [rbp-56], rax
  call write_337
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $48.1:rax 
  .loc 2 812 52
  # $49.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $48.1:rax $49.1:r15 
  .loc 2 812 13
  # $50.1: @FILE = call(write_337, $48.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $50.1:rax 
  .loc 2 812 13
  # $51.1: @FILE = call(write_337, $50.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $51.1:rax 
  .loc 2 812 13
  # $52.1: @FILE = call(write_55, $51.1, variable_address.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call write_55
  # [discarded value]: $51.1
  # [discarded value]: variable_address.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $52.1:rax 
  .loc 2 812 13
  # $53.1: @FILE = call(end_line_340, $52.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
.LABEL__generate_load_value_30__29:
  .loc 2 814 24
  # $41.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $41.1:rax 
  .loc 2 814 65
  # $42.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-47]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:rbx:[rbp-47] $40.1:[rbp-48] $41.1:rax $42.1:r15 
  .loc 2 814 65
  # $43.1: @String = load_struct_member_address($42.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:rbx:[rbp-47] $40.1:[rbp-48] $41.1:rax $42.1:r15 $43.1:r14 
  .loc 2 814 24
  # $44.1: @String = call(append_354, $41.1, $43.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $44.1:rax 
  .loc 2 814 13
  # call(abort_35, self.1, $44.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] 
  # [discarded value]: ir_value_type.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] 
.LABEL__generate_load_value_30__20:
  .loc 2 816 16
  # $12.1: Boolean = call(is_343, ir_value.1, IR_Global_Variable_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Global_Variable_Address_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:rax 
  # jump($12.1, .LABEL__generate_load_value_30__21, .LABEL__generate_load_value_30__23)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_load_value_30__23
.LABEL__generate_load_value_30__21:
  .loc 2 817 21
  # ir_value.1: @IR_Global_Variable_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] ir_value.1:rax 
  .loc 2 818 74
  # $29.1: @IR_Variable = load_struct_member(ir_value.1, variable)
  mov rbx, [rax+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $29.1:rbx 
  .loc 2 818 29
  # variable_address.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $29.1)
  mov [rbp-40], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $29.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:rax 
  .loc 2 819 9
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:rax $31.1:r15 
  .loc 2 819 9
  # $32.1: @FILE = call(write_337, $31.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-40], rax
  call write_337
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $32.1:rax 
  .loc 2 819 48
  # $33.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $32.1:rax $33.1:r15 
  .loc 2 819 9
  # $34.1: @FILE = call(write_337, $32.1, $33.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $34.1:rax 
  .loc 2 819 9
  # $35.1: @FILE = call(write_337, $34.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $35.1:rax 
  .loc 2 819 9
  # $36.1: @FILE = call(write_55, $35.1, variable_address.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_55
  # [discarded value]: $35.1
  # [discarded value]: variable_address.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $36.1:rax 
  .loc 2 819 9
  # $37.1: @FILE = call(end_line_340, $36.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
.LABEL__generate_load_value_30__23:
  .loc 2 820 16
  # $13.1: Boolean = call(is_343, ir_value.1, IR_Function_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Function_Address_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:rax 
  # jump($13.1, .LABEL__generate_load_value_30__24, .LABEL__generate_load_value_30__26)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_load_value_30__26
.LABEL__generate_load_value_30__24:
  .loc 2 821 21
  # ir_value.1: @IR_Function_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:rax 
  .loc 2 822 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:rax $19.1:r15 
  .loc 2 822 9
  # $20.1: @FILE = call(write_337, $19.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-41], rax
  call write_337
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $20.1:rax 
  .loc 2 822 48
  # $21.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $20.1:rax $21.1:r15 
  .loc 2 822 9
  # $22.1: @FILE = call(write_337, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $22.1:rax 
  .loc 2 822 9
  # $23.1: @FILE = call(write_337, $22.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $23.1:rax 
  .loc 2 822 98
  # $24.1: @IR_Function = load_struct_member(ir_value.1, function)
  mov rbx, [rbp-41]
  mov r15, [rbx+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $23.1:rax $24.1:r15 
  .loc 2 822 9
  # $25.1: @FILE = call(write_function_label_4, $23.1, $24.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $25.1:rax 
  .loc 2 822 9
  # $26.1: @FILE = call(write_337, $25.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_337
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $26.1:rax 
  .loc 2 822 9
  # $27.1: @FILE = call(end_line_340, $26.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
.LABEL__generate_load_value_30__26:
  .loc 2 824 20
  # $14.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax 
  .loc 2 824 61
  # $15.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax $15.1:r15 
  .loc 2 824 61
  # $16.1: @String = load_struct_member_address($15.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax $15.1:r15 $16.1:r14 
  .loc 2 824 20
  # $17.1: @String = call(append_354, $14.1, $16.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $17.1:rax 
  .loc 2 824 9
  # call(abort_35, self.1, $17.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] 
  # [discarded value]: ir_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_value_30__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_value_30__stack_frame_size: .word 64

  .loc 2 828 1
  .text
generate_store_value_31:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_value_31__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_value_31__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi ir_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx 
  .loc 2 829 22
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx ir_value_type.1:rax 
  .loc 2 830 9
  # $3.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  mov [rbp-32], rdx
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__generate_store_value_31__2, .LABEL__generate_store_value_31__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_store_value_31__3
.LABEL__generate_store_value_31__2:
  .loc 2 830 43
  # $4.1: Boolean = call(is_343, ir_value_type.1, IR_Struct_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $4.1:rax 
  .loc 2 830 43
  # $5.1: Boolean = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $5.1:rbx 
  .loc 2 830 9
  # $3.2: Boolean = $5.1
  mov [rbp-34], bl
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:rbx:[rbp-33] 
  # jump(.LABEL__generate_store_value_31__3)
  mov [rbp-33], bl
.LABEL__generate_store_value_31__3:
  .loc 2 830 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__generate_store_value_31__4, .LABEL__generate_store_value_31__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_store_value_31__5
.LABEL__generate_store_value_31__4:
  .loc 2 831 36
  # $6.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $6.1:rax 
  .loc 2 831 21
  # mc_value.1: @MC_Value = call(get_value_42, self.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax 
  .loc 2 832 13
  # $8.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax $8.1:rbx 
  .loc 2 832 13
  # $9.1: Boolean = $8.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax $9.1:r15 
  # jump($9.1, .LABEL__generate_store_value_31__6, .LABEL__generate_store_value_31__5)
  test r15b, r15b
  mov [rbp-41], rax
  mov [rbp-42], r15b
  jz .LABEL__generate_store_value_31__5
.LABEL__generate_store_value_31__6:
  .loc 2 833 25
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] register.1:rax 
  .loc 2 834 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] register.1:[rbp-50] 
  .loc 2 835 37
  # $11.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-41]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax:[rbp-41] $9.1:[rbp-42] register.1:[rbp-50] $11.1:rbx 
  .loc 2 835 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, $11.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # jump(.LABEL__generate_store_value_31__5)
.LABEL__generate_store_value_31__5:
  .loc 2 838 9
  # $14.1: Boolean = call(is_343, ir_value.1, IR_Constant_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:rax 
  # jump($14.1, .LABEL__generate_store_value_31__8, .LABEL__generate_store_value_31__9)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_store_value_31__9
.LABEL__generate_store_value_31__8:
  .loc 2 838 44
  # $15.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $15.1:rax 
  .loc 2 838 43
  # $16.1: @Literal_Token = load_struct_member($15.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $16.1:rbx 
  .loc 2 838 43
  # $14.2: Boolean = call(is_343, $16.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_343
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:rax:[rbp-43] 
  # jump(.LABEL__generate_store_value_31__9)
  mov [rbp-43], al
.LABEL__generate_store_value_31__9:
  .loc 2 838 9
  # $14.3: Boolean = phi($14.1, $14.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # jump($14.3, .LABEL__generate_store_value_31__10, .LABEL__generate_store_value_31__12)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__generate_store_value_31__12
.LABEL__generate_store_value_31__10:
  .loc 2 839 21
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:rax 
  .loc 2 840 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] 
  .loc 2 841 9
  # $215.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $215.1:rbx 
  .loc 2 841 9
  # $216.1: @FILE = call(write_337, $215.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $215.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $216.1:rax 
  .loc 2 841 9
  # $217.1: @FILE = call(write_55, $216.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $216.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $217.1:rax 
  .loc 2 841 9
  # $218.1: @FILE = call(write_337, $217.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $217.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $218.1:rax 
  .loc 2 841 75
  # $219.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-51]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $218.1:rax $219.1:r15 
  .loc 2 841 9
  # $220.1: @FILE = call(write_337, $218.1, $219.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $219.1
  # [discarded value]: $218.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $220.1:rax 
  .loc 2 841 9
  # $221.1: @FILE = call(end_line_340, $220.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $221.1
  # [discarded value]: $220.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # jump(.LABEL__generate_store_value_31__11)
.LABEL__generate_store_value_31__11:
  # return()
  jmp .LABEL__generate_store_value_31__end
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
.LABEL__generate_store_value_31__12:
  .loc 2 842 16
  # $18.1: Boolean = call(is_343, ir_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:rax 
  # jump($18.1, .LABEL__generate_store_value_31__13, .LABEL__generate_store_value_31__15)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_store_value_31__15
.LABEL__generate_store_value_31__13:
  .loc 2 843 21
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:rax 
  .loc 2 844 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-52], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] 
  .loc 2 845 13
  # $202.1: Boolean = call(is_343, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:rax 
  # jump($202.1, .LABEL__generate_store_value_31__70, .LABEL__generate_store_value_31__72)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_store_value_31__72
.LABEL__generate_store_value_31__70:
  .loc 2 846 13
  # $207.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $207.1:rbx 
  .loc 2 846 13
  # $208.1: @FILE = call(write_337, $207.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $207.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $208.1:rax 
  .loc 2 846 13
  # $209.1: @FILE = call(write_55, $208.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $208.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $209.1:rax 
  .loc 2 846 13
  # $210.1: @FILE = call(write_337, $209.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $209.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $210.1:rax 
  .loc 2 846 79
  # $211.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-52]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:rbx:[rbp-52] $202.1:[rbp-53] $210.1:rax $211.1:r15 
  .loc 2 846 13
  # $212.1: @FILE = call(write_337, $210.1, $211.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $211.1
  # [discarded value]: $210.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $212.1:rax 
  .loc 2 846 13
  # $213.1: @FILE = call(end_line_340, $212.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $213.1
  # [discarded value]: $212.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] 
.LABEL__generate_store_value_31__72:
  .loc 2 848 24
  # $203.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $203.1:rax 
  .loc 2 848 65
  # $204.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $203.1:rax $204.1:r15 
  .loc 2 848 65
  # $205.1: @String = load_struct_member_address($204.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $203.1:rax $204.1:r15 $205.1:r14 
  .loc 2 848 24
  # $206.1: @String = call(append_354, $203.1, $205.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $205.1
  # [discarded value]: $204.1
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] $206.1:rax 
  .loc 2 848 13
  # call(abort_35, self.1, $206.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $202.1:[rbp-53] 
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] 
.LABEL__generate_store_value_31__15:
  .loc 2 850 16
  # $19.1: Boolean = call(is_343, ir_value.1, IR_Function_Address_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Address_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:rax 
  # jump($19.1, .LABEL__generate_store_value_31__16, .LABEL__generate_store_value_31__18)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_store_value_31__18
.LABEL__generate_store_value_31__16:
  .loc 2 851 21
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:rax 
  .loc 2 852 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-53], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] 
  .loc 2 853 13
  # $189.1: Boolean = call(is_343, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:rax 
  # jump($189.1, .LABEL__generate_store_value_31__67, .LABEL__generate_store_value_31__69)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_store_value_31__69
.LABEL__generate_store_value_31__67:
  .loc 2 854 13
  # $194.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $194.1:rbx 
  .loc 2 854 13
  # $195.1: @FILE = call(write_337, $194.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $194.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $195.1:rax 
  .loc 2 854 13
  # $196.1: @FILE = call(write_55, $195.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $195.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $196.1:rax 
  .loc 2 854 13
  # $197.1: @FILE = call(write_337, $196.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $196.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $197.1:rax 
  .loc 2 854 79
  # $198.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-53]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:rbx:[rbp-53] $189.1:[rbp-54] $197.1:rax $198.1:r15 
  .loc 2 854 13
  # $199.1: @FILE = call(write_337, $197.1, $198.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $198.1
  # [discarded value]: $197.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $199.1:rax 
  .loc 2 854 13
  # $200.1: @FILE = call(end_line_340, $199.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $200.1
  # [discarded value]: $199.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] 
.LABEL__generate_store_value_31__69:
  .loc 2 856 24
  # $190.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $190.1:rax 
  .loc 2 856 65
  # $191.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $190.1:rax $191.1:r15 
  .loc 2 856 65
  # $192.1: @String = load_struct_member_address($191.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $190.1:rax $191.1:r15 $192.1:r14 
  .loc 2 856 24
  # $193.1: @String = call(append_354, $190.1, $192.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $192.1
  # [discarded value]: $191.1
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] $193.1:rax 
  .loc 2 856 13
  # call(abort_35, self.1, $193.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $193.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $189.1:[rbp-54] 
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
.LABEL__generate_store_value_31__18:
  .loc 2 858 16
  # $20.1: Boolean = call(is_343, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:rax 
  # jump($20.1, .LABEL__generate_store_value_31__19, .LABEL__generate_store_value_31__21)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_store_value_31__21
.LABEL__generate_store_value_31__19:
  .loc 2 859 9
  # $182.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $182.1:rbx 
  .loc 2 859 9
  # $183.1: @FILE = call(write_337, $182.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_337
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $183.1:rax 
  .loc 2 859 9
  # $184.1: @FILE = call(write_55, $183.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $184.1:rax 
  .loc 2 859 9
  # $185.1: @FILE = call(write_337, $184.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $184.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $185.1:rax 
  .loc 2 859 9
  # $186.1: @FILE = call(write_operand_34, $185.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $185.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $186.1:rax 
  .loc 2 859 9
  # $187.1: @FILE = call(end_line_340, $186.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $187.1
  # [discarded value]: $186.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
.LABEL__generate_store_value_31__21:
  .loc 2 860 16
  # $21.1: Boolean = call(is_343, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:rax 
  # jump($21.1, .LABEL__generate_store_value_31__22, .LABEL__generate_store_value_31__24)
  test al, al
  mov [rbp-47], al
  jz .LABEL__generate_store_value_31__24
.LABEL__generate_store_value_31__22:
  .loc 2 861 9
  # $176.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $176.1:rbx 
  .loc 2 861 9
  # $177.1: @FILE = call(write_337, $176.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_81[rip] # "  mov BYTE PTR "
  call write_337
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $177.1:rax 
  .loc 2 861 9
  # $178.1: @FILE = call(write_55, $177.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $178.1:rax 
  .loc 2 861 9
  # $179.1: @FILE = call(write_337, $178.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $179.1:rax 
  .loc 2 861 9
  # $180.1: @FILE = call(write_operand_34, $179.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $179.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $180.1:rax 
  .loc 2 861 9
  # $181.1: @FILE = call(end_line_340, $180.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $181.1
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
.LABEL__generate_store_value_31__24:
  .loc 2 862 16
  # $22.1: Boolean = call(is_343, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:rax 
  # jump($22.1, .LABEL__generate_store_value_31__25, .LABEL__generate_store_value_31__27)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_store_value_31__27
.LABEL__generate_store_value_31__25:
  .loc 2 863 9
  # $170.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $170.1:rbx 
  .loc 2 863 9
  # $171.1: @FILE = call(write_337, $170.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_337
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $171.1:rax 
  .loc 2 863 9
  # $172.1: @FILE = call(write_55, $171.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $172.1:rax 
  .loc 2 863 9
  # $173.1: @FILE = call(write_337, $172.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $173.1:rax 
  .loc 2 863 9
  # $174.1: @FILE = call(write_operand_34, $173.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $174.1:rax 
  .loc 2 863 9
  # $175.1: @FILE = call(end_line_340, $174.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $175.1
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
.LABEL__generate_store_value_31__27:
  .loc 2 864 16
  # $23.1: Boolean = call(is_343, ir_value_type.1, IR_Null_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:rax 
  # jump($23.1, .LABEL__generate_store_value_31__28, .LABEL__generate_store_value_31__30)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_store_value_31__30
.LABEL__generate_store_value_31__28:
  .loc 2 865 9
  # $165.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $165.1:rbx 
  .loc 2 865 9
  # $166.1: @FILE = call(write_337, $165.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_337
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $166.1:rax 
  .loc 2 865 9
  # $167.1: @FILE = call(write_55, $166.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $167.1:rax 
  .loc 2 865 9
  # $168.1: @FILE = call(write_337, $167.1, ", 0")
  mov rdi, rax
  lea rsi, .LABEL__string_82[rip] # ", 0"
  call write_337
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $168.1:rax 
  .loc 2 865 9
  # $169.1: @FILE = call(end_line_340, $168.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $169.1
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
.LABEL__generate_store_value_31__30:
  .loc 2 866 16
  # $24.1: Boolean = call(is_343, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Boolean_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:rax 
  # jump($24.1, .LABEL__generate_store_value_31__31, .LABEL__generate_store_value_31__33)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_store_value_31__33
.LABEL__generate_store_value_31__31:
  .loc 2 867 9
  # $159.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $159.1:rbx 
  .loc 2 867 9
  # $160.1: @FILE = call(write_337, $159.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_81[rip] # "  mov BYTE PTR "
  call write_337
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $160.1:rax 
  .loc 2 867 9
  # $161.1: @FILE = call(write_55, $160.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $161.1:rax 
  .loc 2 867 9
  # $162.1: @FILE = call(write_337, $161.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $162.1:rax 
  .loc 2 867 9
  # $163.1: @FILE = call(write_operand_34, $162.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $162.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $163.1:rax 
  .loc 2 867 9
  # $164.1: @FILE = call(end_line_340, $163.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $164.1
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
.LABEL__generate_store_value_31__33:
  .loc 2 868 16
  # $25.1: Boolean = call(is_343, ir_value_type.1, IR_Struct_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:rax 
  # jump($25.1, .LABEL__generate_store_value_31__34, .LABEL__generate_store_value_31__36)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_store_value_31__36
.LABEL__generate_store_value_31__34:
  .loc 2 869 24
  # struct_type.1: @IR_Struct_Type = ir_value_type.1
  mov rax, [rbp-24]
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
  .loc 2 873 13
  # $38.1: Boolean = call(is_343, address.1, MC_Register_Based_Address)
  mov rdi, [rbp-32]
  mov rsi, MC_Register_Based_Address[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:rax 
  # jump($38.1, .LABEL__generate_store_value_31__40, .LABEL__generate_store_value_31__42)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_store_value_31__42
.LABEL__generate_store_value_31__40:
  .loc 2 874 24
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] address.1:rax 
  .loc 2 875 13
  # destination_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] address.1:rax destination_register.3:rbx 
  .loc 2 876 76
  # $49.1: @MC_Register = load_struct_member(address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] address.1:rax destination_register.3:rbx $49.1:r15 
  .loc 2 876 35
  # destination_address.3: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $49.1, offset = 0)
  mov [rbp-60], rax
  mov [rbp-68], rbx
  mov [rbp-76], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $49.1
  mov rbx, [rbp-76]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] address.1:[rbp-60] destination_register.3:[rbp-68] destination_address.3:rax 
  .loc 2 877 48
  # destination_address_extra_offset.3: Int = load_struct_member(address.1, offset)
  mov rbx, [rbp-60]
  mov r15, [rbx+16]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:rax destination_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__41)
  mov [rbp-76], rax
  mov [rbp-84], r15
.LABEL__generate_store_value_31__41:
  # destination_address.9: @MC_Register_Based_Address = phi(destination_address.2, destination_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] 
  # destination_address_extra_offset.9: Int = phi(destination_address_extra_offset.2, destination_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] 
  # destination_register.6: @MC_Register = phi(destination_register.2, destination_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] 
  .loc 2 885 13
  # $52.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:rax 
  # jump($52.1, .LABEL__generate_store_value_31__43, .LABEL__generate_store_value_31__45)
  test al, al
  mov [rbp-85], al
  jz .LABEL__generate_store_value_31__45
.LABEL__generate_store_value_31__43:
  .loc 2 886 25
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] ir_value.1:rax 
  .loc 2 887 25
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:rax 
  .loc 2 888 17
  # $63.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:rax $63.1:rbx 
  # jump($63.1, .LABEL__generate_store_value_31__49, .LABEL__generate_store_value_31__50)
  test bl, bl
  mov [rbp-93], rax
  mov [rbp-94], bl
  jz .LABEL__generate_store_value_31__50
.LABEL__generate_store_value_31__49:
  .loc 2 889 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] 
.LABEL__generate_store_value_31__50:
  .loc 2 894 33
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-93]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:rax:[rbp-93] $63.1:[rbp-94] mc_value_address.1:rbx 
  .loc 2 895 17
  # $65.1: Boolean = call(is_343, mc_value_address.1, MC_Register_Based_Address)
  mov rdi, rbx
  mov rsi, MC_Register_Based_Address[rip]
  mov [rbp-102], rbx
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:rax 
  # jump($65.1, .LABEL__generate_store_value_31__51, .LABEL__generate_store_value_31__53)
  test al, al
  mov [rbp-103], al
  jz .LABEL__generate_store_value_31__53
.LABEL__generate_store_value_31__51:
  .loc 2 896 37
  # mc_value_address.1: @MC_Register_Based_Address = mc_value_address.1
  mov rax, [rbp-102]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] mc_value_address.1:rax 
  .loc 2 897 17
  # source_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] mc_value_address.1:rax source_register.3:rbx 
  .loc 2 898 75
  # $76.1: @MC_Register = load_struct_member(mc_value_address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] mc_value_address.1:rax source_register.3:rbx $76.1:r15 
  .loc 2 898 34
  # source_address.3: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $76.1, offset = 0)
  mov [rbp-111], rax
  mov [rbp-119], rbx
  mov [rbp-127], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $76.1
  mov rbx, [rbp-127]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] mc_value_address.1:[rbp-111] source_register.3:[rbp-119] source_address.3:rax 
  .loc 2 899 47
  # source_address_extra_offset.3: Int = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rbp-111]
  mov r15, [rbx+16]
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:rax source_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__52)
  mov [rbp-127], rax
  mov [rbp-135], r15
.LABEL__generate_store_value_31__52:
  # source_register.9: @MC_Register = phi(source_register.2, source_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] 
  # source_address.9: @MC_Register_Based_Address = phi(source_address.2, source_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] 
  # source_address_extra_offset.9: Int = phi(source_address_extra_offset.2, source_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] 
  .loc 2 907 35
  # ir_value_type_size.1: Int = call(get_type_size_56, self.1, ir_value_type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call get_type_size_56
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:rax 
  .loc 2 908 30
  # data_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-143], rax
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rax 
  .loc 2 909 13
  # store_struct_member(data_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rax 
  .loc 2 910 13
  # copied_bytes.1: Int = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rax copied_bytes.1:rbx 
  # jump(.LABEL__generate_store_value_31__54)
  mov [rbp-151], rax
  mov [rbp-159], rbx
.LABEL__generate_store_value_31__54:
  # copied_bytes.2: Int = phi(copied_bytes.1, copied_bytes.4)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] 
  .loc 2 911 20
  # $81.1: Int = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-143]
  sub rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $81.1:rax 
  .loc 2 911 20
  # $82.1: Boolean = $81.1 >= 8
  cmp rax, 8
  setge bl
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:rbx 
  # jump($82.1, .LABEL__generate_store_value_31__55, .LABEL__generate_store_value_31__56)
  test bl, bl
  mov [rbp-160], bl
  jz .LABEL__generate_store_value_31__56
.LABEL__generate_store_value_31__55:
  .loc 2 912 41
  # $83.1: Int = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-135]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $83.1:rax 
  .loc 2 912 17
  # store_struct_member(source_address.9, offset, $83.1)
  mov rbx, [rbp-127]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
  .loc 2 913 17
  # $84.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $84.1:r15 
  .loc 2 913 17
  # $85.1: @FILE = call(write_337, $84.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $85.1:rax 
  .loc 2 913 56
  # $86.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-151]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $85.1:rax $86.1:r15 
  .loc 2 913 17
  # $87.1: @FILE = call(write_337, $85.1, $86.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $86.1
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $87.1:rax 
  .loc 2 913 17
  # $88.1: @FILE = call(write_337, $87.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $88.1:rax 
  .loc 2 913 17
  # $89.1: @FILE = call(write_55, $88.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-127]
  call write_55
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $89.1:rax 
  .loc 2 913 17
  # $90.1: @FILE = call(end_line_340, $89.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $90.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
  .loc 2 914 46
  # $91.1: Int = destination_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-84]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $91.1:rax 
  .loc 2 914 17
  # store_struct_member(destination_address.9, offset, $91.1)
  mov rbx, [rbp-76]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
  .loc 2 915 17
  # $92.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $92.1:r15 
  .loc 2 915 17
  # $93.1: @FILE = call(write_337, $92.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $93.1:rax 
  .loc 2 915 17
  # $94.1: @FILE = call(write_55, $93.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-76]
  call write_55
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $94.1:rax 
  .loc 2 915 17
  # $95.1: @FILE = call(write_337, $94.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $95.1:rax 
  .loc 2 915 95
  # $96.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-151]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $95.1:rax $96.1:r15 
  .loc 2 915 17
  # $97.1: @FILE = call(write_337, $95.1, $96.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $96.1
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $97.1:rax 
  .loc 2 915 17
  # $98.1: @FILE = call(end_line_340, $97.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $98.1
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
  .loc 2 916 32
  # $99.1: Int = copied_bytes.2 + 8
  mov rax, [rbp-159]
  add rax, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $99.1:rax 
  .loc 2 916 17
  # copied_bytes.4: Int = $99.1
  mov [rbp-168], rax
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] copied_bytes.4:rax:[rbp-159] 
  # jump(.LABEL__generate_store_value_31__54)
  mov [rbp-159], rax
  jmp .LABEL__generate_store_value_31__54
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] copied_bytes.4:[rbp-159] 
  # [discarded value]: copied_bytes.4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
.LABEL__generate_store_value_31__56:
  .loc 2 918 17
  # $100.1: Int = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-143]
  sub rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $100.1:rax 
  .loc 2 918 17
  # $101.1: Boolean = $100.1 >= 4
  cmp rax, 4
  setge bl
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:rbx 
  # jump($101.1, .LABEL__generate_store_value_31__57, .LABEL__generate_store_value_31__58)
  test bl, bl
  mov [rbp-161], bl
  jz .LABEL__generate_store_value_31__58
.LABEL__generate_store_value_31__57:
  .loc 2 919 41
  # $102.1: Int = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-135]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $102.1:rax 
  .loc 2 919 17
  # store_struct_member(source_address.9, offset, $102.1)
  mov rbx, [rbp-127]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] 
  .loc 2 920 17
  # $103.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $103.1:r15 
  .loc 2 920 17
  # $104.1: @FILE = call(write_337, $103.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $104.1:rax 
  .loc 2 920 56
  # $105.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-151]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $104.1:rax $105.1:r15 
  .loc 2 920 17
  # $106.1: @FILE = call(write_337, $104.1, $105.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $105.1
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $106.1:rax 
  .loc 2 920 17
  # $107.1: @FILE = call(write_337, $106.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $107.1:rax 
  .loc 2 920 17
  # $108.1: @FILE = call(write_55, $107.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-127]
  call write_55
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $108.1:rax 
  .loc 2 920 17
  # $109.1: @FILE = call(end_line_340, $108.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $109.1
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] 
  .loc 2 921 46
  # $110.1: Int = destination_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-84]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $110.1:rax 
  .loc 2 921 17
  # store_struct_member(destination_address.9, offset, $110.1)
  mov rbx, [rbp-76]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] 
  .loc 2 922 17
  # $111.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $111.1:r15 
  .loc 2 922 17
  # $112.1: @FILE = call(write_337, $111.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $112.1:rax 
  .loc 2 922 17
  # $113.1: @FILE = call(write_55, $112.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-76]
  call write_55
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $113.1:rax 
  .loc 2 922 17
  # $114.1: @FILE = call(write_337, $113.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $114.1:rax 
  .loc 2 922 95
  # $115.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-151]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $114.1:rax $115.1:r15 
  .loc 2 922 17
  # $116.1: @FILE = call(write_337, $114.1, $115.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $115.1
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $116.1:rax 
  .loc 2 922 17
  # $117.1: @FILE = call(end_line_340, $116.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $117.1
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] 
  .loc 2 923 32
  # $118.1: Int = copied_bytes.2 + 4
  mov rax, [rbp-159]
  add rax, 4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] $118.1:rax 
  .loc 2 923 17
  # copied_bytes.7: Int = $118.1
  mov [rbp-169], rax
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:rax:[rbp-159] 
  # jump(.LABEL__generate_store_value_31__58)
  mov [rbp-159], rax
.LABEL__generate_store_value_31__58:
  # copied_bytes.8: Int = phi(copied_bytes.7, copied_bytes.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] 
  .loc 2 925 17
  # $119.1: Int = ir_value_type_size.1 - copied_bytes.8
  mov rax, [rbp-143]
  sub rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $119.1:rax 
  .loc 2 925 17
  # $120.1: Boolean = $119.1 >= 2
  cmp rax, 2
  setge bl
  # [discarded value]: $119.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:rbx 
  # jump($120.1, .LABEL__generate_store_value_31__59, .LABEL__generate_store_value_31__60)
  test bl, bl
  mov [rbp-162], bl
  jz .LABEL__generate_store_value_31__60
.LABEL__generate_store_value_31__59:
  .loc 2 926 41
  # $121.1: Int = source_address_extra_offset.9 + copied_bytes.8
  mov rax, [rbp-135]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $121.1:rax 
  .loc 2 926 17
  # store_struct_member(source_address.9, offset, $121.1)
  mov rbx, [rbp-127]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] 
  .loc 2 927 17
  # $122.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $122.1:r15 
  .loc 2 927 17
  # $123.1: @FILE = call(write_337, $122.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $123.1:rax 
  .loc 2 927 56
  # $124.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-151]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $123.1:rax $124.1:r15 
  .loc 2 927 17
  # $125.1: @FILE = call(write_337, $123.1, $124.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $124.1
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $125.1:rax 
  .loc 2 927 17
  # $126.1: @FILE = call(write_337, $125.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $125.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $126.1:rax 
  .loc 2 927 17
  # $127.1: @FILE = call(write_55, $126.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-127]
  call write_55
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $127.1:rax 
  .loc 2 927 17
  # $128.1: @FILE = call(end_line_340, $127.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $128.1
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] 
  .loc 2 928 46
  # $129.1: Int = destination_address_extra_offset.9 + copied_bytes.8
  mov rax, [rbp-84]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $129.1:rax 
  .loc 2 928 17
  # store_struct_member(destination_address.9, offset, $129.1)
  mov rbx, [rbp-76]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] 
  .loc 2 929 17
  # $130.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $130.1:r15 
  .loc 2 929 17
  # $131.1: @FILE = call(write_337, $130.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $131.1:rax 
  .loc 2 929 17
  # $132.1: @FILE = call(write_55, $131.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-76]
  call write_55
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $132.1:rax 
  .loc 2 929 17
  # $133.1: @FILE = call(write_337, $132.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $133.1:rax 
  .loc 2 929 95
  # $134.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-151]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $133.1:rax $134.1:r15 
  .loc 2 929 17
  # $135.1: @FILE = call(write_337, $133.1, $134.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $134.1
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $135.1:rax 
  .loc 2 929 17
  # $136.1: @FILE = call(end_line_340, $135.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $136.1
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] 
  .loc 2 930 32
  # $137.1: Int = copied_bytes.8 + 2
  mov rax, [rbp-159]
  add rax, 2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] $137.1:rax 
  .loc 2 930 17
  # copied_bytes.10: Int = $137.1
  mov [rbp-170], rax
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:rax:[rbp-159] 
  # jump(.LABEL__generate_store_value_31__60)
  mov [rbp-159], rax
.LABEL__generate_store_value_31__60:
  # copied_bytes.11: Int = phi(copied_bytes.8, copied_bytes.10)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] 
  .loc 2 932 17
  # $138.1: Int = ir_value_type_size.1 - copied_bytes.11
  mov rax, [rbp-143]
  sub rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $138.1:rax 
  .loc 2 932 17
  # $139.1: Boolean = $138.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:rbx 
  # jump($139.1, .LABEL__generate_store_value_31__61, .LABEL__generate_store_value_31__62)
  test bl, bl
  mov [rbp-163], bl
  jz .LABEL__generate_store_value_31__62
.LABEL__generate_store_value_31__61:
  .loc 2 933 41
  # $140.1: Int = source_address_extra_offset.9 + copied_bytes.11
  mov rax, [rbp-135]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $140.1:rax 
  .loc 2 933 17
  # store_struct_member(source_address.9, offset, $140.1)
  mov rbx, [rbp-127]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $140.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  .loc 2 934 17
  # $141.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:rbx:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $141.1:r15 
  .loc 2 934 17
  # $142.1: @FILE = call(write_337, $141.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $142.1:rax 
  .loc 2 934 56
  # $143.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-151]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $142.1:rax $143.1:r15 
  .loc 2 934 17
  # $144.1: @FILE = call(write_337, $142.1, $143.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $143.1
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $144.1:rax 
  .loc 2 934 17
  # $145.1: @FILE = call(write_337, $144.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $144.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $145.1:rax 
  .loc 2 934 17
  # $146.1: @FILE = call(write_55, $145.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-127]
  call write_55
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $146.1:rax 
  .loc 2 934 17
  # $147.1: @FILE = call(end_line_340, $146.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $147.1
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  .loc 2 935 46
  # $148.1: Int = destination_address_extra_offset.9 + copied_bytes.11
  mov rax, [rbp-84]
  add rax, QWORD PTR [rbp-159]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $148.1:rax 
  .loc 2 935 17
  # store_struct_member(destination_address.9, offset, $148.1)
  mov rbx, [rbp-76]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  .loc 2 936 17
  # $149.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rbx:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $149.1:r15 
  .loc 2 936 17
  # $150.1: @FILE = call(write_337, $149.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $150.1:rax 
  .loc 2 936 17
  # $151.1: @FILE = call(write_55, $150.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-76]
  call write_55
  # [discarded value]: $150.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $151.1:rax 
  .loc 2 936 17
  # $152.1: @FILE = call(write_337, $151.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $152.1:rax 
  .loc 2 936 95
  # $153.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-151]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rbx:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $152.1:rax $153.1:r15 
  .loc 2 936 17
  # $154.1: @FILE = call(write_337, $152.1, $153.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $153.1
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $154.1:rax 
  .loc 2 936 17
  # $155.1: @FILE = call(end_line_340, $154.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $155.1
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  .loc 2 937 32
  # $156.1: Int = copied_bytes.11 + 1
  mov rax, [rbp-159]
  add rax, 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $156.1:rax 
  .loc 2 937 17
  # copied_bytes.13: Int = $156.1
  mov [rbp-171], rax
  # [discarded value]: copied_bytes.13
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  # jump(.LABEL__generate_store_value_31__62)
.LABEL__generate_store_value_31__62:
  .loc 2 939 13
  # store_struct_member(data_register.1, is_reserved, false)
  mov rax, [rbp-151]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rax:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  .loc 2 940 17
  # $157.1: Boolean = source_register.9 != null
  cmp QWORD PTR [rbp-119], 0
  setne bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:rax:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:rbx 
  # jump($157.1, .LABEL__generate_store_value_31__63, .LABEL__generate_store_value_31__44)
  test bl, bl
  mov [rbp-164], bl
  jz .LABEL__generate_store_value_31__44
.LABEL__generate_store_value_31__63:
  .loc 2 941 17
  # store_struct_member(source_register.9, is_reserved, false)
  mov rax, [rbp-119]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:rax:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # jump(.LABEL__generate_store_value_31__44)
.LABEL__generate_store_value_31__44:
  .loc 2 949 13
  # $158.1: Boolean = destination_register.6 != null
  cmp QWORD PTR [rbp-68], 0
  setne al
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] $158.1:rax mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # jump($158.1, .LABEL__generate_store_value_31__65, .LABEL__generate_store_value_31__11)
  test al, al
  mov [rbp-165], al
  jz .LABEL__generate_store_value_31__11
.LABEL__generate_store_value_31__65:
  .loc 2 950 13
  # store_struct_member(destination_register.6, is_reserved, false)
  mov rax, [rbp-68]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:rax:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] $158.1:[rbp-165] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] $158.1:[rbp-165] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] $157.1:[rbp-164] 
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] $139.1:[rbp-163] 
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] copied_bytes.11:[rbp-159] 
  # [discarded value]: copied_bytes.11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] copied_bytes.10:[rbp-159] 
  # [discarded value]: copied_bytes.10
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] $120.1:[rbp-162] 
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] copied_bytes.8:[rbp-159] 
  # [discarded value]: copied_bytes.8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] copied_bytes.7:[rbp-159] 
  # [discarded value]: copied_bytes.7
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] $101.1:[rbp-161] 
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] $82.1:[rbp-160] 
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] copied_bytes.2:[rbp-159] 
  # [discarded value]: copied_bytes.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] source_register.9:[rbp-119] source_address.9:[rbp-127] source_address_extra_offset.9:[rbp-135] ir_value_type_size.1:[rbp-143] data_register.1:[rbp-151] copied_bytes.1:[rbp-159] 
  # [discarded value]: copied_bytes.1
  # [discarded value]: data_register.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: source_address_extra_offset.9
  # [discarded value]: source_address.9
  # [discarded value]: source_register.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.3:[rbp-119] source_address.3:[rbp-127] source_address_extra_offset.3:[rbp-135] 
  # [discarded value]: source_address_extra_offset.3
  # [discarded value]: source_address.3
  # [discarded value]: source_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] 
.LABEL__generate_store_value_31__53:
  .loc 2 901 35
  # source_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rax:[rbp-119] 
  .loc 2 902 17
  # store_struct_member(source_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rax:[rbp-119] 
  .loc 2 903 17
  # $67.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rax:[rbp-119] $67.1:r15 
  .loc 2 903 17
  # $68.1: @FILE = call(write_337, $67.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-119], rax
  call write_337
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] $68.1:rax 
  .loc 2 903 56
  # $69.1: @String = load_struct_member(source_register.2, name_q)
  mov rbx, [rbp-119]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rbx:[rbp-119] $68.1:rax $69.1:r15 
  .loc 2 903 17
  # $70.1: @FILE = call(write_337, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] $70.1:rax 
  .loc 2 903 17
  # $71.1: @FILE = call(write_337, $70.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] $71.1:rax 
  .loc 2 903 17
  # $72.1: @FILE = call(write_55, $71.1, mc_value_address.1)
  mov rdi, rax
  mov rsi, [rbp-102]
  call write_55
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] $72.1:rax 
  .loc 2 903 17
  # $73.1: @FILE = call(end_line_340, $72.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] 
  .loc 2 904 34
  # source_address.2: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = source_register.2, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = source_register.2
  mov rbx, [rbp-119]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rbx:[rbp-119] source_address.2:rax:[rbp-127] 
  .loc 2 905 17
  # source_address_extra_offset.2: Int = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:rbx:[rbp-119] source_address.2:rax:[rbp-127] source_address_extra_offset.2:r15:[rbp-135] 
  # jump(.LABEL__generate_store_value_31__52)
  mov [rbp-127], rax
  mov [rbp-135], r15
  jmp .LABEL__generate_store_value_31__52
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] source_register.2:[rbp-119] source_address.2:[rbp-127] source_address_extra_offset.2:[rbp-135] 
  # [discarded value]: source_address_extra_offset.2
  # [discarded value]: source_address.2
  # [discarded value]: source_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] $65.1:[rbp-103] 
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] mc_value_address.1:[rbp-102] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] $63.1:[rbp-94] 
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] mc_value.1:[rbp-93] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] 
.LABEL__generate_store_value_31__45:
  .loc 2 943 20
  # $53.1: Boolean = call(is_343, ir_value.1, IR_Struct_Literal_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Struct_Literal_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:rax 
  # jump($53.1, .LABEL__generate_store_value_31__46, .LABEL__generate_store_value_31__48)
  test al, al
  mov [rbp-86], al
  jz .LABEL__generate_store_value_31__48
.LABEL__generate_store_value_31__46:
  .loc 2 944 13
  # store_struct_member(destination_address.9, offset, destination_address_extra_offset.9)
  mov rax, [rbp-76]
  mov rbx, [rbp-84]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rax:[rbp-76] destination_address_extra_offset.9:rbx:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] 
  .loc 2 945 54
  # $58.1: @IR_Struct_Literal_Value = ir_value.1
  mov r15, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rax:[rbp-76] destination_address_extra_offset.9:rbx:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $58.1:r15 
  .loc 2 945 92
  # $60.1: @IR_Struct_Type = load_struct_member(ir_value.1, type)
  mov r14, [rbp-16]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-8] ir_value.1:r14:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:rax:[rbp-76] destination_address_extra_offset.9:rbx:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $58.1:r15 $60.1:r13 
  .loc 2 945 13
  # call(generate_store_struct_literal_value_32, self.1, $58.1, $60.1, destination_address.9)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, r13
  mov rcx, rax
  call generate_store_struct_literal_value_32
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] 
  # jump(.LABEL__generate_store_value_31__44)
  jmp .LABEL__generate_store_value_31__44
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] 
.LABEL__generate_store_value_31__48:
  .loc 2 947 24
  # $54.1: @String = call(clone_345, "Unsupported value: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value: "
  call clone_345
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $54.1:rax 
  .loc 2 947 60
  # $55.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $54.1:rax $55.1:r15 
  .loc 2 947 60
  # $56.1: @String = load_struct_member_address($55.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $54.1:rax $55.1:r15 $56.1:r14 
  .loc 2 947 24
  # $57.1: @String = call(append_354, $54.1, $56.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] $57.1:rax 
  .loc 2 947 13
  # call(abort_35, self.1, $57.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] $53.1:[rbp-86] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] $52.1:[rbp-85] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] destination_address.9:[rbp-76] destination_address_extra_offset.9:[rbp-84] destination_register.6:[rbp-68] 
  # [discarded value]: destination_register.6
  # [discarded value]: destination_address_extra_offset.9
  # [discarded value]: destination_address.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.3:[rbp-68] destination_address.3:[rbp-76] destination_address_extra_offset.3:[rbp-84] 
  # [discarded value]: destination_address_extra_offset.3
  # [discarded value]: destination_address.3
  # [discarded value]: destination_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] 
.LABEL__generate_store_value_31__42:
  .loc 2 879 36
  # destination_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rax:[rbp-68] 
  .loc 2 880 13
  # store_struct_member(destination_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rax:[rbp-68] 
  .loc 2 881 13
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rax:[rbp-68] $40.1:r15 
  .loc 2 881 13
  # $41.1: @FILE = call(write_337, $40.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_62[rip] # "  lea "
  mov [rbp-68], rax
  call write_337
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] $41.1:rax 
  .loc 2 881 52
  # $42.1: @String = load_struct_member(destination_register.2, name_q)
  mov rbx, [rbp-68]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rbx:[rbp-68] $41.1:rax $42.1:r15 
  .loc 2 881 13
  # $43.1: @FILE = call(write_337, $41.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] $43.1:rax 
  .loc 2 881 13
  # $44.1: @FILE = call(write_337, $43.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] $44.1:rax 
  .loc 2 881 13
  # $45.1: @FILE = call(write_55, $44.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] $45.1:rax 
  .loc 2 881 13
  # $46.1: @FILE = call(end_line_340, $45.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] 
  .loc 2 882 35
  # destination_address.2: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = destination_register.2, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = destination_register.2
  mov rbx, [rbp-68]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rbx:[rbp-68] destination_address.2:rax:[rbp-76] 
  .loc 2 883 13
  # destination_address_extra_offset.2: Int = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:rbx:[rbp-68] destination_address.2:rax:[rbp-76] destination_address_extra_offset.2:r15:[rbp-84] 
  # jump(.LABEL__generate_store_value_31__41)
  mov [rbp-76], rax
  mov [rbp-84], r15
  jmp .LABEL__generate_store_value_31__41
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] destination_register.2:[rbp-68] destination_address.2:[rbp-76] destination_address_extra_offset.2:[rbp-84] 
  # [discarded value]: destination_address_extra_offset.2
  # [discarded value]: destination_address.2
  # [discarded value]: destination_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $38.1:[rbp-52] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
.LABEL__generate_store_value_31__36:
  .loc 2 952 16
  # $26.1: Boolean = call(is_343, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:rax 
  # jump($26.1, .LABEL__generate_store_value_31__37, .LABEL__generate_store_value_31__39)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_store_value_31__39
.LABEL__generate_store_value_31__37:
  .loc 2 953 9
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $31.1:rbx 
  .loc 2 953 9
  # $32.1: @FILE = call(write_337, $31.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  mov QWORD PTR "
  call write_337
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $32.1:rax 
  .loc 2 953 9
  # $33.1: @FILE = call(write_55, $32.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $33.1:rax 
  .loc 2 953 9
  # $34.1: @FILE = call(write_337, $33.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $34.1:rax 
  .loc 2 953 9
  # $35.1: @FILE = call(write_operand_34, $34.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $35.1:rax 
  .loc 2 953 9
  # $36.1: @FILE = call(end_line_340, $35.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
.LABEL__generate_store_value_31__39:
  .loc 2 955 20
  # $27.1: @String = call(clone_345, "Unsupported value type: ")
  lea rdi, .LABEL__string_78[rip] # "Unsupported value type: "
  call clone_345
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:rax 
  .loc 2 955 61
  # $28.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:rax $28.1:r15 
  .loc 2 955 61
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:rax $28.1:r15 $29.1:r14 
  .loc 2 955 20
  # $30.1: @String = call(append_354, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $30.1:rax 
  .loc 2 955 9
  # call(abort_35, self.1, $30.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # [discarded value]: $14.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] 
  # [discarded value]: $14.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: ir_value_type.1
  # [discarded value]: address.1
  # [discarded value]: ir_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_value_31__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_value_31__stack_frame_size: .word 176

  .loc 2 959 1
  .text
generate_store_struct_literal_value_32:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_literal_value_32__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_literal_value_32__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_value.1: @IR_Struct_Literal_Value = load_variable(ir_value)
  # [live values]: self.1:rdi ir_value.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx 
  # address.1: @MC_Register_Based_Address = load_variable(address)
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx 
  .loc 2 960 9
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rdx+16]
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx $1.1:rax 
  .loc 2 960 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx $2.1:rbx 
  # jump($2.1, .LABEL__generate_store_struct_literal_value_32__2, .LABEL__generate_store_struct_literal_value_32__3)
  test bl, bl
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-17], bl
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  jz .LABEL__generate_store_struct_literal_value_32__3
.LABEL__generate_store_struct_literal_value_32__2:
  .loc 2 961 60
  # $3.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 2 961 9
  # call(generate_store_struct_literal_value_32, self.1, ir_value.1, $3.1, address.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rbx
  mov rcx, [rbp-8]
  call generate_store_struct_literal_value_32
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_store_struct_literal_value_32__3)
.LABEL__generate_store_struct_literal_value_32__3:
  .loc 2 963 33
  # $4.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] $4.1:rbx 
  .loc 2 963 33
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:r15 
  # jump(.LABEL__generate_store_struct_literal_value_32__4)
  mov [rbp-41], r15
.LABEL__generate_store_struct_literal_value_32__4:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.5)
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] 
  .loc 2 964 12
  # $6.1: Boolean = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:rax 
  # jump($6.1, .LABEL__generate_store_struct_literal_value_32__5, .LABEL__generate_store_struct_literal_value_32__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__generate_store_struct_literal_value_32__6
.LABEL__generate_store_struct_literal_value_32__5:
  .loc 2 965 31
  # struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:rax:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx 
  .loc 2 966 37
  # struct_type_member_value.1: @IR_Value = call(get_member_value_157, ir_value.1, struct_type_member.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  mov [rbp-50], rbx
  call get_member_value_157
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax 
  .loc 2 967 13
  # $10.1: Boolean = struct_type_member_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__generate_store_struct_literal_value_32__7, .LABEL__generate_store_struct_literal_value_32__9)
  test bl, bl
  mov [rbp-58], rax
  mov [rbp-59], bl
  jz .LABEL__generate_store_struct_literal_value_32__9
.LABEL__generate_store_struct_literal_value_32__7:
  .loc 2 968 13
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $21.1:rbx 
  .loc 2 968 13
  # $22.1: @FILE = call(write_337, $21.1, "  #     .")
  mov rdi, rbx
  lea rsi, .LABEL__string_84[rip] # "  #     ."
  call write_337
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $22.1:rax 
  .loc 2 968 55
  # $23.1: @String = load_struct_member(struct_type_member.1, name)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $22.1:rax $23.1:r15 
  .loc 2 968 13
  # $24.1: @FILE = call(write_337, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $24.1:rax 
  .loc 2 968 13
  # $25.1: @FILE = call(write_337, $24.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_85[rip] # " = "
  call write_337
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $25.1:rax 
  .loc 2 968 13
  # $26.1: @FILE = call(write_154, $25.1, struct_type_member_value.1, false)
  mov rdi, rax
  mov rsi, [rbp-58]
  mov dl, 0
  call write_154
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $26.1:rax 
  .loc 2 968 13
  # $27.1: @FILE = call(end_line_340, $26.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  .loc 2 969 17
  # $28.1: @IR_Type = load_struct_member(struct_type_member_value.1, type)
  mov rax, [rbp-58]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax:[rbp-58] $10.1:[rbp-59] $28.1:rbx 
  .loc 2 969 17
  # $29.1: Boolean = call(is_343, $28.1, IR_Undefined_Type)
  mov rdi, rbx
  mov rsi, IR_Undefined_Type[rip]
  call is_343
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $29.1:rax 
  .loc 2 969 17
  # $30.1: Boolean = $29.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:rbx 
  # jump($30.1, .LABEL__generate_store_struct_literal_value_32__10, .LABEL__generate_store_struct_literal_value_32__8)
  test bl, bl
  mov [rbp-60], bl
  jz .LABEL__generate_store_struct_literal_value_32__8
.LABEL__generate_store_struct_literal_value_32__10:
  .loc 2 970 46
  # struct_type_member_offset.1: Int = call(get_offset_33, self.1, struct_type_member.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-50]
  call get_offset_33
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax 
  .loc 2 971 34
  # $32.1: Int = load_struct_member(address.1, offset)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax $32.1:r15 
  .loc 2 971 34
  # $33.1: Int = $32.1 + struct_type_member_offset.1
  mov r14, r15
  add r14, rax
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax $33.1:r14 
  .loc 2 971 17
  # store_struct_member(address.1, offset, $33.1)
  mov QWORD PTR [rbx+16], r14
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax 
  .loc 2 972 17
  # call(generate_store_value_31, self.1, struct_type_member_value.1, address.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-58]
  mov rdx, rbx
  mov [rbp-68], rax
  call generate_store_value_31
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:[rbp-68] 
  .loc 2 973 34
  # $34.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $34.1:rbx 
  .loc 2 973 34
  # $35.1: Int = $34.1 - struct_type_member_offset.1
  mov r15, rbx
  sub r15, QWORD PTR [rbp-68]
  # [discarded value]: $34.1
  # [discarded value]: struct_type_member_offset.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] $35.1:r15 
  .loc 2 973 17
  # store_struct_member(address.1, offset, $35.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # jump(.LABEL__generate_store_struct_literal_value_32__8)
.LABEL__generate_store_struct_literal_value_32__8:
  .loc 2 978 36
  # struct_type_members_item.5: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_members_item.5:rbx:[rbp-41] 
  # jump(.LABEL__generate_store_struct_literal_value_32__4)
  mov [rbp-41], rbx
  jmp .LABEL__generate_store_struct_literal_value_32__4
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_members_item.5:[rbp-41] 
  # [discarded value]: struct_type_members_item.5
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
.LABEL__generate_store_struct_literal_value_32__9:
  .loc 2 976 26
  # $11.1: @Source_Location = load_struct_member(ir_value.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-33] ir_value.1:rax:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $11.1:rbx 
  .loc 2 976 13
  # $12.1: @FILE = call(write_317, stderr, $11.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_317
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $12.1:rax 
  .loc 2 976 13
  # $13.1: @FILE = call(write_337, $12.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $13.1:rax 
  .loc 2 976 63
  # $14.1: @String = load_struct_member(struct_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rbx:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $13.1:rax $14.1:r15 
  .loc 2 976 13
  # $15.1: @FILE = call(write_337, $13.1, $14.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $15.1:rax 
  .loc 2 976 13
  # $16.1: @FILE = call(write_339, $15.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $16.1:rax 
  .loc 2 976 98
  # $17.1: @String = load_struct_member(struct_type_member.1, name)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $16.1:rax $17.1:r15 
  .loc 2 976 13
  # $18.1: @FILE = call(write_337, $16.1, $17.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $18.1:rax 
  .loc 2 976 13
  # $19.1: @FILE = call(write_337, $18.1, " is not initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_87[rip] # " is not initialized"
  call write_337
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $19.1:rax 
  .loc 2 976 13
  # $20.1: @FILE = call(end_line_340, $19.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  # jump(.LABEL__generate_store_struct_literal_value_32__8)
  jmp .LABEL__generate_store_struct_literal_value_32__8
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] 
  # [discarded value]: struct_type_member_value.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_store_struct_literal_value_32__6:
  # return()
  jmp .LABEL__generate_store_struct_literal_value_32__end
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] 
  # [discarded value]: address.1
  # [discarded value]: struct_type.1
  # [discarded value]: ir_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_struct_literal_value_32__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_literal_value_32__stack_frame_size: .word 80

  .loc 2 982 1
  .text
get_offset_33:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_offset_33__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_offset_33__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  .loc 2 983 5
  # offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax 
  .loc 2 984 20
  # struct_type.1: @IR_Struct_Type = load_struct_member(struct_type_member.1, struct_type)
  mov rbx, [rsi]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx 
  .loc 2 985 9
  # $2.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov r15, [rbx+16]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $2.1:r15 
  .loc 2 985 9
  # $3.1: Boolean = $2.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $2.1
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $3.1:r14 
  # jump($3.1, .LABEL__get_offset_33__2, .LABEL__get_offset_33__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-33], r14b
  jz .LABEL__get_offset_33__3
.LABEL__get_offset_33__2:
  .loc 2 986 37
  # $4.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 986 18
  # offset.2: Int = call(get_type_size_56, self.1, $4.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:rax:[rbp-8] 
  # jump(.LABEL__get_offset_33__3)
  mov [rbp-8], rax
.LABEL__get_offset_33__3:
  # offset.7: Int = phi(offset.1, offset.2)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] 
  .loc 2 988 40
  # $6.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] $6.1:rbx 
  .loc 2 988 40
  # current_struct_type_member_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:r15 
  # jump(.LABEL__get_offset_33__4)
  mov [rbp-41], r15
.LABEL__get_offset_33__4:
  # offset.6: Int = phi(offset.7, offset.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] 
  # current_struct_type_member_item.2: @List_Item = phi(current_struct_type_member_item.1, current_struct_type_member_item.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  .loc 2 989 12
  # $8.1: Boolean = current_struct_type_member_item.2 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_offset_33__5, .LABEL__get_offset_33__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_offset_33__6
.LABEL__get_offset_33__5:
  .loc 2 990 39
  # current_struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(current_struct_type_member_item.2, data)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx 
  .loc 2 991 13
  # $11.1: Boolean = current_struct_type_member.1 == struct_type_member.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx $11.1:r15 
  # jump($11.1, .LABEL__get_offset_33__7, .LABEL__get_offset_33__8)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__get_offset_33__8
.LABEL__get_offset_33__7:
  .loc 2 992 13
  # return(offset.6)
  mov rax, [rbp-8]
  jmp .LABEL__get_offset_33__end
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
.LABEL__get_offset_33__8:
  .loc 2 994 46
  # $12.1: @IR_Type = load_struct_member(current_struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rax:[rbp-50] $11.1:[rbp-51] $12.1:rbx 
  .loc 2 994 27
  # $13.1: Int = call(get_type_size_56, self.1, $12.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] $13.1:rax 
  .loc 2 994 18
  # $14.1: Int = offset.6 + $13.1
  mov rbx, [rbp-8]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] $14.1:rbx 
  .loc 2 994 9
  # offset.5: Int = $14.1
  mov [rbp-59], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] 
  .loc 2 995 43
  # current_struct_type_member_item.5: @List_Item = load_struct_member(current_struct_type_member_item.2, next_item)
  mov rax, [rbp-41]
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] current_struct_type_member_item.5:r15:[rbp-41] 
  # jump(.LABEL__get_offset_33__4)
  mov [rbp-8], rbx
  mov [rbp-41], r15
  jmp .LABEL__get_offset_33__4
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:[rbp-8] current_struct_type_member_item.5:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.5
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] 
  # [discarded value]: current_struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
.LABEL__get_offset_33__6:
  .loc 2 997 5
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.2
  # [discarded value]: offset.6
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.1
  # [discarded value]: offset.7
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [discarded value]: offset.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [discarded value]: struct_type.1
  # [discarded value]: offset.1
  # [discarded value]: struct_type_member.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_offset_33__end:
  mov rsp, rbp
  pop rbp
  ret

get_offset_33__stack_frame_size: .word 64

  .loc 2 1000 1
  .text
write_operand_34:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_operand_34__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_operand_34__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # generator.1: @MC_Generator = load_variable(generator)
  # [live values]: file.1:rdi generator.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx 
  .loc 2 1001 9
  # $1.1: Boolean = call(is_343, ir_value.1, IR_Constant_Value)
  mov [rbp-8], rdi
  mov rdi, rdx
  mov [rbp-16], rsi
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-24], rdx
  call is_343
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_operand_34__2, .LABEL__write_operand_34__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_operand_34__3
.LABEL__write_operand_34__2:
  .loc 2 1002 21
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax 
  .loc 2 1003 13
  # $3.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax $3.1:rbx 
  .loc 2 1003 13
  # $4.1: Boolean = call(is_343, $3.1, Boolean_Token)
  mov rdi, rbx
  mov rsi, Boolean_Token[rip]
  mov [rbp-33], rax
  call is_343
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:rax 
  # jump($4.1, .LABEL__write_operand_34__4, .LABEL__write_operand_34__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_operand_34__5
.LABEL__write_operand_34__4:
  .loc 2 1004 18
  # $6.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $6.1:rbx 
  .loc 2 1004 17
  # $7.1: Boolean = load_struct_member($6.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $7.1:r15 
  # jump($7.1, .LABEL__write_operand_34__6, .LABEL__write_operand_34__7)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__write_operand_34__7
.LABEL__write_operand_34__6:
  .loc 2 1005 24
  # $8.1: @FILE = call(write_336, file.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call write_336
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $8.1:rax 
  .loc 2 1005 17
  # return($8.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
.LABEL__write_operand_34__7:
  .loc 2 1007 20
  # $9.1: @FILE = call(write_336, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_336
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $9.1:rax 
  .loc 2 1007 13
  # return($9.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__write_operand_34__5:
  .loc 2 1009 13
  # $10.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $10.1:rbx 
  .loc 2 1009 13
  # $11.1: Boolean = call(is_343, $10.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_343
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__write_operand_34__10, .LABEL__write_operand_34__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_operand_34__11
.LABEL__write_operand_34__10:
  .loc 2 1010 32
  # $13.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $13.1:rbx 
  .loc 2 1010 31
  # $14.1: Int8 = load_struct_member($13.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $14.1:r15 
  .loc 2 1010 31
  # $15.1: Int = cast($14.1)
  mov bl, r15b
  movsx rbx, bl
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $15.1:rbx 
  .loc 2 1010 20
  # $16.1: @FILE = call(write_336, file.1, $15.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_336
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $16.1:rax 
  .loc 2 1010 13
  # return($16.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
.LABEL__write_operand_34__11:
  .loc 2 1012 13
  # $17.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  .loc 2 1012 13
  # $18.1: Boolean = call(is_343, $17.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_343
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  # jump($18.1, .LABEL__write_operand_34__13, .LABEL__write_operand_34__14)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_operand_34__14
.LABEL__write_operand_34__13:
  .loc 2 1013 32
  # $20.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $20.1:rbx 
  .loc 2 1013 31
  # $21.1: Int = load_struct_member($20.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $21.1:r15 
  .loc 2 1013 20
  # $22.1: @FILE = call(write_336, file.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_336
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $22.1:rax 
  .loc 2 1013 13
  # return($22.1)
  mov [rbp-44], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
.LABEL__write_operand_34__14:
  .loc 2 1015 13
  # $23.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $23.1:rbx 
  .loc 2 1015 13
  # $24.1: Boolean = call(is_343, $23.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_343
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:rax 
  # jump($24.1, .LABEL__write_operand_34__16, .LABEL__write_operand_34__17)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_operand_34__17
.LABEL__write_operand_34__16:
  .loc 2 1016 20
  # $25.1: @FILE = call(write_336, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_336
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $25.1:rax 
  .loc 2 1016 13
  # return($25.1)
  mov [rbp-45], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
.LABEL__write_operand_34__17:
  .loc 2 1018 25
  # $26.1: @String = call(clone_345, "Unsupported constant literal: ")
  lea rdi, .LABEL__string_88[rip] # "Unsupported constant literal: "
  call clone_345
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax 
  .loc 2 1018 72
  # $27.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-33]
  mov r15, [rbx+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $27.1:r15 
  .loc 2 1018 72
  # $28.1: @Object_Type = load_struct_member($27.1, object_type)
  mov r14, [r15]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $28.1:r14 
  .loc 2 1018 72
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $28.1:r14 $29.1:r15 
  .loc 2 1018 25
  # $30.1: @String = call(append_354, $26.1, $29.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $30.1:rax 
  .loc 2 1018 9
  # call(abort_35, generator.1, $30.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] 
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_operand_34__3:
  .loc 2 1020 9
  # $31.1: Boolean = call(is_343, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:rax 
  # jump($31.1, .LABEL__write_operand_34__19, .LABEL__write_operand_34__20)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_operand_34__20
.LABEL__write_operand_34__19:
  .loc 2 1021 21
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax 
  .loc 2 1022 21
  # mc_value.1: @MC_Value = call(get_value_42, generator.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_42
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 1023 13
  # $34.1: Boolean = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax $34.1:rbx 
  # jump($34.1, .LABEL__write_operand_34__21, .LABEL__write_operand_34__22)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__write_operand_34__22
.LABEL__write_operand_34__21:
  .loc 2 1024 13
  # call(abort_35, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
.LABEL__write_operand_34__22:
  .loc 2 1026 52
  # $35.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] $35.1:rbx 
  .loc 2 1026 28
  # value_type_size.1: Int = call(get_type_size_56, generator.1, $35.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax 
  .loc 2 1027 13
  # $37.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $37.1:r15 
  .loc 2 1027 13
  # $38.1: Boolean = $37.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $38.1:r14 
  # jump($38.1, .LABEL__write_operand_34__23, .LABEL__write_operand_34__24)
  test r14b, r14b
  mov [rbp-51], rax
  mov [rbp-52], r14b
  jz .LABEL__write_operand_34__24
.LABEL__write_operand_34__23:
  .loc 2 1028 17
  # $39.1: Boolean = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:rax 
  # jump($39.1, .LABEL__write_operand_34__25, .LABEL__write_operand_34__26)
  test al, al
  mov [rbp-53], al
  jz .LABEL__write_operand_34__26
.LABEL__write_operand_34__25:
  .loc 2 1029 35
  # $40.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $40.1:rbx 
  .loc 2 1029 35
  # $41.1: @String = load_struct_member($40.1, name_q)
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $41.1:r15 
  .loc 2 1029 24
  # $42.1: @FILE = call(write_337, file.1, $41.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_337
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $42.1:rax 
  .loc 2 1029 17
  # return($42.1)
  mov [rbp-61], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
.LABEL__write_operand_34__26:
  .loc 2 1031 17
  # $43.1: Boolean = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:rax 
  # jump($43.1, .LABEL__write_operand_34__28, .LABEL__write_operand_34__29)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_34__29
.LABEL__write_operand_34__28:
  .loc 2 1032 35
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $44.1:rbx 
  .loc 2 1032 35
  # $45.1: @String = load_struct_member($44.1, name_d)
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $45.1:r15 
  .loc 2 1032 24
  # $46.1: @FILE = call(write_337, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_337
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $46.1:rax 
  .loc 2 1032 17
  # return($46.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
.LABEL__write_operand_34__29:
  .loc 2 1034 17
  # $47.1: Boolean = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:rax 
  # jump($47.1, .LABEL__write_operand_34__31, .LABEL__write_operand_34__32)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_34__32
.LABEL__write_operand_34__31:
  .loc 2 1035 35
  # $48.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $48.1:rbx 
  .loc 2 1035 35
  # $49.1: @String = load_struct_member($48.1, name_w)
  mov r15, [rbx+24]
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $49.1:r15 
  .loc 2 1035 24
  # $50.1: @FILE = call(write_337, file.1, $49.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_337
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $50.1:rax 
  .loc 2 1035 17
  # return($50.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
.LABEL__write_operand_34__32:
  .loc 2 1037 17
  # $51.1: Boolean = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:rax 
  # jump($51.1, .LABEL__write_operand_34__34, .LABEL__write_operand_34__35)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_34__35
.LABEL__write_operand_34__34:
  .loc 2 1038 35
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $52.1:rbx 
  .loc 2 1038 35
  # $53.1: @String = load_struct_member($52.1, name_b)
  mov r15, [rbx+32]
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $53.1:r15 
  .loc 2 1038 24
  # $54.1: @FILE = call(write_337, file.1, $53.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_337
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $54.1:rax 
  .loc 2 1038 17
  # return($54.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
.LABEL__write_operand_34__35:
  .loc 2 1040 29
  # $55.1: @String = call(clone_345, "Unsupported type size: ")
  lea rdi, .LABEL__string_89[rip] # "Unsupported type size: "
  call clone_345
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $55.1:rax 
  .loc 2 1040 29
  # $56.1: @String = call(append_353, $55.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_353
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $56.1:rax 
  .loc 2 1040 13
  # call(abort_35, generator.1, $56.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
.LABEL__write_operand_34__24:
  .loc 2 1042 13
  # $57.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-42]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $57.1:rbx 
  .loc 2 1042 13
  # $58.1: Boolean = $57.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:r15 
  # jump($58.1, .LABEL__write_operand_34__37, .LABEL__write_operand_34__38)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__write_operand_34__38
.LABEL__write_operand_34__37:
  .loc 2 1043 17
  # $59.1: Boolean = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:rax 
  # jump($59.1, .LABEL__write_operand_34__39, .LABEL__write_operand_34__40)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_34__40
.LABEL__write_operand_34__39:
  .loc 2 1044 24
  # $60.1: @FILE = call(write_337, file.1, "QWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_67[rip] # "QWORD PTR "
  call write_337
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax 
  .loc 2 1044 55
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax $61.1:r15 
  .loc 2 1044 24
  # $62.1: @FILE = call(write_55, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $62.1:rax 
  .loc 2 1044 17
  # return($62.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
.LABEL__write_operand_34__40:
  .loc 2 1046 17
  # $63.1: Boolean = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:rax 
  # jump($63.1, .LABEL__write_operand_34__42, .LABEL__write_operand_34__43)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_34__43
.LABEL__write_operand_34__42:
  .loc 2 1047 24
  # $64.1: @FILE = call(write_337, file.1, "DWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_68[rip] # "DWORD PTR "
  call write_337
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax 
  .loc 2 1047 55
  # $65.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax $65.1:r15 
  .loc 2 1047 24
  # $66.1: @FILE = call(write_55, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $66.1:rax 
  .loc 2 1047 17
  # return($66.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
.LABEL__write_operand_34__43:
  .loc 2 1049 17
  # $67.1: Boolean = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:rax 
  # jump($67.1, .LABEL__write_operand_34__45, .LABEL__write_operand_34__46)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_34__46
.LABEL__write_operand_34__45:
  .loc 2 1050 24
  # $68.1: @FILE = call(write_337, file.1, "WORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_69[rip] # "WORD PTR "
  call write_337
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax 
  .loc 2 1050 54
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax $69.1:r15 
  .loc 2 1050 24
  # $70.1: @FILE = call(write_55, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $70.1:rax 
  .loc 2 1050 17
  # return($70.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
.LABEL__write_operand_34__46:
  .loc 2 1052 17
  # $71.1: Boolean = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:rax 
  # jump($71.1, .LABEL__write_operand_34__48, .LABEL__write_operand_34__49)
  test al, al
  mov [rbp-57], al
  jz .LABEL__write_operand_34__49
.LABEL__write_operand_34__48:
  .loc 2 1053 24
  # $72.1: @FILE = call(write_337, file.1, "BYTE PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_70[rip] # "BYTE PTR "
  call write_337
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax 
  .loc 2 1053 54
  # $73.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax $73.1:r15 
  .loc 2 1053 24
  # $74.1: @FILE = call(write_55, $72.1, $73.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $74.1:rax 
  .loc 2 1053 17
  # return($74.1)
  mov [rbp-65], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
.LABEL__write_operand_34__49:
  .loc 2 1055 29
  # $75.1: @String = call(clone_345, "Unsupported type size: ")
  lea rdi, .LABEL__string_89[rip] # "Unsupported type size: "
  call clone_345
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $75.1:rax 
  .loc 2 1055 29
  # $76.1: @String = call(append_353, $75.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_353
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $76.1:rax 
  .loc 2 1055 13
  # call(abort_35, generator.1, $76.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
.LABEL__write_operand_34__38:
  .loc 2 1057 9
  # call(abort_35, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] 
  # [discarded value]: value_type_size.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
.LABEL__write_operand_34__20:
  .loc 2 1059 21
  # $77.1: @String = call(clone_345, "Unsupported value: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value: "
  call clone_345
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax 
  .loc 2 1059 57
  # $78.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $78.1:r15 
  .loc 2 1059 57
  # $79.1: @String = load_struct_member_address($78.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $78.1:r15 $79.1:r14 
  .loc 2 1059 21
  # $80.1: @String = call(append_354, $77.1, $79.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $80.1:rax 
  .loc 2 1059 5
  # call(abort_35, generator.1, $80.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: generator.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_operand_34__end:
  mov rsp, rbp
  pop rbp
  ret

write_operand_34__stack_frame_size: .word 80

  .loc 2 1062 1
  .text
abort_35:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_35__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_35__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: self.1:rdi message.1:rsi 
  .loc 2 1063 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: message.1:rsi $1.1:rax 
  .loc 2 1063 5
  # $2.1: @FILE = call(flush_341, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call flush_341
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] 
  .loc 2 1064 11
  # $3.1: @String = call(clone_345, "[Generator] ")
  lea rdi, .LABEL__string_90[rip] # "[Generator] "
  call clone_345
  # [live values]: message.1:[rbp-8] $3.1:rax 
  .loc 2 1064 11
  # $4.1: @String = call(append_354, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_354
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 2 1064 5
  # call(abort_342, $4.1)
  mov rdi, rax
  call abort_342
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__abort_35__end:
  mov rsp, rbp
  pop rbp
  ret

abort_35__stack_frame_size: .word 16

  .loc 2 1093 1
  .text
create_mc_generator_36:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_generator_36__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_generator_36__1:
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: output_file_path.1:rdi 
  .loc 2 1096 29
  # $1.1: @Int8 = load_struct_member(output_file_path.1, data)
  mov rax, [rdi]
  # [live values]: output_file_path.1:rdi $1.1:rax 
  .loc 2 1096 52
  # $2.1: @Int8 = load_struct_member("w", data)
  lea rbx, .LABEL__string_9[rip] # "w"
  mov r15, [rbx]
  # [live values]: output_file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 2 1096 23
  # $3.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: output_file_path.1:[rbp-8] $3.1:rax 
  .loc 2 1071 34
  # $4.1: @MC_Register_RAX = new MC_Register_RAX(object_type = MC_Register_RAX, name_q = "rax", name_d = "eax", name_w = "ax", name_b = "al", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-16], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RAX
  mov rbx, MC_Register_RAX[rip]
  mov [rax], rbx
  #     .name_q = "rax"
  lea rbx, .LABEL__string_91[rip] # "rax"
  mov [rax+8], rbx
  #     .name_d = "eax"
  lea rbx, .LABEL__string_92[rip] # "eax"
  mov [rax+16], rbx
  #     .name_w = "ax"
  lea rbx, .LABEL__string_93[rip] # "ax"
  mov [rax+24], rbx
  #     .name_b = "al"
  lea rbx, .LABEL__string_94[rip] # "al"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  .loc 2 1072 34
  # $5.1: @MC_Register_RCX = new MC_Register_RCX(object_type = MC_Register_RCX, name_q = "rcx", name_d = "ecx", name_w = "cx", name_b = "cl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RCX
  mov rbx, MC_Register_RCX[rip]
  mov [rax], rbx
  #     .name_q = "rcx"
  lea rbx, .LABEL__string_95[rip] # "rcx"
  mov [rax+8], rbx
  #     .name_d = "ecx"
  lea rbx, .LABEL__string_96[rip] # "ecx"
  mov [rax+16], rbx
  #     .name_w = "cx"
  lea rbx, .LABEL__string_97[rip] # "cx"
  mov [rax+24], rbx
  #     .name_b = "cl"
  lea rbx, .LABEL__string_98[rip] # "cl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 2 1073 34
  # $6.1: @MC_Register_RDX = new MC_Register_RDX(object_type = MC_Register_RDX, name_q = "rdx", name_d = "edx", name_w = "dx", name_b = "dl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RDX
  mov rbx, MC_Register_RDX[rip]
  mov [rax], rbx
  #     .name_q = "rdx"
  lea rbx, .LABEL__string_99[rip] # "rdx"
  mov [rax+8], rbx
  #     .name_d = "edx"
  lea rbx, .LABEL__string_100[rip] # "edx"
  mov [rax+16], rbx
  #     .name_w = "dx"
  lea rbx, .LABEL__string_101[rip] # "dx"
  mov [rax+24], rbx
  #     .name_b = "dl"
  lea rbx, .LABEL__string_102[rip] # "dl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  .loc 2 1074 34
  # $7.1: @MC_Register_RBX = new MC_Register_RBX(object_type = MC_Register_RBX, name_q = "rbx", name_d = "ebx", name_w = "bx", name_b = "bl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-40], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RBX
  mov rbx, MC_Register_RBX[rip]
  mov [rax], rbx
  #     .name_q = "rbx"
  lea rbx, .LABEL__string_103[rip] # "rbx"
  mov [rax+8], rbx
  #     .name_d = "ebx"
  lea rbx, .LABEL__string_104[rip] # "ebx"
  mov [rax+16], rbx
  #     .name_w = "bx"
  lea rbx, .LABEL__string_105[rip] # "bx"
  mov [rax+24], rbx
  #     .name_b = "bl"
  lea rbx, .LABEL__string_106[rip] # "bl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  .loc 2 1075 34
  # $8.1: @MC_Register_RSI = new MC_Register_RSI(object_type = MC_Register_RSI, name_q = "rsi", name_d = "esi", name_w = "si", name_b = "sil", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-48], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RSI
  mov rbx, MC_Register_RSI[rip]
  mov [rax], rbx
  #     .name_q = "rsi"
  lea rbx, .LABEL__string_107[rip] # "rsi"
  mov [rax+8], rbx
  #     .name_d = "esi"
  lea rbx, .LABEL__string_108[rip] # "esi"
  mov [rax+16], rbx
  #     .name_w = "si"
  lea rbx, .LABEL__string_109[rip] # "si"
  mov [rax+24], rbx
  #     .name_b = "sil"
  lea rbx, .LABEL__string_110[rip] # "sil"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 2 1076 34
  # $9.1: @MC_Register_RDI = new MC_Register_RDI(object_type = MC_Register_RDI, name_q = "rdi", name_d = "edi", name_w = "di", name_b = "dil", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-56], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RDI
  mov rbx, MC_Register_RDI[rip]
  mov [rax], rbx
  #     .name_q = "rdi"
  lea rbx, .LABEL__string_111[rip] # "rdi"
  mov [rax+8], rbx
  #     .name_d = "edi"
  lea rbx, .LABEL__string_112[rip] # "edi"
  mov [rax+16], rbx
  #     .name_w = "di"
  lea rbx, .LABEL__string_113[rip] # "di"
  mov [rax+24], rbx
  #     .name_b = "dil"
  lea rbx, .LABEL__string_114[rip] # "dil"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  .loc 2 1077 34
  # $10.1: @MC_Register_RSP = new MC_Register_RSP(object_type = MC_Register_RSP, name_q = "rsp", name_d = "esp", name_w = "sp", name_b = "spl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-64], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RSP
  mov rbx, MC_Register_RSP[rip]
  mov [rax], rbx
  #     .name_q = "rsp"
  lea rbx, .LABEL__string_115[rip] # "rsp"
  mov [rax+8], rbx
  #     .name_d = "esp"
  lea rbx, .LABEL__string_116[rip] # "esp"
  mov [rax+16], rbx
  #     .name_w = "sp"
  lea rbx, .LABEL__string_117[rip] # "sp"
  mov [rax+24], rbx
  #     .name_b = "spl"
  lea rbx, .LABEL__string_118[rip] # "spl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  .loc 2 1078 34
  # $11.1: @MC_Register_RBP = new MC_Register_RBP(object_type = MC_Register_RBP, name_q = "rbp", name_d = "ebp", name_w = "bp", name_b = "bpl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-72], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RBP
  mov rbx, MC_Register_RBP[rip]
  mov [rax], rbx
  #     .name_q = "rbp"
  lea rbx, .LABEL__string_119[rip] # "rbp"
  mov [rax+8], rbx
  #     .name_d = "ebp"
  lea rbx, .LABEL__string_120[rip] # "ebp"
  mov [rax+16], rbx
  #     .name_w = "bp"
  lea rbx, .LABEL__string_121[rip] # "bp"
  mov [rax+24], rbx
  #     .name_b = "bpl"
  lea rbx, .LABEL__string_122[rip] # "bpl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  .loc 2 1079 33
  # $12.1: @MC_Register_R8 = new MC_Register_R8(object_type = MC_Register_R8, name_q = "r8", name_d = "r8d", name_w = "r8w", name_b = "r8b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-80], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R8
  mov rbx, MC_Register_R8[rip]
  mov [rax], rbx
  #     .name_q = "r8"
  lea rbx, .LABEL__string_123[rip] # "r8"
  mov [rax+8], rbx
  #     .name_d = "r8d"
  lea rbx, .LABEL__string_124[rip] # "r8d"
  mov [rax+16], rbx
  #     .name_w = "r8w"
  lea rbx, .LABEL__string_125[rip] # "r8w"
  mov [rax+24], rbx
  #     .name_b = "r8b"
  lea rbx, .LABEL__string_126[rip] # "r8b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  .loc 2 1080 33
  # $13.1: @MC_Register_R9 = new MC_Register_R9(object_type = MC_Register_R9, name_q = "r9", name_d = "r9d", name_w = "r9w", name_b = "r9b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-88], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R9
  mov rbx, MC_Register_R9[rip]
  mov [rax], rbx
  #     .name_q = "r9"
  lea rbx, .LABEL__string_127[rip] # "r9"
  mov [rax+8], rbx
  #     .name_d = "r9d"
  lea rbx, .LABEL__string_128[rip] # "r9d"
  mov [rax+16], rbx
  #     .name_w = "r9w"
  lea rbx, .LABEL__string_129[rip] # "r9w"
  mov [rax+24], rbx
  #     .name_b = "r9b"
  lea rbx, .LABEL__string_130[rip] # "r9b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  .loc 2 1081 34
  # $14.1: @MC_Register_R10 = new MC_Register_R10(object_type = MC_Register_R10, name_q = "r10", name_d = "r10d", name_w = "r10w", name_b = "r10b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-96], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R10
  mov rbx, MC_Register_R10[rip]
  mov [rax], rbx
  #     .name_q = "r10"
  lea rbx, .LABEL__string_131[rip] # "r10"
  mov [rax+8], rbx
  #     .name_d = "r10d"
  lea rbx, .LABEL__string_132[rip] # "r10d"
  mov [rax+16], rbx
  #     .name_w = "r10w"
  lea rbx, .LABEL__string_133[rip] # "r10w"
  mov [rax+24], rbx
  #     .name_b = "r10b"
  lea rbx, .LABEL__string_134[rip] # "r10b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  .loc 2 1082 34
  # $15.1: @MC_Register_R11 = new MC_Register_R11(object_type = MC_Register_R11, name_q = "r11", name_d = "r11d", name_w = "r11w", name_b = "r11b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-104], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R11
  mov rbx, MC_Register_R11[rip]
  mov [rax], rbx
  #     .name_q = "r11"
  lea rbx, .LABEL__string_135[rip] # "r11"
  mov [rax+8], rbx
  #     .name_d = "r11d"
  lea rbx, .LABEL__string_136[rip] # "r11d"
  mov [rax+16], rbx
  #     .name_w = "r11w"
  lea rbx, .LABEL__string_137[rip] # "r11w"
  mov [rax+24], rbx
  #     .name_b = "r11b"
  lea rbx, .LABEL__string_138[rip] # "r11b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  .loc 2 1083 34
  # $16.1: @MC_Register_R12 = new MC_Register_R12(object_type = MC_Register_R12, name_q = "r12", name_d = "r12d", name_w = "r12w", name_b = "r12b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-112], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R12
  mov rbx, MC_Register_R12[rip]
  mov [rax], rbx
  #     .name_q = "r12"
  lea rbx, .LABEL__string_139[rip] # "r12"
  mov [rax+8], rbx
  #     .name_d = "r12d"
  lea rbx, .LABEL__string_140[rip] # "r12d"
  mov [rax+16], rbx
  #     .name_w = "r12w"
  lea rbx, .LABEL__string_141[rip] # "r12w"
  mov [rax+24], rbx
  #     .name_b = "r12b"
  lea rbx, .LABEL__string_142[rip] # "r12b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  .loc 2 1084 34
  # $17.1: @MC_Register_R13 = new MC_Register_R13(object_type = MC_Register_R13, name_q = "r13", name_d = "r13d", name_w = "r13w", name_b = "r13b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-120], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R13
  mov rbx, MC_Register_R13[rip]
  mov [rax], rbx
  #     .name_q = "r13"
  lea rbx, .LABEL__string_143[rip] # "r13"
  mov [rax+8], rbx
  #     .name_d = "r13d"
  lea rbx, .LABEL__string_144[rip] # "r13d"
  mov [rax+16], rbx
  #     .name_w = "r13w"
  lea rbx, .LABEL__string_145[rip] # "r13w"
  mov [rax+24], rbx
  #     .name_b = "r13b"
  lea rbx, .LABEL__string_146[rip] # "r13b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  .loc 2 1085 34
  # $18.1: @MC_Register_R14 = new MC_Register_R14(object_type = MC_Register_R14, name_q = "r14", name_d = "r14d", name_w = "r14w", name_b = "r14b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-128], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R14
  mov rbx, MC_Register_R14[rip]
  mov [rax], rbx
  #     .name_q = "r14"
  lea rbx, .LABEL__string_147[rip] # "r14"
  mov [rax+8], rbx
  #     .name_d = "r14d"
  lea rbx, .LABEL__string_148[rip] # "r14d"
  mov [rax+16], rbx
  #     .name_w = "r14w"
  lea rbx, .LABEL__string_149[rip] # "r14w"
  mov [rax+24], rbx
  #     .name_b = "r14b"
  lea rbx, .LABEL__string_150[rip] # "r14b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  .loc 2 1086 34
  # $19.1: @MC_Register_R15 = new MC_Register_R15(object_type = MC_Register_R15, name_q = "r15", name_d = "r15d", name_w = "r15w", name_b = "r15b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-136], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R15
  mov rbx, MC_Register_R15[rip]
  mov [rax], rbx
  #     .name_q = "r15"
  lea rbx, .LABEL__string_151[rip] # "r15"
  mov [rax+8], rbx
  #     .name_d = "r15d"
  lea rbx, .LABEL__string_152[rip] # "r15d"
  mov [rax+16], rbx
  #     .name_w = "r15w"
  lea rbx, .LABEL__string_153[rip] # "r15w"
  mov [rax+24], rbx
  #     .name_b = "r15b"
  lea rbx, .LABEL__string_154[rip] # "r15b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  .loc 2 1090 22
  # $20.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-144], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  .loc 2 1094 12
  # $21.1: @MC_Generator = new MC_Generator(output_file_path = output_file_path.1, output_file = $3.1, output_debug_comments = true, register_rax = $4.1, register_rcx = $5.1, register_rdx = $6.1, register_rbx = $7.1, register_rsi = $8.1, register_rdi = $9.1, register_rsp = $10.1, register_rbp = $11.1, register_r8 = $12.1, register_r9 = $13.1, register_r10 = $14.1, register_r11 = $15.1, register_r12 = $16.1, register_r13 = $17.1, register_r14 = $18.1, register_r15 = $19.1, first_value = null, last_value = null, stack_frame_size = 0, strings = $20.1)
  mov [rbp-152], rax
  mov rdi, 177
  call malloc
  #     .output_file_path = output_file_path.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .output_file = $3.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .output_debug_comments = true
  mov BYTE PTR [rax+16], 1
  #     .register_rax = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+17], r14
  #     .register_rcx = $5.1
  mov r13, [rbp-32]
  mov QWORD PTR [rax+25], r13
  #     .register_rdx = $6.1
  mov r12, [rbp-40]
  mov QWORD PTR [rax+33], r12
  #     .register_rbx = $7.1
  mov r11, [rbp-48]
  mov QWORD PTR [rax+41], r11
  #     .register_rsi = $8.1
  mov r10, [rbp-56]
  mov QWORD PTR [rax+49], r10
  #     .register_rdi = $9.1
  mov r9, [rbp-64]
  mov QWORD PTR [rax+57], r9
  #     .register_rsp = $10.1
  mov r8, [rbp-72]
  mov QWORD PTR [rax+65], r8
  #     .register_rbp = $11.1
  mov rcx, [rbp-80]
  mov QWORD PTR [rax+73], rcx
  #     .register_r8 = $12.1
  mov rdx, [rbp-88]
  mov QWORD PTR [rax+81], rdx
  #     .register_r9 = $13.1
  mov rsi, [rbp-96]
  mov QWORD PTR [rax+89], rsi
  #     .register_r10 = $14.1
  mov rdi, [rbp-104]
  mov QWORD PTR [rax+97], rdi
  #     .register_r11 = $15.1
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+105], rbx
  #     .register_r12 = $16.1
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+113], rbx
  #     .register_r13 = $17.1
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+121], rbx
  #     .register_r14 = $18.1
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+129], rbx
  #     .register_r15 = $19.1
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+137], rbx
  #     .first_value = null
  mov QWORD PTR [rax+145], 0
  #     .last_value = null
  mov QWORD PTR [rax+153], 0
  #     .stack_frame_size = 0
  mov QWORD PTR [rax+161], 0
  #     .strings = $20.1
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+169], rbx
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: output_file_path.1
  # [live values]: $21.1:rax 
  .loc 2 1094 5
  # return($21.1)
  mov [rbp-8], rax
  jmp .LABEL__create_mc_generator_36__end
  # [discarded value]: $21.1
  # [live values]: 
.LABEL__create_mc_generator_36__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_generator_36__stack_frame_size: .word 160

  .loc 2 1101 1
  .text
reset_37:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_37__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_37__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__reset_37__2)
  mov [rbp-8], rdi
.LABEL__reset_37__2:
  .loc 2 1102 12
  # $1.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1102 12
  # $2.1: Boolean = $1.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__reset_37__3, .LABEL__reset_37__4)
  test r15b, r15b
  mov [rbp-9], r15b
  jz .LABEL__reset_37__4
.LABEL__reset_37__3:
  .loc 2 1103 18
  # value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1104 28
  # $4.1: @MC_Value = load_struct_member(value.1, next_value)
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx $4.1:r15 
  .loc 2 1104 9
  # store_struct_member(self.1, first_value, $4.1)
  mov QWORD PTR [rax+145], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1105 9
  # store_struct_member(value.1, prev_value, null)
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1106 9
  # store_struct_member(value.1, next_value, null)
  mov QWORD PTR [rbx+8], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1107 13
  # $5.1: @MC_Register = load_struct_member(value.1, register)
  mov r15, [rbx+32]
  # [discarded value]: value.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $5.1:r15 
  .loc 2 1107 13
  # $6.1: Boolean = $5.1 != null
  cmp r15, 0
  setne bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $6.1:rbx 
  # jump($6.1, .LABEL__reset_37__5, .LABEL__reset_37__2)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__reset_37__2
.LABEL__reset_37__5:
  .loc 2 1108 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-10] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__reset_37__4:
  .loc 2 1111 5
  # store_struct_member(self.1, last_value, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+153], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  .loc 2 1112 5
  # store_struct_member(self.1, stack_frame_size, 0)
  mov QWORD PTR [rax+161], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  # return()
  jmp .LABEL__reset_37__end
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_37__end:
  mov rsp, rbp
  pop rbp
  ret

reset_37__stack_frame_size: .word 16

  .loc 2 1115 1
  .text
find_unused_register_38:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR find_unused_register_38__stack_frame_size[rip]
  sub rsp, rax
.LABEL__find_unused_register_38__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1116 9
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1116 9
  # $2.1: Boolean = load_struct_member($1.1, is_reserved)
  mov bl, [rax+40]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 2 1116 9
  # $3.1: Boolean = $2.1 == false
  cmp bl, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  .loc 2 1116 9
  # $4.1: Boolean = $3.1
  mov [rbp-1], al
  # [discarded value]: $3.1
  # [live values]: self.1:rdi $4.1:rax 
  # jump($4.1, .LABEL__find_unused_register_38__2, .LABEL__find_unused_register_38__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__find_unused_register_38__3
.LABEL__find_unused_register_38__2:
  .loc 2 1116 51
  # $5.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $5.1:rbx 
  .loc 2 1116 51
  # $6.1: @MC_Value = load_struct_member($5.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $6.1:r15 
  .loc 2 1116 51
  # $7.1: Boolean = $6.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $7.1:rbx 
  .loc 2 1116 9
  # $4.2: Boolean = $7.1
  mov [rbp-10], bl
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:rbx:[rbp-1] 
  # jump(.LABEL__find_unused_register_38__3)
  mov [rbp-1], bl
.LABEL__find_unused_register_38__3:
  .loc 2 1116 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # jump($4.3, .LABEL__find_unused_register_38__4, .LABEL__find_unused_register_38__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__find_unused_register_38__5
.LABEL__find_unused_register_38__4:
  .loc 2 1117 16
  # $8.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $8.1:rbx 
  .loc 2 1117 9
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
.LABEL__find_unused_register_38__5:
  .loc 2 1119 9
  # $9.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $9.1:rbx 
  .loc 2 1119 9
  # $10.1: Boolean = load_struct_member($9.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $10.1:r15 
  .loc 2 1119 9
  # $11.1: Boolean = $10.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $11.1:rbx 
  .loc 2 1119 9
  # $12.1: Boolean = $11.1
  mov [rbp-10], bl
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:rbx 
  # jump($12.1, .LABEL__find_unused_register_38__7, .LABEL__find_unused_register_38__8)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__find_unused_register_38__8
.LABEL__find_unused_register_38__7:
  .loc 2 1119 51
  # $13.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $13.1:rbx 
  .loc 2 1119 51
  # $14.1: @MC_Value = load_struct_member($13.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $14.1:r15 
  .loc 2 1119 51
  # $15.1: Boolean = $14.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $15.1:rbx 
  .loc 2 1119 9
  # $12.2: Boolean = $15.1
  mov [rbp-11], bl
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:rbx:[rbp-10] 
  # jump(.LABEL__find_unused_register_38__8)
  mov [rbp-10], bl
.LABEL__find_unused_register_38__8:
  .loc 2 1119 9
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # jump($12.3, .LABEL__find_unused_register_38__9, .LABEL__find_unused_register_38__10)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__find_unused_register_38__10
.LABEL__find_unused_register_38__9:
  .loc 2 1120 16
  # $16.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $16.1:rbx 
  .loc 2 1120 9
  # return($16.1)
  mov rax, rbx
  mov [rbp-18], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
.LABEL__find_unused_register_38__10:
  .loc 2 1122 9
  # $17.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $17.1:rbx 
  .loc 2 1122 9
  # $18.1: Boolean = load_struct_member($17.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $18.1:r15 
  .loc 2 1122 9
  # $19.1: Boolean = $18.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $19.1:rbx 
  .loc 2 1122 9
  # $20.1: Boolean = $19.1
  mov [rbp-11], bl
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:rbx 
  # jump($20.1, .LABEL__find_unused_register_38__12, .LABEL__find_unused_register_38__13)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__find_unused_register_38__13
.LABEL__find_unused_register_38__12:
  .loc 2 1122 51
  # $21.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $21.1:rbx 
  .loc 2 1122 51
  # $22.1: @MC_Value = load_struct_member($21.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $22.1:r15 
  .loc 2 1122 51
  # $23.1: Boolean = $22.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $23.1:rbx 
  .loc 2 1122 9
  # $20.2: Boolean = $23.1
  mov [rbp-12], bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:rbx:[rbp-11] 
  # jump(.LABEL__find_unused_register_38__13)
  mov [rbp-11], bl
.LABEL__find_unused_register_38__13:
  .loc 2 1122 9
  # $20.3: Boolean = phi($20.1, $20.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # jump($20.3, .LABEL__find_unused_register_38__14, .LABEL__find_unused_register_38__15)
  mov al, [rbp-11]
  test al, al
  jz .LABEL__find_unused_register_38__15
.LABEL__find_unused_register_38__14:
  .loc 2 1123 16
  # $24.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $24.1:rbx 
  .loc 2 1123 9
  # return($24.1)
  mov rax, rbx
  mov [rbp-19], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
.LABEL__find_unused_register_38__15:
  .loc 2 1125 9
  # $25.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $25.1:rbx 
  .loc 2 1125 9
  # $26.1: Boolean = load_struct_member($25.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $26.1:r15 
  .loc 2 1125 9
  # $27.1: Boolean = $26.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $27.1:rbx 
  .loc 2 1125 9
  # $28.1: Boolean = $27.1
  mov [rbp-12], bl
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:rbx 
  # jump($28.1, .LABEL__find_unused_register_38__17, .LABEL__find_unused_register_38__18)
  test bl, bl
  mov [rbp-12], bl
  jz .LABEL__find_unused_register_38__18
.LABEL__find_unused_register_38__17:
  .loc 2 1125 51
  # $29.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $29.1:rbx 
  .loc 2 1125 51
  # $30.1: @MC_Value = load_struct_member($29.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $30.1:r15 
  .loc 2 1125 51
  # $31.1: Boolean = $30.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $31.1:rbx 
  .loc 2 1125 9
  # $28.2: Boolean = $31.1
  mov [rbp-13], bl
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:rbx:[rbp-12] 
  # jump(.LABEL__find_unused_register_38__18)
  mov [rbp-12], bl
.LABEL__find_unused_register_38__18:
  .loc 2 1125 9
  # $28.3: Boolean = phi($28.1, $28.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # jump($28.3, .LABEL__find_unused_register_38__19, .LABEL__find_unused_register_38__20)
  mov al, [rbp-12]
  test al, al
  jz .LABEL__find_unused_register_38__20
.LABEL__find_unused_register_38__19:
  .loc 2 1126 16
  # $32.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $32.1:rbx 
  .loc 2 1126 9
  # return($32.1)
  mov rax, rbx
  mov [rbp-20], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
.LABEL__find_unused_register_38__20:
  .loc 2 1128 9
  # $33.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $33.1:rbx 
  .loc 2 1128 9
  # $34.1: Boolean = load_struct_member($33.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $34.1:r15 
  .loc 2 1128 9
  # $35.1: Boolean = $34.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $35.1:rbx 
  .loc 2 1128 9
  # $36.1: Boolean = $35.1
  mov [rbp-13], bl
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:rbx 
  # jump($36.1, .LABEL__find_unused_register_38__22, .LABEL__find_unused_register_38__23)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__find_unused_register_38__23
.LABEL__find_unused_register_38__22:
  .loc 2 1128 51
  # $37.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $37.1:rbx 
  .loc 2 1128 51
  # $38.1: @MC_Value = load_struct_member($37.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $38.1:r15 
  .loc 2 1128 51
  # $39.1: Boolean = $38.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $38.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $39.1:rbx 
  .loc 2 1128 9
  # $36.2: Boolean = $39.1
  mov [rbp-14], bl
  # [discarded value]: $39.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:rbx:[rbp-13] 
  # jump(.LABEL__find_unused_register_38__23)
  mov [rbp-13], bl
.LABEL__find_unused_register_38__23:
  .loc 2 1128 9
  # $36.3: Boolean = phi($36.1, $36.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # jump($36.3, .LABEL__find_unused_register_38__24, .LABEL__find_unused_register_38__25)
  mov al, [rbp-13]
  test al, al
  jz .LABEL__find_unused_register_38__25
.LABEL__find_unused_register_38__24:
  .loc 2 1129 16
  # $40.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $40.1:rbx 
  .loc 2 1129 9
  # return($40.1)
  mov rax, rbx
  mov [rbp-21], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
.LABEL__find_unused_register_38__25:
  .loc 2 1131 9
  # $41.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $41.1:rbx 
  .loc 2 1131 9
  # $42.1: Boolean = load_struct_member($41.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $41.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $42.1:r15 
  .loc 2 1131 9
  # $43.1: Boolean = $42.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $42.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $43.1:rbx 
  .loc 2 1131 9
  # $44.1: Boolean = $43.1
  mov [rbp-14], bl
  # [discarded value]: $43.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:rbx 
  # jump($44.1, .LABEL__find_unused_register_38__27, .LABEL__find_unused_register_38__28)
  test bl, bl
  mov [rbp-14], bl
  jz .LABEL__find_unused_register_38__28
.LABEL__find_unused_register_38__27:
  .loc 2 1131 51
  # $45.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $45.1:rbx 
  .loc 2 1131 51
  # $46.1: @MC_Value = load_struct_member($45.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $46.1:r15 
  .loc 2 1131 51
  # $47.1: Boolean = $46.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $46.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $47.1:rbx 
  .loc 2 1131 9
  # $44.2: Boolean = $47.1
  mov [rbp-15], bl
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:rbx:[rbp-14] 
  # jump(.LABEL__find_unused_register_38__28)
  mov [rbp-14], bl
.LABEL__find_unused_register_38__28:
  .loc 2 1131 9
  # $44.3: Boolean = phi($44.1, $44.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # jump($44.3, .LABEL__find_unused_register_38__29, .LABEL__find_unused_register_38__30)
  mov al, [rbp-14]
  test al, al
  jz .LABEL__find_unused_register_38__30
.LABEL__find_unused_register_38__29:
  .loc 2 1132 16
  # $48.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $48.1:rbx 
  .loc 2 1132 9
  # return($48.1)
  mov rax, rbx
  mov [rbp-22], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
.LABEL__find_unused_register_38__30:
  .loc 2 1134 9
  # $49.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $49.1:rbx 
  .loc 2 1134 9
  # $50.1: Boolean = load_struct_member($49.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $50.1:r15 
  .loc 2 1134 9
  # $51.1: Boolean = $50.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $51.1:rbx 
  .loc 2 1134 9
  # $52.1: Boolean = $51.1
  mov [rbp-15], bl
  # [discarded value]: $51.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:rbx 
  # jump($52.1, .LABEL__find_unused_register_38__32, .LABEL__find_unused_register_38__33)
  test bl, bl
  mov [rbp-15], bl
  jz .LABEL__find_unused_register_38__33
.LABEL__find_unused_register_38__32:
  .loc 2 1134 51
  # $53.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $53.1:rbx 
  .loc 2 1134 51
  # $54.1: @MC_Value = load_struct_member($53.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $54.1:r15 
  .loc 2 1134 51
  # $55.1: Boolean = $54.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $55.1:rbx 
  .loc 2 1134 9
  # $52.2: Boolean = $55.1
  mov [rbp-16], bl
  # [discarded value]: $55.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:rbx:[rbp-15] 
  # jump(.LABEL__find_unused_register_38__33)
  mov [rbp-15], bl
.LABEL__find_unused_register_38__33:
  .loc 2 1134 9
  # $52.3: Boolean = phi($52.1, $52.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # jump($52.3, .LABEL__find_unused_register_38__34, .LABEL__find_unused_register_38__35)
  mov al, [rbp-15]
  test al, al
  jz .LABEL__find_unused_register_38__35
.LABEL__find_unused_register_38__34:
  .loc 2 1135 16
  # $56.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $56.1:rbx 
  .loc 2 1135 9
  # return($56.1)
  mov rax, rbx
  mov [rbp-23], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
.LABEL__find_unused_register_38__35:
  .loc 2 1137 9
  # $57.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $57.1:rbx 
  .loc 2 1137 9
  # $58.1: Boolean = load_struct_member($57.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $57.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $58.1:r15 
  .loc 2 1137 9
  # $59.1: Boolean = $58.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $58.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $59.1:rbx 
  .loc 2 1137 9
  # $60.1: Boolean = $59.1
  mov [rbp-16], bl
  # [discarded value]: $59.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:rbx 
  # jump($60.1, .LABEL__find_unused_register_38__37, .LABEL__find_unused_register_38__38)
  test bl, bl
  mov [rbp-16], bl
  jz .LABEL__find_unused_register_38__38
.LABEL__find_unused_register_38__37:
  .loc 2 1137 51
  # $61.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $61.1:rbx 
  .loc 2 1137 51
  # $62.1: @MC_Value = load_struct_member($61.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $61.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $62.1:r15 
  .loc 2 1137 51
  # $63.1: Boolean = $62.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $62.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $63.1:rbx 
  .loc 2 1137 9
  # $60.2: Boolean = $63.1
  mov [rbp-17], bl
  # [discarded value]: $63.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:rbx:[rbp-16] 
  # jump(.LABEL__find_unused_register_38__38)
  mov [rbp-16], bl
.LABEL__find_unused_register_38__38:
  .loc 2 1137 9
  # $60.3: Boolean = phi($60.1, $60.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # jump($60.3, .LABEL__find_unused_register_38__39, .LABEL__find_unused_register_38__40)
  mov al, [rbp-16]
  test al, al
  jz .LABEL__find_unused_register_38__40
.LABEL__find_unused_register_38__39:
  .loc 2 1138 16
  # $64.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $64.1:rbx 
  .loc 2 1138 9
  # return($64.1)
  mov rax, rbx
  mov [rbp-24], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
.LABEL__find_unused_register_38__40:
  .loc 2 1140 9
  # $65.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $65.1:rbx 
  .loc 2 1140 9
  # $66.1: Boolean = load_struct_member($65.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $65.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $66.1:r15 
  .loc 2 1140 9
  # $67.1: Boolean = $66.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $66.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $67.1:rbx 
  .loc 2 1140 9
  # $68.1: Boolean = $67.1
  mov [rbp-17], bl
  # [discarded value]: $67.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:rbx 
  # jump($68.1, .LABEL__find_unused_register_38__42, .LABEL__find_unused_register_38__43)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__find_unused_register_38__43
.LABEL__find_unused_register_38__42:
  .loc 2 1140 50
  # $69.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $69.1:rbx 
  .loc 2 1140 50
  # $70.1: @MC_Value = load_struct_member($69.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $69.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $70.1:r15 
  .loc 2 1140 50
  # $71.1: Boolean = $70.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $70.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $71.1:rbx 
  .loc 2 1140 9
  # $68.2: Boolean = $71.1
  mov [rbp-18], bl
  # [discarded value]: $71.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:rbx:[rbp-17] 
  # jump(.LABEL__find_unused_register_38__43)
  mov [rbp-17], bl
.LABEL__find_unused_register_38__43:
  .loc 2 1140 9
  # $68.3: Boolean = phi($68.1, $68.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # jump($68.3, .LABEL__find_unused_register_38__44, .LABEL__find_unused_register_38__45)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__find_unused_register_38__45
.LABEL__find_unused_register_38__44:
  .loc 2 1141 16
  # $72.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $72.1:rbx 
  .loc 2 1141 9
  # return($72.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
.LABEL__find_unused_register_38__45:
  .loc 2 1143 9
  # $73.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $73.1:rbx 
  .loc 2 1143 9
  # $74.1: Boolean = load_struct_member($73.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $73.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $74.1:r15 
  .loc 2 1143 9
  # $75.1: Boolean = $74.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $74.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $75.1:rbx 
  .loc 2 1143 9
  # $76.1: Boolean = $75.1
  mov [rbp-18], bl
  # [discarded value]: $75.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:rbx 
  # jump($76.1, .LABEL__find_unused_register_38__47, .LABEL__find_unused_register_38__48)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__find_unused_register_38__48
.LABEL__find_unused_register_38__47:
  .loc 2 1143 50
  # $77.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $77.1:rbx 
  .loc 2 1143 50
  # $78.1: @MC_Value = load_struct_member($77.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $77.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $78.1:r15 
  .loc 2 1143 50
  # $79.1: Boolean = $78.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $78.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $79.1:rbx 
  .loc 2 1143 9
  # $76.2: Boolean = $79.1
  mov [rbp-19], bl
  # [discarded value]: $79.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:rbx:[rbp-18] 
  # jump(.LABEL__find_unused_register_38__48)
  mov [rbp-18], bl
.LABEL__find_unused_register_38__48:
  .loc 2 1143 9
  # $76.3: Boolean = phi($76.1, $76.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # jump($76.3, .LABEL__find_unused_register_38__49, .LABEL__find_unused_register_38__50)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__find_unused_register_38__50
.LABEL__find_unused_register_38__49:
  .loc 2 1144 16
  # $80.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $80.1:rbx 
  .loc 2 1144 9
  # return($80.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
.LABEL__find_unused_register_38__50:
  .loc 2 1146 9
  # $81.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $81.1:rbx 
  .loc 2 1146 9
  # $82.1: Boolean = load_struct_member($81.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $81.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $82.1:r15 
  .loc 2 1146 9
  # $83.1: Boolean = $82.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $82.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $83.1:rbx 
  .loc 2 1146 9
  # $84.1: Boolean = $83.1
  mov [rbp-19], bl
  # [discarded value]: $83.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:rbx 
  # jump($84.1, .LABEL__find_unused_register_38__52, .LABEL__find_unused_register_38__53)
  test bl, bl
  mov [rbp-19], bl
  jz .LABEL__find_unused_register_38__53
.LABEL__find_unused_register_38__52:
  .loc 2 1146 51
  # $85.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $85.1:rbx 
  .loc 2 1146 51
  # $86.1: @MC_Value = load_struct_member($85.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $85.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $86.1:r15 
  .loc 2 1146 51
  # $87.1: Boolean = $86.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $87.1:rbx 
  .loc 2 1146 9
  # $84.2: Boolean = $87.1
  mov [rbp-20], bl
  # [discarded value]: $87.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:rbx:[rbp-19] 
  # jump(.LABEL__find_unused_register_38__53)
  mov [rbp-19], bl
.LABEL__find_unused_register_38__53:
  .loc 2 1146 9
  # $84.3: Boolean = phi($84.1, $84.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # jump($84.3, .LABEL__find_unused_register_38__54, .LABEL__find_unused_register_38__55)
  mov al, [rbp-19]
  test al, al
  jz .LABEL__find_unused_register_38__55
.LABEL__find_unused_register_38__54:
  .loc 2 1147 16
  # $88.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $88.1:rbx 
  .loc 2 1147 9
  # return($88.1)
  mov rax, rbx
  mov [rbp-27], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
.LABEL__find_unused_register_38__55:
  .loc 2 1149 9
  # $89.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $89.1:rbx 
  .loc 2 1149 9
  # $90.1: Boolean = load_struct_member($89.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $89.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $90.1:r15 
  .loc 2 1149 9
  # $91.1: Boolean = $90.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $90.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $91.1:rbx 
  .loc 2 1149 9
  # $92.1: Boolean = $91.1
  mov [rbp-20], bl
  # [discarded value]: $91.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:rbx 
  # jump($92.1, .LABEL__find_unused_register_38__57, .LABEL__find_unused_register_38__58)
  test bl, bl
  mov [rbp-20], bl
  jz .LABEL__find_unused_register_38__58
.LABEL__find_unused_register_38__57:
  .loc 2 1149 51
  # $93.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $93.1:rbx 
  .loc 2 1149 51
  # $94.1: @MC_Value = load_struct_member($93.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $93.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $94.1:r15 
  .loc 2 1149 51
  # $95.1: Boolean = $94.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $94.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $95.1:rbx 
  .loc 2 1149 9
  # $92.2: Boolean = $95.1
  mov [rbp-21], bl
  # [discarded value]: $95.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:rbx:[rbp-20] 
  # jump(.LABEL__find_unused_register_38__58)
  mov [rbp-20], bl
.LABEL__find_unused_register_38__58:
  .loc 2 1149 9
  # $92.3: Boolean = phi($92.1, $92.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # jump($92.3, .LABEL__find_unused_register_38__59, .LABEL__find_unused_register_38__60)
  mov al, [rbp-20]
  test al, al
  jz .LABEL__find_unused_register_38__60
.LABEL__find_unused_register_38__59:
  .loc 2 1150 16
  # $96.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $96.1:rbx 
  .loc 2 1150 9
  # return($96.1)
  mov rax, rbx
  mov [rbp-28], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
.LABEL__find_unused_register_38__60:
  .loc 2 1152 9
  # $97.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $97.1:rbx 
  .loc 2 1152 9
  # $98.1: Boolean = load_struct_member($97.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $97.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $98.1:r15 
  .loc 2 1152 9
  # $99.1: Boolean = $98.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $98.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $99.1:rbx 
  .loc 2 1152 9
  # $100.1: Boolean = $99.1
  mov [rbp-21], bl
  # [discarded value]: $99.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:rbx 
  # jump($100.1, .LABEL__find_unused_register_38__62, .LABEL__find_unused_register_38__63)
  test bl, bl
  mov [rbp-21], bl
  jz .LABEL__find_unused_register_38__63
.LABEL__find_unused_register_38__62:
  .loc 2 1152 51
  # $101.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $101.1:rbx 
  .loc 2 1152 51
  # $102.1: @MC_Value = load_struct_member($101.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $101.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $102.1:r15 
  .loc 2 1152 51
  # $103.1: Boolean = $102.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $102.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $103.1:rbx 
  .loc 2 1152 9
  # $100.2: Boolean = $103.1
  mov [rbp-22], bl
  # [discarded value]: $103.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:rbx:[rbp-21] 
  # jump(.LABEL__find_unused_register_38__63)
  mov [rbp-21], bl
.LABEL__find_unused_register_38__63:
  .loc 2 1152 9
  # $100.3: Boolean = phi($100.1, $100.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # jump($100.3, .LABEL__find_unused_register_38__64, .LABEL__find_unused_register_38__65)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__find_unused_register_38__65
.LABEL__find_unused_register_38__64:
  .loc 2 1153 16
  # $104.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $104.1:rbx 
  .loc 2 1153 9
  # return($104.1)
  mov rax, rbx
  mov [rbp-29], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
.LABEL__find_unused_register_38__65:
  .loc 2 1155 9
  # $105.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $105.1:rbx 
  .loc 2 1155 9
  # $106.1: Boolean = load_struct_member($105.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $105.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $106.1:r15 
  .loc 2 1155 9
  # $107.1: Boolean = $106.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $106.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $107.1:rbx 
  .loc 2 1155 9
  # $108.1: Boolean = $107.1
  mov [rbp-22], bl
  # [discarded value]: $107.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:rbx 
  # jump($108.1, .LABEL__find_unused_register_38__67, .LABEL__find_unused_register_38__68)
  test bl, bl
  mov [rbp-22], bl
  jz .LABEL__find_unused_register_38__68
.LABEL__find_unused_register_38__67:
  .loc 2 1155 51
  # $109.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $109.1:rbx 
  .loc 2 1155 51
  # $110.1: @MC_Value = load_struct_member($109.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $109.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $110.1:r15 
  .loc 2 1155 51
  # $111.1: Boolean = $110.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $110.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $111.1:rbx 
  .loc 2 1155 9
  # $108.2: Boolean = $111.1
  mov [rbp-23], bl
  # [discarded value]: $111.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:rbx:[rbp-22] 
  # jump(.LABEL__find_unused_register_38__68)
  mov [rbp-22], bl
.LABEL__find_unused_register_38__68:
  .loc 2 1155 9
  # $108.3: Boolean = phi($108.1, $108.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # jump($108.3, .LABEL__find_unused_register_38__69, .LABEL__find_unused_register_38__70)
  mov al, [rbp-22]
  test al, al
  jz .LABEL__find_unused_register_38__70
.LABEL__find_unused_register_38__69:
  .loc 2 1156 16
  # $112.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $112.1:rbx 
  .loc 2 1156 9
  # return($112.1)
  mov rax, rbx
  mov [rbp-30], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
.LABEL__find_unused_register_38__70:
  .loc 2 1158 9
  # $113.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $113.1:rbx 
  .loc 2 1158 9
  # $114.1: Boolean = load_struct_member($113.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $113.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $114.1:r15 
  .loc 2 1158 9
  # $115.1: Boolean = $114.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $114.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $115.1:rbx 
  .loc 2 1158 9
  # $116.1: Boolean = $115.1
  mov [rbp-23], bl
  # [discarded value]: $115.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:rbx 
  # jump($116.1, .LABEL__find_unused_register_38__72, .LABEL__find_unused_register_38__73)
  test bl, bl
  mov [rbp-23], bl
  jz .LABEL__find_unused_register_38__73
.LABEL__find_unused_register_38__72:
  .loc 2 1158 51
  # $117.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $117.1:rbx 
  .loc 2 1158 51
  # $118.1: @MC_Value = load_struct_member($117.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $117.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 
  .loc 2 1158 78
  # $119.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 $119.1:rbx 
  .loc 2 1158 78
  # $120.1: @MC_Value = load_struct_member($119.1, loaded_value)
  mov r14, [rbx+49]
  # [discarded value]: $119.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 $120.1:r14 
  .loc 2 1158 51
  # $121.1: Boolean = $118.1 == $120.1
  cmp r15, r14
  sete bl
  # [discarded value]: $120.1
  # [discarded value]: $118.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $121.1:rbx 
  .loc 2 1158 9
  # $116.2: Boolean = $121.1
  mov [rbp-24], bl
  # [discarded value]: $121.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:rbx:[rbp-23] 
  # jump(.LABEL__find_unused_register_38__73)
  mov [rbp-23], bl
.LABEL__find_unused_register_38__73:
  .loc 2 1158 9
  # $116.3: Boolean = phi($116.1, $116.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  # jump($116.3, .LABEL__find_unused_register_38__74, .LABEL__find_unused_register_38__75)
  mov al, [rbp-23]
  test al, al
  jz .LABEL__find_unused_register_38__75
.LABEL__find_unused_register_38__74:
  .loc 2 1159 31
  # $122.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] $122.1:rbx 
  .loc 2 1159 9
  # call(release_register_47, self.1, $122.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  .loc 2 1160 16
  # $123.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] $123.1:rbx 
  .loc 2 1160 9
  # return($123.1)
  mov rax, rbx
  mov [rbp-31], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
.LABEL__find_unused_register_38__75:
  .loc 2 1162 5
  # call(abort_35, self.1, "All registered are used")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_155[rip] # "All registered are used"
  call abort_35
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  # [discarded value]: $116.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] 
  # [discarded value]: $116.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] 
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # [discarded value]: $108.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [discarded value]: $108.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # [discarded value]: $100.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [discarded value]: $100.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # [discarded value]: $92.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [discarded value]: $92.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # [discarded value]: $84.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [discarded value]: $84.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # [discarded value]: $76.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [discarded value]: $76.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # [discarded value]: $68.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [discarded value]: $68.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # [discarded value]: $60.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [discarded value]: $60.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # [discarded value]: $52.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # [discarded value]: $44.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [discarded value]: $44.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # [discarded value]: $36.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [discarded value]: $36.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # [discarded value]: $28.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # [discarded value]: $20.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__find_unused_register_38__end:
  mov rsp, rbp
  pop rbp
  ret

find_unused_register_38__stack_frame_size: .word 32

  .loc 2 1165 1
  .text
create_mc_value_39:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_value_39__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_value_39__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_instruction.1: @IR_Instruction = load_variable(ir_instruction)
  # [live values]: self.1:rdi ir_instruction.1:rsi 
  .loc 2 1167 22
  # $1.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rdi+153]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax 
  .loc 2 1168 29
  # $2.1: @IR_Variable_Value = load_struct_member(ir_instruction.1, result_value)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax $2.1:rbx 
  .loc 2 1166 17
  # mc_value.1: @MC_Value = new MC_Value(prev_value = $1.1, ir_variable_value = $2.1, ir_instruction = ir_instruction.1, next_value = null, register = null, address = null)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 48
  call malloc
  #     .prev_value = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .next_value = null
  mov QWORD PTR [rax+8], 0
  #     .ir_instruction = ir_instruction.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .ir_variable_value = $2.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  #     .register = null
  mov QWORD PTR [rax+32], 0
  #     .address = null
  mov QWORD PTR [rax+40], 0
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-32] mc_value.1:rax 
  .loc 2 1171 9
  # $4.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rbp-32]
  mov r15, [rbx+145]
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $4.1:r15 
  .loc 2 1171 9
  # $5.1: Boolean = $4.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $5.1:r14 
  # jump($5.1, .LABEL__create_mc_value_39__2, .LABEL__create_mc_value_39__4)
  test r14b, r14b
  mov [rbp-40], rax
  mov [rbp-41], r14b
  jz .LABEL__create_mc_value_39__4
.LABEL__create_mc_value_39__2:
  .loc 2 1172 9
  # store_struct_member(self.1, first_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+145], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_39__3)
.LABEL__create_mc_value_39__3:
  .loc 2 1176 5
  # store_struct_member(self.1, last_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+153], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # return()
  jmp .LABEL__create_mc_value_39__end
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
.LABEL__create_mc_value_39__4:
  .loc 2 1174 9
  # $6.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rbp-32]
  mov rbx, [rax+153]
  # [live values]: self.1:rax:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] $6.1:rbx 
  .loc 2 1174 9
  # store_struct_member($6.1, next_value, mc_value.1)
  mov r15, [rbp-40]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-32] mc_value.1:r15:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_39__3)
  jmp .LABEL__create_mc_value_39__3
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_mc_value_39__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_value_39__stack_frame_size: .word 48

  .loc 2 1179 1
  .text
map_variable_value_40:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_40__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_40__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx 
  .loc 2 1180 9
  # $1.1: Boolean = address.1 == null
  cmp rdx, 0
  sete al
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx $1.1:rax 
  # jump($1.1, .LABEL__map_variable_value_40__2, .LABEL__map_variable_value_40__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__map_variable_value_40__3
.LABEL__map_variable_value_40__2:
  .loc 2 1181 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__map_variable_value_40__3:
  .loc 2 1183 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-25]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__map_variable_value_40__4)
  mov [rbp-33], rbx
.LABEL__map_variable_value_40__4:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.7)
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  .loc 2 1184 12
  # $3.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_40__5, .LABEL__map_variable_value_40__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_40__6
.LABEL__map_variable_value_40__5:
  .loc 2 1185 13
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $4.1:rbx 
  .loc 2 1185 13
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 
  .loc 2 1185 52
  # $6.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-17]
  mov r14, [rbx+48]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 $6.1:r14 
  .loc 2 1185 13
  # $7.1: Boolean = $5.1 == $6.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:r13 
  # jump($7.1, .LABEL__map_variable_value_40__7, .LABEL__map_variable_value_40__8)
  test r13b, r13b
  mov [rbp-35], r13b
  jz .LABEL__map_variable_value_40__8
.LABEL__map_variable_value_40__7:
  .loc 2 1186 17
  # $8.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-33]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $8.1:rbx 
  .loc 2 1186 17
  # $9.1: Boolean = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:r15 
  # jump($9.1, .LABEL__map_variable_value_40__9, .LABEL__map_variable_value_40__10)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__map_variable_value_40__10
.LABEL__map_variable_value_40__9:
  .loc 2 1187 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
.LABEL__map_variable_value_40__10:
  .loc 2 1189 13
  # store_struct_member(mc_value.2, address, address.1)
  mov rax, [rbp-33]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:rbx:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # jump(.LABEL__map_variable_value_40__8)
.LABEL__map_variable_value_40__8:
  .loc 2 1191 20
  # mc_value.7: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:rbx:[rbp-33] 
  # jump(.LABEL__map_variable_value_40__4)
  mov [rbp-33], rbx
  jmp .LABEL__map_variable_value_40__4
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:[rbp-33] 
  # [discarded value]: mc_value.7
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__map_variable_value_40__6:
  # return()
  jmp .LABEL__map_variable_value_40__end
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] 
  # [discarded value]: address.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_40__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_40__stack_frame_size: .word 48

  .loc 2 1195 1
  .text
map_variable_value_41:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_41__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_41__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx 
  .loc 2 1196 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx mc_value.1:rax 
  # jump(.LABEL__map_variable_value_41__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__map_variable_value_41__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.8)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1197 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $2.1:rax 
  .loc 2 1197 12
  # $3.1: Boolean = $2.1
  mov [rbp-33], al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_41__5, .LABEL__map_variable_value_41__6)
  test al, al
  mov [rbp-33], al
  jz .LABEL__map_variable_value_41__6
.LABEL__map_variable_value_41__5:
  .loc 2 1197 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 1197 32
  # $5.1: Boolean = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-24]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $5.1:r15 
  .loc 2 1197 12
  # $3.2: Boolean = $5.1
  mov [rbp-34], r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:r15:[rbp-33] 
  # jump(.LABEL__map_variable_value_41__6)
  mov [rbp-33], r15b
.LABEL__map_variable_value_41__6:
  .loc 2 1197 12
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__map_variable_value_41__3, .LABEL__map_variable_value_41__4)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__map_variable_value_41__4
.LABEL__map_variable_value_41__3:
  .loc 2 1198 13
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $6.1:rbx $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1198 13
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1198 52
  # $8.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-24]
  mov r14, [rbx+48]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $8.1:r14 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1198 13
  # $9.1: Boolean = $7.1 == $8.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $9.1:r13 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1198 13
  # $10.1: Boolean = $9.1
  mov [rbp-34], r13b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:r13 $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($10.1, .LABEL__map_variable_value_41__7, .LABEL__map_variable_value_41__8)
  test r13b, r13b
  mov [rbp-34], r13b
  jz .LABEL__map_variable_value_41__8
.LABEL__map_variable_value_41__7:
  .loc 2 1198 82
  # $11.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $11.1:rbx 
  .loc 2 1198 82
  # $12.1: Boolean = $11.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $12.1:r15 
  .loc 2 1198 13
  # $10.2: Boolean = $12.1
  mov [rbp-35], r15b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:r15:[rbp-34] 
  # jump(.LABEL__map_variable_value_41__8)
  mov [rbp-34], r15b
.LABEL__map_variable_value_41__8:
  .loc 2 1198 13
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, .LABEL__map_variable_value_41__9, .LABEL__map_variable_value_41__10)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__map_variable_value_41__10
.LABEL__map_variable_value_41__9:
  .loc 2 1199 35
  # $13.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] $13.1:rbx 
  .loc 2 1199 13
  # call(release_register_47, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump(.LABEL__map_variable_value_41__10)
.LABEL__map_variable_value_41__10:
  .loc 2 1201 20
  # mc_value.8: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:rbx:[rbp-8] 
  # jump(.LABEL__map_variable_value_41__2)
  mov [rbp-8], rbx
  jmp .LABEL__map_variable_value_41__2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:[rbp-8] 
  # [discarded value]: mc_value.8
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_41__4:
  .loc 2 1203 9
  # $15.1: Boolean = mc_value.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:rax $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($15.1, .LABEL__map_variable_value_41__11, .LABEL__map_variable_value_41__12)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_41__12
.LABEL__map_variable_value_41__11:
  .loc 2 1204 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_41__12:
  .loc 2 1206 9
  # $16.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rbp-16]
  mov rbx, [rax+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $16.1:rbx 
  .loc 2 1206 9
  # $17.1: Boolean = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:r15 
  # jump($17.1, .LABEL__map_variable_value_41__13, .LABEL__map_variable_value_41__14)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__map_variable_value_41__14
.LABEL__map_variable_value_41__13:
  .loc 2 1207 20
  # $18.1: @String = call(clone_345, "Register ")
  lea rdi, .LABEL__string_156[rip] # "Register "
  call clone_345
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax 
  .loc 2 1207 46
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax $19.1:r15 
  .loc 2 1207 20
  # $20.1: @String = call(append_354, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $20.1:rax 
  .loc 2 1207 20
  # $21.1: @String = call(append_354, $20.1, " already mapped to variable: ")
  mov rdi, rax
  lea rsi, .LABEL__string_157[rip] # " already mapped to variable: "
  call append_354
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax 
  .loc 2 1207 110
  # $22.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $22.1:r15 
  .loc 2 1207 110
  # $23.1: @IR_Variable_Value = load_struct_member($22.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $23.1:r14 
  .loc 2 1207 110
  # $24.1: @IR_Variable = load_struct_member($23.1, variable)
  mov r15, [r14+48]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $24.1:r15 
  .loc 2 1207 110
  # $25.1: @String = load_struct_member($24.1, name)
  mov r14, [r15+16]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $25.1:r14 
  .loc 2 1207 20
  # $26.1: @String = call(append_354, $21.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $26.1:rax 
  .loc 2 1207 20
  # $27.1: @String = call(append_352, $26.1, '.')
  mov rdi, rax
  mov sil, 46
  call append_352
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax 
  .loc 2 1207 177
  # $28.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $28.1:r15 
  .loc 2 1207 177
  # $29.1: @IR_Variable_Value = load_struct_member($28.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $29.1:r14 
  .loc 2 1207 177
  # $30.1: Int = load_struct_member($29.1, version)
  mov r15, [r14+56]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $30.1:r15 
  .loc 2 1207 20
  # $31.1: @String = call(append_353, $27.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call append_353
  # [discarded value]: $30.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $31.1:rax 
  .loc 2 1207 9
  # call(abort_35, self.1, $31.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_35
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
.LABEL__map_variable_value_41__14:
  .loc 2 1209 5
  # store_struct_member(mc_value.2, register, register.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1210 5
  # store_struct_member(register.1, value, mc_value.2)
  mov QWORD PTR [rbx+41], rax
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1211 5
  # return(mc_value.2)
  jmp .LABEL__map_variable_value_41__end
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_41__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_41__stack_frame_size: .word 48

  .loc 2 1214 1
  .text
get_value_42:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_42__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_42__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  .loc 2 1215 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [discarded value]: self.1
  # [live values]: ir_variable_value.1:rsi mc_value.1:rax 
  # jump(.LABEL__get_value_42__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_value_42__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1216 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $2.1:rax 
  .loc 2 1216 12
  # $3.1: Boolean = $2.1
  mov [rbp-17], al
  # [discarded value]: $2.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_value_42__5, .LABEL__get_value_42__6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_value_42__6
.LABEL__get_value_42__5:
  .loc 2 1216 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $4.1:rbx 
  .loc 2 1216 32
  # $5.1: Boolean = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-16]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $5.1:r15 
  .loc 2 1216 12
  # $3.2: Boolean = $5.1
  mov [rbp-18], r15b
  # [discarded value]: $5.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $3.2:r15:[rbp-17] 
  # jump(.LABEL__get_value_42__6)
  mov [rbp-17], r15b
.LABEL__get_value_42__6:
  .loc 2 1216 12
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__get_value_42__3, .LABEL__get_value_42__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__get_value_42__4
.LABEL__get_value_42__3:
  .loc 2 1217 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:rbx:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump(.LABEL__get_value_42__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_value_42__2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
.LABEL__get_value_42__4:
  .loc 2 1219 5
  # return(mc_value.2)
  mov rax, [rbp-8]
  jmp .LABEL__get_value_42__end
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_variable_value.1
  # [live values]: 
.LABEL__get_value_42__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_42__stack_frame_size: .word 32

  .loc 2 1222 1
  .text
spill_local_variable_43:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_local_variable_43__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_local_variable_43__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1223 46
  # $1.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  .loc 2 1223 46
  # $2.1: @IR_Type = load_struct_member($1.1, type)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx 
  .loc 2 1223 27
  # variable_type_size.1: Int = call(get_type_size_56, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_type_size_56
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:rax 
  .loc 2 1224 9
  # $4.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:rax $4.1:r15 
  .loc 2 1224 9
  # $5.1: Boolean = $4.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:rax $5.1:r14 
  # jump($5.1, .LABEL__spill_local_variable_43__2, .LABEL__spill_local_variable_43__3)
  test r14b, r14b
  mov [rbp-24], rax
  mov [rbp-25], r14b
  jz .LABEL__spill_local_variable_43__3
.LABEL__spill_local_variable_43__2:
  .loc 2 1225 33
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] mc_value.1:rax:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 2 1225 61
  # $7.1: @MC_Local_Variable_Address = call(create_local_variable_address_44, self.1, variable_type_size.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov [rbp-33], rbx
  call create_local_variable_address_44
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $6.1:[rbp-33] $7.1:rax 
  .loc 2 1225 9
  # call(map_variable_value_40, self.1, $6.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-33]
  mov rdx, rax
  call map_variable_value_40
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__spill_local_variable_43__3)
.LABEL__spill_local_variable_43__3:
  .loc 2 1227 9
  # $8.1: Boolean = variable_type_size.1 == 8
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__spill_local_variable_43__4, .LABEL__spill_local_variable_43__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__spill_local_variable_43__6
.LABEL__spill_local_variable_43__4:
  .loc 2 1228 9
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $39.1:rbx 
  .loc 2 1228 9
  # $40.1: @FILE = call(write_337, $39.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $40.1:rax 
  .loc 2 1228 48
  # $41.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $40.1:rax $41.1:r15 
  .loc 2 1228 9
  # $42.1: @FILE = call(write_55, $40.1, $41.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $42.1:rax 
  .loc 2 1228 9
  # $43.1: @FILE = call(write_337, $42.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax 
  .loc 2 1228 84
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax $44.1:r15 
  .loc 2 1228 84
  # $45.1: @String = load_struct_member($44.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax $45.1:r14 
  .loc 2 1228 9
  # $46.1: @FILE = call(write_337, $43.1, $45.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $45.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $46.1:rax 
  .loc 2 1228 9
  # $47.1: @FILE = call(end_line_340, $46.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # jump(.LABEL__spill_local_variable_43__5)
.LABEL__spill_local_variable_43__5:
  # return()
  jmp .LABEL__spill_local_variable_43__end
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
.LABEL__spill_local_variable_43__6:
  .loc 2 1229 16
  # $9.1: Boolean = variable_type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:rax 
  # jump($9.1, .LABEL__spill_local_variable_43__7, .LABEL__spill_local_variable_43__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__spill_local_variable_43__9
.LABEL__spill_local_variable_43__7:
  .loc 2 1230 9
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $30.1:rbx 
  .loc 2 1230 9
  # $31.1: @FILE = call(write_337, $30.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $31.1:rax 
  .loc 2 1230 48
  # $32.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $31.1:rax $32.1:r15 
  .loc 2 1230 9
  # $33.1: @FILE = call(write_55, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $33.1:rax 
  .loc 2 1230 9
  # $34.1: @FILE = call(write_337, $33.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax 
  .loc 2 1230 84
  # $35.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax $35.1:r15 
  .loc 2 1230 84
  # $36.1: @String = load_struct_member($35.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax $36.1:r14 
  .loc 2 1230 9
  # $37.1: @FILE = call(write_337, $34.1, $36.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $37.1:rax 
  .loc 2 1230 9
  # $38.1: @FILE = call(end_line_340, $37.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
.LABEL__spill_local_variable_43__9:
  .loc 2 1231 16
  # $10.1: Boolean = variable_type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:rax 
  # jump($10.1, .LABEL__spill_local_variable_43__10, .LABEL__spill_local_variable_43__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__spill_local_variable_43__12
.LABEL__spill_local_variable_43__10:
  .loc 2 1232 9
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $21.1:rbx 
  .loc 2 1232 9
  # $22.1: @FILE = call(write_337, $21.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $22.1:rax 
  .loc 2 1232 48
  # $23.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $22.1:rax $23.1:r15 
  .loc 2 1232 9
  # $24.1: @FILE = call(write_55, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $24.1:rax 
  .loc 2 1232 9
  # $25.1: @FILE = call(write_337, $24.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax 
  .loc 2 1232 84
  # $26.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax $26.1:r15 
  .loc 2 1232 84
  # $27.1: @String = load_struct_member($26.1, name_w)
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax $27.1:r14 
  .loc 2 1232 9
  # $28.1: @FILE = call(write_337, $25.1, $27.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $27.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $28.1:rax 
  .loc 2 1232 9
  # $29.1: @FILE = call(end_line_340, $28.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
.LABEL__spill_local_variable_43__12:
  .loc 2 1233 16
  # $11.1: Boolean = variable_type_size.1 == 1
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__spill_local_variable_43__13, .LABEL__spill_local_variable_43__5)
  test al, al
  mov [rbp-29], al
  jz .LABEL__spill_local_variable_43__5
.LABEL__spill_local_variable_43__13:
  .loc 2 1234 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $12.1:rbx 
  .loc 2 1234 9
  # $13.1: @FILE = call(write_337, $12.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  mov "
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $13.1:rax 
  .loc 2 1234 48
  # $14.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $13.1:rax $14.1:r15 
  .loc 2 1234 9
  # $15.1: @FILE = call(write_55, $13.1, $14.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $15.1:rax 
  .loc 2 1234 9
  # $16.1: @FILE = call(write_337, $15.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax 
  .loc 2 1234 84
  # $17.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax $17.1:r15 
  .loc 2 1234 84
  # $18.1: @String = load_struct_member($17.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax $18.1:r14 
  .loc 2 1234 9
  # $19.1: @FILE = call(write_337, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $19.1:rax 
  .loc 2 1234 9
  # $20.1: @FILE = call(end_line_340, $19.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] 
  # [discarded value]: variable_type_size.1
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__spill_local_variable_43__end:
  mov rsp, rbp
  pop rbp
  ret

spill_local_variable_43__stack_frame_size: .word 48

  .loc 2 1238 1
  .text
create_local_variable_address_44:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_local_variable_address_44__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_local_variable_address_44__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_type_size.1: Int = load_variable(variable_type_size)
  # [live values]: self.1:rdi variable_type_size.1:rsi 
  .loc 2 1239 5
  # offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax 
  .loc 2 1240 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rdi+145]
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax mc_value.1:rbx 
  # jump(.LABEL__create_local_variable_address_44__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__create_local_variable_address_44__2:
  # offset.8: Int = phi(offset.1, offset.9)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1241 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__create_local_variable_address_44__3, .LABEL__create_local_variable_address_44__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_local_variable_address_44__4
.LABEL__create_local_variable_address_44__3:
  .loc 2 1242 29
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx 
  .loc 2 1243 13
  # $4.1: Boolean = mc_value_address.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx $4.1:r15 
  .loc 2 1243 13
  # $5.1: Boolean = $4.1
  mov [rbp-34], r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx $5.1:r15 
  # jump($5.1, .LABEL__create_local_variable_address_44__5, .LABEL__create_local_variable_address_44__6)
  test r15b, r15b
  mov [rbp-41], rbx
  mov [rbp-42], r15b
  jz .LABEL__create_local_variable_address_44__6
.LABEL__create_local_variable_address_44__5:
  .loc 2 1243 41
  # $5.2: Boolean = call(is_343, mc_value_address.1, MC_Local_Variable_Address)
  mov rdi, [rbp-41]
  mov rsi, MC_Local_Variable_Address[rip]
  call is_343
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:rax:[rbp-42] 
  # jump(.LABEL__create_local_variable_address_44__6)
  mov [rbp-42], al
.LABEL__create_local_variable_address_44__6:
  .loc 2 1243 13
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # jump($5.3, .LABEL__create_local_variable_address_44__7, .LABEL__create_local_variable_address_44__8)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__create_local_variable_address_44__8
.LABEL__create_local_variable_address_44__7:
  .loc 2 1244 33
  # mc_value_address.1: @MC_Local_Variable_Address = mc_value_address.1
  mov rax, [rbp-41]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax 
  .loc 2 1245 26
  # $8.1: Int = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $8.1:rbx 
  .loc 2 1245 17
  # $9.1: Boolean = offset.8 > $8.1
  cmp QWORD PTR [rbp-8], rbx
  setg r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $9.1:r15 
  # jump($9.1, .LABEL__create_local_variable_address_44__9, .LABEL__create_local_variable_address_44__8)
  test r15b, r15b
  mov [rbp-50], rax
  mov [rbp-51], r15b
  jz .LABEL__create_local_variable_address_44__8
.LABEL__create_local_variable_address_44__9:
  .loc 2 1246 26
  # offset.3: Int = load_struct_member(mc_value_address.1, offset)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax:[rbp-50] $9.1:[rbp-51] offset.3:rbx:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_44__8)
  mov [rbp-8], rbx
.LABEL__create_local_variable_address_44__8:
  # offset.9: Int = phi(offset.3, offset.8)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] offset.3:[rbp-8] 
  .loc 2 1249 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:rbx:[rbp-16] offset.3:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_44__2)
  mov [rbp-16], rbx
  jmp .LABEL__create_local_variable_address_44__2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:[rbp-16] offset.3:[rbp-8] 
  # [discarded value]: mc_value.5
  # [discarded value]: offset.9
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [discarded value]: offset.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
.LABEL__create_local_variable_address_44__4:
  .loc 2 1251 14
  # $12.1: Int = offset.8 - variable_type_size.1
  mov rax, [rbp-8]
  sub rax, QWORD PTR [rbp-24]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] $12.1:rax 
  .loc 2 1251 5
  # offset.5: Int = $12.1
  mov [rbp-41], rax
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] 
  .loc 2 1252 9
  # $13.1: Int =  - offset.5
  mov rbx, rax
  neg rbx
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx 
  .loc 2 1252 19
  # $14.1: Int = load_struct_member(self.1, stack_frame_size)
  mov r15, [rbp-32]
  mov r14, [r15+161]
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx $14.1:r14 
  .loc 2 1252 9
  # $15.1: Boolean = $13.1 > $14.1
  cmp rbx, r14
  setg r13b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $15.1:r13 
  # jump($15.1, .LABEL__create_local_variable_address_44__11, .LABEL__create_local_variable_address_44__12)
  test r13b, r13b
  mov [rbp-8], rax
  mov [rbp-34], r13b
  jz .LABEL__create_local_variable_address_44__12
.LABEL__create_local_variable_address_44__11:
  .loc 2 1253 33
  # $16.1: Int =  - offset.5
  mov rax, [rbp-8]
  neg rax
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $16.1:rax 
  .loc 2 1253 9
  # store_struct_member(self.1, stack_frame_size, $16.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rbx+161], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # jump(.LABEL__create_local_variable_address_44__12)
.LABEL__create_local_variable_address_44__12:
  .loc 2 1255 53
  # $17.1: @MC_Register = load_struct_member(self.1, register_rbp)
  mov rax, [rbp-32]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $17.1:rbx 
  .loc 2 1255 12
  # $18.1: @MC_Local_Variable_Address = new MC_Local_Variable_Address(object_type = MC_Local_Variable_Address, register = $17.1, offset = offset.5)
  mov [rbp-42], rbx
  mov rdi, 24
  call malloc
  #     .object_type = MC_Local_Variable_Address
  mov rbx, MC_Local_Variable_Address[rip]
  mov [rax], rbx
  #     .register = $17.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  #     .offset = offset.5
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:r15:[rbp-8] $15.1:[rbp-34] $18.1:rax 
  .loc 2 1255 5
  # return($18.1)
  mov [rbp-42], rax
  jmp .LABEL__create_local_variable_address_44__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] 
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: offset.8
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: offset.1
  # [discarded value]: variable_type_size.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_local_variable_address_44__end:
  mov rsp, rbp
  pop rbp
  ret

create_local_variable_address_44__stack_frame_size: .word 64

  .loc 2 1258 1
  .text
spill_global_variable_45:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_global_variable_45__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_global_variable_45__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1259 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  .loc 2 1259 5
  # $2.1: @FILE = call(write_337, $1.1, "  # store global variable: ")
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_158[rip] # "  # store global variable: "
  call write_337
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $2.1:rax 
  .loc 2 1259 65
  # $3.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $3.1:r15 
  .loc 2 1259 65
  # $4.1: @IR_Variable = load_struct_member($3.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $4.1:r14 
  .loc 2 1259 65
  # $5.1: @String = load_struct_member($4.1, name)
  mov r15, [r14+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $5.1:r15 
  .loc 2 1259 5
  # $6.1: @FILE = call(write_337, $2.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $5.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $6.1:rax 
  .loc 2 1259 5
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  .loc 2 1260 31
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $8.1:rbx 
  .loc 2 1260 104
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov r15, [rax+24]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] $8.1:rbx $9.1:r15 
  .loc 2 1260 104
  # $10.1: @IR_Variable = load_struct_member($9.1, variable)
  mov rax, [r15+48]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $8.1:rbx $10.1:rax 
  .loc 2 1260 59
  # $11.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $10.1)
  mov [rbp-16], rax
  mov [rbp-24], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $10.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $8.1:[rbp-24] $11.1:rax 
  .loc 2 1260 5
  # call(generate_store_value_31, self.1, $8.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: $11.1
  # [discarded value]: $8.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__spill_global_variable_45__end
  # [live values]: 
.LABEL__spill_global_variable_45__end:
  mov rsp, rbp
  pop rbp
  ret

spill_global_variable_45__stack_frame_size: .word 32

  .loc 2 1263 1
  .text
release_all_registers_46:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_all_registers_46__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_all_registers_46__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1264 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1264 5
  # call(release_register_47, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1265 27
  # $2.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx 
  .loc 2 1265 5
  # call(release_register_47, self.1, $2.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1266 27
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1266 5
  # call(release_register_47, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1267 27
  # $4.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1267 5
  # call(release_register_47, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1268 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1268 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1269 27
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1269 5
  # call(release_register_47, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1270 27
  # $7.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1270 5
  # call(release_register_47, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1271 27
  # $8.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1271 5
  # call(release_register_47, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1272 27
  # $9.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1272 5
  # call(release_register_47, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1273 27
  # $10.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1273 5
  # call(release_register_47, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1274 27
  # $11.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1274 5
  # call(release_register_47, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1275 27
  # $12.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1275 5
  # call(release_register_47, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1276 27
  # $13.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1276 5
  # call(release_register_47, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1277 27
  # $14.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1277 5
  # call(release_register_47, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $14.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__release_all_registers_46__end
  # [live values]: 
.LABEL__release_all_registers_46__end:
  mov rsp, rbp
  pop rbp
  ret

release_all_registers_46__stack_frame_size: .word 16

  .loc 2 1280 1
  .text
release_register_47:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_register_47__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_register_47__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1281 17
  # mc_value.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax 
  .loc 2 1282 9
  # $2.1: Boolean = mc_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__release_register_47__2, .LABEL__release_register_47__3)
  test bl, bl
  mov [rbp-8], rax
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__release_register_47__3
.LABEL__release_register_47__2:
  .loc 2 1283 13
  # $3.1: @MC_Value = load_struct_member(register.1, loaded_value)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 2 1283 13
  # $4.1: Boolean = $3.1 != mc_value.1
  cmp rbx, QWORD PTR [rbp-8]
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  # jump($4.1, .LABEL__release_register_47__4, .LABEL__release_register_47__5)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__release_register_47__5
.LABEL__release_register_47__4:
  .loc 2 1284 30
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $5.1:rbx 
  .loc 2 1284 30
  # $6.1: Boolean = call(is_used_49, $5.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $6.1:rax 
  .loc 2 1284 30
  # $7.1: Boolean = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $7.1:rbx 
  .loc 2 1284 13
  # persist_value.1: Boolean = $7.1
  mov [rbp-27], bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rbx 
  .loc 2 1286 17
  # $8.1: Boolean = persist_value.1 == false
  cmp bl, 0
  sete al
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rbx $8.1:rax 
  # jump($8.1, .LABEL__release_register_47__6, .LABEL__release_register_47__7)
  test al, al
  mov [rbp-27], al
  mov [rbp-28], bl
  jz .LABEL__release_register_47__7
.LABEL__release_register_47__6:
  .loc 2 1287 52
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] $9.1:rbx 
  .loc 2 1287 52
  # $10.1: @List = load_struct_member($9.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] $10.1:r15 
  .loc 2 1287 52
  # ir_value_user_instructions_item.1: @List_Item = load_struct_member($10.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:rbx 
  # jump(.LABEL__release_register_47__8)
  mov [rbp-36], rbx
.LABEL__release_register_47__8:
  # ir_value_user_instructions_item.2: @List_Item = phi(ir_value_user_instructions_item.1, ir_value_user_instructions_item.5)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] 
  .loc 2 1288 24
  # $12.1: Boolean = ir_value_user_instructions_item.2 != null
  cmp QWORD PTR [rbp-36], 0
  setne al
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:rax 
  # jump($12.1, .LABEL__release_register_47__9, .LABEL__release_register_47__7)
  test al, al
  mov [rbp-37], al
  jz .LABEL__release_register_47__7
.LABEL__release_register_47__9:
  .loc 2 1289 50
  # ir_value_user_instruction.1: @IR_Instruction = load_struct_member(ir_value_user_instructions_item.2, data)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx 
  .loc 2 1290 25
  # $15.1: Boolean = load_struct_member(ir_value_user_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $15.1:r15 
  .loc 2 1290 25
  # $16.1: Boolean = $15.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $16.1:r14 
  .loc 2 1290 25
  # $17.1: Boolean = $16.1
  mov [rbp-38], r14b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $17.1:r14 
  # jump($17.1, .LABEL__release_register_47__12, .LABEL__release_register_47__11)
  test r14b, r14b
  mov [rbp-45], rbx
  mov [rbp-46], r14b
  jz .LABEL__release_register_47__11
.LABEL__release_register_47__12:
  .loc 2 1290 25
  # $17.3: Boolean = phi($17.1, $17.2)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
  # jump($17.3, .LABEL__release_register_47__13, .LABEL__release_register_47__14)
  mov al, [rbp-46]
  test al, al
  jz .LABEL__release_register_47__14
.LABEL__release_register_47__13:
  .loc 2 1291 25
  # persist_value.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:rax:[rbp-28] 
  # jump(.LABEL__release_register_47__7)
  mov [rbp-28], al
.LABEL__release_register_47__7:
  # persist_value.3: Boolean = phi(persist_value.1, persist_value.2)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(persist_value.3, .LABEL__release_register_47__16, .LABEL__release_register_47__5)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__release_register_47__5
.LABEL__release_register_47__16:
  .loc 2 1299 17
  # call(spill_local_variable_43, self.1, mc_value.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call spill_local_variable_43
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(.LABEL__release_register_47__5)
.LABEL__release_register_47__5:
  .loc 2 1303 9
  # store_struct_member(mc_value.1, register, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  .loc 2 1304 9
  # store_struct_member(register.1, value, null)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+41], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  .loc 2 1305 9
  # store_struct_member(register.1, loaded_value, null)
  mov QWORD PTR [rbx+49], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(.LABEL__release_register_47__3)
.LABEL__release_register_47__3:
  # return()
  jmp .LABEL__release_register_47__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [discarded value]: persist_value.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [discarded value]: persist_value.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
.LABEL__release_register_47__14:
  .loc 2 1294 55
  # ir_value_user_instructions_item.5: @List_Item = load_struct_member(ir_value_user_instructions_item.2, next_item)
  mov rax, [rbp-36]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] ir_value_user_instructions_item.5:rbx:[rbp-36] 
  # jump(.LABEL__release_register_47__8)
  mov [rbp-36], rbx
  jmp .LABEL__release_register_47__8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] ir_value_user_instructions_item.5:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
.LABEL__release_register_47__11:
  .loc 2 1290 76
  # $17.2: Boolean = call(is_343, ir_value_user_instruction.1, IR_Phi_Instruction)
  mov rdi, [rbp-45]
  mov rsi, IR_Phi_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.2:rax:[rbp-46] 
  # jump(.LABEL__release_register_47__12)
  mov [rbp-46], al
  jmp .LABEL__release_register_47__12
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.2:[rbp-46] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
  # [discarded value]: $17.1
  # [discarded value]: ir_value_user_instruction.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] 
  # [discarded value]: persist_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__release_register_47__end:
  mov rsp, rbp
  pop rbp
  ret

release_register_47__stack_frame_size: .word 48

  .loc 2 1309 1
  .text
discard_used_values_48:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR discard_used_values_48__stack_frame_size[rip]
  sub rsp, rax
.LABEL__discard_used_values_48__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1310 5
  # removed_values.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi removed_values.1:rax 
  .loc 2 1312 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rbx, [rdi+153]
  # [live values]: self.1:rdi removed_values.1:rax mc_value.1:rbx 
  # jump(.LABEL__discard_used_values_48__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
.LABEL__discard_used_values_48__2:
  # removed_values.5: Int = phi(removed_values.1, removed_values.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.20)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1313 12
  # $2.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__discard_used_values_48__3, .LABEL__discard_used_values_48__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__discard_used_values_48__4
.LABEL__discard_used_values_48__3:
  .loc 2 1314 13
  # $3.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 1314 13
  # $5.1: Boolean = load_struct_member($3.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__discard_used_values_48__7, .LABEL__discard_used_values_48__8)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__discard_used_values_48__8
.LABEL__discard_used_values_48__7:
  .loc 2 1314 53
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1314 53
  # $7.1: @IR_Block = load_struct_member($6.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 2 1314 53
  # $5.2: Boolean = load_struct_member($7.1, is_being_generated)
  mov bl, [r15+48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:rbx:[rbp-26] 
  # jump(.LABEL__discard_used_values_48__8)
  mov [rbp-26], bl
.LABEL__discard_used_values_48__8:
  .loc 2 1314 13
  # $9.1: Boolean = phi($5.1, $5.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:rax 
  # jump($9.1, .LABEL__discard_used_values_48__5, .LABEL__discard_used_values_48__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__discard_used_values_48__6
.LABEL__discard_used_values_48__5:
  .loc 2 1314 112
  # $10.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $10.1:rbx $5.2:[rbp-26] $9.1:[rbp-27] 
  .loc 2 1314 112
  # $9.2: Boolean = call(is_used_49, $10.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:rax:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # jump(.LABEL__discard_used_values_48__6)
  mov [rbp-27], al
.LABEL__discard_used_values_48__6:
  .loc 2 1314 13
  # $9.3: Boolean = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # jump($9.3, .LABEL__discard_used_values_48__9, .LABEL__discard_used_values_48__10)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__9:
  .loc 2 1315 13
  # discard_value.1: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax 
  .loc 2 1316 13
  # value_is_phi_argument.1: Boolean = false
  mov bl, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx 
  .loc 2 1318 39
  # $12.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx $12.1:r14 
  .loc 2 1318 39
  # $13.1: @List = load_struct_member($12.1, user_instructions)
  mov r13, [r14+24]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx $13.1:r13 
  .loc 2 1318 39
  # user_instructions_item.1: @List_Item = load_struct_member($13.1, first_item)
  mov r14, [r13]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx user_instructions_item.1:r14 
  # jump(.LABEL__discard_used_values_48__11)
  mov [rbp-28], al
  mov [rbp-29], bl
  mov [rbp-37], r14
.LABEL__discard_used_values_48__11:
  # value_is_phi_argument.5: Boolean = phi(value_is_phi_argument.1, value_is_phi_argument.7)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] 
  # user_instructions_item.7: @List_Item = phi(user_instructions_item.1, user_instructions_item.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] 
  # discard_value.2: Boolean = phi(discard_value.1, discard_value.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] 
  .loc 2 1319 20
  # $15.1: Boolean = discard_value.2
  mov al, [rbp-28]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:rax 
  # jump($15.1, .LABEL__discard_used_values_48__14, .LABEL__discard_used_values_48__15)
  test al, al
  mov [rbp-38], al
  jz .LABEL__discard_used_values_48__15
.LABEL__discard_used_values_48__14:
  .loc 2 1319 37
  # $16.1: Boolean = user_instructions_item.7 != null
  cmp QWORD PTR [rbp-37], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $16.1:rax 
  .loc 2 1319 20
  # $15.2: Boolean = $16.1
  mov [rbp-39], al
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:rax:[rbp-38] 
  # jump(.LABEL__discard_used_values_48__15)
  mov [rbp-38], al
.LABEL__discard_used_values_48__15:
  .loc 2 1319 20
  # $15.3: Boolean = phi($15.1, $15.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # jump($15.3, .LABEL__discard_used_values_48__12, .LABEL__discard_used_values_48__13)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__discard_used_values_48__13
.LABEL__discard_used_values_48__12:
  .loc 2 1320 37
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instructions_item.7, data)
  mov rax, [rbp-37]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:rax:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rbx $15.2:[rbp-38] $15.3:[rbp-38] 
  .loc 2 1321 21
  # $19.1: Boolean = call(is_343, user_instruction.1, IR_Phi_Instruction)
  mov rdi, rbx
  mov rsi, IR_Phi_Instruction[rip]
  mov [rbp-46], rbx
  call is_343
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:rax $15.2:[rbp-38] $15.3:[rbp-38] 
  # jump($19.1, .LABEL__discard_used_values_48__16, .LABEL__discard_used_values_48__17)
  test al, al
  mov [rbp-47], al
  jz .LABEL__discard_used_values_48__17
.LABEL__discard_used_values_48__16:
  .loc 2 1322 21
  # value_is_phi_argument.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:rax:[rbp-29] 
  # jump(.LABEL__discard_used_values_48__17)
  mov [rbp-29], al
.LABEL__discard_used_values_48__17:
  # value_is_phi_argument.7: Boolean = phi(value_is_phi_argument.2, value_is_phi_argument.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] 
  .loc 2 1324 21
  # $20.1: Boolean = load_struct_member(user_instruction.1, is_generated)
  mov rax, [rbp-46]
  mov bl, [rax+56]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $20.1:rbx 
  .loc 2 1324 21
  # $21.1: Boolean = $20.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:r15 
  # jump($21.1, .LABEL__discard_used_values_48__18, .LABEL__discard_used_values_48__20)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__discard_used_values_48__20
.LABEL__discard_used_values_48__18:
  .loc 2 1326 21
  # discard_value.4: Boolean = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:rax:[rbp-28] 
  # jump(.LABEL__discard_used_values_48__19)
  mov [rbp-28], al
.LABEL__discard_used_values_48__19:
  # discard_value.6: Boolean = phi(discard_value.4, discard_value.3, discard_value.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] 
  .loc 2 1331 42
  # user_instructions_item.5: @List_Item = load_struct_member(user_instructions_item.7, next_item)
  mov rax, [rbp-37]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] user_instructions_item.5:rbx:[rbp-37] 
  # jump(.LABEL__discard_used_values_48__11)
  mov [rbp-37], rbx
  jmp .LABEL__discard_used_values_48__11
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] user_instructions_item.5:[rbp-37] 
  # [discarded value]: user_instructions_item.5
  # [discarded value]: discard_value.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] 
  # [discarded value]: discard_value.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] 
.LABEL__discard_used_values_48__20:
  .loc 2 1327 28
  # $22.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  mov rax, [rbp-46]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx 
  .loc 2 1327 61
  # $23.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx $23.1:r14 
  .loc 2 1327 61
  # $24.1: @IR_Block = load_struct_member($23.1, parent_block)
  mov r13, [r14+32]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx $24.1:r13 
  .loc 2 1327 28
  # $25.1: Boolean = $22.1 != $24.1
  cmp rbx, r13
  setne r14b
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $25.1:r14 
  .loc 2 1327 28
  # $26.1: Boolean = $25.1
  mov [rbp-49], r14b
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:r14 
  # jump($26.1, .LABEL__discard_used_values_48__21, .LABEL__discard_used_values_48__22)
  test r14b, r14b
  mov [rbp-49], r14b
  jz .LABEL__discard_used_values_48__22
.LABEL__discard_used_values_48__21:
  .loc 2 1327 101
  # $27.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $27.1:rbx 
  .loc 2 1327 101
  # $28.1: @IR_Block = load_struct_member($27.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $28.1:r15 
  .loc 2 1327 101
  # $29.1: Boolean = load_struct_member($28.1, is_generated)
  mov bl, [r15+49]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $29.1:rbx 
  .loc 2 1327 101
  # $30.1: Boolean = $29.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $30.1:r15 
  .loc 2 1327 28
  # $26.2: Boolean = $30.1
  mov [rbp-50], r15b
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:r15:[rbp-49] 
  # jump(.LABEL__discard_used_values_48__22)
  mov [rbp-49], r15b
.LABEL__discard_used_values_48__22:
  .loc 2 1327 28
  # $26.3: Boolean = phi($26.1, $26.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] 
  # jump($26.3, .LABEL__discard_used_values_48__23, .LABEL__discard_used_values_48__19)
  mov al, [rbp-49]
  test al, al
  jz .LABEL__discard_used_values_48__19
.LABEL__discard_used_values_48__23:
  .loc 2 1329 21
  # discard_value.3: Boolean = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] discard_value.3:rax:[rbp-28] 
  # jump(.LABEL__discard_used_values_48__19)
  mov [rbp-28], al
  jmp .LABEL__discard_used_values_48__19
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] discard_value.3:[rbp-28] 
  # [discarded value]: discard_value.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] 
  # [discarded value]: $26.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] 
  # [discarded value]: $26.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] 
  # [discarded value]: value_is_phi_argument.7
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] 
  # [discarded value]: value_is_phi_argument.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
.LABEL__discard_used_values_48__13:
  # jump(discard_value.2, .LABEL__discard_used_values_48__25, .LABEL__discard_used_values_48__10)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__25:
  .loc 2 1335 21
  # $32.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $32.1:rbx 
  .loc 2 1335 21
  # $33.1: Boolean = $32.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:r15 
  # jump($33.1, .LABEL__discard_used_values_48__27, .LABEL__discard_used_values_48__28)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__discard_used_values_48__28
.LABEL__discard_used_values_48__27:
  # jump(value_is_phi_argument.5, .LABEL__discard_used_values_48__29, .LABEL__discard_used_values_48__30)
  mov al, [rbp-29]
  test al, al
  jz .LABEL__discard_used_values_48__30
.LABEL__discard_used_values_48__29:
  .loc 2 1337 25
  # call(spill_local_variable_43, self.1, mc_value.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call spill_local_variable_43
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_48__30)
.LABEL__discard_used_values_48__30:
  .loc 2 1340 21
  # $34.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $34.1:rbx 
  .loc 2 1340 21
  # store_struct_member($34.1, value, null)
  mov QWORD PTR [rbx+41], 0
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  .loc 2 1341 21
  # store_struct_member(mc_value.2, register, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_48__28)
.LABEL__discard_used_values_48__28:
  .loc 2 1345 21
  # $35.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $35.1:rbx 
  .loc 2 1345 21
  # $36.1: Boolean = $35.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:r15 
  # jump($36.1, .LABEL__discard_used_values_48__31, .LABEL__discard_used_values_48__33)
  test r15b, r15b
  mov [rbp-40], r15b
  jz .LABEL__discard_used_values_48__33
.LABEL__discard_used_values_48__31:
  .loc 2 1346 21
  # $38.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $38.1:rbx 
  .loc 2 1346 54
  # $39.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $38.1:rbx $39.1:r15 
  .loc 2 1346 21
  # store_struct_member($38.1, next_value, $39.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_48__32)
.LABEL__discard_used_values_48__32:
  .loc 2 1350 21
  # $40.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $40.1:rbx 
  .loc 2 1350 21
  # $41.1: Boolean = $40.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:r15 
  # jump($41.1, .LABEL__discard_used_values_48__34, .LABEL__discard_used_values_48__36)
  test r15b, r15b
  mov [rbp-41], r15b
  jz .LABEL__discard_used_values_48__36
.LABEL__discard_used_values_48__34:
  .loc 2 1351 21
  # $43.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $43.1:rbx 
  .loc 2 1351 54
  # $44.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov r15, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $43.1:rbx $44.1:r15 
  .loc 2 1351 21
  # store_struct_member($43.1, prev_value, $44.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_48__35)
.LABEL__discard_used_values_48__35:
  .loc 2 1355 34
  # $45.1: Int = removed_values.5 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $45.1:rax 
  .loc 2 1355 17
  # removed_values.3: Int = $45.1
  mov [rbp-49], rax
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:rax:[rbp-8] 
  .loc 2 1357 21
  # $46.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov rbx, [rbp-24]
  mov r15b, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:rax:[rbp-8] $46.1:r15 
  # jump($46.1, .LABEL__discard_used_values_48__37, .LABEL__discard_used_values_48__10)
  test r15b, r15b
  mov [rbp-8], rax
  mov [rbp-42], r15b
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__37:
  .loc 2 1358 21
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $47.1:rbx 
  .loc 2 1358 21
  # $48.1: @FILE = call(write_337, $47.1, "  # [discarded value]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_159[rip] # "  # [discarded value]: "
  call write_337
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax 
  .loc 2 1358 77
  # $49.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $49.1:r15 
  .loc 2 1358 77
  # $50.1: @IR_Variable = load_struct_member($49.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $50.1:r14 
  .loc 2 1358 77
  # $51.1: @String = load_struct_member($50.1, name)
  mov r15, [r14+16]
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $51.1:r15 
  .loc 2 1358 21
  # $52.1: @FILE = call(write_337, $48.1, $51.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $51.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $52.1:rax 
  .loc 2 1358 21
  # $53.1: @FILE = call(write_339, $52.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax 
  .loc 2 1358 136
  # $54.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax $54.1:r15 
  .loc 2 1358 136
  # $55.1: Int = load_struct_member($54.1, version)
  mov r14, [r15+56]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax $55.1:r14 
  .loc 2 1358 21
  # $56.1: @FILE = call(write_336, $53.1, $55.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $55.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $56.1:rax 
  .loc 2 1358 21
  # $57.1: @FILE = call(end_line_340, $56.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # jump(.LABEL__discard_used_values_48__10)
.LABEL__discard_used_values_48__10:
  # removed_values.6: Int = phi(removed_values.3, removed_values.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  .loc 2 1363 20
  # mc_value.20: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] mc_value.20:rbx:[rbp-16] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # jump(.LABEL__discard_used_values_48__2)
  mov [rbp-16], rbx
  jmp .LABEL__discard_used_values_48__2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] mc_value.20:[rbp-16] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [discarded value]: mc_value.20
  # [discarded value]: removed_values.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
.LABEL__discard_used_values_48__36:
  .loc 2 1353 39
  # $42.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $42.1:rbx 
  .loc 2 1353 21
  # store_struct_member(self.1, last_value, $42.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+153], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_48__35)
  jmp .LABEL__discard_used_values_48__35
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
.LABEL__discard_used_values_48__33:
  .loc 2 1348 40
  # $37.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $37.1:rbx 
  .loc 2 1348 21
  # store_struct_member(self.1, first_value, $37.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+145], rbx
  # [discarded value]: $37.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_48__32)
  jmp .LABEL__discard_used_values_48__32
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] 
  # [discarded value]: $15.1
  # [discarded value]: discard_value.2
  # [discarded value]: user_instructions_item.7
  # [discarded value]: value_is_phi_argument.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] 
  # [discarded value]: user_instructions_item.1
  # [discarded value]: value_is_phi_argument.1
  # [discarded value]: discard_value.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__discard_used_values_48__4:
  .loc 2 1366 5
  # return(removed_values.5)
  mov rax, [rbp-8]
  jmp .LABEL__discard_used_values_48__end
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: removed_values.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: removed_values.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__discard_used_values_48__end:
  mov rsp, rbp
  pop rbp
  ret

discard_used_values_48__stack_frame_size: .word 64

  .loc 2 1369 1
  .text
is_used_49:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_used_49__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_used_49__1:
  # self.1: @IR_Value = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1370 31
  # $1.1: @List = load_struct_member(self.1, user_instructions)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1370 31
  # user_instructions_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi user_instructions_item.1:rbx 
  # jump(.LABEL__is_used_49__2)
  mov [rbp-8], rbx
  mov [rbp-16], rdi
.LABEL__is_used_49__2:
  # user_instructions_item.2: @List_Item = phi(user_instructions_item.1, user_instructions_item.5)
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] 
  .loc 2 1371 12
  # $3.1: Boolean = user_instructions_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__is_used_49__3, .LABEL__is_used_49__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__is_used_49__4
.LABEL__is_used_49__3:
  .loc 2 1372 29
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instructions_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] user_instruction.1:rbx 
  .loc 2 1373 13
  # $6.1: Boolean = load_struct_member(user_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] $6.1:r15 
  .loc 2 1373 13
  # $7.1: Boolean = $6.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] $7.1:rbx 
  # jump($7.1, .LABEL__is_used_49__5, .LABEL__is_used_49__6)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__is_used_49__6
.LABEL__is_used_49__5:
  .loc 2 1374 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__is_used_49__6:
  .loc 2 1376 34
  # user_instructions_item.5: @List_Item = load_struct_member(user_instructions_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] user_instructions_item.5:rbx:[rbp-8] 
  # jump(.LABEL__is_used_49__2)
  mov [rbp-8], rbx
  jmp .LABEL__is_used_49__2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] user_instructions_item.5:[rbp-8] 
  # [discarded value]: user_instructions_item.5
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__is_used_49__4:
  .loc 2 1378 19
  # $9.1: @List = load_struct_member(self.1, links)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $9.1:rbx 
  .loc 2 1378 19
  # links_item.1: @List_Item = load_struct_member($9.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:r15 
  # jump(.LABEL__is_used_49__8)
  mov [rbp-25], r15
.LABEL__is_used_49__8:
  # links_item.2: @List_Item = phi(links_item.1, links_item.5)
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] 
  .loc 2 1379 12
  # $11.1: Boolean = links_item.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__is_used_49__9, .LABEL__is_used_49__10)
  test al, al
  mov [rbp-26], al
  jz .LABEL__is_used_49__10
.LABEL__is_used_49__9:
  .loc 2 1380 17
  # link.1: @IR_Link = load_struct_member(links_item.2, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:rax:[rbp-25] $11.1:[rbp-26] link.1:rbx 
  .loc 2 1381 13
  # $14.1: Boolean = call(is_343, link.1, IR_Required_By_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Required_By_Value_Link[rip]
  mov [rbp-34], rbx
  call is_343
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:rax 
  # jump($14.1, .LABEL__is_used_49__11, .LABEL__is_used_49__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__is_used_49__12
.LABEL__is_used_49__11:
  .loc 2 1382 21
  # link.1: @IR_Required_By_Value_Link = link.1
  mov rax, [rbp-34]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] link.1:rax 
  .loc 2 1383 17
  # $16.1: @IR_Value = load_struct_member(link.1, value)
  mov rbx, [rax+16]
  # [discarded value]: link.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $16.1:rbx 
  .loc 2 1383 17
  # $17.1: Boolean = call(is_used_49, $16.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $17.1:rax 
  .loc 2 1383 17
  # $18.1: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:rbx 
  # jump($18.1, .LABEL__is_used_49__13, .LABEL__is_used_49__12)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__is_used_49__12
.LABEL__is_used_49__13:
  .loc 2 1384 17
  # return(false)
  mov al, 0
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] 
.LABEL__is_used_49__12:
  .loc 2 1387 22
  # links_item.5: @List_Item = load_struct_member(links_item.2, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] links_item.5:rbx:[rbp-25] 
  # jump(.LABEL__is_used_49__8)
  mov [rbp-25], rbx
  jmp .LABEL__is_used_49__8
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] links_item.5:[rbp-25] 
  # [discarded value]: links_item.5
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] 
  # [discarded value]: link.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] 
.LABEL__is_used_49__10:
  .loc 2 1389 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] 
  # [discarded value]: links_item.2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] 
  # [discarded value]: links_item.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] 
  # [discarded value]: user_instructions_item.2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] 
  # [discarded value]: user_instructions_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_used_49__end:
  mov rsp, rbp
  pop rbp
  ret

is_used_49__stack_frame_size: .word 48

  .loc 2 1392 1
  .text
output_live_values_50:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_50__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_50__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1393 29
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1393 5
  # call(output_live_values_51, self.1, $1.1)
  mov rsi, rax
  call output_live_values_51
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__output_live_values_50__end
  # [live values]: 
.LABEL__output_live_values_50__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_50__stack_frame_size: .word 0

  .loc 2 1396 1
  .text
output_live_values_51:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_51__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_51__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # output_file.1: @FILE = load_variable(output_file)
  # [live values]: self.1:rdi output_file.1:rsi 
  .loc 2 1397 9
  # $1.1: Boolean = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi output_file.1:rsi $1.1:rax 
  .loc 2 1397 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi output_file.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_live_values_51__2, .LABEL__output_live_values_51__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_live_values_51__3
.LABEL__output_live_values_51__2:
  .loc 2 1398 9
  # return()
  jmp .LABEL__output_live_values_51__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_live_values_51__3:
  .loc 2 1400 5
  # $3.1: @FILE = call(write_337, output_file.1, "  # [live values]: ")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_160[rip] # "  # [live values]: "
  call write_337
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 1401 17
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-17]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_live_values_51__5)
  mov [rbp-25], rbx
.LABEL__output_live_values_51__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.9)
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  .loc 2 1402 12
  # $5.1: Boolean = mc_value.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__output_live_values_51__6, .LABEL__output_live_values_51__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__output_live_values_51__7
.LABEL__output_live_values_51__6:
  .loc 2 1403 13
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1403 13
  # $7.1: Boolean = load_struct_member($6.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__output_live_values_51__8, .LABEL__output_live_values_51__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__output_live_values_51__9
.LABEL__output_live_values_51__8:
  .loc 2 1404 31
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rbx 
  .loc 2 1404 31
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:r15 
  .loc 2 1404 31
  # $10.1: @String = load_struct_member($9.1, name)
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $10.1:rbx 
  .loc 2 1404 13
  # $11.1: @FILE = call(write_337, output_file.1, $10.1)
  mov rdi, [rbp-9]
  mov rsi, rbx
  call write_337
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $11.1:rax 
  .loc 2 1404 13
  # $12.1: @FILE = call(write_339, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax 
  .loc 2 1404 90
  # $13.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $13.1:r15 
  .loc 2 1404 90
  # $14.1: Int = load_struct_member($13.1, version)
  mov r14, [r15+56]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $14.1:r14 
  .loc 2 1404 13
  # $15.1: @FILE = call(write_336, $12.1, $14.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  .loc 2 1405 17
  # $16.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $16.1:rbx 
  .loc 2 1405 17
  # $17.1: Boolean = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:r15 
  # jump($17.1, .LABEL__output_live_values_51__10, .LABEL__output_live_values_51__11)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__output_live_values_51__11
.LABEL__output_live_values_51__10:
  .loc 2 1406 17
  # $18.1: @FILE = call(write_339, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_339
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax 
  .loc 2 1406 46
  # $19.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rbx, [rbp-25]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $19.1:r15 
  .loc 2 1406 46
  # $20.1: @String = load_struct_member($19.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $20.1:r14 
  .loc 2 1406 17
  # $21.1: @FILE = call(write_337, $18.1, $20.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # jump(.LABEL__output_live_values_51__11)
.LABEL__output_live_values_51__11:
  .loc 2 1408 17
  # $22.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $22.1:rbx 
  .loc 2 1408 17
  # $23.1: Boolean = $22.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:r15 
  # jump($23.1, .LABEL__output_live_values_51__12, .LABEL__output_live_values_51__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__output_live_values_51__13
.LABEL__output_live_values_51__12:
  .loc 2 1409 17
  # $24.1: @FILE = call(write_339, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_339
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax 
  .loc 2 1409 46
  # $25.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rbx, [rbp-25]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax $25.1:r15 
  .loc 2 1409 17
  # $26.1: @FILE = call(write_55, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__13)
.LABEL__output_live_values_51__13:
  .loc 2 1411 13
  # $27.1: @FILE = call(write_339, output_file.1, ' ')
  mov rdi, [rbp-9]
  mov sil, 32
  call write_339
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__9)
.LABEL__output_live_values_51__9:
  .loc 2 1413 20
  # mc_value.9: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:rbx:[rbp-25] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__5)
  mov [rbp-25], rbx
  jmp .LABEL__output_live_values_51__5
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:[rbp-25] $23.1:[rbp-29] 
  # [discarded value]: mc_value.9
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__output_live_values_51__7:
  .loc 2 1415 5
  # $29.1: @FILE = call(end_line_340, output_file.1)
  mov rdi, [rbp-9]
  call end_line_340
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # return()
  jmp .LABEL__output_live_values_51__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] 
  # [discarded value]: output_file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_live_values_51__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_51__stack_frame_size: .word 32

  .loc 2 1418 1
  .text
output_used_registers_52:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_registers_52__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_registers_52__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(true, .LABEL__output_used_registers_52__2, .LABEL__output_used_registers_52__3)
  mov al, 1
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__output_used_registers_52__3
.LABEL__output_used_registers_52__2:
  .loc 2 1420 9
  # return()
  jmp .LABEL__output_used_registers_52__end
  # [live values]: self.1:[rbp-8] 
.LABEL__output_used_registers_52__3:
  .loc 2 1422 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1422 5
  # $2.1: @FILE = call(write_337, $1.1, "  # [used registers]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_161[rip] # "  # [used registers]: "
  call write_337
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1423 31
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1423 5
  # call(output_used_register_53, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1424 31
  # $4.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1424 5
  # call(output_used_register_53, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1425 31
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1425 5
  # call(output_used_register_53, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1426 31
  # $6.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1426 5
  # call(output_used_register_53, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1427 31
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1427 5
  # call(output_used_register_53, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1428 31
  # $8.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1428 5
  # call(output_used_register_53, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1429 31
  # $9.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1429 5
  # call(output_used_register_53, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1430 31
  # $10.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1430 5
  # call(output_used_register_53, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1431 31
  # $11.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1431 5
  # call(output_used_register_53, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1432 31
  # $12.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1432 5
  # call(output_used_register_53, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1433 31
  # $13.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1433 5
  # call(output_used_register_53, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1434 31
  # $14.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1434 5
  # call(output_used_register_53, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1435 31
  # $15.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $15.1:rbx 
  .loc 2 1435 5
  # call(output_used_register_53, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1436 31
  # $16.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $16.1:rbx 
  .loc 2 1436 5
  # call(output_used_register_53, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1437 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $17.1:rbx 
  .loc 2 1437 5
  # $18.1: @FILE = call(end_line_340, $17.1)
  mov rdi, rbx
  call end_line_340
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__output_used_registers_52__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_registers_52__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_registers_52__stack_frame_size: .word 16

  .loc 2 1440 1
  .text
output_used_register_53:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_register_53__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_register_53__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1441 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi $1.1:rax 
  .loc 2 1441 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_used_register_53__2, .LABEL__output_used_register_53__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_used_register_53__3
.LABEL__output_used_register_53__2:
  .loc 2 1442 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 1442 32
  # $4.1: @String = load_struct_member(register.1, name_q)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-17] register.1:r15:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r14 
  .loc 2 1442 9
  # $5.1: @FILE = call(write_337, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $5.1:rax 
  .loc 2 1442 9
  # $6.1: @FILE = call(write_339, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $6.1:rax 
  .loc 2 1442 66
  # $7.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 2 1442 66
  # $8.1: @IR_Variable_Value = load_struct_member($7.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $8.1:r14 
  .loc 2 1442 66
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [r14+48]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $9.1:r15 
  .loc 2 1442 66
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $10.1:r14 
  .loc 2 1442 9
  # $11.1: @FILE = call(write_337, $6.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $10.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 2 1442 9
  # $12.1: @FILE = call(write_339, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 1442 131
  # $13.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $13.1:r15 
  .loc 2 1442 131
  # $14.1: @IR_Variable_Value = load_struct_member($13.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $14.1:r14 
  .loc 2 1442 131
  # $15.1: Int = load_struct_member($14.1, version)
  mov r15, [r14+56]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $15.1:r15 
  .loc 2 1442 9
  # $16.1: @FILE = call(write_336, $12.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $15.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 1442 9
  # $17.1: @FILE = call(write_339, $16.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__output_used_register_53__3)
.LABEL__output_used_register_53__3:
  # return()
  jmp .LABEL__output_used_register_53__end
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] 
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_register_53__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_register_53__stack_frame_size: .word 32

  .loc 2 1465 1
  .text
init_54:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_54__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_54__1:
  # self.1: @MC_Register = load_variable(self)
  # [live values]: self.1:rdi 
  # name_q.1: @String = load_variable(name_q)
  # [live values]: self.1:rdi name_q.1:rsi 
  # name_d.1: @String = load_variable(name_d)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx 
  # name_w.1: @String = load_variable(name_w)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx 
  # name_b.1: @String = load_variable(name_b)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1466 5
  # store_struct_member(self.1, name_q, name_q.1)
  mov QWORD PTR [rdi+8], rsi
  # [discarded value]: name_q.1
  # [live values]: self.1:rdi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1467 5
  # store_struct_member(self.1, name_d, name_d.1)
  mov QWORD PTR [rdi+16], rdx
  # [discarded value]: name_d.1
  # [live values]: self.1:rdi name_w.1:rcx name_b.1:r8 
  .loc 2 1468 5
  # store_struct_member(self.1, name_w, name_w.1)
  mov QWORD PTR [rdi+24], rcx
  # [discarded value]: name_w.1
  # [live values]: self.1:rdi name_b.1:r8 
  .loc 2 1469 5
  # store_struct_member(self.1, name_b, name_b.1)
  mov QWORD PTR [rdi+32], r8
  # [discarded value]: name_b.1
  # [live values]: self.1:rdi 
  .loc 2 1470 5
  # store_struct_member(self.1, is_reserved, false)
  mov BYTE PTR [rdi+40], 0
  # [live values]: self.1:rdi 
  .loc 2 1471 5
  # store_struct_member(self.1, value, null)
  mov QWORD PTR [rdi+41], 0
  # [live values]: self.1:rdi 
  .loc 2 1472 5
  # store_struct_member(self.1, loaded_value, null)
  mov QWORD PTR [rdi+49], 0
  # [live values]: self.1:rdi 
  .loc 2 1473 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__init_54__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_54__end:
  mov rsp, rbp
  pop rbp
  ret

init_54__stack_frame_size: .word 16

  .loc 2 1527 1
  .text
write_55:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_55__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_55__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: file.1:rdi address.1:rsi 
  .loc 2 1528 9
  # $1.1: Boolean = call(is_343, address.1, MC_Global_Variable_Address)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, MC_Global_Variable_Address[rip]
  call is_343
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_55__2, .LABEL__write_55__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_55__3
.LABEL__write_55__2:
  .loc 2 1529 20
  # address.1: @MC_Global_Variable_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] address.1:rax 
  .loc 2 1530 27
  # $3.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 2 1530 27
  # $4.1: @String = load_struct_member($3.1, name)
  mov rax, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 2 1530 16
  # $5.1: @FILE = call(write_337, file.1, $4.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_337
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 2 1530 16
  # $6.1: @FILE = call(write_337, $5.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_337
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $6.1:rax 
  .loc 2 1530 9
  # return($6.1)
  mov [rbp-25], rax
  jmp .LABEL__write_55__end
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_55__3:
  .loc 2 1532 9
  # $7.1: Boolean = call(is_343, address.1, MC_Register_Based_Address)
  mov rdi, [rbp-16]
  mov rsi, MC_Register_Based_Address[rip]
  call is_343
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__write_55__5, .LABEL__write_55__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_55__6
.LABEL__write_55__5:
  .loc 2 1533 20
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax 
  .loc 2 1534 9
  # $9.1: @FILE = call(write_339, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  mov [rbp-26], rax
  call write_339
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $9.1:rax 
  .loc 2 1534 31
  # $10.1: @MC_Register = load_struct_member(address.1, register)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $10.1:r15 
  .loc 2 1534 31
  # $11.1: @String = load_struct_member($10.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $11.1:r14 
  .loc 2 1534 9
  # $12.1: @FILE = call(write_337, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  .loc 2 1535 13
  # $13.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $13.1:rbx 
  .loc 2 1535 13
  # $14.1: Boolean = $13.1 > 0
  cmp rbx, 0
  setg r15b
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:r15 
  # jump($14.1, .LABEL__write_55__7, .LABEL__write_55__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__write_55__9
.LABEL__write_55__7:
  .loc 2 1536 13
  # $19.1: @FILE = call(write_339, file.1, '+')
  mov rdi, [rbp-8]
  mov sil, 43
  call write_339
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $19.1:rax 
  .loc 2 1536 35
  # $20.1: Int = load_struct_member(address.1, offset)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $14.1:[rbp-27] $19.1:rax $20.1:r15 
  .loc 2 1536 13
  # $21.1: @FILE = call(write_336, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # jump(.LABEL__write_55__8)
.LABEL__write_55__8:
  .loc 2 1540 16
  # $22.1: @FILE = call(write_339, file.1, ']')
  mov rdi, [rbp-8]
  mov sil, 93
  call write_339
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $22.1:rax 
  .loc 2 1540 9
  # return($22.1)
  mov [rbp-35], rax
  jmp .LABEL__write_55__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__write_55__9:
  .loc 2 1537 20
  # $15.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $15.1:rbx 
  .loc 2 1537 20
  # $16.1: Boolean = $15.1 < 0
  cmp rbx, 0
  setl r15b
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:r15 
  # jump($16.1, .LABEL__write_55__10, .LABEL__write_55__8)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__write_55__8
.LABEL__write_55__10:
  .loc 2 1538 24
  # $17.1: Int = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] $17.1:rbx 
  .loc 2 1538 13
  # $18.1: @FILE = call(write_336, file.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_336
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # jump(.LABEL__write_55__8)
  jmp .LABEL__write_55__8
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__write_55__6:
  .loc 2 1542 11
  # $23.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  call clone_345
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax 
  .loc 2 1542 46
  # $24.1: @Object_Type = load_struct_member(address.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $24.1:r15 
  .loc 2 1542 46
  # $25.1: @String = load_struct_member_address($24.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $24.1:r15 $25.1:r14 
  .loc 2 1542 11
  # $26.1: @String = call(append_354, $23.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $26.1:rax 
  .loc 2 1542 5
  # call(abort_342, $26.1)
  mov rdi, rax
  call abort_342
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [discarded value]: address.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_55__end:
  mov rsp, rbp
  pop rbp
  ret

write_55__stack_frame_size: .word 48

  .loc 2 1557 1
  .text
get_type_size_56:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_type_size_56__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_type_size_56__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_type.1: @IR_Type = load_variable(ir_type)
  # [live values]: self.1:rdi ir_type.1:rsi 
  .loc 2 1558 9
  # $1.1: Boolean = call(is_343, ir_type.1, IR_Boolean_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Boolean_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_type_size_56__2, .LABEL__get_type_size_56__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_type_size_56__3
.LABEL__get_type_size_56__2:
  .loc 2 1559 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_type_size_56__3:
  .loc 2 1561 9
  # $2.1: Boolean = call(is_343, ir_type.1, IR_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  # jump($2.1, .LABEL__get_type_size_56__5, .LABEL__get_type_size_56__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__get_type_size_56__6
.LABEL__get_type_size_56__5:
  .loc 2 1562 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
.LABEL__get_type_size_56__6:
  .loc 2 1564 9
  # $3.1: Boolean = call(is_343, ir_type.1, IR_Int_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:rax 
  # jump($3.1, .LABEL__get_type_size_56__8, .LABEL__get_type_size_56__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__get_type_size_56__9
.LABEL__get_type_size_56__8:
  .loc 2 1565 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
.LABEL__get_type_size_56__9:
  .loc 2 1567 9
  # $4.1: Boolean = call(is_343, ir_type.1, IR_Int16_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int16_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:rax 
  # jump($4.1, .LABEL__get_type_size_56__11, .LABEL__get_type_size_56__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__get_type_size_56__12
.LABEL__get_type_size_56__11:
  .loc 2 1568 9
  # return(2)
  mov rax, 2
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
.LABEL__get_type_size_56__12:
  .loc 2 1570 9
  # $5.1: Boolean = call(is_343, ir_type.1, IR_Int32_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:rax 
  # jump($5.1, .LABEL__get_type_size_56__14, .LABEL__get_type_size_56__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__get_type_size_56__15
.LABEL__get_type_size_56__14:
  .loc 2 1571 9
  # return(4)
  mov rax, 4
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
.LABEL__get_type_size_56__15:
  .loc 2 1573 9
  # $6.1: Boolean = call(is_343, ir_type.1, IR_Int8_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:rax 
  # jump($6.1, .LABEL__get_type_size_56__17, .LABEL__get_type_size_56__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__get_type_size_56__18
.LABEL__get_type_size_56__17:
  .loc 2 1574 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
.LABEL__get_type_size_56__18:
  .loc 2 1576 9
  # $7.1: Boolean = call(is_343, ir_type.1, IR_Null_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:rax 
  # jump($7.1, .LABEL__get_type_size_56__20, .LABEL__get_type_size_56__21)
  test al, al
  mov [rbp-23], al
  jz .LABEL__get_type_size_56__21
.LABEL__get_type_size_56__20:
  .loc 2 1577 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
.LABEL__get_type_size_56__21:
  .loc 2 1579 9
  # $8.1: Boolean = call(is_343, ir_type.1, IR_Pointer_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:rax 
  # jump($8.1, .LABEL__get_type_size_56__23, .LABEL__get_type_size_56__24)
  test al, al
  mov [rbp-24], al
  jz .LABEL__get_type_size_56__24
.LABEL__get_type_size_56__23:
  .loc 2 1580 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
.LABEL__get_type_size_56__24:
  .loc 2 1582 9
  # $9.1: Boolean = call(is_343, ir_type.1, IR_Struct_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:rax 
  # jump($9.1, .LABEL__get_type_size_56__26, .LABEL__get_type_size_56__27)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_type_size_56__27
.LABEL__get_type_size_56__26:
  .loc 2 1583 20
  # ir_type.1: @IR_Struct_Type = ir_type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax 
  .loc 2 1584 9
  # size.1: Int = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx 
  .loc 2 1585 13
  # $11.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $11.1:r15 
  .loc 2 1585 13
  # $12.1: Boolean = $11.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__get_type_size_56__28, .LABEL__get_type_size_56__29)
  test r14b, r14b
  mov [rbp-33], rax
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__get_type_size_56__29
.LABEL__get_type_size_56__28:
  .loc 2 1586 46
  # $13.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $13.1:rbx 
  .loc 2 1586 27
  # $14.1: Int = call(get_type_size_56, self.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $14.1:rax 
  .loc 2 1586 20
  # $15.1: Int = size.1 + $14.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $15.1:rbx 
  .loc 2 1586 13
  # size.3: Int = $15.1
  mov [rbp-50], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_56__29)
  mov [rbp-41], rbx
.LABEL__get_type_size_56__29:
  # size.8: Int = phi(size.1, size.3)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] 
  .loc 2 1588 32
  # $16.1: @List = load_struct_member(ir_type.1, members)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] $16.1:rbx 
  .loc 2 1588 32
  # struct_type_members.1: @List_Iterator = call(create_iterator_329, $16.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:rax 
  # jump(.LABEL__get_type_size_56__30)
  mov [rbp-50], rax
.LABEL__get_type_size_56__30:
  # size.7: Int = phi(size.8, size.5)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  .loc 2 1589 16
  # $18.1: Boolean = call(has_next_332, struct_type_members.1)
  mov rdi, [rbp-50]
  call has_next_332
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:rax 
  # jump($18.1, .LABEL__get_type_size_56__31, .LABEL__get_type_size_56__32)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_type_size_56__32
.LABEL__get_type_size_56__31:
  .loc 2 1590 35
  # struct_type_member.1: @IR_Struct_Type_Member = call(next_333, struct_type_members.1)
  mov rdi, [rbp-50]
  call next_333
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] struct_type_member.1:rax 
  .loc 2 1591 46
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $21.1:rbx 
  .loc 2 1591 27
  # $22.1: Int = call(get_type_size_56, self.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $22.1:rax 
  .loc 2 1591 20
  # $23.1: Int = size.7 + $22.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $23.1:rbx 
  .loc 2 1591 13
  # size.5: Int = $23.1
  mov [rbp-59], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_56__30)
  mov [rbp-41], rbx
  jmp .LABEL__get_type_size_56__30
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:[rbp-41] 
  # [discarded value]: size.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
.LABEL__get_type_size_56__32:
  .loc 2 1593 9
  # return(size.7)
  mov rax, [rbp-41]
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  # [discarded value]: size.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [discarded value]: struct_type_members.1
  # [discarded value]: size.8
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [discarded value]: size.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] 
  # [discarded value]: size.1
  # [discarded value]: ir_type.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
.LABEL__get_type_size_56__27:
  .loc 2 1595 16
  # $24.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  call clone_345
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax 
  .loc 2 1595 51
  # $25.1: @Object_Type = load_struct_member(ir_type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax $25.1:r15 
  .loc 2 1595 51
  # $26.1: @String = load_struct_member_address($25.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax $25.1:r15 $26.1:r14 
  .loc 2 1595 16
  # $27.1: @String = call(append_354, $24.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $27.1:rax 
  .loc 2 1595 5
  # call(abort_35, self.1, $27.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [discarded value]: ir_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_type_size_56__end:
  mov rsp, rbp
  pop rbp
  ret

get_type_size_56__stack_frame_size: .word 64

  .loc 2 1603 1
  .text
convert_string_57:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_string_57__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_string_57__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # literal.1: @String_Token = load_variable(literal)
  # [live values]: self.1:rdi literal.1:rsi 
  .loc 2 1604 20
  # $1.1: @List = load_struct_member(self.1, strings)
  mov rax, [rdi+169]
  # [live values]: self.1:rdi literal.1:rsi $1.1:rax 
  .loc 2 1604 20
  # string_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi literal.1:rsi string_item.1:rbx 
  # jump(.LABEL__convert_string_57__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__convert_string_57__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.5)
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  .loc 2 1605 12
  # $3.1: Boolean = string_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__convert_string_57__3, .LABEL__convert_string_57__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_string_57__4
.LABEL__convert_string_57__3:
  .loc 2 1606 19
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx 
  .loc 2 1607 13
  # $6.1: @String_Token = load_struct_member(string.1, literal)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $6.1:r15 
  .loc 2 1607 13
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 
  .loc 2 1607 42
  # $8.1: @String = load_struct_member(literal.1, lexeme)
  mov r15, [rbp-16]
  mov r13, [r15+8]
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 $8.1:r13 
  .loc 2 1607 13
  # $9.1: Boolean = call(equals_346, $7.1, $8.1)
  mov rdi, r14
  mov rsi, r13
  mov [rbp-33], rbx
  call equals_346
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__convert_string_57__5, .LABEL__convert_string_57__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_string_57__6
.LABEL__convert_string_57__5:
  .loc 2 1608 13
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_57__end
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__convert_string_57__6:
  .loc 2 1610 23
  # string_item.5: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_string_57__2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_string_57__2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:[rbp-8] 
  # [discarded value]: string_item.5
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
.LABEL__convert_string_57__4:
  .loc 2 1612 34
  # $11.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-24]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $11.1:rbx 
  .loc 2 1612 34
  # $12.1: Int = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $12.1:r15 
  .loc 2 1612 15
  # string.1: @MC_String = new MC_String(id = $12.1, literal = literal.1)
  mov [rbp-33], r15
  mov rdi, 16
  call malloc
  #     .id = $12.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .literal = literal.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax 
  .loc 2 1613 5
  # $14.1: @List = load_struct_member(self.1, strings)
  mov rbx, [rbp-24]
  mov r14, [rbx+169]
  # [live values]: self.1:rbx:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax $14.1:r14 
  .loc 2 1613 5
  # call(append_318, $14.1, string.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-33], rax
  call append_318
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  .loc 2 1614 5
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_57__end
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [discarded value]: string_item.1
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_string_57__end:
  mov rsp, rbp
  pop rbp
  ret

convert_string_57__stack_frame_size: .word 48

  .loc 2 1617 1
  .text
generate_strings_58:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_strings_58__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_strings_58__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1618 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1618 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 2 1618 5
  # $3.1: @FILE = call(write_337, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "  .section .rodata"
  call write_337
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 2 1618 5
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1619 20
  # $5.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-8]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1619 20
  # string_item.1: @List_Item = load_struct_member($5.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] string_item.1:r15 
  # jump(.LABEL__generate_strings_58__2)
  mov [rbp-16], r15
.LABEL__generate_strings_58__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.4)
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  .loc 2 1620 12
  # $7.1: Boolean = string_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:rax 
  # jump($7.1, .LABEL__generate_strings_58__3, .LABEL__generate_strings_58__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_strings_58__4
.LABEL__generate_strings_58__3:
  .loc 2 1621 19
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx 
  .loc 2 1623 9
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-8]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx $10.1:r14 
  .loc 2 1623 9
  # $11.1: @FILE = call(end_line_340, $10.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call end_line_340
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1624 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $12.1:rbx 
  .loc 2 1624 9
  # $13.1: @FILE = call(write_337, $12.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_163[rip] # "  .align 8"
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $13.1:rax 
  .loc 2 1624 9
  # $14.1: @FILE = call(end_line_340, $13.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1625 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $15.1:rbx 
  .loc 2 1625 9
  # $16.1: @FILE = call(write_string_label_59, $15.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $16.1:rax 
  .loc 2 1625 9
  # $17.1: @FILE = call(write_339, $16.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $17.1:rax 
  .loc 2 1625 9
  # $18.1: @FILE = call(end_line_340, $17.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1626 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $19.1:rbx 
  .loc 2 1626 9
  # $20.1: @FILE = call(write_337, $19.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $20.1:rax 
  .loc 2 1626 9
  # $21.1: @FILE = call(write_string_label_59, $20.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $21.1:rax 
  .loc 2 1626 9
  # $22.1: @FILE = call(write_337, $21.1, "__data")
  mov rdi, rax
  lea rsi, .LABEL__string_165[rip] # "__data"
  call write_337
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $22.1:rax 
  .loc 2 1626 9
  # $23.1: @FILE = call(end_line_340, $22.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1627 9
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $24.1:rbx 
  .loc 2 1627 9
  # $25.1: @FILE = call(write_337, $24.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $25.1:rax 
  .loc 2 1627 50
  # $26.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $26.1:r15 
  .loc 2 1627 50
  # $27.1: @String = load_struct_member($26.1, value)
  mov r14, [r15+32]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $27.1:r14 
  .loc 2 1627 50
  # $28.1: Int = load_struct_member($27.1, length)
  mov r15, [r14+16]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $28.1:r15 
  .loc 2 1627 50
  # $29.1: Int = $28.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $29.1:r14 
  .loc 2 1627 9
  # $30.1: @FILE = call(write_336, $25.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $29.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $30.1:rax 
  .loc 2 1627 9
  # $31.1: @FILE = call(end_line_340, $30.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1628 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $32.1:rbx 
  .loc 2 1628 9
  # $33.1: @FILE = call(write_337, $32.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $33.1:rax 
  .loc 2 1628 50
  # $34.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $34.1:r15 
  .loc 2 1628 50
  # $35.1: @String = load_struct_member($34.1, value)
  mov r14, [r15+32]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $35.1:r14 
  .loc 2 1628 50
  # $36.1: Int = load_struct_member($35.1, length)
  mov r15, [r14+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $36.1:r15 
  .loc 2 1628 9
  # $37.1: @FILE = call(write_336, $33.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $36.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $37.1:rax 
  .loc 2 1628 9
  # $38.1: @FILE = call(end_line_340, $37.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1629 9
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $39.1:rbx 
  .loc 2 1629 9
  # $40.1: @FILE = call(write_string_label_59, $39.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $40.1:rax 
  .loc 2 1629 9
  # $41.1: @FILE = call(write_337, $40.1, "__data: .string ")
  mov rdi, rax
  lea rsi, .LABEL__string_166[rip] # "__data: .string "
  call write_337
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $41.1:rax 
  .loc 2 1629 85
  # $42.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $42.1:r15 
  .loc 2 1629 85
  # $43.1: @String = load_struct_member($42.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $43.1:rbx 
  .loc 2 1629 9
  # $44.1: @FILE = call(write_337, $41.1, $43.1)
  mov rdi, rax
  mov rsi, rbx
  call write_337
  # [discarded value]: $43.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $44.1:rax 
  .loc 2 1629 9
  # $45.1: @FILE = call(end_line_340, $44.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  .loc 2 1631 23
  # string_item.4: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:rbx:[rbp-16] 
  # jump(.LABEL__generate_strings_58__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_strings_58__2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:[rbp-16] 
  # [discarded value]: string_item.4
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
.LABEL__generate_strings_58__4:
  # return()
  jmp .LABEL__generate_strings_58__end
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [discarded value]: string_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_strings_58__end:
  mov rsp, rbp
  pop rbp
  ret

generate_strings_58__stack_frame_size: .word 32

  .loc 2 1635 1
  .text
write_string_label_59:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_string_label_59__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_string_label_59__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @MC_String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 2 1636 12
  # $1.1: @FILE = call(write_337, file.1, ".LABEL__string_")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_167[rip] # ".LABEL__string_"
  call write_337
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 2 1636 48
  # $2.1: Int = load_struct_member(string.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: string.1
  # [live values]: $1.1:rax $2.1:r15 
  .loc 2 1636 12
  # $3.1: @FILE = call(write_336, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 2 1636 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__write_string_label_59__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__write_string_label_59__end:
  mov rsp, rbp
  pop rbp
  ret

write_string_label_59__stack_frame_size: .word 16

  .loc 2 1639 1
  .text
generate_object_types_60:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_object_types_60__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_object_types_60__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # types.1: @List = load_variable(types)
  # [live values]: self.1:rdi types.1:rsi 
  .loc 2 1640 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi types.1:rsi $1.1:rax 
  .loc 2 1640 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  .loc 2 1640 5
  # $3.1: @FILE = call(write_337, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_162[rip] # "  .section .rodata"
  call write_337
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  .loc 2 1640 5
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  .loc 2 1641 18
  # type_item.1: @List_Item = load_struct_member(types.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-8] type_item.1:rbx 
  # jump(.LABEL__generate_object_types_60__2)
  mov [rbp-16], rbx
.LABEL__generate_object_types_60__2:
  # type_item.2: @List_Item = phi(type_item.1, type_item.5)
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  .loc 2 1642 12
  # $6.1: Boolean = type_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__generate_object_types_60__3, .LABEL__generate_object_types_60__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_object_types_60__4
.LABEL__generate_object_types_60__3:
  .loc 2 1643 17
  # type.1: @IR_Type = load_struct_member(type_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] $6.1:[rbp-17] type.1:rbx 
  .loc 2 1644 13
  # $9.1: Boolean = call(is_343, type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-25], rbx
  call is_343
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__generate_object_types_60__5, .LABEL__generate_object_types_60__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_object_types_60__6
.LABEL__generate_object_types_60__5:
  .loc 2 1645 21
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-25]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax 
  .loc 2 1646 17
  # $11.1: Boolean = call(is_object_type_152, type.1)
  mov rdi, rax
  mov [rbp-34], rax
  call is_object_type_152
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__generate_object_types_60__7, .LABEL__generate_object_types_60__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_object_types_60__6
.LABEL__generate_object_types_60__7:
  .loc 2 1647 17
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $12.1:rbx 
  .loc 2 1647 17
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rbx
  call end_line_340
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1648 17
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $14.1:rbx 
  .loc 2 1648 17
  # $15.1: @FILE = call(write_337, $14.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_163[rip] # "  .align 8"
  call write_337
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $15.1:rax 
  .loc 2 1648 17
  # $16.1: @FILE = call(end_line_340, $15.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1649 17
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  .loc 2 1649 17
  # $18.1: @FILE = call(write_type_label_61, $17.1, type.1)
  mov rdi, rbx
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  .loc 2 1649 17
  # $19.1: @FILE = call(write_339, $18.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $19.1:rax 
  .loc 2 1649 17
  # $20.1: @FILE = call(end_line_340, $19.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1650 17
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $21.1:rbx 
  .loc 2 1650 17
  # $22.1: @FILE = call(write_337, $21.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_168[rip] # "  .quad .LABEL__"
  call write_337
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $22.1:rax 
  .loc 2 1650 17
  # $23.1: @FILE = call(write_type_label_61, $22.1, type.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $23.1:rax 
  .loc 2 1650 17
  # $24.1: @FILE = call(write_337, $23.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_169[rip] # "__object_type"
  call write_337
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $24.1:rax 
  .loc 2 1650 17
  # $25.1: @FILE = call(end_line_340, $24.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1651 17
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $26.1:rbx 
  .loc 2 1651 17
  # $27.1: @FILE = call(write_337, $26.1, ".LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_337
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $27.1:rax 
  .loc 2 1651 17
  # $28.1: @FILE = call(write_type_label_61, $27.1, type.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $28.1:rax 
  .loc 2 1651 17
  # $29.1: @FILE = call(write_337, $28.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_169[rip] # "__object_type"
  call write_337
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $29.1:rax 
  .loc 2 1651 17
  # $30.1: @FILE = call(write_339, $29.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $30.1:rax 
  .loc 2 1651 17
  # $31.1: @FILE = call(end_line_340, $30.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1652 17
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $32.1:rbx 
  .loc 2 1652 17
  # $33.1: @FILE = call(write_337, $32.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $33.1:rax 
  .loc 2 1652 17
  # $34.1: @FILE = call(write_336, $33.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_336
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $34.1:rax 
  .loc 2 1652 17
  # $35.1: @FILE = call(end_line_340, $34.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1653 17
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $36.1:rbx 
  .loc 2 1653 17
  # $37.1: @FILE = call(write_337, $36.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_168[rip] # "  .quad .LABEL__"
  call write_337
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $37.1:rax 
  .loc 2 1653 66
  # $38.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $37.1:rax $38.1:r15 
  .loc 2 1653 17
  # $39.1: @FILE = call(write_337, $37.1, $38.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $39.1:rax 
  .loc 2 1653 17
  # $40.1: @FILE = call(write_337, $39.1, "__object_type__name__data")
  mov rdi, rax
  lea rsi, .LABEL__string_170[rip] # "__object_type__name__data"
  call write_337
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $40.1:rax 
  .loc 2 1653 17
  # $41.1: @FILE = call(end_line_340, $40.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1654 17
  # $42.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $42.1:rbx 
  .loc 2 1654 17
  # $43.1: @FILE = call(write_337, $42.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $43.1:rax 
  .loc 2 1654 58
  # $44.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $44.1:r15 
  .loc 2 1654 58
  # $45.1: Int = load_struct_member($44.1, length)
  mov r14, [r15+16]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $45.1:r14 
  .loc 2 1654 58
  # $46.1: Int = $45.1 + 1
  mov r15, r14
  add r15, 1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $46.1:r15 
  .loc 2 1654 17
  # $47.1: @FILE = call(write_336, $43.1, $46.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $46.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $47.1:rax 
  .loc 2 1654 17
  # $48.1: @FILE = call(end_line_340, $47.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1655 17
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $49.1:rbx 
  .loc 2 1655 17
  # $50.1: @FILE = call(write_337, $49.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_164[rip] # "  .quad "
  call write_337
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $50.1:rax 
  .loc 2 1655 58
  # $51.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $50.1:rax $51.1:r15 
  .loc 2 1655 58
  # $52.1: Int = load_struct_member($51.1, length)
  mov r14, [r15+16]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $50.1:rax $52.1:r14 
  .loc 2 1655 17
  # $53.1: @FILE = call(write_336, $50.1, $52.1)
  mov rdi, rax
  mov rsi, r14
  call write_336
  # [discarded value]: $52.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $53.1:rax 
  .loc 2 1655 17
  # $54.1: @FILE = call(end_line_340, $53.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1656 21
  # $55.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $55.1:rbx 
  .loc 2 1656 21
  # $56.1: Boolean = $55.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $56.1:r15 
  # jump($56.1, .LABEL__generate_object_types_60__9, .LABEL__generate_object_types_60__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_object_types_60__11
.LABEL__generate_object_types_60__9:
  .loc 2 1657 21
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $60.1:rbx 
  .loc 2 1657 21
  # $61.1: @FILE = call(write_337, $60.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_168[rip] # "  .quad .LABEL__"
  call write_337
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax 
  .loc 2 1657 70
  # $62.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax $62.1:r15 
  .loc 2 1657 70
  # $63.1: @String = load_struct_member($62.1, name)
  mov r14, [r15+8]
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax $63.1:r14 
  .loc 2 1657 21
  # $64.1: @FILE = call(write_337, $61.1, $63.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $63.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $64.1:rax 
  .loc 2 1657 21
  # $65.1: @FILE = call(write_337, $64.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_169[rip] # "__object_type"
  call write_337
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $65.1:rax 
  .loc 2 1657 21
  # $66.1: @FILE = call(end_line_340, $65.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__10)
.LABEL__generate_object_types_60__10:
  .loc 2 1661 17
  # $67.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $67.1:rbx 
  .loc 2 1661 17
  # $68.1: @FILE = call(write_337, $67.1, ".LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_337
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $68.1:rax 
  .loc 2 1661 58
  # $69.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $68.1:rax $69.1:r15 
  .loc 2 1661 17
  # $70.1: @FILE = call(write_337, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $70.1:rax 
  .loc 2 1661 17
  # $71.1: @FILE = call(write_337, $70.1, "__object_type__name__data: .string \"")
  mov rdi, rax
  lea rsi, .LABEL__string_171[rip] # "__object_type__name__data: .string \""
  call write_337
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $71.1:rax 
  .loc 2 1661 122
  # $72.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $71.1:rax $72.1:r15 
  .loc 2 1661 17
  # $73.1: @FILE = call(write_337, $71.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $73.1:rax 
  .loc 2 1661 17
  # $74.1: @FILE = call(write_339, $73.1, '"')
  mov rdi, rax
  mov sil, 34
  call write_339
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $74.1:rax 
  .loc 2 1661 17
  # $75.1: @FILE = call(end_line_340, $74.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__6)
.LABEL__generate_object_types_60__6:
  .loc 2 1664 21
  # type_item.5: @List_Item = load_struct_member(type_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:rbx:[rbp-16] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_object_types_60__2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:[rbp-16] $56.1:[rbp-36] 
  # [discarded value]: type_item.5
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
.LABEL__generate_object_types_60__11:
  .loc 2 1659 21
  # $57.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $57.1:rbx 
  .loc 2 1659 21
  # $58.1: @FILE = call(write_337, $57.1, "  .quad 0")
  mov rdi, rbx
  lea rsi, .LABEL__string_172[rip] # "  .quad 0"
  call write_337
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $58.1:rax 
  .loc 2 1659 21
  # $59.1: @FILE = call(end_line_340, $58.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__10)
  jmp .LABEL__generate_object_types_60__10
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
.LABEL__generate_object_types_60__4:
  # return()
  jmp .LABEL__generate_object_types_60__end
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [discarded value]: type_item.2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [discarded value]: type_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_object_types_60__end:
  mov rsp, rbp
  pop rbp
  ret

generate_object_types_60__stack_frame_size: .word 48

  .loc 2 1668 1
  .text
write_type_label_61:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_type_label_61__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_type_label_61__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  .loc 2 1669 23
  # $1.1: @String = load_struct_member(type.1, name)
  mov rax, [rsi+8]
  # [discarded value]: type.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 2 1669 12
  # $2.1: @FILE = call(write_337, file.1, $1.1)
  mov rsi, rax
  call write_337
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: $2.1:rax 
  .loc 2 1669 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_type_label_61__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_type_label_61__end:
  mov rsp, rbp
  pop rbp
  ret

write_type_label_61__stack_frame_size: .word 16

  .loc 2 1672 1
  .text
generate_global_variables_62:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_global_variables_62__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_global_variables_62__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # variables.1: @List = load_variable(variables)
  # [live values]: self.1:rdi variables.1:rsi 
  .loc 2 1673 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi variables.1:rsi $1.1:rax 
  .loc 2 1673 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] $2.1:rax 
  .loc 2 1673 5
  # $3.1: @FILE = call(write_337, $2.1, "  .bss")
  mov rdi, rax
  lea rsi, .LABEL__string_173[rip] # "  .bss"
  call write_337
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] $3.1:rax 
  .loc 2 1673 5
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] 
  .loc 2 1675 23
  # variables_item.1: @List_Item = load_struct_member(variables.1, last_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: variables.1
  # [live values]: self.1:[rbp-8] variables_item.1:rbx 
  # jump(.LABEL__generate_global_variables_62__2)
  mov [rbp-16], rbx
.LABEL__generate_global_variables_62__2:
  # variables_item.2: @List_Item = phi(variables_item.1, variables_item.5)
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] 
  .loc 2 1676 12
  # $6.1: Boolean = variables_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__generate_global_variables_62__3, .LABEL__generate_global_variables_62__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_global_variables_62__4
.LABEL__generate_global_variables_62__3:
  .loc 2 1677 21
  # variable.1: @IR_Variable = load_struct_member(variables_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:rax:[rbp-16] $6.1:[rbp-17] variable.1:rbx 
  .loc 2 1678 13
  # $9.1: Boolean = call(is_343, variable.1, IR_Global_Variable)
  mov rdi, rbx
  mov rsi, IR_Global_Variable[rip]
  mov [rbp-25], rbx
  call is_343
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $9.1:rax 
  .loc 2 1678 13
  # $10.1: Boolean = $9.1 == null
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:rbx 
  # jump($10.1, .LABEL__generate_global_variables_62__5, .LABEL__generate_global_variables_62__6)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_global_variables_62__6
.LABEL__generate_global_variables_62__5:
  .loc 2 1679 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__generate_global_variables_62__6:
  .loc 2 1681 21
  # variable.1: @IR_Global_Variable = variable.1
  mov rax, [rbp-25]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax 
  .loc 2 1682 13
  # $12.1: Boolean = load_struct_member(variable.1, is_external)
  mov bl, [rax+48]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax $12.1:rbx 
  .loc 2 1682 13
  # $13.1: Boolean = $12.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax $13.1:r15 
  # jump($13.1, .LABEL__generate_global_variables_62__7, .LABEL__generate_global_variables_62__8)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__generate_global_variables_62__8
.LABEL__generate_global_variables_62__7:
  .loc 2 1683 17
  # $14.1: @IR_Value = load_struct_member(variable.1, value)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax:[rbp-34] $13.1:[rbp-35] $14.1:rbx 
  .loc 2 1683 17
  # $15.1: Boolean = call(is_343, $14.1, IR_Undefined_Value)
  mov rdi, rbx
  mov rsi, IR_Undefined_Value[rip]
  call is_343
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $15.1:rax 
  .loc 2 1683 17
  # $16.1: Boolean = $15.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:rbx 
  # jump($16.1, .LABEL__generate_global_variables_62__9, .LABEL__generate_global_variables_62__10)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__generate_global_variables_62__10
.LABEL__generate_global_variables_62__9:
  .loc 2 1684 17
  # call(abort_35, self.1, "Global variables must be declared as undefined for now")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_174[rip] # "Global variables must be declared as undefined for now"
  call abort_35
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
.LABEL__generate_global_variables_62__10:
  .loc 2 1686 13
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $17.1:rbx 
  .loc 2 1686 13
  # $18.1: @FILE = call(end_line_340, $17.1)
  mov rdi, rbx
  call end_line_340
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1687 13
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $19.1:rbx 
  .loc 2 1687 13
  # $20.1: @FILE = call(write_337, $19.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_163[rip] # "  .align 8"
  call write_337
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $20.1:rax 
  .loc 2 1687 13
  # $21.1: @FILE = call(end_line_340, $20.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1688 13
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $22.1:rbx 
  .loc 2 1688 36
  # $23.1: @String = load_struct_member(variable.1, name)
  mov r15, [rbp-34]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:r15:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $22.1:rbx $23.1:r14 
  .loc 2 1688 13
  # $24.1: @FILE = call(write_337, $22.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call write_337
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $24.1:rax 
  .loc 2 1688 13
  # $25.1: @FILE = call(write_339, $24.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $25.1:rax 
  .loc 2 1688 13
  # $26.1: @FILE = call(end_line_340, $25.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1689 13
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $27.1:rbx 
  .loc 2 1689 13
  # $28.1: @FILE = call(write_337, $27.1, "  .skip ")
  mov rdi, rbx
  lea rsi, .LABEL__string_175[rip] # "  .skip "
  call write_337
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:rax 
  .loc 2 1689 73
  # $29.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-34]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rbx:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:rax $29.1:r15 
  .loc 2 1689 54
  # $30.1: Int = call(get_type_size_56, self.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-44], rax
  call get_type_size_56
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:[rbp-44] $30.1:rax 
  .loc 2 1689 13
  # $31.1: @FILE = call(write_336, $28.1, $30.1)
  mov rdi, [rbp-44]
  mov rsi, rax
  call write_336
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $31.1:rax 
  .loc 2 1689 13
  # $32.1: @FILE = call(end_line_340, $31.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # jump(.LABEL__generate_global_variables_62__8)
.LABEL__generate_global_variables_62__8:
  .loc 2 1691 26
  # variables_item.5: @List_Item = load_struct_member(variables_item.2, prev_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] variables_item.5:rbx:[rbp-16] 
  # jump(.LABEL__generate_global_variables_62__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_global_variables_62__2
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] variables_item.5:[rbp-16] 
  # [discarded value]: variables_item.5
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] 
.LABEL__generate_global_variables_62__4:
  # return()
  jmp .LABEL__generate_global_variables_62__end
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] 
  # [discarded value]: variables_item.2
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] 
  # [discarded value]: variables_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_global_variables_62__end:
  mov rsp, rbp
  pop rbp
  ret

generate_global_variables_62__stack_frame_size: .word 48

  .loc 3 3 1
  .text
build_63:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_63__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_63__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 4 16
  # builder.1: @IR_Builder = call(create_ir_builder_65, compilation_unit.1)
  mov [rbp-8], rdi
  call create_ir_builder_65
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  .loc 3 5 5
  # call(build_78, builder.1)
  mov rdi, rax
  mov [rbp-16], rax
  call build_78
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] 
  .loc 3 7 19
  # $2.1: @List = load_struct_member(compilation_unit.1, sources)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:[rbp-16] $2.1:rbx 
  .loc 3 8 27
  # $3.1: @List = load_struct_member(builder.1, named_functions)
  mov rax, [rbp-16]
  mov r15, [rax+24]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 3 9 23
  # $4.1: @List = load_struct_member(builder.1, named_types)
  mov r14, [rax+16]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 3 10 28
  # $5.1: @IR_Builder_Context = load_struct_member(builder.1, context)
  mov r13, [rax]
  # [discarded value]: builder.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 $5.1:r13 
  .loc 3 10 28
  # $6.1: @List = load_struct_member($5.1, variables)
  mov rax, [r13+8]
  # [discarded value]: $5.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 $6.1:rax 
  .loc 3 6 12
  # $7.1: @IR_Build = new IR_Build(sources = $2.1, named_functions = $3.1, named_types = $4.1, global_variables = $6.1)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], r14
  mov [rbp-32], r15
  mov rdi, 32
  call malloc
  #     .sources = $2.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .named_functions = $3.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  #     .named_types = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  #     .global_variables = $6.1
  mov r13, [rbp-8]
  mov QWORD PTR [rax+24], r13
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $7.1:rax 
  .loc 3 6 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__build_63__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__build_63__end:
  mov rsp, rbp
  pop rbp
  ret

build_63__stack_frame_size: .word 32

  .loc 3 21 1
  .text
dump_64:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_64__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_64__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: build.1:rdi file.1:rsi 
  .loc 3 22 18
  # $1.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rdi+8]
  # [discarded value]: build.1
  # [live values]: file.1:rsi $1.1:rax 
  .loc 3 22 18
  # functions.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] functions.1:rax 
  # jump(.LABEL__dump_64__2)
  mov [rbp-16], rax
.LABEL__dump_64__2:
  .loc 3 23 12
  # $3.1: Boolean = call(has_next_332, functions.1)
  mov rdi, [rbp-16]
  call has_next_332
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__dump_64__3, .LABEL__dump_64__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__dump_64__4
.LABEL__dump_64__3:
  .loc 3 24 21
  # function.1: @IR_Function = call(next_333, functions.1)
  mov rdi, [rbp-16]
  call next_333
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax 
  .loc 3 25 13
  # $6.1: Boolean = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $6.1:rbx 
  .loc 3 25 13
  # $7.1: Boolean = $6.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $7.1:r15 
  # jump($7.1, .LABEL__dump_64__5, .LABEL__dump_64__2)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__dump_64__2
.LABEL__dump_64__5:
  .loc 3 26 13
  # call(dump_174, function.1, file.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call dump_174
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  .loc 3 27 13
  # $8.1: @FILE = call(end_line_340, file.1)
  mov rdi, [rbp-8]
  call end_line_340
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # jump(.LABEL__dump_64__2)
  jmp .LABEL__dump_64__2
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] 
  # [discarded value]: function.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__dump_64__4:
  # return()
  jmp .LABEL__dump_64__end
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [discarded value]: functions.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_64__end:
  mov rsp, rbp
  pop rbp
  ret

dump_64__stack_frame_size: .word 32

  .loc 3 53 1
  .text
create_ir_builder_65:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_65__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_65__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 54 20
  # named_types.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:rax 
  .loc 3 55 24
  # $2.1: @IR_Any_Type = new IR_Any_Type(object_type = IR_Any_Type, name = "Any")
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  #     .object_type = IR_Any_Type
  mov rbx, IR_Any_Type[rip]
  mov [rax], rbx
  #     .name = "Any"
  lea rbx, .LABEL__string_176[rip] # "Any"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $2.1:rax 
  .loc 3 55 5
  # call(append_318, named_types.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $2.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 56 24
  # $3.1: @IR_Boolean_Type = new IR_Boolean_Type(object_type = IR_Boolean_Type, name = "Boolean")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Boolean_Type
  mov rbx, IR_Boolean_Type[rip]
  mov [rax], rbx
  #     .name = "Boolean"
  lea rbx, .LABEL__string_177[rip] # "Boolean"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  .loc 3 56 5
  # call(append_318, named_types.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $3.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 57 24
  # $4.1: @IR_Int_Type = new IR_Int_Type(object_type = IR_Int_Type, name = "Int")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int_Type
  mov rbx, IR_Int_Type[rip]
  mov [rax], rbx
  #     .name = "Int"
  lea rbx, .LABEL__string_178[rip] # "Int"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $4.1:rax 
  .loc 3 57 5
  # call(append_318, named_types.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $4.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 58 24
  # $5.1: @IR_Int8_Type = new IR_Int8_Type(object_type = IR_Int8_Type, name = "Int8")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int8_Type
  mov rbx, IR_Int8_Type[rip]
  mov [rax], rbx
  #     .name = "Int8"
  lea rbx, .LABEL__string_179[rip] # "Int8"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $5.1:rax 
  .loc 3 58 5
  # call(append_318, named_types.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $5.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 59 24
  # $6.1: @IR_Int16_Type = new IR_Int16_Type(object_type = IR_Int16_Type, name = "Int16")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int16_Type
  mov rbx, IR_Int16_Type[rip]
  mov [rax], rbx
  #     .name = "Int16"
  lea rbx, .LABEL__string_180[rip] # "Int16"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $6.1:rax 
  .loc 3 59 5
  # call(append_318, named_types.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $6.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 60 24
  # $7.1: @IR_Int32_Type = new IR_Int32_Type(object_type = IR_Int32_Type, name = "Int32")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int32_Type
  mov rbx, IR_Int32_Type[rip]
  mov [rax], rbx
  #     .name = "Int32"
  lea rbx, .LABEL__string_181[rip] # "Int32"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $7.1:rax 
  .loc 3 60 5
  # call(append_318, named_types.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $7.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 61 24
  # $8.1: @IR_Int64_Type = new IR_Int64_Type(object_type = IR_Int64_Type, name = "Int64")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int64_Type
  mov rbx, IR_Int64_Type[rip]
  mov [rax], rbx
  #     .name = "Int64"
  lea rbx, .LABEL__string_182[rip] # "Int64"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $8.1:rax 
  .loc 3 61 5
  # call(append_318, named_types.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $8.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 62 24
  # $9.1: @IR_Nothing_Type = new IR_Nothing_Type(object_type = IR_Nothing_Type, name = "Nothing")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Nothing_Type
  mov rbx, IR_Nothing_Type[rip]
  mov [rax], rbx
  #     .name = "Nothing"
  lea rbx, .LABEL__string_183[rip] # "Nothing"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $9.1:rax 
  .loc 3 62 5
  # call(append_318, named_types.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $9.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 63 24
  # $10.1: @IR_Null_Type = new IR_Null_Type(object_type = IR_Null_Type, name = "Null")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Null_Type
  mov rbx, IR_Null_Type[rip]
  mov [rax], rbx
  #     .name = "Null"
  lea rbx, .LABEL__string_184[rip] # "Null"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $10.1:rax 
  .loc 3 63 5
  # call(append_318, named_types.1, $10.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $10.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 64 24
  # $11.1: @IR_Undefined_Type = new IR_Undefined_Type(object_type = IR_Undefined_Type, name = "Undefined")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Undefined_Type
  mov rbx, IR_Undefined_Type[rip]
  mov [rax], rbx
  #     .name = "Undefined"
  lea rbx, .LABEL__string_185[rip] # "Undefined"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $11.1:rax 
  .loc 3 64 5
  # call(append_318, named_types.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_318
  # [discarded value]: $11.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] 
  .loc 3 44 24
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:rax 
  .loc 3 45 27
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  .loc 3 66 19
  # $14.1: @IR_Builder_Context = new IR_Builder_Context(parent = null, variables = $12.1, named_values = $13.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .parent = null
  mov QWORD PTR [rax], 0
  #     .variables = $12.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .named_values = $13.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:rax 
  .loc 3 36 30
  # $15.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  .loc 3 39 25
  # $16.1: @Counter = new Counter(value = 0)
  mov [rbp-32], rax
  mov rdi, 8
  call malloc
  #     .value = 0
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] named_types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  .loc 3 65 12
  # $17.1: @IR_Builder = new IR_Builder(context = $14.1, compilation_unit = compilation_unit.1, named_types = named_types.1, named_functions = $15.1, current_block = null, current_loop = null, counter = $16.1)
  mov [rbp-40], rax
  mov rdi, 56
  call malloc
  #     .context = $14.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .compilation_unit = compilation_unit.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+8], r15
  #     .named_types = named_types.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+16], r14
  #     .named_functions = $15.1
  mov r13, [rbp-32]
  mov QWORD PTR [rax+24], r13
  #     .current_block = null
  mov QWORD PTR [rax+32], 0
  #     .current_loop = null
  mov QWORD PTR [rax+40], 0
  #     .counter = $16.1
  mov r12, [rbp-40]
  mov QWORD PTR [rax+48], r12
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: named_types.1
  # [discarded value]: compilation_unit.1
  # [live values]: $17.1:rax 
  .loc 3 65 5
  # return($17.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_builder_65__end
  # [discarded value]: $17.1
  # [live values]: 
.LABEL__create_ir_builder_65__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_65__stack_frame_size: .word 48

  .loc 3 72 1
  .text
get_named_type_66:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_type_66__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_type_66__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 73 20
  # $1.1: @List = load_struct_member(self.1, named_types)
  mov rax, [rdi+16]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  .loc 3 73 20
  # named_types.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-8] named_types.1:rax 
  # jump(.LABEL__get_named_type_66__2)
  mov [rbp-16], rax
.LABEL__get_named_type_66__2:
  .loc 3 74 12
  # $3.1: Boolean = call(has_next_332, named_types.1)
  mov rdi, [rbp-16]
  call has_next_332
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__get_named_type_66__3, .LABEL__get_named_type_66__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_type_66__4
.LABEL__get_named_type_66__3:
  .loc 3 75 23
  # named_type.1: @IR_Type = call(next_333, named_types.1)
  mov rdi, [rbp-16]
  call next_333
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:rax 
  .loc 3 76 25
  # $6.1: @String = load_struct_member(named_type.1, name)
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:rax $6.1:rbx 
  .loc 3 76 13
  # $7.1: Boolean = call(equals_346, name.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-25], rax
  call equals_346
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__get_named_type_66__5, .LABEL__get_named_type_66__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_type_66__2
.LABEL__get_named_type_66__5:
  .loc 3 77 13
  # return(named_type.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_type_66__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] named_type.1:[rbp-25] 
  # [discarded value]: named_type.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__get_named_type_66__4:
  .loc 3 80 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_type_66__end
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [live values]: name.1:[rbp-8] named_types.1:[rbp-16] 
  # [discarded value]: named_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_type_66__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_type_66__stack_frame_size: .word 32

  .loc 3 83 1
  .text
add_variable_67:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_variable_67__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_variable_67__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 3 84 5
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 3 84 5
  # $2.1: @List = load_struct_member($1.1, variables)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: variable.1:rsi $2.1:rbx 
  .loc 3 84 5
  # call(prepend_319, $2.1, variable.1)
  mov rdi, rbx
  mov [rbp-8], rsi
  call prepend_319
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-8] 
  .loc 3 85 5
  # return(variable.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_variable_67__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__add_variable_67__end:
  mov rsp, rbp
  pop rbp
  ret

add_variable_67__stack_frame_size: .word 16

  .loc 3 88 1
  .text
get_variable_68:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_68__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_68__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 89 16
  # context.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: name.1:rsi context.1:rax 
  # jump(.LABEL__get_variable_68__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_variable_68__2:
  # context.2: @IR_Builder_Context = phi(context.1, context.4)
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] 
  .loc 3 91 22
  # $2.1: @List = load_struct_member(context.2, variables)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:rax:[rbp-8] $2.1:rbx 
  .loc 3 91 22
  # variables.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:rax 
  # jump(.LABEL__get_variable_68__4)
  mov [rbp-24], rax
.LABEL__get_variable_68__4:
  .loc 3 92 16
  # $4.1: Boolean = call(has_next_332, variables.1)
  mov rdi, [rbp-24]
  call has_next_332
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__get_variable_68__5, .LABEL__get_variable_68__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_variable_68__6
.LABEL__get_variable_68__5:
  .loc 3 93 25
  # variable.1: @IR_Variable = call(next_333, variables.1)
  mov rdi, [rbp-24]
  call next_333
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax 
  .loc 3 94 29
  # $7.1: @String = load_struct_member(variable.1, name)
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax $7.1:rbx 
  .loc 3 94 17
  # $8.1: Boolean = call(equals_346, name.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call equals_346
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_68__7, .LABEL__get_variable_68__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_variable_68__4
.LABEL__get_variable_68__7:
  .loc 3 95 17
  # return(variable.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_variable_68__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] 
  # [discarded value]: variable.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__get_variable_68__6:
  .loc 3 98 19
  # context.4: @IR_Builder_Context = load_struct_member(context.2, parent)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] 
  .loc 3 99 13
  # $10.1: Boolean = context.4 == null
  cmp rbx, 0
  sete al
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] $10.1:rax 
  # jump($10.1, .LABEL__get_variable_68__10, .LABEL__get_variable_68__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-8], rbx
  jz .LABEL__get_variable_68__2
.LABEL__get_variable_68__10:
  .loc 3 100 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_variable_68__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] 
  # [discarded value]: context.4
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [discarded value]: variables.1
  # [discarded value]: context.2
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [discarded value]: context.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_variable_68__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_68__stack_frame_size: .word 48

  .loc 3 105 1
  .text
get_variable_value_69:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_69__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_69__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 3 106 9
  # $1.1: Boolean = call(is_343, variable.1, IR_Global_Variable)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Global_Variable[rip]
  call is_343
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_variable_value_69__2, .LABEL__get_variable_value_69__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_variable_value_69__3
.LABEL__get_variable_value_69__2:
  .loc 3 107 52
  # $2.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] variable.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx 
  .loc 5 159 32
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-25] $3.1:rax 
  .loc 5 160 20
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:rax 
  .loc 3 107 16
  # $5.1: @IR_Global_Variable_Value = new IR_Global_Variable_Value(object_type = IR_Global_Variable_Value, type = $2.1, variable = variable.1, dump = dump_ir_global_variable_value_160.address, creator_instruction = null, user_instructions = $3.1, links = $4.1)
  mov [rbp-41], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Value
  mov rbx, IR_Global_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $2.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $3.1
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  #     .links = $4.1
  mov r14, [rbp-41]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_global_variable_value_160.address
  lea r13, dump_ir_global_variable_value_160[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-16]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variable.1:r13:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 3 107 9
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__get_variable_value_69__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_variable_value_69__3:
  .loc 3 109 34
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $6.1:rbx 
  .loc 3 109 34
  # current_block_instruction.1: @IR_Instruction = load_struct_member($6.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:r15 
  # jump(.LABEL__get_variable_value_69__5)
  mov [rbp-25], r15
.LABEL__get_variable_value_69__5:
  # current_block_instruction.2: @IR_Instruction = phi(current_block_instruction.1, current_block_instruction.7)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  .loc 3 110 12
  # $8.1: Boolean = current_block_instruction.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_value_69__6, .LABEL__get_variable_value_69__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_variable_value_69__7
.LABEL__get_variable_value_69__6:
  .loc 3 111 13
  # $9.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $9.1:rbx 
  .loc 3 111 13
  # $10.1: Boolean = $9.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $10.1:r15 
  .loc 3 111 13
  # $11.1: Boolean = $10.1
  mov [rbp-27], r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:r15 
  # jump($11.1, .LABEL__get_variable_value_69__8, .LABEL__get_variable_value_69__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__get_variable_value_69__9
.LABEL__get_variable_value_69__8:
  .loc 3 111 63
  # $12.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:rbx 
  .loc 3 111 63
  # $13.1: @IR_Variable = load_struct_member($12.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $13.1:r15 
  .loc 3 111 63
  # $14.1: Boolean = $13.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $14.1:rbx 
  .loc 3 111 13
  # $11.2: Boolean = $14.1
  mov [rbp-28], bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:rbx:[rbp-27] 
  # jump(.LABEL__get_variable_value_69__9)
  mov [rbp-27], bl
.LABEL__get_variable_value_69__9:
  .loc 3 111 13
  # $11.3: Boolean = phi($11.1, $11.2)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # jump($11.3, .LABEL__get_variable_value_69__10, .LABEL__get_variable_value_69__11)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__get_variable_value_69__11
.LABEL__get_variable_value_69__10:
  .loc 3 112 20
  # $15.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] $15.1:rbx 
  .loc 3 112 13
  # return($15.1)
  mov rax, rbx
  mov [rbp-35], rbx
  jmp .LABEL__get_variable_value_69__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
.LABEL__get_variable_value_69__11:
  .loc 3 114 37
  # current_block_instruction.7: @IR_Instruction = load_struct_member(current_block_instruction.2, prev_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:rbx:[rbp-25] 
  # jump(.LABEL__get_variable_value_69__5)
  mov [rbp-25], rbx
  jmp .LABEL__get_variable_value_69__5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:[rbp-25] 
  # [discarded value]: current_block_instruction.7
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
.LABEL__get_variable_value_69__7:
  .loc 3 116 20
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:rbx 
  .loc 3 116 73
  # $18.1: @IR_Variable_Value = call(create_variable_value_70, self.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-34], rbx
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $18.1:rax 
  .loc 3 116 47
  # $19.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $19.1:rax 
  .loc 3 116 20
  # instruction.1: @IR_Instruction = call(prepend_167, $17.1, $19.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call prepend_167
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] instruction.1:rax 
  .loc 3 117 12
  # $21.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $21.1:rbx 
  .loc 3 117 5
  # return($21.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_variable_value_69__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  # [discarded value]: current_block_instruction.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [discarded value]: current_block_instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_variable_value_69__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_69__stack_frame_size: .word 48

  .loc 3 120 1
  .text
create_variable_value_70:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_variable_value_70__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_variable_value_70__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: variable.1:rsi 
  .loc 3 121 41
  # $1.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rsi+24]
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 5 159 32
  # $2.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 160 20
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 3 121 12
  # $4.1: @IR_Variable_Value = new IR_Variable_Value(object_type = IR_Variable_Value, type = $1.1, variable = undefined, version = undefined, dump = dump_ir_variable_value_163.address, creator_instruction = null, user_instructions = $2.1, links = $3.1)
  mov [rbp-32], rax
  mov rdi, 64
  call malloc
  #     .object_type = IR_Variable_Value
  mov rbx, IR_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .links = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_variable_value_163.address
  lea r13, dump_ir_variable_value_163[rip]
  mov [rax+40], r13
  #     .variable = undefined
  #     .version = undefined
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: variable.1:[rbp-16] $4.1:rax 
  .loc 3 121 12
  # $5.1: @IR_Variable_Value = call(init_162, $4.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call init_162
  # [discarded value]: $4.1
  # [discarded value]: variable.1
  # [live values]: $5.1:rax 
  .loc 3 121 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__create_variable_value_70__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_variable_value_70__end:
  mov rsp, rbp
  pop rbp
  ret

create_variable_value_70__stack_frame_size: .word 32

  .loc 3 124 1
  .text
get_named_function_71:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_71__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_71__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 125 41
  # $1.1: @String = load_struct_member(name.1, lexeme)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx $1.1:rax 
  .loc 3 125 17
  # function.1: @IR_Function = call(get_named_function_72, self.1, $1.1, argument_types.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdx
  call get_named_function_72
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax 
  .loc 3 126 9
  # $3.1: Boolean = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__get_named_function_71__2, .LABEL__get_named_function_71__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__get_named_function_71__3
.LABEL__get_named_function_71__2:
  .loc 3 127 20
  # $4.1: @String = call(clone_345, "Undefined function: ")
  lea rdi, .LABEL__string_186[rip] # "Undefined function: "
  call clone_345
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax 
  .loc 3 127 57
  # $5.1: @String = load_struct_member(name.1, lexeme)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: name.1:rbx:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax $5.1:r15 
  .loc 3 127 20
  # $6.1: @String = call(append_354, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $6.1:rax 
  .loc 3 127 20
  # message.1: @String = call(append_354, $6.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # " :: ("
  call append_354
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:rax 
  .loc 3 128 27
  # argument_types.1: @List_Iterator = call(create_iterator_329, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-33], rax
  call create_iterator_329
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:rax 
  # jump(.LABEL__get_named_function_71__4)
  mov [rbp-41], rax
.LABEL__get_named_function_71__4:
  .loc 3 129 16
  # $9.1: Boolean = call(has_next_332, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_332
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:rax 
  # jump($9.1, .LABEL__get_named_function_71__5, .LABEL__get_named_function_71__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_71__6
.LABEL__get_named_function_71__5:
  .loc 3 130 30
  # argument_type.1: @IR_Type = call(next_333, argument_types.1)
  mov rdi, [rbp-41]
  call next_333
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] argument_type.1:rax 
  .loc 3 131 28
  # $12.1: @String = load_struct_member(argument_type.1, name)
  mov rbx, [rax+8]
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $12.1:rbx 
  .loc 3 131 13
  # $13.1: @String = call(append_354, message.1, $12.1)
  mov rdi, [rbp-33]
  mov rsi, rbx
  call append_354
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 132 17
  # $14.1: Boolean = call(has_next_332, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_332
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:rax 
  # jump($14.1, .LABEL__get_named_function_71__7, .LABEL__get_named_function_71__4)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_71__4
.LABEL__get_named_function_71__7:
  .loc 3 133 17
  # $15.1: @String = call(append_354, message.1, ", ")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_354
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # jump(.LABEL__get_named_function_71__4)
  jmp .LABEL__get_named_function_71__4
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__get_named_function_71__6:
  .loc 3 136 9
  # $16.1: @String = call(append_354, message.1, ")")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_188[rip] # ")"
  call append_354
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 137 15
  # $17.1: @Source_Location = load_struct_member(name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:rax:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $17.1:rbx 
  .loc 3 137 9
  # call(abort_314, $17.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-33]
  call abort_314
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [discarded value]: argument_types.1
  # [discarded value]: message.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_named_function_71__3:
  .loc 3 139 5
  # return(function.1)
  mov rax, [rbp-24]
  jmp .LABEL__get_named_function_71__end
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_71__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_71__stack_frame_size: .word 48

  .loc 3 142 1
  .text
get_named_function_72:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_72__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_72__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 143 5
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx function.1:rax 
  .loc 3 144 24
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi argument_types.1:rdx function.1:rax $1.1:rbx 
  .loc 3 144 24
  # named_functions.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_72__2)
  mov [rbp-32], rax
.LABEL__get_named_function_72__2:
  # function.5: @IR_Function = phi(function.1, function.5, function.3)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 145 12
  # $3.1: Boolean = call(has_next_332, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_332
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_72__3, .LABEL__get_named_function_72__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_72__4
.LABEL__get_named_function_72__3:
  .loc 3 146 27
  # named_function.1: @IR_Function = call(next_333, named_functions.1)
  mov rdi, [rbp-32]
  call next_333
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 147 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 147 13
  # $7.1: Boolean = call(equals_346, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_346
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:rax 
  # jump($7.1, .LABEL__get_named_function_72__5, .LABEL__get_named_function_72__2)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_72__2
.LABEL__get_named_function_72__5:
  .loc 3 148 13
  # is_match.1: Boolean = true
  mov al, 1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:rax 
  .loc 3 149 31
  # argument_types.1: @List_Iterator = call(create_iterator_329, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-43], al
  call create_iterator_329
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax 
  .loc 3 150 42
  # $9.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax $9.1:r15 
  .loc 3 150 42
  # named_function_parameters.1: @List_Iterator = call(create_iterator_329, $9.1)
  mov rdi, r15
  mov [rbp-51], rax
  call create_iterator_329
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_72__7)
  mov [rbp-59], rax
.LABEL__get_named_function_72__7:
  .loc 3 151 20
  # $12.1: Boolean = call(has_next_332, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_332
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_72__10, .LABEL__get_named_function_72__11)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_72__11
.LABEL__get_named_function_72__10:
  .loc 3 151 49
  # $12.2: Boolean = call(has_next_332, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_332
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:rax:[rbp-60] 
  # jump(.LABEL__get_named_function_72__11)
  mov [rbp-60], al
.LABEL__get_named_function_72__11:
  .loc 3 151 20
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($12.3, .LABEL__get_named_function_72__8, .LABEL__get_named_function_72__9)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_72__9
.LABEL__get_named_function_72__8:
  .loc 3 152 34
  # argument_type.1: @IR_Type = call(next_333, argument_types.1)
  mov rdi, [rbp-51]
  call next_333
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 153 45
  # named_function_parameter.1: @IR_Function_Parameter = call(next_333, named_function_parameters.1)
  mov rdi, [rbp-59]
  mov [rbp-68], rax
  call next_333
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] named_function_parameter.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 154 21
  # $18.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] $18.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 154 21
  # $19.1: Boolean = call(accepts_74, $18.1, argument_type.1)
  mov rdi, rbx
  mov rsi, [rbp-68]
  call accepts_74
  # [discarded value]: $18.1
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $19.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 154 21
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($20.1, .LABEL__get_named_function_72__12, .LABEL__get_named_function_72__7)
  test bl, bl
  mov [rbp-61], bl
  jz .LABEL__get_named_function_72__7
.LABEL__get_named_function_72__12:
  .loc 3 155 21
  # is_match.2: Boolean = false
  mov al, 0
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:rax:[rbp-43] 
  # jump(.LABEL__get_named_function_72__9)
  mov [rbp-43], al
.LABEL__get_named_function_72__9:
  # $21.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-43]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:rax $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # jump($21.1, .LABEL__get_named_function_72__17, .LABEL__get_named_function_72__18)
  test al, al
  mov [rbp-62], al
  jz .LABEL__get_named_function_72__18
.LABEL__get_named_function_72__17:
  .loc 3 159 29
  # $22.1: Boolean = call(has_next_332, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_332
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $22.1:rax 
  .loc 3 159 29
  # $23.1: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $23.1:rbx 
  .loc 3 159 17
  # $21.2: Boolean = $23.1
  mov [rbp-63], bl
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:rbx:[rbp-62] 
  # jump(.LABEL__get_named_function_72__18)
  mov [rbp-62], bl
.LABEL__get_named_function_72__18:
  .loc 3 159 17
  # $24.1: Boolean = phi($21.1, $21.2)
  mov al, [rbp-62]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:rax 
  # jump($24.1, .LABEL__get_named_function_72__15, .LABEL__get_named_function_72__16)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_72__16
.LABEL__get_named_function_72__15:
  .loc 3 159 67
  # $25.1: Boolean = call(has_next_332, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_332
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $25.1:rax $21.2:[rbp-62] $24.1:[rbp-63] 
  .loc 3 159 67
  # $26.1: Boolean = $25.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $26.1:rbx $21.2:[rbp-62] $24.1:[rbp-63] 
  .loc 3 159 17
  # $24.2: Boolean = $26.1
  mov [rbp-64], bl
  # [discarded value]: $26.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:rbx:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump(.LABEL__get_named_function_72__16)
  mov [rbp-63], bl
.LABEL__get_named_function_72__16:
  .loc 3 159 17
  # $24.3: Boolean = phi($24.1, $24.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump($24.3, .LABEL__get_named_function_72__19, .LABEL__get_named_function_72__2)
  mov al, [rbp-63]
  test al, al
  jz .LABEL__get_named_function_72__2
.LABEL__get_named_function_72__19:
  .loc 3 160 21
  # $27.1: Boolean = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:rax 
  # jump($27.1, .LABEL__get_named_function_72__21, .LABEL__get_named_function_72__22)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_72__22
.LABEL__get_named_function_72__21:
  .loc 3 161 21
  # call(abort_342, name.1)
  mov rdi, [rbp-24]
  call abort_342
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
.LABEL__get_named_function_72__22:
  .loc 3 163 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_72__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_72__2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
  # [discarded value]: $27.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [discarded value]: $21.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: $21.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: argument_types.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] 
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_72__4:
  .loc 3 167 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_72__end
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_72__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_72__stack_frame_size: .word 80

  .loc 3 170 1
  .text
get_named_function_73:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_73__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_73__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # function_type.1: @IR_Function_Type = load_variable(function_type)
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx 
  .loc 3 171 5
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx function.1:rax 
  .loc 3 172 24
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi function_type.1:rdx function.1:rax $1.1:rbx 
  .loc 3 172 24
  # named_functions.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_73__2)
  mov [rbp-32], rax
.LABEL__get_named_function_73__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 173 12
  # $3.1: Boolean = call(has_next_332, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_332
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_73__3, .LABEL__get_named_function_73__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_73__4
.LABEL__get_named_function_73__3:
  .loc 3 174 27
  # named_function.1: @IR_Function = call(next_333, named_functions.1)
  mov rdi, [rbp-32]
  call next_333
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 175 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 175 13
  # $8.1: Boolean = call(equals_346, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_346
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_named_function_73__7, .LABEL__get_named_function_73__8)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_73__8
.LABEL__get_named_function_73__7:
  .loc 3 175 49
  # $9.1: @IR_Type = load_struct_member(named_function.1, return_type)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx 
  .loc 3 175 83
  # $10.1: @IR_Type = load_struct_member(function_type.1, return_type)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx $10.1:r14 
  .loc 3 175 49
  # $8.2: Boolean = call(equals_144, $9.1, $10.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_144
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:rax:[rbp-42] 
  # jump(.LABEL__get_named_function_73__8)
  mov [rbp-42], al
.LABEL__get_named_function_73__8:
  .loc 3 175 13
  # $12.1: Boolean = phi($8.1, $8.2)
  mov al, [rbp-42]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_73__5, .LABEL__get_named_function_73__6)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_73__6
.LABEL__get_named_function_73__5:
  .loc 3 175 113
  # $13.1: @List = load_struct_member(named_function.1, parameters)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $13.1:rbx $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 175 113
  # $14.1: Int = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 175 147
  # $15.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r14, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $15.1:r14 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 175 147
  # $16.1: Int = load_struct_member($15.1, size)
  mov r13, [r14+16]
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $16.1:r13 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 175 113
  # $17.1: Boolean = $14.1 == $16.1
  cmp r15, r13
  sete r14b
  # [discarded value]: $16.1
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $17.1:r14 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 175 13
  # $12.2: Boolean = $17.1
  mov [rbp-44], r14b
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $12.2:r14:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump(.LABEL__get_named_function_73__6)
  mov [rbp-43], r14b
.LABEL__get_named_function_73__6:
  .loc 3 175 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump($12.3, .LABEL__get_named_function_73__9, .LABEL__get_named_function_73__2)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__get_named_function_73__2
.LABEL__get_named_function_73__9:
  .loc 3 176 13
  # is_match.1: Boolean = true
  mov al, 1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax 
  .loc 3 177 41
  # $18.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax $18.1:r15 
  .loc 3 177 41
  # function_type_parameters.1: @List_Iterator = call(create_iterator_329, $18.1)
  mov rdi, r15
  mov [rbp-44], al
  call create_iterator_329
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax 
  .loc 3 178 42
  # $20.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax $20.1:r15 
  .loc 3 178 42
  # named_function_parameters.1: @List_Iterator = call(create_iterator_329, $20.1)
  mov rdi, r15
  mov [rbp-52], rax
  call create_iterator_329
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_73__11)
  mov [rbp-60], rax
.LABEL__get_named_function_73__11:
  .loc 3 179 20
  # $23.1: Boolean = call(has_next_332, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_332
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:rax 
  # jump($23.1, .LABEL__get_named_function_73__14, .LABEL__get_named_function_73__15)
  test al, al
  mov [rbp-61], al
  jz .LABEL__get_named_function_73__15
.LABEL__get_named_function_73__14:
  .loc 3 179 59
  # $23.2: Boolean = call(has_next_332, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_332
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:rax:[rbp-61] 
  # jump(.LABEL__get_named_function_73__15)
  mov [rbp-61], al
.LABEL__get_named_function_73__15:
  .loc 3 179 20
  # $23.3: Boolean = phi($23.1, $23.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($23.3, .LABEL__get_named_function_73__12, .LABEL__get_named_function_73__13)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__get_named_function_73__13
.LABEL__get_named_function_73__12:
  .loc 3 180 44
  # function_type_parameter.1: @IR_Function_Type_Parameter = call(next_333, function_type_parameters.1)
  mov rdi, [rbp-52]
  call next_333
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 181 45
  # named_function_parameter.1: @IR_Function_Parameter = call(next_333, named_function_parameters.1)
  mov rdi, [rbp-60]
  mov [rbp-69], rax
  call next_333
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] named_function_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 182 21
  # $29.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] $29.1:rbx $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 182 58
  # $30.1: @IR_Type = load_struct_member(function_type_parameter.1, type)
  mov rax, [rbp-69]
  mov r15, [rax+8]
  # [discarded value]: function_type_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $29.1:rbx $30.1:r15 $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 182 21
  # $31.1: Boolean = call(equals_144, $29.1, $30.1)
  mov rdi, rbx
  mov rsi, r15
  call equals_144
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 182 21
  # $32.1: Boolean = $31.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:rbx $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($32.1, .LABEL__get_named_function_73__16, .LABEL__get_named_function_73__11)
  test bl, bl
  mov [rbp-62], bl
  jz .LABEL__get_named_function_73__11
.LABEL__get_named_function_73__16:
  .loc 3 183 21
  # is_match.2: Boolean = false
  mov al, 0
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:rax:[rbp-44] 
  # jump(.LABEL__get_named_function_73__13)
  mov [rbp-44], al
.LABEL__get_named_function_73__13:
  # $33.1: Boolean = phi(is_match.2, is_match.1)
  mov al, [rbp-44]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:rax $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # jump($33.1, .LABEL__get_named_function_73__21, .LABEL__get_named_function_73__22)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_73__22
.LABEL__get_named_function_73__21:
  .loc 3 187 29
  # $34.1: Boolean = call(has_next_332, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_332
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $34.1:rax 
  .loc 3 187 29
  # $35.1: Boolean = $34.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.1:rbx 
  .loc 3 187 17
  # $33.2: Boolean = $35.1
  mov [rbp-64], bl
  # [discarded value]: $35.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:rbx:[rbp-63] 
  # jump(.LABEL__get_named_function_73__22)
  mov [rbp-63], bl
.LABEL__get_named_function_73__22:
  .loc 3 187 17
  # $36.1: Boolean = phi($33.1, $33.2)
  mov al, [rbp-63]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:rax 
  # jump($36.1, .LABEL__get_named_function_73__19, .LABEL__get_named_function_73__20)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_73__20
.LABEL__get_named_function_73__19:
  .loc 3 187 77
  # $37.1: Boolean = call(has_next_332, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_332
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $37.1:rax $33.2:[rbp-63] $36.1:[rbp-64] 
  .loc 3 187 77
  # $38.1: Boolean = $37.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $38.1:rbx $33.2:[rbp-63] $36.1:[rbp-64] 
  .loc 3 187 17
  # $36.2: Boolean = $38.1
  mov [rbp-65], bl
  # [discarded value]: $38.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:rbx:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # jump(.LABEL__get_named_function_73__20)
  mov [rbp-64], bl
.LABEL__get_named_function_73__20:
  .loc 3 187 17
  # $36.3: Boolean = phi($36.1, $36.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # jump($36.3, .LABEL__get_named_function_73__23, .LABEL__get_named_function_73__2)
  mov al, [rbp-64]
  test al, al
  jz .LABEL__get_named_function_73__2
.LABEL__get_named_function_73__23:
  .loc 3 188 21
  # $39.1: Boolean = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:rax 
  # jump($39.1, .LABEL__get_named_function_73__25, .LABEL__get_named_function_73__26)
  test al, al
  mov [rbp-65], al
  jz .LABEL__get_named_function_73__26
.LABEL__get_named_function_73__25:
  .loc 3 189 21
  # call(abort_342, name.1)
  mov rdi, [rbp-24]
  call abort_342
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] 
.LABEL__get_named_function_73__26:
  .loc 3 191 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_73__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_73__2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] $39.1:[rbp-65] 
  # [discarded value]: $39.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $36.3:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.2:[rbp-64] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] $36.1:[rbp-64] 
  # [discarded value]: $36.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.2:[rbp-63] 
  # [discarded value]: $33.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $33.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: $33.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $32.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $32.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $23.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [discarded value]: $23.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: function_type_parameters.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [discarded value]: $8.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_73__4:
  .loc 3 195 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_73__end
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: function_type.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_73__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_73__stack_frame_size: .word 80

  .loc 3 198 1
  .text
accepts_74:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_74__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_74__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 3 199 9
  # $1.1: Boolean = self.1 == other.1
  cmp rdi, rsi
  sete al
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 3 199 9
  # $2.1: Boolean = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $2.1:rax 
  # jump($2.1, .LABEL__accepts_74__3, .LABEL__accepts_74__2)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__accepts_74__2
.LABEL__accepts_74__3:
  .loc 3 199 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # jump($2.3, .LABEL__accepts_74__4, .LABEL__accepts_74__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__accepts_74__5
.LABEL__accepts_74__4:
  .loc 3 200 9
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
.LABEL__accepts_74__5:
  .loc 3 202 9
  # $4.1: Boolean = call(is_343, self.1, IR_Pointer_Type)
  mov rdi, [rbp-17]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__accepts_74__7, .LABEL__accepts_74__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_74__8
.LABEL__accepts_74__7:
  .loc 3 203 17
  # self.1: @IR_Pointer_Type = self.1
  mov rax, [rbp-17]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax 
  .loc 3 204 13
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax $6.1:rbx 
  .loc 3 204 13
  # $7.1: Boolean = call(is_343, $6.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-26], rax
  call is_343
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__accepts_74__9, .LABEL__accepts_74__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__accepts_74__10
.LABEL__accepts_74__9:
  .loc 3 205 13
  # stop.1: Boolean = true
  mov al, 1
  # [discarded value]: stop.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__accepts_74__10)
.LABEL__accepts_74__10:
  .loc 3 207 13
  # $8.1: Boolean = call(is_343, other.1, IR_Pointer_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # jump($8.1, .LABEL__accepts_74__11, .LABEL__accepts_74__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__accepts_74__12
.LABEL__accepts_74__11:
  .loc 3 208 22
  # other.1: @IR_Pointer_Type = other.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax 
  .loc 3 209 17
  # $10.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 
  .loc 3 209 38
  # $11.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r14, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 $11.1:r14 
  .loc 3 209 17
  # $12.1: Boolean = $10.1 == $11.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $12.1:r13 
  # jump($12.1, .LABEL__accepts_74__13, .LABEL__accepts_74__14)
  test r13b, r13b
  mov [rbp-36], rax
  mov [rbp-37], r13b
  jz .LABEL__accepts_74__14
.LABEL__accepts_74__13:
  .loc 3 210 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
.LABEL__accepts_74__14:
  .loc 3 212 17
  # $13.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $13.1:rbx 
  .loc 3 212 17
  # $14.1: Boolean = call(is_343, $13.1, IR_Any_Type)
  mov rdi, rbx
  mov rsi, IR_Any_Type[rip]
  call is_343
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:rax 
  # jump($14.1, .LABEL__accepts_74__16, .LABEL__accepts_74__17)
  test al, al
  mov [rbp-38], al
  jz .LABEL__accepts_74__17
.LABEL__accepts_74__16:
  .loc 3 213 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
.LABEL__accepts_74__17:
  .loc 3 215 17
  # $15.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $15.1:rbx 
  .loc 3 215 17
  # $17.1: Boolean = call(is_343, $15.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:rax 
  # jump($17.1, .LABEL__accepts_74__19, .LABEL__accepts_74__20)
  test al, al
  mov [rbp-39], al
  jz .LABEL__accepts_74__20
.LABEL__accepts_74__19:
  .loc 3 215 57
  # $18.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $18.1:rbx 
  .loc 3 215 57
  # $17.2: Boolean = call(is_343, $18.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:rax:[rbp-39] 
  # jump(.LABEL__accepts_74__20)
  mov [rbp-39], al
.LABEL__accepts_74__20:
  .loc 3 215 17
  # $17.3: Boolean = phi($17.1, $17.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # jump($17.3, .LABEL__accepts_74__21, .LABEL__accepts_74__22)
  mov al, [rbp-39]
  test al, al
  jz .LABEL__accepts_74__22
.LABEL__accepts_74__21:
  .loc 3 216 25
  # $21.1: @IR_Struct_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx 
  .loc 3 216 76
  # $23.1: @IR_Struct_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx $23.1:r14 
  .loc 3 216 24
  # $24.1: Boolean = call(is_base_type_151, $21.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call is_base_type_151
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $24.1:rax 
  .loc 3 216 17
  # return($24.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_74__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
.LABEL__accepts_74__22:
  .loc 3 218 20
  # $25.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx 
  .loc 3 218 46
  # $26.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx $26.1:r14 
  .loc 3 218 20
  # $27.1: Boolean = call(accepts_74, $25.1, $26.1)
  mov rdi, rbx
  mov rsi, r14
  call accepts_74
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $27.1:rax 
  .loc 3 218 13
  # return($27.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_74__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] 
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
.LABEL__accepts_74__12:
  .loc 3 220 13
  # $28.1: Boolean = call(is_343, other.1, IR_Null_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:rax 
  # jump($28.1, .LABEL__accepts_74__25, .LABEL__accepts_74__26)
  test al, al
  mov [rbp-29], al
  jz .LABEL__accepts_74__26
.LABEL__accepts_74__25:
  .loc 3 221 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
.LABEL__accepts_74__26:
  .loc 3 223 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
.LABEL__accepts_74__8:
  .loc 3 225 9
  # $29.1: Boolean = call(is_343, self.1, IR_Function_Type)
  mov rdi, [rbp-17]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:rax 
  # jump($29.1, .LABEL__accepts_74__29, .LABEL__accepts_74__30)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_74__30
.LABEL__accepts_74__29:
  .loc 3 226 13
  # $30.1: Boolean = call(is_343, other.1, IR_Null_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:rax 
  # jump($30.1, .LABEL__accepts_74__31, .LABEL__accepts_74__30)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_74__30
.LABEL__accepts_74__31:
  .loc 3 227 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
.LABEL__accepts_74__30:
  .loc 3 230 5
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_74__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_74__2:
  .loc 3 199 26
  # $2.2: Boolean = call(is_343, other.1, IR_Undefined_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Undefined_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__accepts_74__3)
  mov [rbp-1], al
  jmp .LABEL__accepts_74__3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__accepts_74__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_74__stack_frame_size: .word 48

  .loc 3 233 1
  .text
create_temp_variable_75:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_variable_75__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_variable_75__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 234 52
  # $1.1: @String = call(clone_345, "$")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_189[rip] # "$"
  mov [rbp-16], rsi
  call clone_345
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  .loc 3 234 70
  # $2.1: @Counter = load_struct_member(self.1, counter)
  mov rbx, [rbp-8]
  mov r15, [rbx+48]
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 3 234 70
  # $3.1: Int = call(next_142, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call next_142
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-16] $1.1:[rbp-24] $3.1:rax 
  .loc 3 234 52
  # $4.1: @String = call(append_353, $1.1, $3.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_353
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-16] $4.1:rax 
  .loc 5 457 21
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 3 234 12
  # $6.1: @IR_Variable = new IR_Variable(object_type = IR_Variable, location = null, name = $4.1, type = type.1, values = $5.1)
  mov [rbp-32], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Variable
  mov rbx, IR_Variable[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .name = $4.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .type = type.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .values = $5.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: type.1
  # [live values]: $6.1:rax 
  .loc 3 234 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_variable_75__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__create_temp_variable_75__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_variable_75__stack_frame_size: .word 32

  .loc 3 237 1
  .text
create_temp_value_76:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_value_76__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_value_76__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 238 39
  # $1.1: @IR_Variable = call(create_temp_variable_75, self.1, type.1)
  mov [rbp-8], rdi
  call create_temp_variable_75
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 3 238 12
  # $2.1: @IR_Variable_Value = call(create_variable_value_70, self.1, $1.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_variable_value_70
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 3 238 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_value_76__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_temp_value_76__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_value_76__stack_frame_size: .word 16

  .loc 3 241 1
  .text
append_77:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_77__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_77__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi instruction.1:rsi location.1:rdx 
  .loc 3 242 5
  # store_struct_member(instruction.1, location, location.1)
  mov QWORD PTR [rsi+8], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 3 243 5
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: instruction.1:rsi $1.1:rax 
  .loc 3 243 5
  # $2.1: @IR_Instruction = call(append_168, $1.1, instruction.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call append_168
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 3 244 12
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rbx 
  .loc 3 244 5
  # return($3.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__append_77__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__append_77__end:
  mov rsp, rbp
  pop rbp
  ret

append_77__stack_frame_size: .word 16

  .loc 3 247 1
  .text
build_78:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_78__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_78__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 3 248 14
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 248 14
  # $2.1: @List = load_struct_member($1.1, types)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 3 248 14
  # types.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:rax 
  # jump(.LABEL__build_78__2)
  mov [rbp-16], rax
.LABEL__build_78__2:
  .loc 3 249 12
  # $4.1: Boolean = call(has_next_332, types.1)
  mov rdi, [rbp-16]
  call has_next_332
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__build_78__3, .LABEL__build_78__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__build_78__4
.LABEL__build_78__3:
  .loc 3 250 22
  # statement.1: @AST_Statement = call(next_333, types.1)
  mov rdi, [rbp-16]
  call next_333
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] statement.1:rax 
  .loc 3 251 9
  # $7.1: @IR_Type = call(convert_type_statement_79, self.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_type_statement_79
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # jump(.LABEL__build_78__2)
  jmp .LABEL__build_78__2
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__build_78__4:
  .loc 3 254 25
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $8.1:rbx 
  .loc 3 254 25
  # $9.1: @List = load_struct_member($8.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $9.1:r15 
  .loc 3 254 25
  # global_variables.1: @List_Iterator = call(create_iterator_329, $9.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:rax 
  # jump(.LABEL__build_78__5)
  mov [rbp-25], rax
.LABEL__build_78__5:
  .loc 3 255 12
  # $11.1: Boolean = call(has_next_332, global_variables.1)
  mov rdi, [rbp-25]
  call has_next_332
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__build_78__6, .LABEL__build_78__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__build_78__7
.LABEL__build_78__6:
  .loc 3 256 31
  # variable_statement.1: @AST_Variable_Statement = call(next_333, global_variables.1)
  mov rdi, [rbp-25]
  call next_333
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] variable_statement.1:rax 
  .loc 3 257 9
  # call(convert_variable_statement_101, self.1, variable_statement.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call convert_variable_statement_101
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # jump(.LABEL__build_78__5)
  jmp .LABEL__build_78__5
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__build_78__7:
  .loc 3 260 18
  # $14.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $14.1:rbx 
  .loc 3 260 18
  # $15.1: @List = load_struct_member($14.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $15.1:r15 
  .loc 3 260 18
  # functions.1: @List_Iterator = call(create_iterator_329, $15.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:rax 
  # jump(.LABEL__build_78__8)
  mov [rbp-34], rax
.LABEL__build_78__8:
  .loc 3 261 12
  # $17.1: Boolean = call(has_next_332, functions.1)
  mov rdi, [rbp-34]
  call has_next_332
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__build_78__9, .LABEL__build_78__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__build_78__10
.LABEL__build_78__9:
  .loc 3 262 31
  # function_statement.1: @AST_Function_Statement = call(next_333, functions.1)
  mov rdi, [rbp-34]
  call next_333
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] function_statement.1:rax 
  .loc 3 263 9
  # $20.1: @IR_Function = call(create_function_86, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_function_86
  # [discarded value]: $20.1
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__build_78__8)
  jmp .LABEL__build_78__8
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__build_78__10:
  .loc 3 266 18
  # $21.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $21.1:rbx 
  .loc 3 266 18
  # $22.1: @List = load_struct_member($21.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $22.1:r15 
  .loc 3 266 18
  # functions.1: @List_Iterator = call(create_iterator_329, $22.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:rax 
  # jump(.LABEL__build_78__11)
  mov [rbp-43], rax
.LABEL__build_78__11:
  .loc 3 267 12
  # $24.1: Boolean = call(has_next_332, functions.1)
  mov rdi, [rbp-43]
  call has_next_332
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:rax 
  # jump($24.1, .LABEL__build_78__12, .LABEL__build_78__13)
  test al, al
  mov [rbp-44], al
  jz .LABEL__build_78__13
.LABEL__build_78__12:
  .loc 3 268 31
  # function_statement.1: @AST_Function_Statement = call(next_333, functions.1)
  mov rdi, [rbp-43]
  call next_333
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] function_statement.1:rax 
  .loc 3 269 9
  # call(build_function_87, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call build_function_87
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # jump(.LABEL__build_78__11)
  jmp .LABEL__build_78__11
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
.LABEL__build_78__13:
  # return()
  jmp .LABEL__build_78__end
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [discarded value]: global_variables.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [discarded value]: types.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_78__end:
  mov rsp, rbp
  pop rbp
  ret

build_78__stack_frame_size: .word 48

  .loc 3 273 1
  .text
convert_type_statement_79:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_statement_79__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_statement_79__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 274 9
  # $1.1: Boolean = call(is_343, statement.1, AST_Struct_Statement)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Struct_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_type_statement_79__2, .LABEL__convert_type_statement_79__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_type_statement_79__3
.LABEL__convert_type_statement_79__2:
  .loc 3 275 46
  # $2.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 275 16
  # $3.1: @IR_Type = call(convert_struct_statement_80, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_struct_statement_80
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 275 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_type_statement_79__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_type_statement_79__3:
  .loc 3 277 11
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx 
  .loc 3 277 31
  # $5.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx $5.1:r15 
  .loc 3 277 5
  # call(abort_141, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_type_statement_79__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_statement_79__stack_frame_size: .word 32

  .loc 3 280 1
  .text
convert_struct_statement_80:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_statement_80__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_statement_80__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_statement.1: @AST_Struct_Statement = load_variable(struct_statement)
  # [live values]: self.1:rdi struct_statement.1:rsi 
  .loc 3 281 20
  # $1.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi struct_statement.1:rsi $1.1:rax 
  .loc 3 281 20
  # struct_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi struct_statement.1:rsi struct_name.1:rbx 
  .loc 3 282 13
  # type.1: @IR_Type = call(get_named_type_66, self.1, struct_name.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax 
  .loc 3 283 9
  # $4.1: Boolean = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_struct_statement_80__2, .LABEL__convert_struct_statement_80__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_struct_statement_80__3
.LABEL__convert_struct_statement_80__2:
  .loc 3 284 13
  # $6.1: Boolean = call(is_343, type.1, IR_Struct_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__convert_struct_statement_80__4, .LABEL__convert_struct_statement_80__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_struct_statement_80__5
.LABEL__convert_struct_statement_80__4:
  .loc 3 284 41
  # $7.1: @IR_Struct_Type = type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $7.1:rax 
  .loc 3 284 40
  # $8.1: @AST_Struct_Statement = load_struct_member($7.1, statement)
  mov rbx, [rax+32]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $8.1:rbx 
  .loc 3 284 40
  # $9.1: Boolean = $8.1 == struct_statement.1
  cmp rbx, QWORD PTR [rbp-8]
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $9.1:rax 
  .loc 3 284 13
  # $6.2: Boolean = $9.1
  mov [rbp-35], al
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:rax:[rbp-34] 
  # jump(.LABEL__convert_struct_statement_80__5)
  mov [rbp-34], al
.LABEL__convert_struct_statement_80__5:
  .loc 3 284 13
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # jump($6.3, .LABEL__convert_struct_statement_80__6, .LABEL__convert_struct_statement_80__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_struct_statement_80__7
.LABEL__convert_struct_statement_80__6:
  .loc 3 285 13
  # return(type.1)
  mov rax, [rbp-32]
  jmp .LABEL__convert_struct_statement_80__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
.LABEL__convert_struct_statement_80__7:
  .loc 3 287 15
  # $10.1: @Source_Location = load_struct_member(struct_statement.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:rbx 
  .loc 3 287 42
  # $11.1: @String = call(clone_345, "Duplicate type declaration: ")
  lea rdi, .LABEL__string_190[rip] # "Duplicate type declaration: "
  mov [rbp-42], rbx
  call clone_345
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:[rbp-42] $11.1:rax 
  .loc 3 287 42
  # $12.1: @String = call(append_354, $11.1, struct_name.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_354
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $10.1:[rbp-42] $12.1:rax 
  .loc 3 287 9
  # call(abort_314, $10.1, $12.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_314
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_struct_statement_80__3:
  .loc 3 289 13
  # type.1: @IR_Struct_Type = call(create_ir_struct_type_148, struct_name.1, struct_statement.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call create_ir_struct_type_148
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax 
  .loc 3 290 5
  # $14.1: @List = load_struct_member(self.1, named_types)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax $14.1:r15 
  .loc 3 290 5
  # call(append_318, $14.1, type.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-41], rax
  call append_318
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  .loc 3 291 9
  # $15.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $15.1:rbx 
  .loc 3 291 9
  # $16.1: Boolean = $15.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:r15 
  # jump($16.1, .LABEL__convert_struct_statement_80__9, .LABEL__convert_struct_statement_80__10)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__convert_struct_statement_80__10
.LABEL__convert_struct_statement_80__9:
  .loc 3 292 46
  # $17.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] $17.1:rbx 
  .loc 3 292 22
  # base_type.1: @IR_Type = call(convert_value_type_81, self.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call convert_value_type_81
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:rax 
  .loc 3 293 14
  # $19.1: Boolean = call(is_343, base_type.1, IR_Struct_Type)
  mov rdi, rax
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-50], rax
  call is_343
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:rax 
  .loc 3 293 13
  # $20.1: Boolean = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:rbx 
  # jump($20.1, .LABEL__convert_struct_statement_80__11, .LABEL__convert_struct_statement_80__12)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_struct_statement_80__12
.LABEL__convert_struct_statement_80__11:
  .loc 3 294 19
  # $21.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $21.1:rbx 
  .loc 3 294 19
  # $22.1: @Source_Location = load_struct_member($21.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $22.1:r15 
  .loc 3 294 13
  # call(abort_314, $22.1, "Not a struct type.")
  mov rdi, r15
  lea rsi, .LABEL__string_191[rip] # "Not a struct type."
  call abort_314
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
.LABEL__convert_struct_statement_80__12:
  .loc 3 296 26
  # $23.1: @IR_Struct_Type = base_type.1
  mov rax, [rbp-50]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $23.1:rax 
  .loc 3 296 9
  # store_struct_member(type.1, base_type, $23.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rbx:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # jump(.LABEL__convert_struct_statement_80__10)
.LABEL__convert_struct_statement_80__10:
  .loc 3 298 9
  # $24.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $24.1:rbx 
  .loc 3 298 9
  # $25.1: Boolean = $24.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:r15 
  # jump($25.1, .LABEL__convert_struct_statement_80__13, .LABEL__convert_struct_statement_80__14)
  test r15b, r15b
  mov [rbp-52], r15b
  jz .LABEL__convert_struct_statement_80__14
.LABEL__convert_struct_statement_80__13:
  .loc 3 299 27
  # $26.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] $26.1:rbx 
  .loc 3 299 27
  # struct_members.1: @List_Iterator = call(create_iterator_329, $26.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:rax 
  # jump(.LABEL__convert_struct_statement_80__15)
  mov [rbp-60], rax
.LABEL__convert_struct_statement_80__15:
  .loc 3 300 16
  # $28.1: Boolean = call(has_next_332, struct_members.1)
  mov rdi, [rbp-60]
  call has_next_332
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:rax 
  # jump($28.1, .LABEL__convert_struct_statement_80__16, .LABEL__convert_struct_statement_80__14)
  test al, al
  mov [rbp-61], al
  jz .LABEL__convert_struct_statement_80__14
.LABEL__convert_struct_statement_80__16:
  .loc 3 301 30
  # struct_member.1: @AST_Struct_Member = call(next_333, struct_members.1)
  mov rdi, [rbp-60]
  call next_333
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax 
  .loc 3 302 35
  # $31.1: @Identifier_Token = load_struct_member(struct_member.1, name)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax $31.1:rbx 
  .loc 3 302 35
  # struct_member_name.1: @String = load_struct_member($31.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member.1:rax struct_member_name.1:r15 
  .loc 3 303 59
  # $33.1: @AST_Type = load_struct_member(struct_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_member.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member_name.1:r15 $33.1:rbx 
  .loc 3 303 35
  # struct_member_type.1: @IR_Type = call(convert_value_type_81, self.1, $33.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-69], r15
  call convert_value_type_81
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] struct_member_name.1:[rbp-69] struct_member_type.1:rax 
  .loc 3 304 13
  # $35.1: @IR_Struct_Type_Member = call(add_member_149, type.1, struct_member_name.1, struct_member_type.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-69]
  mov rdx, rax
  call add_member_149
  # [discarded value]: $35.1
  # [discarded value]: struct_member_type.1
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
  # jump(.LABEL__convert_struct_statement_80__15)
  jmp .LABEL__convert_struct_statement_80__15
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
.LABEL__convert_struct_statement_80__14:
  .loc 3 307 9
  # $36.1: Boolean = call(is_object_type_152, type.1)
  mov rdi, [rbp-41]
  call is_object_type_152
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:rax $28.1:[rbp-61] 
  # jump($36.1, .LABEL__convert_struct_statement_80__18, .LABEL__convert_struct_statement_80__19)
  test al, al
  mov [rbp-62], al
  jz .LABEL__convert_struct_statement_80__19
.LABEL__convert_struct_statement_80__18:
  .loc 3 310 28
  # $37.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $37.1:rbx 
  .loc 3 310 28
  # $38.1: @Source_Location = load_struct_member($37.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:r15 
  .loc 3 311 24
  # $39.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:r15 $39.1:rbx 
  .loc 3 314 32
  # $40.1: @Identifier_Token = new Identifier_Token(object_type = Identifier_Token, lexeme = "Object_Type", location = null, next_token = null)
  mov [rbp-70], rbx
  mov [rbp-78], r15
  mov rdi, 32
  call malloc
  #     .object_type = Identifier_Token
  mov rbx, Identifier_Token[rip]
  mov [rax], rbx
  #     .lexeme = "Object_Type"
  lea rbx, .LABEL__string_192[rip] # "Object_Type"
  mov [rax+8], rbx
  #     .location = null
  mov QWORD PTR [rax+16], 0
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $40.1:rax 
  .loc 3 313 36
  # $41.1: @AST_Named_Type = new AST_Named_Type(object_type = AST_Named_Type, name = $40.1, location = null)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  #     .object_type = AST_Named_Type
  mov rbx, AST_Named_Type[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .name = $40.1
  mov rbx, [rbp-86]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $41.1:rax 
  .loc 3 312 24
  # $42.1: @AST_Pointer_Type = new AST_Pointer_Type(object_type = AST_Pointer_Type, pointed_type = $41.1, location = null)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  #     .object_type = AST_Pointer_Type
  mov rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .pointed_type = $41.1
  mov rbx, [rbp-86]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $38.1:[rbp-78] $39.1:[rbp-70] $42.1:rax 
  .loc 3 309 13
  # $43.1: @AST_Variable_Statement = new AST_Variable_Statement(object_type = AST_Variable_Statement, location = $38.1, name = $39.1, type = $42.1, is_external = true, value_expression = null)
  mov [rbp-86], rax
  mov rdi, 41
  call malloc
  #     .object_type = AST_Variable_Statement
  mov rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  #     .location = $38.1
  mov rbx, [rbp-78]
  mov QWORD PTR [rax+8], rbx
  #     .name = $39.1
  mov r15, [rbp-70]
  mov QWORD PTR [rax+16], r15
  #     .type = $42.1
  mov r14, [rbp-86]
  mov QWORD PTR [rax+24], r14
  #     .value_expression = null
  mov QWORD PTR [rax+32], 0
  #     .is_external = true
  mov BYTE PTR [rax+40], 1
  # [discarded value]: $42.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] $43.1:rax 
  .loc 3 308 9
  # call(convert_variable_statement_101, self.1, $43.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call convert_variable_statement_101
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # jump(.LABEL__convert_struct_statement_80__19)
.LABEL__convert_struct_statement_80__19:
  .loc 3 322 5
  # return(type.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_struct_statement_80__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $36.1:[rbp-62] $28.1:[rbp-61] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] $28.1:[rbp-61] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] struct_members.1:[rbp-60] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $20.1:[rbp-51] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] 
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [discarded value]: type.1
  # [discarded value]: struct_name.1
  # [discarded value]: struct_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_statement_80__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_statement_80__stack_frame_size: .word 96

  .loc 3 325 1
  .text
convert_value_type_81:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_value_type_81__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_value_type_81__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 326 9
  # $1.1: Boolean = call(is_343, type.1, AST_Array_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_value_type_81__2, .LABEL__convert_value_type_81__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_value_type_81__3
.LABEL__convert_value_type_81__2:
  .loc 3 327 40
  # $2.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 327 16
  # $3.1: @IR_Type = call(convert_array_type_82, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_type_82
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 327 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_value_type_81__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_value_type_81__3:
  .loc 3 329 9
  # $4.1: Boolean = call(is_343, type.1, AST_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_value_type_81__5, .LABEL__convert_value_type_81__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_value_type_81__6
.LABEL__convert_value_type_81__5:
  .loc 3 330 43
  # $5.1: @AST_Function_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 330 16
  # $6.1: @IR_Type = call(convert_function_type_83, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_function_type_83
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 330 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_value_type_81__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_value_type_81__6:
  .loc 3 332 9
  # $7.1: Boolean = call(is_343, type.1, AST_Named_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Named_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__convert_value_type_81__8, .LABEL__convert_value_type_81__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_value_type_81__9
.LABEL__convert_value_type_81__8:
  .loc 3 333 40
  # $8.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 333 16
  # $9.1: @IR_Type = call(convert_named_type_84, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_named_type_84
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 333 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__convert_value_type_81__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__convert_value_type_81__9:
  .loc 3 335 9
  # $10.1: Boolean = call(is_343, type.1, AST_Pointer_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__convert_value_type_81__11, .LABEL__convert_value_type_81__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_value_type_81__12
.LABEL__convert_value_type_81__11:
  .loc 3 336 42
  # $11.1: @AST_Pointer_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 336 16
  # $12.1: @IR_Type = call(convert_pointer_type_85, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_pointer_type_85
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 336 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__convert_value_type_81__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__convert_value_type_81__12:
  .loc 3 338 11
  # $13.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 338 26
  # $14.1: @Object_Type = load_struct_member(type.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 338 5
  # call(abort_141, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_value_type_81__end:
  mov rsp, rbp
  pop rbp
  ret

convert_value_type_81__stack_frame_size: .word 32

  .loc 3 341 1
  .text
convert_array_type_82:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_type_82__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_type_82__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Array_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 342 57
  # $1.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  .loc 3 342 33
  # $2.1: @IR_Type = call(convert_value_type_81, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call convert_value_type_81
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-8] $2.1:rax 
  .loc 3 342 74
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [discarded value]: type.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 3 342 12
  # $4.1: @IR_Type = call(create_ir_array_type_146, $2.1, $3.1)
  mov rdi, rax
  mov rsi, r15
  call create_ir_array_type_146
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $4.1:rax 
  .loc 3 342 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_array_type_82__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__convert_array_type_82__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_type_82__stack_frame_size: .word 16

  .loc 3 345 1
  .text
convert_function_type_83:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_function_type_83__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_function_type_83__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Function_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 346 19
  # parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:rax 
  .loc 3 347 33
  # $2.1: @List = load_struct_member(type.1, parameters)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax $2.1:r15 
  .loc 3 347 33
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax function_parameters_item.1:r14 
  # jump(.LABEL__convert_function_type_83__2)
  mov [rbp-24], rax
  mov [rbp-32], r14
.LABEL__convert_function_type_83__2:
  # function_parameters_item.2: @List_Item = phi(function_parameters_item.1, function_parameters_item.4)
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  .loc 3 348 12
  # $4.1: Boolean = function_parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__convert_function_type_83__3, .LABEL__convert_function_type_83__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_function_type_83__4
.LABEL__convert_function_type_83__3:
  .loc 3 349 31
  # function_parameter.1: @AST_Function_Parameter = load_struct_member(function_parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx 
  .loc 3 350 65
  # $7.1: @Identifier_Token = load_struct_member(function_parameter.1, name)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $7.1:r15 
  .loc 3 350 65
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $8.1:r14 
  .loc 3 350 128
  # $9.1: @AST_Type = load_struct_member(function_parameter.1, type)
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] $8.1:r14 $9.1:r15 
  .loc 3 350 104
  # $10.1: @IR_Type = call(convert_value_type_81, self.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-41], r14
  call convert_value_type_81
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $8.1:[rbp-41] $10.1:rax 
  .loc 3 350 27
  # $11.1: @IR_Function_Type_Parameter = new IR_Function_Type_Parameter(name = $8.1, type = $10.1)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .name = $8.1
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  #     .type = $10.1
  mov r15, [rbp-49]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $11.1:rax 
  .loc 3 350 9
  # call(append_318, parameters.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_318
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  .loc 3 351 36
  # function_parameters_item.4: @List_Item = load_struct_member(function_parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:rbx:[rbp-32] 
  # jump(.LABEL__convert_function_type_83__2)
  mov [rbp-32], rbx
  jmp .LABEL__convert_function_type_83__2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:[rbp-32] 
  # [discarded value]: function_parameters_item.4
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_function_type_83__4:
  .loc 3 353 72
  # $13.1: @AST_Type = load_struct_member(type.1, return_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] type.1:rax:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $13.1:rbx 
  .loc 3 353 48
  # $14.1: @IR_Type = call(convert_value_type_81, self.1, $13.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call convert_value_type_81
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $14.1:rax 
  .loc 3 353 12
  # $15.1: @IR_Function_Type = call(create_ir_function_type_147, parameters.1, $14.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_ir_function_type_147
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $15.1:rax 
  .loc 3 353 5
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__convert_function_type_83__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # [discarded value]: function_parameters_item.2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: parameters.1
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_function_type_83__end:
  mov rsp, rbp
  pop rbp
  ret

convert_function_type_83__stack_frame_size: .word 64

  .loc 3 356 1
  .text
convert_named_type_84:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_named_type_84__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_named_type_84__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Named_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 357 18
  # type_name.1: @Identifier_Token = load_struct_member(type.1, name)
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi type_name.1:rax 
  .loc 3 358 33
  # $2.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rax+8]
  # [live values]: self.1:rdi type_name.1:rax $2.1:rbx 
  .loc 3 358 13
  # type.1: @IR_Type = call(get_named_type_66, self.1, $2.1)
  mov rsi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdi
  call get_named_type_66
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax 
  .loc 3 359 9
  # $4.1: Boolean = type.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_named_type_84__2, .LABEL__convert_named_type_84__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__convert_named_type_84__3
.LABEL__convert_named_type_84__2:
  .loc 3 360 18
  # $5.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 360 18
  # $6.1: @List = load_struct_member($5.1, types)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] $6.1:r15 
  .loc 3 360 18
  # types.1: @List_Iterator = call(create_iterator_329, $6.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:rax 
  # jump(.LABEL__convert_named_type_84__4)
  mov [rbp-33], rax
.LABEL__convert_named_type_84__4:
  .loc 3 361 16
  # $8.1: Boolean = call(has_next_332, types.1)
  mov rdi, [rbp-33]
  call has_next_332
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__convert_named_type_84__5, .LABEL__convert_named_type_84__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_named_type_84__6
.LABEL__convert_named_type_84__5:
  .loc 3 362 26
  # statement.1: @AST_Statement = call(next_333, types.1)
  mov rdi, [rbp-33]
  call next_333
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax 
  .loc 3 363 17
  # $11.1: Boolean = call(is_343, statement.1, AST_Struct_Statement)
  mov rdi, rax
  mov rsi, AST_Struct_Statement[rip]
  mov [rbp-42], rax
  call is_343
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:rax 
  # jump($11.1, .LABEL__convert_named_type_84__7, .LABEL__convert_named_type_84__9)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_named_type_84__9
.LABEL__convert_named_type_84__7:
  .loc 3 364 30
  # statement.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax 
  .loc 3 365 21
  # $15.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $15.1:rbx 
  .loc 3 365 21
  # $16.1: @String = load_struct_member($15.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $16.1:r15 
  .loc 3 365 50
  # $17.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:rax $16.1:r15 $17.1:r14 
  .loc 3 365 21
  # $18.1: Boolean = call(equals_346, $16.1, $17.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-51], rax
  call equals_346
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:rax 
  # jump($18.1, .LABEL__convert_named_type_84__10, .LABEL__convert_named_type_84__4)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_named_type_84__4
.LABEL__convert_named_type_84__10:
  .loc 3 366 28
  # $19.1: @IR_Type = call(convert_struct_statement_80, self.1, statement.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-51]
  call convert_struct_statement_80
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:[rbp-52] $19.1:rax 
  .loc 3 366 21
  # return($19.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_named_type_84__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] $18.1:[rbp-52] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] statement.1:[rbp-51] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] 
.LABEL__convert_named_type_84__9:
  .loc 3 369 23
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax:[rbp-42] $11.1:[rbp-43] $12.1:rbx 
  .loc 3 369 43
  # $13.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:rax:[rbp-42] $11.1:[rbp-43] $12.1:rbx $13.1:r15 
  .loc 3 369 17
  # call(abort_141, $12.1, $13.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] $11.1:[rbp-43] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] statement.1:[rbp-42] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] 
.LABEL__convert_named_type_84__6:
  .loc 3 372 15
  # $20.1: @Source_Location = load_struct_member(type_name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type_name.1:rax:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:rbx 
  .loc 3 372 35
  # $21.1: @String = call(clone_345, "Unknown type: ")
  lea rdi, .LABEL__string_193[rip] # "Unknown type: "
  mov [rbp-42], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $21.1:rax 
  .loc 3 372 66
  # $22.1: @String = load_struct_member(type_name.1, lexeme)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type_name.1:rbx:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $21.1:rax $22.1:r15 
  .loc 3 372 35
  # $23.1: @String = call(append_354, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] $20.1:[rbp-42] $23.1:rax 
  .loc 3 372 9
  # call(abort_314, $20.1, $23.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_314
  # [discarded value]: $23.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] types.1:[rbp-33] 
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__convert_named_type_84__3:
  .loc 3 374 5
  # return(type.1)
  mov rax, [rbp-24]
  jmp .LABEL__convert_named_type_84__end
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type_name.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [discarded value]: type_name.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_named_type_84__end:
  mov rsp, rbp
  pop rbp
  ret

convert_named_type_84__stack_frame_size: .word 64

  .loc 3 377 1
  .text
convert_pointer_type_85:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_pointer_type_85__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_pointer_type_85__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Pointer_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 378 59
  # $1.1: @AST_Type = load_struct_member(type.1, pointed_type)
  mov rax, [rsi+16]
  # [discarded value]: type.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 378 35
  # $2.1: @IR_Type = call(convert_value_type_81, self.1, $1.1)
  mov rsi, rax
  call convert_value_type_81
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 3 378 12
  # $3.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $2.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  .loc 3 378 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_pointer_type_85__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__convert_pointer_type_85__end:
  mov rsp, rbp
  pop rbp
  ret

convert_pointer_type_85__stack_frame_size: .word 16

  .loc 3 381 1
  .text
create_function_86:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_function_86__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_function_86__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 383 14
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 383 14
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  .loc 3 383 14
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax 
  .loc 3 384 20
  # $4.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rbx, [rsi+8]
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax $4.1:rbx 
  .loc 3 385 18
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  .loc 3 386 16
  # $6.1: @Identifier_Token = load_struct_member(function_statement.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $6.1:r15 
  .loc 3 386 16
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $7.1:r14 
  .loc 3 387 22
  # $8.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-40], rax
  mov [rbp-48], r14
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 3 388 47
  # $9.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $9.1:r15 
  .loc 3 388 47
  # $10.1: @AST_Type = load_struct_member($9.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $10.1:r14 
  .loc 3 388 23
  # $11.1: @IR_Type = call(convert_value_type_81, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, r14
  mov [rbp-56], rax
  call convert_value_type_81
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax 
  .loc 3 389 23
  # $12.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $12.1:r15 
  .loc 3 389 23
  # $13.1: Boolean = $12.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $13.1:r14 
  .loc 3 382 17
  # function.1: @IR_Function = new IR_Function(object_type = IR_Function, id = $3.1, location = $4.1, blocks = $5.1, name = $7.1, parameters = $8.1, return_type = $11.1, is_external = $13.1, type = undefined)
  mov [rbp-64], rax
  mov [rbp-65], r14b
  mov rdi, 65
  call malloc
  #     .object_type = IR_Function
  mov rbx, IR_Function[rip]
  mov [rax], rbx
  #     .id = $3.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .location = $4.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .name = $7.1
  mov r14, [rbp-48]
  mov QWORD PTR [rax+24], r14
  #     .parameters = $8.1
  mov r13, [rbp-56]
  mov QWORD PTR [rax+32], r13
  #     .return_type = $11.1
  mov r12, [rbp-64]
  mov QWORD PTR [rax+40], r12
  #     .type = undefined
  #     .is_external = $13.1
  mov r11b, [rbp-65]
  mov BYTE PTR [rax+56], r11b
  #     .blocks = $5.1
  mov r10, [rbp-40]
  mov QWORD PTR [rax+57], r10
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax 
  .loc 3 393 19
  # $15.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $15.1:r15 
  .loc 3 393 19
  # $16.1: @List = load_struct_member($15.1, parameters)
  mov r14, [r15+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $16.1:r14 
  .loc 3 393 19
  # parameters.1: @List_Iterator = call(create_iterator_329, $16.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_iterator_329
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:rax 
  .loc 3 394 33
  # function_type_parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:rax 
  # jump(.LABEL__create_function_86__2)
  mov [rbp-56], rax
.LABEL__create_function_86__2:
  .loc 3 395 12
  # $19.1: Boolean = call(has_next_332, parameters.1)
  mov rdi, [rbp-48]
  call has_next_332
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:rax 
  # jump($19.1, .LABEL__create_function_86__3, .LABEL__create_function_86__4)
  test al, al
  mov [rbp-57], al
  jz .LABEL__create_function_86__4
.LABEL__create_function_86__3:
  .loc 3 396 22
  # parameter.1: @AST_Function_Parameter = call(next_333, parameters.1)
  mov rdi, [rbp-48]
  call next_333
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax 
  .loc 3 397 51
  # $22.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax $22.1:rbx 
  .loc 3 397 27
  # parameter_type.1: @IR_Type = call(convert_value_type_81, self.1, $22.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-65], rax
  call convert_value_type_81
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:[rbp-65] parameter_type.1:rax 
  .loc 3 398 27
  # $24.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rbx, [rbp-65]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rbx:[rbp-65] parameter_type.1:rax $24.1:r15 
  .loc 3 398 27
  # parameter_name.1: @String = load_struct_member($24.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rbx:[rbp-65] parameter_type.1:rax parameter_name.1:r14 
  .loc 3 399 68
  # $26.1: @Source_Location = load_struct_member(parameter.1, location)
  mov r15, [rbx]
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:rax parameter_name.1:r14 $26.1:r15 
  .loc 5 457 21
  # $27.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-65], rax
  mov [rbp-73], r14
  mov [rbp-81], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:[rbp-81] $27.1:rax 
  .loc 3 399 31
  # function_parameter.1: @IR_Function_Parameter = new IR_Function_Parameter(object_type = IR_Function_Parameter, location = $26.1, name = parameter_name.1, type = parameter_type.1, values = $27.1)
  mov [rbp-89], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Function_Parameter
  mov rbx, IR_Function_Parameter[rip]
  mov [rax], rbx
  #     .location = $26.1
  mov rbx, [rbp-81]
  mov QWORD PTR [rax+8], rbx
  #     .name = parameter_name.1
  mov r15, [rbp-73]
  mov QWORD PTR [rax+16], r15
  #     .type = parameter_type.1
  mov r14, [rbp-65]
  mov QWORD PTR [rax+24], r14
  #     .values = $27.1
  mov r13, [rbp-89]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r14:[rbp-65] parameter_name.1:r15:[rbp-73] function_parameter.1:rax 
  .loc 3 400 9
  # $29.1: @List = load_struct_member(function.1, parameters)
  mov rbx, [rbp-40]
  mov r13, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r14:[rbp-65] parameter_name.1:r15:[rbp-73] function_parameter.1:rax $29.1:r13 
  .loc 3 400 9
  # call(append_318, $29.1, function_parameter.1)
  mov rdi, r13
  mov rsi, rax
  call append_318
  # [discarded value]: $29.1
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] 
  .loc 3 401 41
  # $30.1: @IR_Function_Type_Parameter = new IR_Function_Type_Parameter(name = parameter_name.1, type = parameter_type.1)
  mov rdi, 16
  call malloc
  #     .name = parameter_name.1
  mov rbx, [rbp-73]
  mov QWORD PTR [rax], rbx
  #     .type = parameter_type.1
  mov r15, [rbp-65]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: parameter_name.1
  # [discarded value]: parameter_type.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $30.1:rax 
  .loc 3 401 9
  # call(append_318, function_type_parameters.1, $30.1)
  mov rdi, [rbp-56]
  mov rsi, rax
  call append_318
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # jump(.LABEL__create_function_86__2)
  jmp .LABEL__create_function_86__2
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
.LABEL__create_function_86__4:
  .loc 3 404 5
  # store_struct_member(function_statement.1, ir_function, function.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 405 5
  # $31.1: @List = load_struct_member(self.1, named_functions)
  mov r15, [rbp-32]
  mov r14, [r15+24]
  # [live values]: self.1:r15:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $31.1:r14 
  .loc 3 405 5
  # call(append_318, $31.1, function.1)
  mov rdi, r14
  mov rsi, rbx
  call append_318
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 407 71
  # $32.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $32.1:rbx 
  .loc 3 407 21
  # $33.1: @IR_Function_Type = call(create_ir_function_type_147, function_type_parameters.1, $32.1)
  mov rdi, [rbp-56]
  mov rsi, rbx
  call create_ir_function_type_147
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $33.1:rax 
  .loc 3 407 5
  # store_struct_member(function.1, type, $33.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rbx+48], rax
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 409 5
  # return(function.1)
  mov rax, rbx
  jmp .LABEL__create_function_86__end
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [discarded value]: function_type_parameters.1
  # [discarded value]: parameters.1
  # [discarded value]: function.1
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_function_86__end:
  mov rsp, rbp
  pop rbp
  ret

create_function_86__stack_frame_size: .word 96

  .loc 3 412 1
  .text
build_function_87:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_function_87__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_function_87__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 413 9
  # $1.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 413 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__build_function_87__2, .LABEL__build_function_87__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__build_function_87__3
.LABEL__build_function_87__2:
  .loc 3 414 9
  # return()
  jmp .LABEL__build_function_87__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__build_function_87__3:
  .loc 3 417 17
  # function.1: @IR_Function = load_struct_member(function_statement.1, ir_function)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx 
  .loc 3 419 52
  # $4.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov r15, [rbp-17]
  mov r14, [r15]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx $4.1:r14 
  .loc 3 44 24
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rbx
  mov [rbp-33], r14
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  .loc 3 45 27
  # $6.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-41], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 419 20
  # $7.1: @IR_Builder_Context = new IR_Builder_Context(parent = $4.1, variables = $5.1, named_values = $6.1)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  #     .parent = $4.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .variables = $5.1
  mov r15, [rbp-41]
  mov QWORD PTR [rax+8], r15
  #     .named_values = $6.1
  mov r14, [rbp-49]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $7.1:rax 
  .loc 3 419 5
  # store_struct_member(self.1, context, $7.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 420 5
  # $8.1: @Counter = load_struct_member(self.1, counter)
  mov rax, [rbx+48]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $8.1:rax 
  .loc 3 420 5
  # $9.1: @Counter = call(reset_143, $8.1)
  mov rdi, rax
  call reset_143
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 422 26
  # $10.1: @IR_Block = call(create_block_173, function.1)
  mov rdi, [rbp-25]
  call create_block_173
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $10.1:rax 
  .loc 3 422 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 424 28
  # $11.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-25]
  mov r15, [rax+32]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] $11.1:r15 
  .loc 3 424 28
  # function_parameters.1: @List_Iterator = call(create_iterator_329, $11.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:rax 
  # jump(.LABEL__build_function_87__5)
  mov [rbp-33], rax
.LABEL__build_function_87__5:
  .loc 3 425 12
  # $13.1: Boolean = call(has_next_332, function_parameters.1)
  mov rdi, [rbp-33]
  call has_next_332
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:rax 
  # jump($13.1, .LABEL__build_function_87__6, .LABEL__build_function_87__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__build_function_87__7
.LABEL__build_function_87__6:
  .loc 3 426 31
  # function_parameter.1: @IR_Function_Parameter = call(next_333, function_parameters.1)
  mov rdi, [rbp-33]
  call next_333
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:rax 
  .loc 3 427 9
  # $16.1: @IR_Variable = call(add_variable_67, self.1, function_parameter.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov [rbp-42], rax
  call add_variable_67
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] 
  .loc 3 428 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] $17.1:rbx 
  .loc 3 428 71
  # $18.1: @IR_Variable_Value = call(create_variable_value_70, self.1, function_parameter.1)
  mov rdi, rax
  mov rsi, [rbp-42]
  mov [rbp-50], rbx
  call create_variable_value_70
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $18.1:rax 
  .loc 3 428 35
  # $19.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_212, $18.1)
  mov rdi, rax
  call create_ir_load_variable_instruction_212
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $19.1:rax 
  .loc 3 428 9
  # $20.1: @IR_Instruction = call(append_168, $17.1, $19.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call append_168
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # jump(.LABEL__build_function_87__5)
  jmp .LABEL__build_function_87__5
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__build_function_87__7:
  .loc 3 431 34
  # $21.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $21.1:rbx 
  .loc 3 431 5
  # call(convert_block_statement_95, self.1, $21.1)
  mov rdi, [rbp-17]
  mov rsi, rbx
  call convert_block_statement_95
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  .loc 3 432 9
  # $22.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $22.1:rbx 
  .loc 3 432 9
  # $23.1: @IR_Instruction = load_struct_member($22.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $23.1:r15 
  .loc 3 432 9
  # $24.1: Boolean = $23.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $24.1:rbx 
  .loc 3 432 9
  # $25.1: Boolean = $24.1
  mov [rbp-35], bl
  # [discarded value]: $24.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:rbx 
  # jump($25.1, .LABEL__build_function_87__9, .LABEL__build_function_87__8)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__build_function_87__8
.LABEL__build_function_87__9:
  .loc 3 432 9
  # $25.3: Boolean = phi($25.1, $25.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # jump($25.3, .LABEL__build_function_87__10, .LABEL__build_function_87__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__build_function_87__11
.LABEL__build_function_87__10:
  .loc 3 433 13
  # $30.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $30.1:rbx 
  .loc 3 433 13
  # $31.1: @List = load_struct_member($30.1, predecessors)
  mov r15, [rbx+24]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $31.1:r15 
  .loc 3 433 13
  # $32.1: Int = load_struct_member($31.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $32.1:rbx 
  .loc 3 433 13
  # $33.1: Boolean = $32.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $33.1:r15 
  .loc 3 433 13
  # $34.1: Boolean = $33.1
  mov [rbp-36], r15b
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:r15 
  # jump($34.1, .LABEL__build_function_87__12, .LABEL__build_function_87__13)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__build_function_87__13
.LABEL__build_function_87__12:
  .loc 3 433 58
  # $35.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $35.1:rbx 
  .loc 3 433 58
  # $36.1: Int = load_struct_member($35.1, id)
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $36.1:r15 
  .loc 3 433 58
  # $37.1: Boolean = $36.1 != 1
  cmp r15, 1
  setne bl
  # [discarded value]: $36.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $37.1:rbx 
  .loc 3 433 13
  # $34.2: Boolean = $37.1
  mov [rbp-37], bl
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:rbx:[rbp-36] 
  # jump(.LABEL__build_function_87__13)
  mov [rbp-36], bl
.LABEL__build_function_87__13:
  .loc 3 433 13
  # $34.3: Boolean = phi($34.1, $34.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump($34.3, .LABEL__build_function_87__14, .LABEL__build_function_87__16)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__build_function_87__16
.LABEL__build_function_87__14:
  .loc 3 435 13
  # $43.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-25]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx 
  .loc 3 435 36
  # $44.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx $44.1:r14 
  .loc 3 435 13
  # $45.1: @List = call(remove_320, $43.1, $44.1)
  mov rdi, rbx
  mov rsi, r14
  call remove_320
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $45.1:rax 
  .loc 3 435 13
  # $46.1: @List = call(prune_322, $45.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump(.LABEL__build_function_87__11)
.LABEL__build_function_87__11:
  .loc 3 442 5
  # store_struct_member(self.1, current_block, null)
  mov rax, [rbp-17]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 444 5
  # call(remove_redundant_blocks_88, self.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call remove_redundant_blocks_88
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 445 5
  # call(populate_phi_instructions_89, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call populate_phi_instructions_89
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 446 5
  # call(remove_trivial_phi_instructions_91, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_trivial_phi_instructions_91
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 447 5
  # call(remove_redundant_set_instructions_92, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_redundant_set_instructions_92
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 449 20
  # $47.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $47.1:rbx $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 449 20
  # $48.1: @IR_Builder_Context = load_struct_member($47.1, parent)
  mov r15, [rbx]
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $48.1:r15 $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 449 5
  # store_struct_member(self.1, context, $48.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $48.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # return()
  jmp .LABEL__build_function_87__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
.LABEL__build_function_87__16:
  .loc 3 436 20
  # $38.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $38.1:rbx 
  .loc 3 436 20
  # $39.1: Boolean = call(is_343, $38.1, IR_Nothing_Type)
  mov rdi, rbx
  mov rsi, IR_Nothing_Type[rip]
  call is_343
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:rax 
  # jump($39.1, .LABEL__build_function_87__17, .LABEL__build_function_87__19)
  test al, al
  mov [rbp-37], al
  jz .LABEL__build_function_87__19
.LABEL__build_function_87__17:
  .loc 3 437 25
  # $41.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, null)
  xor rdi, rdi
  call create_ir_return_instruction_217
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $41.1:rax 
  .loc 3 437 13
  # $42.1: @IR_Variable_Value = call(append_77, self.1, $41.1, null)
  mov rdi, [rbp-17]
  mov rsi, rax
  xor rdx, rdx
  call append_77
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # jump(.LABEL__build_function_87__11)
  jmp .LABEL__build_function_87__11
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
.LABEL__build_function_87__19:
  .loc 3 439 19
  # $40.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $40.1:rbx 
  .loc 3 439 13
  # call(abort_314, $40.1, "Missing return statement")
  mov rdi, rbx
  lea rsi, .LABEL__string_194[rip] # "Missing return statement"
  call abort_314
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [discarded value]: $34.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [discarded value]: $34.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # [discarded value]: $25.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
.LABEL__build_function_87__8:
  .loc 3 432 56
  # $26.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $26.1:rbx 
  .loc 3 432 56
  # $27.1: @IR_Instruction = load_struct_member($26.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $27.1:r15 
  .loc 3 432 56
  # $28.1: Boolean = call(is_exit_instruction_177, $27.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $28.1:rax 
  .loc 3 432 56
  # $29.1: Boolean = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $29.1:rbx 
  .loc 3 432 9
  # $25.2: Boolean = $29.1
  mov [rbp-36], bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:rbx:[rbp-35] 
  # jump(.LABEL__build_function_87__9)
  mov [rbp-35], bl
  jmp .LABEL__build_function_87__9
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:[rbp-35] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [discarded value]: function_parameters.1
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] 
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_function_87__end:
  mov rsp, rbp
  pop rbp
  ret

build_function_87__stack_frame_size: .word 64

  .loc 3 452 1
  .text
remove_redundant_blocks_88:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_blocks_88__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_blocks_88__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_blocks_88__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_blocks_88__2:
  .loc 3 454 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 456 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 456 19
  # $2.1: @List = call(prune_322, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_322
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 456 19
  # blocks.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov rdi, rax
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_blocks_88__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_blocks_88__4:
  .loc 3 458 16
  # $4.1: Boolean = call(has_next_332, blocks.1)
  mov rdi, [rbp-17]
  call has_next_332
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_blocks_88__5, .LABEL__remove_redundant_blocks_88__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_blocks_88__6
.LABEL__remove_redundant_blocks_88__5:
  .loc 3 459 22
  # block.1: @IR_Block = call(next_333, blocks.1)
  mov rdi, [rbp-17]
  call next_333
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax 
  .loc 3 460 17
  # $7.1: Int = load_struct_member(block.1, id)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $7.1:rbx 
  .loc 3 460 17
  # $8.1: Boolean = $7.1 != 1
  cmp rbx, 1
  setne r15b
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $8.1:r15 
  # jump($8.1, .LABEL__remove_redundant_blocks_88__7, .LABEL__remove_redundant_blocks_88__4)
  test r15b, r15b
  mov [rbp-26], rax
  mov [rbp-27], r15b
  jz .LABEL__remove_redundant_blocks_88__4
.LABEL__remove_redundant_blocks_88__7:
  .loc 3 461 21
  # $9.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $9.1:rbx 
  .loc 3 461 21
  # $10.1: Int = load_struct_member($9.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $10.1:r15 
  .loc 3 461 21
  # $11.1: Boolean = $10.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:rbx 
  # jump($11.1, .LABEL__remove_redundant_blocks_88__9, .LABEL__remove_redundant_blocks_88__10)
  test bl, bl
  mov [rbp-28], bl
  jz .LABEL__remove_redundant_blocks_88__10
.LABEL__remove_redundant_blocks_88__9:
  .loc 3 463 25
  # $12.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $12.1:rbx 
  .loc 3 463 25
  # $13.1: Boolean = $12.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:r15 
  # jump($13.1, .LABEL__remove_redundant_blocks_88__11, .LABEL__remove_redundant_blocks_88__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__remove_redundant_blocks_88__13
.LABEL__remove_redundant_blocks_88__11:
  .loc 3 464 25
  # call(remove_current_331, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_331
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # jump(.LABEL__remove_redundant_blocks_88__10)
.LABEL__remove_redundant_blocks_88__10:
  .loc 3 476 21
  # $32.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx 
  .loc 3 476 48
  # $33.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx $33.1:r15 
  .loc 3 476 21
  # $34.1: Boolean = $32.1 == $33.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $34.1:r14 
  .loc 3 476 21
  # $35.1: Boolean = $34.1
  mov [rbp-30], r14b
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:r14 
  # jump($35.1, .LABEL__remove_redundant_blocks_88__20, .LABEL__remove_redundant_blocks_88__21)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_88__21
.LABEL__remove_redundant_blocks_88__20:
  .loc 3 476 74
  # $36.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $36.1:rbx 
  .loc 3 476 74
  # $35.2: Boolean = call(is_343, $36.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_343
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_88__21)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_88__21:
  .loc 3 476 21
  # $35.3: Boolean = phi($35.1, $35.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # jump($35.3, .LABEL__remove_redundant_blocks_88__22, .LABEL__remove_redundant_blocks_88__4)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_88__4
.LABEL__remove_redundant_blocks_88__22:
  .loc 3 478 42
  # $38.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] $38.1:rbx 
  .loc 3 478 42
  # block_predecessor.1: @IR_Block = call(last_328, $38.1)
  mov rdi, rbx
  call last_328
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax 
  .loc 3 479 41
  # $42.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rbp-26]
  mov r15, [rbx+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax $42.1:r15 
  .loc 3 479 40
  # block_successor.1: @IR_Block = load_struct_member($42.1, block)
  mov r14, [r15+65]
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 
  .loc 3 480 25
  # $44.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 
  .loc 3 480 25
  # $45.1: Boolean = call(is_343, $44.1, IR_Conditional_Jump_Instruction)
  mov rdi, r15
  mov rsi, IR_Conditional_Jump_Instruction[rip]
  mov [rbp-38], rax
  mov [rbp-46], r14
  call is_343
  # [discarded value]: $44.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:rax 
  # jump($45.1, .LABEL__remove_redundant_blocks_88__24, .LABEL__remove_redundant_blocks_88__25)
  test al, al
  mov [rbp-47], al
  jz .LABEL__remove_redundant_blocks_88__25
.LABEL__remove_redundant_blocks_88__24:
  .loc 3 481 25
  # $46.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $46.1:rbx 
  .loc 3 481 25
  # $47.1: @List = call(remove_320, $46.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_320
  # [discarded value]: $46.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $47.1:rax 
  .loc 3 481 25
  # $48.1: @List = call(prune_322, $47.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  .loc 3 482 58
  # block_predecessor_instruction.1: @IR_Conditional_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx 
  .loc 3 483 29
  # $51.1: @IR_Block = load_struct_member(block_predecessor_instruction.1, false_block)
  mov r15, [rbx+73]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $51.1:r15 
  .loc 3 483 29
  # $52.1: Boolean = $51.1 == block.1
  cmp r15, QWORD PTR [rbp-26]
  sete r14b
  # [discarded value]: $51.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $52.1:r14 
  # jump($52.1, .LABEL__remove_redundant_blocks_88__26, .LABEL__remove_redundant_blocks_88__28)
  test r14b, r14b
  mov [rbp-55], rbx
  mov [rbp-56], r14b
  jz .LABEL__remove_redundant_blocks_88__28
.LABEL__remove_redundant_blocks_88__26:
  .loc 3 484 29
  # store_struct_member(block_predecessor_instruction.1, false_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+73], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_88__27)
.LABEL__remove_redundant_blocks_88__27:
  .loc 3 488 25
  # $53.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rax, [rbp-46]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rax:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $53.1:rbx 
  .loc 3 488 25
  # $54.1: @List = call(remove_320, $53.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_320
  # [discarded value]: $53.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $54.1:rax 
  .loc 3 488 25
  # $55.1: @List = call(prune_322, $54.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $54.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $55.1:rax 
  .loc 3 488 25
  # call(append_318, $55.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_318
  # [discarded value]: $55.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  .loc 3 489 25
  # repeat.3: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_88__6)
  mov [rbp-9], al
.LABEL__remove_redundant_blocks_88__6:
  # repeat.5: Boolean = phi(repeat.2, repeat.3, repeat.4, repeat.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] repeat.5:[rbp-9] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  .loc 3 504 13
  # $66.1: Boolean = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:rax $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # jump($66.1, .LABEL__remove_redundant_blocks_88__3, .LABEL__remove_redundant_blocks_88__2)
  test al, al
  mov [rbp-57], al
  jz .LABEL__remove_redundant_blocks_88__2
.LABEL__remove_redundant_blocks_88__3:
  # return()
  jmp .LABEL__remove_redundant_blocks_88__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:[rbp-57] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: $66.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
.LABEL__remove_redundant_blocks_88__28:
  .loc 3 486 29
  # store_struct_member(block_predecessor_instruction.1, true_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+65], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_88__27)
  jmp .LABEL__remove_redundant_blocks_88__27
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [discarded value]: $52.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] 
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
.LABEL__remove_redundant_blocks_88__25:
  .loc 3 492 25
  # $56.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $56.1:rbx 
  .loc 3 492 25
  # $57.1: Boolean = call(is_343, $56.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_343
  # [discarded value]: $56.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:rax 
  # jump($57.1, .LABEL__remove_redundant_blocks_88__30, .LABEL__remove_redundant_blocks_88__4)
  test al, al
  mov [rbp-48], al
  jz .LABEL__remove_redundant_blocks_88__4
.LABEL__remove_redundant_blocks_88__30:
  .loc 3 493 25
  # $58.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $58.1:rbx 
  .loc 3 493 25
  # $59.1: @List = call(remove_320, $58.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_320
  # [discarded value]: $58.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $59.1:rax 
  .loc 3 493 25
  # $60.1: @List = call(prune_322, $59.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 494 58
  # block_predecessor_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] block_predecessor_instruction.1:rbx 
  .loc 3 495 25
  # store_struct_member(block_predecessor_instruction.1, block, block_successor.1)
  mov r15, [rbp-46]
  mov QWORD PTR [rbx+65], r15
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 496 25
  # $63.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rbx, [r15+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $63.1:rbx 
  .loc 3 496 25
  # $64.1: @List = call(remove_320, $63.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_320
  # [discarded value]: $63.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $64.1:rax 
  .loc 3 496 25
  # $65.1: @List = call(prune_322, $64.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $64.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $65.1:rax 
  .loc 3 496 25
  # call(append_318, $65.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_318
  # [discarded value]: $65.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 497 25
  # repeat.4: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_88__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_88__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  # [discarded value]: $57.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] 
  # [discarded value]: block_successor.1
  # [discarded value]: block_predecessor.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # [discarded value]: $35.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [discarded value]: $35.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__remove_redundant_blocks_88__13:
  .loc 3 465 32
  # $14.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx 
  .loc 3 465 58
  # $15.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov r15, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx $15.1:r15 
  .loc 3 465 32
  # $16.1: Boolean = $14.1 == $15.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $16.1:r14 
  .loc 3 465 32
  # $17.1: Boolean = $16.1
  mov [rbp-30], r14b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:r14 
  # jump($17.1, .LABEL__remove_redundant_blocks_88__14, .LABEL__remove_redundant_blocks_88__15)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_88__15
.LABEL__remove_redundant_blocks_88__14:
  .loc 3 465 85
  # $18.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $18.1:rbx 
  .loc 3 465 85
  # $17.2: Boolean = call(is_343, $18.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_343
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_88__15)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_88__15:
  .loc 3 465 32
  # $17.3: Boolean = phi($17.1, $17.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # jump($17.3, .LABEL__remove_redundant_blocks_88__16, .LABEL__remove_redundant_blocks_88__18)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_88__18
.LABEL__remove_redundant_blocks_88__16:
  .loc 3 466 46
  # block_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx 
  .loc 3 467 25
  # $26.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov r15, [rbx+65]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $26.1:r15 
  .loc 3 467 25
  # $27.1: @List = load_struct_member($26.1, predecessors)
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $27.1:r14 
  .loc 3 467 25
  # $28.1: @List = call(remove_320, $27.1, block.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-38], rbx
  call remove_320
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:[rbp-38] 
  .loc 3 468 25
  # $29.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov rax, [rbp-38]
  mov rbx, [rax+65]
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $29.1:rbx 
  .loc 3 468 25
  # $30.1: @List = load_struct_member($29.1, predecessors)
  mov rax, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $30.1:rax 
  .loc 3 468 25
  # $31.1: @List = call(prune_322, $30.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 469 25
  # call(remove_current_331, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_331
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 470 25
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_88__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_88__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
.LABEL__remove_redundant_blocks_88__18:
  .loc 3 473 31
  # $20.1: @Source_Location = load_struct_member(function.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: function.1:rax:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:rbx 
  .loc 3 473 50
  # $21.1: @String = call(clone_345, "Found non-empty unreachable block: block.")
  lea rdi, .LABEL__string_195[rip] # "Found non-empty unreachable block: block."
  mov [rbp-38], rbx
  call clone_345
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax 
  .loc 3 473 108
  # $22.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax $22.1:r15 
  .loc 3 473 50
  # $23.1: @String = call(append_353, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call append_353
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $23.1:rax 
  .loc 3 473 25
  # call(abort_314, $20.1, $23.1)
  mov rdi, [rbp-38]
  mov rsi, rax
  call abort_314
  # [discarded value]: $23.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # [discarded value]: $17.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [discarded value]: $17.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] 
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] 
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_blocks_88__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_blocks_88__stack_frame_size: .word 64

  .loc 3 510 1
  .text
populate_phi_instructions_89:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR populate_phi_instructions_89__stack_frame_size[rip]
  sub rsp, rax
.LABEL__populate_phi_instructions_89__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 3 511 15
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rsi+57]
  # [discarded value]: function.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 511 15
  # blocks.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] blocks.1:rax 
  # jump(.LABEL__populate_phi_instructions_89__2)
  mov [rbp-16], rax
.LABEL__populate_phi_instructions_89__2:
  .loc 3 512 12
  # $3.1: Boolean = call(has_next_332, blocks.1)
  mov rdi, [rbp-16]
  call has_next_332
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__populate_phi_instructions_89__3, .LABEL__populate_phi_instructions_89__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__populate_phi_instructions_89__4
.LABEL__populate_phi_instructions_89__3:
  .loc 3 513 18
  # block.1: @IR_Block = call(next_333, blocks.1)
  mov rdi, [rbp-16]
  call next_333
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax 
  .loc 3 514 30
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__populate_phi_instructions_89__5)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__populate_phi_instructions_89__5:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  .loc 3 515 16
  # $7.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $7.1:rax 
  .loc 3 515 16
  # $8.1: Boolean = $7.1
  mov [rbp-34], al
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__populate_phi_instructions_89__8, .LABEL__populate_phi_instructions_89__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__populate_phi_instructions_89__9
.LABEL__populate_phi_instructions_89__8:
  .loc 3 515 45
  # $8.2: Boolean = call(is_343, block_instruction.2, IR_Phi_Instruction)
  mov rdi, [rbp-33]
  mov rsi, IR_Phi_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:rax:[rbp-34] 
  # jump(.LABEL__populate_phi_instructions_89__9)
  mov [rbp-34], al
.LABEL__populate_phi_instructions_89__9:
  .loc 3 515 16
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($8.3, .LABEL__populate_phi_instructions_89__6, .LABEL__populate_phi_instructions_89__2)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__populate_phi_instructions_89__2
.LABEL__populate_phi_instructions_89__6:
  .loc 3 516 28
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-33]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 517 17
  # $11.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $11.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 517 17
  # $12.1: @IR_Values_Map_Entry = load_struct_member($11.1, first_entry)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $12.1:r15 $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 517 17
  # $13.1: Boolean = $12.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $13.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($13.1, .LABEL__populate_phi_instructions_89__10, .LABEL__populate_phi_instructions_89__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__populate_phi_instructions_89__11
.LABEL__populate_phi_instructions_89__10:
  .loc 3 518 39
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] $14.1:rbx 
  .loc 3 518 39
  # block_predecessors.1: @List_Iterator = call(create_iterator_329, $14.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:rax 
  # jump(.LABEL__populate_phi_instructions_89__12)
  mov [rbp-51], rax
.LABEL__populate_phi_instructions_89__12:
  .loc 3 519 24
  # $16.1: Boolean = call(has_next_332, block_predecessors.1)
  mov rdi, [rbp-51]
  call has_next_332
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:rax 
  # jump($16.1, .LABEL__populate_phi_instructions_89__13, .LABEL__populate_phi_instructions_89__11)
  test al, al
  mov [rbp-52], al
  jz .LABEL__populate_phi_instructions_89__11
.LABEL__populate_phi_instructions_89__13:
  .loc 3 520 42
  # block_predecessor.1: @IR_Block = call(next_333, block_predecessors.1)
  mov rdi, [rbp-51]
  call next_333
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax 
  .loc 3 521 89
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-42]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $19.1:r15 
  .loc 3 521 89
  # $20.1: @IR_Variable = load_struct_member($19.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $20.1:r14 
  .loc 3 521 40
  # $21.1: @IR_Value = call(get_block_variable_value_90, self.1, block_predecessor.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r14
  call get_block_variable_value_90
  # [discarded value]: $20.1
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] $21.1:rax 
  .loc 3 521 21
  # call(append_247, instruction.1, $21.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_247
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_89__12)
  jmp .LABEL__populate_phi_instructions_89__12
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
.LABEL__populate_phi_instructions_89__11:
  .loc 3 524 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:rbx:[rbp-33] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_89__5)
  mov [rbp-33], rbx
  jmp .LABEL__populate_phi_instructions_89__5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:[rbp-33] $16.1:[rbp-52] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__populate_phi_instructions_89__4:
  # return()
  jmp .LABEL__populate_phi_instructions_89__end
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [discarded value]: blocks.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__populate_phi_instructions_89__end:
  mov rsp, rbp
  pop rbp
  ret

populate_phi_instructions_89__stack_frame_size: .word 64

  .loc 3 529 1
  .text
get_block_variable_value_90:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_block_variable_value_90__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_block_variable_value_90__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx 
  .loc 3 530 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rsi+40]
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx block_instruction.1:rax 
  # jump(.LABEL__get_block_variable_value_90__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__get_block_variable_value_90__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.7)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  .loc 3 531 12
  # $2.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_block_variable_value_90__3, .LABEL__get_block_variable_value_90__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_block_variable_value_90__4
.LABEL__get_block_variable_value_90__3:
  .loc 3 532 13
  # $3.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 3 532 13
  # $4.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:r15 
  .loc 3 532 13
  # $5.1: Boolean = $4.1
  mov [rbp-34], r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:r15 
  # jump($5.1, .LABEL__get_block_variable_value_90__5, .LABEL__get_block_variable_value_90__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__get_block_variable_value_90__6
.LABEL__get_block_variable_value_90__5:
  .loc 3 532 55
  # $6.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $6.1:rbx 
  .loc 3 532 55
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $7.1:r15 
  .loc 3 532 55
  # $8.1: Boolean = $7.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $8.1:rbx 
  .loc 3 532 13
  # $5.2: Boolean = $8.1
  mov [rbp-35], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:rbx:[rbp-34] 
  # jump(.LABEL__get_block_variable_value_90__6)
  mov [rbp-34], bl
.LABEL__get_block_variable_value_90__6:
  .loc 3 532 13
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # jump($5.3, .LABEL__get_block_variable_value_90__7, .LABEL__get_block_variable_value_90__8)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__get_block_variable_value_90__8
.LABEL__get_block_variable_value_90__7:
  .loc 3 533 20
  # $9.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] $9.1:rbx 
  .loc 3 533 13
  # return($9.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__get_block_variable_value_90__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
.LABEL__get_block_variable_value_90__8:
  .loc 3 535 29
  # block_instruction.7: @IR_Instruction = load_struct_member(block_instruction.2, prev_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:rbx:[rbp-8] 
  # jump(.LABEL__get_block_variable_value_90__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_block_variable_value_90__2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:[rbp-8] 
  # [discarded value]: block_instruction.7
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__get_block_variable_value_90__4:
  .loc 3 537 9
  # $11.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $11.1:rbx 
  .loc 3 537 9
  # $12.1: Int = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $12.1:r15 
  .loc 3 537 9
  # $13.1: Boolean = $12.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:rbx 
  # jump($13.1, .LABEL__get_block_variable_value_90__10, .LABEL__get_block_variable_value_90__11)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__get_block_variable_value_90__11
.LABEL__get_block_variable_value_90__10:
  .loc 3 538 46
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $14.1:rbx 
  .loc 3 538 46
  # $16.1: @IR_Block = call(last_328, $14.1)
  mov rdi, rbx
  call last_328
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $16.1:rax 
  .loc 3 538 16
  # $17.1: @IR_Value = call(get_block_variable_value_90, self.1, $16.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_90
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $17.1:rax 
  .loc 3 538 9
  # return($17.1)
  mov [rbp-42], rax
  jmp .LABEL__get_block_variable_value_90__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__get_block_variable_value_90__11:
  .loc 3 540 46
  # $18.1: @IR_Variable_Value = call(create_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  call create_variable_value_70
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $18.1:rax 
  .loc 3 540 20
  # instruction.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax 
  .loc 3 541 5
  # $20.1: @IR_Instruction = call(prepend_167, block.1, instruction.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-42], rax
  call prepend_167
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] 
  .loc 3 542 27
  # $21.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] $21.1:rbx 
  .loc 3 542 27
  # block_predecessors.1: @List_Iterator = call(create_iterator_329, $21.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:rax 
  # jump(.LABEL__get_block_variable_value_90__13)
  mov [rbp-50], rax
.LABEL__get_block_variable_value_90__13:
  .loc 3 543 12
  # $23.1: Boolean = call(has_next_332, block_predecessors.1)
  mov rdi, [rbp-50]
  call has_next_332
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:rax 
  # jump($23.1, .LABEL__get_block_variable_value_90__14, .LABEL__get_block_variable_value_90__15)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_block_variable_value_90__15
.LABEL__get_block_variable_value_90__14:
  .loc 3 544 30
  # block_predecessor.1: @IR_Block = call(next_333, block_predecessors.1)
  mov rdi, [rbp-50]
  call next_333
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] block_predecessor.1:rax 
  .loc 3 545 28
  # $26.1: @IR_Value = call(get_block_variable_value_90, self.1, block_predecessor.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_90
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $26.1:rax 
  .loc 3 545 9
  # call(append_247, instruction.1, $26.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_247
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # jump(.LABEL__get_block_variable_value_90__13)
  jmp .LABEL__get_block_variable_value_90__13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
.LABEL__get_block_variable_value_90__15:
  .loc 3 547 12
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $27.1:rbx 
  .loc 3 547 5
  # return($27.1)
  mov rax, rbx
  mov [rbp-59], rbx
  jmp .LABEL__get_block_variable_value_90__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [discarded value]: block_instruction.1
  # [discarded value]: variable.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_block_variable_value_90__end:
  mov rsp, rbp
  pop rbp
  ret

get_block_variable_value_90__stack_frame_size: .word 64

  .loc 3 550 1
  .text
remove_trivial_phi_instructions_91:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_trivial_phi_instructions_91__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_trivial_phi_instructions_91__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_trivial_phi_instructions_91__2)
  mov [rbp-8], rsi
.LABEL__remove_trivial_phi_instructions_91__2:
  .loc 3 552 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 554 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 554 19
  # $2.1: @List = call(prune_322, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_322
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 554 19
  # blocks.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov rdi, rax
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  .loc 3 557 9
  # $4.1: @Any = call(next_333, blocks.1)
  mov rdi, rax
  mov [rbp-17], rax
  call next_333
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__4)
.LABEL__remove_trivial_phi_instructions_91__4:
  # repeat.4: Boolean = phi(repeat.1, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  .loc 3 559 16
  # $5.1: Boolean = call(has_next_332, blocks.1)
  mov rdi, [rbp-17]
  call has_next_332
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__remove_trivial_phi_instructions_91__5, .LABEL__remove_trivial_phi_instructions_91__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_trivial_phi_instructions_91__6
.LABEL__remove_trivial_phi_instructions_91__5:
  .loc 3 560 22
  # block.1: @IR_Block = call(next_333, blocks.1)
  mov rdi, [rbp-17]
  call next_333
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax 
  .loc 3 561 34
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_trivial_phi_instructions_91__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_trivial_phi_instructions_91__7:
  # repeat.6: Boolean = phi(repeat.4, repeat.7)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] 
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] 
  .loc 3 562 20
  # $9.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $9.1:rax 
  .loc 3 562 20
  # $10.1: Boolean = $9.1
  mov [rbp-35], al
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__remove_trivial_phi_instructions_91__10, .LABEL__remove_trivial_phi_instructions_91__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_trivial_phi_instructions_91__11
.LABEL__remove_trivial_phi_instructions_91__10:
  .loc 3 562 49
  # $10.2: Boolean = call(is_343, block_instruction.2, IR_Phi_Instruction)
  mov rdi, [rbp-34]
  mov rsi, IR_Phi_Instruction[rip]
  call is_343
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__11)
  mov [rbp-35], al
.LABEL__remove_trivial_phi_instructions_91__11:
  .loc 3 562 20
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__remove_trivial_phi_instructions_91__8, .LABEL__remove_trivial_phi_instructions_91__4)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_91__4
.LABEL__remove_trivial_phi_instructions_91__8:
  .loc 3 563 32
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 564 45
  # instruction_is_redundant.1: Boolean = call(is_redundant_248, instruction.1)
  mov rdi, rax
  mov [rbp-43], rax
  call is_redundant_248
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 565 21
  # $14.1: Boolean = instruction_is_redundant.1 == false
  cmp al, 0
  sete bl
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $14.1:rbx $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 565 21
  # $15.1: Boolean = $14.1
  mov [rbp-44], bl
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $15.1:rbx $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($15.1, .LABEL__remove_trivial_phi_instructions_91__12, .LABEL__remove_trivial_phi_instructions_91__13)
  test bl, bl
  mov [rbp-44], al
  mov [rbp-45], bl
  jz .LABEL__remove_trivial_phi_instructions_91__13
.LABEL__remove_trivial_phi_instructions_91__12:
  .loc 3 565 58
  # $15.2: Boolean = call(is_trivial_249, instruction.1)
  mov rdi, [rbp-43]
  call is_trivial_249
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:rax:[rbp-45] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__13)
  mov [rbp-45], al
.LABEL__remove_trivial_phi_instructions_91__13:
  .loc 3 565 21
  # $15.3: Boolean = phi($15.1, $15.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  # jump($15.3, .LABEL__remove_trivial_phi_instructions_91__14, .LABEL__remove_trivial_phi_instructions_91__15)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_91__15
.LABEL__remove_trivial_phi_instructions_91__14:
  .loc 3 567 21
  # $17.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-43]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] $17.1:rbx 
  .loc 3 567 62
  # $18.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov r15, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] $17.1:rbx $18.1:r15 
  .loc 3 567 21
  # call(remove_values_183, $17.1, $18.1)
  mov rdi, rbx
  mov rsi, r15
  call remove_values_183
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  .loc 3 568 21
  # instruction_is_redundant.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:rax:[rbp-44] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__15)
  mov [rbp-44], al
.LABEL__remove_trivial_phi_instructions_91__15:
  # instruction_is_redundant.3: Boolean = phi(instruction_is_redundant.2, instruction_is_redundant.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] 
  # jump(instruction_is_redundant.3, .LABEL__remove_trivial_phi_instructions_91__16, .LABEL__remove_trivial_phi_instructions_91__17)
  mov al, [rbp-44]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_91__17
.LABEL__remove_trivial_phi_instructions_91__16:
  .loc 3 572 34
  # old_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-43]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx 
  .loc 3 573 34
  # $20.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov r15, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx $20.1:r15 
  .loc 3 573 34
  # $21.1: @IR_Values_Map_Entry = load_struct_member($20.1, first_entry)
  mov r14, [r15]
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx $21.1:r14 
  .loc 3 573 34
  # new_value.1: @IR_Value = load_struct_member($21.1, value)
  mov r15, [r14+8]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx new_value.1:r15 
  .loc 3 574 42
  # $23.1: @List = load_struct_member(old_value.1, user_instructions)
  mov r14, [rbx+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx new_value.1:r15 $23.1:r14 
  .loc 3 574 42
  # user_instructions.1: @List_Iterator = call(create_iterator_329, $23.1)
  mov rdi, r14
  mov [rbp-53], rbx
  mov [rbp-61], r15
  call create_iterator_329
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:rax 
  # jump(.LABEL__remove_trivial_phi_instructions_91__18)
  mov [rbp-69], rax
.LABEL__remove_trivial_phi_instructions_91__18:
  .loc 3 575 28
  # $25.1: Boolean = call(has_next_332, user_instructions.1)
  mov rdi, [rbp-69]
  call has_next_332
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:rax 
  # jump($25.1, .LABEL__remove_trivial_phi_instructions_91__19, .LABEL__remove_trivial_phi_instructions_91__20)
  test al, al
  mov [rbp-70], al
  jz .LABEL__remove_trivial_phi_instructions_91__20
.LABEL__remove_trivial_phi_instructions_91__19:
  .loc 3 576 45
  # user_instruction.1: @IR_Instruction = call(next_333, user_instructions.1)
  mov rdi, [rbp-69]
  call next_333
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] user_instruction.1:rax 
  .loc 3 577 25
  # call(replace_operand_value_179, user_instruction.1, old_value.1, new_value.1)
  mov rdi, rax
  mov rsi, [rbp-53]
  mov rdx, [rbp-61]
  call replace_operand_value_179
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__18)
  jmp .LABEL__remove_trivial_phi_instructions_91__18
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
.LABEL__remove_trivial_phi_instructions_91__20:
  .loc 3 579 21
  # $28.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-61]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:rax:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $28.1:rbx 
  .loc 3 579 21
  # $29.1: @List = call(remove_all_321, $28.1, instruction.1)
  mov rdi, rbx
  mov rsi, [rbp-43]
  call remove_all_321
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $29.1:rax 
  .loc 3 579 21
  # $30.1: @List = call(prune_322, $29.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  .loc 3 580 45
  # $31.1: @List = load_struct_member(old_value.1, links)
  mov rax, [rbp-53]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rax:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $31.1:rbx 
  .loc 3 580 45
  # old_value_links_item.1: @List_Item = load_struct_member($31.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rax:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:r15 
  # jump(.LABEL__remove_trivial_phi_instructions_91__21)
  mov [rbp-78], r15
.LABEL__remove_trivial_phi_instructions_91__21:
  # old_value_links_item.2: @List_Item = phi(old_value_links_item.1, old_value_links_item.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] 
  .loc 3 581 28
  # $33.1: Boolean = old_value_links_item.2 != null
  cmp QWORD PTR [rbp-78], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:rax 
  # jump($33.1, .LABEL__remove_trivial_phi_instructions_91__22, .LABEL__remove_trivial_phi_instructions_91__23)
  test al, al
  mov [rbp-79], al
  jz .LABEL__remove_trivial_phi_instructions_91__23
.LABEL__remove_trivial_phi_instructions_91__22:
  .loc 3 582 43
  # old_value_link.1: @IR_Link = load_struct_member(old_value_links_item.2, data)
  mov rax, [rbp-78]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:rax:[rbp-78] $33.1:[rbp-79] old_value_link.1:rbx 
  .loc 3 583 29
  # $36.1: Boolean = call(is_343, old_value_link.1, IR_Required_By_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Required_By_Value_Link[rip]
  mov [rbp-87], rbx
  call is_343
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:rax 
  # jump($36.1, .LABEL__remove_trivial_phi_instructions_91__24, .LABEL__remove_trivial_phi_instructions_91__25)
  test al, al
  mov [rbp-88], al
  jz .LABEL__remove_trivial_phi_instructions_91__25
.LABEL__remove_trivial_phi_instructions_91__24:
  .loc 3 584 47
  # old_value_link.1: @IR_Required_By_Value_Link = old_value_link.1
  mov rax, [rbp-87]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax 
  .loc 3 585 29
  # $38.1: @IR_Requires_Value_Link = load_struct_member(old_value_link.1, back_link)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax $38.1:rbx 
  .loc 3 585 29
  # store_struct_member($38.1, value, new_value.1)
  mov r15, [rbp-61]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:r15:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax 
  .loc 3 586 29
  # $39.1: @List = load_struct_member(new_value.1, links)
  mov rbx, [r15+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:r15:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax $39.1:rbx 
  .loc 3 586 29
  # call(append_318, $39.1, old_value_link.1)
  mov rdi, rbx
  mov rsi, rax
  call append_318
  # [discarded value]: $39.1
  # [discarded value]: old_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__25)
.LABEL__remove_trivial_phi_instructions_91__25:
  .loc 3 588 48
  # old_value_links_item.5: @List_Item = load_struct_member(old_value_links_item.2, next_item)
  mov rax, [rbp-78]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_links_item.5:rbx:[rbp-78] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__21)
  mov [rbp-78], rbx
  jmp .LABEL__remove_trivial_phi_instructions_91__21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_links_item.5:[rbp-78] 
  # [discarded value]: old_value_links_item.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] 
  # [discarded value]: old_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
.LABEL__remove_trivial_phi_instructions_91__23:
  .loc 3 590 21
  # call(remove_171, block.1, instruction.1)
  mov rdi, [rbp-26]
  mov rsi, [rbp-43]
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
  .loc 3 591 21
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__17)
  mov [rbp-9], al
.LABEL__remove_trivial_phi_instructions_91__17:
  # repeat.7: Boolean = phi(repeat.2, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  .loc 3 593 37
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:rbx:[rbp-34] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_91__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_trivial_phi_instructions_91__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:[rbp-34] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [discarded value]: block_instruction.6
  # [discarded value]: repeat.7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] 
  # [discarded value]: old_value_links_item.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] 
  # [discarded value]: old_value_links_item.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [discarded value]: user_instructions.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] 
  # [discarded value]: instruction_is_redundant.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] 
  # [discarded value]: instruction_is_redundant.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  # [discarded value]: $15.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] 
  # [discarded value]: $15.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $15.1
  # [discarded value]: instruction_is_redundant.1
  # [discarded value]: instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: block_instruction.2
  # [discarded value]: repeat.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
.LABEL__remove_trivial_phi_instructions_91__6:
  .loc 3 597 13
  # $42.1: Boolean = repeat.4 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $42.1:rax 
  # jump($42.1, .LABEL__remove_trivial_phi_instructions_91__3, .LABEL__remove_trivial_phi_instructions_91__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_trivial_phi_instructions_91__2
.LABEL__remove_trivial_phi_instructions_91__3:
  # return()
  jmp .LABEL__remove_trivial_phi_instructions_91__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $42.1:[rbp-19] 
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_trivial_phi_instructions_91__end:
  mov rsp, rbp
  pop rbp
  ret

remove_trivial_phi_instructions_91__stack_frame_size: .word 96

  .loc 3 603 1
  .text
remove_redundant_set_instructions_92:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_set_instructions_92__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_set_instructions_92__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_set_instructions_92__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_set_instructions_92__2:
  .loc 3 605 9
  # repeat.1: Boolean = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 607 19
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 607 19
  # $2.1: @List = call(prune_322, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_322
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 607 19
  # blocks.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov rdi, rax
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_set_instructions_92__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_set_instructions_92__4:
  # repeat.5: Boolean = phi(repeat.1, repeat.3, repeat.2, repeat.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  .loc 3 608 16
  # $4.1: Boolean = call(has_next_332, blocks.1)
  mov rdi, [rbp-17]
  call has_next_332
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_set_instructions_92__5, .LABEL__remove_redundant_set_instructions_92__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_set_instructions_92__6
.LABEL__remove_redundant_set_instructions_92__5:
  .loc 3 609 22
  # block.1: @IR_Block = call(next_333, blocks.1)
  mov rdi, [rbp-17]
  call next_333
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax 
  .loc 3 611 34
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_redundant_set_instructions_92__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_redundant_set_instructions_92__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.11)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 3 612 20
  # $8.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:rax 
  # jump($8.1, .LABEL__remove_redundant_set_instructions_92__8, .LABEL__remove_redundant_set_instructions_92__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_redundant_set_instructions_92__4
.LABEL__remove_redundant_set_instructions_92__8:
  .loc 3 613 21
  # $9.1: Boolean = call(is_343, block_instruction.2, IR_Set_Instruction)
  mov rdi, [rbp-34]
  mov rsi, IR_Set_Instruction[rip]
  call is_343
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:rax 
  # jump($9.1, .LABEL__remove_redundant_set_instructions_92__10, .LABEL__remove_redundant_set_instructions_92__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__remove_redundant_set_instructions_92__11
.LABEL__remove_redundant_set_instructions_92__10:
  .loc 3 614 31
  # $10.1: @IR_Set_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:rax 
  .loc 3 614 30
  # value.1: @IR_Value = call(get_value_221, $10.1)
  mov rdi, rax
  call get_value_221
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax 
  .loc 3 615 25
  # $13.1: Boolean = call(is_343, value.1, IR_Undefined_Value)
  mov rdi, rax
  mov rsi, IR_Undefined_Value[rip]
  mov [rbp-44], rax
  call is_343
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__remove_redundant_set_instructions_92__12, .LABEL__remove_redundant_set_instructions_92__13)
  test al, al
  mov [rbp-45], al
  jz .LABEL__remove_redundant_set_instructions_92__13
.LABEL__remove_redundant_set_instructions_92__12:
  .loc 3 615 57
  # $14.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $14.1:rbx 
  .loc 3 615 57
  # $15.1: @List = load_struct_member($14.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $15.1:r15 
  .loc 3 615 57
  # $16.1: Int = load_struct_member($15.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $16.1:rbx 
  .loc 3 615 57
  # $17.1: Boolean = $16.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $17.1:r15 
  .loc 3 615 25
  # $13.2: Boolean = $17.1
  mov [rbp-46], r15b
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:r15:[rbp-45] 
  # jump(.LABEL__remove_redundant_set_instructions_92__13)
  mov [rbp-45], r15b
.LABEL__remove_redundant_set_instructions_92__13:
  .loc 3 615 25
  # $13.3: Boolean = phi($13.1, $13.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # jump($13.3, .LABEL__remove_redundant_set_instructions_92__14, .LABEL__remove_redundant_set_instructions_92__15)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_92__15
.LABEL__remove_redundant_set_instructions_92__14:
  .loc 3 616 25
  # call(remove_171, block.1, block_instruction.2)
  mov rdi, [rbp-26]
  mov rsi, [rbp-34]
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  .loc 3 617 25
  # repeat.2: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_92__4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_92__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
.LABEL__remove_redundant_set_instructions_92__15:
  .loc 3 620 25
  # $18.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-44]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $18.1:rbx 
  .loc 3 620 25
  # $19.1: Int = load_struct_member($18.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $19.1:r15 
  .loc 3 620 25
  # $20.1: Boolean = $19.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $20.1:rbx 
  .loc 3 620 25
  # $21.1: Boolean = $20.1
  mov [rbp-46], bl
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:rbx 
  # jump($21.1, .LABEL__remove_redundant_set_instructions_92__17, .LABEL__remove_redundant_set_instructions_92__18)
  test bl, bl
  mov [rbp-46], bl
  jz .LABEL__remove_redundant_set_instructions_92__18
.LABEL__remove_redundant_set_instructions_92__17:
  .loc 3 620 62
  # $22.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-44]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $22.1:rbx 
  .loc 3 620 62
  # $23.1: @List_Item = load_struct_member($22.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $23.1:r15 
  .loc 3 620 62
  # $25.1: @IR_Instruction = load_struct_member($23.1, data)
  mov rbx, [r15+16]
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $25.1:rbx 
  .loc 3 620 62
  # $26.1: Boolean = $25.1 == block_instruction.2
  cmp rbx, QWORD PTR [rbp-34]
  sete r15b
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $26.1:r15 
  .loc 3 620 25
  # $21.2: Boolean = $26.1
  mov [rbp-47], r15b
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:r15:[rbp-46] 
  # jump(.LABEL__remove_redundant_set_instructions_92__18)
  mov [rbp-46], r15b
.LABEL__remove_redundant_set_instructions_92__18:
  .loc 3 620 25
  # $21.3: Boolean = phi($21.1, $21.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] 
  # jump($21.3, .LABEL__remove_redundant_set_instructions_92__19, .LABEL__remove_redundant_set_instructions_92__11)
  mov al, [rbp-46]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_92__11
.LABEL__remove_redundant_set_instructions_92__19:
  .loc 3 621 54
  # value_creator_instruction.1: @IR_Instruction = load_struct_member(value.1, creator_instruction)
  mov rax, [rbp-44]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx 
  .loc 3 622 29
  # $28.1: Boolean = value_creator_instruction.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx $28.1:r15 
  .loc 3 622 29
  # $29.1: Boolean = $28.1
  mov [rbp-47], r15b
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx $29.1:r15 
  # jump($29.1, .LABEL__remove_redundant_set_instructions_92__21, .LABEL__remove_redundant_set_instructions_92__22)
  test r15b, r15b
  mov [rbp-54], rbx
  mov [rbp-55], r15b
  jz .LABEL__remove_redundant_set_instructions_92__22
.LABEL__remove_redundant_set_instructions_92__21:
  .loc 3 622 66
  # $30.1: @IR_Block = load_struct_member(value_creator_instruction.1, parent_block)
  mov rax, [rbp-54]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $30.1:rbx 
  .loc 3 622 66
  # $31.1: Boolean = $30.1 == block.1
  cmp rbx, QWORD PTR [rbp-26]
  sete r15b
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $31.1:r15 
  .loc 3 622 29
  # $29.2: Boolean = $31.1
  mov [rbp-56], r15b
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:r15:[rbp-55] 
  # jump(.LABEL__remove_redundant_set_instructions_92__22)
  mov [rbp-55], r15b
.LABEL__remove_redundant_set_instructions_92__22:
  .loc 3 622 29
  # $29.3: Boolean = phi($29.1, $29.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # jump($29.3, .LABEL__remove_redundant_set_instructions_92__23, .LABEL__remove_redundant_set_instructions_92__11)
  mov al, [rbp-55]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_92__11
.LABEL__remove_redundant_set_instructions_92__23:
  .loc 3 623 48
  # redundant_value.1: @IR_Variable_Value = load_struct_member(value_creator_instruction.1, result_value)
  mov rax, [rbp-54]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] redundant_value.1:rbx 
  .loc 3 624 60
  # replacement_value.1: @IR_Value = load_struct_member(block_instruction.2, result_value)
  mov r15, [rbp-34]
  mov r14, [r15+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] redundant_value.1:rbx replacement_value.1:r14 
  .loc 3 625 59
  # $34.1: @List = load_struct_member(redundant_value.1, links)
  mov r13, [rbx+32]
  # [discarded value]: redundant_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r14 $34.1:r13 
  .loc 3 625 59
  # redundant_value_links_item.1: @List_Item = load_struct_member($34.1, first_item)
  mov rbx, [r13]
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r14 redundant_value_links_item.1:rbx 
  # jump(.LABEL__remove_redundant_set_instructions_92__25)
  mov [rbp-63], rbx
  mov [rbp-71], r14
.LABEL__remove_redundant_set_instructions_92__25:
  # redundant_value_links_item.2: @List_Item = phi(redundant_value_links_item.1, redundant_value_links_item.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] 
  .loc 3 626 36
  # $36.1: Boolean = redundant_value_links_item.2 != null
  cmp QWORD PTR [rbp-63], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:rax 
  # jump($36.1, .LABEL__remove_redundant_set_instructions_92__26, .LABEL__remove_redundant_set_instructions_92__27)
  test al, al
  mov [rbp-72], al
  jz .LABEL__remove_redundant_set_instructions_92__27
.LABEL__remove_redundant_set_instructions_92__26:
  .loc 3 627 57
  # redundant_value_link.1: @IR_Link = load_struct_member(redundant_value_links_item.2, data)
  mov rax, [rbp-63]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:rax:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:rbx 
  .loc 3 628 37
  # $39.1: Boolean = call(is_343, redundant_value_link.1, IR_Requires_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Requires_Value_Link[rip]
  mov [rbp-80], rbx
  call is_343
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:rax 
  # jump($39.1, .LABEL__remove_redundant_set_instructions_92__28, .LABEL__remove_redundant_set_instructions_92__29)
  test al, al
  mov [rbp-81], al
  jz .LABEL__remove_redundant_set_instructions_92__29
.LABEL__remove_redundant_set_instructions_92__28:
  .loc 3 629 61
  # redundant_value_link.1: @IR_Requires_Value_Link = redundant_value_link.1
  mov rax, [rbp-80]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax 
  .loc 3 630 37
  # $41.1: @IR_Required_By_Value_Link = load_struct_member(redundant_value_link.1, back_link)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax $41.1:rbx 
  .loc 3 630 37
  # store_struct_member($41.1, value, replacement_value.1)
  mov r15, [rbp-71]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $41.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r15:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax 
  .loc 3 631 37
  # $42.1: @List = load_struct_member(replacement_value.1, links)
  mov rbx, [r15+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r15:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax $42.1:rbx 
  .loc 3 631 37
  # call(append_318, $42.1, redundant_value_link.1)
  mov rdi, rbx
  mov rsi, rax
  call append_318
  # [discarded value]: $42.1
  # [discarded value]: redundant_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # jump(.LABEL__remove_redundant_set_instructions_92__29)
.LABEL__remove_redundant_set_instructions_92__29:
  .loc 3 633 62
  # redundant_value_links_item.5: @List_Item = load_struct_member(redundant_value_links_item.2, next_item)
  mov rax, [rbp-63]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_links_item.5:rbx:[rbp-63] 
  # jump(.LABEL__remove_redundant_set_instructions_92__25)
  mov [rbp-63], rbx
  jmp .LABEL__remove_redundant_set_instructions_92__25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_links_item.5:[rbp-63] 
  # [discarded value]: redundant_value_links_item.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # [discarded value]: $39.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] 
  # [discarded value]: redundant_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
.LABEL__remove_redundant_set_instructions_92__27:
  .loc 3 635 70
  # $44.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] $44.1:rbx 
  .loc 3 635 29
  # store_struct_member(value_creator_instruction.1, result_value, $44.1)
  mov r15, [rbp-54]
  mov QWORD PTR [r15+16], rbx
  # [discarded value]: $44.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 636 29
  # $45.1: @IR_Variable_Value = load_struct_member(value_creator_instruction.1, result_value)
  mov rbx, [r15+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] $45.1:rbx 
  .loc 3 636 29
  # store_struct_member($45.1, creator_instruction, value_creator_instruction.1)
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 637 29
  # call(remove_171, block.1, block_instruction.2)
  mov rdi, [rbp-26]
  mov rsi, rax
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 638 29
  # repeat.3: Boolean = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] repeat.3:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_92__4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_92__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] 
  # [discarded value]: redundant_value_links_item.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] 
  # [discarded value]: redundant_value_links_item.1
  # [discarded value]: replacement_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
.LABEL__remove_redundant_set_instructions_92__11:
  .loc 3 643 37
  # block_instruction.11: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] block_instruction.11:rbx:[rbp-34] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # jump(.LABEL__remove_redundant_set_instructions_92__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_redundant_set_instructions_92__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] block_instruction.11:[rbp-34] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # [discarded value]: block_instruction.11
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # [discarded value]: $29.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] 
  # [discarded value]: $29.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] 
  # [discarded value]: $29.1
  # [discarded value]: value_creator_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] 
  # [discarded value]: $21.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] 
  # [discarded value]: $21.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] 
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # [discarded value]: $13.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [discarded value]: $13.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [discarded value]: value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
.LABEL__remove_redundant_set_instructions_92__6:
  .loc 3 647 13
  # $47.1: Boolean = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $47.1:rax 
  # jump($47.1, .LABEL__remove_redundant_set_instructions_92__3, .LABEL__remove_redundant_set_instructions_92__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_redundant_set_instructions_92__2
.LABEL__remove_redundant_set_instructions_92__3:
  # return()
  jmp .LABEL__remove_redundant_set_instructions_92__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $47.1:[rbp-19] 
  # [discarded value]: $47.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_set_instructions_92__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_set_instructions_92__stack_frame_size: .word 96

  .loc 3 653 1
  .text
convert_statement_93:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_statement_93__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_statement_93__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 654 9
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 654 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_statement_93__2, .LABEL__convert_statement_93__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_statement_93__3
.LABEL__convert_statement_93__2:
  .loc 3 655 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 655 41
  # $4.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r15 
  .loc 3 655 41
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r15 $5.1:r14 
  .loc 3 655 35
  # $6.1: @String = call(clone_345, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call clone_345
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $6.1:rax 
  .loc 3 655 35
  # $7.1: @String = call(append_354, $6.1, " requires a basic block.")
  mov rdi, rax
  lea rsi, .LABEL__string_196[rip] # " requires a basic block."
  call append_354
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $7.1:rax 
  .loc 3 655 9
  # call(abort_314, $3.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_314
  # [discarded value]: $7.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_statement_93__3:
  .loc 3 657 9
  # $8.1: Boolean = call(is_343, statement.1, AST_Assignment_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Assignment_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:rax 
  # jump($8.1, .LABEL__convert_statement_93__4, .LABEL__convert_statement_93__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_statement_93__6
.LABEL__convert_statement_93__4:
  .loc 3 658 43
  # $27.1: @AST_Assignment_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $27.1:rax 
  .loc 3 658 9
  # call(convert_assignment_statement_94, self.1, $27.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_assignment_statement_94
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # jump(.LABEL__convert_statement_93__5)
.LABEL__convert_statement_93__5:
  # return()
  jmp .LABEL__convert_statement_93__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
.LABEL__convert_statement_93__6:
  .loc 3 659 16
  # $9.1: Boolean = call(is_343, statement.1, AST_Block_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Block_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:rax 
  # jump($9.1, .LABEL__convert_statement_93__7, .LABEL__convert_statement_93__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_statement_93__9
.LABEL__convert_statement_93__7:
  .loc 3 660 38
  # $26.1: @AST_Block_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $26.1:rax 
  .loc 3 660 9
  # call(convert_block_statement_95, self.1, $26.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_block_statement_95
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
.LABEL__convert_statement_93__9:
  .loc 3 661 16
  # $10.1: Boolean = call(is_343, statement.1, AST_Break_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Break_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__convert_statement_93__10, .LABEL__convert_statement_93__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_statement_93__12
.LABEL__convert_statement_93__10:
  .loc 3 662 38
  # $25.1: @AST_Break_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $25.1:rax 
  .loc 3 662 9
  # call(convert_break_statement_96, self.1, $25.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_break_statement_96
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__convert_statement_93__12:
  .loc 3 663 16
  # $11.1: Boolean = call(is_343, statement.1, AST_Expression_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Expression_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  # jump($11.1, .LABEL__convert_statement_93__13, .LABEL__convert_statement_93__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__convert_statement_93__15
.LABEL__convert_statement_93__13:
  .loc 3 664 43
  # $24.1: @AST_Expression_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $24.1:rax 
  .loc 3 664 9
  # call(convert_expression_statement_97, self.1, $24.1, null)
  mov rdi, [rbp-17]
  mov rsi, rax
  xor rdx, rdx
  call convert_expression_statement_97
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
.LABEL__convert_statement_93__15:
  .loc 3 665 16
  # $12.1: Boolean = call(is_343, statement.1, AST_If_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_If_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:rax 
  # jump($12.1, .LABEL__convert_statement_93__16, .LABEL__convert_statement_93__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__convert_statement_93__18
.LABEL__convert_statement_93__16:
  .loc 3 666 35
  # $23.1: @AST_If_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $23.1:rax 
  .loc 3 666 9
  # call(convert_if_statement_98, self.1, $23.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_if_statement_98
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
.LABEL__convert_statement_93__18:
  .loc 3 667 16
  # $13.1: Boolean = call(is_343, statement.1, AST_Loop_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Loop_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:rax 
  # jump($13.1, .LABEL__convert_statement_93__19, .LABEL__convert_statement_93__21)
  test al, al
  mov [rbp-23], al
  jz .LABEL__convert_statement_93__21
.LABEL__convert_statement_93__19:
  .loc 3 668 37
  # $22.1: @AST_Loop_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $22.1:rax 
  .loc 3 668 9
  # call(convert_loop_statement_99, self.1, $22.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_loop_statement_99
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
.LABEL__convert_statement_93__21:
  .loc 3 669 16
  # $14.1: Boolean = call(is_343, statement.1, AST_Return_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Return_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:rax 
  # jump($14.1, .LABEL__convert_statement_93__22, .LABEL__convert_statement_93__24)
  test al, al
  mov [rbp-24], al
  jz .LABEL__convert_statement_93__24
.LABEL__convert_statement_93__22:
  .loc 3 670 39
  # $21.1: @AST_Return_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $21.1:rax 
  .loc 3 670 9
  # call(convert_return_statement_100, self.1, $21.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_return_statement_100
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
.LABEL__convert_statement_93__24:
  .loc 3 671 16
  # $15.1: Boolean = call(is_343, statement.1, AST_Variable_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_Variable_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:rax 
  # jump($15.1, .LABEL__convert_statement_93__25, .LABEL__convert_statement_93__27)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_statement_93__27
.LABEL__convert_statement_93__25:
  .loc 3 672 41
  # $20.1: @AST_Variable_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $20.1:rax 
  .loc 3 672 9
  # call(convert_variable_statement_101, self.1, $20.1, false)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov dl, 0
  call convert_variable_statement_101
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
.LABEL__convert_statement_93__27:
  .loc 3 673 16
  # $16.1: Boolean = call(is_343, statement.1, AST_While_Statement)
  mov rdi, [rbp-9]
  mov rsi, AST_While_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:rax 
  # jump($16.1, .LABEL__convert_statement_93__28, .LABEL__convert_statement_93__30)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_statement_93__30
.LABEL__convert_statement_93__28:
  .loc 3 674 38
  # $19.1: @AST_While_Statement = statement.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $19.1:rax 
  .loc 3 674 9
  # call(convert_while_statement_102, self.1, $19.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call convert_while_statement_102
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
  # jump(.LABEL__convert_statement_93__5)
  jmp .LABEL__convert_statement_93__5
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
.LABEL__convert_statement_93__30:
  .loc 3 676 15
  # $17.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $17.1:rbx 
  .loc 3 676 35
  # $18.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] $17.1:rbx $18.1:r15 
  .loc 3 676 9
  # call(abort_141, $17.1, $18.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] $16.1:[rbp-26] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] $15.1:[rbp-25] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] $14.1:[rbp-24] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] $13.1:[rbp-23] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] $12.1:[rbp-22] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] $11.1:[rbp-21] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] $9.1:[rbp-19] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:[rbp-18] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_statement_93__end:
  mov rsp, rbp
  pop rbp
  ret

convert_statement_93__stack_frame_size: .word 32

  .loc 3 680 1
  .text
convert_assignment_statement_94:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_assignment_statement_94__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_assignment_statement_94__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # assignment_statement.1: @AST_Assignment_Statement = load_variable(assignment_statement)
  # [live values]: self.1:rdi assignment_statement.1:rsi 
  .loc 3 681 9
  # $1.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax 
  .loc 3 681 9
  # $2.1: Boolean = call(is_343, $1.1, AST_Array_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Array_Access_Expression[rip]
  call is_343
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_assignment_statement_94__2, .LABEL__convert_assignment_statement_94__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_assignment_statement_94__4
.LABEL__convert_assignment_statement_94__2:
  .loc 3 682 36
  # array_access_expression.1: @AST_Array_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx 
  .loc 3 683 59
  # $70.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx $70.1:r15 
  .loc 3 683 101
  # $71.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-25], rbx
  mov [rbp-33], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] $70.1:[rbp-33] $71.1:rax 
  .loc 3 683 35
  # array_item_index_value.1: @IR_Value = call(convert_expression_103, self.1, $70.1, $71.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] array_item_index_value.1:rax 
  .loc 3 684 58
  # $73.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [discarded value]: array_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:rax $73.1:r15 
  .loc 3 684 26
  # array_address.1: @IR_Value = call(convert_expression_address_104, self.1, $73.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-25], rax
  call convert_expression_address_104
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax 
  .loc 3 685 13
  # $75.1: @IR_Type = load_struct_member(array_address.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax $75.1:rbx 
  .loc 3 685 13
  # $76.1: Boolean = call(is_343, $75.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-33], rax
  call is_343
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $76.1:rax 
  .loc 3 685 13
  # $77.1: Boolean = $76.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:rbx 
  # jump($77.1, .LABEL__convert_assignment_statement_94__19, .LABEL__convert_assignment_statement_94__20)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__convert_assignment_statement_94__20
.LABEL__convert_assignment_statement_94__19:
  .loc 3 686 19
  # $78.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $78.1:rbx 
  .loc 3 686 50
  # $79.1: @String = call(clone_345, "Not an array pointer")
  lea rdi, .LABEL__string_197[rip] # "Not an array pointer"
  mov [rbp-42], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $78.1:[rbp-42] $79.1:rax 
  .loc 3 686 13
  # call(abort_314, $78.1, $79.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_314
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
.LABEL__convert_assignment_statement_94__20:
  .loc 3 688 29
  # $81.1: @IR_Pointer_Type = load_struct_member(array_address.1, type)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] $81.1:rbx 
  .loc 3 688 28
  # array_item_type.1: @IR_Type = load_struct_member($81.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] array_item_type.1:r15 
  .loc 3 689 42
  # $83.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rbx, [rbp-16]
  mov r14, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $77.1:[rbp-34] array_item_type.1:r15 $83.1:r14 
  .loc 3 689 18
  # value.1: @IR_Value = call(convert_expression_103, self.1, $83.1, array_item_type.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov rdx, r15
  call convert_expression_103
  # [discarded value]: $83.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] value.1:rax 
  .loc 3 690 21
  # $85.1: @IR_Store_Array_Item_Instruction = call(create_ir_store_array_item_instruction_223, array_address.1, array_item_index_value.1, value.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rax
  call create_ir_store_array_item_instruction_223
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $85.1:rax 
  .loc 3 690 107
  # $86.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] $85.1:rax $86.1:r15 
  .loc 3 690 9
  # $87.1: @IR_Variable_Value = call(append_77, self.1, $85.1, $86.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # jump(.LABEL__convert_assignment_statement_94__3)
.LABEL__convert_assignment_statement_94__3:
  # return()
  jmp .LABEL__convert_assignment_statement_94__end
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $77.1:[rbp-34] 
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] 
  # [discarded value]: array_address.1
  # [discarded value]: array_item_index_value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_assignment_statement_94__4:
  .loc 3 691 16
  # $3.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 691 16
  # $4.1: Boolean = call(is_343, $3.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_assignment_statement_94__5, .LABEL__convert_assignment_statement_94__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_assignment_statement_94__7
.LABEL__convert_assignment_statement_94__5:
  .loc 3 692 37
  # member_access_expression.1: @AST_Member_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx 
  .loc 3 693 65
  # $28.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx $28.1:r15 
  .loc 3 693 33
  # object_address_value.1: @IR_Value = call(convert_expression_address_104, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-26], rbx
  call convert_expression_address_104
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax 
  .loc 3 694 13
  # $30.1: @IR_Type = load_struct_member(object_address_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax $30.1:rbx 
  .loc 3 694 13
  # $31.1: Boolean = call(is_343, $30.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-34], rax
  call is_343
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $31.1:rax 
  .loc 3 694 13
  # $32.1: Boolean = $31.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:rbx 
  # jump($32.1, .LABEL__convert_assignment_statement_94__13, .LABEL__convert_assignment_statement_94__14)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__convert_assignment_statement_94__14
.LABEL__convert_assignment_statement_94__13:
  .loc 3 695 19
  # $33.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:rbx 
  .loc 3 695 50
  # $34.1: @String = call(clone_345, "Not a '")
  lea rdi, .LABEL__string_198[rip] # "Not a '"
  mov [rbp-43], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax 
  .loc 3 695 74
  # $35.1: @String = load_struct_member_address(IR_Pointer_Type, name)
  mov rbx, IR_Pointer_Type[rip]
  mov r15, rbx
  add r15, 8
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax $35.1:r15 
  .loc 3 695 50
  # $36.1: @String = call(append_354, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $36.1:rax 
  .loc 3 695 50
  # $37.1: @String = call(append_354, $36.1, "' value")
  mov rdi, rax
  lea rsi, .LABEL__string_199[rip] # "' value"
  call append_354
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $37.1:rax 
  .loc 3 695 13
  # call(abort_314, $33.1, $37.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_314
  # [discarded value]: $37.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
.LABEL__convert_assignment_statement_94__14:
  .loc 3 697 25
  # $39.1: @IR_Pointer_Type = load_struct_member(object_address_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] $39.1:rbx 
  .loc 3 697 24
  # object_type.1: @IR_Type = load_struct_member($39.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] object_type.1:r15 
  .loc 3 698 13
  # $41.1: Boolean = call(is_343, object_type.1, IR_Struct_Type)
  mov rdi, r15
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-43], r15
  call is_343
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $41.1:rax 
  .loc 3 698 13
  # $42.1: Boolean = $41.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:rbx 
  # jump($42.1, .LABEL__convert_assignment_statement_94__15, .LABEL__convert_assignment_statement_94__16)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_94__16
.LABEL__convert_assignment_statement_94__15:
  .loc 3 699 19
  # $43.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:rbx 
  .loc 3 699 50
  # $44.1: @String = call(clone_345, "Not a '")
  lea rdi, .LABEL__string_198[rip] # "Not a '"
  mov [rbp-52], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $44.1:rax 
  .loc 3 699 74
  # $45.1: @String = load_struct_member_address(IR_Struct_Type, name)
  mov rbx, IR_Struct_Type[rip]
  mov r15, rbx
  add r15, 8
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $44.1:rax $45.1:r15 
  .loc 3 699 50
  # $46.1: @String = call(append_354, $44.1, $45.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $46.1:rax 
  .loc 3 699 50
  # $47.1: @String = call(append_354, $46.1, "' value")
  mov rdi, rax
  lea rsi, .LABEL__string_199[rip] # "' value"
  call append_354
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] $43.1:[rbp-52] $47.1:rax 
  .loc 3 699 13
  # call(abort_314, $43.1, $47.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_314
  # [discarded value]: $47.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] 
.LABEL__convert_assignment_statement_94__16:
  .loc 3 701 25
  # struct_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-43]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax 
  .loc 3 702 54
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax $49.1:r15 
  .loc 3 702 54
  # $50.1: @String = load_struct_member($49.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:rax $50.1:r14 
  .loc 3 702 31
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-52], rax
  call get_member_150
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 703 13
  # $52.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax $52.1:rbx 
  # jump($52.1, .LABEL__convert_assignment_statement_94__17, .LABEL__convert_assignment_statement_94__18)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_assignment_statement_94__18
.LABEL__convert_assignment_statement_94__17:
  .loc 3 704 13
  # call(dump_struct_members_123, struct_type.1)
  mov rdi, [rbp-52]
  call dump_struct_members_123
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  .loc 3 705 19
  # $53.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $53.1:rbx 
  .loc 3 705 19
  # $54.1: @Source_Location = load_struct_member($53.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:r15 
  .loc 3 705 72
  # $55.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-43]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:rbx:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:r15 $55.1:r14 
  .loc 3 705 66
  # $56.1: @String = call(clone_345, $55.1)
  mov rdi, r14
  mov [rbp-69], r15
  call clone_345
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $56.1:rax 
  .loc 3 705 66
  # $57.1: @String = call(append_354, $56.1, " doesn't have a '")
  mov rdi, rax
  lea rsi, .LABEL__string_200[rip] # " doesn't have a '"
  call append_354
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax 
  .loc 3 705 125
  # $58.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax $58.1:r15 
  .loc 3 705 125
  # $59.1: @String = load_struct_member($58.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $57.1:rax $59.1:r14 
  .loc 3 705 66
  # $60.1: @String = call(append_354, $57.1, $59.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $59.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $60.1:rax 
  .loc 3 705 66
  # $61.1: @String = call(append_354, $60.1, "' member")
  mov rdi, rax
  lea rsi, .LABEL__string_201[rip] # "' member"
  call append_354
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $54.1:[rbp-69] $61.1:rax 
  .loc 3 705 13
  # call(abort_314, $54.1, $61.1)
  mov rdi, [rbp-69]
  mov rsi, rax
  call abort_314
  # [discarded value]: $61.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
.LABEL__convert_assignment_statement_94__18:
  .loc 3 707 42
  # $62.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $62.1:rbx 
  .loc 3 707 81
  # $63.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:r15:[rbp-60] $52.1:[rbp-61] $62.1:rbx $63.1:r14 
  .loc 3 707 18
  # value.1: @IR_Value = call(convert_expression_103, self.1, $62.1, $63.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_103
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] value.1:rax 
  .loc 3 708 21
  # $65.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_228, object_address_value.1, struct_type_member.1, value.1)
  mov rdi, [rbp-34]
  mov rsi, [rbp-60]
  mov rdx, rax
  call create_ir_store_struct_member_instruction_228
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $65.1:rax 
  .loc 3 708 113
  # $66.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] $65.1:rax $66.1:r15 
  .loc 3 708 9
  # $67.1: @IR_Variable_Value = call(append_77, self.1, $65.1, $66.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  # jump(.LABEL__convert_assignment_statement_94__3)
  jmp .LABEL__convert_assignment_statement_94__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $52.1:[rbp-61] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $42.1:[rbp-44] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] 
  # [discarded value]: object_address_value.1
  # [discarded value]: member_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_assignment_statement_94__7:
  .loc 3 709 16
  # $5.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 3 709 16
  # $6.1: Boolean = call(is_343, $5.1, AST_Variable_Expression)
  mov rdi, rbx
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  # jump($6.1, .LABEL__convert_assignment_statement_94__8, .LABEL__convert_assignment_statement_94__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_assignment_statement_94__10
.LABEL__convert_assignment_statement_94__8:
  .loc 3 710 32
  # variable_expression.1: @AST_Variable_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx 
  .loc 3 711 26
  # $12.1: @Identifier_Token = load_struct_member(variable_expression.1, name)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx $12.1:r15 
  .loc 3 711 26
  # variable_name.1: @String = load_struct_member($12.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx variable_name.1:r14 
  .loc 3 712 21
  # variable.1: @IR_Variable = call(get_variable_68, self.1, variable_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  mov [rbp-35], r14
  call get_variable_68
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax 
  .loc 3 713 13
  # $15.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax $15.1:rbx 
  # jump($15.1, .LABEL__convert_assignment_statement_94__11, .LABEL__convert_assignment_statement_94__12)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_94__12
.LABEL__convert_assignment_statement_94__11:
  .loc 3 714 19
  # $16.1: @Source_Location = load_struct_member(variable_expression.1, location)
  mov rax, [rbp-27]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rax:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:rbx 
  .loc 3 714 49
  # $17.1: @String = call(clone_345, "Undeclared variable: ")
  lea rdi, .LABEL__string_202[rip] # "Undeclared variable: "
  mov [rbp-52], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $17.1:rax 
  .loc 3 714 49
  # $18.1: @String = call(append_354, $17.1, variable_name.1)
  mov rdi, rax
  mov rsi, [rbp-35]
  call append_354
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $18.1:rax 
  .loc 3 714 13
  # call(abort_314, $16.1, $18.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_314
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
.LABEL__convert_assignment_statement_94__12:
  .loc 3 716 42
  # $19.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $19.1:rbx 
  .loc 3 716 81
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  mov r15, [rbp-43]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:r15:[rbp-43] $15.1:[rbp-44] $19.1:rbx $20.1:r14 
  .loc 3 716 18
  # value.1: @IR_Value = call(convert_expression_103, self.1, $19.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_103
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:rax 
  .loc 3 717 47
  # $22.1: @IR_Variable_Value = call(create_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-43]
  mov [rbp-52], rax
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:[rbp-52] $22.1:rax 
  .loc 3 717 21
  # $23.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $22.1, value.1)
  mov rdi, rax
  mov rsi, [rbp-52]
  call create_ir_set_instruction_220
  # [discarded value]: $22.1
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax 
  .loc 3 717 93
  # $24.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax $24.1:r15 
  .loc 3 717 9
  # $25.1: @IR_Variable_Value = call(append_77, self.1, $23.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # jump(.LABEL__convert_assignment_statement_94__3)
  jmp .LABEL__convert_assignment_statement_94__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] 
  # [discarded value]: variable.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
.LABEL__convert_assignment_statement_94__10:
  .loc 3 719 15
  # $7.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx 
  .loc 3 719 46
  # $8.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $8.1:r15 
  .loc 3 719 46
  # $9.1: @Object_Type = load_struct_member($8.1, object_type)
  mov r14, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $9.1:r14 
  .loc 3 719 9
  # call(abort_141, $7.1, $9.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [discarded value]: assignment_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_assignment_statement_94__end:
  mov rsp, rbp
  pop rbp
  ret

convert_assignment_statement_94__stack_frame_size: .word 80

  .loc 3 723 1
  .text
convert_block_statement_95:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_block_statement_95__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_block_statement_95__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 724 52
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 724 81
  # $2.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rbx, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $2.1:rbx 
  .loc 3 724 81
  # $3.1: @List = load_struct_member($2.1, named_values)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $3.1:r15 
  .loc 3 44 24
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  .loc 3 724 20
  # $5.1: @IR_Builder_Context = new IR_Builder_Context(parent = $1.1, named_values = $3.1, variables = $4.1)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  #     .parent = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .variables = $4.1
  mov r15, [rbp-40]
  mov QWORD PTR [rax+8], r15
  #     .named_values = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $5.1:rax 
  .loc 3 724 5
  # store_struct_member(self.1, context, $5.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-16] 
  .loc 3 725 25
  # $6.1: @List = load_struct_member(statement.1, statements)
  mov rax, [rbp-16]
  mov r15, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-24] $6.1:r15 
  .loc 3 725 25
  # block_statements.1: @List_Iterator = call(create_iterator_329, $6.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] block_statements.1:rax 
  # jump(.LABEL__convert_block_statement_95__2)
  mov [rbp-32], rax
.LABEL__convert_block_statement_95__2:
  .loc 3 726 12
  # $8.1: Boolean = call(has_next_332, block_statements.1)
  mov rdi, [rbp-32]
  call has_next_332
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_block_statement_95__3, .LABEL__convert_block_statement_95__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_block_statement_95__4
.LABEL__convert_block_statement_95__3:
  .loc 3 727 28
  # block_statement.1: @AST_Statement = call(next_333, block_statements.1)
  mov rdi, [rbp-32]
  call next_333
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] block_statement.1:rax 
  .loc 3 728 9
  # call(convert_statement_93, self.1, block_statement.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_statement_93
  # [discarded value]: block_statement.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # jump(.LABEL__convert_block_statement_95__2)
  jmp .LABEL__convert_block_statement_95__2
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
.LABEL__convert_block_statement_95__4:
  .loc 3 730 20
  # $11.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $11.1:rbx 
  .loc 3 730 20
  # $12.1: @IR_Builder_Context = load_struct_member($11.1, parent)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $12.1:r15 
  .loc 3 730 5
  # store_struct_member(self.1, context, $12.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # return()
  jmp .LABEL__convert_block_statement_95__end
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: block_statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_block_statement_95__end:
  mov rsp, rbp
  pop rbp
  ret

convert_block_statement_95__stack_frame_size: .word 48

  .loc 3 733 1
  .text
convert_break_statement_96:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_break_statement_96__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_break_statement_96__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 734 9
  # $1.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 734 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_break_statement_96__2, .LABEL__convert_break_statement_96__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_break_statement_96__3
.LABEL__convert_break_statement_96__2:
  .loc 3 735 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 735 9
  # call(abort_314, $3.1, "Break outside of a loop?")
  mov rdi, rbx
  lea rsi, .LABEL__string_203[rip] # "Break outside of a loop?"
  call abort_314
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_break_statement_96__3:
  .loc 3 737 5
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 3 737 36
  # $5.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 3 737 36
  # $6.1: @IR_Block = load_struct_member($5.1, end_block)
  mov r14, [r15+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $6.1:r14 
  .loc 3 737 5
  # $7.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $4.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call append_jump_169
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  .loc 3 738 26
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:rbx 
  .loc 3 738 26
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $9.1:r15 
  .loc 3 738 26
  # $10.1: @IR_Block = call(create_block_173, $9.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $10.1:rax 
  .loc 3 738 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_break_statement_96__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_break_statement_96__end:
  mov rsp, rbp
  pop rbp
  ret

convert_break_statement_96__stack_frame_size: .word 32

  .loc 3 741 1
  .text
convert_expression_statement_97:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_statement_97__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_statement_97__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi statement.1:rsi expected_type.1:rdx 
  .loc 3 742 29
  # $1.1: @AST_Expression = load_struct_member(statement.1, expression)
  mov rax, [rsi+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rdi expected_type.1:rdx $1.1:rax 
  .loc 3 742 5
  # $2.1: @IR_Value = call(convert_expression_103, self.1, $1.1, expected_type.1)
  mov rsi, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: expected_type.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_expression_statement_97__end
  # [live values]: 
.LABEL__convert_expression_statement_97__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_statement_97__stack_frame_size: .word 0

  .loc 3 745 1
  .text
convert_if_statement_98:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_if_statement_98__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_if_statement_98__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_If_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 746 48
  # $1.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 746 80
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 746 24
  # condition_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:rax 
  .loc 3 747 19
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $4.1:r15 
  .loc 3 747 19
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $5.1:r14 
  .loc 3 747 19
  # true_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax 
  .loc 3 748 18
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $7.1:r15 
  .loc 3 748 18
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $8.1:r14 
  .loc 3 748 18
  # end_block.1: @IR_Block = call(create_block_173, $8.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_block_173
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax 
  .loc 3 749 9
  # $10.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $10.1:r15 
  .loc 3 749 9
  # $11.1: Boolean = $10.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $11.1:r14 
  # jump($11.1, .LABEL__convert_if_statement_98__2, .LABEL__convert_if_statement_98__4)
  test r14b, r14b
  mov [rbp-48], rax
  mov [rbp-49], r14b
  jz .LABEL__convert_if_statement_98__4
.LABEL__convert_if_statement_98__2:
  .loc 3 750 24
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $14.1:rbx 
  .loc 3 750 24
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $15.1:r15 
  .loc 3 750 24
  # false_block.1: @IR_Block = call(create_block_173, $15.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax 
  .loc 3 751 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax $17.1:r15 
  .loc 3 751 9
  # $18.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $17.1, condition_value.1, true_block.1, false_block.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, rax
  mov [rbp-57], rax
  call append_jump_170
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:[rbp-57] 
  .loc 3 752 9
  # store_struct_member(self.1, current_block, false_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: false_block.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 753 32
  # $19.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $19.1:r15 
  .loc 3 753 9
  # call(convert_statement_93, self.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call convert_statement_93
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 754 13
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $20.1:rbx 
  .loc 3 754 13
  # $21.1: @IR_Instruction = load_struct_member($20.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $21.1:r15 
  .loc 3 754 13
  # $22.1: Boolean = call(is_exit_instruction_177, $21.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $22.1:rax 
  .loc 3 754 13
  # $23.1: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:rbx 
  # jump($23.1, .LABEL__convert_if_statement_98__5, .LABEL__convert_if_statement_98__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_if_statement_98__3
.LABEL__convert_if_statement_98__5:
  .loc 3 755 13
  # $24.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $24.1:rbx 
  .loc 3 755 13
  # $25.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $24.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_169
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # jump(.LABEL__convert_if_statement_98__3)
.LABEL__convert_if_statement_98__3:
  .loc 3 760 5
  # store_struct_member(self.1, current_block, true_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 761 28
  # $26.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov r15, [rbp-8]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-24] statement.1:r15:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $26.1:r14 
  .loc 3 761 5
  # call(convert_statement_93, self.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call convert_statement_93
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 762 9
  # $27.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $27.1:rbx 
  .loc 3 762 9
  # $28.1: @IR_Instruction = load_struct_member($27.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $28.1:r15 
  .loc 3 762 9
  # $29.1: Boolean = call(is_exit_instruction_177, $28.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $29.1:rax 
  .loc 3 762 9
  # $30.1: Boolean = $29.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:rbx 
  # jump($30.1, .LABEL__convert_if_statement_98__7, .LABEL__convert_if_statement_98__8)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_if_statement_98__8
.LABEL__convert_if_statement_98__7:
  .loc 3 763 9
  # $31.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] $31.1:rbx 
  .loc 3 763 9
  # $32.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $31.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_169
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # jump(.LABEL__convert_if_statement_98__8)
.LABEL__convert_if_statement_98__8:
  .loc 3 765 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rbx:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # return()
  jmp .LABEL__convert_if_statement_98__end
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
.LABEL__convert_if_statement_98__4:
  .loc 3 758 9
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $12.1:rbx 
  .loc 3 758 9
  # $13.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $12.1, condition_value.1, true_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, [rbp-48]
  call append_jump_170
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # jump(.LABEL__convert_if_statement_98__3)
  jmp .LABEL__convert_if_statement_98__3
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [discarded value]: end_block.1
  # [discarded value]: true_block.1
  # [discarded value]: condition_value.1
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_if_statement_98__end:
  mov rsp, rbp
  pop rbp
  ret

convert_if_statement_98__stack_frame_size: .word 64

  .loc 3 768 1
  .text
convert_loop_statement_99:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_loop_statement_99__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_loop_statement_99__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 769 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 769 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 769 19
  # loop_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax 
  .loc 3 770 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $4.1:r15 
  .loc 3 770 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $5.1:r14 
  .loc 3 770 18
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax 
  .loc 3 771 5
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 771 5
  # $8.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $7.1, loop_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_jump_169
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 772 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 773 46
  # $9.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] $9.1:r15 
  .loc 3 773 25
  # $10.1: @IR_Loop = new IR_Loop(parent = $9.1, end_block = end_block.1)
  mov [rbp-40], r15
  mov rdi, 16
  call malloc
  #     .parent = $9.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  #     .end_block = end_block.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] $10.1:rax 
  .loc 3 773 5
  # store_struct_member(self.1, current_loop, $10.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+40], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] 
  .loc 3 774 34
  # $11.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+16]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-8] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] $11.1:r14 
  .loc 3 774 5
  # call(convert_block_statement_95, self.1, $11.1)
  mov rdi, rbx
  mov rsi, r14
  call convert_block_statement_95
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 775 5
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $12.1:rbx 
  .loc 3 775 5
  # $13.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $12.1, loop_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_169
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: loop_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-32] 
  .loc 3 776 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 777 25
  # $14.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 3 777 25
  # $15.1: @IR_Loop = load_struct_member($14.1, parent)
  mov r15, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] $15.1:r15 
  .loc 3 777 5
  # store_struct_member(self.1, current_loop, $15.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $15.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_loop_statement_99__end
  # [live values]: 
.LABEL__convert_loop_statement_99__end:
  mov rsp, rbp
  pop rbp
  ret

convert_loop_statement_99__stack_frame_size: .word 48

  .loc 3 780 1
  .text
convert_return_statement_100:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_return_statement_100__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_return_statement_100__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 781 9
  # $1.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 781 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_return_statement_100__2, .LABEL__convert_return_statement_100__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_return_statement_100__4
.LABEL__convert_return_statement_100__2:
  .loc 3 782 49
  # $6.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 3 782 77
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 3 782 77
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r13, [r14+16]
  # [discarded value]: $7.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $8.1:r13 
  .loc 3 782 77
  # $9.1: @IR_Type = load_struct_member($8.1, return_type)
  mov r14, [r13+40]
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $9.1:r14 
  .loc 3 782 25
  # return_value.1: @IR_Value = call(convert_expression_103, self.1, $6.1, $9.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_103
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] return_value.1:rax 
  .loc 3 783 21
  # $11.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, return_value.1)
  mov rdi, rax
  call create_ir_return_instruction_217
  # [discarded value]: return_value.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 3 783 65
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $11.1:rax $12.1:r15 
  .loc 3 783 9
  # $13.1: @IR_Variable_Value = call(append_77, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_100__3)
.LABEL__convert_return_statement_100__3:
  .loc 3 787 26
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $14.1:rbx 
  .loc 3 787 26
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $15.1:r15 
  .loc 3 787 26
  # $16.1: @IR_Block = call(create_block_173, $15.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 3 787 5
  # store_struct_member(self.1, current_block, $16.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_return_statement_100__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_return_statement_100__4:
  .loc 3 785 21
  # $3.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, null)
  xor rdi, rdi
  call create_ir_return_instruction_217
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:rax 
  .loc 3 785 57
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $3.1:rax $4.1:r15 
  .loc 3 785 9
  # $5.1: @IR_Variable_Value = call(append_77, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_100__3)
  jmp .LABEL__convert_return_statement_100__3
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_return_statement_100__end:
  mov rsp, rbp
  pop rbp
  ret

convert_return_statement_100__stack_frame_size: .word 32

  .loc 3 790 1
  .text
convert_variable_statement_101:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_statement_101__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_statement_101__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # is_global.1: Boolean = load_variable(is_global)
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx 
  .loc 3 791 22
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx $1.1:rax 
  .loc 3 791 22
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx 
  .loc 3 792 5
  # variable_type.1: @IR_Type = null
  xor rax, rax
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax 
  .loc 3 793 9
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov r15, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax $3.1:r15 
  .loc 3 793 9
  # $4.1: Boolean = $3.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax $4.1:r14 
  # jump($4.1, .LABEL__convert_variable_statement_101__2, .LABEL__convert_variable_statement_101__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-9], dl
  mov [rbp-17], rbx
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  mov [rbp-34], r14b
  jz .LABEL__convert_variable_statement_101__3
.LABEL__convert_variable_statement_101__2:
  .loc 3 794 49
  # $5.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] $5.1:rbx 
  .loc 3 794 25
  # variable_type.2: @IR_Type = call(convert_value_type_81, self.1, $5.1)
  mov rdi, [rbp-33]
  mov rsi, rbx
  call convert_value_type_81
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:rax:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_101__3)
  mov [rbp-8], rax
.LABEL__convert_variable_statement_101__3:
  # variable_type.16: @IR_Type = phi(variable_type.1, variable_type.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] 
  .loc 3 796 5
  # variable_value.1: @IR_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax 
  .loc 3 797 9
  # $7.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax $7.1:r15 
  .loc 3 797 9
  # $8.1: Boolean = $7.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax $8.1:r14 
  # jump($8.1, .LABEL__convert_variable_statement_101__4, .LABEL__convert_variable_statement_101__5)
  test r14b, r14b
  mov [rbp-42], rax
  mov [rbp-43], r14b
  jz .LABEL__convert_variable_statement_101__5
.LABEL__convert_variable_statement_101__4:
  .loc 3 798 50
  # $9.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] $9.1:rbx 
  .loc 3 798 26
  # variable_value.2: @IR_Value = call(convert_expression_103, self.1, $9.1, variable_type.16)
  mov rdi, [rbp-33]
  mov rsi, rbx
  mov rdx, [rbp-8]
  call convert_expression_103
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:rax:[rbp-42] 
  # jump(.LABEL__convert_variable_statement_101__5)
  mov [rbp-42], rax
.LABEL__convert_variable_statement_101__5:
  # variable_value.14: @IR_Value = phi(variable_value.1, variable_value.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] 
  .loc 3 800 9
  # $11.1: Boolean = load_struct_member(variable_statement.1, is_external)
  mov rax, [rbp-25]
  mov bl, [rax+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $11.1:rbx 
  .loc 3 800 9
  # $12.1: Boolean = $11.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:r15 
  # jump($12.1, .LABEL__convert_variable_statement_101__6, .LABEL__convert_variable_statement_101__7)
  test r15b, r15b
  mov [rbp-44], r15b
  jz .LABEL__convert_variable_statement_101__7
.LABEL__convert_variable_statement_101__6:
  .loc 3 801 13
  # $13.1: Boolean = variable_type.16 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__convert_variable_statement_101__8, .LABEL__convert_variable_statement_101__10)
  test al, al
  mov [rbp-45], al
  jz .LABEL__convert_variable_statement_101__10
.LABEL__convert_variable_statement_101__8:
  .loc 3 802 17
  # $21.1: Boolean = variable_value.14 != null
  cmp QWORD PTR [rbp-42], 0
  setne al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:rax 
  # jump($21.1, .LABEL__convert_variable_statement_101__15, .LABEL__convert_variable_statement_101__9)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_variable_statement_101__9
.LABEL__convert_variable_statement_101__15:
  .loc 3 803 43
  # $22.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $22.1:rbx 
  .loc 3 803 21
  # $23.1: Boolean = call(accepts_74, variable_type.16, $22.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call accepts_74
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $23.1:rax 
  .loc 3 803 21
  # $24.1: Boolean = $23.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:rbx 
  # jump($24.1, .LABEL__convert_variable_statement_101__17, .LABEL__convert_variable_statement_101__18)
  test bl, bl
  mov [rbp-47], bl
  jz .LABEL__convert_variable_statement_101__18
.LABEL__convert_variable_statement_101__17:
  .loc 3 804 27
  # $25.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $25.1:rbx 
  .loc 3 804 27
  # $26.1: @Source_Location = load_struct_member($25.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:r15 
  .loc 3 804 73
  # $27.1: @String = call(clone_345, "Cannot assign a '")
  lea rdi, .LABEL__string_204[rip] # "Cannot assign a '"
  mov [rbp-55], r15
  call clone_345
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax 
  .loc 3 804 107
  # $28.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rbx, [rbp-42]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rbx:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax $28.1:r15 
  .loc 3 804 107
  # $29.1: @String = load_struct_member($28.1, name)
  mov r14, [r15+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rbx:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax $29.1:r14 
  .loc 3 804 73
  # $30.1: @String = call(append_354, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $30.1:rax 
  .loc 3 804 73
  # $31.1: @String = call(append_354, $30.1, "' value to a '")
  mov rdi, rax
  lea rsi, .LABEL__string_205[rip] # "' value to a '"
  call append_354
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $31.1:rax 
  .loc 3 804 165
  # $32.1: @String = load_struct_member(variable_type.16, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:rbx:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $31.1:rax $32.1:r15 
  .loc 3 804 73
  # $33.1: @String = call(append_354, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $33.1:rax 
  .loc 3 804 73
  # $34.1: @String = call(append_354, $33.1, "' variable")
  mov rdi, rax
  lea rsi, .LABEL__string_206[rip] # "' variable"
  call append_354
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $34.1:rax 
  .loc 3 804 21
  # call(abort_314, $26.1, $34.1)
  mov rdi, [rbp-55]
  mov rsi, rax
  call abort_314
  # [discarded value]: $34.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] 
.LABEL__convert_variable_statement_101__18:
  .loc 3 806 42
  # $35.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $35.1:rbx 
  .loc 3 806 21
  # $36.1: Boolean = call(equals_144, variable_type.16, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call equals_144
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:rax 
  # jump($36.1, .LABEL__convert_variable_statement_101__19, .LABEL__convert_variable_statement_101__9)
  test al, al
  mov [rbp-48], al
  jz .LABEL__convert_variable_statement_101__9
.LABEL__convert_variable_statement_101__19:
  .loc 3 807 34
  # $37.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $37.1:rbx 
  .loc 3 807 34
  # $38.1: @Source_Location = load_struct_member($37.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $38.1:r15 
  .loc 3 807 21
  # $39.1: @FILE = call(write_317, stderr, $38.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  call write_317
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $39.1:rax 
  .loc 3 807 21
  # $40.1: @FILE = call(write_337, $39.1, ": Redundant type declaration")
  mov rdi, rax
  lea rsi, .LABEL__string_207[rip] # ": Redundant type declaration"
  call write_337
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $40.1:rax 
  .loc 3 807 21
  # $41.1: @FILE = call(end_line_340, $40.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # jump(.LABEL__convert_variable_statement_101__9)
.LABEL__convert_variable_statement_101__9:
  # variable_type.18: @IR_Type = phi(variable_type.5, variable_type.16)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $24.1:[rbp-47] $36.1:[rbp-48] 
  .loc 3 819 13
  # $42.1: Boolean = variable_value.14 == null
  cmp QWORD PTR [rbp-42], 0
  sete al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:rax $24.1:[rbp-47] $36.1:[rbp-48] 
  # jump($42.1, .LABEL__convert_variable_statement_101__21, .LABEL__convert_variable_statement_101__7)
  test al, al
  mov [rbp-49], al
  jz .LABEL__convert_variable_statement_101__7
.LABEL__convert_variable_statement_101__21:
  .loc 5 159 32
  # $43.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] $43.1:rax 
  .loc 5 160 20
  # $44.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-57], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] $43.1:[rbp-57] $44.1:rax 
  .loc 3 820 30
  # variable_value.11: @IR_Value = new IR_Undefined_Value(object_type = IR_Undefined_Value, type = variable_type.18, dump = dump_ir_undefined_value_155.address, creator_instruction = null, user_instructions = $43.1, links = $44.1)
  mov [rbp-65], rax
  mov rdi, 48
  call malloc
  #     .object_type = IR_Undefined_Value
  mov rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  #     .type = variable_type.18
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $43.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .links = $44.1
  mov r14, [rbp-65]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_undefined_value_155.address
  lea r13, dump_ir_undefined_value_155[rip]
  mov [rax+40], r13
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:rbx:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:rax:[rbp-42] 
  # jump(.LABEL__convert_variable_statement_101__7)
  mov [rbp-42], rax
.LABEL__convert_variable_statement_101__7:
  # variable_value.17: @IR_Value = phi(variable_value.14, variable_value.11)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # variable_type.10: @IR_Type = phi(variable_type.18, variable_type.16)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  .loc 3 823 9
  # $47.1: Boolean = call(is_343, variable_type.10, IR_Any_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Any_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:rax $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # jump($47.1, .LABEL__convert_variable_statement_101__26, .LABEL__convert_variable_statement_101__25)
  test al, al
  mov [rbp-50], al
  jz .LABEL__convert_variable_statement_101__25
.LABEL__convert_variable_statement_101__26:
  .loc 3 823 9
  # $49.1: Boolean = phi($47.1, $47.2)
  mov al, [rbp-50]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:rax 
  # jump($49.1, .LABEL__convert_variable_statement_101__24, .LABEL__convert_variable_statement_101__23)
  test al, al
  mov [rbp-51], al
  jz .LABEL__convert_variable_statement_101__23
.LABEL__convert_variable_statement_101__24:
  .loc 3 823 9
  # $49.3: Boolean = phi($49.1, $49.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # jump($49.3, .LABEL__convert_variable_statement_101__27, .LABEL__convert_variable_statement_101__28)
  mov al, [rbp-51]
  test al, al
  jz .LABEL__convert_variable_statement_101__28
.LABEL__convert_variable_statement_101__27:
  .loc 3 824 15
  # $51.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:rbx 
  .loc 3 824 44
  # $52.1: @String = call(clone_345, "Invalid variable type: ")
  lea rdi, .LABEL__string_208[rip] # "Invalid variable type: "
  mov [rbp-59], rbx
  call clone_345
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $52.1:rax 
  .loc 3 824 84
  # $53.1: @String = load_struct_member(variable_type.10, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:rbx:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $52.1:rax $53.1:r15 
  .loc 3 824 44
  # $54.1: @String = call(append_354, $52.1, $53.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $54.1:rax 
  .loc 3 824 9
  # call(abort_314, $51.1, $54.1)
  mov rdi, [rbp-59]
  mov rsi, rax
  call abort_314
  # [discarded value]: $54.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_101__28:
  # jump(is_global.1, .LABEL__convert_variable_statement_101__29, .LABEL__convert_variable_statement_101__31)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__convert_variable_statement_101__31
.LABEL__convert_variable_statement_101__29:
  .loc 3 828 24
  # $63.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:rbx 
  .loc 3 832 27
  # $64.1: Boolean = load_struct_member(variable_statement.1, is_external)
  mov r15b, [rax+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:rbx $64.1:r15 
  .loc 5 457 21
  # $65.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-59], rbx
  mov [rbp-60], r15b
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:[rbp-59] $64.1:[rbp-60] $65.1:rax 
  .loc 3 827 21
  # variable.1: @IR_Global_Variable = new IR_Global_Variable(object_type = IR_Global_Variable, location = $63.1, name = variable_name.1, type = variable_type.10, value = variable_value.17, is_external = $64.1, values = $65.1)
  mov [rbp-68], rax
  mov rdi, 49
  call malloc
  #     .object_type = IR_Global_Variable
  mov rbx, IR_Global_Variable[rip]
  mov [rax], rbx
  #     .location = $63.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+8], rbx
  #     .name = variable_name.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  #     .type = variable_type.10
  mov r14, [rbp-8]
  mov QWORD PTR [rax+24], r14
  #     .values = $65.1
  mov r13, [rbp-68]
  mov QWORD PTR [rax+32], r13
  #     .value = variable_value.17
  mov r12, [rbp-42]
  mov QWORD PTR [rax+40], r12
  #     .is_external = $64.1
  mov r11b, [rbp-60]
  mov BYTE PTR [rax+48], r11b
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax 
  .loc 3 834 13
  # $67.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-33]
  mov r13, [rbx+32]
  # [live values]: self.1:rbx:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax $67.1:r13 
  .loc 3 834 13
  # $68.1: Boolean = $67.1 != null
  cmp r13, 0
  setne r11b
  # [discarded value]: $67.1
  # [live values]: self.1:rbx:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax $68.1:r11 
  # jump($68.1, .LABEL__convert_variable_statement_101__32, .LABEL__convert_variable_statement_101__33)
  test r11b, r11b
  mov [rbp-59], rax
  mov [rbp-60], r11b
  jz .LABEL__convert_variable_statement_101__33
.LABEL__convert_variable_statement_101__32:
  .loc 3 835 19
  # $69.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] $69.1:rbx 
  .loc 3 835 13
  # call(abort_314, $69.1, "Invalid state")
  mov rdi, rbx
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_314
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
.LABEL__convert_variable_statement_101__33:
  .loc 3 837 9
  # $70.1: @IR_Variable = call(add_variable_67, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-59]
  call add_variable_67
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # jump(.LABEL__convert_variable_statement_101__30)
.LABEL__convert_variable_statement_101__30:
  # return()
  jmp .LABEL__convert_variable_statement_101__end
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_101__31:
  .loc 3 839 48
  # $55.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $55.1:rbx 
  .loc 5 457 21
  # $56.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-59], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $55.1:[rbp-59] $56.1:rax 
  .loc 3 839 21
  # variable.1: @IR_Variable = new IR_Variable(object_type = IR_Variable, location = $55.1, name = variable_name.1, type = variable_type.10, values = $56.1)
  mov [rbp-67], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Variable
  mov rbx, IR_Variable[rip]
  mov [rax], rbx
  #     .location = $55.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+8], rbx
  #     .name = variable_name.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  #     .type = variable_type.10
  mov r14, [rbp-8]
  mov QWORD PTR [rax+24], r14
  #     .values = $56.1
  mov r13, [rbp-67]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [discarded value]: variable_name.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax 
  .loc 3 840 9
  # $58.1: @IR_Variable = call(add_variable_67, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov [rbp-59], rax
  call add_variable_67
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] 
  .loc 3 841 47
  # $59.1: @IR_Variable_Value = call(create_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-59]
  call create_variable_value_70
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $59.1:rax 
  .loc 3 841 21
  # $60.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $59.1, variable_value.17)
  mov rdi, rax
  mov rsi, [rbp-42]
  call create_ir_set_instruction_220
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $60.1:rax 
  .loc 3 841 102
  # $61.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $60.1:rax $61.1:r15 
  .loc 3 841 9
  # $62.1: @IR_Variable_Value = call(append_77, self.1, $60.1, $61.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # jump(.LABEL__convert_variable_statement_101__30)
  jmp .LABEL__convert_variable_statement_101__30
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # [discarded value]: $49.3
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_101__23:
  .loc 3 823 79
  # $49.2: Boolean = call(is_343, variable_type.10, IR_Undefined_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Undefined_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.2:rax:[rbp-51] $49.1:[rbp-51] 
  # jump(.LABEL__convert_variable_statement_101__24)
  mov [rbp-51], al
  jmp .LABEL__convert_variable_statement_101__24
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.2:[rbp-51] $49.1:[rbp-51] 
  # [discarded value]: $49.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
.LABEL__convert_variable_statement_101__25:
  .loc 3 823 42
  # $47.2: Boolean = call(is_343, variable_type.10, IR_Nothing_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Nothing_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $47.2:rax:[rbp-50] 
  # jump(.LABEL__convert_variable_statement_101__26)
  mov [rbp-50], al
  jmp .LABEL__convert_variable_statement_101__26
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $47.2:[rbp-50] 
  # [discarded value]: $47.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [discarded value]: $47.1
  # [discarded value]: variable_type.10
  # [discarded value]: variable_value.17
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [discarded value]: variable_value.11
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: variable_type.18
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] 
.LABEL__convert_variable_statement_101__10:
  .loc 3 811 17
  # $14.1: Boolean = variable_value.14 == null
  cmp QWORD PTR [rbp-42], 0
  sete al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:rax 
  # jump($14.1, .LABEL__convert_variable_statement_101__11, .LABEL__convert_variable_statement_101__12)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_variable_statement_101__12
.LABEL__convert_variable_statement_101__11:
  .loc 3 812 23
  # $15.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:rbx 
  .loc 3 812 17
  # call(abort_314, $15.1, "Invalid state")
  mov rdi, rbx
  lea rsi, .LABEL__string_44[rip] # "Invalid state"
  call abort_314
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
.LABEL__convert_variable_statement_101__12:
  .loc 3 814 17
  # $16.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $16.1:rbx 
  .loc 3 814 17
  # $17.1: Boolean = call(is_343, $16.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:rax 
  # jump($17.1, .LABEL__convert_variable_statement_101__13, .LABEL__convert_variable_statement_101__14)
  test al, al
  mov [rbp-47], al
  jz .LABEL__convert_variable_statement_101__14
.LABEL__convert_variable_statement_101__13:
  .loc 3 815 23
  # $18.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] $18.1:rbx 
  .loc 3 815 23
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] $19.1:r15 
  .loc 3 815 17
  # call(abort_314, $19.1, "Cannot infer type from null value")
  mov rdi, r15
  lea rsi, .LABEL__string_209[rip] # "Cannot infer type from null value"
  call abort_314
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] 
.LABEL__convert_variable_statement_101__14:
  .loc 3 817 29
  # variable_type.5: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] variable_type.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_101__9)
  mov [rbp-8], rbx
  jmp .LABEL__convert_variable_statement_101__9
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] variable_type.5:[rbp-8] 
  # [discarded value]: variable_type.5
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] 
  # [discarded value]: variable_value.14
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] 
  # [discarded value]: variable_value.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] 
  # [discarded value]: variable_value.1
  # [discarded value]: variable_type.16
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] 
  # [discarded value]: variable_type.1
  # [discarded value]: is_global.1
  # [discarded value]: variable_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_statement_101__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_statement_101__stack_frame_size: .word 80

  .loc 3 845 1
  .text
convert_while_statement_102:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_while_statement_102__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_while_statement_102__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_While_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 846 24
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 846 24
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 846 24
  # condition_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax 
  .loc 3 847 19
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $4.1:r15 
  .loc 3 847 19
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $5.1:r14 
  .loc 3 847 19
  # loop_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax 
  .loc 3 848 18
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $7.1:r15 
  .loc 3 848 18
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $8.1:r14 
  .loc 3 848 18
  # end_block.1: @IR_Block = call(create_block_173, $8.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_173
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax 
  .loc 3 849 5
  # $10.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax $10.1:r15 
  .loc 3 849 5
  # $11.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $10.1, condition_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_jump_169
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 850 5
  # store_struct_member(self.1, current_block, condition_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 851 48
  # $12.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] statement.1:r15:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:r14 
  .loc 3 851 80
  # $13.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-48], r14
  call get_named_type_66
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:[rbp-48] $13.1:rax 
  .loc 3 851 24
  # condition_value.1: @IR_Value = call(convert_expression_103, self.1, $12.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax 
  .loc 3 852 5
  # $15.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax $15.1:r15 
  .loc 3 852 5
  # $16.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $15.1, condition_value.1, loop_block.1, end_block.1)
  mov rdi, r15
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_170
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 853 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: loop_block.1
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 854 46
  # $17.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:rbx 
  .loc 3 854 25
  # $18.1: @IR_Loop = new IR_Loop(parent = $17.1, end_block = end_block.1)
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  #     .parent = $17.1
  mov rbx, [rbp-48]
  mov QWORD PTR [rax], rbx
  #     .end_block = end_block.1
  mov r15, [rbp-40]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] $18.1:rax 
  .loc 3 854 5
  # store_struct_member(self.1, current_loop, $18.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+40], rax
  # [discarded value]: $18.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] 
  .loc 3 855 34
  # $19.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+24]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-8] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] $19.1:r14 
  .loc 3 855 5
  # call(convert_block_statement_95, self.1, $19.1)
  mov rdi, rbx
  mov rsi, r14
  call convert_block_statement_95
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 856 5
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $20.1:rbx 
  .loc 3 856 5
  # $21.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $20.1, condition_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_169
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: condition_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-40] 
  .loc 3 857 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 858 25
  # $22.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $22.1:rbx 
  .loc 3 858 25
  # $23.1: @IR_Loop = load_struct_member($22.1, parent)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] $23.1:r15 
  .loc 3 858 5
  # store_struct_member(self.1, current_loop, $23.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $23.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_while_statement_102__end
  # [live values]: 
.LABEL__convert_while_statement_102__end:
  mov rsp, rbp
  pop rbp
  ret

convert_while_statement_102__stack_frame_size: .word 48

  .loc 3 861 1
  .text
convert_expression_103:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_103__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_103__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 863 9
  # $1.1: Boolean = call(is_343, expression.1, AST_Add_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Add_Expression[rip]
  mov [rbp-24], rdx
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__convert_expression_103__2, .LABEL__convert_expression_103__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_expression_103__4
.LABEL__convert_expression_103__2:
  .loc 3 864 45
  # $68.1: @AST_Add_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $68.1:rax 
  .loc 3 864 17
  # value.23: @IR_Value = call(convert_add_expression_105, self.1, $68.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_add_expression_105
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:rax 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
.LABEL__convert_expression_103__3:
  # value.26: @IR_Value = phi(value.23, value.22, value.21, value.20, value.19, value.18, value.17, value.16, value.15, value.14, value.13, value.12, value.11, value.10, value.9, value.8, value.7, value.6, value.5, value.4, value.3, value.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] 
  .loc 3 910 9
  # $70.1: Boolean = expected_type.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $70.1:rax 
  .loc 3 910 9
  # $71.1: Boolean = $70.1
  mov [rbp-34], al
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:rax 
  # jump($71.1, .LABEL__convert_expression_103__68, .LABEL__convert_expression_103__69)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_expression_103__69
.LABEL__convert_expression_103__68:
  .loc 3 910 56
  # $72.1: @IR_Type = load_struct_member(value.26, type)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:rax:[rbp-33] $71.1:[rbp-34] $72.1:rbx 
  .loc 3 910 34
  # $73.1: Boolean = call(accepts_74, expected_type.1, $72.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call accepts_74
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $73.1:rax 
  .loc 3 910 34
  # $74.1: Boolean = $73.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $74.1:rbx 
  .loc 3 910 9
  # $71.2: Boolean = $74.1
  mov [rbp-35], bl
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_expression_103__69)
  mov [rbp-34], bl
.LABEL__convert_expression_103__69:
  .loc 3 910 9
  # $71.3: Boolean = phi($71.1, $71.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
  # jump($71.3, .LABEL__convert_expression_103__70, .LABEL__convert_expression_103__71)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_expression_103__71
.LABEL__convert_expression_103__70:
  .loc 3 911 15
  # $75.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:rbx 
  .loc 3 911 36
  # $76.1: @String = call(clone_345, "Not an \"")
  lea rdi, .LABEL__string_210[rip] # "Not an \""
  mov [rbp-42], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $76.1:rax 
  .loc 3 911 62
  # $77.1: @String = load_struct_member(expected_type.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:rbx:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $76.1:rax $77.1:r15 
  .loc 3 911 36
  # $78.1: @String = call(append_354, $76.1, $77.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $78.1:rax 
  .loc 3 911 36
  # $79.1: @String = call(append_354, $78.1, "\" expression")
  mov rdi, rax
  lea rsi, .LABEL__string_211[rip] # "\" expression"
  call append_354
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] $75.1:[rbp-42] $79.1:rax 
  .loc 3 911 9
  # call(abort_314, $75.1, $79.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_314
  # [discarded value]: $79.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
.LABEL__convert_expression_103__71:
  .loc 3 913 5
  # return(value.26)
  mov rax, [rbp-33]
  jmp .LABEL__convert_expression_103__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] $71.3:[rbp-34] 
  # [discarded value]: $71.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] $71.2:[rbp-34] 
  # [discarded value]: $71.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] value.26:[rbp-33] $71.1:[rbp-34] 
  # [discarded value]: $71.1
  # [discarded value]: value.26
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] value.23:[rbp-33] 
  # [discarded value]: value.23
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__convert_expression_103__4:
  .loc 3 865 16
  # $2.1: Boolean = call(is_343, expression.1, AST_Array_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Array_Access_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:rax 
  # jump($2.1, .LABEL__convert_expression_103__5, .LABEL__convert_expression_103__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_expression_103__7
.LABEL__convert_expression_103__5:
  .loc 3 866 54
  # $66.1: @AST_Array_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $66.1:rax 
  .loc 3 866 17
  # value.22: @IR_Value = call(convert_array_access_expression_106, self.1, $66.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_access_expression_106
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] value.22:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] value.22:[rbp-33] 
  # [discarded value]: value.22
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
.LABEL__convert_expression_103__7:
  .loc 3 867 16
  # $3.1: Boolean = call(is_343, expression.1, AST_Atomic_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Atomic_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:rax 
  # jump($3.1, .LABEL__convert_expression_103__8, .LABEL__convert_expression_103__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_expression_103__10
.LABEL__convert_expression_103__8:
  .loc 3 868 42
  # $63.1: @AST_Atomic_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $63.1:rax 
  .loc 3 868 41
  # $64.1: @AST_Expression = load_struct_member($63.1, expression)
  mov rbx, [rax+16]
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $64.1:rbx 
  .loc 3 868 17
  # value.21: @IR_Value = call(convert_expression_103, self.1, $64.1, expected_type.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call convert_expression_103
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] value.21:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] value.21:[rbp-33] 
  # [discarded value]: value.21
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] 
.LABEL__convert_expression_103__10:
  .loc 3 869 16
  # $4.1: Boolean = call(is_343, expression.1, AST_Call_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Call_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:rax 
  # jump($4.1, .LABEL__convert_expression_103__11, .LABEL__convert_expression_103__13)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_expression_103__13
.LABEL__convert_expression_103__11:
  .loc 3 870 46
  # $61.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $61.1:rax 
  .loc 3 870 17
  # value.20: @IR_Value = call(convert_call_expression_107, self.1, $61.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_call_expression_107
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] value.20:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] value.20:[rbp-33] 
  # [discarded value]: value.20
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] 
.LABEL__convert_expression_103__13:
  .loc 3 871 16
  # $5.1: Boolean = call(is_343, expression.1, AST_Cast_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Cast_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:rax 
  # jump($5.1, .LABEL__convert_expression_103__14, .LABEL__convert_expression_103__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_expression_103__16
.LABEL__convert_expression_103__14:
  .loc 3 872 46
  # $59.1: @AST_Cast_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $59.1:rax 
  .loc 3 872 17
  # value.19: @IR_Value = call(convert_cast_expression_112, self.1, $59.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_cast_expression_112
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] value.19:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] value.19:[rbp-33] 
  # [discarded value]: value.19
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] 
.LABEL__convert_expression_103__16:
  .loc 3 873 16
  # $6.1: Boolean = call(is_343, expression.1, AST_Divide_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Divide_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:rax 
  # jump($6.1, .LABEL__convert_expression_103__17, .LABEL__convert_expression_103__19)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_expression_103__19
.LABEL__convert_expression_103__17:
  .loc 3 874 48
  # $57.1: @AST_Divide_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $57.1:rax 
  .loc 3 874 17
  # value.18: @IR_Value = call(convert_divide_expression_113, self.1, $57.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_divide_expression_113
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] value.18:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] value.18:[rbp-33] 
  # [discarded value]: value.18
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] 
.LABEL__convert_expression_103__19:
  .loc 3 875 16
  # $7.1: Boolean = call(is_343, expression.1, AST_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Equals_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:rax 
  # jump($7.1, .LABEL__convert_expression_103__20, .LABEL__convert_expression_103__22)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_expression_103__22
.LABEL__convert_expression_103__20:
  .loc 3 876 48
  # $55.1: @AST_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $55.1:rax 
  .loc 3 876 17
  # value.17: @IR_Value = call(convert_equals_expression_114, self.1, $55.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_equals_expression_114
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] value.17:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] value.17:[rbp-33] 
  # [discarded value]: value.17
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] 
.LABEL__convert_expression_103__22:
  .loc 3 877 16
  # $8.1: Boolean = call(is_343, expression.1, AST_Greater_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:rax 
  # jump($8.1, .LABEL__convert_expression_103__23, .LABEL__convert_expression_103__25)
  test al, al
  mov [rbp-40], al
  jz .LABEL__convert_expression_103__25
.LABEL__convert_expression_103__23:
  .loc 3 878 54
  # $53.1: @AST_Greater_Than_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $53.1:rax 
  .loc 3 878 17
  # value.16: @IR_Value = call(convert_greater_than_expression_115, self.1, $53.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_expression_115
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] value.16:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] value.16:[rbp-33] 
  # [discarded value]: value.16
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] 
.LABEL__convert_expression_103__25:
  .loc 3 879 16
  # $9.1: Boolean = call(is_343, expression.1, AST_Greater_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Or_Equals_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__convert_expression_103__26, .LABEL__convert_expression_103__28)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_expression_103__28
.LABEL__convert_expression_103__26:
  .loc 3 880 64
  # $51.1: @AST_Greater_Than_Or_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $51.1:rax 
  .loc 3 880 17
  # value.15: @IR_Value = call(convert_greater_than_or_equals_expression_116, self.1, $51.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_greater_than_or_equals_expression_116
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] value.15:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] value.15:[rbp-33] 
  # [discarded value]: value.15
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] 
.LABEL__convert_expression_103__28:
  .loc 3 881 16
  # $10.1: Boolean = call(is_343, expression.1, AST_Less_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:rax 
  # jump($10.1, .LABEL__convert_expression_103__29, .LABEL__convert_expression_103__31)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_expression_103__31
.LABEL__convert_expression_103__29:
  .loc 3 882 51
  # $49.1: @AST_Less_Than_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $49.1:rax 
  .loc 3 882 17
  # value.14: @IR_Value = call(convert_less_than_expression_117, self.1, $49.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_expression_117
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] value.14:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] value.14:[rbp-33] 
  # [discarded value]: value.14
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] 
.LABEL__convert_expression_103__31:
  .loc 3 883 16
  # $11.1: Boolean = call(is_343, expression.1, AST_Less_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Or_Equals_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:rax 
  # jump($11.1, .LABEL__convert_expression_103__32, .LABEL__convert_expression_103__34)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_expression_103__34
.LABEL__convert_expression_103__32:
  .loc 3 884 61
  # $47.1: @AST_Less_Than_Or_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $47.1:rax 
  .loc 3 884 17
  # value.13: @IR_Value = call(convert_less_than_or_equals_expression_118, self.1, $47.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_less_than_or_equals_expression_118
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] value.13:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] value.13:[rbp-33] 
  # [discarded value]: value.13
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] 
.LABEL__convert_expression_103__34:
  .loc 3 885 16
  # $12.1: Boolean = call(is_343, expression.1, AST_Literal_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Literal_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:rax 
  # jump($12.1, .LABEL__convert_expression_103__35, .LABEL__convert_expression_103__37)
  test al, al
  mov [rbp-44], al
  jz .LABEL__convert_expression_103__37
.LABEL__convert_expression_103__35:
  .loc 3 886 49
  # $45.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $45.1:rax 
  .loc 3 886 17
  # value.12: @IR_Value = call(convert_literal_expression_119, self.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_literal_expression_119
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] value.12:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] value.12:[rbp-33] 
  # [discarded value]: value.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] 
.LABEL__convert_expression_103__37:
  .loc 3 887 16
  # $13.1: Boolean = call(is_343, expression.1, AST_Logic_And_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_And_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__convert_expression_103__38, .LABEL__convert_expression_103__40)
  test al, al
  mov [rbp-45], al
  jz .LABEL__convert_expression_103__40
.LABEL__convert_expression_103__38:
  .loc 3 888 51
  # $43.1: @AST_Logic_And_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $43.1:rax 
  .loc 3 888 17
  # value.11: @IR_Value = call(convert_logic_and_expression_120, self.1, $43.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_and_expression_120
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] value.11:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] value.11:[rbp-33] 
  # [discarded value]: value.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] 
.LABEL__convert_expression_103__40:
  .loc 3 889 16
  # $14.1: Boolean = call(is_343, expression.1, AST_Logic_Or_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_Or_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:rax 
  # jump($14.1, .LABEL__convert_expression_103__41, .LABEL__convert_expression_103__43)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_expression_103__43
.LABEL__convert_expression_103__41:
  .loc 3 890 50
  # $41.1: @AST_Logic_Or_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $41.1:rax 
  .loc 3 890 17
  # value.10: @IR_Value = call(convert_logic_or_expression_121, self.1, $41.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_logic_or_expression_121
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] value.10:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] value.10:[rbp-33] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
.LABEL__convert_expression_103__43:
  .loc 3 891 16
  # $15.1: Boolean = call(is_343, expression.1, AST_Member_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:rax 
  # jump($15.1, .LABEL__convert_expression_103__44, .LABEL__convert_expression_103__46)
  test al, al
  mov [rbp-47], al
  jz .LABEL__convert_expression_103__46
.LABEL__convert_expression_103__44:
  .loc 3 892 55
  # $39.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $39.1:rax 
  .loc 3 892 17
  # value.9: @IR_Value = call(convert_member_access_expression_122, self.1, $39.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_122
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] value.9:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] value.9:[rbp-33] 
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] 
.LABEL__convert_expression_103__46:
  .loc 3 893 16
  # $16.1: Boolean = call(is_343, expression.1, AST_Modulo_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Modulo_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:rax 
  # jump($16.1, .LABEL__convert_expression_103__47, .LABEL__convert_expression_103__49)
  test al, al
  mov [rbp-48], al
  jz .LABEL__convert_expression_103__49
.LABEL__convert_expression_103__47:
  .loc 3 894 48
  # $37.1: @AST_Modulo_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $37.1:rax 
  .loc 3 894 17
  # value.8: @IR_Value = call(convert_modulo_expression_125, self.1, $37.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_modulo_expression_125
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] value.8:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] value.8:[rbp-33] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] 
.LABEL__convert_expression_103__49:
  .loc 3 895 16
  # $17.1: Boolean = call(is_343, expression.1, AST_Multiply_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Multiply_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:rax 
  # jump($17.1, .LABEL__convert_expression_103__50, .LABEL__convert_expression_103__52)
  test al, al
  mov [rbp-49], al
  jz .LABEL__convert_expression_103__52
.LABEL__convert_expression_103__50:
  .loc 3 896 50
  # $35.1: @AST_Multiply_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $35.1:rax 
  .loc 3 896 17
  # value.7: @IR_Value = call(convert_multiply_expression_126, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_multiply_expression_126
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] value.7:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] value.7:[rbp-33] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] 
.LABEL__convert_expression_103__52:
  .loc 3 897 16
  # $18.1: Boolean = call(is_343, expression.1, AST_Negate_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Negate_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:rax 
  # jump($18.1, .LABEL__convert_expression_103__53, .LABEL__convert_expression_103__55)
  test al, al
  mov [rbp-50], al
  jz .LABEL__convert_expression_103__55
.LABEL__convert_expression_103__53:
  .loc 3 898 48
  # $33.1: @AST_Negate_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $33.1:rax 
  .loc 3 898 17
  # value.6: @IR_Value = call(convert_negate_expression_127, self.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_negate_expression_127
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] value.6:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] value.6:[rbp-33] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] 
.LABEL__convert_expression_103__55:
  .loc 3 899 16
  # $19.1: Boolean = call(is_343, expression.1, AST_New_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_New_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:rax 
  # jump($19.1, .LABEL__convert_expression_103__56, .LABEL__convert_expression_103__58)
  test al, al
  mov [rbp-51], al
  jz .LABEL__convert_expression_103__58
.LABEL__convert_expression_103__56:
  .loc 3 900 45
  # $31.1: @AST_New_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $31.1:rax 
  .loc 3 900 17
  # value.5: @IR_Value = call(convert_new_expression_128, self.1, $31.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_new_expression_128
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] value.5:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] value.5:[rbp-33] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] 
.LABEL__convert_expression_103__58:
  .loc 3 901 16
  # $20.1: Boolean = call(is_343, expression.1, AST_Not_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Not_Equals_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:rax 
  # jump($20.1, .LABEL__convert_expression_103__59, .LABEL__convert_expression_103__61)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_expression_103__61
.LABEL__convert_expression_103__59:
  .loc 3 902 52
  # $29.1: @AST_Not_Equals_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $29.1:rax 
  .loc 3 902 17
  # value.4: @IR_Value = call(convert_not_equals_expression_132, self.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_not_equals_expression_132
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] value.4:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] value.4:[rbp-33] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] 
.LABEL__convert_expression_103__61:
  .loc 3 903 16
  # $21.1: Boolean = call(is_343, expression.1, AST_Substract_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Substract_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:rax 
  # jump($21.1, .LABEL__convert_expression_103__62, .LABEL__convert_expression_103__64)
  test al, al
  mov [rbp-53], al
  jz .LABEL__convert_expression_103__64
.LABEL__convert_expression_103__62:
  .loc 3 904 51
  # $27.1: @AST_Substract_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $27.1:rax 
  .loc 3 904 17
  # value.3: @IR_Value = call(convert_substract_expression_133, self.1, $27.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_substract_expression_133
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] value.3:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] value.3:[rbp-33] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] 
.LABEL__convert_expression_103__64:
  .loc 3 905 16
  # $22.1: Boolean = call(is_343, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:rax 
  # jump($22.1, .LABEL__convert_expression_103__65, .LABEL__convert_expression_103__67)
  test al, al
  mov [rbp-54], al
  jz .LABEL__convert_expression_103__67
.LABEL__convert_expression_103__65:
  .loc 3 906 50
  # $25.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $25.1:rax 
  .loc 3 906 17
  # value.2: @IR_Value = call(convert_variable_expression_134, self.1, $25.1, expected_type.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  call convert_variable_expression_134
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] value.2:rax:[rbp-33] 
  # jump(.LABEL__convert_expression_103__3)
  mov [rbp-33], rax
  jmp .LABEL__convert_expression_103__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] value.2:[rbp-33] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] 
.LABEL__convert_expression_103__67:
  .loc 3 908 15
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $23.1:rbx 
  .loc 3 908 36
  # $24.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] $23.1:rbx $24.1:r15 
  .loc 3 908 9
  # call(abort_141, $23.1, $24.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] $22.1:[rbp-54] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] $21.1:[rbp-53] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] $20.1:[rbp-52] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] $19.1:[rbp-51] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] $17.1:[rbp-49] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] $16.1:[rbp-48] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:[rbp-47] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] $12.1:[rbp-44] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] $11.1:[rbp-43] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] $10.1:[rbp-42] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] $8.1:[rbp-40] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] $7.1:[rbp-39] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] $6.1:[rbp-38] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] $5.1:[rbp-37] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] $4.1:[rbp-36] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-35] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_expression_103__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_103__stack_frame_size: .word 64

  .loc 3 916 1
  .text
convert_expression_address_104:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_address_104__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_address_104__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 917 9
  # $1.1: Boolean = call(is_343, expression.1, AST_Member_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_expression_address_104__2, .LABEL__convert_expression_address_104__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_expression_address_104__3
.LABEL__convert_expression_address_104__2:
  .loc 3 918 62
  # $2.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 918 16
  # $3.1: @IR_Value = call(convert_member_access_expression_address_124, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_address_124
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 918 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_expression_address_104__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_expression_address_104__3:
  .loc 3 920 9
  # $4.1: Boolean = call(is_343, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_expression_address_104__5, .LABEL__convert_expression_address_104__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_expression_address_104__6
.LABEL__convert_expression_address_104__5:
  .loc 3 921 57
  # $5.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 921 16
  # $6.1: @IR_Value = call(convert_variable_expression_address_135, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_address_135
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 921 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_expression_address_104__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_expression_address_104__6:
  .loc 3 923 11
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx 
  .loc 3 923 32
  # $8.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx $8.1:r15 
  .loc 3 923 5
  # call(abort_141, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_expression_address_104__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_address_104__stack_frame_size: .word 32

  .loc 3 926 1
  .text
convert_add_expression_105:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_add_expression_105__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_add_expression_105__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 927 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 927 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 927 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 928 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 928 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 928 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 929 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_add_expression_105__2, .LABEL__convert_add_expression_105__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_add_expression_105__3
.LABEL__convert_add_expression_105__2:
  .loc 3 929 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_add_expression_105__3)
  mov [rbp-41], al
.LABEL__convert_add_expression_105__3:
  .loc 3 929 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_add_expression_105__4, .LABEL__convert_add_expression_105__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_add_expression_105__5
.LABEL__convert_add_expression_105__4:
  .loc 3 930 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 930 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_add_expression_105__5:
  .loc 3 932 85
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 932 62
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 932 24
  # $14.1: @IR_Add_Instruction = new IR_Add_Instruction(object_type = IR_Add_Instruction, result_value = $12.1, dump = dump_ir_add_instruction_234.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Add_Instruction
  mov rbx, IR_Add_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_add_instruction_234.address
  lea r14, dump_ir_add_instruction_234[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 932 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 932 134
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 932 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 932 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_add_expression_105__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_add_expression_105__end:
  mov rsp, rbp
  pop rbp
  ret

convert_add_expression_105__stack_frame_size: .word 64

  .loc 3 935 1
  .text
convert_array_access_expression_106:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_access_expression_106__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_access_expression_106__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # array_access_expression.1: @AST_Array_Access_Expression = load_variable(array_access_expression)
  # [live values]: self.1:rdi array_access_expression.1:rsi 
  .loc 3 936 44
  # $1.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi array_access_expression.1:rsi $1.1:rax 
  .loc 3 936 86
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 936 20
  # index_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:rax 
  .loc 3 937 45
  # $4.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:rax $4.1:r15 
  .loc 3 937 21
  # object_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, null)
  mov rdi, [rbp-24]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-32], rax
  call convert_expression_103
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax 
  .loc 3 938 26
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx 
  .loc 3 939 10
  # $7.1: Boolean = call(is_343, object_value_type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-40], rax
  mov [rbp-48], rbx
  call is_343
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:rax 
  .loc 3 939 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:rbx 
  # jump($8.1, .LABEL__convert_array_access_expression_106__2, .LABEL__convert_array_access_expression_106__3)
  test bl, bl
  mov [rbp-49], bl
  jz .LABEL__convert_array_access_expression_106__3
.LABEL__convert_array_access_expression_106__2:
  .loc 3 940 15
  # $9.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rax:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:rbx 
  .loc 3 940 49
  # $10.1: @String = call(clone_345, "Not an IR_Pointer_Type value: ")
  lea rdi, .LABEL__string_213[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-57], rbx
  call clone_345
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $10.1:rax 
  .loc 3 940 96
  # $11.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:rbx:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $10.1:rax $11.1:r15 
  .loc 3 940 49
  # $12.1: @String = call(append_354, $10.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $9.1:[rbp-57] $12.1:rax 
  .loc 3 940 9
  # call(abort_314, $9.1, $12.1)
  mov rdi, [rbp-57]
  mov rsi, rax
  call abort_314
  # [discarded value]: $12.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] 
.LABEL__convert_array_access_expression_106__3:
  .loc 3 942 26
  # object_value_type.1: @IR_Pointer_Type = object_value_type.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] object_value_type.1:rax 
  .loc 3 943 85
  # $14.1: @IR_Type = load_struct_member(object_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $14.1:rbx 
  .loc 3 943 62
  # $15.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $14.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $15.1:rax 
  .loc 3 943 24
  # $16.1: @IR_Load_Array_Item_Instruction = call(create_ir_load_array_item_instruction_202, $15.1, object_value.1, index_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, [rbp-32]
  call create_ir_load_array_item_instruction_202
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $16.1:rax 
  .loc 3 943 146
  # $17.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $16.1:rax $17.1:r15 
  .loc 3 943 12
  # $18.1: @IR_Variable_Value = call(append_77, self.1, $16.1, $17.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] $18.1:rax 
  .loc 3 943 5
  # return($18.1)
  mov [rbp-57], rax
  jmp .LABEL__convert_array_access_expression_106__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $8.1:[rbp-49] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: index_value.1
  # [discarded value]: array_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_array_access_expression_106__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_access_expression_106__stack_frame_size: .word 64

  .loc 3 946 1
  .text
convert_call_expression_107:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_expression_107__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_expression_107__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  .loc 3 947 9
  # $1.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax 
  .loc 3 947 9
  # $2.1: Boolean = call(is_343, $1.1, AST_Atomic_Expression)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Atomic_Expression[rip]
  call is_343
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_call_expression_107__2, .LABEL__convert_call_expression_107__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_call_expression_107__3
.LABEL__convert_call_expression_107__2:
  .loc 3 948 49
  # $3.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 948 25
  # callee_value.1: @IR_Value = call(convert_expression_103, self.1, $3.1, null)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  call convert_expression_103
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax 
  .loc 3 949 13
  # $5.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax $5.1:rbx 
  .loc 3 949 13
  # $6.1: Boolean = call(is_343, $5.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  mov [rbp-25], rax
  call is_343
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $6.1:rax 
  .loc 3 949 13
  # $7.1: Boolean = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:rbx 
  # jump($7.1, .LABEL__convert_call_expression_107__4, .LABEL__convert_call_expression_107__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__convert_call_expression_107__5
.LABEL__convert_call_expression_107__4:
  .loc 3 950 19
  # $8.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:rbx 
  .loc 3 950 45
  # $9.1: @String = call(clone_345, "Values of type ")
  lea rdi, .LABEL__string_214[rip] # "Values of type "
  mov [rbp-34], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax 
  .loc 3 950 77
  # $10.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $10.1:r15 
  .loc 3 950 77
  # $11.1: @String = load_struct_member($10.1, name)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $11.1:r14 
  .loc 3 950 45
  # $12.1: @String = call(append_354, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $12.1:rax 
  .loc 3 950 45
  # $13.1: @String = call(append_354, $12.1, " are not callable")
  mov rdi, rax
  lea rsi, .LABEL__string_215[rip] # " are not callable"
  call append_354
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $13.1:rax 
  .loc 3 950 13
  # call(abort_314, $8.1, $13.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_314
  # [discarded value]: $13.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
.LABEL__convert_call_expression_107__5:
  .loc 3 952 16
  # $14.1: @IR_Value = call(convert_dynamic_call_expression_109, self.1, call_expression.1, callee_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-25]
  xor rcx, rcx
  call convert_dynamic_call_expression_109
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $14.1:rax 
  .loc 3 952 9
  # return($14.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_call_expression_107__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] 
  # [discarded value]: callee_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_call_expression_107__3:
  .loc 3 954 9
  # $15.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $15.1:rbx 
  .loc 3 954 9
  # $16.1: Boolean = call(is_343, $15.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__convert_call_expression_107__7, .LABEL__convert_call_expression_107__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_call_expression_107__8
.LABEL__convert_call_expression_107__7:
  .loc 3 955 30
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx 
  .loc 3 956 49
  # $19.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx $19.1:r15 
  .loc 3 956 25
  # callee_value.1: @IR_Value = call(convert_expression_103, self.1, $19.1, null)
  mov rdi, [rbp-8]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-26], rbx
  call convert_expression_103
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax 
  .loc 3 957 30
  # callee_value_type.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax callee_value_type.1:rbx 
  .loc 3 958 13
  # $22.1: Boolean = call(is_343, callee_value_type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-34], rax
  mov [rbp-42], rbx
  call is_343
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:rax 
  # jump($22.1, .LABEL__convert_call_expression_107__9, .LABEL__convert_call_expression_107__10)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_call_expression_107__10
.LABEL__convert_call_expression_107__9:
  .loc 3 959 34
  # callee_value_type.1: @IR_Pointer_Type = callee_value_type.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax 
  .loc 3 960 17
  # $24.1: @IR_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax $24.1:rbx 
  .loc 3 960 17
  # $25.1: Boolean = call(is_343, $24.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-51], rax
  call is_343
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:rax 
  # jump($25.1, .LABEL__convert_call_expression_107__11, .LABEL__convert_call_expression_107__10)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_call_expression_107__10
.LABEL__convert_call_expression_107__11:
  .loc 3 961 40
  # $27.1: @IR_Struct_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx 
  .loc 3 961 102
  # $28.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov r15, [rbp-26]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $28.1:r14 
  .loc 3 961 102
  # $29.1: @String = load_struct_member($28.1, lexeme)
  mov r13, [r14+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $29.1:r13 
  .loc 3 961 39
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r13
  call get_member_150
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 962 21
  # $31.1: Boolean = struct_type_member.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax $31.1:rbx 
  .loc 3 962 21
  # $32.1: Boolean = $31.1
  mov [rbp-53], bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax $32.1:rbx 
  # jump($32.1, .LABEL__convert_call_expression_107__13, .LABEL__convert_call_expression_107__14)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_call_expression_107__14
.LABEL__convert_call_expression_107__13:
  .loc 3 962 51
  # $33.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $33.1:rbx 
  .loc 3 962 51
  # $32.2: Boolean = call(is_343, $33.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:rax:[rbp-61] 
  # jump(.LABEL__convert_call_expression_107__14)
  mov [rbp-61], al
.LABEL__convert_call_expression_107__14:
  .loc 3 962 21
  # $32.3: Boolean = phi($32.1, $32.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # jump($32.3, .LABEL__convert_call_expression_107__15, .LABEL__convert_call_expression_107__10)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__convert_call_expression_107__10
.LABEL__convert_call_expression_107__15:
  .loc 3 963 120
  # $35.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $35.1:rbx 
  .loc 3 963 97
  # $36.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $36.1:rax 
  .loc 3 963 56
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $36.1, callee_value.1, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-34]
  mov rdx, [rbp-60]
  mov cl, 0
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax 
  .loc 3 963 188
  # $38.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rbx:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax $38.1:r15 
  .loc 3 963 44
  # call_function_value.1: @IR_Variable_Value = call(append_77, self.1, $37.1, $38.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] call_function_value.1:rax 
  .loc 3 964 28
  # $40.1: @IR_Value = call(convert_dynamic_call_expression_109, self.1, call_expression.1, call_function_value.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  mov rcx, [rbp-34]
  call convert_dynamic_call_expression_109
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $40.1:rax 
  .loc 3 964 21
  # return($40.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_107__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
.LABEL__convert_call_expression_107__10:
  .loc 3 968 69
  # $41.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rax:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $41.1:rbx struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 968 16
  # $42.1: @IR_Value = call(convert_direct_call_expression_108, self.1, call_expression.1, $41.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  mov rcx, [rbp-34]
  call convert_direct_call_expression_108
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $42.1:rax struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 968 9
  # return($42.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_107__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # [discarded value]: $32.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [discarded value]: $32.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [discarded value]: $32.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] 
  # [discarded value]: callee_value_type.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] 
  # [discarded value]: callee_value_type.1
  # [discarded value]: callee_value.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__convert_call_expression_107__8:
  .loc 3 970 9
  # $43.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $43.1:rbx 
  .loc 3 970 9
  # $44.1: Boolean = call(is_343, $43.1, AST_Variable_Expression)
  mov rdi, rbx
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:rax 
  # jump($44.1, .LABEL__convert_call_expression_107__19, .LABEL__convert_call_expression_107__20)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_call_expression_107__20
.LABEL__convert_call_expression_107__19:
  .loc 3 971 30
  # callee_expression.1: @AST_Variable_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx 
  .loc 3 972 39
  # $47.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $47.1:r15 
  .loc 3 972 39
  # $48.1: @String = load_struct_member($47.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $48.1:r14 
  .loc 3 972 21
  # variable.1: @IR_Variable = call(get_variable_68, self.1, $48.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  call get_variable_68
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax 
  .loc 3 973 13
  # $50.1: Boolean = variable.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax $50.1:rbx 
  .loc 3 973 13
  # $51.1: Boolean = $50.1
  mov [rbp-28], bl
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax $51.1:rbx 
  # jump($51.1, .LABEL__convert_call_expression_107__21, .LABEL__convert_call_expression_107__22)
  test bl, bl
  mov [rbp-35], rax
  mov [rbp-36], bl
  jz .LABEL__convert_call_expression_107__22
.LABEL__convert_call_expression_107__21:
  .loc 3 973 33
  # $52.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-35]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax:[rbp-35] $51.1:[rbp-36] $52.1:rbx 
  .loc 3 973 33
  # $51.2: Boolean = call(is_343, $52.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:rax:[rbp-36] 
  # jump(.LABEL__convert_call_expression_107__22)
  mov [rbp-36], al
.LABEL__convert_call_expression_107__22:
  .loc 3 973 13
  # $51.3: Boolean = phi($51.1, $51.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # jump($51.3, .LABEL__convert_call_expression_107__23, .LABEL__convert_call_expression_107__24)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_call_expression_107__24
.LABEL__convert_call_expression_107__23:
  .loc 3 974 36
  # call_function_value.1: @IR_Value = call(convert_expression_103, self.1, callee_expression.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-27]
  xor rdx, rdx
  call convert_expression_103
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] call_function_value.1:rax 
  .loc 3 975 20
  # $55.1: @IR_Value = call(convert_dynamic_call_expression_109, self.1, call_expression.1, call_function_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  xor rcx, rcx
  call convert_dynamic_call_expression_109
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $55.1:rax 
  .loc 3 975 13
  # return($55.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_107__end
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
.LABEL__convert_call_expression_107__24:
  .loc 3 977 69
  # $56.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov rax, [rbp-27]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rax:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $56.1:rbx 
  .loc 3 977 16
  # $57.1: @IR_Value = call(convert_direct_call_expression_108, self.1, call_expression.1, $56.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  xor rcx, rcx
  call convert_direct_call_expression_108
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $57.1:rax 
  .loc 3 977 9
  # return($57.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_107__end
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # [discarded value]: $51.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [discarded value]: $51.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [discarded value]: $51.1
  # [discarded value]: variable.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
.LABEL__convert_call_expression_107__20:
  .loc 3 979 11
  # $58.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx 
  .loc 3 979 37
  # $59.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $59.1:r15 
  .loc 3 979 37
  # $60.1: @Object_Type = load_struct_member($59.1, object_type)
  mov r14, [r15]
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $60.1:r14 
  .loc 3 979 5
  # call(abort_141, $58.1, $60.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_expression_107__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_expression_107__stack_frame_size: .word 80

  .loc 3 982 1
  .text
convert_direct_call_expression_108:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_direct_call_expression_108__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_direct_call_expression_108__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # callee_name.1: @Identifier_Token = load_variable(callee_name)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx 
  .loc 3 983 33
  # $1.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rax, [rdx+8]
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 983 13
  # type.1: @IR_Type = call(get_named_type_66, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call get_named_type_66
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax 
  .loc 3 984 9
  # $3.1: Boolean = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax $3.1:rbx 
  .loc 3 984 9
  # $4.1: Boolean = $3.1
  mov [rbp-33], bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_direct_call_expression_108__2, .LABEL__convert_direct_call_expression_108__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_direct_call_expression_108__3
.LABEL__convert_direct_call_expression_108__2:
  .loc 3 984 25
  # $4.2: Boolean = call(is_343, type.1, IR_Struct_Type)
  mov rdi, [rbp-40]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:rax:[rbp-41] 
  # jump(.LABEL__convert_direct_call_expression_108__3)
  mov [rbp-41], al
.LABEL__convert_direct_call_expression_108__3:
  .loc 3 984 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # jump($4.3, .LABEL__convert_direct_call_expression_108__4, .LABEL__convert_direct_call_expression_108__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_direct_call_expression_108__5
.LABEL__convert_direct_call_expression_108__4:
  .loc 3 985 13
  # $6.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:rax 
  # jump($6.1, .LABEL__convert_direct_call_expression_108__6, .LABEL__convert_direct_call_expression_108__7)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_direct_call_expression_108__7
.LABEL__convert_direct_call_expression_108__6:
  .loc 3 986 19
  # $7.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $7.1:rbx 
  .loc 3 986 13
  # call(abort_314, $7.1, "Invalid type literal syntax")
  mov rdi, rbx
  lea rsi, .LABEL__string_216[rip] # "Invalid type literal syntax"
  call abort_314
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
.LABEL__convert_direct_call_expression_108__7:
  .loc 3 988 72
  # $8.1: @IR_Struct_Type = type.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $8.1:rax 
  .loc 3 988 16
  # $9.1: @IR_Struct_Literal_Value = call(convert_struct_literal_expression_129, self.1, call_expression.1, $8.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  mov rdx, rax
  call convert_struct_literal_expression_129
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $9.1:rax 
  .loc 3 988 9
  # return($9.1)
  mov [rbp-50], rax
  jmp .LABEL__convert_direct_call_expression_108__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
.LABEL__convert_direct_call_expression_108__5:
  .loc 3 991 51
  # $10.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $10.1:rbx 
  .loc 3 991 23
  # call_arguments.1: @List = call(convert_call_arguments_111, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call convert_call_arguments_111
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax 
  .loc 3 992 9
  # $12.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_direct_call_expression_108__9, .LABEL__convert_direct_call_expression_108__10)
  test bl, bl
  mov [rbp-49], rax
  mov [rbp-50], bl
  jz .LABEL__convert_direct_call_expression_108__10
.LABEL__convert_direct_call_expression_108__9:
  .loc 3 993 32
  # $13.1: @IR_Call_Argument = new IR_Call_Argument(value = first_argument.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = first_argument.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:rbx:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] $13.1:rax 
  .loc 3 993 9
  # call(prepend_319, call_arguments.1, $13.1)
  mov rdi, [rbp-49]
  mov rsi, rax
  call prepend_319
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__convert_direct_call_expression_108__10)
.LABEL__convert_direct_call_expression_108__10:
  .loc 3 996 5
  # call_function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax 
  .loc 3 997 29
  # $14.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax $14.1:r15 
  .loc 3 997 29
  # named_functions_item.1: @List_Item = load_struct_member($14.1, first_item)
  mov r14, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax named_functions_item.1:r14 
  # jump(.LABEL__convert_direct_call_expression_108__11)
  mov [rbp-58], rax
  mov [rbp-66], r14
.LABEL__convert_direct_call_expression_108__11:
  # call_function.8: @IR_Function = phi(call_function.1, call_function.9)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] 
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  .loc 3 998 12
  # $16.1: Boolean = named_functions_item.2 != null
  cmp QWORD PTR [rbp-66], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:rax 
  # jump($16.1, .LABEL__convert_direct_call_expression_108__12, .LABEL__convert_direct_call_expression_108__13)
  test al, al
  mov [rbp-67], al
  jz .LABEL__convert_direct_call_expression_108__13
.LABEL__convert_direct_call_expression_108__12:
  .loc 3 999 27
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-66]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx 
  .loc 3 1000 13
  # $19.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 
  .loc 3 1000 40
  # $20.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 $20.1:r13 
  .loc 3 1000 13
  # $21.1: Boolean = call(equals_346, $19.1, $20.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-75], rbx
  call equals_346
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:rax 
  # jump($21.1, .LABEL__convert_direct_call_expression_108__14, .LABEL__convert_direct_call_expression_108__15)
  test al, al
  mov [rbp-76], al
  jz .LABEL__convert_direct_call_expression_108__15
.LABEL__convert_direct_call_expression_108__14:
  .loc 3 1001 17
  # $22.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rax, [rbp-75]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:rax:[rbp-75] $21.1:[rbp-76] $22.1:rbx 
  .loc 3 1001 17
  # $23.1: Boolean = call(accepts_110, $22.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-49]
  call accepts_110
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:rax 
  # jump($23.1, .LABEL__convert_direct_call_expression_108__16, .LABEL__convert_direct_call_expression_108__15)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_108__15
.LABEL__convert_direct_call_expression_108__16:
  .loc 3 1002 21
  # $24.1: Boolean = call_function.8 != null
  cmp QWORD PTR [rbp-58], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__convert_direct_call_expression_108__18, .LABEL__convert_direct_call_expression_108__19)
  test al, al
  mov [rbp-78], al
  jz .LABEL__convert_direct_call_expression_108__19
.LABEL__convert_direct_call_expression_108__18:
  .loc 3 1003 27
  # $25.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] $25.1:rbx 
  .loc 3 1003 21
  # call(abort_314, $25.1, "Found at least two matching functions")
  mov rdi, rbx
  lea rsi, .LABEL__string_217[rip] # "Found at least two matching functions"
  call abort_314
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__convert_direct_call_expression_108__19:
  .loc 3 1005 17
  # call_function.3: @IR_Function = named_function.1
  mov rax, [rbp-75]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:rax:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_108__15)
  mov [rbp-58], rax
.LABEL__convert_direct_call_expression_108__15:
  # call_function.9: @IR_Function = phi(call_function.8, call_function.3)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] $24.1:[rbp-78] call_function.3:[rbp-58] 
  .loc 3 1008 32
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-66]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:rbx:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_108__11)
  mov [rbp-66], rbx
  jmp .LABEL__convert_direct_call_expression_108__11
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: named_functions_item.5
  # [discarded value]: call_function.9
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: call_function.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
.LABEL__convert_direct_call_expression_108__13:
  .loc 3 1010 9
  # $27.1: Boolean = call_function.8 == null
  cmp QWORD PTR [rbp-58], 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:rax 
  # jump($27.1, .LABEL__convert_direct_call_expression_108__20, .LABEL__convert_direct_call_expression_108__21)
  test al, al
  mov [rbp-68], al
  jz .LABEL__convert_direct_call_expression_108__21
.LABEL__convert_direct_call_expression_108__20:
  .loc 3 1011 33
  # $28.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] $28.1:rbx 
  .loc 3 1011 33
  # named_functions_item.1: @List_Item = load_struct_member($28.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:r15 
  # jump(.LABEL__convert_direct_call_expression_108__22)
  mov [rbp-76], r15
.LABEL__convert_direct_call_expression_108__22:
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  .loc 3 1012 16
  # $30.1: Boolean = named_functions_item.2 != null
  cmp QWORD PTR [rbp-76], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:rax 
  # jump($30.1, .LABEL__convert_direct_call_expression_108__23, .LABEL__convert_direct_call_expression_108__24)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_108__24
.LABEL__convert_direct_call_expression_108__23:
  .loc 3 1013 31
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-76]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx 
  .loc 3 1014 17
  # $33.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 
  .loc 3 1014 44
  # $34.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 $34.1:r13 
  .loc 3 1014 17
  # $35.1: Boolean = call(equals_346, $33.1, $34.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-85], rbx
  call equals_346
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:rax 
  # jump($35.1, .LABEL__convert_direct_call_expression_108__25, .LABEL__convert_direct_call_expression_108__26)
  test al, al
  mov [rbp-86], al
  jz .LABEL__convert_direct_call_expression_108__26
.LABEL__convert_direct_call_expression_108__25:
  .loc 3 1015 17
  # $36.1: @FILE = call(end_line_340, stderr)
  mov rdi, stderr[rip]
  call end_line_340
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $36.1:rax 
  .loc 3 1015 41
  # $37.1: @Source_Location = load_struct_member(named_function.1, location)
  mov rbx, [rbp-85]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $36.1:rax $37.1:r15 
  .loc 3 1015 17
  # $38.1: @FILE = call(write_317, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_317
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $38.1:rax 
  .loc 3 1015 17
  # $39.1: @FILE = call(write_337, $38.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $39.1:rax 
  .loc 3 1015 84
  # $40.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rbp-85]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $39.1:rax $40.1:r15 
  .loc 3 1015 17
  # $41.1: @FILE = call(write_337, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $41.1:rax 
  .loc 3 1015 17
  # $42.1: @FILE = call(write_337, $41.1, " :: ")
  mov rdi, rax
  lea rsi, .LABEL__string_218[rip] # " :: "
  call write_337
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $42.1:rax 
  .loc 3 1015 125
  # $43.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rbx, [rbp-85]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $43.1:r15 
  .loc 3 1015 125
  # $44.1: @String = load_struct_member($43.1, name)
  mov r14, [r15+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $44.1:r14 
  .loc 3 1015 17
  # $45.1: @FILE = call(write_337, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $44.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $45.1:rax 
  .loc 3 1015 17
  # $46.1: @FILE = call(end_line_340, $45.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # jump(.LABEL__convert_direct_call_expression_108__26)
.LABEL__convert_direct_call_expression_108__26:
  .loc 3 1017 36
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-76]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:rbx:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_108__22)
  mov [rbp-76], rbx
  jmp .LABEL__convert_direct_call_expression_108__22
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:[rbp-76] 
  # [discarded value]: named_functions_item.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
.LABEL__convert_direct_call_expression_108__24:
  .loc 3 1019 20
  # $48.1: @String = call(clone_345, "Found no matching function: ")
  lea rdi, .LABEL__string_219[rip] # "Found no matching function: "
  call clone_345
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax 
  .loc 3 1019 65
  # $49.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:rbx:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax $49.1:r15 
  .loc 3 1019 20
  # $50.1: @String = call(append_354, $48.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $50.1:rax 
  .loc 3 1019 20
  # message.1: @String = call(append_354, $50.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # " :: ("
  call append_354
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax 
  .loc 3 1020 32
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rbx, [rbp-49]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 
  .loc 3 1021 13
  # $53.1: Boolean = call_arguments_item.1 != null
  cmp r15, 0
  setne r14b
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 $53.1:r14 
  # jump($53.1, .LABEL__convert_direct_call_expression_108__29, .LABEL__convert_direct_call_expression_108__28)
  test r14b, r14b
  mov [rbp-85], rax
  mov [rbp-86], r14b
  mov [rbp-94], r15
  jz .LABEL__convert_direct_call_expression_108__28
.LABEL__convert_direct_call_expression_108__29:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.4, call_arguments_item.1)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] 
  .loc 3 1023 34
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-94]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx 
  .loc 3 1024 21
  # $56.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $56.1:r15 
  .loc 3 1024 21
  # $57.1: Boolean = $56.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $57.1:r14 
  # jump($57.1, .LABEL__convert_direct_call_expression_108__31, .LABEL__convert_direct_call_expression_108__32)
  test r14b, r14b
  mov [rbp-102], rbx
  mov [rbp-103], r14b
  jz .LABEL__convert_direct_call_expression_108__32
.LABEL__convert_direct_call_expression_108__31:
  .loc 3 1025 36
  # $58.1: @String = load_struct_member(call_argument.1, name)
  mov rax, [rbp-102]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $58.1:rbx 
  .loc 3 1025 21
  # $59.1: @String = call(append_354, message.1, $58.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_354
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] $59.1:rax 
  .loc 3 1025 21
  # $60.1: @String = call(append_354, $59.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call append_354
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # jump(.LABEL__convert_direct_call_expression_108__32)
.LABEL__convert_direct_call_expression_108__32:
  .loc 3 1027 32
  # $61.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rax, [rbp-102]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $61.1:rbx 
  .loc 3 1027 32
  # $62.1: @IR_Type = load_struct_member($61.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $62.1:r15 
  .loc 3 1027 32
  # $63.1: @String = load_struct_member($62.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $63.1:rbx 
  .loc 3 1027 17
  # $64.1: @String = call(append_354, message.1, $63.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_354
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  .loc 3 1028 39
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-94]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] 
  .loc 3 1029 21
  # $66.1: Boolean = call_arguments_item.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] $66.1:rax 
  # jump($66.1, .LABEL__convert_direct_call_expression_108__28, .LABEL__convert_direct_call_expression_108__34)
  test al, al
  mov [rbp-104], al
  mov [rbp-94], rbx
  jz .LABEL__convert_direct_call_expression_108__34
.LABEL__convert_direct_call_expression_108__28:
  .loc 3 1035 9
  # $68.1: @String = call(append_354, message.1, ") -> Any")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_220[rip] # ") -> Any"
  call append_354
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1036 15
  # $69.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] $69.1:rbx call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1036 9
  # call(abort_314, $69.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-85]
  call abort_314
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
.LABEL__convert_direct_call_expression_108__34:
  .loc 3 1032 17
  # $67.1: @String = call(append_354, message.1, ", ")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_354
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # jump(.LABEL__convert_direct_call_expression_108__29)
  jmp .LABEL__convert_direct_call_expression_108__29
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] 
  # [discarded value]: call_argument.1
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  # [discarded value]: named_functions_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [discarded value]: named_functions_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
.LABEL__convert_direct_call_expression_108__21:
  .loc 3 1039 5
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax 
  .loc 3 1040 9
  # $70.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rbx, [rbp-58]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rbx:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax $70.1:r15 
  .loc 3 1040 9
  # $71.1: Boolean = call(is_343, $70.1, IR_Nothing_Type)
  mov rdi, r15
  mov rsi, IR_Nothing_Type[rip]
  mov [rbp-76], rax
  call is_343
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $71.1:rax 
  .loc 3 1040 9
  # $72.1: Boolean = $71.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:rbx 
  # jump($72.1, .LABEL__convert_direct_call_expression_108__36, .LABEL__convert_direct_call_expression_108__37)
  test bl, bl
  mov [rbp-77], bl
  jz .LABEL__convert_direct_call_expression_108__37
.LABEL__convert_direct_call_expression_108__36:
  .loc 3 1041 47
  # $73.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rax, [rbp-58]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rax:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] $73.1:rbx 
  .loc 3 1041 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_76, self.1, $73.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:rax:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_108__37)
  mov [rbp-76], rax
.LABEL__convert_direct_call_expression_108__37:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] result_value.3:[rbp-76] 
  .loc 3 1043 24
  # $75.1: @IR_Call_Instruction = call(create_ir_direct_call_instruction_191, result_value.3, call_arguments.1, call_function.8)
  mov rdi, [rbp-76]
  mov rsi, [rbp-49]
  mov rdx, [rbp-58]
  call create_ir_direct_call_instruction_191
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax 
  .loc 3 1043 104
  # $76.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax $76.1:r15 
  .loc 3 1043 12
  # $77.1: @IR_Variable_Value = call(append_77, self.1, $75.1, $76.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $77.1:rax 
  .loc 3 1043 5
  # return($77.1)
  mov [rbp-85], rax
  jmp .LABEL__convert_direct_call_expression_108__end
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] 
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  # [discarded value]: named_functions_item.2
  # [discarded value]: call_function.8
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [discarded value]: named_functions_item.1
  # [discarded value]: call_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [discarded value]: $4.1
  # [discarded value]: type.1
  # [discarded value]: first_argument.1
  # [discarded value]: callee_name.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_direct_call_expression_108__end:
  mov rsp, rbp
  pop rbp
  ret

convert_direct_call_expression_108__stack_frame_size: .word 112

  .loc 3 1046 1
  .text
convert_dynamic_call_expression_109:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_dynamic_call_expression_109__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_dynamic_call_expression_109__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # call_function.1: @IR_Value = load_variable(call_function)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx 
  .loc 3 1047 51
  # $1.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 1047 23
  # call_arguments.1: @List = call(convert_call_arguments_111, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call convert_call_arguments_111
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax 
  .loc 3 1048 9
  # $3.1: Boolean = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__convert_dynamic_call_expression_109__2, .LABEL__convert_dynamic_call_expression_109__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_dynamic_call_expression_109__3
.LABEL__convert_dynamic_call_expression_109__2:
  .loc 3 1049 32
  # $4.1: @IR_Call_Argument = new IR_Call_Argument(value = first_argument.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = first_argument.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: first_argument.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] $4.1:rax 
  .loc 3 1049 9
  # call(prepend_319, call_arguments.1, $4.1)
  mov rdi, [rbp-40]
  mov rsi, rax
  call prepend_319
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # jump(.LABEL__convert_dynamic_call_expression_109__3)
.LABEL__convert_dynamic_call_expression_109__3:
  .loc 3 1051 27
  # call_function_type.1: @IR_Function_Type = load_struct_member(call_function.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:rax:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx 
  .loc 3 1052 9
  # $7.1: Boolean = call(accepts_110, call_function_type.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-40]
  mov [rbp-49], rbx
  call accepts_110
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $7.1:rax 
  .loc 3 1052 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:rbx 
  # jump($8.1, .LABEL__convert_dynamic_call_expression_109__4, .LABEL__convert_dynamic_call_expression_109__5)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_dynamic_call_expression_109__5
.LABEL__convert_dynamic_call_expression_109__4:
  .loc 3 1053 15
  # $9.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] $9.1:rbx 
  .loc 3 1053 9
  # call(abort_314, $9.1, "Unsupported arguments")
  mov rdi, rbx
  lea rsi, .LABEL__string_221[rip] # "Unsupported arguments"
  call abort_314
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
.LABEL__convert_dynamic_call_expression_109__5:
  .loc 3 1055 5
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:rax 
  .loc 3 1056 9
  # $10.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rbx, [rbp-49]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx:[rbp-49] $8.1:[rbp-50] result_value.1:rax $10.1:r15 
  .loc 3 1056 9
  # $11.1: Boolean = call(is_343, $10.1, IR_Nothing_Type)
  mov rdi, r15
  mov rsi, IR_Nothing_Type[rip]
  mov [rbp-58], rax
  call is_343
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $11.1:rax 
  .loc 3 1056 9
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:rbx 
  # jump($12.1, .LABEL__convert_dynamic_call_expression_109__6, .LABEL__convert_dynamic_call_expression_109__7)
  test bl, bl
  mov [rbp-59], bl
  jz .LABEL__convert_dynamic_call_expression_109__7
.LABEL__convert_dynamic_call_expression_109__6:
  .loc 3 1057 47
  # $13.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rax, [rbp-49]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rax:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] $13.1:rbx 
  .loc 3 1057 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_76, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:rax:[rbp-58] 
  # jump(.LABEL__convert_dynamic_call_expression_109__7)
  mov [rbp-58], rax
.LABEL__convert_dynamic_call_expression_109__7:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] 
  .loc 3 1059 89
  # $15.1: @IR_Variable_Value = call_function.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] $15.1:rax 
  .loc 3 1059 24
  # $16.1: @IR_Call_Instruction = call(create_ir_dynamic_call_instruction_193, result_value.3, call_arguments.1, $15.1)
  mov rdi, [rbp-58]
  mov rsi, [rbp-40]
  mov rdx, rax
  call create_ir_dynamic_call_instruction_193
  # [discarded value]: $15.1
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax 
  .loc 3 1059 127
  # $17.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax $17.1:r15 
  .loc 3 1059 12
  # $18.1: @IR_Variable_Value = call(append_77, self.1, $16.1, $17.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $18.1:rax 
  .loc 3 1059 5
  # return($18.1)
  mov [rbp-67], rax
  jmp .LABEL__convert_dynamic_call_expression_109__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] 
  # [discarded value]: call_function_type.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [discarded value]: call_function.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_dynamic_call_expression_109__end:
  mov rsp, rbp
  pop rbp
  ret

convert_dynamic_call_expression_109__stack_frame_size: .word 80

  .loc 3 1062 1
  .text
accepts_110:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_110__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_110__1:
  # self.1: @IR_Function_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 3 1063 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  .loc 3 1064 33
  # $2.1: @List = load_struct_member(self.1, parameters)
  mov rbx, [rdi+16]
  # [discarded value]: self.1
  # [live values]: call_arguments_item.1:rax $2.1:rbx 
  .loc 3 1064 33
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $2.1
  # [live values]: call_arguments_item.1:rax function_parameters_item.1:r15 
  # jump(.LABEL__accepts_110__2)
  mov [rbp-8], rax
  mov [rbp-16], r15
.LABEL__accepts_110__2:
  # function_parameters_item.9: @List_Item = phi(function_parameters_item.1, function_parameters_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] 
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] 
  .loc 3 1065 12
  # $4.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $4.1:rax 
  .loc 3 1065 12
  # $5.1: Boolean = $4.1
  mov [rbp-17], al
  # [discarded value]: $4.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, .LABEL__accepts_110__7, .LABEL__accepts_110__8)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_110__8
.LABEL__accepts_110__7:
  .loc 3 1065 43
  # $6.1: Boolean = function_parameters_item.9 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $6.1:rax 
  .loc 3 1065 12
  # $5.2: Boolean = $6.1
  mov [rbp-18], al
  # [discarded value]: $6.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__accepts_110__8)
  mov [rbp-17], al
.LABEL__accepts_110__8:
  .loc 3 1065 12
  # $7.1: Boolean = phi($5.1, $5.2)
  mov al, [rbp-17]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__accepts_110__5, .LABEL__accepts_110__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_110__6
.LABEL__accepts_110__5:
  .loc 3 1065 80
  # $9.1: @IR_Function_Type_Parameter = load_struct_member(function_parameters_item.9, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $9.1:rbx $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1065 79
  # $10.1: @IR_Type = load_struct_member($9.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $10.1:r15 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1065 156
  # $12.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rbx, [rbp-8]
  mov r14, [rbx+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $12.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1065 155
  # $13.1: @IR_Value = load_struct_member($12.1, value)
  mov r13, [r14+8]
  # [discarded value]: $12.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $13.1:r13 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1065 155
  # $14.1: @IR_Type = load_struct_member($13.1, type)
  mov r14, [r13+8]
  # [discarded value]: $13.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $14.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1065 79
  # $7.2: Boolean = call(accepts_74, $10.1, $14.1)
  mov rdi, r15
  mov rsi, r14
  call accepts_74
  # [discarded value]: $14.1
  # [discarded value]: $10.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:rax:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_110__6)
  mov [rbp-18], al
.LABEL__accepts_110__6:
  .loc 3 1065 12
  # $7.3: Boolean = phi($7.1, $7.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($7.3, .LABEL__accepts_110__3, .LABEL__accepts_110__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__accepts_110__4
.LABEL__accepts_110__3:
  .loc 3 1066 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1067 36
  # function_parameters_item.5: @List_Item = load_struct_member(function_parameters_item.9, next_item)
  mov rax, [rbp-16]
  mov r15, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] function_parameters_item.5:r15:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_110__2)
  mov [rbp-8], rbx
  mov [rbp-16], r15
  jmp .LABEL__accepts_110__2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:[rbp-8] function_parameters_item.5:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: function_parameters_item.5
  # [discarded value]: call_arguments_item.5
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_110__4:
  .loc 3 1069 12
  # $18.1: Boolean = call_arguments_item.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $18.1:rax $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1069 12
  # $19.1: Boolean = $18.1
  mov [rbp-19], al
  # [discarded value]: $18.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:rax $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($19.1, .LABEL__accepts_110__9, .LABEL__accepts_110__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_110__10
.LABEL__accepts_110__9:
  .loc 3 1069 43
  # $20.1: Boolean = function_parameters_item.9 == null
  cmp QWORD PTR [rbp-16], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $20.1:rax 
  .loc 3 1069 12
  # $19.2: Boolean = $20.1
  mov [rbp-20], al
  # [discarded value]: $20.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:rax:[rbp-19] 
  # jump(.LABEL__accepts_110__10)
  mov [rbp-19], al
.LABEL__accepts_110__10:
  .loc 3 1069 12
  # $19.3: Boolean = phi($19.1, $19.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] $19.3:[rbp-19] 
  .loc 3 1069 5
  # return($19.3)
  mov al, [rbp-19]
  jmp .LABEL__accepts_110__end
  # [discarded value]: $19.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [discarded value]: $19.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $19.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: call_arguments_item.2
  # [discarded value]: function_parameters_item.9
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: call_arguments_item.1
  # [live values]: 
.LABEL__accepts_110__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_110__stack_frame_size: .word 32

  .loc 3 1072 1
  .text
convert_call_arguments_111:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_arguments_111__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_arguments_111__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # ast_call_arguments.1: @List = load_variable(ast_call_arguments)
  # [live values]: self.1:rdi ast_call_arguments.1:rsi 
  .loc 3 1073 5
  # has_named_arguments.1: Boolean = false
  mov al, 0
  # [live values]: self.1:rdi ast_call_arguments.1:rsi has_named_arguments.1:rax 
  .loc 3 1074 23
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] call_arguments.1:rax 
  .loc 3 1075 32
  # ast_call_arguments_item.1: @List_Item = load_struct_member(ast_call_arguments.1, first_item)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [discarded value]: ast_call_arguments.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:rax ast_call_arguments_item.1:r15 
  # jump(.LABEL__convert_call_arguments_111__2)
  mov [rbp-25], rax
  mov [rbp-33], r15
.LABEL__convert_call_arguments_111__2:
  # has_named_arguments.4: Boolean = phi(has_named_arguments.1, has_named_arguments.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] 
  # ast_call_arguments_item.2: @List_Item = phi(ast_call_arguments_item.1, ast_call_arguments_item.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  .loc 3 1076 12
  # $3.1: Boolean = ast_call_arguments_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__convert_call_arguments_111__3, .LABEL__convert_call_arguments_111__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_call_arguments_111__4
.LABEL__convert_call_arguments_111__3:
  .loc 3 1077 26
  # call_argument.1: @AST_Call_Argument = load_struct_member(ast_call_arguments_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx 
  .loc 3 1078 56
  # $6.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx $6.1:r15 
  .loc 3 1078 32
  # call_argument_value.1: @IR_Value = call(convert_expression_103, self.1, $6.1, null)
  mov rdi, [rbp-17]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-42], rbx
  call convert_expression_103
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:rax 
  .loc 3 1079 13
  # $8.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $8.1:r15 
  .loc 3 1079 13
  # $9.1: Boolean = $8.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $9.1:r14 
  # jump($9.1, .LABEL__convert_call_arguments_111__5, .LABEL__convert_call_arguments_111__7)
  test r14b, r14b
  mov [rbp-50], rax
  mov [rbp-51], r14b
  jz .LABEL__convert_call_arguments_111__7
.LABEL__convert_call_arguments_111__5:
  .loc 3 1080 63
  # $13.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rax, [rbp-42]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $13.1:rbx 
  .loc 3 1080 63
  # $14.1: @String = load_struct_member($13.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $14.1:r15 
  .loc 3 1080 35
  # $15.1: @IR_Call_Argument = new IR_Call_Argument(name = $14.1, value = call_argument_value.1)
  mov [rbp-59], r15
  mov rdi, 16
  call malloc
  #     .name = $14.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax], rbx
  #     .value = call_argument_value.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:r15:[rbp-50] $9.1:[rbp-51] $15.1:rax 
  .loc 3 1080 13
  # call(append_318, call_arguments.1, $15.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_318
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  .loc 3 1081 13
  # has_named_arguments.3: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:rax:[rbp-1] 
  # jump(.LABEL__convert_call_arguments_111__6)
  mov [rbp-1], al
.LABEL__convert_call_arguments_111__6:
  # has_named_arguments.5: Boolean = phi(has_named_arguments.3, has_named_arguments.4)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] 
  .loc 3 1088 35
  # ast_call_arguments_item.5: @List_Item = load_struct_member(ast_call_arguments_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:rbx:[rbp-33] 
  # jump(.LABEL__convert_call_arguments_111__2)
  mov [rbp-33], rbx
  jmp .LABEL__convert_call_arguments_111__2
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.5
  # [discarded value]: has_named_arguments.5
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [discarded value]: has_named_arguments.3
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_111__7:
  # jump(has_named_arguments.4, .LABEL__convert_call_arguments_111__8, .LABEL__convert_call_arguments_111__9)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__convert_call_arguments_111__9
.LABEL__convert_call_arguments_111__8:
  .loc 3 1084 23
  # $10.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $10.1:rbx 
  .loc 3 1084 23
  # $11.1: @Source_Location = load_struct_member($10.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $11.1:r15 
  .loc 3 1084 17
  # call(abort_314, $11.1, "Positional arguments cannot be added after named ones")
  mov rdi, r15
  lea rsi, .LABEL__string_222[rip] # "Positional arguments cannot be added after named ones"
  call abort_314
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_111__9:
  .loc 3 1086 35
  # $12.1: @IR_Call_Argument = new IR_Call_Argument(value = call_argument_value.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = call_argument_value.1
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: call_argument_value.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] $12.1:rax 
  .loc 3 1086 13
  # call(append_318, call_arguments.1, $12.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_318
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # jump(.LABEL__convert_call_arguments_111__6)
  jmp .LABEL__convert_call_arguments_111__6
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] 
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__convert_call_arguments_111__4:
  .loc 3 1090 5
  # return(call_arguments.1)
  mov rax, [rbp-25]
  jmp .LABEL__convert_call_arguments_111__end
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.2
  # [discarded value]: has_named_arguments.4
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.1
  # [discarded value]: call_arguments.1
  # [discarded value]: has_named_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_arguments_111__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_arguments_111__stack_frame_size: .word 64

  .loc 3 1093 1
  .text
convert_cast_expression_112:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_cast_expression_112__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_cast_expression_112__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # cast_expression.1: @AST_Cast_Expression = load_variable(cast_expression)
  # [live values]: self.1:rdi cast_expression.1:rsi 
  .loc 3 1094 38
  # $1.1: @AST_Expression = load_struct_member(cast_expression.1, value_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi cast_expression.1:rsi $1.1:rax 
  .loc 3 1094 14
  # value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_103
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax 
  .loc 3 1095 68
  # $3.1: @AST_Type = load_struct_member(cast_expression.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:rax $3.1:r15 
  .loc 3 1095 44
  # $4.1: @IR_Type = call(convert_value_type_81, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call convert_value_type_81
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  .loc 3 1095 21
  # result_value.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax 
  .loc 3 1096 9
  # $6.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 
  .loc 3 1096 9
  # $8.1: Boolean = call(is_343, $6.1, IR_Pointer_Type)
  mov rdi, r15
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-32], rax
  call is_343
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_cast_expression_112__2, .LABEL__convert_cast_expression_112__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_cast_expression_112__3
.LABEL__convert_cast_expression_112__2:
  .loc 3 1096 43
  # $9.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  .loc 3 1096 43
  # $8.2: Boolean = call(is_343, $9.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:rax:[rbp-33] 
  # jump(.LABEL__convert_cast_expression_112__3)
  mov [rbp-33], al
.LABEL__convert_cast_expression_112__3:
  .loc 3 1096 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # jump($8.3, .LABEL__convert_cast_expression_112__4, .LABEL__convert_cast_expression_112__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_cast_expression_112__5
.LABEL__convert_cast_expression_112__4:
  .loc 3 1097 28
  # $11.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_set_instruction_220
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $11.1:rax 
  .loc 3 1097 76
  # $12.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $11.1:rax $12.1:r15 
  .loc 3 1097 16
  # $13.1: @IR_Variable_Value = call(append_77, self.1, $11.1, $12.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $13.1:rax 
  .loc 3 1097 9
  # return($13.1)
  mov [rbp-41], rax
  jmp .LABEL__convert_cast_expression_112__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
.LABEL__convert_cast_expression_112__5:
  .loc 3 1099 9
  # $14.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $14.1:rbx 
  .loc 3 1099 9
  # $16.1: Boolean = call(is_343, $14.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:rax 
  # jump($16.1, .LABEL__convert_cast_expression_112__7, .LABEL__convert_cast_expression_112__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_cast_expression_112__8
.LABEL__convert_cast_expression_112__7:
  .loc 3 1099 40
  # $17.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $17.1:rbx 
  .loc 3 1099 40
  # $19.1: Boolean = call(is_343, $17.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__convert_cast_expression_112__10, .LABEL__convert_cast_expression_112__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_cast_expression_112__9
.LABEL__convert_cast_expression_112__10:
  .loc 3 1099 40
  # $16.2: Boolean = phi($19.1, $19.2)
  mov al, [rbp-35]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:rax:[rbp-34] 
  # jump(.LABEL__convert_cast_expression_112__8)
  mov [rbp-34], al
.LABEL__convert_cast_expression_112__8:
  .loc 3 1099 9
  # $16.3: Boolean = phi($16.1, $16.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # jump($16.3, .LABEL__convert_cast_expression_112__11, .LABEL__convert_cast_expression_112__12)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_cast_expression_112__12
.LABEL__convert_cast_expression_112__11:
  .loc 3 1100 28
  # $22.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_196, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_196
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $22.1:rax 
  .loc 3 1100 77
  # $23.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $22.1:rax $23.1:r15 
  .loc 3 1100 16
  # $24.1: @IR_Variable_Value = call(append_77, self.1, $22.1, $23.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $24.1:rax 
  .loc 3 1100 9
  # return($24.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_cast_expression_112__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
.LABEL__convert_cast_expression_112__12:
  .loc 3 1102 9
  # $25.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $25.1:rbx 
  .loc 3 1102 9
  # $27.1: Boolean = call(is_343, $25.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:rax 
  # jump($27.1, .LABEL__convert_cast_expression_112__14, .LABEL__convert_cast_expression_112__15)
  test al, al
  mov [rbp-36], al
  jz .LABEL__convert_cast_expression_112__15
.LABEL__convert_cast_expression_112__14:
  .loc 3 1102 42
  # $28.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $28.1:rbx 
  .loc 3 1102 42
  # $30.1: Boolean = call(is_343, $28.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:rax 
  # jump($30.1, .LABEL__convert_cast_expression_112__17, .LABEL__convert_cast_expression_112__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__convert_cast_expression_112__16
.LABEL__convert_cast_expression_112__17:
  .loc 3 1102 42
  # $27.2: Boolean = phi($30.1, $30.2)
  mov al, [rbp-37]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:rax:[rbp-36] 
  # jump(.LABEL__convert_cast_expression_112__15)
  mov [rbp-36], al
.LABEL__convert_cast_expression_112__15:
  .loc 3 1102 9
  # $27.3: Boolean = phi($27.1, $27.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # jump($27.3, .LABEL__convert_cast_expression_112__18, .LABEL__convert_cast_expression_112__19)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_cast_expression_112__19
.LABEL__convert_cast_expression_112__18:
  .loc 3 1103 28
  # $33.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_196, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_196
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $33.1:rax 
  .loc 3 1103 77
  # $34.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $33.1:rax $34.1:r15 
  .loc 3 1103 16
  # $35.1: @IR_Variable_Value = call(append_77, self.1, $33.1, $34.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $35.1:rax 
  .loc 3 1103 9
  # return($35.1)
  mov [rbp-45], rax
  jmp .LABEL__convert_cast_expression_112__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
.LABEL__convert_cast_expression_112__19:
  .loc 3 1105 9
  # $36.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $36.1:rbx 
  .loc 3 1105 9
  # $38.1: Boolean = call(is_343, $36.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:rax 
  # jump($38.1, .LABEL__convert_cast_expression_112__21, .LABEL__convert_cast_expression_112__22)
  test al, al
  mov [rbp-38], al
  jz .LABEL__convert_cast_expression_112__22
.LABEL__convert_cast_expression_112__21:
  .loc 3 1105 41
  # $39.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $39.1:rbx 
  .loc 3 1105 41
  # $41.1: Boolean = call(is_343, $39.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:rax 
  # jump($41.1, .LABEL__convert_cast_expression_112__24, .LABEL__convert_cast_expression_112__23)
  test al, al
  mov [rbp-39], al
  jz .LABEL__convert_cast_expression_112__23
.LABEL__convert_cast_expression_112__24:
  .loc 3 1105 41
  # $38.2: Boolean = phi($41.1, $41.2)
  mov al, [rbp-39]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:rax:[rbp-38] 
  # jump(.LABEL__convert_cast_expression_112__22)
  mov [rbp-38], al
.LABEL__convert_cast_expression_112__22:
  .loc 3 1105 9
  # $38.3: Boolean = phi($38.1, $38.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # jump($38.3, .LABEL__convert_cast_expression_112__25, .LABEL__convert_cast_expression_112__26)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__convert_cast_expression_112__26
.LABEL__convert_cast_expression_112__25:
  .loc 3 1106 28
  # $44.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_196, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_196
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $44.1:rax 
  .loc 3 1106 77
  # $45.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $44.1:rax $45.1:r15 
  .loc 3 1106 16
  # $46.1: @IR_Variable_Value = call(append_77, self.1, $44.1, $45.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $46.1:rax 
  .loc 3 1106 9
  # return($46.1)
  mov [rbp-47], rax
  jmp .LABEL__convert_cast_expression_112__end
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
.LABEL__convert_cast_expression_112__26:
  .loc 3 1108 11
  # $47.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rax:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:rbx 
  .loc 3 1108 37
  # $48.1: @String = call(clone_345, "Cannot cast ")
  lea rdi, .LABEL__string_41[rip] # "Cannot cast "
  mov [rbp-47], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax 
  .loc 3 1108 66
  # $49.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $49.1:r15 
  .loc 3 1108 66
  # $50.1: @String = load_struct_member($49.1, name)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $48.1:rax $50.1:r14 
  .loc 3 1108 37
  # $51.1: @String = call(append_354, $48.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $50.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $51.1:rax 
  .loc 3 1108 37
  # $52.1: @String = call(append_354, $51.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # " to "
  call append_354
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax 
  .loc 3 1108 105
  # $53.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $53.1:r15 
  .loc 3 1108 105
  # $54.1: @String = load_struct_member($53.1, name)
  mov r14, [r15+8]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $52.1:rax $54.1:r14 
  .loc 3 1108 37
  # $55.1: @String = call(append_354, $52.1, $54.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $54.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] $47.1:[rbp-47] $55.1:rax 
  .loc 3 1108 5
  # call(abort_314, $47.1, $55.1)
  mov rdi, [rbp-47]
  mov rsi, rax
  call abort_314
  # [discarded value]: $55.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.3:[rbp-38] $38.2:[rbp-38] 
  # [discarded value]: $38.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $38.2:[rbp-38] 
  # [discarded value]: $38.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
.LABEL__convert_cast_expression_112__23:
  .loc 3 1105 78
  # $42.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $42.1:rbx 
  .loc 3 1105 78
  # $41.2: Boolean = call(is_343, $42.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_343
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:rax:[rbp-39] 
  # jump(.LABEL__convert_cast_expression_112__24)
  mov [rbp-39], al
  jmp .LABEL__convert_cast_expression_112__24
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] $41.2:[rbp-39] 
  # [discarded value]: $41.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] $41.1:[rbp-39] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.3:[rbp-36] $27.2:[rbp-36] 
  # [discarded value]: $27.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $27.2:[rbp-36] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
.LABEL__convert_cast_expression_112__16:
  .loc 3 1102 79
  # $31.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $31.1:rbx 
  .loc 3 1102 79
  # $30.2: Boolean = call(is_343, $31.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:rax:[rbp-37] 
  # jump(.LABEL__convert_cast_expression_112__17)
  mov [rbp-37], al
  jmp .LABEL__convert_cast_expression_112__17
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] $30.2:[rbp-37] 
  # [discarded value]: $30.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] $30.1:[rbp-37] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] $27.1:[rbp-36] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.3:[rbp-34] $16.2:[rbp-34] 
  # [discarded value]: $16.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $16.2:[rbp-34] 
  # [discarded value]: $16.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
.LABEL__convert_cast_expression_112__9:
  .loc 3 1099 79
  # $20.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 3 1099 79
  # $19.2: Boolean = call(is_343, $20.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_343
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:rax:[rbp-35] 
  # jump(.LABEL__convert_cast_expression_112__10)
  mov [rbp-35], al
  jmp .LABEL__convert_cast_expression_112__10
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [discarded value]: $19.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] $8.3:[rbp-33] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [discarded value]: result_value.1
  # [discarded value]: value.1
  # [discarded value]: cast_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_cast_expression_112__end:
  mov rsp, rbp
  pop rbp
  ret

convert_cast_expression_112__stack_frame_size: .word 48

  .loc 3 1111 1
  .text
convert_divide_expression_113:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_divide_expression_113__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_divide_expression_113__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1112 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1112 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1112 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1113 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1113 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1113 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1114 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_divide_expression_113__2, .LABEL__convert_divide_expression_113__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_divide_expression_113__3
.LABEL__convert_divide_expression_113__2:
  .loc 3 1114 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_divide_expression_113__3)
  mov [rbp-41], al
.LABEL__convert_divide_expression_113__3:
  .loc 3 1114 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_divide_expression_113__4, .LABEL__convert_divide_expression_113__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_divide_expression_113__5
.LABEL__convert_divide_expression_113__4:
  .loc 3 1115 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1115 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_divide_expression_113__5:
  .loc 3 1117 88
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1117 65
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1117 24
  # $14.1: @IR_Divide_Instruction = new IR_Divide_Instruction(object_type = IR_Divide_Instruction, result_value = $12.1, dump = dump_ir_divide_instruction_235.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Divide_Instruction
  mov rbx, IR_Divide_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_divide_instruction_235.address
  lea r14, dump_ir_divide_instruction_235[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1117 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1117 137
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1117 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1117 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_divide_expression_113__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_divide_expression_113__end:
  mov rsp, rbp
  pop rbp
  ret

convert_divide_expression_113__stack_frame_size: .word 64

  .loc 3 1120 1
  .text
convert_equals_expression_114:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_equals_expression_114__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_equals_expression_114__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1121 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1121 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_103
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1122 44
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1122 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_103
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1123 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1123 32
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1123 9
  # $7.1: Boolean = call(equals_144, $5.1, $6.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_144
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  .loc 3 1123 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rbx 
  .loc 3 1123 9
  # $9.1: Boolean = $8.1
  mov [rbp-33], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, .LABEL__convert_equals_expression_114__2, .LABEL__convert_equals_expression_114__3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_equals_expression_114__3
.LABEL__convert_equals_expression_114__2:
  .loc 3 1123 63
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  .loc 3 1123 63
  # $12.1: Boolean = call(is_343, $10.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_equals_expression_114__4, .LABEL__convert_equals_expression_114__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_equals_expression_114__5
.LABEL__convert_equals_expression_114__4:
  .loc 3 1123 102
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  .loc 3 1123 102
  # $14.1: Boolean = call(is_343, $13.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1123 102
  # $15.1: Boolean = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $15.1:rbx 
  .loc 3 1123 63
  # $12.2: Boolean = $15.1
  mov [rbp-35], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_equals_expression_114__5)
  mov [rbp-34], bl
.LABEL__convert_equals_expression_114__5:
  .loc 3 1123 63
  # $9.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(.LABEL__convert_equals_expression_114__3)
  mov [rbp-33], al
.LABEL__convert_equals_expression_114__3:
  .loc 3 1123 9
  # $9.3: Boolean = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, .LABEL__convert_equals_expression_114__6, .LABEL__convert_equals_expression_114__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_equals_expression_114__7
.LABEL__convert_equals_expression_114__6:
  .loc 3 1124 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  .loc 3 1124 9
  # call(abort_314, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_223[rip] # "Operands are not the same type"
  call abort_314
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_equals_expression_114__7:
  .loc 3 1126 9
  # $18.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_equals_expression_114__8, .LABEL__convert_equals_expression_114__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_equals_expression_114__9
.LABEL__convert_equals_expression_114__8:
  .loc 3 1126 45
  # $18.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_equals_expression_114__9)
  mov [rbp-35], al
.LABEL__convert_equals_expression_114__9:
  .loc 3 1126 9
  # $18.3: Boolean = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_equals_expression_114__10, .LABEL__convert_equals_expression_114__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_equals_expression_114__11
.LABEL__convert_equals_expression_114__10:
  .loc 3 1127 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1127 9
  # call(abort_314, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_equals_expression_114__11:
  .loc 3 1129 99
  # $21.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1129 76
  # $22.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 471 38
  # $23.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-43], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  .loc 3 1129 24
  # $24.1: @IR_Equals_Comparison_Instruction = new IR_Equals_Comparison_Instruction(object_type = IR_Equals_Comparison_Instruction, result_value = $22.1, dump = dump_ir_equal_comparison_instruction_236.address, location = null, operand_values = $23.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-51], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Equals_Comparison_Instruction
  mov rbx, IR_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $22.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $23.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_equal_comparison_instruction_236.address
  lea r14, dump_ir_equal_comparison_instruction_236[rip]
  mov [rax+57], r14
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $24.1:rax 
  .loc 3 1129 24
  # $25.1: @IR_Binary_Instruction = call(init_231, $24.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_231
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1129 163
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax $26.1:r15 
  .loc 3 1129 12
  # $27.1: @IR_Variable_Value = call(append_77, self.1, $25.1, $26.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $27.1:rax 
  .loc 3 1129 5
  # return($27.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_equals_expression_114__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: $9.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_equals_expression_114__end:
  mov rsp, rbp
  pop rbp
  ret

convert_equals_expression_114__stack_frame_size: .word 64

  .loc 3 1132 1
  .text
convert_greater_than_expression_115:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_expression_115__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_expression_115__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1133 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1133 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1133 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1134 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1134 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1134 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1135 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_greater_than_expression_115__2, .LABEL__convert_greater_than_expression_115__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_expression_115__3
.LABEL__convert_greater_than_expression_115__2:
  .loc 3 1135 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_greater_than_expression_115__3)
  mov [rbp-41], al
.LABEL__convert_greater_than_expression_115__3:
  .loc 3 1135 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_greater_than_expression_115__4, .LABEL__convert_greater_than_expression_115__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_expression_115__5
.LABEL__convert_greater_than_expression_115__4:
  .loc 3 1136 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1136 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_greater_than_expression_115__5:
  .loc 3 1138 100
  # $11.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1138 77
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1138 24
  # $14.1: @IR_Greater_Comparison_Instruction = new IR_Greater_Comparison_Instruction(object_type = IR_Greater_Comparison_Instruction, result_value = $12.1, dump = dump_ir_greater_comparison_instruction_237.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Greater_Comparison_Instruction
  mov rbx, IR_Greater_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_greater_comparison_instruction_237.address
  lea r14, dump_ir_greater_comparison_instruction_237[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1138 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1138 164
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1138 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1138 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_greater_than_expression_115__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_expression_115__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_expression_115__stack_frame_size: .word 64

  .loc 3 1141 1
  .text
convert_greater_than_or_equals_expression_116:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_or_equals_expression_116__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_or_equals_expression_116__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1142 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1142 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1142 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1143 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1143 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1143 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1144 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_greater_than_or_equals_expression_116__2, .LABEL__convert_greater_than_or_equals_expression_116__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_greater_than_or_equals_expression_116__3
.LABEL__convert_greater_than_or_equals_expression_116__2:
  .loc 3 1144 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_greater_than_or_equals_expression_116__3)
  mov [rbp-41], al
.LABEL__convert_greater_than_or_equals_expression_116__3:
  .loc 3 1144 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_greater_than_or_equals_expression_116__4, .LABEL__convert_greater_than_or_equals_expression_116__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_greater_than_or_equals_expression_116__5
.LABEL__convert_greater_than_or_equals_expression_116__4:
  .loc 3 1145 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1145 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_greater_than_or_equals_expression_116__5:
  .loc 3 1147 109
  # $11.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1147 86
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1147 24
  # $14.1: @IR_Greater_Or_Equal_Comparison_Instruction = new IR_Greater_Or_Equal_Comparison_Instruction(object_type = IR_Greater_Or_Equal_Comparison_Instruction, result_value = $12.1, dump = dump_ir_greater_or_equal_comparison_instruction_238.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Greater_Or_Equal_Comparison_Instruction
  mov rbx, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_greater_or_equal_comparison_instruction_238.address
  lea r14, dump_ir_greater_or_equal_comparison_instruction_238[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1147 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1147 173
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1147 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1147 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_greater_than_or_equals_expression_116__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_or_equals_expression_116__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_or_equals_expression_116__stack_frame_size: .word 64

  .loc 3 1150 1
  .text
convert_less_than_expression_117:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_expression_117__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_expression_117__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1151 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1151 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1151 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1152 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1152 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1152 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1153 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_less_than_expression_117__2, .LABEL__convert_less_than_expression_117__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_expression_117__3
.LABEL__convert_less_than_expression_117__2:
  .loc 3 1153 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_less_than_expression_117__3)
  mov [rbp-41], al
.LABEL__convert_less_than_expression_117__3:
  .loc 3 1153 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_less_than_expression_117__4, .LABEL__convert_less_than_expression_117__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_expression_117__5
.LABEL__convert_less_than_expression_117__4:
  .loc 3 1154 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1154 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_less_than_expression_117__5:
  .loc 3 1156 97
  # $11.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1156 74
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1156 24
  # $14.1: @IR_Less_Comparison_Instruction = new IR_Less_Comparison_Instruction(object_type = IR_Less_Comparison_Instruction, result_value = $12.1, dump = dump_ir_less_comparison_instruction_239.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Less_Comparison_Instruction
  mov rbx, IR_Less_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_less_comparison_instruction_239.address
  lea r14, dump_ir_less_comparison_instruction_239[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1156 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1156 161
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1156 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1156 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_less_than_expression_117__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_expression_117__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_expression_117__stack_frame_size: .word 64

  .loc 3 1159 1
  .text
convert_less_than_or_equals_expression_118:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_or_equals_expression_118__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_or_equals_expression_118__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1160 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1160 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1160 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1161 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1161 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1161 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1162 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_less_than_or_equals_expression_118__2, .LABEL__convert_less_than_or_equals_expression_118__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_less_than_or_equals_expression_118__3
.LABEL__convert_less_than_or_equals_expression_118__2:
  .loc 3 1162 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_less_than_or_equals_expression_118__3)
  mov [rbp-41], al
.LABEL__convert_less_than_or_equals_expression_118__3:
  .loc 3 1162 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_less_than_or_equals_expression_118__4, .LABEL__convert_less_than_or_equals_expression_118__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_less_than_or_equals_expression_118__5
.LABEL__convert_less_than_or_equals_expression_118__4:
  .loc 3 1163 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1163 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_less_than_or_equals_expression_118__5:
  .loc 3 1165 106
  # $11.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rax 
  .loc 3 1165 83
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1165 24
  # $14.1: @IR_Less_Or_Equal_Comparison_Instruction = new IR_Less_Or_Equal_Comparison_Instruction(object_type = IR_Less_Or_Equal_Comparison_Instruction, result_value = $12.1, dump = dump_ir_less_or_equal_comparison_instruction_240.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Less_Or_Equal_Comparison_Instruction
  mov rbx, IR_Less_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_less_or_equal_comparison_instruction_240.address
  lea r14, dump_ir_less_or_equal_comparison_instruction_240[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1165 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1165 170
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1165 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1165 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_less_than_or_equals_expression_118__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_or_equals_expression_118__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_or_equals_expression_118__stack_frame_size: .word 64

  .loc 3 1168 1
  .text
convert_literal_expression_119:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_literal_expression_119__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_literal_expression_119__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1169 9
  # $1.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1169 9
  # $2.1: Boolean = call(is_343, $1.1, Boolean_Token)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, Boolean_Token[rip]
  call is_343
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_literal_expression_119__2, .LABEL__convert_literal_expression_119__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_literal_expression_119__3
.LABEL__convert_literal_expression_119__2:
  .loc 3 1170 45
  # $3.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 3 1170 87
  # $4.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $4.1:r15 
  .loc 5 159 32
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rax
  mov [rbp-33], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  .loc 5 160 20
  # $6.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-41], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $3.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 1170 16
  # $7.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $3.1, literal = $4.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $5.1, links = $6.1)
  mov [rbp-49], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $3.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $5.1
  mov r15, [rbp-41]
  mov QWORD PTR [rax+24], r15
  #     .links = $6.1
  mov r14, [rbp-49]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $4.1
  mov r13, [rbp-33]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 3 1170 9
  # return($7.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_literal_expression_119__3:
  .loc 3 1172 9
  # $8.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $8.1:rbx 
  .loc 3 1172 9
  # $9.1: Boolean = call(is_343, $8.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_343
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:rax 
  # jump($9.1, .LABEL__convert_literal_expression_119__5, .LABEL__convert_literal_expression_119__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_literal_expression_119__6
.LABEL__convert_literal_expression_119__5:
  .loc 3 1173 45
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "Int8")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_179[rip] # "Int8"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:rax 
  .loc 3 1173 84
  # $11.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:rax $11.1:r15 
  .loc 5 159 32
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-26], rax
  mov [rbp-34], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-34] $12.1:rax 
  .loc 5 160 20
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $10.1:[rbp-26] $11.1:[rbp-34] $12.1:[rbp-42] $13.1:rax 
  .loc 3 1173 16
  # $14.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $10.1, literal = $11.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $12.1, links = $13.1)
  mov [rbp-50], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $10.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $12.1
  mov r15, [rbp-42]
  mov QWORD PTR [rax+24], r15
  #     .links = $13.1
  mov r14, [rbp-50]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $11.1
  mov r13, [rbp-34]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $14.1:rax 
  .loc 3 1173 9
  # return($14.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__convert_literal_expression_119__6:
  .loc 3 1175 9
  # $15.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $15.1:rbx 
  .loc 3 1175 9
  # $16.1: Boolean = call(is_343, $15.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_343
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:rax 
  # jump($16.1, .LABEL__convert_literal_expression_119__8, .LABEL__convert_literal_expression_119__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_literal_expression_119__9
.LABEL__convert_literal_expression_119__8:
  .loc 3 1176 45
  # $17.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_178[rip] # "Int"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:rax 
  .loc 3 1176 83
  # $18.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:rax $18.1:r15 
  .loc 5 159 32
  # $19.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-27], rax
  mov [rbp-35], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-35] $19.1:rax 
  .loc 5 160 20
  # $20.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-43], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:[rbp-35] $19.1:[rbp-43] $20.1:rax 
  .loc 3 1176 16
  # $21.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $17.1, literal = $18.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $19.1, links = $20.1)
  mov [rbp-51], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $17.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $19.1
  mov r15, [rbp-43]
  mov QWORD PTR [rax+24], r15
  #     .links = $20.1
  mov r14, [rbp-51]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $18.1
  mov r13, [rbp-35]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $21.1:rax 
  .loc 3 1176 9
  # return($21.1)
  mov [rbp-27], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] 
.LABEL__convert_literal_expression_119__9:
  .loc 3 1178 9
  # $22.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $22.1:rbx 
  .loc 3 1178 9
  # $23.1: Boolean = call(is_343, $22.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_343
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:rax 
  # jump($23.1, .LABEL__convert_literal_expression_119__11, .LABEL__convert_literal_expression_119__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_literal_expression_119__12
.LABEL__convert_literal_expression_119__11:
  .loc 3 1179 45
  # $24.1: @IR_Type = call(get_named_type_66, self.1, "Null")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_184[rip] # "Null"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:rax 
  .loc 3 1179 84
  # $25.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:rax $25.1:r15 
  .loc 5 159 32
  # $26.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-28], rax
  mov [rbp-36], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-36] $26.1:rax 
  .loc 5 160 20
  # $27.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-44], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-28] $25.1:[rbp-36] $26.1:[rbp-44] $27.1:rax 
  .loc 3 1179 16
  # $28.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $24.1, literal = $25.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $26.1, links = $27.1)
  mov [rbp-52], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $24.1
  mov rbx, [rbp-28]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $26.1
  mov r15, [rbp-44]
  mov QWORD PTR [rax+24], r15
  #     .links = $27.1
  mov r14, [rbp-52]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $25.1
  mov r13, [rbp-36]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $28.1:rax 
  .loc 3 1179 9
  # return($28.1)
  mov [rbp-28], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] 
.LABEL__convert_literal_expression_119__12:
  .loc 3 1181 9
  # $29.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $29.1:rbx 
  .loc 3 1181 9
  # $30.1: Boolean = call(is_343, $29.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_343
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:rax 
  # jump($30.1, .LABEL__convert_literal_expression_119__14, .LABEL__convert_literal_expression_119__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__convert_literal_expression_119__15
.LABEL__convert_literal_expression_119__14:
  .loc 3 1182 68
  # $31.1: @IR_Type = call(get_named_type_66, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_224[rip] # "String"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $31.1:rax 
  .loc 3 1182 45
  # $32.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $31.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:rax 
  .loc 3 1182 110
  # $33.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:rax $33.1:r15 
  .loc 5 159 32
  # $34.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-29], rax
  mov [rbp-37], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-37] $34.1:rax 
  .loc 5 160 20
  # $35.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-45], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $32.1:[rbp-29] $33.1:[rbp-37] $34.1:[rbp-45] $35.1:rax 
  .loc 3 1182 16
  # $36.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $32.1, literal = $33.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $34.1, links = $35.1)
  mov [rbp-53], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $32.1
  mov rbx, [rbp-29]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $34.1
  mov r15, [rbp-45]
  mov QWORD PTR [rax+24], r15
  #     .links = $35.1
  mov r14, [rbp-53]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $33.1
  mov r13, [rbp-37]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $36.1:rax 
  .loc 3 1182 9
  # return($36.1)
  mov [rbp-29], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] 
.LABEL__convert_literal_expression_119__15:
  .loc 3 1184 9
  # $37.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $37.1:rbx 
  .loc 3 1184 9
  # $38.1: Boolean = call(is_343, $37.1, Undefined_Token)
  mov rdi, rbx
  mov rsi, Undefined_Token[rip]
  call is_343
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:rax 
  # jump($38.1, .LABEL__convert_literal_expression_119__17, .LABEL__convert_literal_expression_119__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__convert_literal_expression_119__18
.LABEL__convert_literal_expression_119__17:
  .loc 3 1185 46
  # $39.1: @IR_Type = call(get_named_type_66, self.1, "Undefined")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_185[rip] # "Undefined"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:rax 
  .loc 5 159 32
  # $40.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-30], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:rax 
  .loc 5 160 20
  # $41.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-38], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $39.1:[rbp-30] $40.1:[rbp-38] $41.1:rax 
  .loc 3 1185 16
  # $42.1: @IR_Undefined_Value = new IR_Undefined_Value(object_type = IR_Undefined_Value, type = $39.1, dump = dump_ir_undefined_value_155.address, creator_instruction = null, user_instructions = $40.1, links = $41.1)
  mov [rbp-46], rax
  mov rdi, 48
  call malloc
  #     .object_type = IR_Undefined_Value
  mov rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  #     .type = $39.1
  mov rbx, [rbp-30]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $40.1
  mov r15, [rbp-38]
  mov QWORD PTR [rax+24], r15
  #     .links = $41.1
  mov r14, [rbp-46]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_undefined_value_155.address
  lea r13, dump_ir_undefined_value_155[rip]
  mov [rax+40], r13
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $42.1:rax 
  .loc 3 1185 9
  # return($42.1)
  mov [rbp-30], rax
  jmp .LABEL__convert_literal_expression_119__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] 
.LABEL__convert_literal_expression_119__18:
  .loc 3 1187 11
  # $43.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $43.1:rbx 
  .loc 3 1187 32
  # $44.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $43.1:rbx $44.1:r15 
  .loc 3 1187 32
  # $45.1: @Object_Type = load_struct_member($44.1, object_type)
  mov r14, [r15]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] $43.1:rbx $45.1:r14 
  .loc 3 1187 5
  # call(abort_141, $43.1, $45.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $45.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] $38.1:[rbp-22] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] $30.1:[rbp-21] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] $23.1:[rbp-20] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] $16.1:[rbp-19] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_literal_expression_119__end:
  mov rsp, rbp
  pop rbp
  ret

convert_literal_expression_119__stack_frame_size: .word 64

  .loc 3 1190 1
  .text
convert_logic_and_expression_120:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_and_expression_120__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_and_expression_120__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1191 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1191 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1191 19
  # next_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1192 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1192 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1192 18
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1193 43
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1193 71
  # $8.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1193 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1194 50
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1194 24
  # result_variable.1: @IR_Variable = call(create_temp_variable_75, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_75
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1195 26
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1196 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_220
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1196 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1196 5
  # $15.1: @IR_Variable_Value = call(append_77, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1197 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1197 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $16.1, result_value_left.1, next_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call append_jump_170
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1198 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1199 44
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1199 73
  # $19.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1199 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1200 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1200 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_220
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1200 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1200 5
  # $24.1: @IR_Variable_Value = call(append_77, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1201 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1201 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_169
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1202 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1203 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_70
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1203 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1203 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1203 12
  # $30.1: @IR_Variable_Value = call(append_77, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1203 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_and_expression_120__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_and_expression_120__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_and_expression_120__stack_frame_size: .word 64

  .loc 3 1206 1
  .text
convert_logic_or_expression_121:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_or_expression_121__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_or_expression_121__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1207 19
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1207 19
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1207 19
  # next_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1208 18
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1208 18
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1208 18
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1209 43
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1209 71
  # $8.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1209 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1210 50
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-40], rax
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1210 24
  # result_variable.1: @IR_Variable = call(create_temp_variable_75, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_75
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1211 26
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1212 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_220
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1212 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1212 5
  # $15.1: @IR_Variable_Value = call(append_77, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1213 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1213 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $16.1, result_value_left.1, end_block.1, next_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  mov rcx, [rbp-24]
  call append_jump_170
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1214 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1215 44
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1215 73
  # $19.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, rax
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  mov [rbp-56], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1215 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1216 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_70
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1216 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_220
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1216 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1216 5
  # $24.1: @IR_Variable_Value = call(append_77, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1217 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1217 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_169
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1218 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1219 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_70, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_70
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1219 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1219 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1219 12
  # $30.1: @IR_Variable_Value = call(append_77, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1219 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_or_expression_121__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_or_expression_121__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_or_expression_121__stack_frame_size: .word 64

  .loc 3 1222 1
  .text
convert_member_access_expression_122:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_122__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_122__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1223 45
  # $1.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi member_access_expression.1:rsi $1.1:rax 
  .loc 3 1223 21
  # object_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_103
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax 
  .loc 3 1224 26
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx 
  .loc 3 1226 9
  # $4.1: Boolean = call(is_343, object_value_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__convert_member_access_expression_122__2, .LABEL__convert_member_access_expression_122__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_member_access_expression_122__4
.LABEL__convert_member_access_expression_122__2:
  .loc 3 1227 13
  # $19.1: Boolean = call(is_343, object_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:rax 
  # jump($19.1, .LABEL__convert_member_access_expression_122__10, .LABEL__convert_member_access_expression_122__12)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_member_access_expression_122__12
.LABEL__convert_member_access_expression_122__10:
  .loc 3 1228 27
  # struct_type.4: @IR_Struct_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:rax 
  .loc 3 1231 44
  # $34.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, struct_type.4)
  mov rdi, rax
  mov [rbp-42], rax
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $34.1:rax 
  .loc 3 1231 21
  # $35.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $34.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $35.1:rax 
  .loc 3 1232 21
  # $36.1: @IR_Variable_Value = object_value.1
  mov rbx, [rbp-24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $35.1:rax $36.1:rbx 
  .loc 3 1230 17
  # $37.1: @IR_Load_Variable_Address_Instruction = call(create_ir_load_variable_address_instruction_209, $35.1, $36.1)
  mov rdi, rax
  mov rsi, rbx
  call create_ir_load_variable_address_instruction_209
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $37.1:rax 
  .loc 3 1234 17
  # $38.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $37.1:rax $38.1:r15 
  .loc 3 1229 28
  # object_value.8: @IR_Value = call(append_77, self.1, $37.1, $38.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:rax:[rbp-24] 
  # jump(.LABEL__convert_member_access_expression_122__3)
  mov [rbp-24], rax
.LABEL__convert_member_access_expression_122__3:
  # object_value.11: @IR_Value = phi(object_value.1, object_value.8, object_value.6)
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # struct_type.5: @IR_Struct_Type = phi(struct_type.2, struct_type.4, struct_type.3)
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1254 50
  # $40.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] $40.1:rbx struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1254 50
  # $41.1: @String = load_struct_member($40.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] $41.1:r15 struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1254 27
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.5, $41.1)
  mov rdi, [rbp-42]
  mov rsi, r15
  call get_member_150
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1255 9
  # $43.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax $43.1:rbx struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # jump($43.1, .LABEL__convert_member_access_expression_122__16, .LABEL__convert_member_access_expression_122__17)
  test bl, bl
  mov [rbp-50], rax
  mov [rbp-51], bl
  jz .LABEL__convert_member_access_expression_122__17
.LABEL__convert_member_access_expression_122__16:
  .loc 3 1256 9
  # call(dump_struct_members_123, struct_type.5)
  mov rdi, [rbp-42]
  call dump_struct_members_123
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1257 15
  # $44.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $44.1:rbx 
  .loc 3 1257 15
  # $45.1: @Source_Location = load_struct_member($44.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:r15 
  .loc 3 1257 68
  # $46.1: @String = load_struct_member(struct_type.5, name)
  mov rbx, [rbp-42]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:rbx:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:r15 $46.1:r14 
  .loc 3 1257 62
  # $47.1: @String = call(clone_345, $46.1)
  mov rdi, r14
  mov [rbp-59], r15
  call clone_345
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $47.1:rax 
  .loc 3 1257 62
  # $48.1: @String = call(append_354, $47.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_225[rip] # " has no such member: "
  call append_354
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax 
  .loc 3 1257 125
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax $49.1:r15 
  .loc 3 1257 125
  # $50.1: @String = load_struct_member($49.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax $50.1:r14 
  .loc 3 1257 62
  # $51.1: @String = call(append_354, $48.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $50.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $51.1:rax 
  .loc 3 1257 9
  # call(abort_314, $45.1, $51.1)
  mov rdi, [rbp-59]
  mov rsi, rax
  call abort_314
  # [discarded value]: $51.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
.LABEL__convert_member_access_expression_122__17:
  .loc 3 1259 9
  # $52.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $52.1:rbx 
  .loc 3 1259 9
  # $53.1: Boolean = call(is_343, $52.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:rax 
  # jump($53.1, .LABEL__convert_member_access_expression_122__18, .LABEL__convert_member_access_expression_122__19)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_member_access_expression_122__19
.LABEL__convert_member_access_expression_122__18:
  .loc 3 1260 115
  # $54.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $54.1:rbx 
  .loc 3 1260 92
  # $55.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $54.1)
  mov rdi, rbx
  call create_ir_pointer_type_145
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $55.1:rax 
  .loc 3 1260 69
  # $56.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $55.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $56.1:rax 
  .loc 3 1260 28
  # $57.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $56.1, object_value.11, struct_type_member.1, true)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-50]
  mov cl, 1
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $57.1:rax 
  .loc 3 1260 183
  # $58.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $57.1:rax $58.1:r15 
  .loc 3 1260 16
  # $59.1: @IR_Variable_Value = call(append_77, self.1, $57.1, $58.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $59.1:rax 
  .loc 3 1260 9
  # return($59.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_member_access_expression_122__end
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] 
.LABEL__convert_member_access_expression_122__19:
  .loc 3 1262 88
  # $60.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $60.1:rbx 
  .loc 3 1262 65
  # $61.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $60.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $61.1:rax 
  .loc 3 1262 24
  # $62.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $61.1, object_value.11, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-50]
  mov cl, 0
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $62.1:rax 
  .loc 3 1262 156
  # $63.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $62.1:rax $63.1:r15 
  .loc 3 1262 12
  # $64.1: @IR_Variable_Value = call(append_77, self.1, $62.1, $63.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $64.1:rax 
  .loc 3 1262 5
  # return($64.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_member_access_expression_122__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.5
  # [discarded value]: object_value.11
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: object_value.8
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] 
.LABEL__convert_member_access_expression_122__12:
  .loc 3 1236 20
  # $20.1: Boolean = call(is_343, object_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:rax 
  # jump($20.1, .LABEL__convert_member_access_expression_122__13, .LABEL__convert_member_access_expression_122__15)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_member_access_expression_122__15
.LABEL__convert_member_access_expression_122__13:
  .loc 3 1237 27
  # struct_type.3: @IR_Struct_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:rax:[rbp-42] 
  .loc 3 1239 24
  # $27.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, struct_type.3)
  mov rdi, rax
  mov [rbp-42], rax
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax 
  .loc 3 1240 29
  # $28.1: @IR_Global_Variable_Value = object_value.1
  mov rbx, [rbp-24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax $28.1:rbx 
  .loc 3 1240 28
  # $29.1: @IR_Variable = load_struct_member($28.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax $29.1:r15 
  .loc 5 159 32
  # $30.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-51], rax
  mov [rbp-59], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:[rbp-51] $29.1:[rbp-59] $30.1:rax 
  .loc 5 160 20
  # $31.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-67], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:[rbp-51] $29.1:[rbp-59] $30.1:[rbp-67] $31.1:rax 
  .loc 3 1238 28
  # object_value.6: @IR_Value = new IR_Global_Variable_Address_Value(object_type = IR_Global_Variable_Address_Value, type = $27.1, variable = $29.1, dump = dump_ir_global_variable_address_value_161.address, creator_instruction = null, user_instructions = $30.1, links = $31.1)
  mov [rbp-75], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Address_Value
  mov rbx, IR_Global_Variable_Address_Value[rip]
  mov [rax], rbx
  #     .type = $27.1
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $30.1
  mov r15, [rbp-67]
  mov QWORD PTR [rax+24], r15
  #     .links = $31.1
  mov r14, [rbp-75]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_global_variable_address_value_161.address
  lea r13, dump_ir_global_variable_address_value_161[rip]
  mov [rax+40], r13
  #     .variable = $29.1
  mov r13, [rbp-59]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] object_value.6:rax:[rbp-24] 
  # jump(.LABEL__convert_member_access_expression_122__3)
  mov [rbp-24], rax
  jmp .LABEL__convert_member_access_expression_122__3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] object_value.6:[rbp-24] 
  # [discarded value]: object_value.6
  # [discarded value]: struct_type.3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] 
.LABEL__convert_member_access_expression_122__15:
  .loc 3 1243 19
  # $21.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:rbx 
  .loc 3 1243 54
  # $22.1: @String = call(clone_345, "Unuspported value type: ")
  lea rdi, .LABEL__string_226[rip] # "Unuspported value type: "
  mov [rbp-51], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax 
  .loc 3 1243 95
  # $23.1: @Object_Type = load_struct_member(object_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rbx:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax $23.1:r15 
  .loc 3 1243 95
  # $24.1: @String = load_struct_member_address($23.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rbx:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax $23.1:r15 $24.1:r14 
  .loc 3 1243 54
  # $25.1: @String = call(append_354, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $25.1:rax 
  .loc 3 1243 13
  # call(abort_314, $21.1, $25.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_314
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_member_access_expression_122__4:
  .loc 3 1245 16
  # $5.1: Boolean = call(is_343, object_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:rax 
  # jump($5.1, .LABEL__convert_member_access_expression_122__5, .LABEL__convert_member_access_expression_122__7)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_member_access_expression_122__7
.LABEL__convert_member_access_expression_122__5:
  .loc 3 1246 26
  # $10.1: @IR_Pointer_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $10.1:rax 
  .loc 3 1246 25
  # pointed_type.1: @IR_Type = load_struct_member($10.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:rbx 
  .loc 3 1247 13
  # $12.1: Boolean = call(is_343, pointed_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-51], rbx
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $12.1:rax 
  .loc 3 1247 13
  # $13.1: Boolean = $12.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:rbx 
  # jump($13.1, .LABEL__convert_member_access_expression_122__8, .LABEL__convert_member_access_expression_122__9)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__convert_member_access_expression_122__9
.LABEL__convert_member_access_expression_122__8:
  .loc 3 1248 19
  # $14.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:rbx 
  .loc 3 1248 54
  # $15.1: @String = call(clone_345, "Not a IR_Struct_Type pointer value: ")
  lea rdi, .LABEL__string_227[rip] # "Not a IR_Struct_Type pointer value: "
  mov [rbp-60], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $15.1:rax 
  .loc 3 1248 107
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $15.1:rax $16.1:r15 
  .loc 3 1248 54
  # $17.1: @String = call(append_354, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $17.1:rax 
  .loc 3 1248 13
  # call(abort_314, $14.1, $17.1)
  mov rdi, [rbp-60]
  mov rsi, rax
  call abort_314
  # [discarded value]: $17.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] 
.LABEL__convert_member_access_expression_122__9:
  .loc 3 1250 23
  # struct_type.2: @IR_Struct_Type = pointed_type.1
  mov rax, [rbp-51]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] struct_type.2:rax:[rbp-42] 
  # jump(.LABEL__convert_member_access_expression_122__3)
  mov [rbp-42], rax
  jmp .LABEL__convert_member_access_expression_122__3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] struct_type.2:[rbp-42] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] 
  # [discarded value]: pointed_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] 
.LABEL__convert_member_access_expression_122__7:
  .loc 3 1252 15
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:rbx 
  .loc 3 1252 50
  # $7.1: @String = call(clone_345, "Not an IR_Pointer_Type value: ")
  lea rdi, .LABEL__string_213[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-51], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $7.1:rax 
  .loc 3 1252 97
  # $8.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $7.1:rax $8.1:r15 
  .loc 3 1252 50
  # $9.1: @String = call(append_354, $7.1, $8.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $9.1:rax 
  .loc 3 1252 9
  # call(abort_314, $6.1, $9.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_314
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_122__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_122__stack_frame_size: .word 80

  .loc 3 1265 1
  .text
dump_struct_members_123:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_struct_members_123__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_struct_members_123__1:
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: struct_type.1:rdi 
  .loc 3 1266 5
  # $1.1: @FILE = call(end_line_340, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] 
  # jump(.LABEL__dump_struct_members_123__2)
.LABEL__dump_struct_members_123__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.6)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 3 1267 12
  # $2.1: Boolean = struct_type.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__dump_struct_members_123__3, .LABEL__dump_struct_members_123__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__dump_struct_members_123__4
.LABEL__dump_struct_members_123__3:
  .loc 3 1268 37
  # $3.1: @AST_Struct_Statement = load_struct_member(struct_type.2, statement)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 3 1268 37
  # $4.1: @List = load_struct_member($3.1, members)
  mov r15, [rbx+32]
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  .loc 3 1268 37
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:rbx 
  # jump(.LABEL__dump_struct_members_123__5)
  mov [rbp-17], rbx
.LABEL__dump_struct_members_123__5:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  .loc 3 1269 16
  # $6.1: Boolean = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:rax 
  # jump($6.1, .LABEL__dump_struct_members_123__6, .LABEL__dump_struct_members_123__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__dump_struct_members_123__7
.LABEL__dump_struct_members_123__6:
  .loc 3 1270 35
  # struct_type_member.1: @AST_Struct_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx 
  .loc 3 1271 40
  # $9.1: @Identifier_Token = load_struct_member(struct_type_member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx $9.1:r15 
  .loc 3 1271 40
  # struct_type_member_name.1: @String = load_struct_member($9.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx struct_type_member_name.1:r14 
  .loc 3 1272 40
  # $11.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.2, struct_type_member_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-26], rbx
  mov [rbp-34], r14
  call get_member_150
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] $11.1:rax 
  .loc 3 1272 40
  # struct_type_member_type.1: @IR_Type = load_struct_member($11.1, type)
  mov rbx, [rax+16]
  # [discarded value]: $11.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx 
  .loc 3 1273 26
  # $13.1: @Source_Location = load_struct_member(struct_type_member.1, location)
  mov rax, [rbp-26]
  mov r15, [rax]
  # [discarded value]: struct_type_member.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx $13.1:r15 
  .loc 3 1273 13
  # $14.1: @FILE = call(write_317, stderr, $13.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  mov [rbp-42], rbx
  call write_317
  # [discarded value]: $13.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $14.1:rax 
  .loc 3 1273 13
  # $15.1: @FILE = call(write_337, $14.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $14.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax 
  .loc 3 1273 73
  # $16.1: @String = load_struct_member(struct_type.2, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rbx:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax $16.1:r15 
  .loc 3 1273 13
  # $17.1: @FILE = call(write_337, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $17.1:rax 
  .loc 3 1273 13
  # $18.1: @FILE = call(write_339, $17.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $17.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $18.1:rax 
  .loc 3 1273 13
  # $19.1: @FILE = call(write_337, $18.1, struct_type_member_name.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_337
  # [discarded value]: $18.1
  # [discarded value]: struct_type_member_name.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $19.1:rax 
  .loc 3 1273 13
  # $20.1: @FILE = call(write_337, $19.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $19.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $20.1:rax 
  .loc 3 1273 151
  # $21.1: @String = load_struct_member(struct_type_member_type.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx+8]
  # [discarded value]: struct_type_member_type.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $20.1:rax $21.1:r15 
  .loc 3 1273 13
  # $22.1: @FILE = call(write_337, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $22.1:rax 
  .loc 3 1273 13
  # $23.1: @FILE = call(end_line_340, $22.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  .loc 3 1274 40
  # struct_type_members_item.4: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:rbx:[rbp-17] 
  # jump(.LABEL__dump_struct_members_123__5)
  mov [rbp-17], rbx
  jmp .LABEL__dump_struct_members_123__5
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:[rbp-17] 
  # [discarded value]: struct_type_members_item.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
.LABEL__dump_struct_members_123__7:
  .loc 3 1276 23
  # struct_type.6: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:rbx:[rbp-8] 
  # jump(.LABEL__dump_struct_members_123__2)
  mov [rbp-8], rbx
  jmp .LABEL__dump_struct_members_123__2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:[rbp-8] 
  # [discarded value]: struct_type.6
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__dump_struct_members_123__4:
  # return()
  jmp .LABEL__dump_struct_members_123__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__dump_struct_members_123__end:
  mov rsp, rbp
  pop rbp
  ret

dump_struct_members_123__stack_frame_size: .word 48

  .loc 3 1280 1
  .text
convert_member_access_expression_address_124:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_address_124__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_address_124__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1281 20
  # result_type.1: @IR_Type = call(deduce_expression_type_136, self.1, member_access_expression.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call deduce_expression_type_136
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax 
  .loc 3 1282 9
  # $2.1: Boolean = call(is_343, result_type.1, IR_Pointer_Type)
  mov rdi, rax
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__convert_member_access_expression_address_124__2, .LABEL__convert_member_access_expression_address_124__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_member_access_expression_address_124__3
.LABEL__convert_member_access_expression_address_124__2:
  .loc 3 1283 16
  # $3.1: @IR_Value = call(convert_member_access_expression_122, self.1, member_access_expression.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_122
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 3 1283 9
  # return($3.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_member_access_expression_address_124__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__convert_member_access_expression_address_124__3:
  .loc 3 1285 11
  # $4.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:rbx 
  .loc 3 1285 46
  # $5.1: @Object_Type = load_struct_member(result_type.1, object_type)
  mov r15, [rbp-24]
  mov r14, [r15]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:r15:[rbp-24] $2.1:[rbp-25] $4.1:rbx $5.1:r14 
  .loc 3 1285 5
  # call(abort_141, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [discarded value]: result_type.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_address_124__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_address_124__stack_frame_size: .word 48

  .loc 3 1288 1
  .text
convert_modulo_expression_125:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_modulo_expression_125__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_modulo_expression_125__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1289 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1289 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1289 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1290 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1290 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1290 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1291 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_modulo_expression_125__2, .LABEL__convert_modulo_expression_125__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_modulo_expression_125__3
.LABEL__convert_modulo_expression_125__2:
  .loc 3 1291 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_modulo_expression_125__3)
  mov [rbp-41], al
.LABEL__convert_modulo_expression_125__3:
  .loc 3 1291 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_modulo_expression_125__4, .LABEL__convert_modulo_expression_125__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_modulo_expression_125__5
.LABEL__convert_modulo_expression_125__4:
  .loc 3 1292 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1292 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_modulo_expression_125__5:
  .loc 3 1294 88
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1294 65
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1294 24
  # $14.1: @IR_Modulo_Instruction = new IR_Modulo_Instruction(object_type = IR_Modulo_Instruction, result_value = $12.1, dump = dump_ir_modulo_instruction_241.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Modulo_Instruction
  mov rbx, IR_Modulo_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_modulo_instruction_241.address
  lea r14, dump_ir_modulo_instruction_241[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1294 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1294 137
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1294 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1294 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_modulo_expression_125__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_modulo_expression_125__end:
  mov rsp, rbp
  pop rbp
  ret

convert_modulo_expression_125__stack_frame_size: .word 64

  .loc 3 1297 1
  .text
convert_multiply_expression_126:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_multiply_expression_126__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_multiply_expression_126__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1298 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1298 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1298 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1299 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1299 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1299 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1300 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_multiply_expression_126__2, .LABEL__convert_multiply_expression_126__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_multiply_expression_126__3
.LABEL__convert_multiply_expression_126__2:
  .loc 3 1300 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_multiply_expression_126__3)
  mov [rbp-41], al
.LABEL__convert_multiply_expression_126__3:
  .loc 3 1300 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_multiply_expression_126__4, .LABEL__convert_multiply_expression_126__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_multiply_expression_126__5
.LABEL__convert_multiply_expression_126__4:
  .loc 3 1301 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1301 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_multiply_expression_126__5:
  .loc 3 1303 90
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1303 67
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1303 24
  # $14.1: @IR_Multiply_Instruction = new IR_Multiply_Instruction(object_type = IR_Multiply_Instruction, result_value = $12.1, dump = dump_ir_multiply_instruction_242.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Multiply_Instruction
  mov rbx, IR_Multiply_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_multiply_instruction_242.address
  lea r14, dump_ir_multiply_instruction_242[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1303 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1303 139
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1303 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1303 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_multiply_expression_126__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_multiply_expression_126__end:
  mov rsp, rbp
  pop rbp
  ret

convert_multiply_expression_126__stack_frame_size: .word 64

  .loc 3 1306 1
  .text
convert_negate_expression_127:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_negate_expression_127__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_negate_expression_127__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Negate_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1307 38
  # $1.1: @AST_Expression = load_struct_member(expression.1, expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1307 61
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1307 14
  # value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax 
  .loc 3 1309 76
  # $4.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rax $4.1:rbx 
  .loc 3 1309 53
  # $5.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $4.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-32], rax
  call create_temp_value_76
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:rax 
  .loc 5 471 38
  # $6.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-40], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $5.1:[rbp-40] $6.1:rax 
  .loc 3 1309 9
  # $7.1: @IR_Substract_Instruction = new IR_Substract_Instruction(object_type = IR_Substract_Instruction, result_value = $5.1, dump = dump_ir_substract_instruction_244.address, location = null, operand_values = $6.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-48], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Substract_Instruction
  mov rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $5.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $6.1
  mov r15, [rbp-48]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_substract_instruction_244.address
  lea r14, dump_ir_substract_instruction_244[rip]
  mov [rax+57], r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:rax 
  .loc 3 1311 24
  # $8.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:rbx:[rbp-32] $7.1:rax $8.1:r15 
  .loc 3 1312 69
  # $9.1: @Source_Location = load_struct_member(expression.1, location)
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-24] expression.1:r14:[rbp-8] value.1:rbx:[rbp-32] $7.1:rax $8.1:r15 $9.1:r13 
  .loc 3 1312 27
  # $10.1: @Integer_Token = new Integer_Token(object_type = Integer_Token, lexeme = "", location = $9.1, value = 0, next_token = null)
  mov [rbp-40], rax
  mov [rbp-48], r13
  mov [rbp-56], r15
  mov rdi, 40
  call malloc
  #     .object_type = Integer_Token
  mov rbx, Integer_Token[rip]
  mov [rax], rbx
  #     .lexeme = ""
  lea rbx, .LABEL__string_228[rip] # ""
  mov [rax+8], rbx
  #     .location = $9.1
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+16], rbx
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = 0
  mov QWORD PTR [rax+32], 0
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:rax 
  .loc 5 159 32
  # $11.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-64], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:rax 
  .loc 5 160 20
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-72], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $8.1:[rbp-56] $10.1:[rbp-64] $11.1:[rbp-72] $12.1:rax 
  .loc 3 1310 13
  # $13.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $8.1, literal = $10.1, dump = dump_ir_constant_value_156.address, creator_instruction = null, user_instructions = $11.1, links = $12.1)
  mov [rbp-80], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $8.1
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $11.1
  mov r15, [rbp-72]
  mov QWORD PTR [rax+24], r15
  #     .links = $12.1
  mov r14, [rbp-80]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_constant_value_156.address
  lea r13, dump_ir_constant_value_156[rip]
  mov [rax+40], r13
  #     .literal = $10.1
  mov r13, [rbp-64]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] value.1:[rbp-32] $7.1:[rbp-40] $13.1:rax 
  .loc 3 1309 9
  # $14.1: @IR_Binary_Instruction = call(init_231, $7.1, $13.1, value.1)
  mov rdi, [rbp-40]
  mov rsi, rax
  mov rdx, [rbp-32]
  call init_231
  # [discarded value]: $13.1
  # [discarded value]: $7.1
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $14.1:rax 
  .loc 3 1316 9
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-24] $14.1:rax $15.1:r15 
  .loc 3 1308 12
  # $16.1: @IR_Variable_Value = call(append_77, self.1, $14.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: self.1
  # [live values]: $16.1:rax 
  .loc 3 1308 5
  # return($16.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_negate_expression_127__end
  # [discarded value]: $16.1
  # [live values]: 
.LABEL__convert_negate_expression_127__end:
  mov rsp, rbp
  pop rbp
  ret

convert_negate_expression_127__stack_frame_size: .word 80

  .loc 3 1320 1
  .text
convert_new_expression_128:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_new_expression_128__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_new_expression_128__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1321 37
  # $1.1: @AST_Type = load_struct_member(expression.1, type)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1321 13
  # type.1: @IR_Type = call(convert_value_type_81, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call convert_value_type_81
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rax 
  .loc 3 1322 9
  # $3.1: Boolean = call(is_343, type.1, IR_Array_Type)
  mov rdi, rax
  mov rsi, IR_Array_Type[rip]
  mov [rbp-24], rax
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__convert_new_expression_128__2, .LABEL__convert_new_expression_128__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_new_expression_128__3
.LABEL__convert_new_expression_128__2:
  .loc 3 1323 17
  # type.1: @IR_Array_Type = type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rax 
  .loc 3 1324 47
  # $5.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rax $5.1:rbx 
  .loc 3 1324 69
  # $6.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-33], rax
  mov [rbp-41], rbx
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 1324 23
  # size_value.1: @IR_Value = call(convert_expression_103, self.1, $5.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-41]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:rax 
  .loc 3 1327 63
  # $8.1: @IR_Type = load_struct_member(type.1, pointed_type)
  mov rbx, [rbp-33]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:rbx:[rbp-33] size_value.1:rax $8.1:r15 
  .loc 3 1327 40
  # $9.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $8.1)
  mov rdi, r15
  mov [rbp-41], rax
  call create_ir_pointer_type_145
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:[rbp-41] $9.1:rax 
  .loc 3 1327 17
  # $10.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] type.1:[rbp-33] size_value.1:[rbp-41] $10.1:rax 
  .loc 3 1328 17
  # $11.1: @IR_Type = load_struct_member(type.1, pointed_type)
  mov rbx, [rbp-33]
  mov r15, [rbx+16]
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] size_value.1:[rbp-41] $10.1:rax $11.1:r15 
  .loc 3 1326 13
  # $12.1: @IR_New_Instruction = call(create_ir_new_instruction_214, $10.1, $11.1, size_value.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-41]
  call create_ir_new_instruction_214
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: size_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $12.1:rax 
  .loc 3 1331 13
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $12.1:rax $13.1:r15 
  .loc 3 1325 16
  # $14.1: @IR_Variable_Value = call(append_77, self.1, $12.1, $13.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $14.1:rax 
  .loc 3 1325 9
  # return($14.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_new_expression_128__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__convert_new_expression_128__3:
  .loc 3 1334 9
  # $15.1: Boolean = call(is_343, type.1, IR_Struct_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:rax 
  # jump($15.1, .LABEL__convert_new_expression_128__5, .LABEL__convert_new_expression_128__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_new_expression_128__6
.LABEL__convert_new_expression_128__5:
  .loc 3 1335 17
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:rax 
  .loc 3 1336 27
  # init_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-34], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: init_arguments.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] 
  .loc 3 1337 23
  # init_value.1: @IR_Struct_Literal_Value = call(convert_struct_literal_expression_129, self.1, expression.1, type.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  mov rdx, [rbp-34]
  call convert_struct_literal_expression_129
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_value.1:rax 
  .loc 3 1338 86
  # $19.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, type.1)
  mov rdi, [rbp-34]
  mov [rbp-42], rax
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_value.1:[rbp-42] $19.1:rax 
  .loc 3 1338 63
  # $20.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $19.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] type.1:[rbp-34] init_value.1:[rbp-42] $20.1:rax 
  .loc 3 1338 37
  # $21.1: @IR_New_Instruction = call(create_ir_new_instruction_214, $20.1, type.1, init_value.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  mov rdx, [rbp-42]
  call create_ir_new_instruction_214
  # [discarded value]: $20.1
  # [discarded value]: init_value.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $21.1:rax 
  .loc 3 1338 136
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $21.1:rax $22.1:r15 
  .loc 3 1338 25
  # result_value.1: @IR_Variable_Value = call(append_77, self.1, $21.1, $22.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] result_value.1:rax 
  .loc 3 1339 9
  # return(result_value.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_new_expression_128__end
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] 
.LABEL__convert_new_expression_128__6:
  .loc 3 1341 11
  # $24.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:rbx 
  .loc 3 1341 32
  # $25.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  mov [rbp-34], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $25.1:rax 
  .loc 3 1341 67
  # $26.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:rbx:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $25.1:rax $26.1:r15 
  .loc 3 1341 32
  # $27.1: @String = call(append_354, $25.1, $26.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] $24.1:[rbp-34] $27.1:rax 
  .loc 3 1341 5
  # call(abort_314, $24.1, $27.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_314
  # [discarded value]: $27.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] $15.1:[rbp-26] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] type.1:[rbp-24] 
  # [discarded value]: type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_new_expression_128__end:
  mov rsp, rbp
  pop rbp
  ret

convert_new_expression_128__stack_frame_size: .word 48

  .loc 3 1344 1
  .text
convert_struct_literal_expression_129:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_literal_expression_129__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_literal_expression_129__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi expression.1:rsi struct_type.1:rdx 
  .loc 3 1346 9
  # $1.1: Boolean = call(is_343, expression.1, AST_Call_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Call_Expression[rip]
  mov [rbp-24], rdx
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__convert_struct_literal_expression_129__2, .LABEL__convert_struct_literal_expression_129__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_struct_literal_expression_129__4
.LABEL__convert_struct_literal_expression_129__2:
  .loc 3 1347 27
  # $10.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $10.1:rax 
  .loc 3 1347 26
  # call_arguments.3: @List = load_struct_member($10.1, arguments)
  mov rbx, [rax+24]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:rbx 
  # jump(.LABEL__convert_struct_literal_expression_129__3)
  mov [rbp-33], rbx
.LABEL__convert_struct_literal_expression_129__3:
  # call_arguments.5: @List = phi(call_arguments.3, call_arguments.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] 
  .loc 3 1353 88
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:rbx 
  .loc 5 159 32
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-41], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:[rbp-41] $13.1:rax 
  .loc 5 160 20
  # $14.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:[rbp-41] $13.1:[rbp-49] $14.1:rax 
  .loc 3 1353 29
  # struct_literal_value.1: @IR_Struct_Literal_Value = new IR_Struct_Literal_Value(object_type = IR_Struct_Literal_Value, type = struct_type.1, location = $12.1, dump = dump_IR_Struct_Literal_Value_159.address, creator_instruction = null, user_instructions = $13.1, links = $14.1)
  mov [rbp-57], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Struct_Literal_Value
  mov rbx, IR_Struct_Literal_Value[rip]
  mov [rax], rbx
  #     .type = struct_type.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $13.1
  mov r15, [rbp-49]
  mov QWORD PTR [rax+24], r15
  #     .links = $14.1
  mov r14, [rbp-57]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_IR_Struct_Literal_Value_159.address
  lea r13, dump_IR_Struct_Literal_Value_159[rip]
  mov [rax+40], r13
  #     .location = $12.1
  mov r13, [rbp-41]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:rbx:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:rax 
  .loc 3 1354 9
  # $16.1: Boolean = call(is_object_type_152, struct_type.1)
  mov rdi, rbx
  mov [rbp-41], rax
  call is_object_type_152
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:rax 
  # jump($16.1, .LABEL__convert_struct_literal_expression_129__8, .LABEL__convert_struct_literal_expression_129__9)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_struct_literal_expression_129__9
.LABEL__convert_struct_literal_expression_129__8:
  .loc 3 1355 39
  # $17.1: @String = load_struct_member(struct_type.1, name)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:rax:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] $17.1:rbx 
  .loc 3 1355 21
  # variable.1: @IR_Variable = call(get_variable_68, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_variable_68
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:rax 
  .loc 3 1356 31
  # object_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, "object_type")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_229[rip] # "object_type"
  mov [rbp-50], rax
  call get_member_150
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:rax 
  .loc 3 1357 103
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-50]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:rbx:[rbp-50] object_type_member.1:rax $20.1:r15 
  .loc 5 159 32
  # $21.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-58], rax
  mov [rbp-66], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:[rbp-58] $20.1:[rbp-66] $21.1:rax 
  .loc 5 160 20
  # $22.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-74], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:[rbp-58] $20.1:[rbp-66] $21.1:[rbp-74] $22.1:rax 
  .loc 3 1357 67
  # $23.1: @IR_Global_Variable_Value = new IR_Global_Variable_Value(object_type = IR_Global_Variable_Value, type = $20.1, variable = variable.1, dump = dump_ir_global_variable_value_160.address, creator_instruction = null, user_instructions = $21.1, links = $22.1)
  mov [rbp-82], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Value
  mov rbx, IR_Global_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $20.1
  mov rbx, [rbp-66]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $21.1
  mov r15, [rbp-74]
  mov QWORD PTR [rax+24], r15
  #     .links = $22.1
  mov r14, [rbp-82]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_global_variable_value_160.address
  lea r13, dump_ir_global_variable_value_160[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-50]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] object_type_member.1:[rbp-58] $23.1:rax 
  .loc 3 1357 9
  # call(set_member_value_158, struct_literal_value.1, object_type_member.1, $23.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-58]
  mov rdx, rax
  call set_member_value_158
  # [discarded value]: $23.1
  # [discarded value]: object_type_member.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # jump(.LABEL__convert_struct_literal_expression_129__9)
.LABEL__convert_struct_literal_expression_129__9:
  .loc 3 1359 5
  # call(convert_struct_literal_value_130, self.1, struct_literal_value.1, call_arguments.5, struct_type.1, struct_type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-41]
  mov rdx, [rbp-33]
  mov rcx, [rbp-24]
  mov r8, [rbp-24]
  call convert_struct_literal_value_130
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  .loc 3 1360 5
  # return(struct_literal_value.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_struct_literal_expression_129__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] 
  # [discarded value]: struct_literal_value.1
  # [discarded value]: call_arguments.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] 
  # [discarded value]: call_arguments.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__convert_struct_literal_expression_129__4:
  .loc 3 1348 16
  # $2.1: Boolean = call(is_343, expression.1, AST_New_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_New_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:rax 
  # jump($2.1, .LABEL__convert_struct_literal_expression_129__5, .LABEL__convert_struct_literal_expression_129__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_struct_literal_expression_129__7
.LABEL__convert_struct_literal_expression_129__5:
  .loc 3 1349 27
  # $8.1: @AST_New_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $8.1:rax 
  .loc 3 1349 26
  # call_arguments.2: @List = load_struct_member($8.1, init_arguments)
  mov rbx, [rax+24]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] call_arguments.2:rbx:[rbp-33] 
  # jump(.LABEL__convert_struct_literal_expression_129__3)
  mov [rbp-33], rbx
  jmp .LABEL__convert_struct_literal_expression_129__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] call_arguments.2:[rbp-33] 
  # [discarded value]: call_arguments.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
.LABEL__convert_struct_literal_expression_129__7:
  .loc 3 1351 15
  # $3.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:rbx 
  .loc 3 1351 36
  # $4.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  mov [rbp-42], rbx
  call clone_345
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax 
  .loc 3 1351 71
  # $5.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax $5.1:r15 
  .loc 3 1351 71
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1351 36
  # $7.1: @String = call(append_354, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $7.1:rax 
  .loc 3 1351 9
  # call(abort_314, $3.1, $7.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_314
  # [discarded value]: $7.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] 
  # [discarded value]: struct_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_literal_expression_129__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_literal_expression_129__stack_frame_size: .word 96

  .loc 3 1363 1
  .text
convert_struct_literal_value_130:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_literal_value_130__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_literal_value_130__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_literal_value.1: @IR_Struct_Literal_Value = load_variable(struct_literal_value)
  # [live values]: self.1:rdi struct_literal_value.1:rsi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx struct_type.1:rcx 
  # base_type.1: @IR_Struct_Type = load_variable(base_type)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx struct_type.1:rcx base_type.1:r8 
  .loc 3 1364 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rdx]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi struct_literal_value.1:rsi struct_type.1:rcx base_type.1:r8 call_arguments_item.1:rax 
  # jump(.LABEL__convert_struct_literal_value_130__2)
  mov [rbp-8], rax
  mov [rbp-16], rcx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-40], r8
.LABEL__convert_struct_literal_value_130__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 3 1365 12
  # $2.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__convert_struct_literal_value_130__3, .LABEL__convert_struct_literal_value_130__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_struct_literal_value_130__4
.LABEL__convert_struct_literal_value_130__3:
  .loc 3 1366 26
  # call_argument.1: @AST_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx 
  .loc 3 1367 31
  # call_argument_name.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx call_argument_name.1:r15 
  .loc 3 1368 13
  # $6.1: Boolean = call_argument_name.1 == null
  cmp r15, 0
  sete r14b
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx call_argument_name.1:r15 $6.1:r14 
  # jump($6.1, .LABEL__convert_struct_literal_value_130__5, .LABEL__convert_struct_literal_value_130__6)
  test r14b, r14b
  mov [rbp-49], rbx
  mov [rbp-50], r14b
  mov [rbp-58], r15
  jz .LABEL__convert_struct_literal_value_130__6
.LABEL__convert_struct_literal_value_130__5:
  .loc 3 1369 19
  # $7.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] $7.1:rbx 
  .loc 3 1369 19
  # $8.1: @Source_Location = load_struct_member($7.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] $8.1:r15 
  .loc 3 1369 13
  # call(abort_314, $8.1, "Struct init argument without name")
  mov rdi, r15
  lea rsi, .LABEL__string_230[rip] # "Struct init argument without name"
  call abort_314
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] 
.LABEL__convert_struct_literal_value_130__6:
  .loc 3 1371 54
  # $9.1: @String = load_struct_member(call_argument_name.1, lexeme)
  mov rax, [rbp-58]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] $9.1:rbx 
  .loc 3 1371 31
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_member_150
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:rax 
  .loc 3 1372 13
  # $11.1: Boolean = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:rax $11.1:rbx 
  # jump($11.1, .LABEL__convert_struct_literal_value_130__7, .LABEL__convert_struct_literal_value_130__8)
  test bl, bl
  mov [rbp-66], rax
  mov [rbp-67], bl
  jz .LABEL__convert_struct_literal_value_130__8
.LABEL__convert_struct_literal_value_130__7:
  .loc 3 1373 19
  # $12.1: @Source_Location = load_struct_member(call_argument_name.1, location)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:rbx 
  .loc 3 1373 54
  # $13.1: @String = load_struct_member(struct_type.1, name)
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:r15:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:rbx $13.1:r14 
  .loc 3 1373 48
  # $14.1: @String = call(clone_345, $13.1)
  mov rdi, r14
  mov [rbp-75], rbx
  call clone_345
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $14.1:rax 
  .loc 3 1373 48
  # $15.1: @String = call(append_354, $14.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_225[rip] # " has no such member: "
  call append_354
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $15.1:rax 
  .loc 3 1373 111
  # $16.1: @String = load_struct_member(call_argument_name.1, lexeme)
  mov rbx, [rbp-58]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rbx:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $15.1:rax $16.1:r15 
  .loc 3 1373 48
  # $17.1: @String = call(append_354, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $17.1:rax 
  .loc 3 1373 13
  # call(abort_314, $12.1, $17.1)
  mov rdi, [rbp-75]
  mov rsi, rax
  call abort_314
  # [discarded value]: $17.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] 
.LABEL__convert_struct_literal_value_130__8:
  .loc 3 1375 13
  # $18.1: @IR_Value = call(get_member_value_157, struct_literal_value.1, struct_type_member.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-66]
  call get_member_value_157
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $18.1:rax 
  .loc 3 1375 13
  # $19.1: Boolean = $18.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:rbx 
  # jump($19.1, .LABEL__convert_struct_literal_value_130__9, .LABEL__convert_struct_literal_value_130__10)
  test bl, bl
  mov [rbp-68], bl
  jz .LABEL__convert_struct_literal_value_130__10
.LABEL__convert_struct_literal_value_130__9:
  .loc 3 1376 95
  # $20.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $20.1:rbx 
  .loc 3 1376 127
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-66]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:r15:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $20.1:rbx $21.1:r14 
  .loc 3 1376 71
  # $22.1: @IR_Value = call(convert_expression_103, self.1, $20.1, $21.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_103
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $22.1:rax 
  .loc 3 1376 13
  # call(set_member_value_158, struct_literal_value.1, struct_type_member.1, $22.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-66]
  mov rdx, rax
  call set_member_value_158
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # jump(.LABEL__convert_struct_literal_value_130__10)
.LABEL__convert_struct_literal_value_130__10:
  .loc 3 1378 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] call_arguments_item.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_struct_literal_value_130__2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_struct_literal_value_130__2
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] call_arguments_item.5:[rbp-8] 
  # [discarded value]: call_arguments_item.5
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] 
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] 
  # [discarded value]: call_argument_name.1
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
.LABEL__convert_struct_literal_value_130__4:
  .loc 3 1380 9
  # $24.1: Boolean = base_type.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:rax 
  # jump($24.1, .LABEL__convert_struct_literal_value_130__11, .LABEL__convert_struct_literal_value_130__12)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_struct_literal_value_130__12
.LABEL__convert_struct_literal_value_130__11:
  .loc 3 1381 65
  # $25.1: @AST_Struct_Statement = load_struct_member(base_type.1, statement)
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $25.1:rbx 
  .loc 3 1381 65
  # $26.1: @List = load_struct_member($25.1, init_arguments)
  mov r15, [rbx+40]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $26.1:r15 
  .loc 3 1381 114
  # $27.1: @IR_Struct_Type = load_struct_member(base_type.1, base_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $26.1:r15 $27.1:rbx 
  .loc 3 1381 9
  # call(convert_struct_literal_value_130, self.1, struct_literal_value.1, $26.1, struct_type.1, $27.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, r15
  mov rcx, [rbp-16]
  mov r8, rbx
  call convert_struct_literal_value_130
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # jump(.LABEL__convert_struct_literal_value_130__12)
.LABEL__convert_struct_literal_value_130__12:
  # return()
  jmp .LABEL__convert_struct_literal_value_130__end
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: base_type.1
  # [discarded value]: struct_type.1
  # [discarded value]: struct_literal_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_literal_value_130__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_literal_value_130__stack_frame_size: .word 80

  .loc 3 1385 1
  .text
get_named_argument_131:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_argument_131__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_argument_131__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: list.1:rdi name.1:rsi 
  .loc 3 1386 18
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: name.1:rsi list_item.1:rax 
  # jump(.LABEL__get_named_argument_131__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_named_argument_131__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  .loc 3 1387 12
  # $2.1: Boolean = list_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_named_argument_131__3, .LABEL__get_named_argument_131__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_argument_131__4
.LABEL__get_named_argument_131__3:
  .loc 3 1388 26
  # call_argument.1: @IR_Call_Argument = load_struct_member(list_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 3 1389 25
  # $5.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r15 
  .loc 3 1389 13
  # $6.1: Boolean = call(equals_346, name.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-25], rbx
  call equals_346
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  # jump($6.1, .LABEL__get_named_argument_131__5, .LABEL__get_named_argument_131__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_argument_131__6
.LABEL__get_named_argument_131__5:
  .loc 3 1390 13
  # return(call_argument.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_argument_131__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
.LABEL__get_named_argument_131__6:
  .loc 3 1392 21
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_named_argument_131__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_named_argument_131__2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] 
  # [discarded value]: call_argument.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_named_argument_131__4:
  .loc 3 1394 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_argument_131__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: list_item.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_argument_131__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_argument_131__stack_frame_size: .word 32

  .loc 3 1397 1
  .text
convert_not_equals_expression_132:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_not_equals_expression_132__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_not_equals_expression_132__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1398 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1398 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_103
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1399 44
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1399 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_103
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1400 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1400 32
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1400 9
  # $7.1: Boolean = call(equals_144, $5.1, $6.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-32], rax
  call equals_144
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $7.1:rax 
  .loc 3 1400 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:rbx 
  .loc 3 1400 9
  # $9.1: Boolean = $8.1
  mov [rbp-33], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:rbx 
  # jump($9.1, .LABEL__convert_not_equals_expression_132__2, .LABEL__convert_not_equals_expression_132__3)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__convert_not_equals_expression_132__3
.LABEL__convert_not_equals_expression_132__2:
  .loc 3 1400 63
  # $10.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $10.1:rbx 
  .loc 3 1400 63
  # $12.1: Boolean = call(is_343, $10.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_not_equals_expression_132__4, .LABEL__convert_not_equals_expression_132__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_not_equals_expression_132__5
.LABEL__convert_not_equals_expression_132__4:
  .loc 3 1400 102
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  .loc 3 1400 102
  # $14.1: Boolean = call(is_343, $13.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_343
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1400 102
  # $15.1: Boolean = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $15.1:rbx 
  .loc 3 1400 63
  # $12.2: Boolean = $15.1
  mov [rbp-35], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_not_equals_expression_132__5)
  mov [rbp-34], bl
.LABEL__convert_not_equals_expression_132__5:
  .loc 3 1400 63
  # $9.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:rax:[rbp-33] 
  # jump(.LABEL__convert_not_equals_expression_132__3)
  mov [rbp-33], al
.LABEL__convert_not_equals_expression_132__3:
  .loc 3 1400 9
  # $9.3: Boolean = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # jump($9.3, .LABEL__convert_not_equals_expression_132__6, .LABEL__convert_not_equals_expression_132__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_not_equals_expression_132__7
.LABEL__convert_not_equals_expression_132__6:
  .loc 3 1401 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $16.1:rbx 
  .loc 3 1401 9
  # call(abort_314, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_223[rip] # "Operands are not the same type"
  call abort_314
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
.LABEL__convert_not_equals_expression_132__7:
  .loc 3 1403 9
  # $18.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_not_equals_expression_132__8, .LABEL__convert_not_equals_expression_132__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_not_equals_expression_132__9
.LABEL__convert_not_equals_expression_132__8:
  .loc 3 1403 45
  # $18.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_not_equals_expression_132__9)
  mov [rbp-35], al
.LABEL__convert_not_equals_expression_132__9:
  .loc 3 1403 9
  # $18.3: Boolean = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_not_equals_expression_132__10, .LABEL__convert_not_equals_expression_132__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_not_equals_expression_132__11
.LABEL__convert_not_equals_expression_132__10:
  .loc 3 1404 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1404 9
  # call(abort_314, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_not_equals_expression_132__11:
  .loc 3 1406 102
  # $21.1: @IR_Type = call(get_named_type_66, self.1, "Boolean")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_177[rip] # "Boolean"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1406 79
  # $22.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_76
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 471 38
  # $23.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-43], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  .loc 3 1406 24
  # $24.1: @IR_Not_Equal_Comparison_Instruction = new IR_Not_Equal_Comparison_Instruction(object_type = IR_Not_Equal_Comparison_Instruction, result_value = $22.1, dump = dump_ir_not_equal_comparison_instruction_243.address, location = null, operand_values = $23.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-51], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Not_Equal_Comparison_Instruction
  mov rbx, IR_Not_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $22.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $23.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_not_equal_comparison_instruction_243.address
  lea r14, dump_ir_not_equal_comparison_instruction_243[rip]
  mov [rax+57], r14
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $24.1:rax 
  .loc 3 1406 24
  # $25.1: @IR_Binary_Instruction = call(init_231, $24.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_231
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1406 166
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax $26.1:r15 
  .loc 3 1406 12
  # $27.1: @IR_Variable_Value = call(append_77, self.1, $25.1, $26.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $27.1:rax 
  .loc 3 1406 5
  # return($27.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_not_equals_expression_132__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $9.3:[rbp-33] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $9.2:[rbp-33] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $9.1:[rbp-33] 
  # [discarded value]: $9.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_not_equals_expression_132__end:
  mov rsp, rbp
  pop rbp
  ret

convert_not_equals_expression_132__stack_frame_size: .word 64

  .loc 3 1409 1
  .text
convert_substract_expression_133:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_substract_expression_133__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_substract_expression_133__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1410 43
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1410 71
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 1410 19
  # left_value.1: @IR_Value = call(convert_expression_103, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1411 44
  # $4.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:rax $4.1:r15 
  .loc 3 1411 73
  # $5.1: @IR_Type = call(get_named_type_66, self.1, "Int")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_178[rip] # "Int"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 3 1411 20
  # right_value.1: @IR_Value = call(convert_expression_103, self.1, $4.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_103
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:rax 
  .loc 3 1412 9
  # $8.1: Boolean = call(is_343, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:rax 
  # jump($8.1, .LABEL__convert_substract_expression_133__2, .LABEL__convert_substract_expression_133__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_substract_expression_133__3
.LABEL__convert_substract_expression_133__2:
  .loc 3 1412 45
  # $8.2: Boolean = call(is_343, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:rax:[rbp-41] 
  # jump(.LABEL__convert_substract_expression_133__3)
  mov [rbp-41], al
.LABEL__convert_substract_expression_133__3:
  .loc 3 1412 9
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # jump($8.3, .LABEL__convert_substract_expression_133__4, .LABEL__convert_substract_expression_133__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_substract_expression_133__5
.LABEL__convert_substract_expression_133__4:
  .loc 3 1413 15
  # $10.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $10.1:rbx 
  .loc 3 1413 9
  # call(abort_314, $10.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_212[rip] # "TODO: Evaluate constant expression"
  call abort_314
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
.LABEL__convert_substract_expression_133__5:
  .loc 3 1415 91
  # $11.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:rax:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $11.1:rbx 
  .loc 3 1415 68
  # $12.1: @IR_Variable_Value = call(create_temp_value_76, self.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_76
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:rax 
  .loc 5 471 38
  # $13.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $12.1:[rbp-49] $13.1:rax 
  .loc 3 1415 24
  # $14.1: @IR_Substract_Instruction = new IR_Substract_Instruction(object_type = IR_Substract_Instruction, result_value = $12.1, dump = dump_ir_substract_instruction_244.address, location = null, operand_values = $13.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-57], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Substract_Instruction
  mov rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $13.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_substract_instruction_244.address
  lea r14, dump_ir_substract_instruction_244[rip]
  mov [rax+57], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $14.1:rax 
  .loc 3 1415 24
  # $15.1: @IR_Binary_Instruction = call(init_231, $14.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  call init_231
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax 
  .loc 3 1415 140
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $15.1:rax $16.1:r15 
  .loc 3 1415 12
  # $17.1: @IR_Variable_Value = call(append_77, self.1, $15.1, $16.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_77
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] $17.1:rax 
  .loc 3 1415 5
  # return($17.1)
  mov [rbp-49], rax
  jmp .LABEL__convert_substract_expression_133__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] $8.3:[rbp-41] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] $8.2:[rbp-41] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] left_value.1:[rbp-32] right_value.1:[rbp-40] $8.1:[rbp-41] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_substract_expression_133__end:
  mov rsp, rbp
  pop rbp
  ret

convert_substract_expression_133__stack_frame_size: .word 64

  .loc 3 1418 1
  .text
convert_variable_expression_134:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_134__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_134__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 1419 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  .loc 3 1419 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $2.1:rbx 
  .loc 3 1419 17
  # variable.1: @IR_Variable = call(get_variable_68, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call get_variable_68
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax 
  .loc 3 1420 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_134__2, .LABEL__convert_variable_expression_134__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_variable_expression_134__3
.LABEL__convert_variable_expression_134__2:
  .loc 3 1421 13
  # $5.1: Boolean = expected_type.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $5.1:rax 
  .loc 3 1421 13
  # $6.1: Boolean = $5.1
  mov [rbp-34], al
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__convert_variable_expression_134__4, .LABEL__convert_variable_expression_134__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_variable_expression_134__5
.LABEL__convert_variable_expression_134__4:
  .loc 3 1421 38
  # $6.2: Boolean = call(is_343, expected_type.1, IR_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:rax:[rbp-34] 
  # jump(.LABEL__convert_variable_expression_134__5)
  mov [rbp-34], al
.LABEL__convert_variable_expression_134__5:
  .loc 3 1421 13
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # jump($6.3, .LABEL__convert_variable_expression_134__6, .LABEL__convert_variable_expression_134__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_variable_expression_134__7
.LABEL__convert_variable_expression_134__6:
  .loc 3 1422 49
  # $8.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $8.1:rbx 
  .loc 3 1422 49
  # $9.1: @String = load_struct_member($8.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 
  .loc 3 1422 73
  # $10.1: @IR_Function_Type = expected_type.1
  mov rbx, [rbp-16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 $10.1:rbx 
  .loc 3 1422 25
  # function.1: @IR_Function = call(get_named_function_73, self.1, $9.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov rdx, rbx
  call get_named_function_73
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax 
  .loc 3 1423 17
  # $12.1: Boolean = function.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_variable_expression_134__8, .LABEL__convert_variable_expression_134__7)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__convert_variable_expression_134__7
.LABEL__convert_variable_expression_134__8:
  .loc 5 159 32
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $13.1:rax 
  .loc 5 160 20
  # $14.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-51], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $13.1:[rbp-51] $14.1:rax 
  .loc 3 1424 24
  # $15.1: @IR_Function_Address_Value = new IR_Function_Address_Value(object_type = IR_Function_Address_Value, type = expected_type.1, function = function.1, dump = dump_ir_function_address_value_165.address, creator_instruction = null, user_instructions = $13.1, links = $14.1)
  mov [rbp-59], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Function_Address_Value
  mov rbx, IR_Function_Address_Value[rip]
  mov [rax], rbx
  #     .type = expected_type.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $13.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .links = $14.1
  mov r14, [rbp-59]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_function_address_value_165.address
  lea r13, dump_ir_function_address_value_165[rip]
  mov [rax+40], r13
  #     .function = function.1
  mov r13, [rbp-42]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:rbx:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $15.1:rax 
  .loc 3 1424 17
  # return($15.1)
  mov [rbp-51], rax
  jmp .LABEL__convert_variable_expression_134__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] 
.LABEL__convert_variable_expression_134__7:
  .loc 3 1427 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:rbx 
  .loc 3 1427 36
  # $17.1: @String = call(clone_345, "Undeclared variable: ")
  lea rdi, .LABEL__string_202[rip] # "Undeclared variable: "
  mov [rbp-51], rbx
  call clone_345
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax 
  .loc 3 1427 74
  # $18.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax $18.1:r15 
  .loc 3 1427 74
  # $19.1: @String = load_struct_member($18.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax $19.1:r14 
  .loc 3 1427 36
  # $20.1: @String = call(append_354, $17.1, $19.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $20.1:rax 
  .loc 3 1427 9
  # call(abort_314, $16.1, $20.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_314
  # [discarded value]: $20.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_variable_expression_134__3:
  .loc 3 1429 14
  # value.1: @IR_Value = call(get_variable_value_69, self.1, variable.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call get_variable_value_69
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax 
  .loc 3 1430 9
  # $22.1: Boolean = value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax $22.1:rbx 
  # jump($22.1, .LABEL__convert_variable_expression_134__11, .LABEL__convert_variable_expression_134__12)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__convert_variable_expression_134__12
.LABEL__convert_variable_expression_134__11:
  .loc 3 1431 15
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:rbx 
  .loc 3 1431 36
  # $24.1: @String = call(clone_345, "Undeclared variable value: ")
  lea rdi, .LABEL__string_231[rip] # "Undeclared variable value: "
  mov [rbp-50], rbx
  call clone_345
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax 
  .loc 3 1431 80
  # $25.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax $25.1:r15 
  .loc 3 1431 80
  # $26.1: @String = load_struct_member($25.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax $26.1:r14 
  .loc 3 1431 36
  # $27.1: @String = call(append_354, $24.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $26.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $27.1:rax 
  .loc 3 1431 9
  # call(abort_314, $23.1, $27.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_314
  # [discarded value]: $27.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] 
.LABEL__convert_variable_expression_134__12:
  .loc 3 1433 5
  # return(value.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_variable_expression_134__end
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
  # [discarded value]: variable.1
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_134__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_134__stack_frame_size: .word 64

  .loc 3 1436 1
  .text
convert_variable_expression_address_135:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_address_135__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_address_135__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1437 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1437 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1437 17
  # variable.1: @IR_Variable = call(get_variable_68, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_68
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  .loc 3 1438 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_address_135__2, .LABEL__convert_variable_expression_address_135__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__convert_variable_expression_address_135__3
.LABEL__convert_variable_expression_address_135__2:
  .loc 3 1439 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 1439 36
  # $6.1: @String = call(clone_345, "Undeclared variable: ")
  lea rdi, .LABEL__string_202[rip] # "Undeclared variable: "
  mov [rbp-33], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax 
  .loc 3 1439 74
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $7.1:r15 
  .loc 3 1439 74
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $8.1:r14 
  .loc 3 1439 36
  # $9.1: @String = call(append_354, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $9.1:rax 
  .loc 3 1439 9
  # call(abort_314, $5.1, $9.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  call abort_314
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__convert_variable_expression_address_135__3:
  .loc 3 1441 9
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $10.1:rbx 
  .loc 3 1441 9
  # $11.1: Boolean = call(is_343, $10.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__convert_variable_expression_address_135__4, .LABEL__convert_variable_expression_address_135__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_variable_expression_address_135__5
.LABEL__convert_variable_expression_address_135__4:
  .loc 3 1442 16
  # $12.1: @IR_Value = call(get_variable_value_69, self.1, variable.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_69
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 3 1442 9
  # return($12.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_variable_expression_address_135__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__convert_variable_expression_address_135__5:
  .loc 3 1444 9
  # $13.1: Boolean = call(is_343, variable.1, IR_Global_Variable)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable[rip]
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:rax 
  # jump($13.1, .LABEL__convert_variable_expression_address_135__7, .LABEL__convert_variable_expression_address_135__8)
  test al, al
  mov [rbp-27], al
  jz .LABEL__convert_variable_expression_address_135__8
.LABEL__convert_variable_expression_address_135__7:
  .loc 3 1445 83
  # $14.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $14.1:rbx 
  .loc 3 1445 60
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $14.1)
  mov rdi, rbx
  call create_ir_pointer_type_145
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:rax 
  .loc 5 159 32
  # $16.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-35], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:[rbp-35] $16.1:rax 
  .loc 5 160 20
  # $17.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-43], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:[rbp-35] $16.1:[rbp-43] $17.1:rax 
  .loc 3 1445 16
  # $18.1: @IR_Global_Variable_Address_Value = new IR_Global_Variable_Address_Value(object_type = IR_Global_Variable_Address_Value, type = $15.1, variable = variable.1, dump = dump_ir_global_variable_address_value_161.address, creator_instruction = null, user_instructions = $16.1, links = $17.1)
  mov [rbp-51], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Address_Value
  mov rbx, IR_Global_Variable_Address_Value[rip]
  mov [rax], rbx
  #     .type = $15.1
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $16.1
  mov r15, [rbp-43]
  mov QWORD PTR [rax+24], r15
  #     .links = $17.1
  mov r14, [rbp-51]
  mov QWORD PTR [rax+32], r14
  #     .dump = dump_ir_global_variable_address_value_161.address
  lea r13, dump_ir_global_variable_address_value_161[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-24]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:r13:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $18.1:rax 
  .loc 3 1445 9
  # return($18.1)
  mov [rbp-35], rax
  jmp .LABEL__convert_variable_expression_address_135__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] 
.LABEL__convert_variable_expression_address_135__8:
  .loc 3 1447 11
  # $19.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:rbx 
  .loc 3 1447 32
  # $20.1: @String = call(clone_345, "Variable type without address: ")
  lea rdi, .LABEL__string_232[rip] # "Variable type without address: "
  mov [rbp-35], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:[rbp-35] $20.1:rax 
  .loc 3 1447 80
  # $21.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:[rbp-35] $20.1:rax $21.1:r15 
  .loc 3 1447 80
  # $22.1: @String = load_struct_member($21.1, name)
  mov r14, [r15+8]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:[rbp-35] $20.1:rax $22.1:r14 
  .loc 3 1447 32
  # $23.1: @String = call(append_354, $20.1, $22.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $22.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:[rbp-35] $23.1:rax 
  .loc 3 1447 5
  # call(abort_314, $19.1, $23.1)
  mov rdi, [rbp-35]
  mov rsi, rax
  call abort_314
  # [discarded value]: $23.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_address_135__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_address_135__stack_frame_size: .word 64

  .loc 3 1450 1
  .text
deduce_expression_type_136:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_expression_type_136__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_expression_type_136__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1451 9
  # $1.1: Boolean = call(is_343, expression.1, AST_Call_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Call_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__deduce_expression_type_136__2, .LABEL__deduce_expression_type_136__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_expression_type_136__3
.LABEL__deduce_expression_type_136__2:
  .loc 3 1452 49
  # $2.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 1452 16
  # $3.1: @IR_Type = call(deduce_call_expression_type_137, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_call_expression_type_137
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 1452 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__deduce_expression_type_136__3:
  .loc 3 1454 9
  # $4.1: Boolean = call(is_343, expression.1, AST_Literal_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Literal_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__deduce_expression_type_136__5, .LABEL__deduce_expression_type_136__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__deduce_expression_type_136__6
.LABEL__deduce_expression_type_136__5:
  .loc 3 1455 52
  # $5.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 1455 16
  # $6.1: @IR_Type = call(deduce_literal_expression_type_138, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_literal_expression_type_138
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 1455 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__deduce_expression_type_136__6:
  .loc 3 1457 9
  # $7.1: Boolean = call(is_343, expression.1, AST_Member_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__deduce_expression_type_136__8, .LABEL__deduce_expression_type_136__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__deduce_expression_type_136__9
.LABEL__deduce_expression_type_136__8:
  .loc 3 1458 58
  # $8.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 1458 16
  # $9.1: @IR_Type = call(deduce_member_access_expression_type_139, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_member_access_expression_type_139
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 1458 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__deduce_expression_type_136__9:
  .loc 3 1460 9
  # $10.1: Boolean = call(is_343, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__deduce_expression_type_136__11, .LABEL__deduce_expression_type_136__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__deduce_expression_type_136__12
.LABEL__deduce_expression_type_136__11:
  .loc 3 1461 53
  # $11.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 1461 16
  # $12.1: @IR_Type = call(deduce_variable_expression_type_140, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_variable_expression_type_140
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 1461 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__deduce_expression_type_136__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__deduce_expression_type_136__12:
  .loc 3 1463 11
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 1463 32
  # $14.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 1463 5
  # call(abort_141, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_expression_type_136__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_expression_type_136__stack_frame_size: .word 32

  .loc 3 1466 1
  .text
deduce_call_expression_type_137:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_call_expression_type_137__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_call_expression_type_137__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1467 23
  # argument_types.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax 
  .loc 3 1468 18
  # $2.1: @List = load_struct_member(expression.1, arguments)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] argument_types.1:rax $2.1:r15 
  .loc 3 1468 18
  # arguments.1: @List_Iterator = call(create_iterator_329, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call create_iterator_329
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:rax 
  # jump(.LABEL__deduce_call_expression_type_137__2)
  mov [rbp-32], rax
.LABEL__deduce_call_expression_type_137__2:
  .loc 3 1469 12
  # $4.1: Boolean = call(has_next_332, arguments.1)
  mov rdi, [rbp-32]
  call has_next_332
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__deduce_call_expression_type_137__3, .LABEL__deduce_call_expression_type_137__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__deduce_call_expression_type_137__4
.LABEL__deduce_call_expression_type_137__3:
  .loc 3 1470 21
  # argument.1: @AST_Expression = call(next_333, arguments.1)
  mov rdi, [rbp-32]
  call next_333
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument.1:rax 
  .loc 3 1471 26
  # argument_type.1: @IR_Type = call(deduce_expression_type_136, self.1, argument.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call deduce_expression_type_136
  # [discarded value]: argument.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument_type.1:rax 
  .loc 3 1472 9
  # call(append_318, argument_types.1, argument_type.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_318
  # [discarded value]: argument_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__deduce_call_expression_type_137__2)
  jmp .LABEL__deduce_call_expression_type_137__2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__deduce_call_expression_type_137__4:
  .loc 3 1474 9
  # $8.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $8.1:rbx 
  .loc 3 1474 9
  # $9.1: Boolean = call(is_343, $8.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__deduce_call_expression_type_137__5, .LABEL__deduce_call_expression_type_137__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__deduce_call_expression_type_137__6
.LABEL__deduce_call_expression_type_137__5:
  .loc 3 1475 30
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx 
  .loc 3 1476 52
  # $12.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx $12.1:r15 
  .loc 3 1476 24
  # object_type.1: @IR_Type = call(deduce_expression_type_136, self.1, $12.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-42], rbx
  call deduce_expression_type_136
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:rax 
  .loc 3 1477 13
  # $14.1: Boolean = call(is_343, object_type.1, IR_Struct_Type)
  mov rdi, rax
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-50], rax
  call is_343
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:rax 
  # jump($14.1, .LABEL__deduce_call_expression_type_137__7, .LABEL__deduce_call_expression_type_137__9)
  test al, al
  mov [rbp-51], al
  jz .LABEL__deduce_call_expression_type_137__9
.LABEL__deduce_call_expression_type_137__7:
  .loc 3 1478 36
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, object_type.1)
  mov rdi, [rbp-50]
  call create_ir_pointer_type_145
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $15.1:rax 
  .loc 3 1478 13
  # call(prepend_319, argument_types.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call prepend_319
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_137__8)
.LABEL__deduce_call_expression_type_137__8:
  .loc 3 1482 45
  # $16.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $16.1:rbx 
  .loc 3 1482 45
  # $17.1: @String = load_struct_member($16.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $17.1:r15 
  .loc 3 1482 21
  # function.1: @IR_Function = call(get_named_function_72, self.1, $17.1, argument_types.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov rdx, [rbp-24]
  call get_named_function_72
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax 
  .loc 3 1483 13
  # $19.1: Boolean = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax $19.1:rbx 
  # jump($19.1, .LABEL__deduce_call_expression_type_137__10, .LABEL__deduce_call_expression_type_137__11)
  test bl, bl
  mov [rbp-59], rax
  mov [rbp-60], bl
  jz .LABEL__deduce_call_expression_type_137__11
.LABEL__deduce_call_expression_type_137__10:
  .loc 3 1484 19
  # $20.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $20.1:rbx 
  .loc 3 1484 19
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:r15 
  .loc 3 1484 59
  # $22.1: @String = call(clone_345, "Unknown function: ")
  lea rdi, .LABEL__string_233[rip] # "Unknown function: "
  mov [rbp-68], r15
  call clone_345
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax 
  .loc 3 1484 94
  # $23.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rbx, [rbp-42]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $23.1:r15 
  .loc 3 1484 94
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $24.1:r14 
  .loc 3 1484 59
  # $25.1: @String = call(append_354, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $25.1:rax 
  .loc 3 1484 13
  # call(abort_314, $21.1, $25.1)
  mov rdi, [rbp-68]
  mov rsi, rax
  call abort_314
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
.LABEL__deduce_call_expression_type_137__11:
  .loc 3 1486 16
  # $26.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-59]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax:[rbp-59] $19.1:[rbp-60] $26.1:rbx 
  .loc 3 1486 9
  # return($26.1)
  mov rax, rbx
  mov [rbp-68], rbx
  jmp .LABEL__deduce_call_expression_type_137__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
.LABEL__deduce_call_expression_type_137__9:
  .loc 3 1480 13
  # call(prepend_319, argument_types.1, object_type.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-50]
  call prepend_319
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_137__8)
  jmp .LABEL__deduce_call_expression_type_137__8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] 
  # [discarded value]: object_type.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__deduce_call_expression_type_137__6:
  .loc 3 1488 11
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx 
  .loc 3 1488 32
  # $28.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $28.1:r15 
  .loc 3 1488 32
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  mov r14, [r15]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $29.1:r14 
  .loc 3 1488 5
  # call(abort_141, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [discarded value]: arguments.1
  # [discarded value]: argument_types.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_call_expression_type_137__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_call_expression_type_137__stack_frame_size: .word 80

  .loc 3 1491 1
  .text
deduce_literal_expression_type_138:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_literal_expression_type_138__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_literal_expression_type_138__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1492 16
  # literal.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+16]
  # [discarded value]: expression.1
  # [live values]: self.1:rdi literal.1:rax 
  .loc 3 1493 9
  # $2.1: Boolean = call(is_343, literal.1, String_Token)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, String_Token[rip]
  mov [rbp-16], rax
  call is_343
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__deduce_literal_expression_type_138__2, .LABEL__deduce_literal_expression_type_138__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_literal_expression_type_138__3
.LABEL__deduce_literal_expression_type_138__2:
  .loc 3 1494 39
  # $3.1: @IR_Type = call(get_named_type_66, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_224[rip] # "String"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 3 1494 16
  # $4.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $3.1)
  mov rdi, rax
  call create_ir_pointer_type_145
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  .loc 3 1494 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_literal_expression_type_138__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__deduce_literal_expression_type_138__3:
  .loc 3 1496 11
  # $5.1: @Source_Location = load_struct_member(literal.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx 
  .loc 3 1496 29
  # $6.1: @Object_Type = load_struct_member(literal.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx $6.1:r15 
  .loc 3 1496 5
  # call(abort_141, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_141
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_literal_expression_type_138__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_literal_expression_type_138__stack_frame_size: .word 32

  .loc 3 1499 1
  .text
deduce_member_access_expression_type_139:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_member_access_expression_type_139__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_member_access_expression_type_139__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1500 48
  # $1.1: @AST_Expression = load_struct_member(expression.1, object_expression)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1500 20
  # object_type.1: @IR_Type = call(deduce_expression_type_136, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call deduce_expression_type_136
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-8] object_type.1:rax 
  .loc 3 1501 9
  # $3.1: Boolean = call(is_343, object_type.1, IR_Pointer_Type)
  mov rdi, rax
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-16], rax
  call is_343
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $3.1:rax 
  .loc 3 1501 9
  # $4.1: Boolean = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:rbx 
  # jump($4.1, .LABEL__deduce_member_access_expression_type_139__2, .LABEL__deduce_member_access_expression_type_139__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__deduce_member_access_expression_type_139__3
.LABEL__deduce_member_access_expression_type_139__2:
  .loc 3 1502 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 3 1502 36
  # $6.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-16]
  mov r14, [r15]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:r15:[rbp-16] $4.1:[rbp-17] $5.1:rbx $6.1:r14 
  .loc 3 1502 9
  # call(abort_141, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__deduce_member_access_expression_type_139__3:
  .loc 3 1504 21
  # $7.1: @IR_Pointer_Type = object_type.1
  mov rax, [rbp-16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] $7.1:rax 
  .loc 3 1504 20
  # object_type.1: @IR_Type = load_struct_member($7.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:rbx 
  .loc 3 1505 9
  # $9.1: Boolean = call(is_343, object_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-25], rbx
  call is_343
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $9.1:rax 
  .loc 3 1505 9
  # $10.1: Boolean = $9.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:rbx 
  # jump($10.1, .LABEL__deduce_member_access_expression_type_139__4, .LABEL__deduce_member_access_expression_type_139__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__deduce_member_access_expression_type_139__5
.LABEL__deduce_member_access_expression_type_139__4:
  .loc 3 1506 15
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] $11.1:rbx 
  .loc 3 1506 36
  # $12.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-25]
  mov r14, [r15]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:r15:[rbp-25] $10.1:[rbp-26] $11.1:rbx $12.1:r14 
  .loc 3 1506 9
  # call(abort_141, $11.1, $12.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_141
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__deduce_member_access_expression_type_139__5:
  .loc 3 1508 20
  # object_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-25]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax 
  .loc 3 1509 38
  # $14.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax $14.1:r15 
  .loc 3 1509 38
  # $15.1: @String = load_struct_member($14.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $14.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rax $15.1:r14 
  .loc 3 1509 15
  # member.1: @IR_Struct_Type_Member = call(get_member_150, object_type.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-34], rax
  call get_member_150
  # [discarded value]: $15.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax 
  .loc 3 1510 9
  # $17.1: Boolean = member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__deduce_member_access_expression_type_139__6, .LABEL__deduce_member_access_expression_type_139__7)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__deduce_member_access_expression_type_139__7
.LABEL__deduce_member_access_expression_type_139__6:
  .loc 3 1511 15
  # $18.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $18.1:rbx 
  .loc 3 1511 15
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:r15 
  .loc 3 1511 54
  # $20.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-34]
  mov r14, [rbx+8]
  # [live values]: expression.1:rax:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:rbx:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:r15 $20.1:r14 
  .loc 3 1511 48
  # $21.1: @String = call(clone_345, $20.1)
  mov rdi, r14
  mov [rbp-51], r15
  call clone_345
  # [discarded value]: $20.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $21.1:rax 
  .loc 3 1511 48
  # $22.1: @String = call(append_354, $21.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_225[rip] # " has no such member: "
  call append_354
  # [discarded value]: $21.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax 
  .loc 3 1511 111
  # $23.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax $23.1:r15 
  .loc 3 1511 111
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: expression.1:rbx:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $22.1:rax $24.1:r14 
  .loc 3 1511 48
  # $25.1: @String = call(append_354, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $19.1:[rbp-51] $25.1:rax 
  .loc 3 1511 9
  # call(abort_314, $19.1, $25.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_314
  # [discarded value]: $25.1
  # [discarded value]: $19.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] 
.LABEL__deduce_member_access_expression_type_139__7:
  .loc 3 1513 9
  # $26.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $26.1:rbx 
  .loc 3 1513 9
  # $27.1: Boolean = call(is_343, $26.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $26.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:rax 
  # jump($27.1, .LABEL__deduce_member_access_expression_type_139__8, .LABEL__deduce_member_access_expression_type_139__9)
  test al, al
  mov [rbp-44], al
  jz .LABEL__deduce_member_access_expression_type_139__9
.LABEL__deduce_member_access_expression_type_139__8:
  .loc 3 1514 39
  # $28.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $28.1:rbx 
  .loc 3 1514 16
  # $29.1: @IR_Pointer_Type = call(create_ir_pointer_type_145, $28.1)
  mov rdi, rbx
  call create_ir_pointer_type_145
  # [discarded value]: $28.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $29.1:rax 
  .loc 3 1514 9
  # return($29.1)
  mov [rbp-52], rax
  jmp .LABEL__deduce_member_access_expression_type_139__end
  # [discarded value]: $29.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] 
.LABEL__deduce_member_access_expression_type_139__9:
  .loc 3 1516 12
  # $30.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:rax:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] $30.1:rbx 
  .loc 3 1516 5
  # return($30.1)
  mov rax, rbx
  mov [rbp-52], rbx
  jmp .LABEL__deduce_member_access_expression_type_139__end
  # [discarded value]: $30.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] $27.1:[rbp-44] 
  # [discarded value]: $27.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] $17.1:[rbp-43] 
  # [discarded value]: $17.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] object_type.1:[rbp-34] member.1:[rbp-42] 
  # [discarded value]: member.1
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] object_type.1:[rbp-25] 
  # [discarded value]: object_type.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] object_type.1:[rbp-16] 
  # [discarded value]: object_type.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_member_access_expression_type_139__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_member_access_expression_type_139__stack_frame_size: .word 64

  .loc 3 1519 1
  .text
deduce_variable_expression_type_140:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_variable_expression_type_140__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_variable_expression_type_140__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1520 35
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1520 35
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1520 17
  # variable.1: @IR_Variable = call(get_variable_68, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  call get_variable_68
  # [discarded value]: $2.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-8] variable.1:rax 
  .loc 3 1521 9
  # $4.1: Boolean = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__deduce_variable_expression_type_140__2, .LABEL__deduce_variable_expression_type_140__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__deduce_variable_expression_type_140__3
.LABEL__deduce_variable_expression_type_140__2:
  .loc 3 1522 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 3 1522 36
  # $6.1: @String = call(clone_345, "Unknown variable: ")
  lea rdi, .LABEL__string_234[rip] # "Unknown variable: "
  mov [rbp-25], rbx
  call clone_345
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 3 1522 71
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $7.1:r15 
  .loc 3 1522 71
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $8.1:r14 
  .loc 3 1522 36
  # $9.1: @String = call(append_354, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $9.1:rax 
  .loc 3 1522 9
  # call(abort_314, $5.1, $9.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_314
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__deduce_variable_expression_type_140__3:
  .loc 3 1524 12
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: expression.1:[rbp-8] variable.1:rax:[rbp-16] $4.1:[rbp-17] $10.1:rbx 
  .loc 3 1524 5
  # return($10.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__deduce_variable_expression_type_140__end
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_variable_expression_type_140__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_variable_expression_type_140__stack_frame_size: .word 32

  .loc 1 48 1
  .text
abort_141:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_141__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_141__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # unexpected_type.1: @Object_Type = load_variable(unexpected_type)
  # [live values]: location.1:rdi unexpected_type.1:rsi 
  .loc 1 49 5
  # $1.1: @FILE = call(end_line_340, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_340
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $1.1:rax 
  .loc 1 49 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $2.1:rax 
  .loc 1 49 5
  # $3.1: @FILE = call(write_317, $2.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_317
  # [discarded value]: $2.1
  # [discarded value]: location.1
  # [live values]: unexpected_type.1:[rbp-16] $3.1:rax 
  .loc 1 49 5
  # $4.1: @FILE = call(write_337, $3.1, ": Unexpected type: ")
  mov rdi, rax
  lea rsi, .LABEL__string_235[rip] # ": Unexpected type: "
  call write_337
  # [discarded value]: $3.1
  # [live values]: unexpected_type.1:[rbp-16] $4.1:rax 
  .loc 1 49 85
  # $5.1: @String = load_struct_member_address(unexpected_type.1, name)
  mov rbx, [rbp-16]
  mov r15, rbx
  add r15, 8
  # [live values]: unexpected_type.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  .loc 1 49 5
  # $6.1: @FILE = call(write_337, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: unexpected_type.1
  # [live values]: $6.1:rax 
  .loc 1 49 5
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: 
  .loc 1 50 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_141__end:
  mov rsp, rbp
  pop rbp
  ret

abort_141__stack_frame_size: .word 16

  .loc 4 7 1
  .text
next_142:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_142__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_142__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 8 18
  # $1.1: Int = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 4 8 18
  # $2.1: Int = $1.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 4 8 5
  # store_struct_member(self.1, value, $2.1)
  mov QWORD PTR [rdi], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:rdi 
  .loc 4 9 12
  # $3.1: Int = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 4 9 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__next_142__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__next_142__end:
  mov rsp, rbp
  pop rbp
  ret

next_142__stack_frame_size: .word 16

  .loc 4 12 1
  .text
reset_143:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_143__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_143__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 13 5
  # store_struct_member(self.1, value, 0)
  mov QWORD PTR [rdi], 0
  # [live values]: self.1:rdi 
  .loc 4 14 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__reset_143__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_143__end:
  mov rsp, rbp
  pop rbp
  ret

reset_143__stack_frame_size: .word 16

  .loc 5 41 1
  .text
equals_144:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_144__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_144__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 5 42 9
  # $2.1: Boolean = call(is_343, self.1, IR_Pointer_Type)
  mov [rbp-8], rsi
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-16], rdi
  call is_343
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__equals_144__2, .LABEL__equals_144__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__equals_144__3
.LABEL__equals_144__2:
  .loc 5 42 37
  # $2.2: Boolean = call(is_343, other.1, IR_Pointer_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Pointer_Type[rip]
  call is_343
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(.LABEL__equals_144__3)
  mov [rbp-17], al
.LABEL__equals_144__3:
  .loc 5 42 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, .LABEL__equals_144__4, .LABEL__equals_144__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__equals_144__5
.LABEL__equals_144__4:
  .loc 5 43 17
  # self.1: @IR_Pointer_Type = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] self.1:rax 
  .loc 5 44 18
  # other.1: @IR_Pointer_Type = other.1
  mov rbx, [rbp-8]
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] self.1:rax other.1:rbx 
  .loc 5 45 16
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov r15, [rax+16]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] other.1:rbx $6.1:r15 
  .loc 5 45 41
  # $7.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov rax, [rbx+16]
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $6.1:r15 $7.1:rax 
  .loc 5 45 16
  # $8.1: Boolean = call(equals_144, $6.1, $7.1)
  mov rdi, r15
  mov rsi, rax
  call equals_144
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $8.1:rax 
  .loc 5 45 9
  # return($8.1)
  mov [rbp-18], al
  jmp .LABEL__equals_144__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
.LABEL__equals_144__5:
  .loc 5 47 12
  # $9.1: Boolean = self.1 == other.1
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-8]
  sete bl
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] $9.1:rbx 
  .loc 5 47 5
  # return($9.1)
  mov al, bl
  mov [rbp-18], bl
  jmp .LABEL__equals_144__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] $2.3:[rbp-17] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__equals_144__end:
  mov rsp, rbp
  pop rbp
  ret

equals_144__stack_frame_size: .word 32

  .loc 5 50 1
  .text
create_ir_pointer_type_145:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_pointer_type_145__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_pointer_type_145__1:
  # pointed_type.1: @IR_Type = load_variable(pointed_type)
  # [live values]: pointed_type.1:rdi 
  .loc 5 51 18
  # $1.1: @String = call(clone_345, "@")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_236[rip] # "@"
  call clone_345
  # [live values]: pointed_type.1:[rbp-8] $1.1:rax 
  .loc 5 51 36
  # $2.1: @String = load_struct_member(pointed_type.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: pointed_type.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  .loc 5 51 18
  # type_name.1: @String = call(append_354, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: pointed_type.1:[rbp-8] type_name.1:rax 
  .loc 5 52 12
  # $4.1: @IR_Pointer_Type = new IR_Pointer_Type(object_type = IR_Pointer_Type, name = type_name.1, pointed_type = pointed_type.1)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Pointer_Type
  mov rbx, IR_Pointer_Type[rip]
  mov [rax], rbx
  #     .name = type_name.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .pointed_type = pointed_type.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: type_name.1
  # [discarded value]: pointed_type.1
  # [live values]: $4.1:rax 
  .loc 5 52 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_pointer_type_145__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__create_ir_pointer_type_145__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_pointer_type_145__stack_frame_size: .word 16

  .loc 5 59 1
  .text
create_ir_array_type_146:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_array_type_146__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_array_type_146__1:
  # item_type.1: @IR_Type = load_variable(item_type)
  # [live values]: item_type.1:rdi 
  # size_expression.1: @AST_Expression = load_variable(size_expression)
  # [live values]: item_type.1:rdi size_expression.1:rsi 
  .loc 5 60 18
  # $1.1: @String = call(clone_345, "[")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_237[rip] # "["
  mov [rbp-16], rsi
  call clone_345
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $1.1:rax 
  .loc 5 60 36
  # $2.1: @String = load_struct_member(item_type.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: item_type.1:rbx:[rbp-8] size_expression.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 5 60 18
  # $3.1: @String = call(append_354, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] $3.1:rax 
  .loc 5 60 18
  # type_name.1: @String = call(append_354, $3.1, "]")
  mov rdi, rax
  lea rsi, .LABEL__string_238[rip] # "]"
  call append_354
  # [discarded value]: $3.1
  # [live values]: item_type.1:[rbp-8] size_expression.1:[rbp-16] type_name.1:rax 
  .loc 5 61 12
  # $5.1: @IR_Array_Type = new IR_Array_Type(object_type = IR_Array_Type, name = type_name.1, pointed_type = item_type.1, size_expression = size_expression.1)
  mov [rbp-24], rax
  mov rdi, 32
  call malloc
  #     .object_type = IR_Array_Type
  mov rbx, IR_Array_Type[rip]
  mov [rax], rbx
  #     .name = type_name.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .pointed_type = item_type.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .size_expression = size_expression.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: type_name.1
  # [discarded value]: size_expression.1
  # [discarded value]: item_type.1
  # [live values]: $5.1:rax 
  .loc 5 61 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_array_type_146__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_ir_array_type_146__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_array_type_146__stack_frame_size: .word 32

  .loc 5 74 1
  .text
create_ir_function_type_147:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_function_type_147__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_function_type_147__1:
  # parameters.1: @List = load_variable(parameters)
  # [live values]: parameters.1:rdi 
  # return_type.1: @IR_Type = load_variable(return_type)
  # [live values]: parameters.1:rdi return_type.1:rsi 
  .loc 14 4 19
  # $2.1: @Int8 = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  mov [rbp-16], rsi
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:rax 
  .loc 5 75 18
  # $3.1: @String = new String(data = $2.1, data_size = 16, length = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .data = $2.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $2.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  .loc 5 75 18
  # type_name.1: @String = call(append_354, $3.1, "(")
  mov rdi, rax
  lea rsi, .LABEL__string_239[rip] # "("
  call append_354
  # [discarded value]: $3.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rax 
  .loc 5 76 24
  # parameters_item.1: @List_Item = load_struct_member(parameters.1, first_item)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: parameters.1:rbx:[rbp-8] return_type.1:[rbp-16] type_name.1:rax parameters_item.1:r15 
  # jump(.LABEL__create_ir_function_type_147__2)
  mov [rbp-24], rax
  mov [rbp-32], r15
.LABEL__create_ir_function_type_147__2:
  # parameters_item.2: @List_Item = phi(parameters_item.1, parameters_item.4)
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  .loc 5 77 12
  # $6.1: Boolean = parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:rax 
  # jump($6.1, .LABEL__create_ir_function_type_147__3, .LABEL__create_ir_function_type_147__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_function_type_147__4
.LABEL__create_ir_function_type_147__3:
  .loc 5 78 22
  # parameter.1: @IR_Function_Type_Parameter = load_struct_member(parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx 
  .loc 5 79 26
  # $9.1: @String = load_struct_member(parameter.1, name)
  mov r15, [rbx]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx $9.1:r15 
  .loc 5 79 9
  # $10.1: @String = call(append_354, type_name.1, $9.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-41], rbx
  call append_354
  # [discarded value]: $9.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $10.1:rax 
  .loc 5 79 9
  # $11.1: @String = call(append_354, $10.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call append_354
  # [discarded value]: $10.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $11.1:rax 
  .loc 5 79 62
  # $12.1: @IR_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $12.1:r15 
  .loc 5 79 62
  # $13.1: @String = load_struct_member($12.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $12.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $13.1:rbx 
  .loc 5 79 9
  # $14.1: @String = call(append_354, $11.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call append_354
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 80 27
  # parameters_item.4: @List_Item = load_struct_member(parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] 
  .loc 5 81 13
  # $16.1: Boolean = parameters_item.4 != null
  cmp rbx, 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] $16.1:rax 
  # jump($16.1, .LABEL__create_ir_function_type_147__5, .LABEL__create_ir_function_type_147__2)
  test al, al
  mov [rbp-34], al
  mov [rbp-32], rbx
  jz .LABEL__create_ir_function_type_147__2
.LABEL__create_ir_function_type_147__5:
  .loc 5 82 13
  # $17.1: @String = call(append_354, type_name.1, ", ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_38[rip] # ", "
  call append_354
  # [discarded value]: $17.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # jump(.LABEL__create_ir_function_type_147__2)
  jmp .LABEL__create_ir_function_type_147__2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] 
  # [discarded value]: parameters_item.4
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
.LABEL__create_ir_function_type_147__4:
  .loc 5 85 5
  # $18.1: @String = call(append_354, type_name.1, ") -> ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_240[rip] # ") -> "
  call append_354
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax 
  .loc 5 85 38
  # $19.1: @String = load_struct_member(return_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:rbx:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax $19.1:r15 
  .loc 5 85 5
  # $20.1: @String = call(append_354, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 87 12
  # $21.1: @IR_Function_Type = new IR_Function_Type(object_type = IR_Function_Type, name = type_name.1, parameters = parameters.1, return_type = return_type.1)
  mov rdi, 32
  call malloc
  #     .object_type = IR_Function_Type
  mov rbx, IR_Function_Type[rip]
  mov [rax], rbx
  #     .name = type_name.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .parameters = parameters.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .return_type = return_type.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: parameters.1
  # [live values]: return_type.1:r14:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  .loc 5 87 5
  # return($21.1)
  mov [rbp-41], rax
  jmp .LABEL__create_ir_function_type_147__end
  # [discarded value]: $21.1
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # [discarded value]: parameters_item.2
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [discarded value]: parameters_item.1
  # [discarded value]: type_name.1
  # [discarded value]: return_type.1
  # [live values]: 
.LABEL__create_ir_function_type_147__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_function_type_147__stack_frame_size: .word 48

  .loc 5 102 1
  .text
create_ir_struct_type_148:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_struct_type_148__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_struct_type_148__1:
  # name.1: @String = load_variable(name)
  # [live values]: name.1:rdi 
  # statement.1: @AST_Struct_Statement = load_variable(statement)
  # [live values]: name.1:rdi statement.1:rsi 
  .loc 5 92 22
  # $1.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: name.1:[rbp-16] statement.1:[rbp-8] $1.1:rax 
  .loc 5 103 12
  # $2.1: @IR_Struct_Type = new IR_Struct_Type(object_type = IR_Struct_Type, name = name.1, statement = statement.1, base_type = null, members = $1.1)
  mov [rbp-24], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Struct_Type
  mov rbx, IR_Struct_Type[rip]
  mov [rax], rbx
  #     .name = name.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .base_type = null
  mov QWORD PTR [rax+16], 0
  #     .members = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .statement = statement.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $1.1
  # [discarded value]: statement.1
  # [discarded value]: name.1
  # [live values]: $2.1:rax 
  .loc 5 103 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_struct_type_148__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_ir_struct_type_148__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_struct_type_148__stack_frame_size: .word 32

  .loc 5 106 1
  .text
add_member_149:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_member_149__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_member_149__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  .loc 5 107 15
  # member.1: @IR_Struct_Type_Member = new IR_Struct_Type_Member(struct_type = self.1, name = name.1, type = type.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  #     .struct_type = self.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .name = name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .type = type.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: type.1
  # [discarded value]: name.1
  # [live values]: self.1:rbx:[rbp-24] member.1:rax 
  .loc 5 108 5
  # $2.1: @List = load_struct_member(self.1, members)
  mov r15, [rbx+24]
  # [discarded value]: self.1
  # [live values]: member.1:rax $2.1:r15 
  .loc 5 108 5
  # call(append_318, $2.1, member.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_318
  # [discarded value]: $2.1
  # [live values]: member.1:[rbp-8] 
  .loc 5 109 5
  # return(member.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_member_149__end
  # [discarded value]: member.1
  # [live values]: 
.LABEL__add_member_149__end:
  mov rsp, rbp
  pop rbp
  ret

add_member_149__stack_frame_size: .word 32

  .loc 5 112 1
  .text
get_member_150:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_150__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_150__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: struct_type.1:rdi name.1:rsi 
  # jump(.LABEL__get_member_150__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__get_member_150__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] 
  .loc 5 115 25
  # $1.1: @List = load_struct_member(struct_type.2, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] $1.1:rbx 
  .loc 5 115 25
  # members_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] members_item.1:r15 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], r15
.LABEL__get_member_150__4:
  # members_item.2: @List_Item = phi(members_item.1, members_item.5)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  .loc 5 116 16
  # $3.1: Boolean = members_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__get_member_150__5, .LABEL__get_member_150__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_member_150__6
.LABEL__get_member_150__5:
  .loc 5 117 23
  # member.1: @IR_Struct_Type_Member = load_struct_member(members_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx 
  .loc 5 118 17
  # $6.1: @String = load_struct_member(member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx $6.1:r15 
  .loc 5 118 17
  # $7.1: Boolean = call(equals_346, $6.1, name.1)
  mov rdi, r15
  mov rsi, [rbp-8]
  mov [rbp-33], rbx
  call equals_346
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__get_member_150__7, .LABEL__get_member_150__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_member_150__8
.LABEL__get_member_150__7:
  .loc 5 119 17
  # return(member.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
.LABEL__get_member_150__8:
  .loc 5 121 28
  # members_item.5: @List_Item = load_struct_member(members_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:rbx:[rbp-24] 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], rbx
  jmp .LABEL__get_member_150__4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:[rbp-24] 
  # [discarded value]: members_item.5
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] 
  # [discarded value]: member.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_member_150__6:
  .loc 5 123 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] 
  .loc 5 124 13
  # $10.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] $10.1:rax 
  # jump($10.1, .LABEL__get_member_150__10, .LABEL__get_member_150__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-16], rbx
  jz .LABEL__get_member_150__2
.LABEL__get_member_150__10:
  .loc 5 125 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # [discarded value]: members_item.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [discarded value]: members_item.1
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__get_member_150__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_150__stack_frame_size: .word 48

  .loc 5 130 1
  .text
is_base_type_151:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_base_type_151__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_base_type_151__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type.1: @IR_Struct_Type = load_variable(other)
  # [live values]: self.1:rdi struct_type.1:rsi 
  # jump(.LABEL__is_base_type_151__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__is_base_type_151__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 133 21
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 133 13
  # $2.1: Boolean = self.1 == $1.1
  cmp QWORD PTR [rbp-16], rbx
  sete r15b
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__is_base_type_151__4, .LABEL__is_base_type_151__5)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__is_base_type_151__5
.LABEL__is_base_type_151__4:
  .loc 5 134 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_base_type_151__5:
  .loc 5 136 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] 
  .loc 5 137 13
  # $4.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_base_type_151__7, .LABEL__is_base_type_151__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_base_type_151__2
.LABEL__is_base_type_151__7:
  .loc 5 138 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_base_type_151__end:
  mov rsp, rbp
  pop rbp
  ret

is_base_type_151__stack_frame_size: .word 32

  .loc 5 143 1
  .text
is_object_type_152:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_object_type_152__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_object_type_152__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # jump(.LABEL__is_object_type_152__2)
  mov [rbp-8], rdi
.LABEL__is_object_type_152__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 146 13
  # $1.1: @String = load_struct_member(struct_type.2, name)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 146 13
  # $2.1: Boolean = call(equals_346, $1.1, "Object")
  mov rdi, rbx
  lea rsi, .LABEL__string_241[rip] # "Object"
  call equals_346
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__is_object_type_152__4, .LABEL__is_object_type_152__5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__is_object_type_152__5
.LABEL__is_object_type_152__4:
  .loc 5 147 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__is_object_type_152__5:
  .loc 5 149 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] 
  .loc 5 150 13
  # $4.1: Boolean = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_object_type_152__7, .LABEL__is_object_type_152__2)
  test al, al
  mov [rbp-10], al
  mov [rbp-8], rbx
  jz .LABEL__is_object_type_152__2
.LABEL__is_object_type_152__7:
  .loc 5 151 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_object_type_152__end:
  mov rsp, rbp
  pop rbp
  ret

is_object_type_152__stack_frame_size: .word 16

  .loc 5 164 1
  .text
dump_ir_value_153:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_value_153__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_value_153__1:
  # value.1: @IR_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 165 5
  # $1.1: @FILE = call(flush_341, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_341
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] 
  .loc 5 166 11
  # $2.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  call clone_345
  # [live values]: value.1:[rbp-8] $2.1:rax 
  .loc 5 166 46
  # $3.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: value.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 166 46
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [live values]: $2.1:rax $3.1:r15 $4.1:rbx 
  .loc 5 166 11
  # $5.1: @String = call(append_354, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_354
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 166 5
  # call(abort_342, $5.1)
  mov rdi, rax
  call abort_342
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__dump_ir_value_153__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_value_153__stack_frame_size: .word 16

  .loc 5 169 1
  .text
write_154:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_154__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_154__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: file.1:rdi value.1:rsi 
  # $1.1: Boolean = load_variable(check_users)
  # [live values]: file.1:rdi value.1:rsi $1.1:rdx 
  # jump($1.1, .LABEL__write_154__2, .LABEL__write_154__3)
  test dl, dl
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_154__3
.LABEL__write_154__2:
  .loc 5 170 24
  # $2.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  .loc 5 170 24
  # $3.1: Int = load_struct_member($2.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:r15 
  .loc 5 170 24
  # $4.1: Boolean = $3.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $4.1:rbx 
  .loc 5 170 9
  # $1.2: Boolean = $4.1
  mov [rbp-18], bl
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:rbx:[rbp-1] 
  # jump(.LABEL__write_154__3)
  mov [rbp-1], bl
.LABEL__write_154__3:
  .loc 5 170 9
  # $1.3: Boolean = phi($1.1, $1.2)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # jump($1.3, .LABEL__write_154__4, .LABEL__write_154__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__write_154__5
.LABEL__write_154__4:
  .loc 5 171 9
  # $5.1: @FILE = call(flush_341, file.1)
  mov rdi, [rbp-17]
  call flush_341
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  .loc 5 172 13
  # $6.1: Boolean = call(is_343, value.1, IR_Variable_Value)
  mov rdi, [rbp-9]
  mov rsi, IR_Variable_Value[rip]
  call is_343
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:rax 
  # jump($6.1, .LABEL__write_154__6, .LABEL__write_154__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_154__7
.LABEL__write_154__6:
  .loc 5 173 22
  # value.1: @IR_Variable_Value = value.1
  mov rax, [rbp-9]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] value.1:rax 
  .loc 5 174 30
  # value_version.1: Int = load_struct_member(value.1, version)
  mov rbx, [rax+56]
  # [discarded value]: value_version.1
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__7)
.LABEL__write_154__7:
  .loc 5 176 9
  # $9.1: @FILE = call(write_337, stderr, "Found ")
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_242[rip] # "Found "
  call write_337
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax 
  .loc 5 176 38
  # $10.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $10.1:r15 
  .loc 5 176 38
  # $11.1: @String = load_struct_member_address($10.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $10.1:r15 $11.1:r14 
  .loc 5 176 9
  # $12.1: @FILE = call(write_337, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $12.1:rax 
  .loc 5 176 9
  # $13.1: @FILE = call(write_337, $12.1, " without user instructions: ")
  mov rdi, rax
  lea rsi, .LABEL__string_243[rip] # " without user instructions: "
  call write_337
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  .loc 5 177 9
  # $14.1: (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $14.1:rbx 
  .loc 5 177 9
  # $15.1: @FILE = call($14.1, value.1, stderr)
  mov rdi, rax
  mov rsi, stderr[rip]
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  .loc 5 178 9
  # $16.1: @FILE = call(end_line_340, stderr)
  mov rdi, stderr[rip]
  call end_line_340
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__5)
.LABEL__write_154__5:
  .loc 5 180 12
  # $17.1: (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $17.1:rbx 
  .loc 5 180 12
  # $18.1: @FILE = call($17.1, value.1, file.1)
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rax, rbx
  call rax
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $18.1:rax 
  .loc 5 180 5
  # return($18.1)
  mov [rbp-26], rax
  jmp .LABEL__write_154__end
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # [discarded value]: $1.3
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [discarded value]: $1.2
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [discarded value]: value.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_154__end:
  mov rsp, rbp
  pop rbp
  ret

write_154__stack_frame_size: .word 32

  .loc 5 199 1
  .text
dump_ir_undefined_value_155:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_undefined_value_155__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_undefined_value_155__1:
  # value.1: @IR_Value = load_variable(value)
  # [discarded value]: value.1
  # [live values]: 
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rsi 
  .loc 5 200 12
  # $1.1: @FILE = call(write_337, file.1, "undefined")
  mov rdi, rsi
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_244[rip] # "undefined"
  call write_337
  # [discarded value]: file.1
  # [live values]: $1.1:rax 
  .loc 5 200 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_undefined_value_155__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__dump_ir_undefined_value_155__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_undefined_value_155__stack_frame_size: .word 16

  .loc 5 207 1
  .text
dump_ir_constant_value_156:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_constant_value_156__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_constant_value_156__1:
  # $1.1: @IR_Constant_Value = load_variable(value)
  # [live values]: $1.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: $1.1:rdi file.1:rsi 
  .loc 5 208 23
  # $2.1: @Literal_Token = load_struct_member($1.1, literal)
  mov rax, [rdi+48]
  # [discarded value]: $1.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 208 23
  # $3.1: @String = load_struct_member($2.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 208 12
  # $4.1: @FILE = call(write_337, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 208 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_constant_value_156__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_constant_value_156__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_constant_value_156__stack_frame_size: .word 16

  .loc 5 219 1
  .text
get_member_value_157:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_value_157__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_value_157__1:
  # self.1: @IR_Struct_Literal_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  .loc 5 220 19
  # $1.1: @List = load_struct_member(self.1, links)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: struct_type_member.1:rsi $1.1:rax 
  .loc 5 220 19
  # links_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: struct_type_member.1:rsi links_item.1:rbx 
  # jump(.LABEL__get_member_value_157__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
.LABEL__get_member_value_157__2:
  # links_item.2: @List_Item = phi(links_item.1, links_item.5)
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] 
  .loc 5 221 12
  # $3.1: Boolean = links_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_member_value_157__3, .LABEL__get_member_value_157__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_member_value_157__4
.LABEL__get_member_value_157__3:
  .loc 5 222 17
  # link.1: @IR_Link = load_struct_member(links_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:rax:[rbp-8] $3.1:[rbp-17] link.1:rbx 
  .loc 5 223 13
  # $6.1: Boolean = call(is_343, link.1, IR_Struct_Literal_Member_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rbp-25], rbx
  call is_343
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:rax 
  # jump($6.1, .LABEL__get_member_value_157__5, .LABEL__get_member_value_157__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_member_value_157__6
.LABEL__get_member_value_157__5:
  .loc 5 224 21
  # link.1: @IR_Struct_Literal_Member_Value_Link = link.1
  mov rax, [rbp-25]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax 
  .loc 5 225 17
  # $8.1: @IR_Struct_Type_Member = load_struct_member(link.1, struct_type_member)
  mov rbx, [rax+24]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax $8.1:rbx 
  .loc 5 225 17
  # $9.1: Boolean = $8.1 == struct_type_member.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $8.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax $9.1:r15 
  # jump($9.1, .LABEL__get_member_value_157__7, .LABEL__get_member_value_157__6)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__get_member_value_157__6
.LABEL__get_member_value_157__7:
  .loc 5 226 24
  # $10.1: @IR_Value = load_struct_member(link.1, value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax:[rbp-34] $9.1:[rbp-35] $10.1:rbx 
  .loc 5 226 17
  # return($10.1)
  mov rax, rbx
  mov [rbp-43], rbx
  jmp .LABEL__get_member_value_157__end
  # [discarded value]: $10.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] 
.LABEL__get_member_value_157__6:
  .loc 5 229 22
  # links_item.5: @List_Item = load_struct_member(links_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] links_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_member_value_157__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_member_value_157__2
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] links_item.5:[rbp-8] 
  # [discarded value]: links_item.5
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] 
  # [discarded value]: $9.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] 
  # [discarded value]: link.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] 
  # [discarded value]: link.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__get_member_value_157__4:
  .loc 5 231 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_member_value_157__end
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] 
  # [discarded value]: links_item.2
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] 
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] 
  # [discarded value]: links_item.1
  # [discarded value]: struct_type_member.1
  # [live values]: 
.LABEL__get_member_value_157__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_value_157__stack_frame_size: .word 48

  .loc 5 234 1
  .text
set_member_value_158:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR set_member_value_158__stack_frame_size[rip]
  sub rsp, rax
.LABEL__set_member_value_158__1:
  # self.1: @IR_Struct_Literal_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi struct_type_member.1:rsi value.1:rdx 
  .loc 5 235 26
  # member_value_link.1: @IR_Struct_Literal_Member_Value_Link = new IR_Struct_Literal_Member_Value_Link(object_type = IR_Struct_Literal_Member_Value_Link, value = value.1, struct_type_member = struct_type_member.1, back_link = undefined)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 32
  call malloc
  #     .object_type = IR_Struct_Literal_Member_Value_Link
  mov rbx, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  #     .struct_type_member = struct_type_member.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-24] value.1:rbx:[rbp-8] member_value_link.1:rax 
  .loc 5 236 35
  # $2.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = self.1, back_link = member_value_link.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = member_value_link.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .value = self.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:r15:[rbp-24] value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] $2.1:rax 
  .loc 5 236 5
  # store_struct_member(member_value_link.1, back_link, $2.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $2.1
  # [live values]: self.1:r15:[rbp-24] value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] 
  .loc 5 237 5
  # $3.1: @List = load_struct_member(self.1, links)
  mov rax, [r15+32]
  # [discarded value]: self.1
  # [live values]: value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] $3.1:rax 
  .loc 5 237 5
  # call(append_318, $3.1, member_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_318
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] member_value_link.1:[rbp-32] 
  .loc 5 238 5
  # $4.1: @List = load_struct_member(value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: value.1
  # [live values]: member_value_link.1:[rbp-32] $4.1:rbx 
  .loc 5 238 24
  # $5.1: @IR_Required_By_Value_Link = load_struct_member(member_value_link.1, back_link)
  mov rax, [rbp-32]
  mov r15, [rax+8]
  # [discarded value]: member_value_link.1
  # [live values]: $4.1:rbx $5.1:r15 
  .loc 5 238 5
  # call(append_318, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  call append_318
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: 
  # return()
  jmp .LABEL__set_member_value_158__end
  # [live values]: 
.LABEL__set_member_value_158__end:
  mov rsp, rbp
  pop rbp
  ret

set_member_value_158__stack_frame_size: .word 32

  .loc 5 241 1
  .text
dump_IR_Struct_Literal_Value_159:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_IR_Struct_Literal_Value_159__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_IR_Struct_Literal_Value_159__1:
  # value.1: @IR_Struct_Literal_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 243 16
  # $2.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rdi+8]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 243 16
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 243 5
  # $4.1: @FILE = call(write_337, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_337
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] $4.1:rax 
  .loc 5 243 5
  # $5.1: @FILE = call(write_339, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 244 25
  # $6.1: @List = load_struct_member(value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-16] $6.1:rbx 
  .loc 5 244 25
  # value_links_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov rax, [rbx]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-16] value_links_item.1:rax 
  .loc 5 245 5
  # is_first_value_link.1: Boolean = true
  mov bl, 1
  # [live values]: file.1:[rbp-16] value_links_item.1:rax is_first_value_link.1:rbx 
  # jump(.LABEL__dump_IR_Struct_Literal_Value_159__2)
  mov [rbp-24], rax
  mov [rbp-25], bl
.LABEL__dump_IR_Struct_Literal_Value_159__2:
  # is_first_value_link.4: Boolean = phi(is_first_value_link.1, is_first_value_link.5)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] 
  # value_links_item.2: @List_Item = phi(value_links_item.1, value_links_item.5)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] 
  .loc 5 246 12
  # $8.1: Boolean = value_links_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:rax 
  # jump($8.1, .LABEL__dump_IR_Struct_Literal_Value_159__3, .LABEL__dump_IR_Struct_Literal_Value_159__4)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_IR_Struct_Literal_Value_159__4
.LABEL__dump_IR_Struct_Literal_Value_159__3:
  .loc 5 247 23
  # value_link.1: @IR_Link = load_struct_member(value_links_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:rax:[rbp-24] $8.1:[rbp-26] value_link.1:rbx 
  .loc 5 248 13
  # $11.1: Boolean = call(is_343, value_link.1, IR_Struct_Literal_Member_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rbp-34], rbx
  call is_343
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__dump_IR_Struct_Literal_Value_159__5, .LABEL__dump_IR_Struct_Literal_Value_159__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__dump_IR_Struct_Literal_Value_159__6
.LABEL__dump_IR_Struct_Literal_Value_159__5:
  .loc 5 249 27
  # value_link.1: @IR_Struct_Literal_Member_Value_Link = value_link.1
  mov rax, [rbp-34]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax 
  # jump(is_first_value_link.4, .LABEL__dump_IR_Struct_Literal_Value_159__7, .LABEL__dump_IR_Struct_Literal_Value_159__9)
  mov bl, [rbp-25]
  test bl, bl
  mov [rbp-43], rax
  jz .LABEL__dump_IR_Struct_Literal_Value_159__9
.LABEL__dump_IR_Struct_Literal_Value_159__7:
  .loc 5 251 17
  # is_first_value_link.3: Boolean = false
  mov al, 0
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:rax:[rbp-25] 
  # jump(.LABEL__dump_IR_Struct_Literal_Value_159__8)
  mov [rbp-25], al
.LABEL__dump_IR_Struct_Literal_Value_159__8:
  # is_first_value_link.6: Boolean = phi(is_first_value_link.3, is_first_value_link.4)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  .loc 5 255 24
  # $14.1: @IR_Struct_Type_Member = load_struct_member(value_link.1, struct_type_member)
  mov rax, [rbp-43]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $14.1:rbx 
  .loc 5 255 24
  # $15.1: @String = load_struct_member($14.1, name)
  mov r15, [rbx+8]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $15.1:r15 
  .loc 5 255 13
  # $16.1: @FILE = call(write_337, file.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call write_337
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $16.1:rax 
  .loc 5 255 13
  # $17.1: @FILE = call(write_337, $16.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_85[rip] # " = "
  call write_337
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $17.1:rax 
  .loc 5 255 79
  # $18.1: @IR_Value = load_struct_member(value_link.1, value)
  mov rbx, [rbp-43]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rbx:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $17.1:rax $18.1:r15 
  .loc 5 255 13
  # $19.1: @FILE = call(write_154, $17.1, $18.1, false)
  mov rdi, rax
  mov rsi, r15
  mov dl, 0
  call write_154
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # jump(.LABEL__dump_IR_Struct_Literal_Value_159__6)
.LABEL__dump_IR_Struct_Literal_Value_159__6:
  # is_first_value_link.5: Boolean = phi(is_first_value_link.4, is_first_value_link.6)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  .loc 5 257 28
  # value_links_item.5: @List_Item = load_struct_member(value_links_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] value_links_item.5:rbx:[rbp-24] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # jump(.LABEL__dump_IR_Struct_Literal_Value_159__2)
  mov [rbp-24], rbx
  jmp .LABEL__dump_IR_Struct_Literal_Value_159__2
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] value_links_item.5:[rbp-24] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [discarded value]: value_links_item.5
  # [discarded value]: is_first_value_link.5
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [discarded value]: is_first_value_link.6
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] 
  # [discarded value]: is_first_value_link.3
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
.LABEL__dump_IR_Struct_Literal_Value_159__9:
  .loc 5 253 17
  # $13.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # jump(.LABEL__dump_IR_Struct_Literal_Value_159__8)
  jmp .LABEL__dump_IR_Struct_Literal_Value_159__8
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # [discarded value]: value_link.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] 
  # [discarded value]: value_link.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] 
.LABEL__dump_IR_Struct_Literal_Value_159__4:
  .loc 5 259 12
  # $21.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_339
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] $21.1:rax 
  .loc 5 259 5
  # return($21.1)
  mov [rbp-34], rax
  jmp .LABEL__dump_IR_Struct_Literal_Value_159__end
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] 
  # [discarded value]: value_links_item.2
  # [discarded value]: is_first_value_link.4
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] 
  # [discarded value]: is_first_value_link.1
  # [discarded value]: value_links_item.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_IR_Struct_Literal_Value_159__end:
  mov rsp, rbp
  pop rbp
  ret

dump_IR_Struct_Literal_Value_159__stack_frame_size: .word 48

  .loc 5 266 1
  .text
dump_ir_global_variable_value_160:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_global_variable_value_160__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_global_variable_value_160__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 268 23
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 268 23
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 268 12
  # $4.1: @FILE = call(write_337, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 268 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_global_variable_value_160__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_global_variable_value_160__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_global_variable_value_160__stack_frame_size: .word 16

  .loc 5 275 1
  .text
dump_ir_global_variable_address_value_161:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_global_variable_address_value_161__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_global_variable_address_value_161__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 277 23
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 277 23
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 277 12
  # $4.1: @FILE = call(write_337, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 277 12
  # $5.1: @FILE = call(write_337, $4.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_245[rip] # ".address"
  call write_337
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  .loc 5 277 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_global_variable_address_value_161__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__dump_ir_global_variable_address_value_161__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_global_variable_address_value_161__stack_frame_size: .word 16

  .loc 5 285 1
  .text
init_162:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_162__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_162__1:
  # self.1: @IR_Variable_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 286 5
  # store_struct_member(self.1, variable, variable.1)
  mov QWORD PTR [rdi+48], rsi
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 287 20
  # $1.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi variable.1:rsi $1.1:rax 
  .loc 5 287 20
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable.1:rsi $2.1:rbx 
  .loc 5 287 20
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi variable.1:rsi $3.1:rax 
  .loc 5 287 5
  # store_struct_member(self.1, version, $3.1)
  mov QWORD PTR [rdi+56], rax
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 288 5
  # $4.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+32]
  # [discarded value]: variable.1
  # [live values]: self.1:rdi $4.1:rax 
  .loc 5 288 5
  # call(append_318, $4.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_318
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 5 289 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__init_162__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_162__end:
  mov rsp, rbp
  pop rbp
  ret

init_162__stack_frame_size: .word 16

  .loc 5 292 1
  .text
dump_ir_variable_value_163:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_variable_value_163__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_variable_value_163__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 294 23
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 294 23
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 294 12
  # $4.1: @FILE = call(write_337, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] $4.1:rax 
  .loc 5 294 12
  # $5.1: @FILE = call(write_339, $4.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] $5.1:rax 
  .loc 5 294 61
  # $6.1: Int = load_struct_member(value.1, version)
  mov rbx, [rbp-8]
  mov r15, [rbx+56]
  # [discarded value]: value.1
  # [live values]: $5.1:rax $6.1:r15 
  .loc 5 294 12
  # $7.1: @FILE = call(write_336, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: $7.1:rax 
  .loc 5 294 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_variable_value_163__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_variable_value_163__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_variable_value_163__stack_frame_size: .word 16

  .loc 5 301 1
  .text
dump_ir_variable_address_value_164:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_variable_address_value_164__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_variable_address_value_164__1:
  # value.1: @IR_Variable_Address_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 303 23
  # $2.1: @IR_Variable_Value = load_struct_member(value.1, variable_value)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 303 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 303 12
  # $4.1: @FILE = call(write_337, $3.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_245[rip] # ".address"
  call write_337
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 303 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_variable_address_value_164__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_variable_address_value_164__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_variable_address_value_164__stack_frame_size: .word 16

  .loc 5 310 1
  .text
dump_ir_function_address_value_165:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_function_address_value_165__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_function_address_value_165__1:
  # value.1: @IR_Function_Address_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 312 38
  # $2.1: @IR_Function = load_struct_member(value.1, function)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 312 12
  # $3.1: @FILE = call(write_function_label_4, file.1, $2.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rax
  call write_function_label_4
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 312 12
  # $4.1: @FILE = call(write_337, $3.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_245[rip] # ".address"
  call write_337
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 312 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_function_address_value_165__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_function_address_value_165__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_function_address_value_165__stack_frame_size: .word 16

  .loc 5 325 1
  .text
has_instructions_166:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_instructions_166__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_instructions_166__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 326 12
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 326 12
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 5 326 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_instructions_166__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_instructions_166__end:
  mov rsp, rbp
  pop rbp
  ret

has_instructions_166__stack_frame_size: .word 16

  .loc 5 329 1
  .text
prepend_167:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_167__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_167__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 330 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 331 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rsi+40], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 332 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 332 5
  # store_struct_member(instruction.1, next_instruction, $1.1)
  mov QWORD PTR [rsi+48], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 333 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 333 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__prepend_167__2, .LABEL__prepend_167__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__prepend_167__4
.LABEL__prepend_167__2:
  .loc 5 334 9
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_167__3)
.LABEL__prepend_167__3:
  .loc 5 338 5
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 339 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__prepend_167__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__prepend_167__4:
  .loc 5 336 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 336 9
  # store_struct_member($4.1, prev_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_167__3)
  jmp .LABEL__prepend_167__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_167__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_167__stack_frame_size: .word 32

  .loc 5 342 1
  .text
append_168:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_168__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_168__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 343 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 344 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 344 5
  # store_struct_member(instruction.1, prev_instruction, $1.1)
  mov QWORD PTR [rsi+40], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 345 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rsi+48], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 346 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 346 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__append_168__2, .LABEL__append_168__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_168__4
.LABEL__append_168__2:
  .loc 5 347 9
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_168__3)
.LABEL__append_168__3:
  .loc 5 351 5
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 352 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__append_168__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__append_168__4:
  .loc 5 349 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 349 9
  # store_struct_member($4.1, next_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_168__3)
  jmp .LABEL__append_168__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_168__end:
  mov rsp, rbp
  pop rbp
  ret

append_168__stack_frame_size: .word 32

  .loc 5 355 1
  .text
append_jump_169:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_169__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_169__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  .loc 5 356 20
  # instruction.1: @IR_Direct_Jump_Instruction = new IR_Direct_Jump_Instruction(object_type = IR_Direct_Jump_Instruction, result_value = null, block = block.1, dump = dump_ir_direct_jump_instruction_200.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Direct_Jump_Instruction
  mov rbx, IR_Direct_Jump_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_direct_jump_instruction_200.address
  lea r15, dump_ir_direct_jump_instruction_200[rip]
  mov [rax+57], r15
  #     .block = block.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] block.1:r15:[rbp-8] instruction.1:rax 
  .loc 5 357 5
  # $3.1: @List = load_struct_member(block.1, predecessors)
  mov rbx, [r15+24]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-16] instruction.1:rax $3.1:rbx 
  .loc 5 357 5
  # call(append_318, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call append_318
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 358 5
  # $4.1: @IR_Instruction = call(append_168, self.1, instruction.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call append_168
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 359 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__append_jump_169__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_169__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_169__stack_frame_size: .word 32

  .loc 5 362 1
  .text
append_jump_170:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_170__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_170__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # condition_value.1: @IR_Value = load_variable(condition_value)
  # [live values]: self.1:rdi condition_value.1:rsi 
  # true_block.1: @IR_Block = load_variable(true_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx 
  # false_block.1: @IR_Block = load_variable(false_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  .loc 5 363 20
  # instruction.1: @IR_Conditional_Jump_Instruction = new IR_Conditional_Jump_Instruction(object_type = IR_Conditional_Jump_Instruction, result_value = null, true_block = true_block.1, false_block = false_block.1, dump = dump_ir_conditional_jump_instruction_198.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-40], rax
  mov rdi, 81
  call malloc
  #     .object_type = IR_Conditional_Jump_Instruction
  mov rbx, IR_Conditional_Jump_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_conditional_jump_instruction_198.address
  lea r15, dump_ir_conditional_jump_instruction_198[rip]
  mov [rax+57], r15
  #     .true_block = true_block.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+65], r15
  #     .false_block = false_block.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+73], r14
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:r15:[rbp-16] false_block.1:r14:[rbp-8] instruction.1:rax 
  .loc 5 364 5
  # call(set_operand_value_178, instruction.1, "condition", condition_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_246[rip] # "condition"
  mov rdx, [rbp-24]
  mov [rbp-40], rax
  call set_operand_value_178
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-32] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  .loc 5 365 5
  # $3.1: @List = load_struct_member(true_block.1, predecessors)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: true_block.1
  # [live values]: self.1:[rbp-32] false_block.1:[rbp-8] instruction.1:[rbp-40] $3.1:rbx 
  .loc 5 365 5
  # call(append_318, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_318
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  .loc 5 366 5
  # $4.1: @List = load_struct_member(false_block.1, predecessors)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] $4.1:rbx 
  .loc 5 366 5
  # call(append_318, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_318
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] 
  .loc 5 367 5
  # $5.1: @IR_Instruction = call(append_168, self.1, instruction.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-40]
  call append_168
  # [discarded value]: $5.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-40] 
  .loc 5 368 5
  # return(instruction.1)
  mov rax, [rbp-40]
  jmp .LABEL__append_jump_170__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_170__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_170__stack_frame_size: .word 48

  .loc 5 371 1
  .text
remove_171:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_171__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_171__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 372 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 372 9
  # $2.1: Boolean = $1.1 != self.1
  cmp rax, rdi
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__remove_171__2, .LABEL__remove_171__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__remove_171__3
.LABEL__remove_171__2:
  .loc 5 373 9
  # call(abort_342, "Tried to remove instruction belonging to another block")
  lea rdi, .LABEL__string_247[rip] # "Tried to remove instruction belonging to another block"
  call abort_342
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_171__3:
  .loc 5 375 9
  # $3.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 5 375 9
  # $4.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  # jump($4.1, .LABEL__remove_171__4, .LABEL__remove_171__5)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__remove_171__5
.LABEL__remove_171__4:
  .loc 5 376 9
  # $5.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx 
  .loc 5 376 57
  # $6.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov r15, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx $6.1:r15 
  .loc 5 376 9
  # store_struct_member($5.1, next_instruction, $6.1)
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # jump(.LABEL__remove_171__5)
.LABEL__remove_171__5:
  .loc 5 378 9
  # $7.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $7.1:rbx 
  .loc 5 378 9
  # $8.1: Boolean = $7.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__remove_171__6, .LABEL__remove_171__7)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__remove_171__7
.LABEL__remove_171__6:
  .loc 5 379 9
  # $9.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx 
  .loc 5 379 57
  # $10.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov r15, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx $10.1:r15 
  .loc 5 379 9
  # store_struct_member($9.1, prev_instruction, $10.1)
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # jump(.LABEL__remove_171__7)
.LABEL__remove_171__7:
  .loc 5 381 9
  # $11.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $11.1:rbx 
  .loc 5 381 9
  # $12.1: Boolean = $11.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:r15 
  # jump($12.1, .LABEL__remove_171__8, .LABEL__remove_171__9)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__remove_171__9
.LABEL__remove_171__8:
  .loc 5 382 34
  # $13.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $13.1:rbx 
  .loc 5 382 9
  # store_struct_member(self.1, first_instruction, $13.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+32], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # jump(.LABEL__remove_171__9)
.LABEL__remove_171__9:
  .loc 5 384 9
  # $14.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $14.1:rbx 
  .loc 5 384 9
  # $15.1: Boolean = $14.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:r15 
  # jump($15.1, .LABEL__remove_171__10, .LABEL__remove_171__11)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__remove_171__11
.LABEL__remove_171__10:
  .loc 5 385 33
  # $16.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] $16.1:rbx 
  .loc 5 385 9
  # store_struct_member(self.1, last_instruction, $16.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+40], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # jump(.LABEL__remove_171__11)
.LABEL__remove_171__11:
  .loc 5 387 5
  # store_struct_member(instruction.1, parent_block, null)
  mov rax, [rbp-9]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 388 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 389 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # return()
  jmp .LABEL__remove_171__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_171__end:
  mov rsp, rbp
  pop rbp
  ret

remove_171__stack_frame_size: .word 32

  .loc 5 392 1
  .text
dump_172:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_172__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_172__1:
  # block.1: @IR_Block = load_variable(block)
  # [live values]: block.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: block.1:rdi file.1:rsi 
  .loc 5 393 5
  # $1.1: @FILE = call(write_337, file.1, "block.")
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_248[rip] # "block."
  call write_337
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 393 32
  # $2.1: Int = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: block.1:rbx:[rbp-8] file.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 5 393 5
  # $3.1: @FILE = call(write_336, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 394 27
  # $4.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] $4.1:rbx 
  .loc 5 394 27
  # block_predecessors.1: @List_Iterator = call(create_iterator_329, $4.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:rax 
  .loc 5 395 9
  # $6.1: Boolean = call(has_next_332, block_predecessors.1)
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_332
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__dump_172__2, .LABEL__dump_172__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_172__3
.LABEL__dump_172__2:
  .loc 5 396 9
  # $7.1: @FILE = call(write_339, file.1, '(')
  mov rdi, [rbp-16]
  mov sil, 40
  call write_339
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # jump(.LABEL__dump_172__4)
.LABEL__dump_172__4:
  .loc 5 398 34
  # block_predecessor.1: @IR_Block = call(next_333, block_predecessors.1)
  mov rdi, [rbp-24]
  call next_333
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:rax 
  .loc 5 399 13
  # $10.1: @FILE = call(write_337, file.1, "block.")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_248[rip] # "block."
  mov [rbp-33], rax
  call write_337
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:[rbp-33] $10.1:rax 
  .loc 5 399 40
  # $11.1: Int = load_struct_member(block_predecessor.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: block_predecessor.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 399 13
  # $12.1: @FILE = call(write_336, $10.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  .loc 5 400 17
  # $13.1: Boolean = call(has_next_332, block_predecessors.1)
  mov rdi, [rbp-24]
  call has_next_332
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:rax 
  # jump($13.1, .LABEL__dump_172__6, .LABEL__dump_172__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_172__5
.LABEL__dump_172__6:
  .loc 5 401 17
  # $14.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $14.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__4)
  jmp .LABEL__dump_172__4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
.LABEL__dump_172__5:
  .loc 5 406 9
  # $15.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_339
  # [discarded value]: $15.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__3)
.LABEL__dump_172__3:
  .loc 5 408 5
  # $16.1: @FILE = call(write_339, file.1, ':')
  mov rdi, [rbp-16]
  mov sil, 58
  call write_339
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $16.1:rax $13.1:[rbp-26] 
  .loc 5 408 5
  # $17.1: @FILE = call(end_line_340, $16.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  .loc 5 409 26
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:rbx $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__10)
  mov [rbp-34], rbx
.LABEL__dump_172__10:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.4)
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  .loc 5 410 12
  # $19.1: Boolean = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__dump_172__11, .LABEL__dump_172__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__dump_172__12
.LABEL__dump_172__11:
  .loc 5 411 9
  # $20.1: (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(block_instruction.2, dump)
  mov rax, [rbp-34]
  mov rbx, [rax+57]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:rax:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 5 411 9
  # $21.1: @FILE = call($20.1, block_instruction.2, file.1, "   ")
  mov rdi, rax
  mov rsi, [rbp-16]
  lea rdx, .LABEL__string_249[rip] # "   "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  .loc 5 412 29
  # block_instruction.4: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:rbx:[rbp-34] 
  # jump(.LABEL__dump_172__10)
  mov [rbp-34], rbx
  jmp .LABEL__dump_172__10
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:[rbp-34] 
  # [discarded value]: block_instruction.4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
.LABEL__dump_172__12:
  .loc 5 414 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__dump_172__end
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [discarded value]: block_instruction.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [discarded value]: $13.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: file.1
  # [discarded value]: block.1
  # [live values]: 
.LABEL__dump_172__end:
  mov rsp, rbp
  pop rbp
  ret

dump_172__stack_frame_size: .word 48

  .loc 5 428 1
  .text
create_block_173:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_block_173__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_block_173__1:
  # self.1: @IR_Function = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 429 32
  # $1.1: @List = load_struct_member(self.1, blocks)
  mov rax, [rdi+57]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 429 32
  # $2.1: Int = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 5 429 32
  # $3.1: Int = $2.1 + 1
  mov rax, rbx
  add rax, 1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  .loc 5 318 27
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  .loc 5 429 14
  # block.1: @IR_Block = new IR_Block(object_type = IR_Block, id = $3.1, function = self.1, predecessors = $4.1, first_instruction = null, last_instruction = null, is_being_generated = false, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 50
  call malloc
  #     .object_type = IR_Block
  mov rbx, IR_Block[rip]
  mov [rax], rbx
  #     .id = $3.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .function = self.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .predecessors = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+24], r14
  #     .first_instruction = null
  mov QWORD PTR [rax+32], 0
  #     .last_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .is_being_generated = false
  mov BYTE PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+49], 0
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:r15:[rbp-16] block.1:rax 
  .loc 5 430 5
  # $6.1: @List = load_struct_member(self.1, blocks)
  mov rbx, [r15+57]
  # [discarded value]: self.1
  # [live values]: block.1:rax $6.1:rbx 
  .loc 5 430 5
  # call(append_318, $6.1, block.1)
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-8], rax
  call append_318
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] 
  .loc 5 431 5
  # return(block.1)
  mov rax, [rbp-8]
  jmp .LABEL__create_block_173__end
  # [discarded value]: block.1
  # [live values]: 
.LABEL__create_block_173__end:
  mov rsp, rbp
  pop rbp
  ret

create_block_173__stack_frame_size: .word 32

  .loc 5 434 1
  .text
dump_174:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_174__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_174__1:
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: function.1:rdi file.1:rsi 
  .loc 5 435 5
  # $1.1: @FILE = call(write_function_label_4, file.1, function.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call write_function_label_4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 435 5
  # $2.1: @FILE = call(write_337, $1.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # " :: ("
  call write_337
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 436 28
  # $3.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] $3.1:rbx 
  .loc 5 436 28
  # function_parameters.1: @List_Iterator = call(create_iterator_329, $3.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $3.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:rax 
  # jump(.LABEL__dump_174__2)
  mov [rbp-24], rax
.LABEL__dump_174__2:
  .loc 5 437 12
  # $5.1: Boolean = call(has_next_332, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_332
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__dump_174__3, .LABEL__dump_174__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_174__4
.LABEL__dump_174__3:
  .loc 5 438 31
  # function_parameter.1: @IR_Function_Parameter = call(next_333, function_parameters.1)
  mov rdi, [rbp-24]
  call next_333
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax 
  .loc 5 439 20
  # $8.1: @String = load_struct_member(function_parameter.1, name)
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax $8.1:rbx 
  .loc 5 439 9
  # $9.1: @FILE = call(write_337, file.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_337
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $9.1:rax 
  .loc 5 439 9
  # $10.1: @FILE = call(write_337, $9.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $10.1:rax 
  .loc 5 439 63
  # $11.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rbp-33]
  mov r15, [rbx+24]
  # [discarded value]: function_parameter.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 439 63
  # $12.1: @String = load_struct_member($11.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $12.1:rbx 
  .loc 5 439 9
  # $13.1: @FILE = call(write_337, $10.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call write_337
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 440 13
  # $14.1: Boolean = call(has_next_332, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_332
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:rax 
  # jump($14.1, .LABEL__dump_174__5, .LABEL__dump_174__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_174__2
.LABEL__dump_174__5:
  .loc 5 441 13
  # $15.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # jump(.LABEL__dump_174__2)
  jmp .LABEL__dump_174__2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__dump_174__4:
  .loc 5 444 5
  # $16.1: @FILE = call(write_337, file.1, ") -> ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_240[rip] # ") -> "
  call write_337
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax 
  .loc 5 444 31
  # $17.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $17.1:r15 
  .loc 5 444 31
  # $18.1: @String = load_struct_member($17.1, name)
  mov r14, [r15+8]
  # [discarded value]: $17.1
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $18.1:r14 
  .loc 5 444 5
  # $19.1: @FILE = call(write_337, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $19.1:rax 
  .loc 5 444 5
  # $20.1: @FILE = call(write_337, $19.1, " {")
  mov rdi, rax
  lea rsi, .LABEL__string_250[rip] # " {"
  call write_337
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $20.1:rax 
  .loc 5 444 5
  # $21.1: @FILE = call(end_line_340, $20.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 445 19
  # $22.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $22.1:rbx 
  .loc 5 445 19
  # block_item.1: @List_Item = load_struct_member($22.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:r15 
  # jump(.LABEL__dump_174__7)
  mov [rbp-33], r15
.LABEL__dump_174__7:
  # block_item.2: @List_Item = phi(block_item.1, block_item.4)
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  .loc 5 446 12
  # $24.1: Boolean = block_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:rax 
  # jump($24.1, .LABEL__dump_174__8, .LABEL__dump_174__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__dump_174__9
.LABEL__dump_174__8:
  .loc 5 447 10
  # $26.1: @IR_Block = load_struct_member(block_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:rax:[rbp-33] $24.1:[rbp-34] $26.1:rbx 
  .loc 5 447 9
  # $27.1: @FILE = call(dump_172, $26.1, file.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call dump_172
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  .loc 5 448 22
  # block_item.4: @List_Item = load_struct_member(block_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:rbx:[rbp-33] 
  # jump(.LABEL__dump_174__7)
  mov [rbp-33], rbx
  jmp .LABEL__dump_174__7
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:[rbp-33] 
  # [discarded value]: block_item.4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
.LABEL__dump_174__9:
  .loc 5 450 5
  # $29.1: @FILE = call(write_339, file.1, '}')
  mov rdi, [rbp-16]
  mov sil, 125
  call write_339
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] $29.1:rax 
  .loc 5 450 5
  # $30.1: @FILE = call(end_line_340, $29.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # return()
  jmp .LABEL__dump_174__end
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # [discarded value]: $24.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  # [discarded value]: block_item.2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [discarded value]: block_item.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: file.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__dump_174__end:
  mov rsp, rbp
  pop rbp
  ret

dump_174__stack_frame_size: .word 48

  .loc 5 479 1
  .text
dump_ir_instruction_175:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_instruction_175__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_instruction_175__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [discarded value]: prefix.1
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 480 5
  # $1.1: @FILE = call(flush_341, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_341
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 5 481 11
  # $2.1: @String = call(clone_345, "Unsupported type: ")
  lea rdi, .LABEL__string_71[rip] # "Unsupported type: "
  call clone_345
  # [live values]: instruction.1:[rbp-8] $2.1:rax 
  .loc 5 481 46
  # $3.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 481 46
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [live values]: $2.1:rax $3.1:r15 $4.1:rbx 
  .loc 5 481 11
  # $5.1: @String = call(append_354, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_354
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 481 5
  # call(abort_342, $5.1)
  mov rdi, rax
  call abort_342
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__dump_ir_instruction_175__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_instruction_175__stack_frame_size: .word 16

  .loc 5 484 1
  .text
dump_ir_instruction_result_176:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_instruction_result_176__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_instruction_result_176__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: self.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: self.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 485 5
  # $1.1: @FILE = call(write_337, file.1, prefix.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rdx
  call write_337
  # [discarded value]: $1.1
  # [discarded value]: prefix.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 486 9
  # $2.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $2.1:rbx 
  .loc 5 486 9
  # $3.1: Boolean = $2.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:r15 
  # jump($3.1, .LABEL__dump_ir_instruction_result_176__2, .LABEL__dump_ir_instruction_result_176__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__dump_ir_instruction_result_176__3
.LABEL__dump_ir_instruction_result_176__2:
  .loc 5 487 20
  # $4.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 5 487 9
  # $5.1: @FILE = call(write_154, file.1, $4.1, false)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  call write_154
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 487 9
  # $6.1: @FILE = call(write_337, $5.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 487 64
  # $7.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 487 64
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $8.1:r14 
  .loc 5 487 64
  # $9.1: @String = load_struct_member($8.1, name)
  mov r15, [r14+8]
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $9.1:r15 
  .loc 5 487 9
  # $10.1: @FILE = call(write_337, $6.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_337
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $10.1:rax 
  .loc 5 487 9
  # $11.1: @FILE = call(write_337, $10.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_85[rip] # " = "
  call write_337
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__dump_ir_instruction_result_176__3)
.LABEL__dump_ir_instruction_result_176__3:
  # return()
  jmp .LABEL__dump_ir_instruction_result_176__end
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__dump_ir_instruction_result_176__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_instruction_result_176__stack_frame_size: .word 32

  .loc 5 491 1
  .text
is_exit_instruction_177:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_exit_instruction_177__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_exit_instruction_177__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 492 9
  # $1.1: Boolean = self.1 == null
  cmp rdi, 0
  sete al
  # [live values]: self.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__is_exit_instruction_177__2, .LABEL__is_exit_instruction_177__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__is_exit_instruction_177__3
.LABEL__is_exit_instruction_177__2:
  .loc 5 493 9
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__is_exit_instruction_177__3:
  .loc 5 495 9
  # $3.1: Boolean = call(is_343, self.1, IR_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Jump_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:rax 
  # jump($3.1, .LABEL__is_exit_instruction_177__6, .LABEL__is_exit_instruction_177__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__is_exit_instruction_177__5
.LABEL__is_exit_instruction_177__6:
  .loc 5 495 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # jump($3.3, .LABEL__is_exit_instruction_177__7, .LABEL__is_exit_instruction_177__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__is_exit_instruction_177__8
.LABEL__is_exit_instruction_177__7:
  .loc 5 496 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
.LABEL__is_exit_instruction_177__8:
  .loc 5 498 9
  # $5.1: Boolean = call(is_343, self.1, IR_Direct_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Call_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:rax 
  # jump($5.1, .LABEL__is_exit_instruction_177__10, .LABEL__is_exit_instruction_177__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__10:
  .loc 5 499 17
  # self.1: @IR_Direct_Call_Instruction = self.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] self.1:rax 
  .loc 5 500 21
  # function.1: @IR_Function = load_struct_member(self.1, function)
  mov rbx, [rax+73]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx 
  .loc 5 501 13
  # $8.1: @String = load_struct_member(function.1, name)
  mov rax, [rbx+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx $8.1:rax 
  .loc 5 501 13
  # $9.1: Boolean = call(equals_346, $8.1, "abort")
  mov rdi, rax
  lea rsi, .LABEL__string_251[rip] # "abort"
  mov [rbp-19], rbx
  call equals_346
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:rax 
  # jump($9.1, .LABEL__is_exit_instruction_177__12, .LABEL__is_exit_instruction_177__13)
  test al, al
  mov [rbp-20], al
  jz .LABEL__is_exit_instruction_177__13
.LABEL__is_exit_instruction_177__12:
  .loc 5 502 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
.LABEL__is_exit_instruction_177__13:
  .loc 5 504 13
  # $10.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-19]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 5 504 13
  # $12.1: Boolean = call(equals_346, $10.1, "exit")
  mov rdi, rbx
  lea rsi, .LABEL__string_252[rip] # "exit"
  call equals_346
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:rax 
  # jump($12.1, .LABEL__is_exit_instruction_177__15, .LABEL__is_exit_instruction_177__16)
  test al, al
  mov [rbp-21], al
  jz .LABEL__is_exit_instruction_177__16
.LABEL__is_exit_instruction_177__15:
  .loc 5 504 45
  # $13.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $13.1:rbx 
  .loc 5 504 45
  # $14.1: Int = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $14.1:r15 
  .loc 5 504 45
  # $15.1: Boolean = $14.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $15.1:rbx 
  .loc 5 504 13
  # $12.2: Boolean = $15.1
  mov [rbp-22], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:rbx:[rbp-21] 
  # jump(.LABEL__is_exit_instruction_177__16)
  mov [rbp-21], bl
.LABEL__is_exit_instruction_177__16:
  .loc 5 504 13
  # $12.3: Boolean = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # jump($12.3, .LABEL__is_exit_instruction_177__17, .LABEL__is_exit_instruction_177__11)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__17:
  .loc 5 505 35
  # $16.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $16.1:rbx 
  .loc 5 505 35
  # function_parameter.1: @IR_Function_Parameter = call(get_326, $16.1, 0)
  mov rdi, rbx
  xor rsi, rsi
  call get_326
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] function_parameter.1:rax 
  .loc 5 506 17
  # $19.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $19.1:rbx 
  .loc 5 506 17
  # $20.1: Boolean = call(is_343, $19.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_343
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:rax 
  # jump($20.1, .LABEL__is_exit_instruction_177__19, .LABEL__is_exit_instruction_177__11)
  test al, al
  mov [rbp-22], al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__19:
  .loc 5 507 17
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
.LABEL__is_exit_instruction_177__11:
  .loc 5 511 5
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
.LABEL__is_exit_instruction_177__5:
  .loc 5 495 41
  # $3.2: Boolean = call(is_343, self.1, IR_Return_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Return_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:rax:[rbp-10] 
  # jump(.LABEL__is_exit_instruction_177__6)
  mov [rbp-10], al
  jmp .LABEL__is_exit_instruction_177__6
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:[rbp-10] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_exit_instruction_177__end:
  mov rsp, rbp
  pop rbp
  ret

is_exit_instruction_177__stack_frame_size: .word 32

  .loc 5 514 1
  .text
set_operand_value_178:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR set_operand_value_178__stack_frame_size[rip]
  sub rsp, rax
.LABEL__set_operand_value_178__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 5 515 5
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx $1.1:rax 
  .loc 5 515 5
  # $2.1: @IR_Value = call(put_181, $1.1, key.1, value.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rdx
  call put_181
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: key.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  .loc 5 516 5
  # $3.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $3.1:rbx 
  .loc 5 516 5
  # call(append_318, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_318
  # [discarded value]: $3.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__set_operand_value_178__end
  # [live values]: 
.LABEL__set_operand_value_178__end:
  mov rsp, rbp
  pop rbp
  ret

set_operand_value_178__stack_frame_size: .word 16

  .loc 5 519 1
  .text
replace_operand_value_179:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_operand_value_179__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_operand_value_179__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 5 520 5
  # $1.1: @List = load_struct_member(old_value.1, user_instructions)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx $1.1:rax 
  .loc 5 520 5
  # $2.1: @List = call(remove_320, $1.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call remove_320
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $2.1:rax 
  .loc 5 520 5
  # $3.1: @List = call(prune_322, $2.1)
  mov rdi, rax
  call prune_322
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  .loc 5 521 5
  # $4.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:rax:[rbp-24] $4.1:rbx 
  .loc 5 521 5
  # call(append_318, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_318
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  .loc 5 522 9
  # $5.1: Boolean = call(is_343, self.1, IR_Phi_Instruction)
  mov rdi, [rbp-8]
  mov rsi, IR_Phi_Instruction[rip]
  call is_343
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__replace_operand_value_179__2, .LABEL__replace_operand_value_179__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_operand_value_179__4
.LABEL__replace_operand_value_179__2:
  .loc 5 523 9
  # $7.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $7.1:rbx 
  .loc 5 523 9
  # $8.1: @IR_Value = call(remove_182, $7.1, old_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call remove_182
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 524 9
  # $9.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $9.1:rbx 
  .loc 5 524 9
  # $10.1: @IR_Value = call(put_181, $9.1, new_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov rdx, [rbp-24]
  call put_181
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_179__3)
.LABEL__replace_operand_value_179__3:
  # return()
  jmp .LABEL__replace_operand_value_179__end
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__replace_operand_value_179__4:
  .loc 5 526 9
  # $6.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 5 526 9
  # call(replace_values_185, $6.1, old_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call replace_values_185
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_179__3)
  jmp .LABEL__replace_operand_value_179__3
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__replace_operand_value_179__end:
  mov rsp, rbp
  pop rbp
  ret

replace_operand_value_179__stack_frame_size: .word 32

  .loc 6 13 1
  .text
get_180:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_180__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_180__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 14 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: key.1:rsi entry.1:rax 
  # jump(.LABEL__get_180__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_180__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 15 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_180__3, .LABEL__get_180__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_180__4
.LABEL__get_180__3:
  .loc 6 16 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 6 16 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__get_180__5, .LABEL__get_180__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__get_180__6
.LABEL__get_180__5:
  .loc 6 17 20
  # $5.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 6 17 13
  # return($5.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__get_180__end
  # [discarded value]: $5.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__get_180__6:
  .loc 6 19 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__get_180__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_180__2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_180__4:
  .loc 6 21 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_180__end
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [live values]: 
.LABEL__get_180__end:
  mov rsp, rbp
  pop rbp
  ret

get_180__stack_frame_size: .word 32

  .loc 6 24 1
  .text
put_181:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR put_181__stack_frame_size[rip]
  sub rsp, rax
.LABEL__put_181__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 6 25 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx entry.1:rax 
  # jump(.LABEL__put_181__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__put_181__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 26 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__put_181__3, .LABEL__put_181__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__put_181__4
.LABEL__put_181__3:
  .loc 6 27 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 6 27 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:r15 
  # jump($4.1, .LABEL__put_181__5, .LABEL__put_181__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__put_181__6
.LABEL__put_181__5:
  .loc 6 28 26
  # old_value.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 29 13
  # store_struct_member(entry.2, value, value.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 30 13
  # return(old_value.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__put_181__end
  # [discarded value]: old_value.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__put_181__6:
  .loc 6 32 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__put_181__2)
  mov [rbp-8], rbx
  jmp .LABEL__put_181__2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__put_181__4:
  .loc 6 34 76
  # $7.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:rbx 
  .loc 6 34 13
  # entry.7: @IR_Values_Map_Entry = new IR_Values_Map_Entry(key = key.1, value = value.1, prev_entry = $7.1, next_entry = null)
  mov [rbp-41], rbx
  mov rdi, 32
  call malloc
  #     .key = key.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .value = value.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .prev_entry = $7.1
  mov r14, [rbp-41]
  mov QWORD PTR [rax+16], r14
  #     .next_entry = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] 
  .loc 6 35 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov r14, [rbp-32]
  mov r13, [r14+8]
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $9.1:r13 
  .loc 6 35 9
  # $10.1: Boolean = $9.1 == null
  cmp r13, 0
  sete r12b
  # [discarded value]: $9.1
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $10.1:r12 
  # jump($10.1, .LABEL__put_181__8, .LABEL__put_181__10)
  test r12b, r12b
  mov [rbp-8], rax
  mov [rbp-34], r12b
  jz .LABEL__put_181__10
.LABEL__put_181__8:
  .loc 6 36 9
  # store_struct_member(self.1, first_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_181__9)
.LABEL__put_181__9:
  .loc 6 40 5
  # store_struct_member(self.1, last_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  .loc 6 41 5
  # return(null)
  xor rax, rax
  jmp .LABEL__put_181__end
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
.LABEL__put_181__10:
  .loc 6 38 9
  # $11.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] $11.1:rbx 
  .loc 6 38 9
  # store_struct_member($11.1, next_entry, entry.7)
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:r15:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_181__9)
  jmp .LABEL__put_181__9
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] 
  # [discarded value]: entry.7
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__put_181__end:
  mov rsp, rbp
  pop rbp
  ret

put_181__stack_frame_size: .word 48

  .loc 6 44 1
  .text
remove_182:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_182__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_182__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 45 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi entry.1:rax 
  # jump(.LABEL__remove_182__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_182__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 46 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_182__3, .LABEL__remove_182__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_182__4
.LABEL__remove_182__3:
  .loc 6 47 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 47 13
  # $4.1: Boolean = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_182__5, .LABEL__remove_182__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_182__6
.LABEL__remove_182__5:
  .loc 6 48 20
  # $5.1: @IR_Values_Map_Entry = call(unlink_184, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_184
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 6 48 20
  # $6.1: @IR_Value = load_struct_member($5.1, value)
  mov rbx, [rax+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $6.1:rbx 
  .loc 6 48 13
  # return($6.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__remove_182__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_182__6:
  .loc 6 50 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_182__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_182__2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_182__4:
  .loc 6 52 5
  # return(null)
  xor rax, rax
  jmp .LABEL__remove_182__end
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_182__end:
  mov rsp, rbp
  pop rbp
  ret

remove_182__stack_frame_size: .word 48

  .loc 6 55 1
  .text
remove_values_183:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_values_183__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_values_183__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 6 56 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi value.1:rsi entry.1:rax 
  # jump(.LABEL__remove_values_183__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_values_183__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 57 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_values_183__3, .LABEL__remove_values_183__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_values_183__4
.LABEL__remove_values_183__3:
  .loc 6 58 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 58 13
  # $4.1: Boolean = $3.1 == value.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_values_183__5, .LABEL__remove_values_183__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_values_183__6
.LABEL__remove_values_183__5:
  .loc 6 59 13
  # $5.1: @IR_Values_Map_Entry = call(unlink_184, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_184
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_values_183__6)
.LABEL__remove_values_183__6:
  .loc 6 61 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_values_183__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_values_183__2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_values_183__4:
  # return()
  jmp .LABEL__remove_values_183__end
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_values_183__end:
  mov rsp, rbp
  pop rbp
  ret

remove_values_183__stack_frame_size: .word 32

  .loc 6 65 1
  .text
unlink_184:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR unlink_184__stack_frame_size[rip]
  sub rsp, rax
.LABEL__unlink_184__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # entry.1: @IR_Values_Map_Entry = load_variable(entry)
  # [live values]: self.1:rdi entry.1:rsi 
  .loc 6 66 9
  # $1.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi entry.1:rsi $1.1:rax 
  .loc 6 66 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi entry.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__unlink_184__2, .LABEL__unlink_184__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__unlink_184__4
.LABEL__unlink_184__2:
  .loc 6 67 9
  # $4.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 6 67 39
  # $5.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 6 67 9
  # store_struct_member($4.1, next_entry, $5.1)
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_184__3)
.LABEL__unlink_184__3:
  .loc 6 71 9
  # $6.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 6 71 9
  # $7.1: Boolean = $6.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  # jump($7.1, .LABEL__unlink_184__5, .LABEL__unlink_184__7)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__unlink_184__7
.LABEL__unlink_184__5:
  .loc 6 72 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx 
  .loc 6 72 39
  # $10.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx $10.1:r15 
  .loc 6 72 9
  # store_struct_member($9.1, prev_entry, $10.1)
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_184__6)
.LABEL__unlink_184__6:
  .loc 6 76 5
  # return(entry.1)
  mov rax, [rbp-9]
  jmp .LABEL__unlink_184__end
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
.LABEL__unlink_184__7:
  .loc 6 74 27
  # $8.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $8.1:rbx 
  .loc 6 74 9
  # store_struct_member(self.1, last_entry, $8.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_184__6)
  jmp .LABEL__unlink_184__6
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__unlink_184__4:
  .loc 6 69 28
  # $3.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 6 69 9
  # store_struct_member(self.1, first_entry, $3.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_184__3)
  jmp .LABEL__unlink_184__3
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] 
  # [discarded value]: entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__unlink_184__end:
  mov rsp, rbp
  pop rbp
  ret

unlink_184__stack_frame_size: .word 32

  .loc 6 79 1
  .text
replace_values_185:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_values_185__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_values_185__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 6 80 14
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: old_value.1:rsi new_value.1:rdx entry.1:rax 
  # jump(.LABEL__replace_values_185__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_values_185__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 81 12
  # $2.1: Boolean = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_values_185__3, .LABEL__replace_values_185__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_values_185__4
.LABEL__replace_values_185__3:
  .loc 6 82 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 82 13
  # $4.1: Boolean = $3.1 == old_value.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_values_185__5, .LABEL__replace_values_185__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_values_185__6
.LABEL__replace_values_185__5:
  .loc 6 83 13
  # store_struct_member(entry.2, value, new_value.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: old_value.1:[rbp-24] new_value.1:rbx:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_values_185__6)
.LABEL__replace_values_185__6:
  .loc 6 85 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_values_185__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_values_185__2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_values_185__4:
  # return()
  jmp .LABEL__replace_values_185__end
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: 
.LABEL__replace_values_185__end:
  mov rsp, rbp
  pop rbp
  ret

replace_values_185__stack_frame_size: .word 32

  .loc 5 536 1
  .text
dump_ir_call_instruction_arguments_186:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_call_instruction_arguments_186__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_call_instruction_arguments_186__1:
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 537 5
  # call_argument_index.1: Int = 0
  xor rax, rax
  # [live values]: instruction.1:rdi file.1:rsi call_argument_index.1:rax 
  # jump(.LABEL__dump_ir_call_instruction_arguments_186__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__dump_ir_call_instruction_arguments_186__2:
  # call_argument_index.2: Int = phi(call_argument_index.1, call_argument_index.4)
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  .loc 5 538 34
  # $1.1: Int = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-24]
  mov rbx, [rax+65]
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $1.1:rbx 
  .loc 5 538 12
  # $2.1: Boolean = call_argument_index.2 < $1.1
  cmp QWORD PTR [rbp-8], rbx
  setl r15b
  # [discarded value]: $1.1
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__dump_ir_call_instruction_arguments_186__3, .LABEL__dump_ir_call_instruction_arguments_186__4)
  test r15b, r15b
  mov [rbp-25], r15b
  jz .LABEL__dump_ir_call_instruction_arguments_186__4
.LABEL__dump_ir_call_instruction_arguments_186__3:
  .loc 5 539 9
  # $3.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 5 539 32
  # $4.1: @IR_Value = call(get_argument_value_188, instruction.1, call_argument_index.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  mov [rbp-33], rax
  call get_argument_value_188
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:rax 
  .loc 5 539 9
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  .loc 5 540 31
  # $6.1: Int = call_argument_index.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $6.1:rax 
  .loc 5 540 9
  # call_argument_index.4: Int = $6.1
  mov [rbp-33], rax
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:rax:[rbp-8] 
  # jump(.LABEL__dump_ir_call_instruction_arguments_186__2)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_call_instruction_arguments_186__2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:[rbp-8] 
  # [discarded value]: call_argument_index.4
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__dump_ir_call_instruction_arguments_186__4:
  # return()
  jmp .LABEL__dump_ir_call_instruction_arguments_186__end
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  # [discarded value]: call_argument_index.2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [discarded value]: call_argument_index.1
  # [discarded value]: file.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__dump_ir_call_instruction_arguments_186__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_call_instruction_arguments_186__stack_frame_size: .word 48

  .loc 5 549 1
  .text
add_arguments_187:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_arguments_187__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_arguments_187__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 5 550 28
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  # jump(.LABEL__add_arguments_187__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__add_arguments_187__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.4)
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 5 551 12
  # $2.1: Boolean = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__add_arguments_187__3, .LABEL__add_arguments_187__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__add_arguments_187__4
.LABEL__add_arguments_187__3:
  .loc 5 552 26
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 5 553 49
  # $5.1: Int = load_struct_member(self.1, arguments_size)
  mov r15, [rbp-16]
  mov r14, [r15+65]
  # [live values]: self.1:r15:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r14 
  .loc 5 553 32
  # $6.1: @String = call(get_argument_key_189, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call get_argument_key_189
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  .loc 5 553 71
  # $7.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 553 9
  # call(set_operand_value_178, self.1, $6.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call set_operand_value_178
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 554 31
  # $8.1: Int = load_struct_member(self.1, arguments_size)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $8.1:rbx 
  .loc 5 554 31
  # $9.1: Int = $8.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $9.1:r15 
  .loc 5 554 9
  # store_struct_member(self.1, arguments_size, $9.1)
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 555 31
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:r15:[rbp-8] 
  # jump(.LABEL__add_arguments_187__2)
  mov [rbp-8], r15
  jmp .LABEL__add_arguments_187__2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:[rbp-8] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__add_arguments_187__4:
  .loc 5 557 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__add_arguments_187__end
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__add_arguments_187__end:
  mov rsp, rbp
  pop rbp
  ret

add_arguments_187__stack_frame_size: .word 32

  .loc 5 560 1
  .text
get_argument_value_188:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_value_188__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_value_188__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 5 561 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: index.1:rsi $1.1:rax 
  .loc 5 561 36
  # $2.1: @String = call(get_argument_key_189, index.1)
  mov rdi, rsi
  mov [rbp-8], rax
  call get_argument_key_189
  # [discarded value]: index.1
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  .loc 5 561 12
  # $3.1: @IR_Value = call(get_180, $1.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_180
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 561 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_argument_value_188__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_argument_value_188__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_value_188__stack_frame_size: .word 16

  .loc 5 564 1
  .text
get_argument_key_189:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_key_189__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_key_189__1:
  # index.1: Int = load_variable(index)
  # [live values]: index.1:rdi 
  .loc 5 565 9
  # $1.1: Boolean = index.1 == 0
  cmp rdi, 0
  sete al
  # [live values]: index.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__get_argument_key_189__2, .LABEL__get_argument_key_189__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__get_argument_key_189__4
.LABEL__get_argument_key_189__2:
  .loc 5 566 9
  # return("argument-0-value")
  lea rax, .LABEL__string_253[rip] # "argument-0-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__get_argument_key_189__4:
  .loc 5 567 16
  # $2.1: Boolean = index.1 == 1
  cmp QWORD PTR [rbp-9], 1
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__get_argument_key_189__5, .LABEL__get_argument_key_189__7)
  test al, al
  mov [rbp-10], al
  jz .LABEL__get_argument_key_189__7
.LABEL__get_argument_key_189__5:
  .loc 5 568 9
  # return("argument-1-value")
  lea rax, .LABEL__string_254[rip] # "argument-1-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
.LABEL__get_argument_key_189__7:
  .loc 5 569 16
  # $3.1: Boolean = index.1 == 2
  cmp QWORD PTR [rbp-9], 2
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:rax 
  # jump($3.1, .LABEL__get_argument_key_189__8, .LABEL__get_argument_key_189__10)
  test al, al
  mov [rbp-11], al
  jz .LABEL__get_argument_key_189__10
.LABEL__get_argument_key_189__8:
  .loc 5 570 9
  # return("argument-2-value")
  lea rax, .LABEL__string_255[rip] # "argument-2-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
.LABEL__get_argument_key_189__10:
  .loc 5 571 16
  # $4.1: Boolean = index.1 == 3
  cmp QWORD PTR [rbp-9], 3
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:rax 
  # jump($4.1, .LABEL__get_argument_key_189__11, .LABEL__get_argument_key_189__13)
  test al, al
  mov [rbp-12], al
  jz .LABEL__get_argument_key_189__13
.LABEL__get_argument_key_189__11:
  .loc 5 572 9
  # return("argument-3-value")
  lea rax, .LABEL__string_256[rip] # "argument-3-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
.LABEL__get_argument_key_189__13:
  .loc 5 573 16
  # $5.1: Boolean = index.1 == 4
  cmp QWORD PTR [rbp-9], 4
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:rax 
  # jump($5.1, .LABEL__get_argument_key_189__14, .LABEL__get_argument_key_189__16)
  test al, al
  mov [rbp-13], al
  jz .LABEL__get_argument_key_189__16
.LABEL__get_argument_key_189__14:
  .loc 5 574 9
  # return("argument-4-value")
  lea rax, .LABEL__string_257[rip] # "argument-4-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
.LABEL__get_argument_key_189__16:
  .loc 5 575 16
  # $6.1: Boolean = index.1 == 5
  cmp QWORD PTR [rbp-9], 5
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:rax 
  # jump($6.1, .LABEL__get_argument_key_189__17, .LABEL__get_argument_key_189__3)
  test al, al
  mov [rbp-14], al
  jz .LABEL__get_argument_key_189__3
.LABEL__get_argument_key_189__17:
  .loc 5 576 9
  # return("argument-5-value")
  lea rax, .LABEL__string_258[rip] # "argument-5-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
.LABEL__get_argument_key_189__3:
  .loc 5 578 11
  # $7.1: @String = call(clone_345, "Missing argument index: ")
  lea rdi, .LABEL__string_259[rip] # "Missing argument index: "
  call clone_345
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $7.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 578 11
  # $8.1: @String = call(append_353, $7.1, index.1)
  mov rdi, rax
  mov rsi, [rbp-9]
  call append_353
  # [discarded value]: $7.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $8.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 578 5
  # call(abort_342, $8.1)
  mov rdi, rax
  call abort_342
  # [discarded value]: $8.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  # [discarded value]: $6.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
  # [discarded value]: $5.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
  # [discarded value]: $4.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
  # [discarded value]: $3.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
  # [discarded value]: $2.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: index.1:[rbp-9] 
  # [discarded value]: index.1
  # [live values]: 
.LABEL__get_argument_key_189__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_key_189__stack_frame_size: .word 16

  .loc 5 585 1
  .text
dump_ir_direct_call_instruction_190:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_direct_call_instruction_190__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_direct_call_instruction_190__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 586 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 587 20
  # instruction.1: @IR_Direct_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 588 5
  # $2.1: @FILE = call(write_337, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_260[rip] # "call"
  mov [rbp-16], rax
  call write_337
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 588 5
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  .loc 5 588 56
  # $4.1: @IR_Function = load_struct_member(instruction.1, function)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $3.1:rax $4.1:r15 
  .loc 5 588 5
  # $5.1: @FILE = call(write_function_label_4, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 589 5
  # call(dump_ir_call_instruction_arguments_186, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_186
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 590 12
  # $6.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_339
  # [discarded value]: file.1
  # [live values]: $6.1:rax 
  .loc 5 590 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 590 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_direct_call_instruction_190__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_direct_call_instruction_190__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_direct_call_instruction_190__stack_frame_size: .word 16

  .loc 5 593 1
  .text
create_ir_direct_call_instruction_191:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_direct_call_instruction_191__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_direct_call_instruction_191__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  .loc 5 594 20
  # instruction.1: @IR_Direct_Call_Instruction = new IR_Direct_Call_Instruction(object_type = IR_Direct_Call_Instruction, result_value = result_value.1, function = function.1, dump = dump_ir_direct_call_instruction_190.address, arguments_size = 0, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 81
  call malloc
  #     .object_type = IR_Direct_Call_Instruction
  mov rbx, IR_Direct_Call_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_direct_call_instruction_190.address
  lea r14, dump_ir_direct_call_instruction_190[rip]
  mov [rax+57], r14
  #     .arguments_size = 0
  mov QWORD PTR [rax+65], 0
  #     .function = function.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+73], r14
  # [discarded value]: $1.1
  # [discarded value]: function.1
  # [live values]: result_value.1:rbx:[rbp-24] call_arguments.1:[rbp-16] instruction.1:rax 
  .loc 5 595 5
  # $3.1: @IR_Call_Instruction = call(add_arguments_187, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-32], rax
  call add_arguments_187
  # [discarded value]: $3.1
  # [discarded value]: call_arguments.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 596 9
  # $4.1: Boolean = result_value.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_direct_call_instruction_191__2, .LABEL__create_ir_direct_call_instruction_191__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_direct_call_instruction_191__3
.LABEL__create_ir_direct_call_instruction_191__2:
  .loc 5 597 9
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-24] instruction.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__create_ir_direct_call_instruction_191__3)
.LABEL__create_ir_direct_call_instruction_191__3:
  .loc 5 599 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_direct_call_instruction_191__end
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  # [discarded value]: instruction.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_direct_call_instruction_191__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_direct_call_instruction_191__stack_frame_size: .word 48

  .loc 5 605 1
  .text
dump_ir_dynamic_call_instruction_192:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_dynamic_call_instruction_192__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_dynamic_call_instruction_192__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 606 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 607 20
  # instruction.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 608 25
  # function_address.1: @IR_Variable_Value = call(get_function_address_194, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_function_address_194
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rax 
  .loc 5 609 5
  # $3.1: @FILE = call(write_337, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_260[rip] # "call"
  mov [rbp-24], rax
  call write_337
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $3.1:rax 
  .loc 5 609 5
  # $4.1: @FILE = call(write_339, $3.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $4.1:rax 
  .loc 5 609 41
  # $5.1: @IR_Variable = load_struct_member(function_address.1, variable)
  mov rbx, [rbp-24]
  mov r15, [rbx+48]
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $5.1:r15 
  .loc 5 609 41
  # $6.1: @String = load_struct_member($5.1, name)
  mov r14, [r15+16]
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $6.1:r14 
  .loc 5 609 5
  # $7.1: @FILE = call(write_337, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $7.1:rax 
  .loc 5 609 5
  # $8.1: @FILE = call(write_339, $7.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $8.1:rax 
  .loc 5 609 90
  # $9.1: Int = load_struct_member(function_address.1, version)
  mov rbx, [rbp-24]
  mov r15, [rbx+56]
  # [discarded value]: function_address.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:rax $9.1:r15 
  .loc 5 609 5
  # $10.1: @FILE = call(write_336, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 610 5
  # call(dump_ir_call_instruction_arguments_186, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_186
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 611 12
  # $11.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_339
  # [discarded value]: file.1
  # [live values]: $11.1:rax 
  .loc 5 611 12
  # $12.1: @FILE = call(end_line_340, $11.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 611 5
  # return($12.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_dynamic_call_instruction_192__end
  # [discarded value]: $12.1
  # [live values]: 
.LABEL__dump_ir_dynamic_call_instruction_192__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_dynamic_call_instruction_192__stack_frame_size: .word 32

  .loc 5 614 1
  .text
create_ir_dynamic_call_instruction_193:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_dynamic_call_instruction_193__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_dynamic_call_instruction_193__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function_address.1: @IR_Variable_Value = load_variable(function_address)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function_address.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  .loc 5 615 20
  # instruction.1: @IR_Dynamic_Call_Instruction = new IR_Dynamic_Call_Instruction(object_type = IR_Dynamic_Call_Instruction, result_value = result_value.1, dump = dump_ir_dynamic_call_instruction_192.address, arguments_size = 0, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Dynamic_Call_Instruction
  mov rbx, IR_Dynamic_Call_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_dynamic_call_instruction_192.address
  lea r14, dump_ir_dynamic_call_instruction_192[rip]
  mov [rax+57], r14
  #     .arguments_size = 0
  mov QWORD PTR [rax+65], 0
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] instruction.1:rax 
  .loc 5 616 5
  # $3.1: @IR_Call_Instruction = call(add_arguments_187, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-32], rax
  call add_arguments_187
  # [discarded value]: $3.1
  # [discarded value]: call_arguments.1
  # [live values]: result_value.1:[rbp-24] function_address.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 617 5
  # call(set_operand_value_178, instruction.1, "function_address", function_address.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_261[rip] # "function_address"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: function_address.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 618 9
  # $4.1: Boolean = result_value.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_dynamic_call_instruction_193__2, .LABEL__create_ir_dynamic_call_instruction_193__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_dynamic_call_instruction_193__3
.LABEL__create_ir_dynamic_call_instruction_193__2:
  .loc 5 619 9
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-24] instruction.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__create_ir_dynamic_call_instruction_193__3)
.LABEL__create_ir_dynamic_call_instruction_193__3:
  .loc 5 621 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_dynamic_call_instruction_193__end
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  # [discarded value]: instruction.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_dynamic_call_instruction_193__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_dynamic_call_instruction_193__stack_frame_size: .word 48

  .loc 5 624 1
  .text
get_function_address_194:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_function_address_194__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_function_address_194__1:
  # self.1: @IR_Dynamic_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 625 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 625 12
  # $3.1: @IR_Variable_Value = call(get_180, $1.1, "function_address")
  mov rdi, rax
  lea rsi, .LABEL__string_261[rip] # "function_address"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 625 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_function_address_194__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_function_address_194__end:
  mov rsp, rbp
  pop rbp
  ret

get_function_address_194__stack_frame_size: .word 16

  .loc 5 631 1
  .text
dump_ir_cast_instruction_195:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_cast_instruction_195__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_cast_instruction_195__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 632 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 633 20
  # instruction.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 634 12
  # $2.1: @FILE = call(write_337, file.1, "cast")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_262[rip] # "cast"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 634 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 634 48
  # $4.1: @IR_Value = call(get_value_197, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_197
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 634 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 634 12
  # $6.1: @FILE = call(write_339, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 634 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 634 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_cast_instruction_195__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_cast_instruction_195__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_cast_instruction_195__stack_frame_size: .word 32

  .loc 5 637 1
  .text
create_ir_cast_instruction_196:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_cast_instruction_196__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_cast_instruction_196__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 638 20
  # instruction.1: @IR_Cast_Instruction = new IR_Cast_Instruction(object_type = IR_Cast_Instruction, result_value = result_value.1, dump = dump_ir_cast_instruction_195.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Cast_Instruction
  mov rbx, IR_Cast_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_cast_instruction_195.address
  lea r14, dump_ir_cast_instruction_195[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 639 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: result_value.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 640 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-24] 
  .loc 5 641 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_cast_instruction_196__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_cast_instruction_196__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_cast_instruction_196__stack_frame_size: .word 32

  .loc 5 644 1
  .text
get_value_197:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_197__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_197__1:
  # self.1: @IR_Cast_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 645 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 645 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 645 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_197__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_197__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_197__stack_frame_size: .word 16

  .loc 5 656 1
  .text
dump_ir_conditional_jump_instruction_198:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_conditional_jump_instruction_198__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_conditional_jump_instruction_198__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 657 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 658 20
  # instruction.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 659 12
  # $2.1: @FILE = call(write_337, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_264[rip] # "jump"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 659 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 659 48
  # $4.1: @IR_Value = call(get_condition_value_199, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_condition_value_199
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 659 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 659 12
  # $6.1: @FILE = call(write_337, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 659 119
  # $7.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 659 12
  # $8.1: @FILE = call(write_block_label_8, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 659 12
  # $9.1: @FILE = call(write_337, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 659 173
  # $10.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [discarded value]: instruction.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 5 659 12
  # $11.1: @FILE = call(write_block_label_8, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 659 12
  # $12.1: @FILE = call(write_339, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 659 12
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 659 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_conditional_jump_instruction_198__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__dump_ir_conditional_jump_instruction_198__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_conditional_jump_instruction_198__stack_frame_size: .word 32

  .loc 5 662 1
  .text
get_condition_value_199:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_condition_value_199__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_condition_value_199__1:
  # self.1: @IR_Conditional_Jump_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 663 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 663 12
  # $2.1: @IR_Value = call(get_180, $1.1, "condition")
  mov rdi, rax
  lea rsi, .LABEL__string_246[rip] # "condition"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 663 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_condition_value_199__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_condition_value_199__end:
  mov rsp, rbp
  pop rbp
  ret

get_condition_value_199__stack_frame_size: .word 16

  .loc 5 670 1
  .text
dump_ir_direct_jump_instruction_200:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_direct_jump_instruction_200__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_direct_jump_instruction_200__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 671 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 672 20
  # instruction.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 673 12
  # $2.1: @FILE = call(write_337, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_264[rip] # "jump"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 673 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 673 60
  # $4.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 5 673 12
  # $5.1: @FILE = call(write_block_label_8, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 673 12
  # $6.1: @FILE = call(write_339, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 673 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 673 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_direct_jump_instruction_200__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_direct_jump_instruction_200__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_direct_jump_instruction_200__stack_frame_size: .word 16

  .loc 5 679 1
  .text
dump_ir_load_array_item_instruction_201:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_array_item_instruction_201__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_array_item_instruction_201__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 680 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 681 20
  # instruction.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 682 12
  # $2.1: @FILE = call(write_337, file.1, "load_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_265[rip] # "load_array_item"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 682 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 682 59
  # $4.1: @IR_Value = call(get_array_value_203, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_203
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 682 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 682 12
  # $6.1: @FILE = call(write_337, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 682 114
  # $7.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_204
  # [discarded value]: instruction.1
  # [live values]: $6.1:[rbp-24] $7.1:rax 
  .loc 5 682 12
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: $8.1:rax 
  .loc 5 682 12
  # $9.1: @FILE = call(write_339, $8.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $8.1
  # [live values]: $9.1:rax 
  .loc 5 682 12
  # $10.1: @FILE = call(end_line_340, $9.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [live values]: $10.1:rax 
  .loc 5 682 5
  # return($10.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_array_item_instruction_201__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__dump_ir_load_array_item_instruction_201__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_array_item_instruction_201__stack_frame_size: .word 32

  .loc 5 685 1
  .text
create_ir_load_array_item_instruction_202:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_array_item_instruction_202__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_array_item_instruction_202__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: result_value.1:rdi array_value.1:rsi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  .loc 5 686 20
  # instruction.1: @IR_Load_Array_Item_Instruction = new IR_Load_Array_Item_Instruction(object_type = IR_Load_Array_Item_Instruction, result_value = result_value.1, dump = dump_ir_load_array_item_instruction_201.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Load_Array_Item_Instruction
  mov rbx, IR_Load_Array_Item_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_load_array_item_instruction_201.address
  lea r14, dump_ir_load_array_item_instruction_201[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax 
  .loc 5 687 5
  # call(set_operand_value_178, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_266[rip] # "array_value"
  mov rdx, [rbp-16]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: array_value.1
  # [live values]: result_value.1:[rbp-24] index_value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 688 5
  # call(set_operand_value_178, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_267[rip] # "index_value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: index_value.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 689 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-32] 
  .loc 5 690 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_load_array_item_instruction_202__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_array_item_instruction_202__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_array_item_instruction_202__stack_frame_size: .word 32

  .loc 5 693 1
  .text
get_array_value_203:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_203__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_203__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 694 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 694 12
  # $2.1: @IR_Value = call(get_180, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_266[rip] # "array_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 694 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_203__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_203__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_203__stack_frame_size: .word 16

  .loc 5 697 1
  .text
get_index_value_204:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_204__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_204__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 698 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 698 12
  # $2.1: @IR_Value = call(get_180, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_267[rip] # "index_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 698 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_204__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_204__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_204__stack_frame_size: .word 16

  .loc 5 706 1
  .text
dump_ir_load_struct_member_instruction_205:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_struct_member_instruction_205__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_struct_member_instruction_205__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 707 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 708 20
  # instruction.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 709 9
  # $2.1: Boolean = load_struct_member(instruction.1, load_address)
  mov bl, [rax+73]
  # [live values]: file.1:[rbp-8] instruction.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__dump_ir_load_struct_member_instruction_205__2, .LABEL__dump_ir_load_struct_member_instruction_205__4)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__dump_ir_load_struct_member_instruction_205__4
.LABEL__dump_ir_load_struct_member_instruction_205__2:
  .loc 5 710 9
  # $4.1: @FILE = call(write_337, file.1, "load_struct_member_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_268[rip] # "load_struct_member_address"
  call write_337
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__dump_ir_load_struct_member_instruction_205__3)
.LABEL__dump_ir_load_struct_member_instruction_205__3:
  .loc 5 714 12
  # $5.1: @FILE = call(write_339, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_339
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:rax 
  .loc 5 714 34
  # $6.1: @IR_Value = call(get_struct_pointer_value_207, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_struct_pointer_value_207
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 5 714 12
  # $7.1: @FILE = call(write_154, $5.1, $6.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 5 714 12
  # $8.1: @FILE = call(write_337, $7.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $8.1:rax 
  .loc 5 714 98
  # $9.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $9.1:r15 
  .loc 5 714 98
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $10.1:r14 
  .loc 5 714 12
  # $11.1: @FILE = call(write_337, $8.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $11.1:rax 
  .loc 5 714 12
  # $12.1: @FILE = call(write_339, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $12.1:rax 
  .loc 5 714 12
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $13.1:rax 
  .loc 5 714 5
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_load_struct_member_instruction_205__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__dump_ir_load_struct_member_instruction_205__4:
  .loc 5 712 9
  # $3.1: @FILE = call(write_337, file.1, "load_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_269[rip] # "load_struct_member"
  call write_337
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__dump_ir_load_struct_member_instruction_205__3)
  jmp .LABEL__dump_ir_load_struct_member_instruction_205__3
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_load_struct_member_instruction_205__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_struct_member_instruction_205__stack_frame_size: .word 32

  .loc 5 717 1
  .text
create_ir_load_struct_member_instruction_206:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_struct_member_instruction_206__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_struct_member_instruction_206__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx 
  # load_address.1: Boolean = load_variable(load_address)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-1], cl
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  .loc 5 718 20
  # instruction.1: @IR_Load_Struct_Member_Instruction = new IR_Load_Struct_Member_Instruction(object_type = IR_Load_Struct_Member_Instruction, result_value = result_value.1, struct_type_member = struct_type_member.1, load_address = load_address.1, dump = dump_ir_load_struct_member_instruction_205.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-33], rax
  mov rdi, 74
  call malloc
  #     .object_type = IR_Load_Struct_Member_Instruction
  mov rbx, IR_Load_Struct_Member_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_load_struct_member_instruction_205.address
  lea r14, dump_ir_load_struct_member_instruction_205[rip]
  mov [rax+57], r14
  #     .struct_type_member = struct_type_member.1
  mov r14, [rbp-9]
  mov QWORD PTR [rax+65], r14
  #     .load_address = load_address.1
  mov r13b, [rbp-1]
  mov BYTE PTR [rax+73], r13b
  # [discarded value]: $1.1
  # [discarded value]: load_address.1
  # [live values]: result_value.1:rbx:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:r14:[rbp-9] instruction.1:rax 
  .loc 5 719 5
  # call(set_operand_value_178, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_270[rip] # "struct_pointer_value"
  mov rdx, [rbp-17]
  mov [rbp-33], rax
  call set_operand_value_178
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] instruction.1:[rbp-33] 
  .loc 5 720 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-25]
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] instruction.1:rbx:[rbp-33] 
  .loc 5 722 9
  # $3.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-9]
  mov r14, [r15+16]
  # [discarded value]: struct_type_member.1
  # [live values]: result_value.1:rax:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:rbx:[rbp-33] $3.1:r14 
  .loc 5 722 9
  # $4.1: Boolean = call(is_343, $3.1, IR_Struct_Type)
  mov rdi, r14
  mov rsi, IR_Struct_Type[rip]
  call is_343
  # [discarded value]: $3.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_load_struct_member_instruction_206__2, .LABEL__create_ir_load_struct_member_instruction_206__3)
  test al, al
  mov [rbp-34], al
  jz .LABEL__create_ir_load_struct_member_instruction_206__3
.LABEL__create_ir_load_struct_member_instruction_206__2:
  .loc 5 723 30
  # result_value_link.1: @IR_Requires_Value_Link = new IR_Requires_Value_Link(object_type = IR_Requires_Value_Link, value = struct_pointer_value.1, back_link = undefined)
  mov rdi, 24
  call malloc
  #     .object_type = IR_Requires_Value_Link
  mov rbx, IR_Requires_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = struct_pointer_value.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rbx:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rax 
  .loc 5 724 39
  # $6.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = result_value.1, back_link = result_value_link.1)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = result_value_link.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  #     .value = result_value.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+16], r15
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] $6.1:rax 
  .loc 5 724 9
  # store_struct_member(result_value_link.1, back_link, $6.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $6.1
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] 
  .loc 5 725 9
  # $7.1: @List = load_struct_member(result_value.1, links)
  mov rax, [r15+32]
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] $7.1:rax 
  .loc 5 725 9
  # call(append_318, $7.1, result_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_318
  # [discarded value]: $7.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:[rbp-42] 
  .loc 5 726 9
  # $8.1: @List = load_struct_member(struct_pointer_value.1, links)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rax:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:[rbp-42] $8.1:rbx 
  .loc 5 726 43
  # $9.1: @IR_Required_By_Value_Link = load_struct_member(result_value_link.1, back_link)
  mov r15, [rbp-42]
  mov r14, [r15+8]
  # [discarded value]: result_value_link.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rax:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] $8.1:rbx $9.1:r14 
  .loc 5 726 9
  # call(append_318, $8.1, $9.1)
  mov rdi, rbx
  mov rsi, r14
  call append_318
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # jump(.LABEL__create_ir_load_struct_member_instruction_206__3)
.LABEL__create_ir_load_struct_member_instruction_206__3:
  .loc 5 729 5
  # return(instruction.1)
  mov rax, [rbp-33]
  jmp .LABEL__create_ir_load_struct_member_instruction_206__end
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] 
  # [discarded value]: instruction.1
  # [discarded value]: struct_pointer_value.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_load_struct_member_instruction_206__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_struct_member_instruction_206__stack_frame_size: .word 48

  .loc 5 732 1
  .text
get_struct_pointer_value_207:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_207__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_207__1:
  # self.1: @IR_Load_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 733 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 733 12
  # $2.1: @IR_Value = call(get_180, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_270[rip] # "struct_pointer_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 733 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_207__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_207__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_207__stack_frame_size: .word 16

  .loc 5 739 1
  .text
dump_ir_load_variable_address_instruction_208:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_variable_address_instruction_208__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_variable_address_instruction_208__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 740 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 741 20
  # instruction.1: @IR_Load_Variable_Address_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 742 12
  # $2.1: @FILE = call(write_337, file.1, "load_variable_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_271[rip] # "load_variable_address"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 742 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 742 65
  # $4.1: @IR_Variable_Value = call(get_variable_value_210, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_variable_value_210
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 742 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 742 12
  # $6.1: @FILE = call(write_339, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 742 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 742 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_variable_address_instruction_208__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_load_variable_address_instruction_208__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_variable_address_instruction_208__stack_frame_size: .word 32

  .loc 5 745 1
  .text
create_ir_load_variable_address_instruction_209:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_address_instruction_209__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_address_instruction_209__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # variable_value.1: @IR_Variable_Value = load_variable(variable_value)
  # [live values]: result_value.1:rdi variable_value.1:rsi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] variable_value.1:[rbp-8] $1.1:rax 
  .loc 5 746 20
  # instruction.1: @IR_Load_Variable_Address_Instruction = new IR_Load_Variable_Address_Instruction(object_type = IR_Load_Variable_Address_Instruction, result_value = result_value.1, dump = dump_ir_load_variable_address_instruction_208.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Load_Variable_Address_Instruction
  mov rbx, IR_Load_Variable_Address_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_load_variable_address_instruction_208.address
  lea r14, dump_ir_load_variable_address_instruction_208[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] variable_value.1:[rbp-8] instruction.1:rax 
  .loc 5 747 5
  # call(set_operand_value_178, instruction.1, "variable_value", variable_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_272[rip] # "variable_value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [live values]: result_value.1:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] 
  .loc 5 748 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-16] variable_value.1:[rbp-8] instruction.1:rbx:[rbp-24] 
  .loc 5 750 26
  # result_value_link.1: @IR_Requires_Value_Link = new IR_Requires_Value_Link(object_type = IR_Requires_Value_Link, value = variable_value.1, back_link = undefined)
  mov rdi, 24
  call malloc
  #     .object_type = IR_Requires_Value_Link
  mov rbx, IR_Requires_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = variable_value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:[rbp-16] variable_value.1:rbx:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rax 
  .loc 5 751 35
  # $4.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = result_value.1, back_link = result_value_link.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = result_value_link.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .value = result_value.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: result_value.1:r15:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] $4.1:rax 
  .loc 5 751 5
  # store_struct_member(result_value_link.1, back_link, $4.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $4.1
  # [live values]: result_value.1:r15:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] 
  .loc 5 752 5
  # $5.1: @List = load_struct_member(result_value.1, links)
  mov rax, [r15+32]
  # [discarded value]: result_value.1
  # [live values]: variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] $5.1:rax 
  .loc 5 752 5
  # call(append_318, $5.1, result_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_318
  # [discarded value]: $5.1
  # [live values]: variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:[rbp-32] 
  .loc 5 753 5
  # $6.1: @List = load_struct_member(variable_value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: variable_value.1
  # [live values]: instruction.1:[rbp-24] result_value_link.1:[rbp-32] $6.1:rbx 
  .loc 5 753 33
  # $7.1: @IR_Required_By_Value_Link = load_struct_member(result_value_link.1, back_link)
  mov rax, [rbp-32]
  mov r15, [rax+8]
  # [discarded value]: result_value_link.1
  # [live values]: instruction.1:[rbp-24] $6.1:rbx $7.1:r15 
  .loc 5 753 5
  # call(append_318, $6.1, $7.1)
  mov rdi, rbx
  mov rsi, r15
  call append_318
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 755 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_load_variable_address_instruction_209__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_address_instruction_209__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_address_instruction_209__stack_frame_size: .word 32

  .loc 5 758 1
  .text
get_variable_value_210:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_210__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_210__1:
  # self.1: @IR_Load_Variable_Address_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 759 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 759 12
  # $3.1: @IR_Variable_Value = call(get_180, $1.1, "variable_value")
  mov rdi, rax
  lea rsi, .LABEL__string_272[rip] # "variable_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 759 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_variable_value_210__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_variable_value_210__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_210__stack_frame_size: .word 16

  .loc 5 766 1
  .text
dump_ir_load_variable_instruction_211:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_load_variable_instruction_211__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_load_variable_instruction_211__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 767 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 768 12
  # $1.1: @FILE = call(write_337, file.1, "load_variable")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_273[rip] # "load_variable"
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $1.1:rax 
  .loc 5 768 12
  # $2.1: @FILE = call(write_339, $1.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 768 58
  # $3.1: @IR_Load_Variable_Instruction = instruction.1
  mov rbx, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:rbx 
  .loc 5 768 57
  # $4.1: @IR_Variable = load_struct_member($3.1, variable)
  mov r15, [rbx+65]
  # [discarded value]: $3.1
  # [live values]: $2.1:rax $4.1:r15 
  .loc 5 768 57
  # $5.1: @String = load_struct_member($4.1, name)
  mov rbx, [r15+16]
  # [discarded value]: $4.1
  # [live values]: $2.1:rax $5.1:rbx 
  .loc 5 768 12
  # $6.1: @FILE = call(write_337, $2.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_337
  # [discarded value]: $5.1
  # [discarded value]: $2.1
  # [live values]: $6.1:rax 
  .loc 5 768 12
  # $7.1: @FILE = call(write_339, $6.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 768 12
  # $8.1: @FILE = call(end_line_340, $7.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  .loc 5 768 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_load_variable_instruction_211__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__dump_ir_load_variable_instruction_211__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_load_variable_instruction_211__stack_frame_size: .word 16

  .loc 5 771 1
  .text
create_ir_load_variable_instruction_212:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_instruction_212__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_instruction_212__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 772 93
  # $1.1: @IR_Variable = load_struct_member(result_value.1, variable)
  mov rax, [rdi+48]
  # [live values]: result_value.1:rdi $1.1:rax 
  .loc 5 471 38
  # $2.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 772 20
  # instruction.1: @IR_Load_Variable_Instruction = new IR_Load_Variable_Instruction(object_type = IR_Load_Variable_Instruction, result_value = result_value.1, variable = $1.1, dump = dump_ir_load_variable_instruction_211.address, location = null, operand_values = $2.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Load_Variable_Instruction
  mov rbx, IR_Load_Variable_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_load_variable_instruction_211.address
  lea r14, dump_ir_load_variable_instruction_211[rip]
  mov [rax+57], r14
  #     .variable = $1.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+65], r14
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] instruction.1:rax 
  .loc 5 773 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rax 
  .loc 5 774 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_load_variable_instruction_212__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_instruction_212__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_instruction_212__stack_frame_size: .word 32

  .loc 5 781 1
  .text
dump_ir_new_instruction_213:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_new_instruction_213__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_new_instruction_213__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 782 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 783 20
  # instruction.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 784 12
  # $2.1: @FILE = call(write_337, file.1, "new")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_274[rip] # "new"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 784 12
  # $3.1: @FILE = call(write_339, $2.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 784 47
  # $4.1: @IR_Value = call(get_init_value_215, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_init_value_215
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 784 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 784 12
  # $6.1: @FILE = call(end_line_340, $5.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 784 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_new_instruction_213__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__dump_ir_new_instruction_213__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_new_instruction_213__stack_frame_size: .word 32

  .loc 5 787 1
  .text
create_ir_new_instruction_214:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_new_instruction_214__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_new_instruction_214__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: result_value.1:rdi type.1:rsi 
  # init_value.1: @IR_Value = load_variable(init_value)
  # [live values]: result_value.1:rdi type.1:rsi init_value.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] init_value.1:[rbp-8] $1.1:rax 
  .loc 5 788 20
  # instruction.1: @IR_New_Instruction = new IR_New_Instruction(object_type = IR_New_Instruction, result_value = result_value.1, type = type.1, dump = dump_ir_new_instruction_213.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_New_Instruction
  mov rbx, IR_New_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_new_instruction_213.address
  lea r14, dump_ir_new_instruction_213[rip]
  mov [rax+57], r14
  #     .type = type.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+65], r14
  # [discarded value]: $1.1
  # [discarded value]: type.1
  # [live values]: result_value.1:rbx:[rbp-24] init_value.1:[rbp-8] instruction.1:rax 
  .loc 5 789 5
  # call(set_operand_value_178, instruction.1, "init_value", init_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_275[rip] # "init_value"
  mov rdx, [rbp-8]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: init_value.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 790 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-32] 
  .loc 5 791 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_new_instruction_214__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_new_instruction_214__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_new_instruction_214__stack_frame_size: .word 32

  .loc 5 794 1
  .text
get_init_value_215:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_init_value_215__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_init_value_215__1:
  # self.1: @IR_New_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 795 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 795 12
  # $2.1: @IR_Value = call(get_180, $1.1, "init_value")
  mov rdi, rax
  lea rsi, .LABEL__string_275[rip] # "init_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 795 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_init_value_215__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_init_value_215__end:
  mov rsp, rbp
  pop rbp
  ret

get_init_value_215__stack_frame_size: .word 16

  .loc 5 801 1
  .text
dump_ir_return_instruction_216:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_return_instruction_216__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_return_instruction_216__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 802 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 803 20
  # instruction.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 804 9
  # $2.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_return_value_218
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 804 9
  # $3.1: Boolean = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rbx 
  # jump($3.1, .LABEL__dump_ir_return_instruction_216__2, .LABEL__dump_ir_return_instruction_216__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__dump_ir_return_instruction_216__3
.LABEL__dump_ir_return_instruction_216__2:
  .loc 5 805 16
  # $4.1: @FILE = call(write_337, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_276[rip] # "return"
  call write_337
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $4.1:rax 
  .loc 5 805 16
  # $5.1: @FILE = call(write_339, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 805 16
  # $6.1: @FILE = call(write_339, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 805 16
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $7.1:rax 
  .loc 5 805 9
  # return($7.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_return_instruction_216__end
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__dump_ir_return_instruction_216__3:
  .loc 5 807 12
  # $8.1: @FILE = call(write_337, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_276[rip] # "return"
  call write_337
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 5 807 12
  # $9.1: @FILE = call(write_339, $8.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:rax 
  .loc 5 807 50
  # $10.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_return_value_218
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 5 807 12
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $11.1:rax 
  .loc 5 807 12
  # $12.1: @FILE = call(write_339, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $12.1:rax 
  .loc 5 807 12
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $13.1:rax 
  .loc 5 807 5
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__dump_ir_return_instruction_216__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_return_instruction_216__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_return_instruction_216__stack_frame_size: .word 32

  .loc 5 810 1
  .text
create_ir_return_instruction_217:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_return_instruction_217__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_return_instruction_217__1:
  # return_value.1: @IR_Value = load_variable(return_value)
  # [live values]: return_value.1:rdi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  .loc 5 811 20
  # instruction.1: @IR_Return_Instruction = new IR_Return_Instruction(object_type = IR_Return_Instruction, result_value = null, dump = dump_ir_return_instruction_216.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-16], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Return_Instruction
  mov rbx, IR_Return_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_return_instruction_216.address
  lea r15, dump_ir_return_instruction_216[rip]
  mov [rax+57], r15
  # [discarded value]: $1.1
  # [live values]: return_value.1:[rbp-8] instruction.1:rax 
  .loc 5 812 9
  # $3.1: Boolean = return_value.1 != null
  cmp QWORD PTR [rbp-8], 0
  setne bl
  # [live values]: return_value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__create_ir_return_instruction_217__2, .LABEL__create_ir_return_instruction_217__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__create_ir_return_instruction_217__3
.LABEL__create_ir_return_instruction_217__2:
  .loc 5 813 9
  # call(set_operand_value_178, instruction.1, "return_value", return_value.1)
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_277[rip] # "return_value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__create_ir_return_instruction_217__3)
.LABEL__create_ir_return_instruction_217__3:
  .loc 5 815 5
  # return(instruction.1)
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_return_instruction_217__end
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: return_value.1
  # [live values]: 
.LABEL__create_ir_return_instruction_217__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_return_instruction_217__stack_frame_size: .word 32

  .loc 5 818 1
  .text
get_return_value_218:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_return_value_218__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_return_value_218__1:
  # self.1: @IR_Return_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 819 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 819 12
  # $2.1: @IR_Value = call(get_180, $1.1, "return_value")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "return_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 819 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_return_value_218__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_return_value_218__end:
  mov rsp, rbp
  pop rbp
  ret

get_return_value_218__stack_frame_size: .word 16

  .loc 5 825 1
  .text
dump_ir_set_instruction_219:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_set_instruction_219__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_set_instruction_219__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 826 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 827 20
  # instruction.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 828 23
  # $2.1: @IR_Value = call(get_value_221, instruction.1)
  mov rdi, rax
  call get_value_221
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $2.1:rax 
  .loc 5 828 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 828 12
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 828 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_set_instruction_219__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__dump_ir_set_instruction_219__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_set_instruction_219__stack_frame_size: .word 16

  .loc 5 831 1
  .text
create_ir_set_instruction_220:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_set_instruction_220__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_set_instruction_220__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 832 20
  # instruction.1: @IR_Set_Instruction = new IR_Set_Instruction(object_type = IR_Set_Instruction, result_value = result_value.1, dump = dump_ir_set_instruction_219.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Set_Instruction
  mov rbx, IR_Set_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_set_instruction_219.address
  lea r14, dump_ir_set_instruction_219[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 833 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: result_value.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 834 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-24] 
  .loc 5 835 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_set_instruction_220__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_set_instruction_220__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_set_instruction_220__stack_frame_size: .word 32

  .loc 5 838 1
  .text
get_value_221:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_221__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_221__1:
  # self.1: @IR_Set_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 839 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 839 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 839 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_221__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_221__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_221__stack_frame_size: .word 16

  .loc 5 845 1
  .text
dump_ir_store_array_item_instruction_222:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_store_array_item_instruction_222__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_store_array_item_instruction_222__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 846 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 847 20
  # instruction.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 848 12
  # $2.1: @FILE = call(write_337, file.1, "store_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_278[rip] # "store_array_item"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 848 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 848 60
  # $4.1: @IR_Value = call(get_array_value_224, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_224
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 848 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 848 12
  # $6.1: @FILE = call(write_337, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 848 115
  # $7.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_225
  # [live values]: instruction.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  .loc 5 848 12
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 848 12
  # $9.1: @FILE = call(write_337, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 848 170
  # $10.1: @IR_Value = call(get_value_226, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_226
  # [discarded value]: instruction.1
  # [live values]: $9.1:[rbp-24] $10.1:rax 
  .loc 5 848 12
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 848 12
  # $12.1: @FILE = call(write_339, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 848 12
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 848 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_store_array_item_instruction_222__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__dump_ir_store_array_item_instruction_222__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_store_array_item_instruction_222__stack_frame_size: .word 32

  .loc 5 851 1
  .text
create_ir_store_array_item_instruction_223:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_array_item_instruction_223__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_array_item_instruction_223__1:
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: array_value.1:rdi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: array_value.1:rdi index_value.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 852 20
  # instruction.1: @IR_Store_Array_Item_Instruction = new IR_Store_Array_Item_Instruction(object_type = IR_Store_Array_Item_Instruction, result_value = null, dump = dump_ir_store_array_item_instruction_222.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Store_Array_Item_Instruction
  mov rbx, IR_Store_Array_Item_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_store_array_item_instruction_222.address
  lea r15, dump_ir_store_array_item_instruction_222[rip]
  mov [rax+57], r15
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 853 5
  # call(set_operand_value_178, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_266[rip] # "array_value"
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 854 5
  # call(set_operand_value_178, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_267[rip] # "index_value"
  mov rdx, [rbp-16]
  call set_operand_value_178
  # [discarded value]: index_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 855 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_263[rip] # "value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 856 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_array_item_instruction_223__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_array_item_instruction_223__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_array_item_instruction_223__stack_frame_size: .word 32

  .loc 5 859 1
  .text
get_array_value_224:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_224__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_224__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 860 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 860 12
  # $2.1: @IR_Value = call(get_180, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_266[rip] # "array_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 860 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_224__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_224__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_224__stack_frame_size: .word 16

  .loc 5 863 1
  .text
get_index_value_225:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_225__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_225__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 864 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 864 12
  # $2.1: @IR_Value = call(get_180, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_267[rip] # "index_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 864 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_225__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_225__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_225__stack_frame_size: .word 16

  .loc 5 867 1
  .text
get_value_226:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_226__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_226__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 868 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 868 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 868 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_226__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_226__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_226__stack_frame_size: .word 16

  .loc 5 875 1
  .text
dump_ir_store_struct_member_instruction_227:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_store_struct_member_instruction_227__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_store_struct_member_instruction_227__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 876 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 877 20
  # instruction.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 878 12
  # $2.1: @FILE = call(write_337, file.1, "store_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_279[rip] # "store_struct_member"
  mov [rbp-16], rax
  call write_337
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 878 12
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 878 63
  # $4.1: @IR_Value = call(get_struct_pointer_value_229, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_struct_pointer_value_229
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 878 12
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 878 12
  # $6.1: @FILE = call(write_337, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 878 127
  # $7.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 878 127
  # $8.1: @String = load_struct_member($7.1, name)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $8.1:r14 
  .loc 5 878 12
  # $9.1: @FILE = call(write_337, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 878 12
  # $10.1: @FILE = call(write_337, $9.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-16] $10.1:rax 
  .loc 5 878 182
  # $11.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_230
  # [discarded value]: instruction.1
  # [live values]: $10.1:[rbp-24] $11.1:rax 
  .loc 5 878 12
  # $12.1: @FILE = call(write_154, $10.1, $11.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: $12.1:rax 
  .loc 5 878 12
  # $13.1: @FILE = call(write_339, $12.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 878 12
  # $14.1: @FILE = call(end_line_340, $13.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $13.1
  # [live values]: $14.1:rax 
  .loc 5 878 5
  # return($14.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_store_struct_member_instruction_227__end
  # [discarded value]: $14.1
  # [live values]: 
.LABEL__dump_ir_store_struct_member_instruction_227__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_store_struct_member_instruction_227__stack_frame_size: .word 32

  .loc 5 881 1
  .text
create_ir_store_struct_member_instruction_228:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_struct_member_instruction_228__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_struct_member_instruction_228__1:
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: struct_pointer_value.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 882 20
  # instruction.1: @IR_Store_Struct_Member_Instruction = new IR_Store_Struct_Member_Instruction(object_type = IR_Store_Struct_Member_Instruction, result_value = null, struct_type_member = struct_type_member.1, dump = dump_ir_store_struct_member_instruction_227.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Store_Struct_Member_Instruction
  mov rbx, IR_Store_Struct_Member_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_store_struct_member_instruction_227.address
  lea r15, dump_ir_store_struct_member_instruction_227[rip]
  mov [rax+57], r15
  #     .struct_type_member = struct_type_member.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $1.1
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:rax 
  .loc 5 883 5
  # call(set_operand_value_178, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_270[rip] # "struct_pointer_value"
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: struct_pointer_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 884 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_263[rip] # "value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 885 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_struct_member_instruction_228__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_struct_member_instruction_228__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_struct_member_instruction_228__stack_frame_size: .word 32

  .loc 5 888 1
  .text
get_struct_pointer_value_229:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_229__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_229__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 889 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 889 12
  # $2.1: @IR_Value = call(get_180, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_270[rip] # "struct_pointer_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 889 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_229__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_229__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_229__stack_frame_size: .word 16

  .loc 5 892 1
  .text
get_value_230:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_230__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_230__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 893 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 893 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_263[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 893 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_230__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_230__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_230__stack_frame_size: .word 16

  .loc 5 899 1
  .text
init_231:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_231__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_231__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # left_value.1: @IR_Value = load_variable(left_value)
  # [live values]: self.1:rdi left_value.1:rsi 
  # right_value.1: @IR_Value = load_variable(right_value)
  # [live values]: self.1:rdi left_value.1:rsi right_value.1:rdx 
  .loc 5 900 5
  # call(set_operand_value_178, self.1, "left_value", left_value.1)
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_280[rip] # "left_value"
  mov [rbp-16], rdx
  mov rdx, [rbp-8]
  mov [rbp-24], rdi
  call set_operand_value_178
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-24] right_value.1:[rbp-16] 
  .loc 5 901 5
  # call(set_operand_value_178, self.1, "right_value", right_value.1)
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_281[rip] # "right_value"
  mov rdx, [rbp-16]
  call set_operand_value_178
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-24] 
  .loc 5 902 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__init_231__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_231__end:
  mov rsp, rbp
  pop rbp
  ret

init_231__stack_frame_size: .word 32

  .loc 5 905 1
  .text
get_left_value_232:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_left_value_232__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_left_value_232__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 906 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 906 12
  # $2.1: @IR_Value = call(get_180, $1.1, "left_value")
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # "left_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 906 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_left_value_232__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_left_value_232__end:
  mov rsp, rbp
  pop rbp
  ret

get_left_value_232__stack_frame_size: .word 16

  .loc 5 909 1
  .text
get_right_value_233:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_right_value_233__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_right_value_233__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 910 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 910 12
  # $2.1: @IR_Value = call(get_180, $1.1, "right_value")
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # "right_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 910 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_right_value_233__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_right_value_233__end:
  mov rsp, rbp
  pop rbp
  ret

get_right_value_233__stack_frame_size: .word 16

  .loc 5 916 1
  .text
dump_ir_add_instruction_234:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_add_instruction_234__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_add_instruction_234__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 917 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 918 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 919 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 919 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 919 12
  # $4.1: @FILE = call(write_337, $3.1, " + ")
  mov rdi, rax
  lea rsi, .LABEL__string_282[rip] # " + "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 919 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 919 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 919 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 919 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_add_instruction_234__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_add_instruction_234__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_add_instruction_234__stack_frame_size: .word 32

  .loc 5 928 1
  .text
dump_ir_divide_instruction_235:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_divide_instruction_235__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_divide_instruction_235__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 929 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 930 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 931 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 931 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 931 12
  # $4.1: @FILE = call(write_337, $3.1, " / ")
  mov rdi, rax
  lea rsi, .LABEL__string_283[rip] # " / "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 931 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 931 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 931 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 931 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_divide_instruction_235__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_divide_instruction_235__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_divide_instruction_235__stack_frame_size: .word 32

  .loc 5 937 1
  .text
dump_ir_equal_comparison_instruction_236:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_equal_comparison_instruction_236__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_equal_comparison_instruction_236__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 938 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 939 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 940 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 940 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 940 12
  # $4.1: @FILE = call(write_337, $3.1, " == ")
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # " == "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 940 79
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 940 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 940 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 940 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_equal_comparison_instruction_236__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_equal_comparison_instruction_236__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_equal_comparison_instruction_236__stack_frame_size: .word 32

  .loc 5 946 1
  .text
dump_ir_greater_comparison_instruction_237:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_greater_comparison_instruction_237__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_greater_comparison_instruction_237__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 947 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 948 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 949 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 949 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 949 12
  # $4.1: @FILE = call(write_337, $3.1, " > ")
  mov rdi, rax
  lea rsi, .LABEL__string_285[rip] # " > "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 949 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 949 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 949 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 949 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_greater_comparison_instruction_237__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_greater_comparison_instruction_237__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_greater_comparison_instruction_237__stack_frame_size: .word 32

  .loc 5 955 1
  .text
dump_ir_greater_or_equal_comparison_instruction_238:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_greater_or_equal_comparison_instruction_238__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_greater_or_equal_comparison_instruction_238__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 956 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 957 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 958 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 958 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 958 12
  # $4.1: @FILE = call(write_337, $3.1, " >= ")
  mov rdi, rax
  lea rsi, .LABEL__string_286[rip] # " >= "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 958 79
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 958 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 958 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 958 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_greater_or_equal_comparison_instruction_238__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_greater_or_equal_comparison_instruction_238__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_greater_or_equal_comparison_instruction_238__stack_frame_size: .word 32

  .loc 5 964 1
  .text
dump_ir_less_comparison_instruction_239:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_less_comparison_instruction_239__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_less_comparison_instruction_239__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 965 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 966 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 967 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 967 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 967 12
  # $4.1: @FILE = call(write_337, $3.1, " < ")
  mov rdi, rax
  lea rsi, .LABEL__string_287[rip] # " < "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 967 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 967 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 967 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 967 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_less_comparison_instruction_239__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_less_comparison_instruction_239__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_less_comparison_instruction_239__stack_frame_size: .word 32

  .loc 5 973 1
  .text
dump_ir_less_or_equal_comparison_instruction_240:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_less_or_equal_comparison_instruction_240__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_less_or_equal_comparison_instruction_240__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 974 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 975 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 976 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 976 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 976 12
  # $4.1: @FILE = call(write_337, $3.1, " <= ")
  mov rdi, rax
  lea rsi, .LABEL__string_288[rip] # " <= "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 976 79
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 976 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 976 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 976 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_less_or_equal_comparison_instruction_240__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_less_or_equal_comparison_instruction_240__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_less_or_equal_comparison_instruction_240__stack_frame_size: .word 32

  .loc 5 982 1
  .text
dump_ir_modulo_instruction_241:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_modulo_instruction_241__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_modulo_instruction_241__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 983 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 984 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 985 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 985 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 985 12
  # $4.1: @FILE = call(write_337, $3.1, " // ")
  mov rdi, rax
  lea rsi, .LABEL__string_289[rip] # " // "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 985 79
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 985 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 985 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 985 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_modulo_instruction_241__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_modulo_instruction_241__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_modulo_instruction_241__stack_frame_size: .word 32

  .loc 5 991 1
  .text
dump_ir_multiply_instruction_242:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_multiply_instruction_242__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_multiply_instruction_242__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 992 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 993 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 994 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 994 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 994 12
  # $4.1: @FILE = call(write_337, $3.1, " * ")
  mov rdi, rax
  lea rsi, .LABEL__string_290[rip] # " * "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 994 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 994 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 994 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 994 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_multiply_instruction_242__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_multiply_instruction_242__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_multiply_instruction_242__stack_frame_size: .word 32

  .loc 5 1000 1
  .text
dump_ir_not_equal_comparison_instruction_243:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_not_equal_comparison_instruction_243__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_not_equal_comparison_instruction_243__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1001 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1002 20
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1003 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1003 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1003 12
  # $4.1: @FILE = call(write_337, $3.1, " != ")
  mov rdi, rax
  lea rsi, .LABEL__string_291[rip] # " != "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1003 79
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1003 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1003 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1003 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_not_equal_comparison_instruction_243__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_not_equal_comparison_instruction_243__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_not_equal_comparison_instruction_243__stack_frame_size: .word 32

  .loc 5 1009 1
  .text
dump_ir_substract_instruction_244:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_substract_instruction_244__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_substract_instruction_244__1:
  # instruction.1: @IR_Binary_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1011 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1012 23
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-16]
  call get_left_value_232
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] $2.1:rax 
  .loc 5 1012 12
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1012 12
  # $4.1: @FILE = call(write_337, $3.1, " - ")
  mov rdi, rax
  lea rsi, .LABEL__string_292[rip] # " - "
  call write_337
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1012 78
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1012 12
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1012 12
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1012 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_substract_instruction_244__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__dump_ir_substract_instruction_244__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_substract_instruction_244__stack_frame_size: .word 32

  .loc 5 1018 1
  .text
dump_ir_phi_instruction_245:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_phi_instruction_245__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_phi_instruction_245__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1019 5
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1020 20
  # instruction.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1021 5
  # $2.1: @FILE = call(write_337, file.1, "phi")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_293[rip] # "phi"
  mov [rbp-16], rax
  call write_337
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1021 5
  # $3.1: @FILE = call(write_339, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 1022 29
  # $4.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $4.1:rbx 
  .loc 5 1022 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($4.1, first_entry)
  mov rax, [rbx]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax 
  .loc 5 1023 9
  # $6.1: Boolean = operand_values_entry.1 != null
  cmp rax, 0
  setne bl
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__dump_ir_phi_instruction_245__4, .LABEL__dump_ir_phi_instruction_245__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__dump_ir_phi_instruction_245__3
.LABEL__dump_ir_phi_instruction_245__4:
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.1)
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 1025 24
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:rax:[rbp-16] $7.1:rbx 
  .loc 5 1025 13
  # $8.1: @FILE = call(write_154, file.1, $7.1, true)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov dl, 1
  call write_154
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 1026 36
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: operand_values_entry.2
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.3:rbx:[rbp-16] 
  .loc 5 1027 17
  # $10.1: Boolean = operand_values_entry.3 == null
  cmp rbx, 0
  sete al
  mov [rbp-16], rbx
  # [discarded value]: operand_values_entry.3
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__dump_ir_phi_instruction_245__3, .LABEL__dump_ir_phi_instruction_245__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__dump_ir_phi_instruction_245__7
.LABEL__dump_ir_phi_instruction_245__3:
  .loc 5 1033 12
  # $12.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_339
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $12.1:rax $10.1:[rbp-18] 
  .loc 5 1033 12
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $13.1:rax $10.1:[rbp-18] 
  .loc 5 1033 5
  # return($13.1)
  mov [rbp-26], rax
  jmp .LABEL__dump_ir_phi_instruction_245__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
.LABEL__dump_ir_phi_instruction_245__7:
  .loc 5 1030 13
  # $11.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # jump(.LABEL__dump_ir_phi_instruction_245__4)
  jmp .LABEL__dump_ir_phi_instruction_245__4
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_ir_phi_instruction_245__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_phi_instruction_245__stack_frame_size: .word 32

  .loc 5 1036 1
  .text
create_ir_phi_instruction_246:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_phi_instruction_246__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_phi_instruction_246__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 471 38
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  .loc 5 1037 20
  # instruction.1: @IR_Phi_Instruction = new IR_Phi_Instruction(object_type = IR_Phi_Instruction, result_value = result_value.1, dump = dump_ir_phi_instruction_245.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-16], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Phi_Instruction
  mov rbx, IR_Phi_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = dump_ir_phi_instruction_245.address
  lea r14, dump_ir_phi_instruction_245[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-8] instruction.1:rax 
  .loc 5 1038 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rax 
  .loc 5 1039 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_phi_instruction_246__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_phi_instruction_246__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_phi_instruction_246__stack_frame_size: .word 16

  .loc 5 1042 1
  .text
append_247:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_247__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_247__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 5 1043 5
  # call(set_operand_value_178, self.1, value.1, value.1)
  mov rdx, rsi
  call set_operand_value_178
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__append_247__end
  # [live values]: 
.LABEL__append_247__end:
  mov rsp, rbp
  pop rbp
  ret

append_247__stack_frame_size: .word 0

  .loc 5 1046 1
  .text
is_redundant_248:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_redundant_248__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_redundant_248__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 1050 29
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 1050 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: operand_values_entry.1:rbx 
  .loc 5 1051 9
  # $3.1: Boolean = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_redundant_248__2, .LABEL__is_redundant_248__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  jz .LABEL__is_redundant_248__3
.LABEL__is_redundant_248__2:
  .loc 5 1052 9
  # call(abort)
  call abort
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_redundant_248__3:
  .loc 5 1054 20
  # other_value.1: @IR_Value = load_struct_member(operand_values_entry.1, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:rax:[rbp-9] $3.1:[rbp-1] other_value.1:rbx 
  .loc 5 1055 28
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:rbx operand_values_entry.3:r15:[rbp-9] 
  # jump(.LABEL__is_redundant_248__4)
  mov [rbp-17], rbx
  mov [rbp-9], r15
.LABEL__is_redundant_248__4:
  # operand_values_entry.4: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.7)
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  .loc 5 1056 12
  # $6.1: Boolean = operand_values_entry.4 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__is_redundant_248__5, .LABEL__is_redundant_248__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__is_redundant_248__6
.LABEL__is_redundant_248__5:
  .loc 5 1057 13
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.4, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $7.1:rbx 
  .loc 5 1057 13
  # $8.1: Boolean = $7.1 != other_value.1
  cmp rbx, QWORD PTR [rbp-17]
  setne r15b
  # [discarded value]: $7.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__is_redundant_248__7, .LABEL__is_redundant_248__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__is_redundant_248__8
.LABEL__is_redundant_248__7:
  .loc 5 1058 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_redundant_248__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
.LABEL__is_redundant_248__8:
  .loc 5 1060 32
  # operand_values_entry.7: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.4, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:rbx:[rbp-9] 
  # jump(.LABEL__is_redundant_248__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_redundant_248__4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:[rbp-9] 
  # [discarded value]: operand_values_entry.7
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
.LABEL__is_redundant_248__6:
  .loc 5 1062 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_redundant_248__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  # [discarded value]: operand_values_entry.4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [discarded value]: operand_values_entry.3
  # [discarded value]: other_value.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [live values]: 
.LABEL__is_redundant_248__end:
  mov rsp, rbp
  pop rbp
  ret

is_redundant_248__stack_frame_size: .word 32

  .loc 5 1065 1
  .text
is_trivial_249:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_trivial_249__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_trivial_249__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 1070 29
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 1070 29
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi operand_values_entry.1:rbx 
  .loc 5 1071 9
  # $3.1: Boolean = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:rdi operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_trivial_249__2, .LABEL__is_trivial_249__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  mov [rbp-17], rdi
  jz .LABEL__is_trivial_249__3
.LABEL__is_trivial_249__2:
  .loc 5 1072 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_trivial_249__3:
  .loc 5 1074 31
  # result_value.1: @IR_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx 
  .loc 5 1075 5
  # other_value.1: @IR_Value = null
  xor r15, r15
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx other_value.1:r15 
  # jump(.LABEL__is_trivial_249__4)
  mov [rbp-25], rbx
  mov [rbp-33], r15
.LABEL__is_trivial_249__4:
  # other_value.5: @IR_Value = phi(other_value.1, other_value.6)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] 
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.1, operand_values_entry.5)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  .loc 5 1076 12
  # $5.1: Boolean = operand_values_entry.2 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__is_trivial_249__5, .LABEL__is_trivial_249__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__is_trivial_249__6
.LABEL__is_trivial_249__5:
  .loc 5 1077 18
  # value.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx 
  .loc 5 1078 13
  # $7.1: Boolean = value.1 != result_value.1
  cmp rbx, QWORD PTR [rbp-25]
  setne r15b
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx $7.1:r15 
  # jump($7.1, .LABEL__is_trivial_249__7, .LABEL__is_trivial_249__8)
  test r15b, r15b
  mov [rbp-42], rbx
  mov [rbp-43], r15b
  jz .LABEL__is_trivial_249__8
.LABEL__is_trivial_249__7:
  .loc 5 1079 17
  # $8.1: Boolean = value.1 != other_value.5
  mov rax, [rbp-42]
  cmp rax, QWORD PTR [rbp-33]
  setne bl
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:rax:[rbp-42] $7.1:[rbp-43] $8.1:rbx 
  # jump($8.1, .LABEL__is_trivial_249__9, .LABEL__is_trivial_249__8)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__is_trivial_249__8
.LABEL__is_trivial_249__9:
  .loc 5 1080 21
  # $9.1: Boolean = other_value.5 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:rax 
  # jump($9.1, .LABEL__is_trivial_249__11, .LABEL__is_trivial_249__12)
  test al, al
  mov [rbp-45], al
  jz .LABEL__is_trivial_249__12
.LABEL__is_trivial_249__11:
  .loc 5 1081 21
  # return(false)
  mov al, 0
  jmp .LABEL__is_trivial_249__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
.LABEL__is_trivial_249__12:
  .loc 5 1083 17
  # other_value.4: @IR_Value = value.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:rax:[rbp-33] 
  # jump(.LABEL__is_trivial_249__8)
  mov [rbp-33], rax
.LABEL__is_trivial_249__8:
  # other_value.6: @IR_Value = phi(other_value.5, other_value.4)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] $9.1:[rbp-45] other_value.4:[rbp-33] 
  .loc 5 1086 32
  # operand_values_entry.5: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:rbx:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # jump(.LABEL__is_trivial_249__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_trivial_249__4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: operand_values_entry.5
  # [discarded value]: other_value.6
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: other_value.4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
.LABEL__is_trivial_249__6:
  .loc 5 1088 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_trivial_249__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  # [discarded value]: operand_values_entry.2
  # [discarded value]: other_value.5
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [discarded value]: other_value.1
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_trivial_249__end:
  mov rsp, rbp
  pop rbp
  ret

is_trivial_249__stack_frame_size: .word 48

  .loc 7 49 1
  .text
parse_250:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_250__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_250__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 8 4 22
  # $1.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  .loc 8 5 20
  # $2.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 8 6 31
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  .loc 8 7 24
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  .loc 8 8 25
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 7 5 43
  # $6.1: @Compilation_Unit = new Compilation_Unit(sources = $1.1, types = $2.1, global_variables = $3.1, functions = $4.1, statements = $5.1)
  mov [rbp-48], rax
  mov rdi, 40
  call malloc
  #     .sources = $1.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .types = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+8], r15
  #     .global_variables = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+16], r14
  #     .functions = $4.1
  mov r13, [rbp-40]
  mov QWORD PTR [rax+24], r13
  #     .statements = $5.1
  mov r12, [rbp-48]
  mov QWORD PTR [rax+32], r12
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] $6.1:rax 
  .loc 7 7 34
  # $7.1: @Comment_Matcher = new Comment_Matcher(object_type = Comment_Matcher, is_required = false)
  mov [rbp-16], rax
  mov rdi, 9
  call malloc
  #     .object_type = Comment_Matcher
  mov rbx, Comment_Matcher[rip]
  mov [rax], rbx
  #     .is_required = false
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:rax 
  .loc 7 8 32
  # $8.1: @Space_Matcher = new Space_Matcher(object_type = Space_Matcher, is_required = false)
  mov [rbp-24], rax
  mov rdi, 9
  call malloc
  #     .object_type = Space_Matcher
  mov rbx, Space_Matcher[rip]
  mov [rax], rbx
  #     .is_required = false
  mov BYTE PTR [rax+8], 0
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:rax 
  .loc 7 9 36
  # $9.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "&")
  mov [rbp-32], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "&"
  lea rbx, .LABEL__string_294[rip] # "&"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:rax 
  .loc 7 10 29
  # $10.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "as")
  mov [rbp-40], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "as"
  lea rbx, .LABEL__string_295[rip] # "as"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:rax 
  .loc 7 11 35
  # $11.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "*")
  mov [rbp-48], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "*"
  lea rbx, .LABEL__string_296[rip] # "*"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:rax 
  .loc 7 12 29
  # $12.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "@")
  mov [rbp-56], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "@"
  lea rbx, .LABEL__string_236[rip] # "@"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:rax 
  .loc 7 13 32
  # $13.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "break")
  mov [rbp-64], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "break"
  lea rbx, .LABEL__string_297[rip] # "break"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:rax 
  .loc 7 14 38
  # $14.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "}")
  mov [rbp-72], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "}"
  lea rbx, .LABEL__string_298[rip] # "}"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:rax 
  .loc 7 15 40
  # $15.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "]")
  mov [rbp-80], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "]"
  lea rbx, .LABEL__string_238[rip] # "]"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:rax 
  .loc 7 16 38
  # $16.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ")")
  mov [rbp-88], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = ")"
  lea rbx, .LABEL__string_188[rip] # ")"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:rax 
  .loc 7 17 32
  # $17.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ":")
  mov [rbp-96], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = ":"
  lea rbx, .LABEL__string_25[rip] # ":"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:rax 
  .loc 7 18 33
  # $18.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ";")
  mov [rbp-104], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = ";"
  lea rbx, .LABEL__string_299[rip] # ";"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:rax 
  .loc 7 19 32
  # $19.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ",")
  mov [rbp-112], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = ","
  lea rbx, .LABEL__string_300[rip] # ","
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:rax 
  .loc 7 20 34
  # $20.1: @Comment_Matcher = new Comment_Matcher(object_type = Comment_Matcher, is_required = true)
  mov [rbp-120], rax
  mov rdi, 9
  call malloc
  #     .object_type = Comment_Matcher
  mov rbx, Comment_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:rax 
  .loc 7 21 30
  # $21.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ".")
  mov [rbp-128], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "."
  lea rbx, .LABEL__string_301[rip] # "."
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:rax 
  .loc 7 22 31
  # $22.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "else")
  mov [rbp-136], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "else"
  lea rbx, .LABEL__string_302[rip] # "else"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:rax 
  .loc 7 23 38
  # $23.1: @End_Of_File_Matcher = new End_Of_File_Matcher(object_type = End_Of_File_Matcher, is_required = true)
  mov [rbp-144], rax
  mov rdi, 9
  call malloc
  #     .object_type = End_Of_File_Matcher
  mov rbx, End_Of_File_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:rax 
  .loc 7 24 38
  # $24.1: @End_Of_Line_Matcher = new End_Of_Line_Matcher(object_type = End_Of_Line_Matcher, is_required = true)
  mov [rbp-152], rax
  mov rdi, 9
  call malloc
  #     .object_type = End_Of_Line_Matcher
  mov rbx, End_Of_Line_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:rax 
  .loc 7 25 33
  # $25.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "=")
  mov [rbp-160], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "="
  lea rbx, .LABEL__string_303[rip] # "="
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:rax 
  .loc 7 26 43
  # $26.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "!")
  mov [rbp-168], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "!"
  lea rbx, .LABEL__string_304[rip] # "!"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:rax 
  .loc 7 27 35
  # $27.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "external")
  mov [rbp-176], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "external"
  lea rbx, .LABEL__string_305[rip] # "external"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:rax 
  .loc 7 28 39
  # $28.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ">")
  mov [rbp-184], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = ">"
  lea rbx, .LABEL__string_306[rip] # ">"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:rax 
  .loc 7 29 33
  # $29.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "-")
  mov [rbp-192], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "-"
  lea rbx, .LABEL__string_307[rip] # "-"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:rax 
  .loc 7 30 37
  # $30.1: @Identifier_Matcher = new Identifier_Matcher(object_type = Identifier_Matcher, is_required = true)
  mov [rbp-200], rax
  mov rdi, 9
  call malloc
  #     .object_type = Identifier_Matcher
  mov rbx, Identifier_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:rax 
  .loc 7 31 29
  # $31.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "if")
  mov [rbp-208], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "if"
  lea rbx, .LABEL__string_308[rip] # "if"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:rax 
  .loc 7 32 34
  # $32.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "include")
  mov [rbp-216], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "include"
  lea rbx, .LABEL__string_309[rip] # "include"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:rax 
  .loc 7 33 36
  # $33.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "<")
  mov [rbp-224], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "<"
  lea rbx, .LABEL__string_310[rip] # "<"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:rax 
  .loc 7 34 34
  # $34.1: @Literal_Matcher = new Literal_Matcher(object_type = Literal_Matcher, is_required = true)
  mov [rbp-232], rax
  mov rdi, 9
  call malloc
  #     .object_type = Literal_Matcher
  mov rbx, Literal_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:rax 
  .loc 7 35 31
  # $35.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "loop")
  mov [rbp-240], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "loop"
  lea rbx, .LABEL__string_311[rip] # "loop"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:rax 
  .loc 7 36 30
  # $36.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "new")
  mov [rbp-248], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "new"
  lea rbx, .LABEL__string_274[rip] # "new"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:rax 
  .loc 7 37 37
  # $37.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "{")
  mov [rbp-256], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "{"
  lea rbx, .LABEL__string_312[rip] # "{"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:rax 
  .loc 7 38 39
  # $38.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "[")
  mov [rbp-264], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "["
  lea rbx, .LABEL__string_237[rip] # "["
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:rax 
  .loc 7 39 37
  # $39.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "(")
  mov [rbp-272], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "("
  lea rbx, .LABEL__string_239[rip] # "("
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:rax 
  .loc 7 40 31
  # $40.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "+")
  mov [rbp-280], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "+"
  lea rbx, .LABEL__string_313[rip] # "+"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:rax 
  .loc 7 41 33
  # $41.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "return")
  mov [rbp-288], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "return"
  lea rbx, .LABEL__string_276[rip] # "return"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:rax 
  .loc 7 42 32
  # $42.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "/")
  mov [rbp-296], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "/"
  lea rbx, .LABEL__string_314[rip] # "/"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:rax 
  .loc 7 43 41
  # $43.1: @String_Literal_Matcher = new String_Literal_Matcher(object_type = String_Literal_Matcher, is_required = true)
  mov [rbp-304], rax
  mov rdi, 9
  call malloc
  #     .object_type = String_Literal_Matcher
  mov rbx, String_Literal_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:rax 
  .loc 7 44 33
  # $44.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "struct")
  mov [rbp-312], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "struct"
  lea rbx, .LABEL__string_315[rip] # "struct"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:rax 
  .loc 7 45 39
  # $45.1: @Other_Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "|")
  mov [rbp-320], rax
  mov rdi, 17
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "|"
  lea rbx, .LABEL__string_316[rip] # "|"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:rax 
  .loc 7 46 32
  # $46.1: @Keyword_Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "while")
  mov [rbp-328], rax
  mov rdi, 17
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .lexeme = "while"
  lea rbx, .LABEL__string_317[rip] # "while"
  mov [rax+9], rbx
  # [live values]: file_path.1:[rbp-8] $6.1:[rbp-16] $7.1:[rbp-24] $8.1:[rbp-32] $9.1:[rbp-40] $10.1:[rbp-48] $11.1:[rbp-56] $12.1:[rbp-64] $13.1:[rbp-72] $14.1:[rbp-80] $15.1:[rbp-88] $16.1:[rbp-96] $17.1:[rbp-104] $18.1:[rbp-112] $19.1:[rbp-120] $20.1:[rbp-128] $21.1:[rbp-136] $22.1:[rbp-144] $23.1:[rbp-152] $24.1:[rbp-160] $25.1:[rbp-168] $26.1:[rbp-176] $27.1:[rbp-184] $28.1:[rbp-192] $29.1:[rbp-200] $30.1:[rbp-208] $31.1:[rbp-216] $32.1:[rbp-224] $33.1:[rbp-232] $34.1:[rbp-240] $35.1:[rbp-248] $36.1:[rbp-256] $37.1:[rbp-264] $38.1:[rbp-272] $39.1:[rbp-280] $40.1:[rbp-288] $41.1:[rbp-296] $42.1:[rbp-304] $43.1:[rbp-312] $44.1:[rbp-320] $45.1:[rbp-328] $46.1:rax 
  .loc 7 50 15
  # parser.1: @Parser = new Parser(scanner = null, compilation_unit = $6.1, current_alignment = 0, optional_comment = $7.1, optional_space = $8.1, required_ampersand = $9.1, required_as = $10.1, required_asterisk = $11.1, required_at = $12.1, required_break = $13.1, required_close_brace = $14.1, required_close_bracket = $15.1, required_close_paren = $16.1, required_colon = $17.1, required_column = $18.1, required_comma = $19.1, required_comment = $20.1, required_dot = $21.1, required_else = $22.1, required_end_of_file = $23.1, required_end_of_line = $24.1, required_equals = $25.1, required_exclamation_mark = $26.1, required_external = $27.1, required_greater_than = $28.1, required_hyphen = $29.1, required_identifier = $30.1, required_if = $31.1, required_include = $32.1, required_less_than = $33.1, required_literal = $34.1, required_loop = $35.1, required_new = $36.1, required_open_brace = $37.1, required_open_bracket = $38.1, required_open_paren = $39.1, required_plus = $40.1, required_return = $41.1, required_slash = $42.1, required_string_literal = $43.1, required_struct = $44.1, required_vertical_bar = $45.1, required_while = $46.1)
  mov [rbp-336], rax
  mov rdi, 344
  call malloc
  #     .scanner = null
  mov QWORD PTR [rax], 0
  #     .compilation_unit = $6.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .current_alignment = 0
  mov QWORD PTR [rax+16], 0
  #     .optional_comment = $7.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .optional_space = $8.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .required_ampersand = $9.1
  mov r13, [rbp-40]
  mov QWORD PTR [rax+40], r13
  #     .required_as = $10.1
  mov r12, [rbp-48]
  mov QWORD PTR [rax+48], r12
  #     .required_asterisk = $11.1
  mov r11, [rbp-56]
  mov QWORD PTR [rax+56], r11
  #     .required_at = $12.1
  mov r10, [rbp-64]
  mov QWORD PTR [rax+64], r10
  #     .required_break = $13.1
  mov r9, [rbp-72]
  mov QWORD PTR [rax+72], r9
  #     .required_close_brace = $14.1
  mov r8, [rbp-80]
  mov QWORD PTR [rax+80], r8
  #     .required_close_bracket = $15.1
  mov rcx, [rbp-88]
  mov QWORD PTR [rax+88], rcx
  #     .required_close_paren = $16.1
  mov rdx, [rbp-96]
  mov QWORD PTR [rax+96], rdx
  #     .required_colon = $17.1
  mov rsi, [rbp-104]
  mov QWORD PTR [rax+104], rsi
  #     .required_column = $18.1
  mov rdi, [rbp-112]
  mov QWORD PTR [rax+112], rdi
  #     .required_comma = $19.1
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+120], rbx
  #     .required_comment = $20.1
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+128], rbx
  #     .required_dot = $21.1
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+136], rbx
  #     .required_else = $22.1
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+144], rbx
  #     .required_end_of_file = $23.1
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+152], rbx
  #     .required_end_of_line = $24.1
  mov rbx, [rbp-160]
  mov QWORD PTR [rax+160], rbx
  #     .required_equals = $25.1
  mov rbx, [rbp-168]
  mov QWORD PTR [rax+168], rbx
  #     .required_exclamation_mark = $26.1
  mov rbx, [rbp-176]
  mov QWORD PTR [rax+176], rbx
  #     .required_external = $27.1
  mov rbx, [rbp-184]
  mov QWORD PTR [rax+184], rbx
  #     .required_greater_than = $28.1
  mov rbx, [rbp-192]
  mov QWORD PTR [rax+192], rbx
  #     .required_hyphen = $29.1
  mov rbx, [rbp-200]
  mov QWORD PTR [rax+200], rbx
  #     .required_identifier = $30.1
  mov rbx, [rbp-208]
  mov QWORD PTR [rax+208], rbx
  #     .required_if = $31.1
  mov rbx, [rbp-216]
  mov QWORD PTR [rax+216], rbx
  #     .required_include = $32.1
  mov rbx, [rbp-224]
  mov QWORD PTR [rax+224], rbx
  #     .required_less_than = $33.1
  mov rbx, [rbp-232]
  mov QWORD PTR [rax+232], rbx
  #     .required_literal = $34.1
  mov rbx, [rbp-240]
  mov QWORD PTR [rax+240], rbx
  #     .required_loop = $35.1
  mov rbx, [rbp-248]
  mov QWORD PTR [rax+248], rbx
  #     .required_new = $36.1
  mov rbx, [rbp-256]
  mov QWORD PTR [rax+256], rbx
  #     .required_open_brace = $37.1
  mov rbx, [rbp-264]
  mov QWORD PTR [rax+264], rbx
  #     .required_open_bracket = $38.1
  mov rbx, [rbp-272]
  mov QWORD PTR [rax+272], rbx
  #     .required_open_paren = $39.1
  mov rbx, [rbp-280]
  mov QWORD PTR [rax+280], rbx
  #     .required_plus = $40.1
  mov rbx, [rbp-288]
  mov QWORD PTR [rax+288], rbx
  #     .required_return = $41.1
  mov rbx, [rbp-296]
  mov QWORD PTR [rax+296], rbx
  #     .required_slash = $42.1
  mov rbx, [rbp-304]
  mov QWORD PTR [rax+304], rbx
  #     .required_string_literal = $43.1
  mov rbx, [rbp-312]
  mov QWORD PTR [rax+312], rbx
  #     .required_struct = $44.1
  mov rbx, [rbp-320]
  mov QWORD PTR [rax+320], rbx
  #     .required_vertical_bar = $45.1
  mov rbx, [rbp-328]
  mov QWORD PTR [rax+328], rbx
  #     .required_while = $46.1
  mov rbx, [rbp-336]
  mov QWORD PTR [rax+336], rbx
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-8] parser.1:rax 
  .loc 7 51 5
  # call(parse_251, parser.1, file_path.1, null)
  mov rdi, rax
  mov rsi, [rbp-8]
  xor rdx, rdx
  mov [rbp-16], rax
  call parse_251
  # [discarded value]: file_path.1
  # [live values]: parser.1:[rbp-16] 
  .loc 7 52 12
  # $48.1: @Compilation_Unit = load_struct_member(parser.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: parser.1
  # [live values]: $48.1:rbx 
  .loc 7 52 5
  # return($48.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__parse_250__end
  # [discarded value]: $48.1
  # [live values]: 
.LABEL__parse_250__end:
  mov rsp, rbp
  pop rbp
  ret

parse_250__stack_frame_size: .word 336

  .loc 7 55 1
  .text
parse_251:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_251__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_251__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # file_path.1: @String = load_variable(file_path)
  # [live values]: self.1:rdi file_path.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi file_path.1:rsi location.1:rdx 
  .loc 7 56 15
  # source.1: @Source = call(create_source_316, file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_source_316
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax 
  .loc 7 57 9
  # $2.1: Boolean = source.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_251__2, .LABEL__parse_251__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__parse_251__3
.LABEL__parse_251__2:
  .loc 7 58 20
  # $3.1: @String = call(clone_345, "Failed to open file: ")
  lea rdi, .LABEL__string_318[rip] # "Failed to open file: "
  call clone_345
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $3.1:rax 
  .loc 7 58 20
  # message.1: @String = call(append_354, $3.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_354
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax 
  .loc 7 59 13
  # $5.1: Boolean = location.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax $5.1:rbx 
  # jump($5.1, .LABEL__parse_251__4, .LABEL__parse_251__5)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__parse_251__5
.LABEL__parse_251__4:
  .loc 7 60 13
  # call(abort_314, location.1, message.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-41]
  call abort_314
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
.LABEL__parse_251__5:
  .loc 7 62 9
  # call(abort_342, message.1)
  mov rdi, [rbp-41]
  call abort_342
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] 
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
.LABEL__parse_251__3:
  .loc 7 65 5
  # $6.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $6.1:rbx 
  .loc 7 65 5
  # $7.1: @List = load_struct_member($6.1, sources)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $7.1:r15 
  .loc 7 65 5
  # call(append_318, $7.1, source.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  call append_318
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  .loc 7 66 17
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $8.1:rbx 
  .loc 7 66 17
  # $9.1: @List = load_struct_member($8.1, sources)
  mov r15, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $9.1:r15 
  .loc 7 66 17
  # $10.1: Int = load_struct_member($9.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $10.1:rbx 
  .loc 7 66 5
  # store_struct_member(source.1, id, $10.1)
  mov r15, [rbp-32]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] 
  .loc 7 68 22
  # other_scanner.1: @Scanner = load_struct_member(self.1, scanner)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx 
  .loc 7 69 20
  # $12.1: @Scanner = call(create_scanner_296, source.1)
  mov rdi, r15
  mov [rbp-41], rbx
  call create_scanner_296
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $12.1:rax 
  .loc 7 69 5
  # store_struct_member(self.1, scanner, $12.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 70 27
  # $13.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $13.1:rax 
  .loc 7 70 27
  # $14.1: @List = load_struct_member($13.1, statements)
  mov r15, [rax+32]
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $14.1:r15 
  .loc 7 70 5
  # call(parse_statements_252, self.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call parse_statements_252
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 72 14
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $15.1:rbx 
  .loc 7 72 14
  # token.1: @Token = load_struct_member($15.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:r15 
  .loc 7 73 9
  # $17.1: Boolean = call(is_343, token.1, End_Of_File_Token)
  mov rdi, r15
  mov rsi, End_Of_File_Token[rip]
  mov [rbp-49], r15
  call is_343
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $17.1:rax 
  .loc 7 73 9
  # $18.1: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:rbx 
  # jump($18.1, .LABEL__parse_251__6, .LABEL__parse_251__7)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__parse_251__7
.LABEL__parse_251__6:
  .loc 7 74 21
  # $19.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] $19.1:rbx 
  .loc 7 74 21
  # $20.1: @Token = load_struct_member($19.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] $20.1:r15 
  .loc 7 74 9
  # call(abort_289, self.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call abort_289
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] 
.LABEL__parse_251__7:
  .loc 7 76 14
  # token.1: @End_Of_File_Token = token.1
  mov rax, [rbp-49]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax 
  .loc 7 77 9
  # $22.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $22.1:rbx 
  .loc 7 77 9
  # $23.1: Int = load_struct_member($22.1, column)
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $23.1:r15 
  .loc 7 77 9
  # $24.1: Boolean = $23.1 != 1
  cmp r15, 1
  setne bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $24.1:rbx 
  # jump($24.1, .LABEL__parse_251__8, .LABEL__parse_251__9)
  test bl, bl
  mov [rbp-58], rax
  mov [rbp-59], bl
  jz .LABEL__parse_251__9
.LABEL__parse_251__8:
  .loc 7 78 22
  # $25.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax:[rbp-58] $24.1:[rbp-59] $25.1:rbx 
  .loc 7 78 9
  # $26.1: @FILE = call(write_317, stderr, $25.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_317
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] $26.1:rax 
  .loc 7 78 9
  # $27.1: @FILE = call(write_337, $26.1, ": File doesn't end with a new line")
  mov rdi, rax
  lea rsi, .LABEL__string_319[rip] # ": File doesn't end with a new line"
  call write_337
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] $27.1:rax 
  .loc 7 78 9
  # $28.1: @FILE = call(end_line_340, $27.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # jump(.LABEL__parse_251__9)
.LABEL__parse_251__9:
  .loc 7 81 5
  # store_struct_member(self.1, scanner, other_scanner.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # return()
  jmp .LABEL__parse_251__end
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] 
  # [discarded value]: token.1
  # [discarded value]: other_scanner.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # [discarded value]: source.1
  # [discarded value]: location.1
  # [discarded value]: file_path.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_251__end:
  mov rsp, rbp
  pop rbp
  ret

parse_251__stack_frame_size: .word 64

  .loc 7 86 1
  .text
parse_statements_252:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statements_252__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statements_252__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: self.1:rdi statements.1:rsi 
  # jump(.LABEL__parse_statements_252__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_statements_252__2:
  .loc 7 88 22
  # statement.1: @AST_Statement = call(parse_statement_254, self.1)
  mov rdi, [rbp-16]
  call parse_statement_254
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax 
  .loc 7 89 13
  # $2.1: Boolean = statement.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_statements_252__3, .LABEL__parse_statements_252__5)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__parse_statements_252__5
.LABEL__parse_statements_252__3:
  # return()
  jmp .LABEL__parse_statements_252__end
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__parse_statements_252__5:
  .loc 7 92 9
  # call(consume_end_of_line_278, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_278
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  .loc 7 93 13
  # $3.1: Boolean = call(is_343, statement.1, AST_Include_Statement)
  mov rdi, [rbp-24]
  mov rsi, AST_Include_Statement[rip]
  call is_343
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__parse_statements_252__7, .LABEL__parse_statements_252__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_statements_252__9
.LABEL__parse_statements_252__7:
  .loc 7 94 26
  # statement.1: @AST_Include_Statement = statement.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax 
  .loc 7 96 36
  # $5.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx 
  .loc 7 96 75
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $6.1:r15 
  .loc 7 96 75
  # $7.1: @Source = load_struct_member($6.1, source)
  mov r14, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $7.1:r14 
  .loc 7 96 75
  # $8.1: @String = load_struct_member($7.1, file_path)
  mov r15, [r14+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $8.1:r15 
  .loc 7 96 36
  # statement_file_path.1: @String = call(make_relative_path_253, $5.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-34], rax
  call make_relative_path_253
  # [discarded value]: $8.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax 
  .loc 7 97 17
  # $10.1: Boolean = statement_file_path.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__parse_statements_252__10, .LABEL__parse_statements_252__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__parse_statements_252__11
.LABEL__parse_statements_252__10:
  .loc 7 98 23
  # $11.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:rbx 
  .loc 7 98 43
  # $12.1: @String = call(clone_345, "Unsupported file path: ")
  lea rdi, .LABEL__string_320[rip] # "Unsupported file path: "
  mov [rbp-51], rbx
  call clone_345
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax 
  .loc 7 98 83
  # $13.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rbx:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax $13.1:r15 
  .loc 7 98 43
  # $14.1: @String = call(append_354, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call append_354
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $14.1:rax 
  .loc 7 98 17
  # call(abort_314, $11.1, $14.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_314
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
.LABEL__parse_statements_252__11:
  .loc 7 101 46
  # $15.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $15.1:rbx 
  .loc 7 101 46
  # $16.1: @List = load_struct_member($15.1, sources)
  mov r15, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $16.1:r15 
  .loc 7 101 46
  # compilation_unit_sources_item.1: @List_Item = load_struct_member($16.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:rbx 
  # jump(.LABEL__parse_statements_252__12)
  mov [rbp-51], rbx
.LABEL__parse_statements_252__12:
  # compilation_unit_sources_item.2: @List_Item = phi(compilation_unit_sources_item.1, compilation_unit_sources_item.5)
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  .loc 7 102 20
  # $18.1: Boolean = compilation_unit_sources_item.2 != null
  cmp QWORD PTR [rbp-51], 0
  setne al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:rax 
  # jump($18.1, .LABEL__parse_statements_252__13, .LABEL__parse_statements_252__14)
  test al, al
  mov [rbp-52], al
  jz .LABEL__parse_statements_252__14
.LABEL__parse_statements_252__13:
  .loc 7 103 22
  # $20.1: @Source = load_struct_member(compilation_unit_sources_item.2, data)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $20.1:rbx 
  .loc 7 103 21
  # $21.1: @String = load_struct_member($20.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $21.1:r15 
  .loc 7 103 21
  # $22.1: Boolean = call(equals_346, $21.1, statement_file_path.1)
  mov rdi, r15
  mov rsi, [rbp-42]
  call equals_346
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:rax 
  # jump($22.1, .LABEL__parse_statements_252__14, .LABEL__parse_statements_252__16)
  test al, al
  mov [rbp-53], al
  jz .LABEL__parse_statements_252__16
.LABEL__parse_statements_252__14:
  .loc 7 109 17
  # $24.1: Boolean = compilation_unit_sources_item.2 == null
  cmp QWORD PTR [rbp-51], 0
  sete al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:rax 
  # jump($24.1, .LABEL__parse_statements_252__18, .LABEL__parse_statements_252__2)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_statements_252__2
.LABEL__parse_statements_252__18:
  .loc 7 110 49
  # $25.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] $25.1:rbx 
  .loc 7 110 17
  # call(parse_251, self.1, statement_file_path.1, $25.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  mov rdx, rbx
  call parse_251
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # jump(.LABEL__parse_statements_252__2)
  jmp .LABEL__parse_statements_252__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
.LABEL__parse_statements_252__16:
  .loc 7 106 49
  # compilation_unit_sources_item.5: @List_Item = load_struct_member(compilation_unit_sources_item.2, next_item)
  mov rax, [rbp-51]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:rbx:[rbp-51] 
  # jump(.LABEL__parse_statements_252__12)
  mov [rbp-51], rbx
  jmp .LABEL__parse_statements_252__12
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.5
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] 
  # [discarded value]: statement_file_path.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__parse_statements_252__9:
  .loc 7 113 13
  # call(append_318, statements.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call append_318
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # jump(.LABEL__parse_statements_252__2)
  jmp .LABEL__parse_statements_252__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [discarded value]: statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statements_252__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statements_252__stack_frame_size: .word 64

  .loc 7 118 1
  .text
make_relative_path_253:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_relative_path_253__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_relative_path_253__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # base_file_path.1: @String = load_variable(base_file_path)
  # [live values]: file_path.1:rdi base_file_path.1:rsi 
  .loc 7 119 9
  # $1.1: Boolean = call(starts_with_348, file_path.1, "./")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_321[rip] # "./"
  mov [rbp-16], rdi
  call starts_with_348
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__make_relative_path_253__2, .LABEL__make_relative_path_253__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__make_relative_path_253__3
.LABEL__make_relative_path_253__2:
  .loc 7 120 26
  # $2.1: @String = call(clone_345, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_345
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 120 26
  # $3.1: @String = call(append_354, $2.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_354
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:rax 
  .loc 7 120 73
  # $4.1: Int = call(last_index_of_350, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-25], rax
  call last_index_of_350
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $4.1:rax 
  .loc 7 120 73
  # $5.1: Int = $4.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx 
  .loc 7 120 112
  # $6.1: Int = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $6.1:r15 
  .loc 7 120 112
  # $7.1: Int = $6.1 + 2
  mov r14, r15
  add r14, 2
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $7.1:r14 
  .loc 7 120 26
  # relative_path.1: @String = call(remove_355, $3.1, $5.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  mov rdx, r14
  call remove_355
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] relative_path.1:rax 
  .loc 7 121 9
  # return(relative_path.1)
  mov [rbp-25], rax
  jmp .LABEL__make_relative_path_253__end
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__make_relative_path_253__3:
  .loc 7 123 9
  # $9.1: Boolean = call(starts_with_348, file_path.1, "../")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_322[rip] # "../"
  call starts_with_348
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:rax 
  # jump($9.1, .LABEL__make_relative_path_253__5, .LABEL__make_relative_path_253__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__make_relative_path_253__6
.LABEL__make_relative_path_253__5:
  .loc 7 124 26
  # $10.1: @String = call(clone_345, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_345
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $10.1:rax 
  .loc 7 124 26
  # $11.1: @String = call(append_354, $10.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_354
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:rax 
  .loc 7 124 73
  # $12.1: Int = call(last_index_of_350, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-26], rax
  call last_index_of_350
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $12.1:rax 
  .loc 7 124 73
  # $13.1: Int = $12.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx 
  .loc 7 124 112
  # $14.1: Int = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx $14.1:r15 
  .loc 7 124 26
  # relative_path.1: @String = call(remove_355, $11.1, $13.1, $14.1)
  mov rdi, [rbp-26]
  mov rsi, rbx
  mov rdx, r15
  call remove_355
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:rax 
  # jump(.LABEL__make_relative_path_253__7)
  mov [rbp-26], rax
.LABEL__make_relative_path_253__7:
  .loc 7 126 22
  # index.1: Int = call(index_of_347, relative_path.1, "/../")
  mov rdi, [rbp-26]
  lea rsi, .LABEL__string_323[rip] # "/../"
  call index_of_347
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax 
  .loc 7 127 17
  # $17.1: Boolean = index.1 <= 0
  cmp rax, 0
  setle bl
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__make_relative_path_253__8, .LABEL__make_relative_path_253__10)
  test bl, bl
  mov [rbp-34], rax
  mov [rbp-35], bl
  jz .LABEL__make_relative_path_253__10
.LABEL__make_relative_path_253__8:
  .loc 7 132 9
  # return(relative_path.1)
  mov rax, [rbp-26]
  jmp .LABEL__make_relative_path_253__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__make_relative_path_253__10:
  .loc 7 130 67
  # $18.1: Int = index.1 - 1
  mov rax, [rbp-34]
  dec rax
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $18.1:rax 
  .loc 7 130 34
  # $19.1: Int = call(last_index_of_351, relative_path.1, '/', $18.1)
  mov rdi, [rbp-26]
  mov sil, 47
  mov rdx, rax
  call last_index_of_351
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax 
  .loc 7 130 79
  # $20.1: Int = index.1 + 3
  mov rbx, [rbp-34]
  add rbx, 3
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax $20.1:rbx 
  .loc 7 130 13
  # $21.1: @String = call(remove_355, relative_path.1, $19.1, $20.1)
  mov rdi, [rbp-26]
  mov rsi, rax
  mov rdx, rbx
  call remove_355
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__make_relative_path_253__7)
  jmp .LABEL__make_relative_path_253__7
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__make_relative_path_253__6:
  .loc 7 134 5
  # return(file_path.1)
  mov rax, [rbp-16]
  jmp .LABEL__make_relative_path_253__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [discarded value]: base_file_path.1
  # [discarded value]: file_path.1
  # [live values]: 
.LABEL__make_relative_path_253__end:
  mov rsp, rbp
  pop rbp
  ret

make_relative_path_253__stack_frame_size: .word 48

  .loc 7 144 1
  .text
parse_statement_254:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statement_254__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statement_254__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__parse_statement_254__2)
  mov [rbp-8], rdi
.LABEL__parse_statement_254__2:
  .loc 7 145 12
  # $1.1: Boolean = call(consume_empty_line_279, self.1)
  mov rdi, [rbp-8]
  call consume_empty_line_279
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_statement_254__2, .LABEL__parse_statement_254__4)
  test al, al
  mov [rbp-9], al
  jnz .LABEL__parse_statement_254__2
.LABEL__parse_statement_254__4:
  .loc 7 148 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:rbx 
  .loc 7 148 43
  # $3.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov r15, [rax+80]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:rbx $3.1:r15 
  .loc 7 148 9
  # $5.1: Boolean = call(matches_286, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__parse_statement_254__6, .LABEL__parse_statement_254__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_statement_254__5
.LABEL__parse_statement_254__6:
  .loc 7 148 9
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  # jump($5.3, .LABEL__parse_statement_254__7, .LABEL__parse_statement_254__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__parse_statement_254__8
.LABEL__parse_statement_254__7:
  .loc 7 149 9
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_254__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
.LABEL__parse_statement_254__8:
  .loc 7 152 24
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $8.1:rbx 
  .loc 7 152 24
  # $9.1: Int = $8.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $9.1:r15 
  .loc 7 152 5
  # call(consume_space_280, self.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  .loc 7 154 22
  # $10.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $10.1:rbx 
  .loc 7 154 9
  # $11.1: Boolean = call(matches_285, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:rax 
  # jump($11.1, .LABEL__parse_statement_254__10, .LABEL__parse_statement_254__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_statement_254__11
.LABEL__parse_statement_254__10:
  .loc 7 155 16
  # $12.1: @AST_Statement = call(parse_if_261, self.1)
  mov rdi, [rbp-8]
  call parse_if_261
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $12.1:rax 
  .loc 7 155 9
  # return($12.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] 
.LABEL__parse_statement_254__11:
  .loc 7 157 22
  # $13.1: @Matcher = load_struct_member(self.1, required_return)
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $13.1:rbx 
  .loc 7 157 9
  # $14.1: Boolean = call(matches_285, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:rax 
  # jump($14.1, .LABEL__parse_statement_254__13, .LABEL__parse_statement_254__14)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_statement_254__14
.LABEL__parse_statement_254__13:
  .loc 7 158 31
  # $15.1: @Matcher = load_struct_member(self.1, required_return)
  mov rax, [rbp-8]
  mov rbx, [rax+296]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $15.1:rbx 
  .loc 7 158 18
  # token.1: @Token = call(consume_281, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax 
  .loc 7 159 9
  # value_expression.1: @AST_Expression = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax value_expression.1:rbx 
  .loc 7 160 13
  # $17.1: Boolean = call(matches_end_of_line_284, self.1)
  mov rdi, [rbp-8]
  mov [rbp-20], rax
  mov [rbp-28], rbx
  call matches_end_of_line_284
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $17.1:rax 
  .loc 7 160 13
  # $18.1: Boolean = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:rbx 
  # jump($18.1, .LABEL__parse_statement_254__15, .LABEL__parse_statement_254__16)
  test bl, bl
  mov [rbp-29], bl
  jz .LABEL__parse_statement_254__16
.LABEL__parse_statement_254__15:
  .loc 7 161 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] 
  .loc 7 162 32
  # value_expression.2: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:rax:[rbp-28] 
  # jump(.LABEL__parse_statement_254__16)
  mov [rbp-28], rax
.LABEL__parse_statement_254__16:
  # value_expression.3: @AST_Expression = phi(value_expression.1, value_expression.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] 
  .loc 7 164 52
  # $20.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-20]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:rax:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] value_expression.3:[rbp-28] $20.1:rbx 
  .loc 7 164 16
  # $21.1: @AST_Return_Statement = new AST_Return_Statement(object_type = AST_Return_Statement, location = $20.1, value_expression = value_expression.3)
  mov [rbp-37], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Return_Statement
  mov rbx, AST_Return_Statement[rip]
  mov [rax], rbx
  #     .location = $20.1
  mov rbx, [rbp-37]
  mov QWORD PTR [rax+8], rbx
  #     .value_expression = value_expression.3
  mov r15, [rbp-28]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $20.1
  # [discarded value]: value_expression.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] $21.1:rax 
  .loc 7 164 9
  # return($21.1)
  mov [rbp-37], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] value_expression.2:[rbp-28] 
  # [discarded value]: value_expression.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] $18.1:[rbp-29] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] token.1:[rbp-20] value_expression.1:[rbp-28] 
  # [discarded value]: value_expression.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] 
.LABEL__parse_statement_254__14:
  .loc 7 166 22
  # $22.1: @Matcher = load_struct_member(self.1, required_loop)
  mov rax, [rbp-8]
  mov rbx, [rax+248]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $22.1:rbx 
  .loc 7 166 9
  # $23.1: Boolean = call(matches_285, self.1, $22.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:rax 
  # jump($23.1, .LABEL__parse_statement_254__18, .LABEL__parse_statement_254__19)
  test al, al
  mov [rbp-13], al
  jz .LABEL__parse_statement_254__19
.LABEL__parse_statement_254__18:
  .loc 7 167 16
  # $24.1: @AST_Statement = call(parse_loop_262, self.1)
  mov rdi, [rbp-8]
  call parse_loop_262
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $24.1:rax 
  .loc 7 167 9
  # return($24.1)
  mov [rbp-21], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] 
.LABEL__parse_statement_254__19:
  .loc 7 169 22
  # $25.1: @Matcher = load_struct_member(self.1, required_while)
  mov rax, [rbp-8]
  mov rbx, [rax+336]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $25.1:rbx 
  .loc 7 169 9
  # $26.1: Boolean = call(matches_285, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:rax 
  # jump($26.1, .LABEL__parse_statement_254__21, .LABEL__parse_statement_254__22)
  test al, al
  mov [rbp-14], al
  jz .LABEL__parse_statement_254__22
.LABEL__parse_statement_254__21:
  .loc 7 170 16
  # $27.1: @AST_Statement = call(parse_while_263, self.1)
  mov rdi, [rbp-8]
  call parse_while_263
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $27.1:rax 
  .loc 7 170 9
  # return($27.1)
  mov [rbp-22], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] 
.LABEL__parse_statement_254__22:
  .loc 7 172 22
  # $28.1: @Matcher = load_struct_member(self.1, required_break)
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $28.1:rbx 
  .loc 7 172 9
  # $29.1: Boolean = call(matches_285, self.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:rax 
  # jump($29.1, .LABEL__parse_statement_254__24, .LABEL__parse_statement_254__25)
  test al, al
  mov [rbp-15], al
  jz .LABEL__parse_statement_254__25
.LABEL__parse_statement_254__24:
  .loc 7 173 31
  # $30.1: @Matcher = load_struct_member(self.1, required_break)
  mov rax, [rbp-8]
  mov rbx, [rax+72]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $30.1:rbx 
  .loc 7 173 18
  # token.1: @Token = call(consume_281, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] token.1:rax 
  .loc 7 174 51
  # $32.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $32.1:rbx 
  .loc 7 174 16
  # $33.1: @AST_Break_Statement = new AST_Break_Statement(object_type = AST_Break_Statement, location = $32.1)
  mov [rbp-23], rbx
  mov rdi, 16
  call malloc
  #     .object_type = AST_Break_Statement
  mov rbx, AST_Break_Statement[rip]
  mov [rax], rbx
  #     .location = $32.1
  mov rbx, [rbp-23]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $33.1:rax 
  .loc 7 174 9
  # return($33.1)
  mov [rbp-23], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] 
.LABEL__parse_statement_254__25:
  .loc 7 176 22
  # $34.1: @Matcher = load_struct_member(self.1, required_include)
  mov rax, [rbp-8]
  mov rbx, [rax+224]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $34.1:rbx 
  .loc 7 176 9
  # $35.1: Boolean = call(matches_285, self.1, $34.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:rax 
  # jump($35.1, .LABEL__parse_statement_254__27, .LABEL__parse_statement_254__28)
  test al, al
  mov [rbp-16], al
  jz .LABEL__parse_statement_254__28
.LABEL__parse_statement_254__27:
  .loc 7 177 16
  # $36.1: @AST_Include_Statement = call(parse_include_255, self.1)
  mov rdi, [rbp-8]
  call parse_include_255
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] $36.1:rax 
  .loc 7 177 9
  # return($36.1)
  mov [rbp-24], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] 
.LABEL__parse_statement_254__28:
  .loc 7 180 19
  # expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax 
  .loc 7 182 22
  # $38.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 
  .loc 7 182 43
  # $39.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov r14, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 $39.1:r14 
  .loc 7 182 66
  # $40.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r13, [rbx+160]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax $38.1:r15 $39.1:r14 $40.1:r13 
  .loc 7 182 9
  # $41.1: Boolean = call(matches_287, self.1, $38.1, $39.1, $40.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-24], rax
  call matches_287
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:rax 
  # jump($41.1, .LABEL__parse_statement_254__30, .LABEL__parse_statement_254__31)
  test al, al
  mov [rbp-25], al
  jz .LABEL__parse_statement_254__31
.LABEL__parse_statement_254__30:
  .loc 7 183 56
  # $42.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $42.1:rbx 
  .loc 7 183 16
  # $43.1: @AST_Expression_Statement = new AST_Expression_Statement(object_type = AST_Expression_Statement, location = $42.1, expression = expression.1)
  mov [rbp-33], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Expression_Statement
  mov rbx, AST_Expression_Statement[rip]
  mov [rax], rbx
  #     .location = $42.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  #     .expression = expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:r15:[rbp-24] $41.1:[rbp-25] $43.1:rax 
  .loc 7 183 9
  # return($43.1)
  mov [rbp-33], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] 
.LABEL__parse_statement_254__31:
  .loc 7 186 22
  # $44.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx 
  .loc 7 186 43
  # $45.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx $45.1:r15 
  .loc 7 186 64
  # $46.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r14, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $44.1:rbx $45.1:r15 $46.1:r14 
  .loc 7 186 9
  # $47.1: Boolean = call(matches_287, self.1, $44.1, $45.1, $46.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_287
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:rax 
  # jump($47.1, .LABEL__parse_statement_254__33, .LABEL__parse_statement_254__34)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_statement_254__34
.LABEL__parse_statement_254__33:
  .loc 7 187 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 188 22
  # $48.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $48.1:rbx 
  .loc 7 188 43
  # $49.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $48.1:rbx $49.1:r15 
  .loc 7 188 9
  # $50.1: @Token = call(consume_282, self.1, $48.1, $49.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 189 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  .loc 7 190 26
  # $51.1: @Matcher = load_struct_member(self.1, required_struct)
  mov rax, [rbp-8]
  mov rbx, [rax+320]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $51.1:rbx 
  .loc 7 190 13
  # $52.1: Boolean = call(matches_285, self.1, $51.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:rax 
  # jump($52.1, .LABEL__parse_statement_254__35, .LABEL__parse_statement_254__36)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_statement_254__36
.LABEL__parse_statement_254__35:
  .loc 7 191 20
  # $53.1: @AST_Statement = call(parse_struct_256, self.1, expression.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call parse_struct_256
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] $53.1:rax 
  .loc 7 191 13
  # return($53.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] 
.LABEL__parse_statement_254__36:
  .loc 7 193 16
  # $54.1: @AST_Statement = call(parse_function_257, self.1, expression.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call parse_function_257
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] $54.1:rax 
  .loc 7 193 9
  # return($54.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $52.1:[rbp-27] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
.LABEL__parse_statement_254__34:
  .loc 7 196 22
  # $55.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $55.1:rbx 
  .loc 7 196 43
  # $56.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r15, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $55.1:rbx $56.1:r15 
  .loc 7 196 9
  # $57.1: Boolean = call(matches_286, self.1, $55.1, $56.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:rax 
  # jump($57.1, .LABEL__parse_statement_254__39, .LABEL__parse_statement_254__40)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_statement_254__40
.LABEL__parse_statement_254__39:
  .loc 7 197 13
  # $58.1: Boolean = call(is_343, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-24]
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:rax 
  # jump($58.1, .LABEL__parse_statement_254__41, .LABEL__parse_statement_254__42)
  test al, al
  mov [rbp-28], al
  jz .LABEL__parse_statement_254__42
.LABEL__parse_statement_254__41:
  .loc 7 198 27
  # expression.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] expression.1:rax 
  .loc 7 199 30
  # variable_name.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rax+16]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx 
  .loc 7 200 13
  # variable_value_type.1: @AST_Type = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax 
  .loc 7 201 13
  # variable_value_expression.1: @AST_Expression = null
  xor r15, r15
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 
  .loc 7 202 13
  # variable_is_external.1: Boolean = false
  mov r14b, 0
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 
  .loc 7 203 30
  # $61.1: @Matcher = load_struct_member(self.1, optional_space)
  mov r13, [rbp-8]
  mov r12, [r13+32]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 
  .loc 7 203 51
  # $62.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r11, [r13+104]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 
  .loc 7 203 72
  # $63.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r10, [r13+168]
  # [live values]: self.1:r13:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rbx variable_value_type.1:rax variable_value_expression.1:r15 variable_is_external.1:r14 $61.1:r12 $62.1:r11 $63.1:r10 
  .loc 7 203 17
  # $64.1: Boolean = call(matches_287, self.1, $61.1, $62.1, $63.1)
  mov rdi, r13
  mov rsi, r12
  mov rdx, r11
  mov rcx, r10
  mov [rbp-36], rax
  mov [rbp-44], rbx
  mov [rbp-45], r14b
  mov [rbp-53], r15
  call matches_287
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:rax 
  # jump($64.1, .LABEL__parse_statement_254__43, .LABEL__parse_statement_254__45)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_statement_254__45
.LABEL__parse_statement_254__43:
  .loc 7 204 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 205 30
  # $78.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $78.1:rbx 
  .loc 7 205 51
  # $79.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $78.1:rbx $79.1:r15 
  .loc 7 205 17
  # $80.1: @Token = call(consume_282, self.1, $78.1, $79.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $80.1
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 206 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 207 45
  # variable_value_expression.3: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:rax:[rbp-53] 
  # jump(.LABEL__parse_statement_254__44)
  mov [rbp-53], rax
.LABEL__parse_statement_254__44:
  # variable_is_external.3: Boolean = phi(variable_is_external.1, variable_is_external.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] 
  # variable_value_expression.4: @AST_Expression = phi(variable_value_expression.3, variable_value_expression.1, variable_value_expression.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] 
  # variable_value_type.3: @AST_Type = phi(variable_value_type.1, variable_value_type.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] 
  .loc 7 225 73
  # $82.1: @Source_Location = load_struct_member(variable_name.1, location)
  mov rax, [rbp-44]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:rax:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_is_external.3:[rbp-45] variable_value_expression.4:[rbp-53] variable_value_type.3:[rbp-36] $82.1:rbx 
  .loc 7 225 35
  # variable_statement.1: @AST_Variable_Statement = new AST_Variable_Statement(object_type = AST_Variable_Statement, location = $82.1, name = variable_name.1, type = variable_value_type.3, value_expression = variable_value_expression.4, is_external = variable_is_external.3)
  mov [rbp-62], rbx
  mov rdi, 41
  call malloc
  #     .object_type = AST_Variable_Statement
  mov rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  #     .location = $82.1
  mov rbx, [rbp-62]
  mov QWORD PTR [rax+8], rbx
  #     .name = variable_name.1
  mov r15, [rbp-44]
  mov QWORD PTR [rax+16], r15
  #     .type = variable_value_type.3
  mov r14, [rbp-36]
  mov QWORD PTR [rax+24], r14
  #     .value_expression = variable_value_expression.4
  mov r13, [rbp-53]
  mov QWORD PTR [rax+32], r13
  #     .is_external = variable_is_external.3
  mov r12b, [rbp-45]
  mov BYTE PTR [rax+40], r12b
  # [discarded value]: $82.1
  # [discarded value]: variable_value_type.3
  # [discarded value]: variable_value_expression.4
  # [discarded value]: variable_is_external.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:r15:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax 
  .loc 7 226 17
  # $84.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rbp-8]
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:r15:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax $84.1:r14 
  .loc 7 226 17
  # $85.1: Boolean = $84.1 == 0
  cmp r14, 0
  sete r13b
  # [discarded value]: $84.1
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:r15:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:rax $85.1:r13 
  # jump($85.1, .LABEL__parse_statement_254__51, .LABEL__parse_statement_254__52)
  test r13b, r13b
  mov [rbp-62], rax
  mov [rbp-63], r13b
  jz .LABEL__parse_statement_254__52
.LABEL__parse_statement_254__51:
  .loc 7 227 17
  # $86.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] $86.1:rbx 
  .loc 7 227 17
  # $87.1: @List = load_struct_member($86.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] $87.1:r15 
  .loc 7 227 17
  # call(append_318, $87.1, variable_statement.1)
  mov rdi, r15
  mov rsi, [rbp-62]
  call append_318
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # jump(.LABEL__parse_statement_254__52)
.LABEL__parse_statement_254__52:
  .loc 7 229 13
  # return(variable_statement.1)
  mov rax, [rbp-62]
  jmp .LABEL__parse_statement_254__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] $85.1:[rbp-63] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] variable_statement.1:[rbp-62] 
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_expression.3:[rbp-53] 
  # [discarded value]: variable_value_expression.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
.LABEL__parse_statement_254__45:
  .loc 7 209 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 210 30
  # $65.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] $65.1:rbx 
  .loc 7 210 17
  # $66.1: @Token = call(consume_281, self.1, $65.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 211 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  .loc 7 212 39
  # variable_value_type.2: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] 
  .loc 7 213 34
  # $68.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] $68.1:r15 
  .loc 7 213 55
  # $69.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:rax:[rbp-36] $68.1:r15 $69.1:r14 
  .loc 7 213 21
  # $70.1: Boolean = call(matches_286, self.1, $68.1, $69.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-36], rax
  call matches_286
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:rax 
  # jump($70.1, .LABEL__parse_statement_254__46, .LABEL__parse_statement_254__44)
  test al, al
  mov [rbp-55], al
  jz .LABEL__parse_statement_254__44
.LABEL__parse_statement_254__46:
  .loc 7 214 21
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 215 34
  # $71.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $71.1:rbx 
  .loc 7 215 21
  # $72.1: @Token = call(consume_281, self.1, $71.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 216 21
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  .loc 7 217 38
  # $73.1: @Matcher = load_struct_member(self.1, required_external)
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $73.1:rbx 
  .loc 7 217 25
  # $74.1: Boolean = call(matches_285, self.1, $73.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:rax 
  # jump($74.1, .LABEL__parse_statement_254__48, .LABEL__parse_statement_254__50)
  test al, al
  mov [rbp-56], al
  jz .LABEL__parse_statement_254__50
.LABEL__parse_statement_254__48:
  .loc 7 218 38
  # $76.1: @Matcher = load_struct_member(self.1, required_external)
  mov rax, [rbp-8]
  mov rbx, [rax+184]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] $76.1:rbx 
  .loc 7 218 25
  # $77.1: @Token = call(consume_281, self.1, $76.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
  .loc 7 219 25
  # variable_is_external.2: Boolean = true
  mov al, 1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_is_external.2:rax:[rbp-45] 
  # jump(.LABEL__parse_statement_254__44)
  mov [rbp-45], al
  jmp .LABEL__parse_statement_254__44
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_is_external.2:[rbp-45] 
  # [discarded value]: variable_is_external.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
.LABEL__parse_statement_254__50:
  .loc 7 221 53
  # variable_value_expression.2: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_value_expression.2:rax:[rbp-53] 
  # jump(.LABEL__parse_statement_254__44)
  mov [rbp-53], rax
  jmp .LABEL__parse_statement_254__44
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] variable_value_expression.2:[rbp-53] 
  # [discarded value]: variable_value_expression.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] $74.1:[rbp-56] 
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] $70.1:[rbp-55] 
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] variable_value_type.2:[rbp-36] 
  # [discarded value]: variable_value_type.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] $64.1:[rbp-54] 
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] variable_name.1:[rbp-44] variable_value_type.1:[rbp-36] variable_value_expression.1:[rbp-53] variable_is_external.1:[rbp-45] 
  # [discarded value]: variable_is_external.1
  # [discarded value]: variable_value_expression.1
  # [discarded value]: variable_value_type.1
  # [discarded value]: variable_name.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] 
.LABEL__parse_statement_254__42:
  .loc 7 231 15
  # $88.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] $88.1:rbx 
  .loc 7 231 9
  # call(abort_314, $88.1, "Cannot use expression as variable name")
  mov rdi, rbx
  lea rsi, .LABEL__string_324[rip] # "Cannot use expression as variable name"
  call abort_314
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $58.1:[rbp-28] 
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] 
.LABEL__parse_statement_254__40:
  .loc 7 234 22
  # $89.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $89.1:rbx 
  .loc 7 234 43
  # $90.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $89.1:rbx $90.1:r15 
  .loc 7 234 9
  # $91.1: Boolean = call(matches_286, self.1, $89.1, $90.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $90.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:rax 
  # jump($91.1, .LABEL__parse_statement_254__54, .LABEL__parse_statement_254__55)
  test al, al
  mov [rbp-28], al
  jz .LABEL__parse_statement_254__55
.LABEL__parse_statement_254__54:
  .loc 7 235 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
  .loc 7 236 34
  # $92.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] $92.1:rbx 
  .loc 7 236 21
  # operator.1: @Other_Token = call(consume_281, self.1, $92.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:rax 
  .loc 7 237 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-36], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] 
  .loc 7 238 56
  # $95.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:rax:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $95.1:rbx 
  .loc 7 238 150
  # $96.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  mov [rbp-44], rbx
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] operator.1:[rbp-36] $95.1:[rbp-44] $96.1:rax 
  .loc 7 238 16
  # $97.1: @AST_Assignment_Statement = new AST_Assignment_Statement(object_type = AST_Assignment_Statement, location = $95.1, storage_expression = expression.1, operator = operator.1, value_expression = $96.1)
  mov [rbp-52], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Assignment_Statement
  mov rbx, AST_Assignment_Statement[rip]
  mov [rax], rbx
  #     .location = $95.1
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  #     .storage_expression = expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .operator = operator.1
  mov r14, [rbp-36]
  mov QWORD PTR [rax+24], r14
  #     .value_expression = $96.1
  mov r13, [rbp-52]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: $96.1
  # [discarded value]: $95.1
  # [discarded value]: operator.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:r15:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] $97.1:rax 
  .loc 7 238 9
  # return($97.1)
  mov [rbp-36], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
.LABEL__parse_statement_254__55:
  .loc 7 241 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_254__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] $91.1:[rbp-28] 
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] $57.1:[rbp-27] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] $47.1:[rbp-26] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] $41.1:[rbp-25] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] expression.1:[rbp-24] 
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] $35.1:[rbp-16] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] $29.1:[rbp-15] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] $26.1:[rbp-14] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] $23.1:[rbp-13] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] $14.1:[rbp-12] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] $11.1:[rbp-11] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.3:[rbp-10] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
.LABEL__parse_statement_254__5:
  .loc 7 148 86
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_file)
  mov rax, [rbp-8]
  mov rbx, [rax+152]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $6.1:rbx 
  .loc 7 148 73
  # $5.2: Boolean = call(matches_285, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.2:rax:[rbp-10] 
  # jump(.LABEL__parse_statement_254__6)
  mov [rbp-10], al
  jmp .LABEL__parse_statement_254__6
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] $5.2:[rbp-10] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:[rbp-10] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statement_254__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statement_254__stack_frame_size: .word 64

  .loc 7 246 1
  .text
parse_include_255:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_include_255__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_include_255__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 247 30
  # $1.1: @Matcher = load_struct_member(self.1, required_include)
  mov rax, [rdi+224]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 247 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 247 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 248 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 249 32
  # $4.1: @Matcher = load_struct_member(self.1, required_string_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+312]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 249 19
  # $6.1: @String_Token = call(consume_281, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] $6.1:rax 
  .loc 7 249 18
  # file_path.1: @String = load_struct_member($6.1, value)
  mov rbx, [rax+32]
  # [discarded value]: $6.1
  # [live values]: location.1:[rbp-16] file_path.1:rbx 
  .loc 7 250 12
  # $8.1: @AST_Include_Statement = new AST_Include_Statement(object_type = AST_Include_Statement, location = location.1, file_path = file_path.1)
  mov [rbp-24], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Include_Statement
  mov rbx, AST_Include_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .file_path = file_path.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: file_path.1
  # [discarded value]: location.1
  # [live values]: $8.1:rax 
  .loc 7 250 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_include_255__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_include_255__end:
  mov rsp, rbp
  pop rbp
  ret

parse_include_255__stack_frame_size: .word 32

  .loc 7 255 1
  .text
parse_struct_256:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_256__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_256__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  .loc 7 256 9
  # $1.1: Boolean = call(is_343, name_expression.1, AST_Variable_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  .loc 7 256 9
  # $2.1: Boolean = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:rbx 
  # jump($2.1, .LABEL__parse_struct_256__2, .LABEL__parse_struct_256__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__parse_struct_256__3
.LABEL__parse_struct_256__2:
  .loc 7 257 15
  # $3.1: @Source_Location = load_struct_member(name_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 7 257 9
  # call(abort_314, $3.1, "Cannot use expression as struct name")
  mov rdi, rbx
  lea rsi, .LABEL__string_325[rip] # "Cannot use expression as struct name"
  call abort_314
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__parse_struct_256__3:
  .loc 7 259 21
  # $4.1: @AST_Variable_Expression = name_expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  .loc 7 259 20
  # struct_name.1: @Identifier_Token = load_struct_member($4.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rbx 
  .loc 7 260 30
  # struct_init_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:rax 
  .loc 7 261 18
  # $7.1: @Matcher = load_struct_member(self.1, required_struct)
  mov rbx, [rbp-8]
  mov r15, [rbx+320]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:rax $7.1:r15 
  .loc 7 261 5
  # $8.1: @Token = call(consume_281, self.1, $7.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-33], rax
  call consume_281
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] 
  .loc 7 262 5
  # base_type.1: @AST_Type = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax 
  .loc 7 263 22
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax $9.1:r15 
  .loc 7 263 43
  # $10.1: @Matcher = load_struct_member(self.1, required_colon)
  mov r14, [rbx+104]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:rax $9.1:r15 $10.1:r14 
  .loc 7 263 9
  # $11.1: Boolean = call(matches_286, self.1, $9.1, $10.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-41], rax
  call matches_286
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:rax 
  # jump($11.1, .LABEL__parse_struct_256__4, .LABEL__parse_struct_256__5)
  test al, al
  mov [rbp-42], al
  jz .LABEL__parse_struct_256__5
.LABEL__parse_struct_256__4:
  .loc 7 264 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 265 22
  # $12.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] $12.1:rbx 
  .loc 7 265 9
  # $13.1: @Token = call(consume_281, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 266 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  .loc 7 267 21
  # base_type.2: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] 
  .loc 7 268 26
  # $15.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] $15.1:r15 
  .loc 7 268 47
  # $16.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:rax:[rbp-41] $15.1:r15 $16.1:r14 
  .loc 7 268 13
  # $17.1: Boolean = call(matches_286, self.1, $15.1, $16.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-41], rax
  call matches_286
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:rax 
  # jump($17.1, .LABEL__parse_struct_256__6, .LABEL__parse_struct_256__5)
  test al, al
  mov [rbp-43], al
  jz .LABEL__parse_struct_256__5
.LABEL__parse_struct_256__6:
  .loc 7 269 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 270 26
  # $18.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] $18.1:rbx 
  .loc 7 270 13
  # $19.1: @Token = call(consume_281, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 271 13
  # call(parse_call_arguments_275, self.1, struct_init_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  call parse_call_arguments_275
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 272 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  .loc 7 273 26
  # $20.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] $20.1:rbx 
  .loc 7 273 13
  # $21.1: @Token = call(consume_281, self.1, $20.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # jump(.LABEL__parse_struct_256__5)
.LABEL__parse_struct_256__5:
  # base_type.4: @AST_Type = phi(base_type.1, base_type.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] 
  .loc 7 276 5
  # struct_members.1: @List = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax 
  .loc 7 277 22
  # $22.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax $22.1:r15 
  .loc 7 277 43
  # $23.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:rax $22.1:r15 $23.1:r14 
  .loc 7 277 9
  # $24.1: Boolean = call(matches_286, self.1, $22.1, $23.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-51], rax
  call matches_286
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:rax 
  # jump($24.1, .LABEL__parse_struct_256__8, .LABEL__parse_struct_256__9)
  test al, al
  mov [rbp-52], al
  jz .LABEL__parse_struct_256__9
.LABEL__parse_struct_256__8:
  .loc 7 278 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 279 22
  # $25.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+264]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $25.1:rbx 
  .loc 7 279 9
  # $26.1: @Token = call(consume_281, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 280 9
  # call(consume_end_of_line_278, self.1)
  mov rdi, [rbp-8]
  call consume_end_of_line_278
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 281 34
  # $27.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $27.1:rbx 
  .loc 7 281 34
  # $28.1: Int = $27.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] $28.1:r15 
  .loc 7 281 9
  # store_struct_member(self.1, current_alignment, $28.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  .loc 7 283 26
  # struct_members.2: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:rax:[rbp-51] 
  # jump(.LABEL__parse_struct_256__10)
  mov [rbp-51], rax
.LABEL__parse_struct_256__10:
  .loc 7 285 17
  # $30.1: Boolean = call(consume_empty_line_279, self.1)
  mov rdi, [rbp-8]
  call consume_empty_line_279
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $30.1:rax 
  .loc 7 285 17
  # $31.1: Boolean = $30.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:rbx 
  # jump($31.1, .LABEL__parse_struct_256__12, .LABEL__parse_struct_256__10)
  test bl, bl
  mov [rbp-53], bl
  jz .LABEL__parse_struct_256__10
.LABEL__parse_struct_256__12:
  .loc 7 286 34
  # $32.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $32.1:rbx 
  .loc 7 286 55
  # $33.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov r15, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $32.1:rbx $33.1:r15 
  .loc 7 286 21
  # $34.1: Boolean = call(matches_286, self.1, $32.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:rax 
  # jump($34.1, .LABEL__parse_struct_256__14, .LABEL__parse_struct_256__11)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_struct_256__11
.LABEL__parse_struct_256__14:
  .loc 7 287 40
  # $35.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $35.1:rbx 
  .loc 7 287 40
  # $36.1: Int = $35.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $36.1:r15 
  .loc 7 287 21
  # call(consume_space_280, self.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 288 56
  # $37.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] $37.1:rbx 
  .loc 7 288 43
  # struct_member_name.1: @Identifier_Token = call(consume_281, self.1, $37.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rax 
  .loc 7 289 21
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-62], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 290 34
  # $40.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] $40.1:rbx 
  .loc 7 290 21
  # $41.1: @Token = call(consume_281, self.1, $40.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 291 21
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  .loc 7 292 49
  # struct_member_value_type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax 
  .loc 7 293 38
  # $43.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax $43.1:r15 
  .loc 7 293 59
  # $44.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:rax $43.1:r15 $44.1:r14 
  .loc 7 293 25
  # $45.1: Boolean = call(matches_286, self.1, $43.1, $44.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-70], rax
  call matches_286
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:rax 
  # jump($45.1, .LABEL__parse_struct_256__18, .LABEL__parse_struct_256__19)
  test al, al
  mov [rbp-71], al
  jz .LABEL__parse_struct_256__19
.LABEL__parse_struct_256__18:
  .loc 7 294 25
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 295 38
  # $46.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $46.1:rbx 
  .loc 7 295 25
  # $47.1: @Token = call(consume_281, self.1, $46.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 296 25
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  .loc 7 297 45
  # value_expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] value_expression.1:rax 
  .loc 7 298 54
  # $49.1: @AST_Call_Argument = new AST_Call_Argument(name = struct_member_name.1, value_expression = value_expression.1)
  mov [rbp-79], rax
  mov rdi, 16
  call malloc
  #     .name = struct_member_name.1
  mov rbx, [rbp-62]
  mov QWORD PTR [rax], rbx
  #     .value_expression = value_expression.1
  mov r15, [rbp-79]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rbx:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $49.1:rax 
  .loc 7 298 25
  # call(append_318, struct_init_arguments.1, $49.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  call append_318
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] 
  # jump(.LABEL__parse_struct_256__19)
.LABEL__parse_struct_256__19:
  .loc 7 300 76
  # $50.1: @Source_Location = load_struct_member(struct_member_name.1, location)
  mov rax, [rbp-62]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:rax:[rbp-62] struct_member_value_type.1:[rbp-70] $45.1:[rbp-71] $50.1:rbx 
  .loc 7 300 43
  # $51.1: @AST_Struct_Member = new AST_Struct_Member(location = $50.1, name = struct_member_name.1, type = struct_member_value_type.1)
  mov [rbp-79], rbx
  mov rdi, 24
  call malloc
  #     .location = $50.1
  mov rbx, [rbp-79]
  mov QWORD PTR [rax], rbx
  #     .name = struct_member_name.1
  mov r15, [rbp-62]
  mov QWORD PTR [rax+8], r15
  #     .type = struct_member_value_type.1
  mov r14, [rbp-70]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $50.1
  # [discarded value]: struct_member_value_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:r15:[rbp-62] $45.1:[rbp-71] $51.1:rax 
  .loc 7 300 21
  # call(append_318, struct_members.2, $51.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call append_318
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] $45.1:[rbp-71] 
  # jump(.LABEL__parse_struct_256__10)
  jmp .LABEL__parse_struct_256__10
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] $45.1:[rbp-71] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] $45.1:[rbp-71] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] struct_member_name.1:[rbp-62] 
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
.LABEL__parse_struct_256__11:
  .loc 7 307 34
  # $52.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $52.1:rbx $34.1:[rbp-54] 
  .loc 7 307 34
  # $53.1: Int = $52.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $52.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $53.1:r15 $34.1:[rbp-54] 
  .loc 7 307 9
  # store_struct_member(self.1, current_alignment, $53.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 308 28
  # $54.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $54.1:rbx $34.1:[rbp-54] 
  .loc 7 308 28
  # $55.1: Int = $54.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $55.1:r15 $34.1:[rbp-54] 
  .loc 7 308 9
  # call(consume_space_280, self.1, $55.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 309 22
  # $56.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $56.1:rbx $34.1:[rbp-54] 
  .loc 7 309 9
  # $57.1: @Token = call(consume_281, self.1, $56.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # jump(.LABEL__parse_struct_256__9)
.LABEL__parse_struct_256__9:
  # struct_members.4: @List = phi(struct_members.1, struct_members.2)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 311 61
  # $58.1: @Source_Location = load_struct_member(struct_name.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:rax:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] base_type.4:[rbp-41] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_members.4:[rbp-51] $58.1:rbx $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 311 25
  # struct_statement.1: @AST_Struct_Statement = new AST_Struct_Statement(object_type = AST_Struct_Statement, location = $58.1, name = struct_name.1, base_type = base_type.4, members = struct_members.4, init_arguments = struct_init_arguments.1)
  mov [rbp-62], rbx
  mov rdi, 48
  call malloc
  #     .object_type = AST_Struct_Statement
  mov rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  #     .location = $58.1
  mov rbx, [rbp-62]
  mov QWORD PTR [rax+8], rbx
  #     .name = struct_name.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+16], r15
  #     .base_type = base_type.4
  mov r14, [rbp-41]
  mov QWORD PTR [rax+24], r14
  #     .members = struct_members.4
  mov r13, [rbp-51]
  mov QWORD PTR [rax+32], r13
  #     .init_arguments = struct_init_arguments.1
  mov r12, [rbp-33]
  mov QWORD PTR [rax+40], r12
  # [discarded value]: $58.1
  # [discarded value]: struct_members.4
  # [discarded value]: base_type.4
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:r15:[rbp-25] struct_init_arguments.1:r12:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 312 5
  # $60.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:r15:[rbp-25] struct_init_arguments.1:r12:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $60.1:r14 $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 312 5
  # $61.1: @List = load_struct_member($60.1, types)
  mov r13, [r14+8]
  # [discarded value]: $60.1
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:r15:[rbp-25] struct_init_arguments.1:r12:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:rax $61.1:r13 $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 312 5
  # call(append_318, $61.1, struct_statement.1)
  mov rdi, r13
  mov rsi, rax
  mov [rbp-62], rax
  call append_318
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] struct_statement.1:[rbp-62] $31.1:[rbp-53] $34.1:[rbp-54] 
  .loc 7 313 5
  # return(struct_statement.1)
  mov rax, [rbp-62]
  jmp .LABEL__parse_struct_256__end
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] $34.1:[rbp-54] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] $31.1:[rbp-53] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] struct_members.2:[rbp-51] 
  # [discarded value]: struct_members.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] $24.1:[rbp-52] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] struct_members.1:[rbp-51] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] $17.1:[rbp-43] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] base_type.2:[rbp-41] 
  # [discarded value]: base_type.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] $11.1:[rbp-42] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] struct_name.1:[rbp-25] struct_init_arguments.1:[rbp-33] base_type.1:[rbp-41] 
  # [discarded value]: base_type.1
  # [discarded value]: struct_init_arguments.1
  # [discarded value]: struct_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: name_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_struct_256__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_256__stack_frame_size: .word 80

  .loc 7 318 1
  .text
parse_function_257:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_257__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_257__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # name_expression.1: @AST_Expression = load_variable(name_expression)
  # [live values]: self.1:rdi name_expression.1:rsi 
  .loc 7 319 9
  # $1.1: Boolean = call(is_343, name_expression.1, AST_Variable_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__parse_function_257__2, .LABEL__parse_function_257__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_function_257__3
.LABEL__parse_function_257__2:
  .loc 7 320 27
  # $2.1: @AST_Variable_Expression = name_expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 7 320 26
  # function_name.1: @Identifier_Token = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rbx 
  .loc 7 321 26
  # function_type.1: @AST_Function_Type = call(parse_function_type_258, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_function_type_258
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax 
  .loc 7 323 26
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax $5.1:r15 
  .loc 7 323 47
  # $6.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov r14, [rbx+264]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:rax $5.1:r15 $6.1:r14 
  .loc 7 323 13
  # $7.1: Boolean = call(matches_286, self.1, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-33], rax
  call matches_286
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__parse_function_257__4, .LABEL__parse_function_257__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__parse_function_257__6
.LABEL__parse_function_257__4:
  .loc 7 324 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] 
  .loc 7 325 29
  # function_body.3: @AST_Block_Statement = call(parse_block_260, self.1)
  mov rdi, [rbp-8]
  call parse_block_260
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:rax 
  # jump(.LABEL__parse_function_257__5)
  mov [rbp-42], rax
.LABEL__parse_function_257__5:
  # function_body.4: @AST_Block_Statement = phi(function_body.2, function_body.3)
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] 
  .loc 7 329 69
  # $9.1: @Source_Location = load_struct_member(function_name.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:rax:[rbp-25] function_type.1:[rbp-33] $7.1:[rbp-34] function_body.3:[rbp-42] function_body.4:[rbp-42] $9.1:rbx 
  .loc 7 329 31
  # function_statement.1: @AST_Function_Statement = new AST_Function_Statement(object_type = AST_Function_Statement, location = $9.1, name = function_name.1, type = function_type.1, body = function_body.4, ir_function = null)
  mov [rbp-50], rbx
  mov rdi, 48
  call malloc
  #     .object_type = AST_Function_Statement
  mov rbx, AST_Function_Statement[rip]
  mov [rax], rbx
  #     .location = $9.1
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  #     .name = function_name.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+16], r15
  #     .type = function_type.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+24], r14
  #     .body = function_body.4
  mov r13, [rbp-42]
  mov QWORD PTR [rax+32], r13
  #     .ir_function = null
  mov QWORD PTR [rax+40], 0
  # [discarded value]: $9.1
  # [discarded value]: function_body.4
  # [discarded value]: function_type.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:r15:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax 
  .loc 7 330 9
  # $11.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:r15:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax $11.1:r14 
  .loc 7 330 9
  # $12.1: @List = load_struct_member($11.1, functions)
  mov r13, [r14+24]
  # [discarded value]: $11.1
  # [live values]: self.1:rbx:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:r15:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:rax $12.1:r13 
  .loc 7 330 9
  # call(append_318, $12.1, function_statement.1)
  mov rdi, r13
  mov rsi, rax
  mov [rbp-50], rax
  call append_318
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] function_statement.1:[rbp-50] 
  .loc 7 331 9
  # return(function_statement.1)
  mov rax, [rbp-50]
  jmp .LABEL__parse_function_257__end
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] 
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] function_body.3:[rbp-42] 
  # [discarded value]: function_body.3
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] 
.LABEL__parse_function_257__6:
  .loc 7 327 13
  # function_body.2: @AST_Block_Statement = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] function_body.2:rax:[rbp-42] 
  # jump(.LABEL__parse_function_257__5)
  mov [rbp-42], rax
  jmp .LABEL__parse_function_257__5
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] function_body.2:[rbp-42] 
  # [discarded value]: function_body.2
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] function_name.1:[rbp-25] 
  # [discarded value]: function_name.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__parse_function_257__3:
  .loc 7 333 11
  # $13.1: @Source_Location = load_struct_member(name_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] name_expression.1:rax:[rbp-16] $1.1:[rbp-17] $13.1:rbx 
  .loc 7 333 5
  # call(abort_314, $13.1, "Cannot use expression as function name")
  mov rdi, rbx
  lea rsi, .LABEL__string_326[rip] # "Cannot use expression as function name"
  call abort_314
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] name_expression.1:[rbp-16] 
  # [discarded value]: name_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_257__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_257__stack_frame_size: .word 64

  .loc 7 338 1
  .text
parse_function_type_258:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_type_258__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_type_258__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 339 30
  # $1.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rdi+280]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 339 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 339 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 340 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 341 28
  # function_parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:rax 
  .loc 7 342 22
  # $5.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rbx, [rbp-8]
  mov r15, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] location.1:[rbp-16] function_parameters.1:rax $5.1:r15 
  .loc 7 342 9
  # $6.1: Boolean = call(matches_285, self.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-24], rax
  call matches_285
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:rax 
  .loc 7 342 9
  # $7.1: Boolean = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:rbx 
  # jump($7.1, .LABEL__parse_function_type_258__2, .LABEL__parse_function_type_258__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__parse_function_type_258__3
.LABEL__parse_function_type_258__2:
  .loc 7 343 36
  # $8.1: @AST_Function_Parameter = call(parse_function_parameter_259, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_259
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $8.1:rax 
  .loc 7 343 9
  # call(append_318, function_parameters.1, $8.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_318
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # jump(.LABEL__parse_function_type_258__4)
.LABEL__parse_function_type_258__4:
  .loc 7 344 29
  # $9.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $9.1:rbx 
  .loc 7 344 50
  # $10.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $9.1:rbx $10.1:r15 
  .loc 7 344 16
  # $11.1: Boolean = call(matches_286, self.1, $9.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $11.1:rax 
  .loc 7 344 16
  # $12.1: Boolean = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:rbx 
  # jump($12.1, .LABEL__parse_function_type_258__5, .LABEL__parse_function_type_258__3)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__parse_function_type_258__3
.LABEL__parse_function_type_258__5:
  .loc 7 345 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 346 26
  # $13.1: @Matcher = load_struct_member(self.1, required_comma)
  mov rax, [rbp-8]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] $13.1:rbx 
  .loc 7 346 13
  # $14.1: @Token = call(consume_281, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 347 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 348 40
  # $15.1: @AST_Function_Parameter = call(parse_function_parameter_259, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_259
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] $15.1:rax 
  .loc 7 348 13
  # call(append_318, function_parameters.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_318
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  # jump(.LABEL__parse_function_type_258__4)
  jmp .LABEL__parse_function_type_258__4
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
.LABEL__parse_function_type_258__3:
  .loc 7 351 18
  # $16.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $16.1:rbx $12.1:[rbp-26] 
  .loc 7 351 5
  # $17.1: @Token = call(consume_281, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 352 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 353 18
  # $18.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $18.1:rbx $12.1:[rbp-26] 
  .loc 7 353 40
  # $19.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $18.1:rbx $19.1:r15 $12.1:[rbp-26] 
  .loc 7 353 5
  # $20.1: @Token = call(consume_282, self.1, $18.1, $19.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 354 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  .loc 7 355 29
  # function_return_type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $7.1:[rbp-25] function_return_type.1:rax $12.1:[rbp-26] 
  .loc 7 356 12
  # $22.1: @AST_Function_Type = new AST_Function_Type(object_type = AST_Function_Type, location = location.1, parameters = function_parameters.1, return_type = function_return_type.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Function_Type
  mov rbx, AST_Function_Type[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .parameters = function_parameters.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .return_type = function_return_type.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: function_return_type.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] function_parameters.1:r15:[rbp-24] $7.1:[rbp-25] $22.1:rax $12.1:[rbp-26] 
  .loc 7 356 5
  # return($22.1)
  mov [rbp-34], rax
  jmp .LABEL__parse_function_type_258__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $7.1:[rbp-25] $12.1:[rbp-26] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $7.1:[rbp-25] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_type_258__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_type_258__stack_frame_size: .word 48

  .loc 7 361 1
  .text
parse_function_parameter_259:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameter_259__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameter_259__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 362 36
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 362 23
  # parameter_name.1: @Identifier_Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] parameter_name.1:rax 
  .loc 7 363 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 364 18
  # $4.1: @Matcher = load_struct_member(self.1, required_colon)
  mov rax, [rbp-8]
  mov rbx, [rax+104]
  # [live values]: self.1:rax:[rbp-8] parameter_name.1:[rbp-16] $4.1:rbx 
  .loc 7 364 5
  # $5.1: @Token = call(consume_281, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 365 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 366 23
  # parameter_type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [discarded value]: self.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:rax 
  .loc 7 367 50
  # $7.1: @Source_Location = load_struct_member(parameter_name.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: parameter_name.1:rbx:[rbp-16] parameter_type.1:rax $7.1:r15 
  .loc 7 367 12
  # $8.1: @AST_Function_Parameter = new AST_Function_Parameter(location = $7.1, name = parameter_name.1, type = parameter_type.1)
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .location = $7.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  #     .name = parameter_name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .type = parameter_type.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [discarded value]: parameter_type.1
  # [discarded value]: parameter_name.1
  # [live values]: $8.1:rax 
  .loc 7 367 5
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_function_parameter_259__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_function_parameter_259__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameter_259__stack_frame_size: .word 32

  .loc 7 372 1
  .text
parse_block_260:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_block_260__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_block_260__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 373 30
  # $1.1: @Matcher = load_struct_member(self.1, required_open_brace)
  mov rax, [rdi+264]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 373 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 373 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 374 5
  # call(consume_end_of_line_278, self.1)
  mov rdi, [rbp-8]
  mov [rbp-16], rbx
  call consume_end_of_line_278
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 375 30
  # $4.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 375 30
  # $5.1: Int = $4.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $5.1:r15 
  .loc 7 375 5
  # store_struct_member(self.1, current_alignment, $5.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] 
  .loc 7 376 19
  # statements.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:rax 
  .loc 7 377 5
  # call(parse_statements_252, self.1, statements.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call parse_statements_252
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 378 30
  # $7.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $7.1:rbx 
  .loc 7 378 30
  # $8.1: Int = $7.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $8.1:r15 
  .loc 7 378 5
  # store_struct_member(self.1, current_alignment, $8.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 379 24
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $9.1:rbx 
  .loc 7 379 24
  # $10.1: Int = $9.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $10.1:r15 
  .loc 7 379 5
  # call(consume_space_280, self.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 380 18
  # $11.1: @Matcher = load_struct_member(self.1, required_close_brace)
  mov rax, [rbp-8]
  mov rbx, [rax+80]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $11.1:rbx 
  .loc 7 380 5
  # $12.1: @Token = call(consume_281, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 381 12
  # $13.1: @AST_Block_Statement = new AST_Block_Statement(object_type = AST_Block_Statement, location = location.1, statements = statements.1)
  mov rdi, 24
  call malloc
  #     .object_type = AST_Block_Statement
  mov rbx, AST_Block_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .statements = statements.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: statements.1
  # [discarded value]: location.1
  # [live values]: $13.1:rax 
  .loc 7 381 5
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_block_260__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__parse_block_260__end:
  mov rsp, rbp
  pop rbp
  ret

parse_block_260__stack_frame_size: .word 32

  .loc 7 386 1
  .text
parse_if_261:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_if_261__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_if_261__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 387 30
  # $1.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rdi+216]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 387 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 387 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 388 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 389 18
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 389 5
  # $5.1: @Token = call(consume_281, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 390 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 391 29
  # condition_expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 392 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 393 18
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  .loc 7 393 5
  # $8.1: @Token = call(consume_281, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 394 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 395 23
  # true_statement.1: @AST_Block_Statement = call(parse_block_260, self.1)
  mov rdi, [rbp-8]
  call parse_block_260
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax 
  .loc 7 396 5
  # false_statement.1: @AST_Statement = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx 
  .loc 7 397 22
  # $10.1: @Matcher = load_struct_member(self.1, optional_space)
  mov r15, [rbp-8]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 
  .loc 7 397 43
  # $11.1: @Matcher = load_struct_member(self.1, required_else)
  mov r13, [r15+144]
  # [live values]: self.1:r15:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx $10.1:r14 $11.1:r13 
  .loc 7 397 9
  # $12.1: Boolean = call(matches_286, self.1, $10.1, $11.1)
  mov rdi, r15
  mov rsi, r14
  mov rdx, r13
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call matches_286
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:rax 
  # jump($12.1, .LABEL__parse_if_261__2, .LABEL__parse_if_261__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__parse_if_261__3
.LABEL__parse_if_261__2:
  .loc 7 398 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 399 22
  # $13.1: @Matcher = load_struct_member(self.1, required_else)
  mov rax, [rbp-8]
  mov rbx, [rax+144]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $13.1:rbx 
  .loc 7 399 9
  # $14.1: @Token = call(consume_281, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 400 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  .loc 7 401 26
  # $15.1: @Matcher = load_struct_member(self.1, required_if)
  mov rax, [rbp-8]
  mov rbx, [rax+216]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $15.1:rbx 
  .loc 7 401 13
  # $16.1: Boolean = call(matches_285, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:rax 
  # jump($16.1, .LABEL__parse_if_261__4, .LABEL__parse_if_261__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__parse_if_261__6
.LABEL__parse_if_261__4:
  .loc 7 402 31
  # false_statement.3: @AST_Statement = call(parse_if_261, self.1)
  mov rdi, [rbp-8]
  call parse_if_261
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:rax:[rbp-40] 
  # jump(.LABEL__parse_if_261__3)
  mov [rbp-40], rax
.LABEL__parse_if_261__3:
  # false_statement.4: @AST_Statement = phi(false_statement.1, false_statement.3, false_statement.2)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.4:[rbp-40] false_statement.3:[rbp-40] 
  .loc 7 407 12
  # $19.1: @AST_If_Statement = new AST_If_Statement(object_type = AST_If_Statement, location = location.1, condition_expression = condition_expression.1, true_statement = true_statement.1, false_statement = false_statement.4)
  mov rdi, 40
  call malloc
  #     .object_type = AST_If_Statement
  mov rbx, AST_If_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .condition_expression = condition_expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .true_statement = true_statement.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+24], r14
  #     .false_statement = false_statement.4
  mov r13, [rbp-40]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: false_statement.4
  # [discarded value]: true_statement.1
  # [discarded value]: condition_expression.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] $19.1:rax false_statement.3:[rbp-40] 
  .loc 7 407 5
  # return($19.1)
  mov [rbp-50], rax
  jmp .LABEL__parse_if_261__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.3:[rbp-40] 
  # [discarded value]: false_statement.3
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] 
.LABEL__parse_if_261__6:
  .loc 7 404 31
  # false_statement.2: @AST_Statement = call(parse_block_260, self.1)
  mov rdi, [rbp-8]
  call parse_block_260
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.2:rax:[rbp-40] 
  # jump(.LABEL__parse_if_261__3)
  mov [rbp-40], rax
  jmp .LABEL__parse_if_261__3
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] false_statement.2:[rbp-40] 
  # [discarded value]: false_statement.2
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $12.1:[rbp-41] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] 
  # [discarded value]: false_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_if_261__end:
  mov rsp, rbp
  pop rbp
  ret

parse_if_261__stack_frame_size: .word 64

  .loc 7 412 1
  .text
parse_loop_262:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_loop_262__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_loop_262__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 413 30
  # $1.1: @Matcher = load_struct_member(self.1, required_loop)
  mov rax, [rdi+248]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 413 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 413 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 414 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 415 19
  # loop_block.1: @AST_Block_Statement = call(parse_block_260, self.1)
  mov rdi, [rbp-8]
  call parse_block_260
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] loop_block.1:rax 
  .loc 7 416 12
  # $5.1: @AST_Loop_Statement = new AST_Loop_Statement(object_type = AST_Loop_Statement, location = location.1, block = loop_block.1)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .object_type = AST_Loop_Statement
  mov rbx, AST_Loop_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .block = loop_block.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: loop_block.1
  # [discarded value]: location.1
  # [live values]: $5.1:rax 
  .loc 7 416 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_loop_262__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__parse_loop_262__end:
  mov rsp, rbp
  pop rbp
  ret

parse_loop_262__stack_frame_size: .word 32

  .loc 7 421 1
  .text
parse_while_263:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_while_263__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_while_263__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 422 30
  # $1.1: @Matcher = load_struct_member(self.1, required_while)
  mov rax, [rdi+336]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 422 17
  # $2.1: @Token = call(consume_281, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call consume_281
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 7 422 17
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 423 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 424 18
  # $4.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:rbx 
  .loc 7 424 5
  # $5.1: @Token = call(consume_281, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 425 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 426 29
  # condition_expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 427 5
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 428 18
  # $7.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] $7.1:rbx 
  .loc 7 428 5
  # $8.1: @Token = call(consume_281, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 429 5
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 430 19
  # loop_block.1: @AST_Block_Statement = call(parse_block_260, self.1)
  mov rdi, [rbp-8]
  call parse_block_260
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:rax 
  .loc 7 431 12
  # $10.1: @AST_While_Statement = new AST_While_Statement(object_type = AST_While_Statement, location = location.1, condition_expression = condition_expression.1, block = loop_block.1)
  mov [rbp-32], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_While_Statement
  mov rbx, AST_While_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .condition_expression = condition_expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .block = loop_block.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: loop_block.1
  # [discarded value]: condition_expression.1
  # [discarded value]: location.1
  # [live values]: $10.1:rax 
  .loc 7 431 5
  # return($10.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_while_263__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__parse_while_263__end:
  mov rsp, rbp
  pop rbp
  ret

parse_while_263__stack_frame_size: .word 32

  .loc 7 439 1
  .text
parse_type_264:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_type_264__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_type_264__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 440 22
  # $1.1: @Matcher = load_struct_member(self.1, required_at)
  mov rax, [rdi+64]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 440 9
  # $2.1: Boolean = call(matches_285, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_285
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_type_264__2, .LABEL__parse_type_264__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_type_264__3
.LABEL__parse_type_264__2:
  .loc 7 441 31
  # $3.1: @Matcher = load_struct_member(self.1, required_at)
  mov rax, [rbp-8]
  mov rbx, [rax+64]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 441 18
  # token.1: @Token = call(consume_281, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax 
  .loc 7 442 9
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-17], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] 
  .loc 7 443 17
  # type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:[rbp-17] type.1:rax 
  .loc 7 444 48
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] type.1:rax $6.1:r15 
  .loc 7 444 16
  # $7.1: @AST_Pointer_Type = new AST_Pointer_Type(object_type = AST_Pointer_Type, location = $6.1, pointed_type = type.1)
  mov [rbp-17], rax
  mov [rbp-25], r15
  mov rdi, 24
  call malloc
  #     .object_type = AST_Pointer_Type
  mov rbx, AST_Pointer_Type[rip]
  mov [rax], rbx
  #     .location = $6.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .pointed_type = type.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $6.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 444 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_type_264__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_type_264__3:
  .loc 7 446 22
  # $8.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $8.1:rbx 
  .loc 7 446 9
  # $9.1: Boolean = call(matches_285, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:rax 
  # jump($9.1, .LABEL__parse_type_264__5, .LABEL__parse_type_264__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_type_264__6
.LABEL__parse_type_264__5:
  .loc 7 447 31
  # $10.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $10.1:rbx 
  .loc 7 447 18
  # token.1: @Token = call(consume_281, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax 
  .loc 7 448 28
  # array_item_type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  mov [rbp-18], rax
  call parse_type_264
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax 
  .loc 7 449 26
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax $13.1:r15 
  .loc 7 449 47
  # $14.1: @Matcher = load_struct_member(self.1, required_column)
  mov r14, [rbx+112]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:rax $13.1:r15 $14.1:r14 
  .loc 7 449 13
  # $15.1: Boolean = call(matches_286, self.1, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-26], rax
  call matches_286
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:rax 
  # jump($15.1, .LABEL__parse_type_264__7, .LABEL__parse_type_264__8)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_type_264__8
.LABEL__parse_type_264__7:
  .loc 7 450 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 451 26
  # $16.1: @Matcher = load_struct_member(self.1, required_column)
  mov rax, [rbp-8]
  mov rbx, [rax+112]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $16.1:rbx 
  .loc 7 451 13
  # $17.1: @Token = call(consume_281, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 452 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
  .loc 7 453 38
  # array_size_expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:rax 
  .loc 7 454 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-35], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] 
  .loc 7 455 26
  # $19.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $19.1:rbx 
  .loc 7 455 13
  # $20.1: @Token = call(consume_281, self.1, $19.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] 
  .loc 7 456 50
  # $21.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-18]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] array_size_expression.1:[rbp-35] $21.1:rbx 
  .loc 7 456 20
  # $22.1: @AST_Array_Type = new AST_Array_Type(object_type = AST_Array_Type, location = $21.1, item_type = array_item_type.1, size_expression = array_size_expression.1)
  mov [rbp-43], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Array_Type
  mov rbx, AST_Array_Type[rip]
  mov [rax], rbx
  #     .location = $21.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+8], rbx
  #     .item_type = array_item_type.1
  mov r15, [rbp-26]
  mov QWORD PTR [rax+16], r15
  #     .size_expression = array_size_expression.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $21.1
  # [discarded value]: array_size_expression.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:r15:[rbp-26] $15.1:[rbp-27] $22.1:rax 
  .loc 7 456 13
  # return($22.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_type_264__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] 
.LABEL__parse_type_264__8:
  .loc 7 458 46
  # $23.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-18]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax:[rbp-18] array_item_type.1:[rbp-26] $15.1:[rbp-27] $23.1:rbx 
  .loc 7 458 16
  # $24.1: @AST_Array_Type = new AST_Array_Type(object_type = AST_Array_Type, location = $23.1, item_type = array_item_type.1, size_expression = null)
  mov [rbp-35], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Array_Type
  mov rbx, AST_Array_Type[rip]
  mov [rax], rbx
  #     .location = $23.1
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+8], rbx
  #     .item_type = array_item_type.1
  mov r15, [rbp-26]
  mov QWORD PTR [rax+16], r15
  #     .size_expression = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: $23.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] $15.1:[rbp-27] $24.1:rax 
  .loc 7 458 9
  # return($24.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_type_264__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:[rbp-18] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
.LABEL__parse_type_264__6:
  .loc 7 460 22
  # $25.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $25.1:rbx 
  .loc 7 460 9
  # $26.1: Boolean = call(matches_285, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:rax 
  # jump($26.1, .LABEL__parse_type_264__11, .LABEL__parse_type_264__12)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_type_264__12
.LABEL__parse_type_264__11:
  .loc 7 461 16
  # $27.1: @AST_Function_Type = call(parse_function_type_258, self.1)
  mov rdi, [rbp-8]
  call parse_function_type_258
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $27.1:rax 
  .loc 7 461 9
  # return($27.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_type_264__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] 
.LABEL__parse_type_264__12:
  .loc 7 463 27
  # $28.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $28.1:rbx 
  .loc 7 463 14
  # token.1: @Identifier_Token = call(consume_281, self.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:rax 
  .loc 7 464 42
  # $31.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] token.1:rax $31.1:rbx 
  .loc 7 464 12
  # $32.1: @AST_Named_Type = new AST_Named_Type(object_type = AST_Named_Type, location = $31.1, name = token.1)
  mov [rbp-19], rax
  mov [rbp-27], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Named_Type
  mov rbx, AST_Named_Type[rip]
  mov [rax], rbx
  #     .location = $31.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .name = token.1
  mov r15, [rbp-19]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $31.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] $32.1:rax 
  .loc 7 464 5
  # return($32.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_type_264__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $26.1:[rbp-11] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_type_264__end:
  mov rsp, rbp
  pop rbp
  ret

parse_type_264__stack_frame_size: .word 48

  .loc 7 467 1
  .text
parse_expression_265:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_expression_265__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_expression_265__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 468 12
  # $1.1: @AST_Expression = call(parse_logic_or_expression_266, self.1)
  call parse_logic_or_expression_266
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 468 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_expression_265__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_expression_265__end:
  mov rsp, rbp
  pop rbp
  ret

parse_expression_265__stack_frame_size: .word 16

  .loc 7 473 1
  .text
parse_logic_or_expression_266:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_or_expression_266__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_or_expression_266__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 474 19
  # expression.1: @AST_Expression = call(parse_logic_and_expression_267, self.1)
  mov [rbp-8], rdi
  call parse_logic_and_expression_267
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_or_expression_266__2)
  mov [rbp-16], rax
.LABEL__parse_logic_or_expression_266__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 475 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  .loc 7 475 46
  # $3.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 475 74
  # $4.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r14, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 7 475 12
  # $5.1: Boolean = call(matches_287, self.1, $2.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_287
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_logic_or_expression_266__3, .LABEL__parse_logic_or_expression_266__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_or_expression_266__4
.LABEL__parse_logic_or_expression_266__3:
  .loc 7 476 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 477 22
  # $6.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov rax, [rbp-8]
  mov rbx, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 477 50
  # $7.1: @Matcher = load_struct_member(self.1, required_vertical_bar)
  mov r15, [rax+328]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 477 9
  # $8.1: @Token = call(consume_282, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 478 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 479 61
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  .loc 7 479 131
  # $10.1: @AST_Expression = call(parse_logic_and_expression_267, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_logic_and_expression_267
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 7 479 22
  # expression.3: @AST_Expression = new AST_Logic_Or_Expression(object_type = AST_Logic_Or_Expression, location = $9.1, left_expression = expression.5, right_expression = $10.1)
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Logic_Or_Expression
  mov rbx, AST_Logic_Or_Expression[rip]
  mov [rax], rbx
  #     .location = $9.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.5
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $10.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:r15:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_or_expression_266__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_or_expression_266__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_logic_or_expression_266__4:
  .loc 7 481 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_or_expression_266__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_or_expression_266__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_or_expression_266__stack_frame_size: .word 48

  .loc 7 486 1
  .text
parse_logic_and_expression_267:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_and_expression_267__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_and_expression_267__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 487 19
  # expression.1: @AST_Expression = call(parse_equality_expression_268, self.1)
  mov [rbp-8], rdi
  call parse_equality_expression_268
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_and_expression_267__2)
  mov [rbp-16], rax
.LABEL__parse_logic_and_expression_267__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 488 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx 
  .loc 7 488 46
  # $3.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 488 71
  # $4.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r14, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 7 488 12
  # $5.1: Boolean = call(matches_287, self.1, $2.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_287
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_logic_and_expression_267__3, .LABEL__parse_logic_and_expression_267__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_and_expression_267__4
.LABEL__parse_logic_and_expression_267__3:
  .loc 7 489 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 490 22
  # $6.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 490 47
  # $7.1: @Matcher = load_struct_member(self.1, required_ampersand)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 490 9
  # $8.1: @Token = call(consume_282, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 491 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  .loc 7 492 62
  # $9.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $5.1:[rbp-17] $9.1:rbx 
  .loc 7 492 132
  # $10.1: @AST_Expression = call(parse_equality_expression_268, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_equality_expression_268
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 7 492 22
  # expression.3: @AST_Expression = new AST_Logic_And_Expression(object_type = AST_Logic_And_Expression, location = $9.1, left_expression = expression.5, right_expression = $10.1)
  mov [rbp-33], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Logic_And_Expression
  mov rbx, AST_Logic_And_Expression[rip]
  mov [rax], rbx
  #     .location = $9.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.5
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $10.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:r15:[rbp-16] $5.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_and_expression_267__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_and_expression_267__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_logic_and_expression_267__4:
  .loc 7 494 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_and_expression_267__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_and_expression_267__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_and_expression_267__stack_frame_size: .word 48

  .loc 7 499 1
  .text
parse_equality_expression_268:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_equality_expression_268__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_equality_expression_268__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 500 19
  # expression.1: @AST_Expression = call(parse_comparison_expression_269, self.1)
  mov [rbp-8], rdi
  call parse_comparison_expression_269
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 501 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 501 43
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 501 65
  # $4.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r13, [rbx+168]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 $4.1:r13 
  .loc 7 501 9
  # $6.1: Boolean = call(matches_287, self.1, $2.1, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov rcx, r13
  mov [rbp-16], rax
  call matches_287
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__parse_equality_expression_268__3, .LABEL__parse_equality_expression_268__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_equality_expression_268__2
.LABEL__parse_equality_expression_268__3:
  .loc 7 501 9
  # $6.3: Boolean = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # jump($6.3, .LABEL__parse_equality_expression_268__4, .LABEL__parse_equality_expression_268__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_equality_expression_268__5
.LABEL__parse_equality_expression_268__4:
  .loc 7 502 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  .loc 7 503 26
  # $11.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $11.1:rbx 
  .loc 7 503 13
  # $12.1: Boolean = call(matches_285, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:rax 
  # jump($12.1, .LABEL__parse_equality_expression_268__6, .LABEL__parse_equality_expression_268__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_equality_expression_268__8
.LABEL__parse_equality_expression_268__6:
  .loc 7 504 26
  # $19.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $19.1:rbx 
  .loc 7 504 48
  # $20.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $19.1:rbx $20.1:r15 
  .loc 7 504 13
  # $21.1: @Token = call(consume_282, self.1, $19.1, $20.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 505 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 506 63
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $22.1:rbx 
  .loc 7 506 133
  # $23.1: @AST_Expression = call(parse_comparison_expression_269, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_269
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $22.1:[rbp-26] $23.1:rax 
  .loc 7 506 26
  # expression.5: @AST_Expression = new AST_Equals_Expression(object_type = AST_Equals_Expression, location = $22.1, left_expression = expression.1, right_expression = $23.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Equals_Expression
  mov rbx, AST_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $22.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $23.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_268__5)
  mov [rbp-16], rax
.LABEL__parse_equality_expression_268__5:
  # expression.6: @AST_Expression = phi(expression.5, expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.6:[rbp-16] expression.5:[rbp-16] 
  .loc 7 513 5
  # return(expression.6)
  mov rax, [rbp-16]
  jmp .LABEL__parse_equality_expression_268__end
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
.LABEL__parse_equality_expression_268__8:
  .loc 7 508 26
  # $13.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  mov rax, [rbp-8]
  mov rbx, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $13.1:rbx 
  .loc 7 508 58
  # $14.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $13.1:rbx $14.1:r15 
  .loc 7 508 13
  # $15.1: @Token = call(consume_282, self.1, $13.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call consume_282
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 509 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  .loc 7 510 67
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $16.1:rbx 
  .loc 7 510 137
  # $17.1: @AST_Expression = call(parse_comparison_expression_269, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_269
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] $16.1:[rbp-26] $17.1:rax 
  .loc 7 510 26
  # expression.3: @AST_Expression = new AST_Not_Equals_Expression(object_type = AST_Not_Equals_Expression, location = $16.1, left_expression = expression.1, right_expression = $17.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Not_Equals_Expression
  mov rbx, AST_Not_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $16.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $17.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_268__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_equality_expression_268__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] $12.1:[rbp-18] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.3:[rbp-17] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
.LABEL__parse_equality_expression_268__2:
  .loc 7 501 103
  # $7.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx 
  .loc 7 501 124
  # $8.1: @Matcher = load_struct_member(self.1, required_exclamation_mark)
  mov r15, [rax+176]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 
  .loc 7 501 156
  # $9.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r14, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $7.1:rbx $8.1:r15 $9.1:r14 
  .loc 7 501 90
  # $6.2: Boolean = call(matches_287, self.1, $7.1, $8.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  mov rcx, r14
  call matches_287
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:rax:[rbp-17] 
  # jump(.LABEL__parse_equality_expression_268__3)
  mov [rbp-17], al
  jmp .LABEL__parse_equality_expression_268__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] $6.2:[rbp-17] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_equality_expression_268__end:
  mov rsp, rbp
  pop rbp
  ret

parse_equality_expression_268__stack_frame_size: .word 48

  .loc 7 518 1
  .text
parse_comparison_expression_269:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_comparison_expression_269__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_comparison_expression_269__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 519 19
  # expression.1: @AST_Expression = call(parse_addition_expression_270, self.1)
  mov [rbp-8], rdi
  call parse_addition_expression_270
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 520 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 520 43
  # $3.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov r14, [rbx+232]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 520 9
  # $5.1: Boolean = call(matches_286, self.1, $2.1, $3.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_286
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_comparison_expression_269__3, .LABEL__parse_comparison_expression_269__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_comparison_expression_269__2
.LABEL__parse_comparison_expression_269__3:
  .loc 7 520 9
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_comparison_expression_269__4, .LABEL__parse_comparison_expression_269__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_comparison_expression_269__5
.LABEL__parse_comparison_expression_269__4:
  .loc 7 521 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 522 26
  # $9.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $9.1:rbx 
  .loc 7 522 13
  # $10.1: Boolean = call(matches_285, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__parse_comparison_expression_269__6, .LABEL__parse_comparison_expression_269__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_comparison_expression_269__8
.LABEL__parse_comparison_expression_269__6:
  .loc 7 523 26
  # $23.1: @Matcher = load_struct_member(self.1, required_less_than)
  mov rax, [rbp-8]
  mov rbx, [rax+232]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $23.1:rbx 
  .loc 7 523 13
  # $24.1: @Token = call(consume_281, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  .loc 7 524 30
  # $25.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $25.1:rbx 
  .loc 7 524 17
  # $26.1: Boolean = call(matches_285, self.1, $25.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:rax 
  # jump($26.1, .LABEL__parse_comparison_expression_269__12, .LABEL__parse_comparison_expression_269__14)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_269__14
.LABEL__parse_comparison_expression_269__12:
  .loc 7 525 30
  # $30.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $30.1:rbx 
  .loc 7 525 17
  # $31.1: @Token = call(consume_281, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 526 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 527 80
  # $32.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $32.1:rbx 
  .loc 7 527 150
  # $33.1: @AST_Expression = call(parse_addition_expression_270, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $32.1:[rbp-27] $33.1:rax 
  .loc 7 527 30
  # expression.9: @AST_Expression = new AST_Less_Than_Or_Equals_Expression(object_type = AST_Less_Than_Or_Equals_Expression, location = $32.1, left_expression = expression.1, right_expression = $33.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Less_Than_Or_Equals_Expression
  mov rbx, AST_Less_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $32.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $33.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_269__5)
  mov [rbp-16], rax
.LABEL__parse_comparison_expression_269__5:
  # expression.10: @AST_Expression = phi(expression.5, expression.3, expression.9, expression.7, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] expression.10:[rbp-16] $26.1:[rbp-19] expression.9:[rbp-16] 
  .loc 7 544 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_comparison_expression_269__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
.LABEL__parse_comparison_expression_269__14:
  .loc 7 529 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  .loc 7 530 70
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $27.1:rbx 
  .loc 7 530 140
  # $28.1: @AST_Expression = call(parse_addition_expression_270, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] $27.1:[rbp-27] $28.1:rax 
  .loc 7 530 30
  # expression.7: @AST_Expression = new AST_Less_Than_Expression(object_type = AST_Less_Than_Expression, location = $27.1, left_expression = expression.1, right_expression = $28.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Less_Than_Expression
  mov rbx, AST_Less_Than_Expression[rip]
  mov [rax], rbx
  #     .location = $27.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $28.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_269__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_269__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $26.1:[rbp-19] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
.LABEL__parse_comparison_expression_269__8:
  .loc 7 533 26
  # $11.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov rax, [rbp-8]
  mov rbx, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $11.1:rbx 
  .loc 7 533 13
  # $12.1: @Token = call(consume_281, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  .loc 7 534 30
  # $13.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $13.1:rbx 
  .loc 7 534 17
  # $14.1: Boolean = call(matches_285, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:rax 
  # jump($14.1, .LABEL__parse_comparison_expression_269__9, .LABEL__parse_comparison_expression_269__11)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_269__11
.LABEL__parse_comparison_expression_269__9:
  .loc 7 535 30
  # $18.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $18.1:rbx 
  .loc 7 535 17
  # $19.1: @Token = call(consume_281, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 536 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 537 83
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $20.1:rbx 
  .loc 7 537 153
  # $21.1: @AST_Expression = call(parse_addition_expression_270, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $20.1:[rbp-27] $21.1:rax 
  .loc 7 537 30
  # expression.5: @AST_Expression = new AST_Greater_Than_Or_Equals_Expression(object_type = AST_Greater_Than_Or_Equals_Expression, location = $20.1, left_expression = expression.1, right_expression = $21.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Greater_Than_Or_Equals_Expression
  mov rbx, AST_Greater_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $20.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $21.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_269__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_269__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
.LABEL__parse_comparison_expression_269__11:
  .loc 7 539 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  .loc 7 540 73
  # $15.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $15.1:rbx 
  .loc 7 540 143
  # $16.1: @AST_Expression = call(parse_addition_expression_270, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] $15.1:[rbp-27] $16.1:rax 
  .loc 7 540 30
  # expression.3: @AST_Expression = new AST_Greater_Than_Expression(object_type = AST_Greater_Than_Expression, location = $15.1, left_expression = expression.1, right_expression = $16.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Greater_Than_Expression
  mov rbx, AST_Greater_Than_Expression[rip]
  mov [rax], rbx
  #     .location = $15.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $16.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_269__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_269__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] $14.1:[rbp-19] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_comparison_expression_269__2:
  .loc 7 520 84
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 520 105
  # $7.1: @Matcher = load_struct_member(self.1, required_greater_than)
  mov r15, [rax+192]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 520 71
  # $5.2: Boolean = call(matches_286, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_comparison_expression_269__3)
  mov [rbp-17], al
  jmp .LABEL__parse_comparison_expression_269__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_comparison_expression_269__end:
  mov rsp, rbp
  pop rbp
  ret

parse_comparison_expression_269__stack_frame_size: .word 48

  .loc 7 549 1
  .text
parse_addition_expression_270:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_addition_expression_270__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_addition_expression_270__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 550 19
  # expression.1: @AST_Expression = call(parse_multiplication_expression_271, self.1)
  mov [rbp-8], rdi
  call parse_multiplication_expression_271
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_addition_expression_270__2)
  mov [rbp-16], rax
.LABEL__parse_addition_expression_270__2:
  # expression.8: @AST_Expression = phi(expression.1, expression.5, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] 
  .loc 7 551 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx 
  .loc 7 551 46
  # $3.1: @Matcher = load_struct_member(self.1, required_plus)
  mov r15, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 551 12
  # $5.1: Boolean = call(matches_286, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_addition_expression_270__6, .LABEL__parse_addition_expression_270__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_addition_expression_270__5
.LABEL__parse_addition_expression_270__6:
  .loc 7 551 12
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_addition_expression_270__3, .LABEL__parse_addition_expression_270__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_addition_expression_270__4
.LABEL__parse_addition_expression_270__3:
  .loc 7 552 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 554 26
  # $9.1: @Matcher = load_struct_member(self.1, required_plus)
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $9.1:rbx $5.3:[rbp-17] 
  .loc 7 554 13
  # $10.1: Boolean = call(matches_285, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:rax $5.3:[rbp-17] 
  # jump($10.1, .LABEL__parse_addition_expression_270__7, .LABEL__parse_addition_expression_270__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_addition_expression_270__9
.LABEL__parse_addition_expression_270__7:
  .loc 7 555 26
  # $16.1: @Matcher = load_struct_member(self.1, required_plus)
  mov rax, [rbp-8]
  mov rbx, [rax+288]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $16.1:rbx 
  .loc 7 555 13
  # $17.1: @Token = call(consume_281, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 556 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 557 60
  # $18.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:rbx 
  .loc 7 557 130
  # $19.1: @AST_Expression = call(parse_multiplication_expression_271, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_271
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:[rbp-26] $19.1:rax 
  .loc 7 557 26
  # expression.5: @AST_Expression = new AST_Add_Expression(object_type = AST_Add_Expression, location = $18.1, left_expression = expression.8, right_expression = $19.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Add_Expression
  mov rbx, AST_Add_Expression[rip]
  mov [rax], rbx
  #     .location = $18.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.8
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $19.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:r15:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_270__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_270__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
.LABEL__parse_addition_expression_270__9:
  .loc 7 559 26
  # $11.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $11.1:rbx 
  .loc 7 559 13
  # $12.1: @Token = call(consume_281, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 560 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 561 66
  # $13.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:rbx 
  .loc 7 561 136
  # $14.1: @AST_Expression = call(parse_multiplication_expression_271, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_271
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:rax 
  .loc 7 561 26
  # expression.3: @AST_Expression = new AST_Substract_Expression(object_type = AST_Substract_Expression, location = $13.1, left_expression = expression.8, right_expression = $14.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Substract_Expression
  mov rbx, AST_Substract_Expression[rip]
  mov [rax], rbx
  #     .location = $13.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.8
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $14.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:r15:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_270__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_270__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
.LABEL__parse_addition_expression_270__4:
  .loc 7 564 5
  # return(expression.8)
  mov rax, [rbp-16]
  jmp .LABEL__parse_addition_expression_270__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_addition_expression_270__5:
  .loc 7 551 82
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 551 103
  # $7.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov r15, [rax+200]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 551 69
  # $5.2: Boolean = call(matches_286, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_addition_expression_270__6)
  mov [rbp-17], al
  jmp .LABEL__parse_addition_expression_270__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_addition_expression_270__end:
  mov rsp, rbp
  pop rbp
  ret

parse_addition_expression_270__stack_frame_size: .word 48

  .loc 7 569 1
  .text
parse_multiplication_expression_271:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_multiplication_expression_271__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_multiplication_expression_271__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 570 19
  # expression.1: @AST_Expression = call(parse_unary_expression_272, self.1)
  mov [rbp-8], rdi
  call parse_unary_expression_272
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_multiplication_expression_271__2)
  mov [rbp-16], rax
.LABEL__parse_multiplication_expression_271__2:
  # expression.10: @AST_Expression = phi(expression.1, expression.3, expression.7, expression.5)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] 
  .loc 7 571 25
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx 
  .loc 7 571 46
  # $3.1: @Matcher = load_struct_member(self.1, required_asterisk)
  mov r15, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 7 571 12
  # $5.1: Boolean = call(matches_286, self.1, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_multiplication_expression_271__6, .LABEL__parse_multiplication_expression_271__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_multiplication_expression_271__5
.LABEL__parse_multiplication_expression_271__6:
  .loc 7 571 12
  # $5.3: Boolean = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # jump($5.3, .LABEL__parse_multiplication_expression_271__3, .LABEL__parse_multiplication_expression_271__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_multiplication_expression_271__4
.LABEL__parse_multiplication_expression_271__3:
  .loc 7 572 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  .loc 7 573 26
  # $9.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $9.1:rbx $5.3:[rbp-17] 
  .loc 7 573 13
  # $10.1: Boolean = call(matches_285, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:rax $5.3:[rbp-17] 
  # jump($10.1, .LABEL__parse_multiplication_expression_271__7, .LABEL__parse_multiplication_expression_271__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_multiplication_expression_271__9
.LABEL__parse_multiplication_expression_271__7:
  .loc 7 574 26
  # $16.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $16.1:rbx 
  .loc 7 574 13
  # $17.1: @Token = call(consume_281, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 575 30
  # $18.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $18.1:rbx 
  .loc 7 575 17
  # $19.1: Boolean = call(matches_285, self.1, $18.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:rax 
  # jump($19.1, .LABEL__parse_multiplication_expression_271__10, .LABEL__parse_multiplication_expression_271__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_multiplication_expression_271__12
.LABEL__parse_multiplication_expression_271__10:
  .loc 7 576 30
  # $23.1: @Matcher = load_struct_member(self.1, required_slash)
  mov rax, [rbp-8]
  mov rbx, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $23.1:rbx 
  .loc 7 576 17
  # $24.1: @Token = call(consume_281, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 577 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 578 67
  # $25.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $25.1:rbx 
  .loc 7 578 137
  # $26.1: @AST_Expression = call(parse_unary_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $25.1:[rbp-27] $26.1:rax 
  .loc 7 578 30
  # expression.7: @AST_Expression = new AST_Modulo_Expression(object_type = AST_Modulo_Expression, location = $25.1, left_expression = expression.10, right_expression = $26.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Modulo_Expression
  mov rbx, AST_Modulo_Expression[rip]
  mov [rax], rbx
  #     .location = $25.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $26.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_271__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_271__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
.LABEL__parse_multiplication_expression_271__12:
  .loc 7 580 17
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  .loc 7 581 67
  # $20.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $20.1:rbx 
  .loc 7 581 137
  # $21.1: @AST_Expression = call(parse_unary_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] $20.1:[rbp-27] $21.1:rax 
  .loc 7 581 30
  # expression.5: @AST_Expression = new AST_Divide_Expression(object_type = AST_Divide_Expression, location = $20.1, left_expression = expression.10, right_expression = $21.1)
  mov [rbp-35], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Divide_Expression
  mov rbx, AST_Divide_Expression[rip]
  mov [rax], rbx
  #     .location = $20.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $21.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_271__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_271__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $19.1:[rbp-19] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
.LABEL__parse_multiplication_expression_271__9:
  .loc 7 584 26
  # $11.1: @Matcher = load_struct_member(self.1, required_asterisk)
  mov rax, [rbp-8]
  mov rbx, [rax+56]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $11.1:rbx 
  .loc 7 584 13
  # $12.1: @Token = call(consume_281, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 585 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  .loc 7 586 65
  # $13.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:rbx 
  .loc 7 586 135
  # $14.1: @AST_Expression = call(parse_unary_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_unary_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] $13.1:[rbp-26] $14.1:rax 
  .loc 7 586 26
  # expression.3: @AST_Expression = new AST_Multiply_Expression(object_type = AST_Multiply_Expression, location = $13.1, left_expression = expression.10, right_expression = $14.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Multiply_Expression
  mov rbx, AST_Multiply_Expression[rip]
  mov [rax], rbx
  #     .location = $13.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .right_expression = $14.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_271__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_271__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $10.1:[rbp-18] $5.3:[rbp-17] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
.LABEL__parse_multiplication_expression_271__4:
  .loc 7 589 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_multiplication_expression_271__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.3:[rbp-17] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_multiplication_expression_271__5:
  .loc 7 571 86
  # $6.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx 
  .loc 7 571 107
  # $7.1: @Matcher = load_struct_member(self.1, required_slash)
  mov r15, [rax+304]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $6.1:rbx $7.1:r15 
  .loc 7 571 73
  # $5.2: Boolean = call(matches_286, self.1, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__parse_multiplication_expression_271__6)
  mov [rbp-17], al
  jmp .LABEL__parse_multiplication_expression_271__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_multiplication_expression_271__end:
  mov rsp, rbp
  pop rbp
  ret

parse_multiplication_expression_271__stack_frame_size: .word 48

  .loc 7 594 1
  .text
parse_unary_expression_272:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_unary_expression_272__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_unary_expression_272__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 595 22
  # $1.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rdi+200]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 595 9
  # $2.1: Boolean = call(matches_285, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_285
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_unary_expression_272__2, .LABEL__parse_unary_expression_272__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_unary_expression_272__3
.LABEL__parse_unary_expression_272__2:
  .loc 7 596 34
  # $3.1: @Matcher = load_struct_member(self.1, required_hyphen)
  mov rax, [rbp-8]
  mov rbx, [rax+200]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 596 21
  # $4.1: @Token = call(consume_281, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $4.1:rax 
  .loc 7 596 21
  # location.1: @Source_Location = load_struct_member($4.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:rbx 
  .loc 7 597 9
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-17], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:[rbp-17] 
  .loc 7 598 76
  # $6.1: @AST_Expression = call(parse_cast_expression_273, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_273
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] location.1:[rbp-17] $6.1:rax 
  .loc 7 598 16
  # $7.1: @AST_Negate_Expression = new AST_Negate_Expression(object_type = AST_Negate_Expression, location = location.1, expression = $6.1)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  #     .object_type = AST_Negate_Expression
  mov rbx, AST_Negate_Expression[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  #     .expression = $6.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $6.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 598 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_272__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_unary_expression_272__3:
  .loc 7 600 12
  # $8.1: @AST_Expression = call(parse_cast_expression_273, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_273
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $8.1:rax 
  .loc 7 600 5
  # return($8.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_272__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_unary_expression_272__end:
  mov rsp, rbp
  pop rbp
  ret

parse_unary_expression_272__stack_frame_size: .word 32

  .loc 7 605 1
  .text
parse_cast_expression_273:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_cast_expression_273__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_cast_expression_273__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 606 19
  # expression.1: @AST_Expression = call(parse_access_expression_274, self.1)
  mov [rbp-8], rdi
  call parse_access_expression_274
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 607 22
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 
  .loc 7 607 43
  # $3.1: @Matcher = load_struct_member(self.1, required_as)
  mov r14, [rbx+48]
  # [live values]: self.1:rbx:[rbp-8] expression.1:rax $2.1:r15 $3.1:r14 
  .loc 7 607 9
  # $4.1: Boolean = call(matches_286, self.1, $2.1, $3.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-16], rax
  call matches_286
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__parse_cast_expression_273__2, .LABEL__parse_cast_expression_273__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_cast_expression_273__3
.LABEL__parse_cast_expression_273__2:
  .loc 7 608 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 609 22
  # $5.1: @Matcher = load_struct_member(self.1, required_as)
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 7 609 9
  # $6.1: @Token = call(consume_281, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 610 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  .loc 7 611 17
  # type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] type.1:rax 
  .loc 7 612 51
  # $8.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $4.1:[rbp-17] type.1:rax $8.1:r15 
  .loc 7 612 16
  # $9.1: @AST_Cast_Expression = new AST_Cast_Expression(object_type = AST_Cast_Expression, location = $8.1, value_expression = expression.1, type = type.1)
  mov [rbp-25], rax
  mov [rbp-33], r15
  mov rdi, 32
  call malloc
  #     .object_type = AST_Cast_Expression
  mov rbx, AST_Cast_Expression[rip]
  mov [rax], rbx
  #     .location = $8.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  #     .value_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .type = type.1
  mov r14, [rbp-25]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $8.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $4.1:[rbp-17] $9.1:rax 
  .loc 7 612 9
  # return($9.1)
  mov [rbp-25], rax
  jmp .LABEL__parse_cast_expression_273__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__parse_cast_expression_273__3:
  .loc 7 614 5
  # return(expression.1)
  mov rax, [rbp-16]
  jmp .LABEL__parse_cast_expression_273__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_cast_expression_273__end:
  mov rsp, rbp
  pop rbp
  ret

parse_cast_expression_273__stack_frame_size: .word 48

  .loc 7 619 1
  .text
parse_access_expression_274:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_access_expression_274__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_access_expression_274__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 620 19
  # expression.1: @AST_Expression = call(parse_primary_expression_277, self.1)
  mov [rbp-8], rdi
  call parse_primary_expression_277
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 621 9
  # $2.1: Boolean = expression.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_access_expression_274__4, .LABEL__parse_access_expression_274__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__parse_access_expression_274__3
.LABEL__parse_access_expression_274__4:
  # expression.2: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] 
  .loc 7 623 13
  # old_expression.1: @AST_Expression = expression.2
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax 
  .loc 7 624 30
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax $3.1:r15 
  .loc 7 624 51
  # $4.1: @Matcher = load_struct_member(self.1, required_dot)
  mov r14, [rbx+136]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax $3.1:r15 $4.1:r14 
  .loc 7 624 17
  # $5.1: Boolean = call(matches_286, self.1, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-25], rax
  call matches_286
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__parse_access_expression_274__6, .LABEL__parse_access_expression_274__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_access_expression_274__7
.LABEL__parse_access_expression_274__6:
  .loc 7 625 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 626 30
  # $6.1: @Matcher = load_struct_member(self.1, required_dot)
  mov rax, [rbp-8]
  mov rbx, [rax+136]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 7 626 17
  # $7.1: @Token = call(consume_281, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 627 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  .loc 7 628 74
  # $8.1: @Source_Location = load_struct_member(expression.2, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rax:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:rbx 
  .loc 7 628 154
  # $9.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov r15, [rbp-8]
  mov r14, [r15+208]
  # [live values]: self.1:r15:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rax:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:rbx $9.1:r14 
  .loc 7 628 141
  # $11.1: @Identifier_Token = call(consume_281, self.1, $9.1)
  mov rdi, r15
  mov rsi, r14
  mov [rbp-34], rbx
  call consume_281
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] $8.1:[rbp-34] $11.1:rax 
  .loc 7 628 30
  # expression.4: @AST_Expression = new AST_Member_Access_Expression(object_type = AST_Member_Access_Expression, location = $8.1, object_expression = expression.2, member_name = $11.1)
  mov [rbp-42], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Member_Access_Expression
  mov rbx, AST_Member_Access_Expression[rip]
  mov [rax], rbx
  #     .location = $8.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .object_expression = expression.2
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .member_name = $11.1
  mov r14, [rbp-42]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $11.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:r15:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_274__7)
  mov [rbp-16], rax
.LABEL__parse_access_expression_274__7:
  # expression.11: @AST_Expression = phi(expression.2, expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  .loc 7 630 30
  # $13.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $13.1:rbx 
  .loc 7 630 51
  # $14.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r15, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $13.1:rbx $14.1:r15 
  .loc 7 630 17
  # $15.1: Boolean = call(matches_286, self.1, $13.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:rax 
  # jump($15.1, .LABEL__parse_access_expression_274__8, .LABEL__parse_access_expression_274__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_access_expression_274__9
.LABEL__parse_access_expression_274__8:
  .loc 7 631 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 632 30
  # $16.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] $16.1:rbx 
  .loc 7 632 17
  # $17.1: @Token = call(consume_281, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 633 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  .loc 7 634 35
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax 
  .loc 7 635 34
  # $19.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax $19.1:r15 
  .loc 7 635 55
  # $20.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r14, [rbx+96]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:rax $19.1:r15 $20.1:r14 
  .loc 7 635 21
  # $21.1: Boolean = call(matches_286, self.1, $19.1, $20.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-35], rax
  call matches_286
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $21.1:rax 
  .loc 7 635 21
  # $22.1: Boolean = $21.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:rbx 
  # jump($22.1, .LABEL__parse_access_expression_274__10, .LABEL__parse_access_expression_274__11)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__parse_access_expression_274__11
.LABEL__parse_access_expression_274__10:
  .loc 7 636 21
  # call(parse_call_arguments_275, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-35]
  call parse_call_arguments_275
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # jump(.LABEL__parse_access_expression_274__11)
.LABEL__parse_access_expression_274__11:
  .loc 7 638 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  .loc 7 639 30
  # $23.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $23.1:rbx 
  .loc 7 639 17
  # $24.1: @Token = call(consume_281, self.1, $23.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  .loc 7 640 65
  # $25.1: @Source_Location = load_struct_member(expression.11, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:rax:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] $25.1:rbx 
  .loc 7 640 30
  # expression.6: @AST_Expression = new AST_Call_Expression(object_type = AST_Call_Expression, location = $25.1, callee_expression = expression.11, arguments = call_arguments.1)
  mov [rbp-44], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Call_Expression
  mov rbx, AST_Call_Expression[rip]
  mov [rax], rbx
  #     .location = $25.1
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  #     .callee_expression = expression.11
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .arguments = call_arguments.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:r15:[rbp-16] $15.1:[rbp-27] call_arguments.1:r14:[rbp-35] $22.1:[rbp-36] expression.6:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_274__9)
  mov [rbp-16], rax
.LABEL__parse_access_expression_274__9:
  # expression.12: @AST_Expression = phi(expression.11, expression.6)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  .loc 7 642 30
  # $27.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $27.1:rbx expression.6:[rbp-16] 
  .loc 7 642 51
  # $28.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov r15, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $27.1:rbx $28.1:r15 expression.6:[rbp-16] 
  .loc 7 642 17
  # $29.1: Boolean = call(matches_286, self.1, $27.1, $28.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:rax expression.6:[rbp-16] 
  # jump($29.1, .LABEL__parse_access_expression_274__12, .LABEL__parse_access_expression_274__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__parse_access_expression_274__13
.LABEL__parse_access_expression_274__12:
  .loc 7 643 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 644 30
  # $30.1: @Matcher = load_struct_member(self.1, required_open_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+272]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] $30.1:rbx 
  .loc 7 644 17
  # $31.1: @Token = call(consume_281, self.1, $30.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 645 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 646 37
  # index_expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:rax 
  .loc 7 647 17
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-45], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 648 30
  # $33.1: @Matcher = load_struct_member(self.1, required_close_bracket)
  mov rax, [rbp-8]
  mov rbx, [rax+88]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $33.1:rbx 
  .loc 7 648 17
  # $34.1: @Token = call(consume_281, self.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 649 73
  # $35.1: @Source_Location = load_struct_member(expression.12, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:rax:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $35.1:rbx 
  .loc 7 649 30
  # expression.8: @AST_Expression = new AST_Array_Access_Expression(object_type = AST_Array_Access_Expression, location = $35.1, array_expression = expression.12, index_expression = index_expression.1)
  mov [rbp-53], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Array_Access_Expression
  mov rbx, AST_Array_Access_Expression[rip]
  mov [rax], rbx
  #     .location = $35.1
  mov rbx, [rbp-53]
  mov QWORD PTR [rax+8], rbx
  #     .array_expression = expression.12
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .index_expression = index_expression.1
  mov r14, [rbp-45]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $35.1
  # [discarded value]: index_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:r15:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_274__13)
  mov [rbp-16], rax
.LABEL__parse_access_expression_274__13:
  # expression.9: @AST_Expression = phi(expression.12, expression.8)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  .loc 7 651 17
  # $37.1: Boolean = expression.9 == old_expression.1
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-25]
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:rax:[rbp-16] $37.1:rbx 
  # jump($37.1, .LABEL__parse_access_expression_274__3, .LABEL__parse_access_expression_274__4)
  test bl, bl
  mov [rbp-38], bl
  jz .LABEL__parse_access_expression_274__4
.LABEL__parse_access_expression_274__3:
  # expression.10: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.10:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $37.1:[rbp-38] 
  .loc 7 656 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_access_expression_274__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $37.1:[rbp-38] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] $29.1:[rbp-37] expression.6:[rbp-16] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [discarded value]: expression.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] expression.6:[rbp-16] 
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] $22.1:[rbp-36] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] call_arguments.1:[rbp-35] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [discarded value]: expression.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] expression.4:[rbp-16] 
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] 
  # [discarded value]: old_expression.1
  # [discarded value]: expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_access_expression_274__end:
  mov rsp, rbp
  pop rbp
  ret

parse_access_expression_274__stack_frame_size: .word 64

  .loc 7 662 1
  .text
parse_call_arguments_275:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_arguments_275__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_arguments_275__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 7 663 9
  # $1.1: Boolean = call(matches_end_of_line_284, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call matches_end_of_line_284
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_call_arguments_275__2, .LABEL__parse_call_arguments_275__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_call_arguments_275__4
.LABEL__parse_call_arguments_275__2:
  .loc 7 664 9
  # call(consume_end_of_line_278, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_278
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  .loc 7 665 34
  # $9.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:rbx 
  .loc 7 665 34
  # $10.1: Int = $9.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $10.1:r15 
  .loc 7 665 9
  # store_struct_member(self.1, current_alignment, $10.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_275__8)
.LABEL__parse_call_arguments_275__8:
  .loc 7 666 29
  # $11.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $11.1:rbx 
  .loc 7 666 50
  # $12.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $11.1:rbx $12.1:r15 
  .loc 7 666 16
  # $13.1: Boolean = call(matches_286, self.1, $11.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $13.1:rax 
  .loc 7 666 16
  # $14.1: Boolean = $13.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:rbx 
  # jump($14.1, .LABEL__parse_call_arguments_275__9, .LABEL__parse_call_arguments_275__10)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__parse_call_arguments_275__10
.LABEL__parse_call_arguments_275__9:
  .loc 7 667 32
  # $15.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $15.1:rbx 
  .loc 7 667 32
  # $16.1: Int = $15.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $16.1:r15 
  .loc 7 667 13
  # call(consume_space_280, self.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 668 35
  # $17.1: @AST_Call_Argument = call(parse_call_argument_276, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_276
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $17.1:rax 
  .loc 7 668 13
  # call(append_318, call_arguments.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_318
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 669 13
  # call(consume_end_of_line_278, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_278
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_275__8)
  jmp .LABEL__parse_call_arguments_275__8
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
.LABEL__parse_call_arguments_275__10:
  .loc 7 671 34
  # $18.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $18.1:rbx 
  .loc 7 671 34
  # $19.1: Int = $18.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $19.1:r15 
  .loc 7 671 9
  # store_struct_member(self.1, current_alignment, $19.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  .loc 7 672 28
  # $20.1: Int = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $20.1:rbx 
  .loc 7 672 28
  # $21.1: Int = $20.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] $21.1:r15 
  .loc 7 672 9
  # call(consume_space_280, self.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_275__3)
.LABEL__parse_call_arguments_275__3:
  # return()
  jmp .LABEL__parse_call_arguments_275__end
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $14.1:[rbp-18] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__parse_call_arguments_275__4:
  .loc 7 674 31
  # $2.1: @AST_Call_Argument = call(parse_call_argument_276, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_276
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 674 9
  # call(append_318, call_arguments.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_318
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_275__5)
.LABEL__parse_call_arguments_275__5:
  .loc 7 675 29
  # $3.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:rbx 
  .loc 7 675 50
  # $4.1: @Matcher = load_struct_member(self.1, required_comma)
  mov r15, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:rbx $4.1:r15 
  .loc 7 675 16
  # $5.1: Boolean = call(matches_286, self.1, $3.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:rax 
  # jump($5.1, .LABEL__parse_call_arguments_275__6, .LABEL__parse_call_arguments_275__3)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_call_arguments_275__3
.LABEL__parse_call_arguments_275__6:
  .loc 7 676 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 677 26
  # $6.1: @Matcher = load_struct_member(self.1, required_comma)
  mov rax, [rbp-16]
  mov rbx, [rax+120]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] $6.1:rbx 
  .loc 7 677 13
  # $7.1: @Token = call(consume_281, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 678 13
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  .loc 7 679 35
  # $8.1: @AST_Call_Argument = call(parse_call_argument_276, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_276
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] $8.1:rax 
  .loc 7 679 13
  # call(append_318, call_arguments.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_318
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_275__5)
  jmp .LABEL__parse_call_arguments_275__5
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [discarded value]: call_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_arguments_275__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_arguments_275__stack_frame_size: .word 32

  .loc 7 686 1
  .text
parse_call_argument_276:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_argument_276__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_argument_276__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 687 22
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 687 48
  # $2.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 687 69
  # $3.1: @Matcher = load_struct_member(self.1, required_equals)
  mov r15, [rdi+168]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 687 9
  # $4.1: Boolean = call(matches_287, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_287
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__parse_call_argument_276__2, .LABEL__parse_call_argument_276__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_call_argument_276__3
.LABEL__parse_call_argument_276__2:
  .loc 7 688 30
  # $5.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx 
  .loc 7 688 17
  # name.1: @Identifier_Token = call(consume_281, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:rax 
  .loc 7 689 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-17], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 690 22
  # $8.1: @Matcher = load_struct_member(self.1, required_equals)
  mov rax, [rbp-8]
  mov rbx, [rax+168]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] $8.1:rbx 
  .loc 7 690 9
  # $9.1: @Token = call(consume_281, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 691 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 692 18
  # value.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] name.1:[rbp-17] value.1:rax 
  .loc 7 693 16
  # $11.1: @AST_Call_Argument = new AST_Call_Argument(name = name.1, value_expression = value.1)
  mov [rbp-25], rax
  mov rdi, 16
  call malloc
  #     .name = name.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax], rbx
  #     .value_expression = value.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value.1
  # [discarded value]: name.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $11.1:rax 
  .loc 7 693 9
  # return($11.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_276__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
.LABEL__parse_call_argument_276__3:
  .loc 7 695 14
  # value.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] value.1:rax 
  .loc 7 696 12
  # $13.1: @AST_Call_Argument = new AST_Call_Argument(name = null, value_expression = value.1)
  mov [rbp-17], rax
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value_expression = value.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $13.1:rax 
  .loc 7 696 5
  # return($13.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_276__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_argument_276__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_argument_276__stack_frame_size: .word 32

  .loc 7 710 1
  .text
parse_primary_expression_277:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_primary_expression_277__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_primary_expression_277__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 711 22
  # $1.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rdi+208]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 711 9
  # $2.1: Boolean = call(matches_285, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call matches_285
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__parse_primary_expression_277__2, .LABEL__parse_primary_expression_277__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_primary_expression_277__3
.LABEL__parse_primary_expression_277__2:
  .loc 7 712 31
  # $3.1: @Matcher = load_struct_member(self.1, required_identifier)
  mov rax, [rbp-8]
  mov rbx, [rax+208]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 7 712 18
  # token.1: @Identifier_Token = call(consume_281, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax 
  .loc 7 713 55
  # $6.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] token.1:rax $6.1:rbx 
  .loc 7 713 16
  # $7.1: @AST_Variable_Expression = new AST_Variable_Expression(object_type = AST_Variable_Expression, location = $6.1, name = token.1)
  mov [rbp-17], rax
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Variable_Expression
  mov rbx, AST_Variable_Expression[rip]
  mov [rax], rbx
  #     .location = $6.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .name = token.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $6.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $7.1:rax 
  .loc 7 713 9
  # return($7.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_primary_expression_277__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__parse_primary_expression_277__3:
  .loc 7 715 22
  # $8.1: @Matcher = load_struct_member(self.1, required_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $8.1:rbx 
  .loc 7 715 9
  # $9.1: Boolean = call(matches_285, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:rax 
  # jump($9.1, .LABEL__parse_primary_expression_277__5, .LABEL__parse_primary_expression_277__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_primary_expression_277__6
.LABEL__parse_primary_expression_277__5:
  .loc 7 716 31
  # $10.1: @Matcher = load_struct_member(self.1, required_literal)
  mov rax, [rbp-8]
  mov rbx, [rax+240]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $10.1:rbx 
  .loc 7 716 18
  # token.1: @Literal_Token = call(consume_281, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax 
  .loc 7 717 54
  # $13.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] token.1:rax $13.1:rbx 
  .loc 7 717 16
  # $14.1: @AST_Literal_Expression = new AST_Literal_Expression(object_type = AST_Literal_Expression, location = $13.1, literal = token.1)
  mov [rbp-18], rax
  mov [rbp-26], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Literal_Expression
  mov rbx, AST_Literal_Expression[rip]
  mov [rax], rbx
  #     .location = $13.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .literal = token.1
  mov r15, [rbp-18]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $13.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $14.1:rax 
  .loc 7 717 9
  # return($14.1)
  mov [rbp-18], rax
  jmp .LABEL__parse_primary_expression_277__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
.LABEL__parse_primary_expression_277__6:
  .loc 7 719 22
  # $15.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $15.1:rbx 
  .loc 7 719 9
  # $16.1: Boolean = call(matches_285, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:rax 
  # jump($16.1, .LABEL__parse_primary_expression_277__8, .LABEL__parse_primary_expression_277__9)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_primary_expression_277__9
.LABEL__parse_primary_expression_277__8:
  .loc 7 720 34
  # $17.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $17.1:rbx 
  .loc 7 720 21
  # $18.1: @Token = call(consume_281, self.1, $17.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $18.1:rax 
  .loc 7 720 21
  # location.1: @Source_Location = load_struct_member($18.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:rbx 
  .loc 7 721 9
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-19], rbx
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] 
  .loc 7 722 23
  # expression.1: @AST_Expression = call(parse_expression_265, self.1)
  mov rdi, [rbp-8]
  call parse_expression_265
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:rax 
  .loc 7 723 9
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-27], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] 
  .loc 7 724 22
  # $21.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] $21.1:rbx 
  .loc 7 724 9
  # $22.1: @Token = call(consume_281, self.1, $21.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] location.1:[rbp-19] expression.1:[rbp-27] 
  .loc 7 725 16
  # $23.1: @AST_Atomic_Expression = new AST_Atomic_Expression(object_type = AST_Atomic_Expression, location = location.1, expression = expression.1)
  mov rdi, 24
  call malloc
  #     .object_type = AST_Atomic_Expression
  mov rbx, AST_Atomic_Expression[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-19]
  mov QWORD PTR [rax+8], rbx
  #     .expression = expression.1
  mov r15, [rbp-27]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: expression.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $23.1:rax 
  .loc 7 725 9
  # return($23.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_primary_expression_277__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] 
.LABEL__parse_primary_expression_277__9:
  .loc 7 727 22
  # $24.1: @Matcher = load_struct_member(self.1, required_new)
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $24.1:rbx 
  .loc 7 727 9
  # $25.1: Boolean = call(matches_285, self.1, $24.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:rax 
  # jump($25.1, .LABEL__parse_primary_expression_277__11, .LABEL__parse_primary_expression_277__12)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_primary_expression_277__12
.LABEL__parse_primary_expression_277__11:
  .loc 7 728 31
  # $26.1: @Matcher = load_struct_member(self.1, required_new)
  mov rax, [rbp-8]
  mov rbx, [rax+256]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] $26.1:rbx 
  .loc 7 728 18
  # token.1: @Token = call(consume_281, self.1, $26.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:rax 
  .loc 7 729 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-20], rax
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] 
  .loc 7 730 17
  # type.1: @AST_Type = call(parse_type_264, self.1)
  mov rdi, [rbp-8]
  call parse_type_264
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:rax 
  .loc 7 731 27
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-28], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax 
  .loc 7 732 26
  # $30.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax $30.1:r15 
  .loc 7 732 47
  # $31.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov r14, [rbx+280]
  # [live values]: self.1:rbx:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:rax $30.1:r15 $31.1:r14 
  .loc 7 732 13
  # $32.1: Boolean = call(matches_286, self.1, $30.1, $31.1)
  mov rdi, rbx
  mov rsi, r15
  mov rdx, r14
  mov [rbp-36], rax
  call matches_286
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:rax 
  # jump($32.1, .LABEL__parse_primary_expression_277__13, .LABEL__parse_primary_expression_277__14)
  test al, al
  mov [rbp-37], al
  jz .LABEL__parse_primary_expression_277__14
.LABEL__parse_primary_expression_277__13:
  .loc 7 733 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  .loc 7 734 26
  # $33.1: @Matcher = load_struct_member(self.1, required_open_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+280]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $33.1:rbx 
  .loc 7 734 13
  # $34.1: @Token = call(consume_281, self.1, $33.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  .loc 7 735 30
  # $35.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $35.1:rbx 
  .loc 7 735 51
  # $36.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov r15, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $35.1:rbx $36.1:r15 
  .loc 7 735 17
  # $37.1: Boolean = call(matches_286, self.1, $35.1, $36.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $37.1:rax 
  .loc 7 735 17
  # $38.1: Boolean = $37.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:rbx 
  # jump($38.1, .LABEL__parse_primary_expression_277__15, .LABEL__parse_primary_expression_277__16)
  test bl, bl
  mov [rbp-38], bl
  jz .LABEL__parse_primary_expression_277__16
.LABEL__parse_primary_expression_277__15:
  .loc 7 736 17
  # call(parse_call_arguments_275, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-36]
  call parse_call_arguments_275
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # jump(.LABEL__parse_primary_expression_277__16)
.LABEL__parse_primary_expression_277__16:
  .loc 7 738 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  .loc 7 739 26
  # $39.1: @Matcher = load_struct_member(self.1, required_close_paren)
  mov rax, [rbp-8]
  mov rbx, [rax+96]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $39.1:rbx 
  .loc 7 739 13
  # $40.1: @Token = call(consume_281, self.1, $39.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # jump(.LABEL__parse_primary_expression_277__14)
.LABEL__parse_primary_expression_277__14:
  .loc 7 741 50
  # $41.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-20]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:rax:[rbp-20] type.1:[rbp-28] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $41.1:rbx 
  .loc 7 741 16
  # $42.1: @AST_New_Expression = new AST_New_Expression(object_type = AST_New_Expression, location = $41.1, type = type.1, init_arguments = call_arguments.1)
  mov [rbp-46], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_New_Expression
  mov rbx, AST_New_Expression[rip]
  mov [rax], rbx
  #     .location = $41.1
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+8], rbx
  #     .type = type.1
  mov r15, [rbp-28]
  mov QWORD PTR [rax+16], r15
  #     .init_arguments = call_arguments.1
  mov r14, [rbp-36]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: $41.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:r14:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] $42.1:rax 
  .loc 7 741 9
  # return($42.1)
  mov [rbp-46], rax
  jmp .LABEL__parse_primary_expression_277__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:[rbp-36] $32.1:[rbp-37] $38.1:[rbp-38] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:[rbp-36] $32.1:[rbp-37] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] token.1:[rbp-20] call_arguments.1:[rbp-36] 
  # [discarded value]: call_arguments.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] 
.LABEL__parse_primary_expression_277__12:
  .loc 7 743 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_primary_expression_277__end
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] $25.1:[rbp-12] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] $16.1:[rbp-11] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $9.1:[rbp-10] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_primary_expression_277__end:
  mov rsp, rbp
  pop rbp
  ret

parse_primary_expression_277__stack_frame_size: .word 48

  .loc 7 746 1
  .text
consume_end_of_line_278:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_end_of_line_278__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_end_of_line_278__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 747 22
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 747 43
  # $2.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rbx, [rdi+128]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 747 9
  # $3.1: Boolean = call(matches_286, self.1, $1.1, $2.1)
  mov rsi, rax
  mov rdx, rbx
  mov [rbp-8], rdi
  call matches_286
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__consume_end_of_line_278__2, .LABEL__consume_end_of_line_278__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_end_of_line_278__4
.LABEL__consume_end_of_line_278__2:
  .loc 7 748 9
  # call(consume_space_280, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_280
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  .loc 7 749 22
  # $4.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $3.1:[rbp-9] $4.1:rbx 
  .loc 7 749 9
  # $5.1: @Token = call(consume_281, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_278__3)
.LABEL__consume_end_of_line_278__3:
  .loc 7 753 22
  # $6.1: @Matcher = load_struct_member(self.1, required_end_of_file)
  mov rax, [rbp-8]
  mov rbx, [rax+152]
  # [live values]: self.1:rax:[rbp-8] $3.1:[rbp-9] $6.1:rbx 
  .loc 7 753 9
  # $7.1: Boolean = call(matches_285, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call matches_285
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $7.1:rax 
  .loc 7 753 9
  # $8.1: Boolean = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $8.1:rbx 
  # jump($8.1, .LABEL__consume_end_of_line_278__5, .LABEL__consume_end_of_line_278__6)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__consume_end_of_line_278__6
.LABEL__consume_end_of_line_278__5:
  .loc 7 754 22
  # $9.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $3.1:[rbp-9] $8.1:[rbp-10] $9.1:rbx 
  .loc 7 754 9
  # $10.1: @Token = call(consume_281, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $8.1:[rbp-10] 
  # jump(.LABEL__consume_end_of_line_278__6)
.LABEL__consume_end_of_line_278__6:
  # return()
  jmp .LABEL__consume_end_of_line_278__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $8.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $8.1:[rbp-10] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__consume_end_of_line_278__4:
  .loc 7 751 9
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_278__3)
  jmp .LABEL__consume_end_of_line_278__3
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_end_of_line_278__end:
  mov rsp, rbp
  pop rbp
  ret

consume_end_of_line_278__stack_frame_size: .word 16

  .loc 7 758 1
  .text
consume_empty_line_279:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_empty_line_279__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_empty_line_279__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 759 22
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 759 43
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 759 66
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 759 9
  # $4.1: Boolean = call(matches_287, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  mov [rbp-8], rdi
  call matches_287
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__consume_empty_line_279__2, .LABEL__consume_empty_line_279__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_empty_line_279__3
.LABEL__consume_empty_line_279__2:
  .loc 7 760 26
  # $5.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx 
  .loc 7 760 47
  # $6.1: @Matcher = load_struct_member(self.1, required_comment)
  mov r15, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $5.1:rbx $6.1:r15 
  .loc 7 760 13
  # $7.1: Boolean = call(matches_286, self.1, $5.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, r15
  call matches_286
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:rax 
  # jump($7.1, .LABEL__consume_empty_line_279__4, .LABEL__consume_empty_line_279__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__consume_empty_line_279__6
.LABEL__consume_empty_line_279__4:
  .loc 7 761 32
  # $8.1: Int = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $8.1:rbx 
  .loc 7 761 32
  # $9.1: Int = $8.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $9.1:r15 
  .loc 7 761 13
  # call(consume_space_280, self.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_280
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  .loc 7 762 26
  # $10.1: @Matcher = load_struct_member(self.1, required_comment)
  mov rax, [rbp-8]
  mov rbx, [rax+128]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $10.1:rbx 
  .loc 7 762 13
  # $11.1: @Token = call(consume_281, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_279__5)
.LABEL__consume_empty_line_279__5:
  .loc 7 766 22
  # $12.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov rax, [rbp-8]
  mov rbx, [rax+160]
  # [live values]: self.1:rax:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] $12.1:rbx 
  .loc 7 766 9
  # $13.1: @Token = call(consume_281, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call consume_281
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  .loc 7 767 9
  # return(true)
  mov al, 1
  jmp .LABEL__consume_empty_line_279__end
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
.LABEL__consume_empty_line_279__6:
  .loc 7 764 13
  # call(consume_space_280, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_280
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_279__5)
  jmp .LABEL__consume_empty_line_279__5
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] $7.1:[rbp-10] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
.LABEL__consume_empty_line_279__3:
  .loc 7 769 5
  # return(false)
  mov al, 0
  jmp .LABEL__consume_empty_line_279__end
  # [live values]: self.1:[rbp-8] $4.1:[rbp-9] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_empty_line_279__end:
  mov rsp, rbp
  pop rbp
  ret

consume_empty_line_279__stack_frame_size: .word 16

  .loc 7 772 1
  .text
consume_space_280:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_space_280__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_space_280__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expected_space_count.1: Int = load_variable(expected_space_count)
  # [live values]: self.1:rdi expected_space_count.1:rsi 
  .loc 7 774 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi expected_space_count.1:rsi $1.1:rax 
  .loc 7 774 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx 
  .loc 7 775 9
  # $3.1: Boolean = call(is_343, token.1, Space_Token)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, Space_Token[rip]
  mov [rbp-24], rbx
  call is_343
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__consume_space_280__2, .LABEL__consume_space_280__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__consume_space_280__4
.LABEL__consume_space_280__2:
  .loc 7 776 9
  # $4.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] $4.1:rbx 
  .loc 7 776 9
  # $5.1: @Token = call(next_token_298, $4.1)
  mov rdi, rbx
  call next_token_298
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  .loc 7 777 18
  # space.1: @Space_Token = token.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space.1:rax 
  .loc 7 778 23
  # space_count.3: Int = load_struct_member(space.1, count)
  mov rbx, [rax+32]
  # [discarded value]: space.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:rbx 
  # jump(.LABEL__consume_space_280__3)
  mov [rbp-33], rbx
.LABEL__consume_space_280__3:
  # space_count.4: Int = phi(space_count.2, space_count.3)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  .loc 7 782 9
  # $8.1: Boolean = space_count.4 != expected_space_count.1
  mov rax, [rbp-33]
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:rax:[rbp-33] $8.1:rbx 
  # jump($8.1, .LABEL__consume_space_280__5, .LABEL__consume_space_280__6)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__consume_space_280__6
.LABEL__consume_space_280__5:
  .loc 7 783 22
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:rax:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $9.1:rbx 
  .loc 7 783 9
  # $10.1: @FILE = call(write_317, stderr, $9.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_317
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $10.1:rax 
  .loc 7 783 9
  # $11.1: @FILE = call(write_337, $10.1, ": Consumed ")
  mov rdi, rax
  lea rsi, .LABEL__string_327[rip] # ": Consumed "
  call write_337
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $11.1:rax 
  .loc 7 783 9
  # $12.1: @FILE = call(write_336, $11.1, space_count.4)
  mov rdi, rax
  mov rsi, [rbp-33]
  call write_336
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $12.1:rax 
  .loc 7 783 9
  # $13.1: @FILE = call(write_337, $12.1, " spaces where ")
  mov rdi, rax
  lea rsi, .LABEL__string_328[rip] # " spaces where "
  call write_337
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $13.1:rax 
  .loc 7 783 9
  # $14.1: @FILE = call(write_336, $13.1, expected_space_count.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_336
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $14.1:rax 
  .loc 7 783 9
  # $15.1: @FILE = call(write_337, $14.1, " are expected")
  mov rdi, rax
  lea rsi, .LABEL__string_329[rip] # " are expected"
  call write_337
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $15.1:rax 
  .loc 7 783 9
  # $16.1: @FILE = call(end_line_340, $15.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # jump(.LABEL__consume_space_280__6)
.LABEL__consume_space_280__6:
  # return()
  jmp .LABEL__consume_space_280__end
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  # [discarded value]: space_count.4
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [discarded value]: space_count.3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__consume_space_280__4:
  .loc 7 780 9
  # space_count.2: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:rax:[rbp-33] 
  # jump(.LABEL__consume_space_280__3)
  mov [rbp-33], rax
  jmp .LABEL__consume_space_280__3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:[rbp-33] 
  # [discarded value]: space_count.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [discarded value]: token.1
  # [discarded value]: expected_space_count.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_space_280__end:
  mov rsp, rbp
  pop rbp
  ret

consume_space_280__stack_frame_size: .word 48

  .loc 7 787 1
  .text
consume_281:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_281__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_281__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 788 12
  # $1.1: @Token = call(consume_282, self.1, first_matcher.1, null)
  xor rdx, rdx
  call consume_282
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 788 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_281__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_281__end:
  mov rsp, rbp
  pop rbp
  ret

consume_281__stack_frame_size: .word 16

  .loc 7 791 1
  .text
consume_282:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_282__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_282__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 792 12
  # $1.1: @Token = call(consume_283, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call consume_283
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 792 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_282__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_282__end:
  mov rsp, rbp
  pop rbp
  ret

consume_282__stack_frame_size: .word 16

  .loc 7 795 1
  .text
consume_283:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_283__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_283__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 796 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 796 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 797 5
  # first_token.1: @Token = token.1
  mov [rbp-8], rbx
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:[rbp-8] first_token.1:rbx 
  .loc 7 798 9
  # $3.1: Boolean = call(accepts_288, first_matcher.1, token.1)
  mov [rbp-16], rdi
  mov rdi, rsi
  mov [rbp-24], rsi
  mov rsi, [rbp-8]
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_288
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:rax 
  # jump($3.1, .LABEL__consume_283__2, .LABEL__consume_283__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__consume_283__4
.LABEL__consume_283__2:
  .loc 7 799 17
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $5.1:rbx 
  .loc 7 799 17
  # token.3: @Token = call(next_token_298, $5.1)
  mov rdi, rbx
  call next_token_298
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:rax:[rbp-8] 
  # jump(.LABEL__consume_283__3)
  mov [rbp-8], rax
.LABEL__consume_283__3:
  # token.10: @Token = phi(token.3, token.1)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  .loc 7 805 9
  # $7.1: Boolean = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:rax 
  # jump($7.1, .LABEL__consume_283__7, .LABEL__consume_283__8)
  test al, al
  mov [rbp-50], al
  jz .LABEL__consume_283__8
.LABEL__consume_283__7:
  .loc 7 806 13
  # $8.1: Boolean = call(accepts_288, second_matcher.1, token.10)
  mov rdi, [rbp-40]
  mov rsi, [rbp-8]
  call accepts_288
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:rax 
  # jump($8.1, .LABEL__consume_283__9, .LABEL__consume_283__11)
  test al, al
  mov [rbp-51], al
  jz .LABEL__consume_283__11
.LABEL__consume_283__9:
  .loc 7 807 21
  # $10.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $10.1:rbx 
  .loc 7 807 21
  # token.6: @Token = call(next_token_298, $10.1)
  mov rdi, rbx
  call next_token_298
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:rax:[rbp-8] 
  # jump(.LABEL__consume_283__8)
  mov [rbp-8], rax
.LABEL__consume_283__8:
  # token.11: @Token = phi(token.10, token.6)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  .loc 7 814 9
  # $12.1: Boolean = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:rax token.6:[rbp-8] 
  # jump($12.1, .LABEL__consume_283__14, .LABEL__consume_283__15)
  test al, al
  mov [rbp-52], al
  jz .LABEL__consume_283__15
.LABEL__consume_283__14:
  .loc 7 815 13
  # $13.1: Boolean = call(accepts_288, third_matcher.1, token.11)
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  call accepts_288
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:rax 
  # jump($13.1, .LABEL__consume_283__16, .LABEL__consume_283__18)
  test al, al
  mov [rbp-53], al
  jz .LABEL__consume_283__18
.LABEL__consume_283__16:
  .loc 7 816 21
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $15.1:rbx 
  .loc 7 816 21
  # token.9: @Token = call(next_token_298, $15.1)
  mov rdi, rbx
  call next_token_298
  # [discarded value]: token.9
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # jump(.LABEL__consume_283__15)
.LABEL__consume_283__15:
  .loc 7 823 5
  # return(first_token.1)
  mov rax, [rbp-48]
  jmp .LABEL__consume_283__end
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
.LABEL__consume_283__18:
  .loc 7 818 17
  # $14.1: Boolean = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $14.1:rbx 
  # jump($14.1, .LABEL__consume_283__19, .LABEL__consume_283__15)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__consume_283__15
.LABEL__consume_283__19:
  .loc 7 819 17
  # call(abort_289, self.1, token.11)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_289
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] $14.1:[rbp-54] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] $13.1:[rbp-53] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] $12.1:[rbp-52] token.6:[rbp-8] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  # [discarded value]: token.11
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] token.6:[rbp-8] 
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] 
.LABEL__consume_283__11:
  .loc 7 809 17
  # $9.1: Boolean = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $9.1:rbx 
  # jump($9.1, .LABEL__consume_283__12, .LABEL__consume_283__8)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__consume_283__8
.LABEL__consume_283__12:
  .loc 7 810 17
  # call(abort_289, self.1, token.10)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_289
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] $9.1:[rbp-52] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $7.1:[rbp-50] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  # [discarded value]: token.10
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] token.3:[rbp-8] 
  # [discarded value]: token.3
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] 
.LABEL__consume_283__4:
  .loc 7 801 13
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-24]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:rax:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $4.1:rbx 
  # jump($4.1, .LABEL__consume_283__5, .LABEL__consume_283__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__consume_283__3
.LABEL__consume_283__5:
  .loc 7 802 13
  # call(abort_289, self.1, token.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_289
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] $4.1:[rbp-50] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $3.1:[rbp-49] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [discarded value]: first_token.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_283__end:
  mov rsp, rbp
  pop rbp
  ret

consume_283__stack_frame_size: .word 64

  .loc 7 826 1
  .text
matches_end_of_line_284:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_end_of_line_284__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_end_of_line_284__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 827 25
  # $1.1: @Matcher = load_struct_member(self.1, optional_space)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 7 827 46
  # $2.1: @Matcher = load_struct_member(self.1, optional_comment)
  mov rbx, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 7 827 69
  # $3.1: @Matcher = load_struct_member(self.1, required_end_of_line)
  mov r15, [rdi+160]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx $3.1:r15 
  .loc 7 827 12
  # $4.1: Boolean = call(matches_287, self.1, $1.1, $2.1, $3.1)
  mov rsi, rax
  mov rdx, rbx
  mov rcx, r15
  call matches_287
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $4.1:rax 
  .loc 7 827 5
  # return($4.1)
  mov [rbp-1], al
  jmp .LABEL__matches_end_of_line_284__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__matches_end_of_line_284__end:
  mov rsp, rbp
  pop rbp
  ret

matches_end_of_line_284__stack_frame_size: .word 16

  .loc 7 830 1
  .text
matches_285:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_285__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_285__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 831 12
  # $1.1: Boolean = call(matches_286, self.1, first_matcher.1, null)
  xor rdx, rdx
  call matches_286
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 831 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_285__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_285__end:
  mov rsp, rbp
  pop rbp
  ret

matches_285__stack_frame_size: .word 16

  .loc 7 834 1
  .text
matches_286:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_286__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_286__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 835 12
  # $1.1: Boolean = call(matches_287, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call matches_287
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 835 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_286__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_286__end:
  mov rsp, rbp
  pop rbp
  ret

matches_286__stack_frame_size: .word 16

  .loc 7 838 1
  .text
matches_287:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_287__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_287__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 839 14
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 839 14
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 840 5
  # peek_offset.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax 
  .loc 7 841 9
  # $3.1: Boolean = call(accepts_288, first_matcher.1, token.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call accepts_288
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__matches_287__2, .LABEL__matches_287__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__matches_287__4
.LABEL__matches_287__2:
  .loc 7 842 17
  # $5.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $5.1:rbx 
  .loc 7 842 17
  # token.2: @Token = call(peek_token_297, $5.1, peek_offset.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_297
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:rax:[rbp-48] 
  .loc 7 843 23
  # $7.1: Int = peek_offset.1 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:rax:[rbp-48] $7.1:rbx 
  .loc 7 843 9
  # peek_offset.3: Int = $7.1
  mov [rbp-57], rbx
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:rax:[rbp-48] peek_offset.3:rbx:[rbp-24] 
  # jump(.LABEL__matches_287__3)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_287__3:
  # peek_offset.8: Int = phi(peek_offset.3, peek_offset.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] 
  # token.7: @Token = phi(token.2, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  .loc 7 847 9
  # $8.1: Boolean = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:rax 
  # jump($8.1, .LABEL__matches_287__8, .LABEL__matches_287__9)
  test al, al
  mov [rbp-50], al
  jz .LABEL__matches_287__9
.LABEL__matches_287__8:
  .loc 7 848 13
  # $9.1: Boolean = call(accepts_288, second_matcher.1, token.7)
  mov rdi, [rbp-40]
  mov rsi, [rbp-48]
  call accepts_288
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:rax 
  # jump($9.1, .LABEL__matches_287__10, .LABEL__matches_287__12)
  test al, al
  mov [rbp-51], al
  jz .LABEL__matches_287__12
.LABEL__matches_287__10:
  .loc 7 849 21
  # $11.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $11.1:rbx 
  .loc 7 849 21
  # token.4: @Token = call(peek_token_297, $11.1, peek_offset.8)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_297
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:rax:[rbp-48] 
  .loc 7 850 27
  # $13.1: Int = peek_offset.8 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:rax:[rbp-48] $13.1:rbx 
  .loc 7 850 13
  # peek_offset.5: Int = $13.1
  mov [rbp-59], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:rax:[rbp-48] peek_offset.5:rbx:[rbp-24] 
  # jump(.LABEL__matches_287__9)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_287__9:
  # peek_offset.9: Int = phi(peek_offset.8, peek_offset.5)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # token.8: @Token = phi(token.7, token.4)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  .loc 7 855 9
  # $14.1: Boolean = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:rax token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump($14.1, .LABEL__matches_287__16, .LABEL__matches_287__17)
  test al, al
  mov [rbp-52], al
  jz .LABEL__matches_287__17
.LABEL__matches_287__16:
  .loc 7 856 13
  # $15.1: Boolean = call(accepts_288, third_matcher.1, token.8)
  mov rdi, [rbp-32]
  mov rsi, [rbp-48]
  call accepts_288
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:rax 
  # jump($15.1, .LABEL__matches_287__18, .LABEL__matches_287__20)
  test al, al
  mov [rbp-53], al
  jz .LABEL__matches_287__20
.LABEL__matches_287__18:
  .loc 7 857 21
  # $17.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $17.1:rbx 
  .loc 7 857 21
  # token.6: @Token = call(peek_token_297, $17.1, peek_offset.9)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_297
  # [discarded value]: token.6
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  .loc 7 858 27
  # $19.1: Int = peek_offset.9 + 1
  mov rax, [rbp-24]
  add rax, 1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $19.1:rax 
  .loc 7 858 13
  # peek_offset.7: Int = $19.1
  mov [rbp-61], rax
  # [discarded value]: peek_offset.7
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # jump(.LABEL__matches_287__17)
.LABEL__matches_287__17:
  .loc 7 863 5
  # return(true)
  mov al, 1
  jmp .LABEL__matches_287__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
.LABEL__matches_287__20:
  .loc 7 859 20
  # $16.1: Boolean = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $16.1:rbx 
  # jump($16.1, .LABEL__matches_287__21, .LABEL__matches_287__17)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__matches_287__17
.LABEL__matches_287__21:
  .loc 7 860 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_287__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] $16.1:[rbp-54] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $15.1:[rbp-53] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $14.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: token.8
  # [discarded value]: peek_offset.9
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: peek_offset.5
  # [discarded value]: token.4
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__matches_287__12:
  .loc 7 851 20
  # $10.1: Boolean = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $10.1:rbx 
  # jump($10.1, .LABEL__matches_287__13, .LABEL__matches_287__9)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__matches_287__9
.LABEL__matches_287__13:
  .loc 7 852 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_287__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] $10.1:[rbp-52] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [discarded value]: token.7
  # [discarded value]: peek_offset.8
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [discarded value]: peek_offset.3
  # [discarded value]: token.2
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] 
.LABEL__matches_287__4:
  .loc 7 844 16
  # $4.1: Boolean = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-16]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:rax:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $4.1:rbx 
  # jump($4.1, .LABEL__matches_287__5, .LABEL__matches_287__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__matches_287__3
.LABEL__matches_287__5:
  .loc 7 845 9
  # return(false)
  mov al, 0
  jmp .LABEL__matches_287__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] $4.1:[rbp-50] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $3.1:[rbp-49] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [discarded value]: peek_offset.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__matches_287__end:
  mov rsp, rbp
  pop rbp
  ret

matches_287__stack_frame_size: .word 64

  .loc 7 899 1
  .text
accepts_288:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_288__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_288__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  .loc 7 900 9
  # $1.1: Boolean = call(is_343, self.1, Other_Matcher)
  mov [rbp-8], rsi
  mov rsi, Other_Matcher[rip]
  mov [rbp-16], rdi
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__accepts_288__2, .LABEL__accepts_288__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_288__3
.LABEL__accepts_288__2:
  .loc 7 901 17
  # self.1: @Other_Matcher = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:rax 
  .loc 7 902 13
  # $3.1: Boolean = call(is_343, token.1, Other_Token)
  mov rdi, [rbp-8]
  mov rsi, Other_Token[rip]
  mov [rbp-25], rax
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__accepts_288__4, .LABEL__accepts_288__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__accepts_288__5
.LABEL__accepts_288__4:
  .loc 7 903 20
  # $4.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] $4.1:rbx 
  .loc 7 903 40
  # $5.1: @String = load_struct_member(self.1, lexeme)
  mov r15, [rbp-25]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] self.1:r15:[rbp-25] $3.1:[rbp-26] $4.1:rbx $5.1:r14 
  .loc 7 903 20
  # $6.1: Boolean = call(equals_346, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_346
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] $6.1:rax 
  .loc 7 903 13
  # return($6.1)
  mov [rbp-27], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__accepts_288__5:
  .loc 7 905 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_288__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] self.1:[rbp-25] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__accepts_288__3:
  .loc 7 907 9
  # $7.1: Boolean = call(is_343, self.1, Space_Matcher)
  mov rdi, [rbp-16]
  mov rsi, Space_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__accepts_288__8, .LABEL__accepts_288__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_288__9
.LABEL__accepts_288__8:
  .loc 7 908 16
  # $8.1: Boolean = call(is_343, token.1, Space_Token)
  mov rdi, [rbp-8]
  mov rsi, Space_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $8.1:rax 
  .loc 7 908 9
  # return($8.1)
  mov [rbp-19], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_288__9:
  .loc 7 910 9
  # $9.1: Boolean = call(is_343, self.1, Identifier_Matcher)
  mov rdi, [rbp-16]
  mov rsi, Identifier_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:rax 
  # jump($9.1, .LABEL__accepts_288__11, .LABEL__accepts_288__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_288__12
.LABEL__accepts_288__11:
  .loc 7 911 16
  # $10.1: Boolean = call(is_343, token.1, Identifier_Token)
  mov rdi, [rbp-8]
  mov rsi, Identifier_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $10.1:rax 
  .loc 7 911 9
  # return($10.1)
  mov [rbp-20], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] 
.LABEL__accepts_288__12:
  .loc 7 913 9
  # $11.1: Boolean = call(is_343, self.1, Keyword_Matcher)
  mov rdi, [rbp-16]
  mov rsi, Keyword_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:rax 
  # jump($11.1, .LABEL__accepts_288__14, .LABEL__accepts_288__15)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_288__15
.LABEL__accepts_288__14:
  .loc 7 914 17
  # self.1: @Keyword_Matcher = self.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:rax 
  .loc 7 915 13
  # $13.1: Boolean = call(is_343, token.1, Keyword_Token)
  mov rdi, [rbp-8]
  mov rsi, Keyword_Token[rip]
  mov [rbp-28], rax
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:rax 
  # jump($13.1, .LABEL__accepts_288__16, .LABEL__accepts_288__17)
  test al, al
  mov [rbp-29], al
  jz .LABEL__accepts_288__17
.LABEL__accepts_288__16:
  .loc 7 916 20
  # $14.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx 
  .loc 7 916 40
  # $15.1: @String = load_struct_member(self.1, lexeme)
  mov r15, [rbp-28]
  mov r14, [r15+9]
  # [live values]: self.1:[rbp-16] token.1:rax:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:r15:[rbp-28] $13.1:[rbp-29] $14.1:rbx $15.1:r14 
  .loc 7 916 20
  # $16.1: Boolean = call(equals_346, $14.1, $15.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_346
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] $16.1:rax 
  .loc 7 916 13
  # return($16.1)
  mov [rbp-30], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__accepts_288__17:
  .loc 7 918 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_288__end
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] self.1:[rbp-28] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] 
.LABEL__accepts_288__15:
  .loc 7 920 9
  # $17.1: Boolean = call(is_343, self.1, String_Literal_Matcher)
  mov rdi, [rbp-16]
  mov rsi, String_Literal_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:rax 
  # jump($17.1, .LABEL__accepts_288__20, .LABEL__accepts_288__21)
  test al, al
  mov [rbp-21], al
  jz .LABEL__accepts_288__21
.LABEL__accepts_288__20:
  .loc 7 921 16
  # $18.1: Boolean = call(is_343, token.1, String_Token)
  mov rdi, [rbp-8]
  mov rsi, String_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $18.1:rax 
  .loc 7 921 9
  # return($18.1)
  mov [rbp-22], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] 
.LABEL__accepts_288__21:
  .loc 7 923 9
  # $19.1: Boolean = call(is_343, self.1, Literal_Matcher)
  mov rdi, [rbp-16]
  mov rsi, Literal_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:rax 
  # jump($19.1, .LABEL__accepts_288__23, .LABEL__accepts_288__24)
  test al, al
  mov [rbp-22], al
  jz .LABEL__accepts_288__24
.LABEL__accepts_288__23:
  .loc 7 924 16
  # $21.1: Boolean = call(is_343, token.1, Integer_Token)
  mov rdi, [rbp-8]
  mov rsi, Integer_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:rax 
  # jump($21.1, .LABEL__accepts_288__34, .LABEL__accepts_288__33)
  test al, al
  mov [rbp-23], al
  jz .LABEL__accepts_288__33
.LABEL__accepts_288__34:
  .loc 7 924 16
  # $23.1: Boolean = phi($21.1, $21.2)
  mov al, [rbp-23]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:rax 
  # jump($23.1, .LABEL__accepts_288__32, .LABEL__accepts_288__31)
  test al, al
  mov [rbp-24], al
  jz .LABEL__accepts_288__31
.LABEL__accepts_288__32:
  .loc 7 924 16
  # $25.1: Boolean = phi($23.1, $23.2)
  mov al, [rbp-24]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:rax $23.1:[rbp-24] 
  # jump($25.1, .LABEL__accepts_288__30, .LABEL__accepts_288__29)
  test al, al
  mov [rbp-25], al
  jz .LABEL__accepts_288__29
.LABEL__accepts_288__30:
  .loc 7 924 16
  # $27.1: Boolean = phi($25.1, $25.2)
  mov al, [rbp-25]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:rax $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump($27.1, .LABEL__accepts_288__28, .LABEL__accepts_288__27)
  test al, al
  mov [rbp-26], al
  jz .LABEL__accepts_288__27
.LABEL__accepts_288__28:
  .loc 7 924 16
  # $29.1: Boolean = phi($27.1, $27.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:rax $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump($29.1, .LABEL__accepts_288__26, .LABEL__accepts_288__25)
  test al, al
  mov [rbp-27], al
  jz .LABEL__accepts_288__25
.LABEL__accepts_288__26:
  .loc 7 924 16
  # $29.3: Boolean = phi($29.1, $29.2)
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.3:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  .loc 7 924 9
  # return($29.3)
  mov al, [rbp-27]
  jmp .LABEL__accepts_288__end
  # [discarded value]: $29.3
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_288__25:
  .loc 7 924 149
  # $29.2: Boolean = call(is_343, token.1, Undefined_Token)
  mov rdi, [rbp-8]
  mov rsi, Undefined_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.2:rax:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_288__26)
  mov [rbp-27], al
  jmp .LABEL__accepts_288__26
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.2:[rbp-27] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $29.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $29.1:[rbp-27] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_288__27:
  .loc 7 924 125
  # $27.2: Boolean = call(is_343, token.1, Null_Token)
  mov rdi, [rbp-8]
  mov rsi, Null_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.2:rax:[rbp-26] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_288__28)
  mov [rbp-26], al
  jmp .LABEL__accepts_288__28
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.2:[rbp-26] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $27.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $27.1:[rbp-26] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
.LABEL__accepts_288__29:
  .loc 7 924 98
  # $25.2: Boolean = call(is_343, token.1, Boolean_Token)
  mov rdi, [rbp-8]
  mov rsi, Boolean_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.2:rax:[rbp-25] $25.1:[rbp-25] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_288__30)
  mov [rbp-25], al
  jmp .LABEL__accepts_288__30
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.2:[rbp-25] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $25.1:[rbp-25] $23.1:[rbp-24] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
.LABEL__accepts_288__31:
  .loc 7 924 69
  # $23.2: Boolean = call(is_343, token.1, Character_Token)
  mov rdi, [rbp-8]
  mov rsi, Character_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.2:rax:[rbp-24] $23.1:[rbp-24] 
  # jump(.LABEL__accepts_288__32)
  mov [rbp-24], al
  jmp .LABEL__accepts_288__32
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.2:[rbp-24] $23.1:[rbp-24] 
  # [discarded value]: $23.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $23.1:[rbp-24] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
.LABEL__accepts_288__33:
  .loc 7 924 43
  # $21.2: Boolean = call(is_343, token.1, String_Token)
  mov rdi, [rbp-8]
  mov rsi, String_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $21.2:rax:[rbp-23] 
  # jump(.LABEL__accepts_288__34)
  mov [rbp-23], al
  jmp .LABEL__accepts_288__34
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] $21.2:[rbp-23] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $21.1:[rbp-23] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] 
.LABEL__accepts_288__24:
  .loc 7 926 9
  # $31.1: Boolean = call(is_343, self.1, End_Of_Line_Matcher)
  mov rdi, [rbp-16]
  mov rsi, End_Of_Line_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:rax 
  # jump($31.1, .LABEL__accepts_288__36, .LABEL__accepts_288__37)
  test al, al
  mov [rbp-23], al
  jz .LABEL__accepts_288__37
.LABEL__accepts_288__36:
  .loc 7 927 16
  # $32.1: Boolean = call(is_343, token.1, End_Of_Line_Token)
  mov rdi, [rbp-8]
  mov rsi, End_Of_Line_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $32.1:rax 
  .loc 7 927 9
  # return($32.1)
  mov [rbp-24], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] 
.LABEL__accepts_288__37:
  .loc 7 929 9
  # $33.1: Boolean = call(is_343, self.1, Comment_Matcher)
  mov rdi, [rbp-16]
  mov rsi, Comment_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:rax 
  # jump($33.1, .LABEL__accepts_288__39, .LABEL__accepts_288__40)
  test al, al
  mov [rbp-24], al
  jz .LABEL__accepts_288__40
.LABEL__accepts_288__39:
  .loc 7 930 16
  # $34.1: Boolean = call(is_343, token.1, Comment_Token)
  mov rdi, [rbp-8]
  mov rsi, Comment_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $34.1:rax 
  .loc 7 930 9
  # return($34.1)
  mov [rbp-25], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] 
.LABEL__accepts_288__40:
  .loc 7 932 9
  # $35.1: Boolean = call(is_343, self.1, End_Of_File_Matcher)
  mov rdi, [rbp-16]
  mov rsi, End_Of_File_Matcher[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:rax 
  # jump($35.1, .LABEL__accepts_288__42, .LABEL__accepts_288__43)
  test al, al
  mov [rbp-25], al
  jz .LABEL__accepts_288__43
.LABEL__accepts_288__42:
  .loc 7 933 16
  # $36.1: Boolean = call(is_343, token.1, End_Of_File_Token)
  mov rdi, [rbp-8]
  mov rsi, End_Of_File_Token[rip]
  call is_343
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] $36.1:rax 
  .loc 7 933 9
  # return($36.1)
  mov [rbp-26], al
  jmp .LABEL__accepts_288__end
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
.LABEL__accepts_288__43:
  .loc 7 935 5
  # $37.1: @FILE = call(write_337, stderr, "Unsupported token matcher")
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_330[rip] # "Unsupported token matcher"
  call write_337
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] $37.1:rax 
  .loc 7 935 5
  # $38.1: @FILE = call(end_line_340, $37.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
  .loc 7 936 5
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] $35.1:[rbp-25] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] $33.1:[rbp-24] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] $31.1:[rbp-23] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] $19.1:[rbp-22] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] $17.1:[rbp-21] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] $11.1:[rbp-20] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] $9.1:[rbp-19] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] token.1:[rbp-8] 
  # [discarded value]: token.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__accepts_288__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_288__stack_frame_size: .word 32

  .loc 1 59 1
  .text
abort_289:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_289__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_289__1:
  # self.1: @Parser = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # unexpected_token.1: @Token = load_variable(unexpected_token)
  # [live values]: unexpected_token.1:rsi 
  .loc 1 60 18
  # $1.1: @Source_Location = load_struct_member(unexpected_token.1, location)
  mov rax, [rsi+16]
  # [live values]: unexpected_token.1:rsi $1.1:rax 
  .loc 1 60 5
  # $2.1: @FILE = call(write_317, stderr, $1.1)
  mov rdi, stderr[rip]
  mov [rbp-8], rsi
  mov rsi, rax
  call write_317
  # [discarded value]: $1.1
  # [live values]: unexpected_token.1:[rbp-8] $2.1:rax 
  .loc 1 60 5
  # $3.1: @FILE = call(write_337, $2.1, ": Unexpected ")
  mov rdi, rax
  lea rsi, .LABEL__string_331[rip] # ": Unexpected "
  call write_337
  # [discarded value]: $2.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax 
  .loc 1 60 74
  # $4.1: @Object_Type = load_struct_member(unexpected_token.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 1 60 74
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 $5.1:r14 
  .loc 1 60 5
  # $6.1: @FILE = call(write_337, $3.1, $5.1)
  mov rdi, rax
  mov rsi, r14
  call write_337
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: unexpected_token.1:[rbp-8] $6.1:rax 
  .loc 1 60 5
  # $7.1: @FILE = call(write_337, $6.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $6.1
  # [live values]: unexpected_token.1:[rbp-8] $7.1:rax 
  .loc 1 60 5
  # $8.1: @FILE = call(write_315, $7.1, unexpected_token.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_315
  # [discarded value]: $7.1
  # [discarded value]: unexpected_token.1
  # [live values]: $8.1:rax 
  .loc 1 60 5
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: 
  .loc 1 61 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_289__end:
  mov rsp, rbp
  pop rbp
  ret

abort_289__stack_frame_size: .word 16

  .loc 1 66 1
  .text
write_290:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_290__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_290__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: file.1:rdi compilation_unit.1:rsi 
  .loc 1 67 19
  # $1.1: @List = load_struct_member(compilation_unit.1, statements)
  mov rax, [rsi+32]
  # [discarded value]: compilation_unit.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 1 67 19
  # statements.1: @List_Iterator = call(create_iterator_329, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_329
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statements.1:rax 
  # jump(.LABEL__write_290__2)
  mov [rbp-16], rax
.LABEL__write_290__2:
  .loc 1 68 12
  # $3.1: Boolean = call(has_next_332, statements.1)
  mov rdi, [rbp-16]
  call has_next_332
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__write_290__3, .LABEL__write_290__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_290__4
.LABEL__write_290__3:
  .loc 1 69 22
  # statement.1: @AST_Statement = call(next_333, statements.1)
  mov rdi, [rbp-16]
  call next_333
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax 
  .loc 1 70 32
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax $6.1:rbx 
  .loc 1 70 9
  # $7.1: @FILE = call(write_source_line_292, file.1, $6.1, 0)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  mov [rbp-25], rax
  call write_source_line_292
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:[rbp-25] $7.1:rax 
  .loc 1 70 9
  # $8.1: @FILE = call(write_291, $7.1, statement.1, 0)
  mov rdi, rax
  mov rsi, [rbp-25]
  xor rdx, rdx
  call write_291
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 1 70 9
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__write_290__2)
  jmp .LABEL__write_290__2
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__write_290__4:
  .loc 1 72 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_290__end
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [discarded value]: statements.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_290__end:
  mov rsp, rbp
  pop rbp
  ret

write_290__stack_frame_size: .word 32

  .loc 1 75 1
  .text
write_291:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_291__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_291__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: file.1:rdi statement.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx 
  .loc 1 76 9
  # $1.1: Boolean = call(is_343, statement.1, AST_Assignment_Statement)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Assignment_Statement[rip]
  mov [rbp-24], rdx
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_291__2, .LABEL__write_291__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_291__3
.LABEL__write_291__2:
  .loc 1 77 22
  # statement.1: @AST_Assignment_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax 
  .loc 1 78 27
  # $3.1: @AST_Expression = load_struct_member(statement.1, storage_expression)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax $3.1:rbx 
  .loc 1 78 16
  # $4.1: @FILE = call(write_295, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_295
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $4.1:rax 
  .loc 1 78 16
  # $5.1: @FILE = call(write_339, $4.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $5.1:rax 
  .loc 1 78 74
  # $6.1: @Other_Token = load_struct_member(statement.1, operator)
  mov rbx, [rbp-33]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rbx:[rbp-33] $5.1:rax $6.1:r15 
  .loc 1 78 16
  # $7.1: @FILE = call(write_315, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_315
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $7.1:rax 
  .loc 1 78 16
  # $8.1: @FILE = call(write_339, $7.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_339
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $8.1:rax 
  .loc 1 78 111
  # $9.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-33]
  mov r15, [rbx+32]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $8.1:rax $9.1:r15 
  .loc 1 78 16
  # $10.1: @FILE = call(write_295, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $10.1:rax 
  .loc 1 78 9
  # return($10.1)
  mov [rbp-33], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_291__3:
  .loc 1 81 9
  # $11.1: Boolean = call(is_343, statement.1, AST_Block_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Block_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__write_291__5, .LABEL__write_291__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_291__6
.LABEL__write_291__5:
  .loc 1 82 9
  # $12.1: @FILE = call(write_339, file.1, '{')
  mov rdi, [rbp-8]
  mov sil, 123
  call write_339
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 1 82 9
  # $13.1: @FILE = call(end_line_340, $12.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  .loc 1 83 30
  # $14.1: @AST_Block_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $14.1:rax 
  .loc 1 83 29
  # $15.1: @List = load_struct_member($14.1, statements)
  mov rbx, [rax+16]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $15.1:rbx 
  .loc 1 83 29
  # block_statements.1: @List_Iterator = call(create_iterator_329, $15.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:rax 
  # jump(.LABEL__write_291__7)
  mov [rbp-34], rax
.LABEL__write_291__7:
  .loc 1 84 16
  # $17.1: Boolean = call(has_next_332, block_statements.1)
  mov rdi, [rbp-34]
  call has_next_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__write_291__8, .LABEL__write_291__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_291__9
.LABEL__write_291__8:
  .loc 1 85 32
  # block_statement.1: @AST_Statement = call(next_333, block_statements.1)
  mov rdi, [rbp-34]
  call next_333
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax 
  .loc 1 86 36
  # $20.1: @Source_Location = load_struct_member(block_statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx 
  .loc 1 86 62
  # $21.1: Int = alignment.1 + 1
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx $21.1:r15 
  .loc 1 86 13
  # $22.1: @FILE = call(write_source_line_292, file.1, $20.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-43], rax
  call write_source_line_292
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax 
  .loc 1 86 100
  # $23.1: Int = alignment.1 + 1
  mov rbx, [rbp-24]
  add rbx, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax $23.1:rbx 
  .loc 1 86 13
  # $24.1: @FILE = call(write_291, $22.1, block_statement.1, $23.1)
  mov rdi, rax
  mov rsi, [rbp-43]
  mov rdx, rbx
  call write_291
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: block_statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $24.1:rax 
  .loc 1 86 13
  # $25.1: @FILE = call(end_line_340, $24.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__write_291__7)
  jmp .LABEL__write_291__7
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__write_291__9:
  .loc 1 88 39
  # $26.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $26.1:rbx 
  .loc 1 88 16
  # $27.1: @FILE = call(write_source_line_292, file.1, $26.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_292
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $27.1:rax 
  .loc 1 88 16
  # $28.1: @FILE = call(write_339, $27.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_339
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $28.1:rax 
  .loc 1 88 9
  # return($28.1)
  mov [rbp-43], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [discarded value]: block_statements.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__write_291__6:
  .loc 1 91 9
  # $29.1: Boolean = call(is_343, statement.1, AST_Break_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Break_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:rax 
  # jump($29.1, .LABEL__write_291__11, .LABEL__write_291__12)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_291__12
.LABEL__write_291__11:
  .loc 1 92 16
  # $30.1: @FILE = call(write_337, file.1, "break")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_297[rip] # "break"
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $30.1:rax 
  .loc 1 92 9
  # return($30.1)
  mov [rbp-35], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
.LABEL__write_291__12:
  .loc 1 95 9
  # $31.1: Boolean = call(is_343, statement.1, AST_Expression_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Expression_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__write_291__14, .LABEL__write_291__15)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_291__15
.LABEL__write_291__14:
  .loc 1 96 28
  # $32.1: @AST_Expression_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  .loc 1 96 27
  # $33.1: @AST_Expression = load_struct_member($32.1, expression)
  mov rbx, [rax+16]
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $33.1:rbx 
  .loc 1 96 16
  # $34.1: @FILE = call(write_295, file.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_295
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $34.1:rax 
  .loc 1 96 9
  # return($34.1)
  mov [rbp-36], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__write_291__15:
  .loc 1 99 9
  # $35.1: Boolean = call(is_343, statement.1, AST_Function_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Function_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:rax 
  # jump($35.1, .LABEL__write_291__17, .LABEL__write_291__18)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_291__18
.LABEL__write_291__17:
  .loc 1 100 22
  # statement.1: @AST_Function_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax 
  .loc 1 101 20
  # $37.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax $37.1:rbx 
  .loc 1 101 9
  # $38.1: @FILE = call(write_315, file.1, $37.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-37], rax
  call write_315
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] $38.1:rax 
  .loc 1 101 9
  # $39.1: @FILE = call(write_337, $38.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_187[rip] # " :: ("
  call write_337
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] 
  .loc 1 102 32
  # $40.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-37]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $40.1:rbx 
  .loc 1 102 32
  # $41.1: @List = load_struct_member($40.1, parameters)
  mov r15, [rbx+16]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $41.1:r15 
  .loc 1 102 32
  # function_parameters.1: @List_Iterator = call(create_iterator_329, $41.1)
  mov rdi, r15
  call create_iterator_329
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:rax 
  .loc 1 103 13
  # $43.1: Boolean = call(has_next_332, function_parameters.1)
  mov rdi, rax
  mov [rbp-45], rax
  call has_next_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:rax 
  # jump($43.1, .LABEL__write_291__21, .LABEL__write_291__20)
  test al, al
  mov [rbp-46], al
  jz .LABEL__write_291__20
.LABEL__write_291__21:
  .loc 1 105 28
  # $45.1: @AST_Function_Parameter = call(next_333, function_parameters.1)
  mov rdi, [rbp-45]
  call next_333
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $45.1:rax 
  .loc 1 105 17
  # $46.1: @FILE = call(write_293, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_293
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  .loc 1 106 21
  # $47.1: Boolean = call(has_next_332, function_parameters.1)
  mov rdi, [rbp-45]
  call has_next_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:rax 
  # jump($47.1, .LABEL__write_291__23, .LABEL__write_291__20)
  test al, al
  mov [rbp-47], al
  jz .LABEL__write_291__20
.LABEL__write_291__23:
  .loc 1 107 21
  # $48.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # jump(.LABEL__write_291__21)
  jmp .LABEL__write_291__21
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
.LABEL__write_291__20:
  .loc 1 113 9
  # $49.1: @FILE = call(write_337, file.1, ") -> ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_240[rip] # ") -> "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $47.1:[rbp-47] 
  .loc 1 113 35
  # $50.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-37]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $50.1:r15 $47.1:[rbp-47] 
  .loc 1 113 35
  # $51.1: @AST_Type = load_struct_member($50.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $51.1:r14 $47.1:[rbp-47] 
  .loc 1 113 9
  # $52.1: @FILE = call(write_294, $49.1, $51.1)
  mov rdi, rax
  mov rsi, r14
  call write_294
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  .loc 1 114 13
  # $53.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rax, [rbp-37]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $53.1:rbx $47.1:[rbp-47] 
  .loc 1 114 13
  # $54.1: Boolean = $53.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:r15 $47.1:[rbp-47] 
  # jump($54.1, .LABEL__write_291__27, .LABEL__write_291__28)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__write_291__28
.LABEL__write_291__27:
  .loc 1 115 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
.LABEL__write_291__28:
  .loc 1 117 16
  # $55.1: @FILE = call(write_337, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_332[rip] # " "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax 
  .loc 1 117 38
  # $56.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rbx, [rbp-37]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax $56.1:r15 
  .loc 1 117 16
  # $57.1: @FILE = call(write_291, $55.1, $56.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_291
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $57.1:rax 
  .loc 1 117 9
  # return($57.1)
  mov [rbp-56], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] 
  # [discarded value]: function_parameters.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
.LABEL__write_291__18:
  .loc 1 120 9
  # $58.1: Boolean = call(is_343, statement.1, AST_If_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_If_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:rax 
  # jump($58.1, .LABEL__write_291__31, .LABEL__write_291__32)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_291__32
.LABEL__write_291__31:
  .loc 1 121 22
  # statement.1: @AST_If_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax 
  .loc 1 122 9
  # $60.1: @FILE = call(write_337, file.1, "if (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_333[rip] # "if ("
  mov [rbp-38], rax
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $60.1:rax 
  .loc 1 122 34
  # $61.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-38]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $60.1:rax $61.1:r15 
  .loc 1 122 9
  # $62.1: @FILE = call(write_295, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $62.1:rax 
  .loc 1 122 9
  # $63.1: @FILE = call(write_337, $62.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_334[rip] # ") "
  call write_337
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $63.1:rax 
  .loc 1 122 84
  # $64.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $63.1:rax $64.1:r15 
  .loc 1 122 9
  # $65.1: @FILE = call(write_291, $63.1, $64.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_291
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  .loc 1 123 13
  # $66.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rax, [rbp-38]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $66.1:rbx 
  .loc 1 123 13
  # $67.1: Boolean = $66.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $67.1:r15 
  # jump($67.1, .LABEL__write_291__33, .LABEL__write_291__34)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__write_291__34
.LABEL__write_291__33:
  .loc 1 124 13
  # $68.1: @FILE = call(write_337, file.1, " else ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_335[rip] # " else "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] $68.1:rax 
  .loc 1 124 40
  # $69.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $67.1:[rbp-39] $68.1:rax $69.1:r15 
  .loc 1 124 13
  # $70.1: @FILE = call(write_291, $68.1, $69.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_291
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # jump(.LABEL__write_291__34)
.LABEL__write_291__34:
  .loc 1 126 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
.LABEL__write_291__32:
  .loc 1 129 9
  # $71.1: Boolean = call(is_343, statement.1, AST_Loop_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Loop_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:rax 
  # jump($71.1, .LABEL__write_291__36, .LABEL__write_291__37)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_291__37
.LABEL__write_291__36:
  .loc 1 130 22
  # statement.1: @AST_Loop_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:rax 
  .loc 1 131 16
  # $73.1: @FILE = call(write_337, file.1, "loop ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_336[rip] # "loop "
  mov [rbp-39], rax
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:[rbp-39] $73.1:rax 
  .loc 1 131 42
  # $74.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-39]
  mov r15, [rbx+16]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $73.1:rax $74.1:r15 
  .loc 1 131 16
  # $75.1: @FILE = call(write_291, $73.1, $74.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_291
  # [discarded value]: $74.1
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $75.1:rax 
  .loc 1 131 9
  # return($75.1)
  mov [rbp-39], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
.LABEL__write_291__37:
  .loc 1 134 9
  # $76.1: Boolean = call(is_343, statement.1, AST_Return_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Return_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:rax 
  # jump($76.1, .LABEL__write_291__39, .LABEL__write_291__40)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_291__40
.LABEL__write_291__39:
  .loc 1 135 22
  # statement.1: @AST_Return_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax 
  .loc 1 136 9
  # $78.1: @FILE = call(write_337, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_276[rip] # "return"
  mov [rbp-40], rax
  call write_337
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  .loc 1 137 13
  # $79.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-40]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $79.1:rbx 
  .loc 1 137 13
  # $80.1: Boolean = $79.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $80.1:r15 
  # jump($80.1, .LABEL__write_291__41, .LABEL__write_291__42)
  test r15b, r15b
  mov [rbp-41], r15b
  jz .LABEL__write_291__42
.LABEL__write_291__41:
  .loc 1 138 13
  # $81.1: @FILE = call(write_337, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_332[rip] # " "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] $81.1:rax 
  .loc 1 138 35
  # $82.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-40]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rbx:[rbp-40] $80.1:[rbp-41] $81.1:rax $82.1:r15 
  .loc 1 138 13
  # $83.1: @FILE = call(write_295, $81.1, $82.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # jump(.LABEL__write_291__42)
.LABEL__write_291__42:
  .loc 1 140 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
.LABEL__write_291__40:
  .loc 1 143 9
  # $84.1: Boolean = call(is_343, statement.1, AST_Struct_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Struct_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:rax 
  # jump($84.1, .LABEL__write_291__44, .LABEL__write_291__45)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_291__45
.LABEL__write_291__44:
  .loc 1 144 22
  # statement.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax 
  .loc 1 145 20
  # $86.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax $86.1:rbx 
  .loc 1 145 9
  # $87.1: @FILE = call(write_315, file.1, $86.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-41], rax
  call write_315
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $87.1:rax 
  .loc 1 145 9
  # $88.1: @FILE = call(write_337, $87.1, " :: struct")
  mov rdi, rax
  lea rsi, .LABEL__string_337[rip] # " :: struct"
  call write_337
  # [discarded value]: $88.1
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  .loc 1 146 13
  # $89.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rax, [rbp-41]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $89.1:rbx 
  .loc 1 146 13
  # $90.1: Boolean = $89.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:r15 
  # jump($90.1, .LABEL__write_291__46, .LABEL__write_291__47)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__write_291__47
.LABEL__write_291__46:
  .loc 1 147 13
  # $91.1: @FILE = call(write_337, file.1, " : ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_338[rip] # " : "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $91.1:rax 
  .loc 1 147 37
  # $92.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rbx, [rbp-41]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rbx:[rbp-41] $90.1:[rbp-42] $91.1:rax $92.1:r15 
  .loc 1 147 13
  # $93.1: @FILE = call(write_294, $91.1, $92.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $93.1
  # [discarded value]: $92.1
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # jump(.LABEL__write_291__47)
.LABEL__write_291__47:
  .loc 1 149 13
  # $94.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $94.1:rbx 
  .loc 1 149 13
  # $95.1: Boolean = $94.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:r15 
  # jump($95.1, .LABEL__write_291__48, .LABEL__write_291__49)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_291__49
.LABEL__write_291__48:
  .loc 1 150 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
.LABEL__write_291__49:
  .loc 1 152 9
  # $96.1: @FILE = call(write_337, file.1, " {")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_250[rip] # " {"
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $96.1:rax 
  .loc 1 152 9
  # $97.1: @FILE = call(end_line_340, $96.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  .loc 1 153 20
  # $98.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $98.1:rbx 
  .loc 1 153 20
  # members.1: @List_Iterator = call(create_iterator_329, $98.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:rax 
  # jump(.LABEL__write_291__51)
  mov [rbp-51], rax
.LABEL__write_291__51:
  .loc 1 154 16
  # $100.1: Boolean = call(has_next_332, members.1)
  mov rdi, [rbp-51]
  call has_next_332
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:rax 
  # jump($100.1, .LABEL__write_291__52, .LABEL__write_291__53)
  test al, al
  mov [rbp-52], al
  jz .LABEL__write_291__53
.LABEL__write_291__52:
  .loc 1 155 23
  # member.1: @AST_Struct_Member = call(next_333, members.1)
  mov rdi, [rbp-51]
  call next_333
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax 
  .loc 1 156 36
  # $103.1: @Source_Location = load_struct_member(member.1, location)
  mov rbx, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx 
  .loc 1 156 53
  # $104.1: Int = alignment.1 + 1
  mov r15, [rbp-24]
  add r15, 1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx $104.1:r15 
  .loc 1 156 13
  # $105.1: @FILE = call(write_source_line_292, file.1, $103.1, $104.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-60], rax
  call write_source_line_292
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $105.1:rax 
  .loc 1 156 74
  # $106.1: @Identifier_Token = load_struct_member(member.1, name)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rbx:[rbp-60] $105.1:rax $106.1:r15 
  .loc 1 156 13
  # $107.1: @FILE = call(write_315, $105.1, $106.1)
  mov rdi, rax
  mov rsi, r15
  call write_315
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $107.1:rax 
  .loc 1 156 13
  # $108.1: @FILE = call(write_337, $107.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $108.1:rax 
  .loc 1 156 105
  # $109.1: @AST_Type = load_struct_member(member.1, type)
  mov rbx, [rbp-60]
  mov r15, [rbx+16]
  # [discarded value]: member.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $108.1:rax $109.1:r15 
  .loc 1 156 13
  # $110.1: @FILE = call(write_294, $108.1, $109.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $109.1
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $110.1:rax 
  .loc 1 156 13
  # $111.1: @FILE = call(end_line_340, $110.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $111.1
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # jump(.LABEL__write_291__51)
  jmp .LABEL__write_291__51
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
.LABEL__write_291__53:
  .loc 1 158 39
  # $112.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $112.1:rbx 
  .loc 1 158 16
  # $113.1: @FILE = call(write_source_line_292, file.1, $112.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_292
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $113.1:rax 
  .loc 1 158 16
  # $114.1: @FILE = call(write_339, $113.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_339
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $114.1:rax 
  .loc 1 158 9
  # return($114.1)
  mov [rbp-60], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # [discarded value]: $100.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [discarded value]: members.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
.LABEL__write_291__45:
  .loc 1 161 9
  # $115.1: Boolean = call(is_343, statement.1, AST_Variable_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:rax 
  # jump($115.1, .LABEL__write_291__55, .LABEL__write_291__56)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_291__56
.LABEL__write_291__55:
  .loc 1 162 22
  # statement.1: @AST_Variable_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax 
  .loc 1 163 21
  # $117.1: @AST_Variable_Statement = statement.1
  mov [rbp-42], rax
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $117.1:rax 
  .loc 1 163 20
  # $118.1: @Identifier_Token = load_struct_member($117.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $118.1:rbx 
  .loc 1 163 9
  # $119.1: @FILE = call(write_315, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_315
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  .loc 1 164 13
  # $120.1: @AST_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $120.1:rbx 
  .loc 1 164 13
  # $121.1: Boolean = $120.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:r15 
  # jump($121.1, .LABEL__write_291__57, .LABEL__write_291__59)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_291__59
.LABEL__write_291__57:
  .loc 1 165 13
  # $125.1: @FILE = call(write_337, file.1, ": ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $125.1:rax 
  .loc 1 165 36
  # $126.1: @AST_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-42]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $125.1:rax $126.1:r15 
  .loc 1 165 13
  # $127.1: @FILE = call(write_294, $125.1, $126.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $127.1
  # [discarded value]: $126.1
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  .loc 1 166 17
  # $128.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $128.1:rbx 
  .loc 1 166 17
  # $129.1: Boolean = $128.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:r15 
  # jump($129.1, .LABEL__write_291__60, .LABEL__write_291__61)
  test r15b, r15b
  mov [rbp-44], r15b
  jz .LABEL__write_291__61
.LABEL__write_291__60:
  .loc 1 167 17
  # $130.1: @FILE = call(write_337, file.1, " = ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_85[rip] # " = "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax 
  .loc 1 167 41
  # $131.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax $131.1:r15 
  .loc 1 167 17
  # $132.1: @FILE = call(write_295, $130.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $132.1
  # [discarded value]: $131.1
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # jump(.LABEL__write_291__61)
.LABEL__write_291__61:
  .loc 1 169 17
  # $133.1: Boolean = load_struct_member(statement.1, is_external)
  mov rax, [rbp-42]
  mov bl, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:rbx 
  # jump($133.1, .LABEL__write_291__62, .LABEL__write_291__58)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__write_291__58
.LABEL__write_291__62:
  .loc 1 170 17
  # $134.1: @FILE = call(write_337, file.1, " = external")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_339[rip] # " = external"
  call write_337
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # jump(.LABEL__write_291__58)
.LABEL__write_291__58:
  .loc 1 175 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_291__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
.LABEL__write_291__59:
  .loc 1 173 13
  # $122.1: @FILE = call(write_337, file.1, " := ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_340[rip] # " := "
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $122.1:rax 
  .loc 1 173 38
  # $123.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $122.1:rax $123.1:r15 
  .loc 1 173 13
  # $124.1: @FILE = call(write_295, $122.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $124.1
  # [discarded value]: $123.1
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # jump(.LABEL__write_291__58)
  jmp .LABEL__write_291__58
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
.LABEL__write_291__56:
  .loc 1 178 9
  # $135.1: Boolean = call(is_343, statement.1, AST_While_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_While_Statement[rip]
  call is_343
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:rax 
  # jump($135.1, .LABEL__write_291__65, .LABEL__write_291__66)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_291__66
.LABEL__write_291__65:
  .loc 1 179 22
  # statement.1: @AST_While_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rax 
  .loc 1 180 16
  # $137.1: @FILE = call(write_337, file.1, "while (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_341[rip] # "while ("
  mov [rbp-43], rax
  call write_337
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $137.1:rax 
  .loc 1 180 44
  # $138.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-43]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rbx:[rbp-43] $137.1:rax $138.1:r15 
  .loc 1 180 16
  # $139.1: @FILE = call(write_295, $137.1, $138.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $138.1
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $139.1:rax 
  .loc 1 180 16
  # $140.1: @FILE = call(write_337, $139.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_334[rip] # ") "
  call write_337
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $140.1:rax 
  .loc 1 180 94
  # $141.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-43]
  mov r15, [rbx+24]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $140.1:rax $141.1:r15 
  .loc 1 180 16
  # $142.1: @FILE = call(write_291, $140.1, $141.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_291
  # [discarded value]: $141.1
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $142.1:rax 
  .loc 1 180 9
  # return($142.1)
  mov [rbp-43], rax
  jmp .LABEL__write_291__end
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
.LABEL__write_291__66:
  .loc 1 183 5
  # $143.1: @FILE = call(flush_341, file.1)
  mov rdi, [rbp-8]
  call flush_341
  # [discarded value]: $143.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  .loc 1 184 11
  # $144.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:rbx 
  .loc 1 184 31
  # $145.1: @String = call(clone_345, "Unsupported AST_Statement type: ")
  lea rdi, .LABEL__string_342[rip] # "Unsupported AST_Statement type: "
  mov [rbp-43], rbx
  call clone_345
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax 
  .loc 1 184 81
  # $146.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $146.1:r15 
  .loc 1 184 81
  # $147.1: @String = load_struct_member_address($146.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $146.1:r15 $147.1:r14 
  .loc 1 184 31
  # $148.1: @String = call(append_354, $145.1, $147.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $147.1
  # [discarded value]: $146.1
  # [discarded value]: $145.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $148.1:rax 
  .loc 1 184 5
  # call(abort_314, $144.1, $148.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_314
  # [discarded value]: $148.1
  # [discarded value]: $144.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [discarded value]: alignment.1
  # [discarded value]: statement.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_291__end:
  mov rsp, rbp
  pop rbp
  ret

write_291__stack_frame_size: .word 64

  .loc 1 187 1
  .text
write_source_line_292:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_source_line_292__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_source_line_292__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: file.1:rdi location.1:rsi 
  # alignment.1: Int = load_variable(alignment)
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx 
  .loc 1 188 16
  # $1.1: @Source = load_struct_member(location.1, source)
  mov rax, [rsi]
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $1.1:rax 
  .loc 1 188 16
  # $2.1: @String = load_struct_member($1.1, file_path)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $2.1:rbx 
  .loc 1 188 5
  # $3.1: @FILE = call(write_337, file.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call write_337
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] $3.1:rax 
  .loc 1 188 5
  # $4.1: @FILE = call(write_339, $3.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] 
  .loc 1 189 13
  # line.1: Int = load_struct_member(location.1, line)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: location.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx 
  .loc 1 190 9
  # $6.1: Boolean = line.1 < 1000
  cmp rbx, 1000
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx $6.1:rax 
  # jump($6.1, .LABEL__write_source_line_292__2, .LABEL__write_source_line_292__3)
  test al, al
  mov [rbp-25], al
  mov [rbp-33], rbx
  jz .LABEL__write_source_line_292__3
.LABEL__write_source_line_292__2:
  .loc 1 191 9
  # $7.1: @FILE = call(write_339, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_339
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # jump(.LABEL__write_source_line_292__3)
.LABEL__write_source_line_292__3:
  .loc 1 193 9
  # $8.1: Boolean = line.1 < 100
  cmp QWORD PTR [rbp-33], 100
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__write_source_line_292__4, .LABEL__write_source_line_292__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_source_line_292__5
.LABEL__write_source_line_292__4:
  .loc 1 194 9
  # $9.1: @FILE = call(write_339, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_339
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # jump(.LABEL__write_source_line_292__5)
.LABEL__write_source_line_292__5:
  .loc 1 196 9
  # $10.1: Boolean = line.1 < 10
  cmp QWORD PTR [rbp-33], 10
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__write_source_line_292__6, .LABEL__write_source_line_292__7)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_source_line_292__7
.LABEL__write_source_line_292__6:
  .loc 1 197 9
  # $11.1: @FILE = call(write_339, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_339
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # jump(.LABEL__write_source_line_292__7)
.LABEL__write_source_line_292__7:
  .loc 1 199 5
  # $12.1: @FILE = call(write_336, file.1, line.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-33]
  call write_336
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] $12.1:rax 
  .loc 1 199 5
  # $13.1: @FILE = call(write_337, $12.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  .loc 1 201 20
  # $14.1: Int = alignment.1 * 2
  mov rax, [rbp-16]
  imul rax, 2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] $14.1:rax 
  .loc 1 201 5
  # space_count.1: Int = $14.1
  mov [rbp-43], rax
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:rax 
  # jump(.LABEL__write_source_line_292__8)
  mov [rbp-43], rax
.LABEL__write_source_line_292__8:
  # space_count.2: Int = phi(space_count.1, space_count.4)
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  .loc 1 202 12
  # $15.1: Boolean = space_count.2 > 0
  cmp QWORD PTR [rbp-43], 0
  setg al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:rax 
  # jump($15.1, .LABEL__write_source_line_292__9, .LABEL__write_source_line_292__10)
  test al, al
  mov [rbp-44], al
  jz .LABEL__write_source_line_292__10
.LABEL__write_source_line_292__9:
  .loc 1 203 9
  # $16.1: @FILE = call(write_339, file.1, ' ')
  mov rdi, [rbp-24]
  mov sil, 32
  call write_339
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  .loc 1 204 23
  # $17.1: Int = space_count.2 - 1
  mov rax, [rbp-43]
  dec rax
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] $17.1:rax 
  .loc 1 204 9
  # space_count.4: Int = $17.1
  mov [rbp-52], rax
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:rax:[rbp-43] 
  # jump(.LABEL__write_source_line_292__8)
  mov [rbp-43], rax
  jmp .LABEL__write_source_line_292__8
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:[rbp-43] 
  # [discarded value]: space_count.4
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
.LABEL__write_source_line_292__10:
  .loc 1 207 5
  # return(file.1)
  mov rax, [rbp-24]
  jmp .LABEL__write_source_line_292__end
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  # [discarded value]: space_count.2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [discarded value]: space_count.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] 
  # [discarded value]: line.1
  # [discarded value]: alignment.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_source_line_292__end:
  mov rsp, rbp
  pop rbp
  ret

write_source_line_292__stack_frame_size: .word 64

  .loc 1 210 1
  .text
write_293:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_293__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_293__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # parameter.1: @AST_Function_Parameter = load_variable(parameter)
  # [live values]: file.1:rdi parameter.1:rsi 
  .loc 1 211 23
  # $1.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rax, [rsi+8]
  # [live values]: file.1:rdi parameter.1:rsi $1.1:rax 
  .loc 1 211 12
  # $2.1: @FILE = call(write_315, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call write_315
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: parameter.1:[rbp-8] $2.1:rax 
  .loc 1 211 12
  # $3.1: @FILE = call(write_337, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $2.1
  # [live values]: parameter.1:[rbp-8] $3.1:rax 
  .loc 1 211 57
  # $4.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [discarded value]: parameter.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 1 211 12
  # $5.1: @FILE = call(write_294, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 1 211 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__write_293__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__write_293__end:
  mov rsp, rbp
  pop rbp
  ret

write_293__stack_frame_size: .word 16

  .loc 1 214 1
  .text
write_294:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_294__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_294__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  .loc 1 215 9
  # $1.1: Boolean = call(is_343, type.1, AST_Array_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Type[rip]
  call is_343
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_294__2, .LABEL__write_294__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_294__3
.LABEL__write_294__2:
  .loc 1 216 17
  # type.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax 
  .loc 1 217 13
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $3.1:rbx 
  .loc 1 217 13
  # $4.1: Boolean = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $4.1:r15 
  # jump($4.1, .LABEL__write_294__4, .LABEL__write_294__5)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__write_294__5
.LABEL__write_294__4:
  .loc 1 218 20
  # $5.1: @FILE = call(write_339, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_339
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 1 218 42
  # $6.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $5.1:rax $6.1:r15 
  .loc 1 218 20
  # $7.1: @FILE = call(write_294, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $7.1:rax 
  .loc 1 218 20
  # $8.1: @FILE = call(write_337, $7.1, "; ")
  mov rdi, rax
  lea rsi, .LABEL__string_343[rip] # "; "
  call write_337
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $8.1:rax 
  .loc 1 218 76
  # $9.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $8.1:rax $9.1:r15 
  .loc 1 218 20
  # $10.1: @FILE = call(write_295, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $10.1:rax 
  .loc 1 218 20
  # $11.1: @FILE = call(write_339, $10.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_339
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $11.1:rax 
  .loc 1 218 13
  # return($11.1)
  mov [rbp-34], rax
  jmp .LABEL__write_294__end
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__write_294__5:
  .loc 1 220 16
  # $12.1: @FILE = call(write_339, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_339
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $12.1:rax 
  .loc 1 220 38
  # $13.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $12.1:rax $13.1:r15 
  .loc 1 220 16
  # $14.1: @FILE = call(write_294, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $14.1:rax 
  .loc 1 220 16
  # $15.1: @FILE = call(write_339, $14.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_339
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $15.1:rax 
  .loc 1 220 9
  # return($15.1)
  mov [rbp-34], rax
  jmp .LABEL__write_294__end
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_294__3:
  .loc 1 223 9
  # $16.1: Boolean = call(is_343, type.1, AST_Named_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Named_Type[rip]
  call is_343
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__write_294__8, .LABEL__write_294__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_294__9
.LABEL__write_294__8:
  .loc 1 224 28
  # $17.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $17.1:rax 
  .loc 1 224 27
  # $18.1: @Identifier_Token = load_struct_member($17.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $18.1:rbx 
  .loc 1 224 16
  # $19.1: @FILE = call(write_315, file.1, $18.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_315
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $19.1:rax 
  .loc 1 224 9
  # return($19.1)
  mov [rbp-26], rax
  jmp .LABEL__write_294__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__write_294__9:
  .loc 1 227 9
  # $20.1: Boolean = call(is_343, type.1, AST_Pointer_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Pointer_Type[rip]
  call is_343
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:rax 
  # jump($20.1, .LABEL__write_294__11, .LABEL__write_294__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_294__12
.LABEL__write_294__11:
  .loc 1 228 16
  # $21.1: @FILE = call(write_339, file.1, '@')
  mov rdi, [rbp-8]
  mov sil, 64
  call write_339
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax 
  .loc 1 228 39
  # $22.1: @AST_Pointer_Type = type.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $22.1:rbx 
  .loc 1 228 38
  # $23.1: @AST_Type = load_struct_member($22.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $23.1:r15 
  .loc 1 228 16
  # $24.1: @FILE = call(write_294, $21.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $24.1:rax 
  .loc 1 228 9
  # return($24.1)
  mov [rbp-27], rax
  jmp .LABEL__write_294__end
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
.LABEL__write_294__12:
  .loc 1 231 5
  # $25.1: @FILE = call(flush_341, file.1)
  mov rdi, [rbp-8]
  call flush_341
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  .loc 1 232 11
  # $26.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:rbx 
  .loc 1 232 26
  # $27.1: @String = call(clone_345, "Unsupported AST_Type type: ")
  lea rdi, .LABEL__string_344[rip] # "Unsupported AST_Type type: "
  mov [rbp-27], rbx
  call clone_345
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax 
  .loc 1 232 71
  # $28.1: @Object_Type = load_struct_member(type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $28.1:r15 
  .loc 1 232 71
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $28.1:r15 $29.1:r14 
  .loc 1 232 26
  # $30.1: @String = call(append_354, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $30.1:rax 
  .loc 1 232 5
  # call(abort_314, $26.1, $30.1)
  mov rdi, [rbp-27]
  mov rsi, rax
  call abort_314
  # [discarded value]: $30.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_294__end:
  mov rsp, rbp
  pop rbp
  ret

write_294__stack_frame_size: .word 48

  .loc 1 235 1
  .text
write_295:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_295__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_295__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: file.1:rdi expression.1:rsi 
  .loc 1 236 9
  # $1.1: Boolean = call(is_343, expression.1, AST_Array_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Access_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_295__2, .LABEL__write_295__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_295__3
.LABEL__write_295__2:
  .loc 1 237 28
  # $2.1: @AST_Array_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 1 237 27
  # $3.1: @AST_Expression = load_struct_member($2.1, array_expression)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 1 237 16
  # $4.1: @FILE = call(write_295, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_295
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 1 237 16
  # $5.1: @FILE = call(write_339, $4.1, '[')
  mov rdi, rax
  mov sil, 91
  call write_339
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 1 237 108
  # $6.1: @AST_Array_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $6.1:rbx 
  .loc 1 237 107
  # $7.1: @AST_Expression = load_struct_member($6.1, index_expression)
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $7.1:r15 
  .loc 1 237 16
  # $8.1: @FILE = call(write_295, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $8.1:rax 
  .loc 1 237 16
  # $9.1: @FILE = call(write_339, $8.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_339
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $9.1:rax 
  .loc 1 237 9
  # return($9.1)
  mov [rbp-25], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_295__3:
  .loc 1 240 9
  # $10.1: Boolean = call(is_343, expression.1, AST_Binary_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Binary_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__write_295__5, .LABEL__write_295__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_295__6
.LABEL__write_295__5:
  .loc 1 241 9
  # $11.1: @FILE = call(write_339, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_339
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax 
  .loc 1 241 32
  # $12.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $12.1:rbx 
  .loc 1 241 31
  # $13.1: @AST_Expression = load_struct_member($12.1, left_expression)
  mov r15, [rbx+16]
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $13.1:r15 
  .loc 1 241 9
  # $14.1: @FILE = call(write_295, $11.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  .loc 1 242 13
  # $15.1: Boolean = call(is_343, expression.1, AST_Add_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Add_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:rax 
  # jump($15.1, .LABEL__write_295__7, .LABEL__write_295__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_295__8
.LABEL__write_295__7:
  .loc 1 243 20
  # $16.1: @FILE = call(write_337, file.1, " + ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_282[rip] # " + "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax 
  .loc 1 243 45
  # $17.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $17.1:rbx 
  .loc 1 243 44
  # $18.1: @AST_Expression = load_struct_member($17.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $18.1:r15 
  .loc 1 243 20
  # $19.1: @FILE = call(write_295, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $19.1:rax 
  .loc 1 243 20
  # $20.1: @FILE = call(write_339, $19.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $20.1:rax 
  .loc 1 243 13
  # return($20.1)
  mov [rbp-27], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
.LABEL__write_295__8:
  .loc 1 245 13
  # $21.1: Boolean = call(is_343, expression.1, AST_Divide_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Divide_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:rax 
  # jump($21.1, .LABEL__write_295__10, .LABEL__write_295__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__write_295__11
.LABEL__write_295__10:
  .loc 1 246 20
  # $22.1: @FILE = call(write_337, file.1, " / ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_283[rip] # " / "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax 
  .loc 1 246 45
  # $23.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $23.1:rbx 
  .loc 1 246 44
  # $24.1: @AST_Expression = load_struct_member($23.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $24.1:r15 
  .loc 1 246 20
  # $25.1: @FILE = call(write_295, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $25.1:rax 
  .loc 1 246 20
  # $26.1: @FILE = call(write_339, $25.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $26.1:rax 
  .loc 1 246 13
  # return($26.1)
  mov [rbp-28], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
.LABEL__write_295__11:
  .loc 1 248 13
  # $27.1: Boolean = call(is_343, expression.1, AST_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Equals_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:rax 
  # jump($27.1, .LABEL__write_295__13, .LABEL__write_295__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__write_295__14
.LABEL__write_295__13:
  .loc 1 249 20
  # $28.1: @FILE = call(write_337, file.1, " == ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_284[rip] # " == "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax 
  .loc 1 249 46
  # $29.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $29.1:rbx 
  .loc 1 249 45
  # $30.1: @AST_Expression = load_struct_member($29.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $30.1:r15 
  .loc 1 249 20
  # $31.1: @FILE = call(write_295, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $31.1:rax 
  .loc 1 249 20
  # $32.1: @FILE = call(write_339, $31.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $32.1:rax 
  .loc 1 249 13
  # return($32.1)
  mov [rbp-29], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
.LABEL__write_295__14:
  .loc 1 251 13
  # $33.1: Boolean = call(is_343, expression.1, AST_Greater_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:rax 
  # jump($33.1, .LABEL__write_295__16, .LABEL__write_295__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__write_295__17
.LABEL__write_295__16:
  .loc 1 252 20
  # $34.1: @FILE = call(write_337, file.1, " > ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_285[rip] # " > "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax 
  .loc 1 252 45
  # $35.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $35.1:rbx 
  .loc 1 252 44
  # $36.1: @AST_Expression = load_struct_member($35.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $36.1:r15 
  .loc 1 252 20
  # $37.1: @FILE = call(write_295, $34.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $37.1:rax 
  .loc 1 252 20
  # $38.1: @FILE = call(write_339, $37.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $38.1:rax 
  .loc 1 252 13
  # return($38.1)
  mov [rbp-30], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
.LABEL__write_295__17:
  .loc 1 254 13
  # $39.1: Boolean = call(is_343, expression.1, AST_Greater_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Or_Equals_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:rax 
  # jump($39.1, .LABEL__write_295__19, .LABEL__write_295__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__write_295__20
.LABEL__write_295__19:
  .loc 1 255 20
  # $40.1: @FILE = call(write_337, file.1, " >= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_286[rip] # " >= "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax 
  .loc 1 255 46
  # $41.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $41.1:rbx 
  .loc 1 255 45
  # $42.1: @AST_Expression = load_struct_member($41.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $42.1:r15 
  .loc 1 255 20
  # $43.1: @FILE = call(write_295, $40.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $42.1
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $43.1:rax 
  .loc 1 255 20
  # $44.1: @FILE = call(write_339, $43.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $44.1:rax 
  .loc 1 255 13
  # return($44.1)
  mov [rbp-31], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
.LABEL__write_295__20:
  .loc 1 257 13
  # $45.1: Boolean = call(is_343, expression.1, AST_Less_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:rax 
  # jump($45.1, .LABEL__write_295__22, .LABEL__write_295__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__write_295__23
.LABEL__write_295__22:
  .loc 1 258 20
  # $46.1: @FILE = call(write_337, file.1, " < ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_287[rip] # " < "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax 
  .loc 1 258 45
  # $47.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $47.1:rbx 
  .loc 1 258 44
  # $48.1: @AST_Expression = load_struct_member($47.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $48.1:r15 
  .loc 1 258 20
  # $49.1: @FILE = call(write_295, $46.1, $48.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $48.1
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $49.1:rax 
  .loc 1 258 20
  # $50.1: @FILE = call(write_339, $49.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $50.1:rax 
  .loc 1 258 13
  # return($50.1)
  mov [rbp-32], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
.LABEL__write_295__23:
  .loc 1 260 13
  # $51.1: Boolean = call(is_343, expression.1, AST_Less_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Or_Equals_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:rax 
  # jump($51.1, .LABEL__write_295__25, .LABEL__write_295__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_295__26
.LABEL__write_295__25:
  .loc 1 261 20
  # $52.1: @FILE = call(write_337, file.1, " <= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_288[rip] # " <= "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax 
  .loc 1 261 46
  # $53.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $53.1:rbx 
  .loc 1 261 45
  # $54.1: @AST_Expression = load_struct_member($53.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $54.1:r15 
  .loc 1 261 20
  # $55.1: @FILE = call(write_295, $52.1, $54.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $54.1
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $55.1:rax 
  .loc 1 261 20
  # $56.1: @FILE = call(write_339, $55.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $56.1:rax 
  .loc 1 261 13
  # return($56.1)
  mov [rbp-33], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
.LABEL__write_295__26:
  .loc 1 263 13
  # $57.1: Boolean = call(is_343, expression.1, AST_Logic_And_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_And_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:rax 
  # jump($57.1, .LABEL__write_295__28, .LABEL__write_295__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_295__29
.LABEL__write_295__28:
  .loc 1 264 20
  # $58.1: @FILE = call(write_337, file.1, " && ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_345[rip] # " && "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax 
  .loc 1 264 46
  # $59.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $59.1:rbx 
  .loc 1 264 45
  # $60.1: @AST_Expression = load_struct_member($59.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $60.1:r15 
  .loc 1 264 20
  # $61.1: @FILE = call(write_295, $58.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $61.1:rax 
  .loc 1 264 20
  # $62.1: @FILE = call(write_339, $61.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $62.1:rax 
  .loc 1 264 13
  # return($62.1)
  mov [rbp-34], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
.LABEL__write_295__29:
  .loc 1 266 13
  # $63.1: Boolean = call(is_343, expression.1, AST_Logic_Or_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_Or_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:rax 
  # jump($63.1, .LABEL__write_295__31, .LABEL__write_295__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_295__32
.LABEL__write_295__31:
  .loc 1 267 20
  # $64.1: @FILE = call(write_337, file.1, " || ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_346[rip] # " || "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax 
  .loc 1 267 46
  # $65.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $65.1:rbx 
  .loc 1 267 45
  # $66.1: @AST_Expression = load_struct_member($65.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $66.1:r15 
  .loc 1 267 20
  # $67.1: @FILE = call(write_295, $64.1, $66.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $66.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $67.1:rax 
  .loc 1 267 20
  # $68.1: @FILE = call(write_339, $67.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $68.1:rax 
  .loc 1 267 13
  # return($68.1)
  mov [rbp-35], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
.LABEL__write_295__32:
  .loc 1 269 13
  # $69.1: Boolean = call(is_343, expression.1, AST_Modulo_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Modulo_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:rax 
  # jump($69.1, .LABEL__write_295__34, .LABEL__write_295__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_295__35
.LABEL__write_295__34:
  .loc 1 270 20
  # $70.1: @FILE = call(write_337, file.1, " // ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_289[rip] # " // "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax 
  .loc 1 270 46
  # $71.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $71.1:rbx 
  .loc 1 270 45
  # $72.1: @AST_Expression = load_struct_member($71.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $72.1:r15 
  .loc 1 270 20
  # $73.1: @FILE = call(write_295, $70.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $72.1
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $73.1:rax 
  .loc 1 270 20
  # $74.1: @FILE = call(write_339, $73.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $74.1:rax 
  .loc 1 270 13
  # return($74.1)
  mov [rbp-36], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
.LABEL__write_295__35:
  .loc 1 272 13
  # $75.1: Boolean = call(is_343, expression.1, AST_Multiply_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Multiply_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:rax 
  # jump($75.1, .LABEL__write_295__37, .LABEL__write_295__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_295__38
.LABEL__write_295__37:
  .loc 1 273 20
  # $76.1: @FILE = call(write_337, file.1, " * ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_290[rip] # " * "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax 
  .loc 1 273 45
  # $77.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $77.1:rbx 
  .loc 1 273 44
  # $78.1: @AST_Expression = load_struct_member($77.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $78.1:r15 
  .loc 1 273 20
  # $79.1: @FILE = call(write_295, $76.1, $78.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $78.1
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $79.1:rax 
  .loc 1 273 20
  # $80.1: @FILE = call(write_339, $79.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $80.1:rax 
  .loc 1 273 13
  # return($80.1)
  mov [rbp-37], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
.LABEL__write_295__38:
  .loc 1 275 13
  # $81.1: Boolean = call(is_343, expression.1, AST_Not_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Not_Equals_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:rax 
  # jump($81.1, .LABEL__write_295__40, .LABEL__write_295__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_295__41
.LABEL__write_295__40:
  .loc 1 276 20
  # $82.1: @FILE = call(write_337, file.1, " != ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_291[rip] # " != "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax 
  .loc 1 276 46
  # $83.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $83.1:rbx 
  .loc 1 276 45
  # $84.1: @AST_Expression = load_struct_member($83.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $84.1:r15 
  .loc 1 276 20
  # $85.1: @FILE = call(write_295, $82.1, $84.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $84.1
  # [discarded value]: $82.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $85.1:rax 
  .loc 1 276 20
  # $86.1: @FILE = call(write_339, $85.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $85.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $86.1:rax 
  .loc 1 276 13
  # return($86.1)
  mov [rbp-38], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
.LABEL__write_295__41:
  .loc 1 278 13
  # $87.1: Boolean = call(is_343, expression.1, AST_Substract_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Substract_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:rax 
  # jump($87.1, .LABEL__write_295__43, .LABEL__write_295__6)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_295__6
.LABEL__write_295__43:
  .loc 1 279 20
  # $88.1: @FILE = call(write_337, file.1, " - ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_292[rip] # " - "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax 
  .loc 1 279 45
  # $89.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $89.1:rbx 
  .loc 1 279 44
  # $90.1: @AST_Expression = load_struct_member($89.1, right_expression)
  mov r15, [rbx+24]
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $90.1:r15 
  .loc 1 279 20
  # $91.1: @FILE = call(write_295, $88.1, $90.1)
  mov rdi, rax
  mov rsi, r15
  call write_295
  # [discarded value]: $90.1
  # [discarded value]: $88.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $91.1:rax 
  .loc 1 279 20
  # $92.1: @FILE = call(write_339, $91.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_339
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $92.1:rax 
  .loc 1 279 13
  # return($92.1)
  mov [rbp-39], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_295__6:
  .loc 1 283 9
  # $93.1: Boolean = call(is_343, expression.1, AST_Call_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Call_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:rax $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # jump($93.1, .LABEL__write_295__46, .LABEL__write_295__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_295__47
.LABEL__write_295__46:
  .loc 1 284 21
  # $94.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $94.1:rax 
  .loc 1 284 20
  # $95.1: @AST_Expression = load_struct_member($94.1, callee_expression)
  mov rbx, [rax+16]
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $95.1:rbx 
  .loc 1 284 9
  # $96.1: @FILE = call(write_295, file.1, $95.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_295
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $96.1:rax 
  .loc 1 284 9
  # $97.1: @FILE = call(write_339, $96.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_339
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  .loc 1 285 28
  # $98.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $98.1:rax 
  .loc 1 285 27
  # $99.1: @List = load_struct_member($98.1, arguments)
  mov rbx, [rax+24]
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $99.1:rbx 
  .loc 1 285 27
  # call_arguments.1: @List_Iterator = call(create_iterator_329, $99.1)
  mov rdi, rbx
  call create_iterator_329
  # [discarded value]: $99.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:rax 
  .loc 1 286 13
  # $101.1: Boolean = call(has_next_332, call_arguments.1)
  mov rdi, rax
  mov [rbp-40], rax
  call has_next_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:rax 
  # jump($101.1, .LABEL__write_295__50, .LABEL__write_295__49)
  test al, al
  mov [rbp-41], al
  jz .LABEL__write_295__49
.LABEL__write_295__50:
  .loc 1 288 28
  # $103.1: @AST_Expression = call(next_333, call_arguments.1)
  mov rdi, [rbp-40]
  call next_333
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $103.1:rax 
  .loc 1 288 17
  # $104.1: @FILE = call(write_295, file.1, $103.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_295
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  .loc 1 289 21
  # $105.1: Boolean = call(has_next_332, call_arguments.1)
  mov rdi, [rbp-40]
  call has_next_332
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:rax 
  # jump($105.1, .LABEL__write_295__52, .LABEL__write_295__49)
  test al, al
  mov [rbp-42], al
  jz .LABEL__write_295__49
.LABEL__write_295__52:
  .loc 1 290 21
  # $106.1: @FILE = call(write_337, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_38[rip] # ", "
  call write_337
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # jump(.LABEL__write_295__50)
  jmp .LABEL__write_295__50
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
.LABEL__write_295__49:
  .loc 1 296 16
  # $107.1: @FILE = call(write_339, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_339
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $107.1:rax $105.1:[rbp-42] 
  .loc 1 296 9
  # return($107.1)
  mov [rbp-50], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  # [discarded value]: $101.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_295__47:
  .loc 1 299 9
  # $108.1: Boolean = call(is_343, expression.1, AST_Cast_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Cast_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:rax 
  # jump($108.1, .LABEL__write_295__57, .LABEL__write_295__58)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_295__58
.LABEL__write_295__57:
  .loc 1 300 28
  # $109.1: @AST_Cast_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $109.1:rax 
  .loc 1 300 27
  # $110.1: @AST_Expression = load_struct_member($109.1, value_expression)
  mov rbx, [rax+16]
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $110.1:rbx 
  .loc 1 300 16
  # $111.1: @FILE = call(write_295, file.1, $110.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_295
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $111.1:rax 
  .loc 1 300 16
  # $112.1: @FILE = call(write_337, $111.1, " as ")
  mov rdi, rax
  lea rsi, .LABEL__string_347[rip] # " as "
  call write_337
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax 
  .loc 1 300 103
  # $113.1: @AST_Cast_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $113.1:rbx 
  .loc 1 300 102
  # $114.1: @AST_Type = load_struct_member($113.1, type)
  mov r15, [rbx+24]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $114.1:r15 
  .loc 1 300 16
  # $115.1: @FILE = call(write_294, $112.1, $114.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $114.1
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $115.1:rax 
  .loc 1 300 9
  # return($115.1)
  mov [rbp-41], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
.LABEL__write_295__58:
  .loc 1 303 9
  # $116.1: Boolean = call(is_343, expression.1, AST_Literal_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Literal_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:rax 
  # jump($116.1, .LABEL__write_295__60, .LABEL__write_295__61)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_295__61
.LABEL__write_295__60:
  .loc 1 304 28
  # $117.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $117.1:rax 
  .loc 1 304 27
  # $118.1: @Literal_Token = load_struct_member($117.1, literal)
  mov rbx, [rax+16]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $118.1:rbx 
  .loc 1 304 16
  # $119.1: @FILE = call(write_315, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_315
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $119.1:rax 
  .loc 1 304 9
  # return($119.1)
  mov [rbp-42], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
.LABEL__write_295__61:
  .loc 1 307 9
  # $120.1: Boolean = call(is_343, expression.1, AST_New_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_New_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:rax 
  # jump($120.1, .LABEL__write_295__63, .LABEL__write_295__64)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_295__64
.LABEL__write_295__63:
  .loc 1 308 16
  # $121.1: @FILE = call(write_337, file.1, "new ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_348[rip] # "new "
  call write_337
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax 
  .loc 1 308 42
  # $122.1: @AST_New_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $122.1:rbx 
  .loc 1 308 41
  # $123.1: @AST_Type = load_struct_member($122.1, type)
  mov r15, [rbx+16]
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $123.1:r15 
  .loc 1 308 16
  # $124.1: @FILE = call(write_294, $121.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_294
  # [discarded value]: $123.1
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $124.1:rax 
  .loc 1 308 9
  # return($124.1)
  mov [rbp-43], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
.LABEL__write_295__64:
  .loc 1 311 9
  # $125.1: Boolean = call(is_343, expression.1, AST_Member_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Member_Access_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:rax 
  # jump($125.1, .LABEL__write_295__66, .LABEL__write_295__67)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_295__67
.LABEL__write_295__66:
  .loc 1 312 28
  # $126.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $126.1:rax 
  .loc 1 312 27
  # $127.1: @AST_Expression = load_struct_member($126.1, object_expression)
  mov rbx, [rax+16]
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $127.1:rbx 
  .loc 1 312 16
  # $128.1: @FILE = call(write_295, file.1, $127.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_295
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $128.1:rax 
  .loc 1 312 16
  # $129.1: @FILE = call(write_339, $128.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_339
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax 
  .loc 1 312 110
  # $130.1: @AST_Member_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $130.1:rbx 
  .loc 1 312 109
  # $131.1: @Identifier_Token = load_struct_member($130.1, member_name)
  mov r15, [rbx+24]
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $131.1:r15 
  .loc 1 312 16
  # $132.1: @FILE = call(write_315, $129.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_315
  # [discarded value]: $131.1
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $132.1:rax 
  .loc 1 312 9
  # return($132.1)
  mov [rbp-44], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
.LABEL__write_295__67:
  .loc 1 315 9
  # $133.1: Boolean = call(is_343, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_343
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:rax 
  # jump($133.1, .LABEL__write_295__69, .LABEL__write_295__70)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_295__70
.LABEL__write_295__69:
  .loc 1 316 28
  # $134.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $134.1:rax 
  .loc 1 316 27
  # $135.1: @Identifier_Token = load_struct_member($134.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $135.1:rbx 
  .loc 1 316 16
  # $136.1: @FILE = call(write_315, file.1, $135.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_315
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $136.1:rax 
  .loc 1 316 9
  # return($136.1)
  mov [rbp-45], rax
  jmp .LABEL__write_295__end
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
.LABEL__write_295__70:
  .loc 1 319 5
  # $137.1: @FILE = call(flush_341, file.1)
  mov rdi, [rbp-8]
  call flush_341
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  .loc 1 320 11
  # $138.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:rbx 
  .loc 1 320 32
  # $139.1: @String = call(clone_345, "Unsupported AST_Expression type: ")
  lea rdi, .LABEL__string_349[rip] # "Unsupported AST_Expression type: "
  mov [rbp-45], rbx
  call clone_345
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax 
  .loc 1 320 83
  # $140.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $140.1:r15 
  .loc 1 320 83
  # $141.1: @String = load_struct_member_address($140.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $140.1:r15 $141.1:r14 
  .loc 1 320 32
  # $142.1: @String = call(append_354, $139.1, $141.1)
  mov rdi, rax
  mov rsi, r14
  call append_354
  # [discarded value]: $141.1
  # [discarded value]: $140.1
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $142.1:rax 
  .loc 1 320 5
  # call(abort_314, $138.1, $142.1)
  mov rdi, [rbp-45]
  mov rsi, rax
  call abort_314
  # [discarded value]: $142.1
  # [discarded value]: $138.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
  # [discarded value]: $116.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_295__end:
  mov rsp, rbp
  pop rbp
  ret

write_295__stack_frame_size: .word 64

  .loc 9 11 1
  .text
create_scanner_296:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_scanner_296__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_scanner_296__1:
  # source.1: @Source = load_variable(source)
  # [live values]: source.1:rdi 
  .loc 9 12 16
  # scanner.1: @Scanner = new Scanner(source = source.1, current_char_index = 0, current_line = 1, current_column = 1, current_token = undefined)
  mov [rbp-8], rdi
  mov rdi, 40
  call malloc
  #     .source = source.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .current_char_index = 0
  mov QWORD PTR [rax+8], 0
  #     .current_line = 1
  mov QWORD PTR [rax+16], 1
  #     .current_column = 1
  mov QWORD PTR [rax+24], 1
  #     .current_token = undefined
  # [discarded value]: source.1
  # [live values]: scanner.1:rax 
  .loc 9 13 29
  # $2.1: @Token = call(scan_token_301, scanner.1)
  mov rdi, rax
  mov [rbp-8], rax
  call scan_token_301
  # [live values]: scanner.1:[rbp-8] $2.1:rax 
  .loc 9 13 5
  # store_struct_member(scanner.1, current_token, $2.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $2.1
  # [live values]: scanner.1:rbx:[rbp-8] 
  .loc 9 14 5
  # return(scanner.1)
  mov rax, rbx
  jmp .LABEL__create_scanner_296__end
  # [discarded value]: scanner.1
  # [live values]: 
.LABEL__create_scanner_296__end:
  mov rsp, rbp
  pop rbp
  ret

create_scanner_296__stack_frame_size: .word 16

  .loc 9 17 1
  .text
peek_token_297:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_token_297__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_token_297__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # offset.1: Int = load_variable(offset)
  # [live values]: self.1:rdi offset.1:rsi 
  .loc 9 18 9
  # $1.1: Boolean = offset.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi offset.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__peek_token_297__2, .LABEL__peek_token_297__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__peek_token_297__3
.LABEL__peek_token_297__2:
  .loc 9 19 9
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__peek_token_297__3:
  .loc 9 21 14
  # token.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:rbx 
  # jump(.LABEL__peek_token_297__4)
  mov [rbp-25], rbx
.LABEL__peek_token_297__4:
  # offset.5: Int = phi(offset.1, offset.4)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] 
  # token.2: @Token = phi(token.1, token.5)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  .loc 9 23 13
  # $3.1: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $3.1:rbx 
  .loc 9 23 13
  # $4.1: Boolean = $3.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__peek_token_297__6, .LABEL__peek_token_297__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__peek_token_297__7
.LABEL__peek_token_297__6:
  .loc 9 24 32
  # $5.1: @Token = call(scan_token_301, self.1)
  mov rdi, [rbp-17]
  call scan_token_301
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 9 24 13
  # store_struct_member(token.2, next_token, $5.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rbx:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__peek_token_297__7)
.LABEL__peek_token_297__7:
  .loc 9 26 17
  # token.5: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] 
  .loc 9 27 13
  # $7.1: Boolean = offset.5 == 0
  cmp QWORD PTR [rbp-9], 0
  sete al
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__peek_token_297__8, .LABEL__peek_token_297__9)
  test al, al
  mov [rbp-27], al
  mov [rbp-25], rbx
  jz .LABEL__peek_token_297__9
.LABEL__peek_token_297__8:
  .loc 9 28 13
  # return(token.5)
  mov rax, [rbp-25]
  jmp .LABEL__peek_token_297__end
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
.LABEL__peek_token_297__9:
  .loc 9 30 18
  # $8.1: Int = offset.5 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] $8.1:rax 
  .loc 9 30 9
  # offset.4: Int = $8.1
  mov [rbp-35], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:rax:[rbp-9] 
  # jump(.LABEL__peek_token_297__4)
  mov [rbp-9], rax
  jmp .LABEL__peek_token_297__4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:[rbp-9] 
  # [discarded value]: offset.4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] 
  # [discarded value]: token.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  # [discarded value]: token.2
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] 
  # [discarded value]: offset.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__peek_token_297__end:
  mov rsp, rbp
  pop rbp
  ret

peek_token_297__stack_frame_size: .word 48

  .loc 9 34 1
  .text
next_token_298:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_token_298__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_token_298__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 35 9
  # $1.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 35 9
  # $2.1: @Token = load_struct_member($1.1, next_token)
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 9 35 9
  # $3.1: Boolean = $2.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # jump($3.1, .LABEL__next_token_298__2, .LABEL__next_token_298__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__next_token_298__3
.LABEL__next_token_298__2:
  .loc 9 36 9
  # $4.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 9 36 41
  # $5.1: @Token = call(scan_token_301, self.1)
  mov rdi, rax
  mov [rbp-17], rbx
  call scan_token_301
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] $4.1:[rbp-17] $5.1:rax 
  .loc 9 36 9
  # store_struct_member($4.1, next_token, $5.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__next_token_298__3)
.LABEL__next_token_298__3:
  .loc 9 38 26
  # $6.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $6.1:rbx 
  .loc 9 38 26
  # $7.1: @Token = load_struct_member($6.1, next_token)
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $7.1:r15 
  .loc 9 38 5
  # store_struct_member(self.1, current_token, $7.1)
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] 
  .loc 9 39 12
  # $8.1: @Token = load_struct_member(self.1, current_token)
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $8.1:rbx 
  .loc 9 39 5
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__next_token_298__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_token_298__end:
  mov rsp, rbp
  pop rbp
  ret

next_token_298__stack_frame_size: .word 32

  .loc 9 42 1
  .text
peek_char_299:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_char_299__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_char_299__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 43 32
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 43 12
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax $2.1:rbx 
  .loc 9 43 12
  # $3.1: @Int8 = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: $1.1:rax $3.1:r15 
  .loc 9 43 12
  # $4.1: Int8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: $4.1:rbx 
  .loc 9 43 5
  # return($4.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__peek_char_299__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__peek_char_299__end:
  mov rsp, rbp
  pop rbp
  ret

peek_char_299__stack_frame_size: .word 16

  .loc 9 46 1
  .text
next_char_300:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_char_300__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_char_300__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 47 38
  # $1.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 47 18
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 47 18
  # $3.1: @Int8 = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $1.1:rax $3.1:r15 
  .loc 9 47 18
  # next_char.1: Int8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi next_char.1:rbx 
  .loc 9 48 9
  # $5.1: Boolean = next_char.1 != '\0'
  cmp bl, 0
  setne al
  # [live values]: self.1:rdi next_char.1:rbx $5.1:rax 
  # jump($5.1, .LABEL__next_char_300__2, .LABEL__next_char_300__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], bl
  mov [rbp-10], rdi
  jz .LABEL__next_char_300__3
.LABEL__next_char_300__2:
  .loc 9 49 35
  # $6.1: Int = load_struct_member(self.1, current_char_index)
  mov rax, [rbp-10]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $6.1:rbx 
  .loc 9 49 35
  # $7.1: Int = $6.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $7.1:r15 
  .loc 9 49 9
  # store_struct_member(self.1, current_char_index, $7.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  .loc 9 50 13
  # $8.1: Boolean = next_char.1 == '\n'
  cmp BYTE PTR [rbp-2], 10
  sete bl
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:rbx 
  # jump($8.1, .LABEL__next_char_300__4, .LABEL__next_char_300__6)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__next_char_300__6
.LABEL__next_char_300__4:
  .loc 9 51 33
  # $11.1: Int = load_struct_member(self.1, current_line)
  mov rax, [rbp-10]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $11.1:rbx 
  .loc 9 51 33
  # $12.1: Int = $11.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $12.1:r15 
  .loc 9 51 13
  # store_struct_member(self.1, current_line, $12.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  .loc 9 52 13
  # store_struct_member(self.1, current_column, 1)
  mov QWORD PTR [rax+24], 1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_300__3)
.LABEL__next_char_300__3:
  .loc 9 57 5
  # return(next_char.1)
  mov al, [rbp-2]
  jmp .LABEL__next_char_300__end
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
.LABEL__next_char_300__6:
  .loc 9 54 35
  # $9.1: Int = load_struct_member(self.1, current_column)
  mov rax, [rbp-10]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $9.1:rbx 
  .loc 9 54 35
  # $10.1: Int = $9.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $10.1:r15 
  .loc 9 54 13
  # store_struct_member(self.1, current_column, $10.1)
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_300__3)
  jmp .LABEL__next_char_300__3
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] 
  # [discarded value]: next_char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_char_300__end:
  mov rsp, rbp
  pop rbp
  ret

next_char_300__stack_frame_size: .word 16

  .loc 9 60 1
  .text
scan_token_301:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_token_301__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_token_301__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 4 19
  # $2.1: @Int8 = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 9 61 21
  # token_lexeme.1: @String = new String(data = $2.1, data_size = 16, length = 0)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  #     .data = $2.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:rax 
  .loc 9 62 52
  # $4.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 
  .loc 9 62 72
  # $5.1: Int = load_struct_member(self.1, current_line)
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 
  .loc 9 62 100
  # $6.1: Int = load_struct_member(self.1, current_column)
  mov r13, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 $6.1:r13 
  .loc 9 62 23
  # token_location.1: @Source_Location = new Source_Location(source = $4.1, line = $5.1, column = $6.1)
  mov [rbp-16], rax
  mov [rbp-24], r13
  mov [rbp-32], r14
  mov [rbp-40], r15
  mov rdi, 24
  call malloc
  #     .source = $4.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  #     .line = $5.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  #     .column = $6.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  .loc 9 64 18
  # next_char.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call peek_char_299
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:rax 
  .loc 9 65 9
  # $9.1: Boolean = call(is_identifier_start_303, next_char.1)
  mov dil, al
  mov [rbp-25], al
  call is_identifier_start_303
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__scan_token_301__2, .LABEL__scan_token_301__3)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_token_301__3
.LABEL__scan_token_301__2:
  .loc 9 66 16
  # $10.1: @Token = call(scan_identifier_token_310, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_identifier_token_310
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $10.1:rax 
  .loc 9 66 9
  # return($10.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
.LABEL__scan_token_301__3:
  .loc 9 68 9
  # $11.1: Boolean = call(is_digit_302, next_char.1)
  mov dil, [rbp-25]
  call is_digit_302
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__scan_token_301__5, .LABEL__scan_token_301__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_token_301__6
.LABEL__scan_token_301__5:
  .loc 9 69 16
  # $12.1: @Token = call(scan_integer_token_311, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_integer_token_311
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $12.1:rax 
  .loc 9 69 9
  # return($12.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__scan_token_301__6:
  .loc 9 71 9
  # $13.1: Boolean = next_char.1 == '\''
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:rax 
  # jump($13.1, .LABEL__scan_token_301__8, .LABEL__scan_token_301__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_token_301__9
.LABEL__scan_token_301__8:
  .loc 9 72 16
  # $14.1: @Token = call(scan_character_token_307, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_character_token_307
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $14.1:rax 
  .loc 9 72 9
  # return($14.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_token_301__9:
  .loc 9 74 9
  # $15.1: Boolean = next_char.1 == '"'
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # jump($15.1, .LABEL__scan_token_301__11, .LABEL__scan_token_301__12)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_token_301__12
.LABEL__scan_token_301__11:
  .loc 9 75 16
  # $16.1: @Token = call(scan_string_token_313, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_string_token_313
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $16.1:rax 
  .loc 9 75 9
  # return($16.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
.LABEL__scan_token_301__12:
  .loc 9 77 9
  # $17.1: Boolean = next_char.1 == '\\'
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:rax 
  # jump($17.1, .LABEL__scan_token_301__14, .LABEL__scan_token_301__15)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_token_301__15
.LABEL__scan_token_301__14:
  .loc 9 78 16
  # $18.1: @Token = call(scan_comment_token_309, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_comment_token_309
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $18.1:rax 
  .loc 9 78 9
  # return($18.1)
  mov [rbp-38], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
.LABEL__scan_token_301__15:
  .loc 9 80 9
  # $19.1: Boolean = call(is_space_306, next_char.1)
  mov dil, [rbp-25]
  call is_space_306
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:rax 
  # jump($19.1, .LABEL__scan_token_301__17, .LABEL__scan_token_301__18)
  test al, al
  mov [rbp-31], al
  jz .LABEL__scan_token_301__18
.LABEL__scan_token_301__17:
  .loc 9 81 16
  # $20.1: @Token = call(scan_space_token_312, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_space_token_312
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $20.1:rax 
  .loc 9 81 9
  # return($20.1)
  mov [rbp-39], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
.LABEL__scan_token_301__18:
  .loc 9 83 9
  # $21.1: Boolean = next_char.1 == '\n'
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:rax 
  # jump($21.1, .LABEL__scan_token_301__20, .LABEL__scan_token_301__21)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_token_301__21
.LABEL__scan_token_301__20:
  .loc 9 84 9
  # $22.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-8]
  call next_char_300
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  .loc 9 85 16
  # $23.1: @End_Of_Line_Token = new End_Of_Line_Token(object_type = End_Of_Line_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = End_Of_Line_Token
  mov rbx, End_Of_Line_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  .loc 9 85 9
  # return($23.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
.LABEL__scan_token_301__21:
  .loc 9 87 9
  # $24.1: Boolean = next_char.1 == '\0'
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:rax 
  # jump($24.1, .LABEL__scan_token_301__23, .LABEL__scan_token_301__24)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_token_301__24
.LABEL__scan_token_301__23:
  .loc 9 88 9
  # $25.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-8]
  call next_char_300
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 89 16
  # $26.1: @End_Of_File_Token = new End_Of_File_Token(object_type = End_Of_File_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = End_Of_File_Token
  mov rbx, End_Of_File_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  .loc 9 89 9
  # return($26.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
.LABEL__scan_token_301__24:
  .loc 9 91 25
  # $27.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-8]
  call next_char_300
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $27.1:rax 
  .loc 9 91 5
  # $28.1: @String = call(append_352, token_lexeme.1, $27.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_352
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 92 12
  # $29.1: @Other_Token = new Other_Token(object_type = Other_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Other_Token
  mov rbx, Other_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  .loc 9 92 5
  # return($29.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_301__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [discarded value]: next_char.1
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_token_301__end:
  mov rsp, rbp
  pop rbp
  ret

scan_token_301__stack_frame_size: .word 48

  .loc 9 95 1
  .text
is_digit_302:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_digit_302__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_digit_302__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 96 12
  # $1.1: Int = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 96 27
  # $2.1: Int = cast('0')
  mov bl, 48
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 96 12
  # $3.1: Boolean = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $3.1:r15 
  .loc 9 96 12
  # $4.1: Boolean = $3.1
  mov [rbp-1], r15b
  # [discarded value]: $3.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_digit_302__2, .LABEL__is_digit_302__3)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_digit_302__3
.LABEL__is_digit_302__2:
  .loc 9 96 41
  # $5.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 96 56
  # $6.1: Int = cast('9')
  mov bl, 57
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 96 41
  # $7.1: Boolean = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $7.1:r15 
  .loc 9 96 12
  # $4.2: Boolean = $7.1
  mov [rbp-3], r15b
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_digit_302__3)
  mov [rbp-2], r15b
.LABEL__is_digit_302__3:
  .loc 9 96 12
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $4.3:[rbp-2] 
  .loc 9 96 5
  # return($4.3)
  mov al, [rbp-2]
  jmp .LABEL__is_digit_302__end
  # [discarded value]: $4.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_digit_302__end:
  mov rsp, rbp
  pop rbp
  ret

is_digit_302__stack_frame_size: .word 16

  .loc 9 99 1
  .text
is_identifier_start_303:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_start_303__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_start_303__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 100 12
  # $2.1: Boolean = call(is_letter_305, char.1)
  mov [rbp-1], dil
  call is_letter_305
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__is_identifier_start_303__3, .LABEL__is_identifier_start_303__2)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_start_303__2
.LABEL__is_identifier_start_303__3:
  .loc 9 100 12
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.3:[rbp-2] 
  .loc 9 100 5
  # return($2.3)
  mov al, [rbp-2]
  jmp .LABEL__is_identifier_start_303__end
  # [discarded value]: $2.3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
.LABEL__is_identifier_start_303__2:
  .loc 9 100 32
  # $3.1: Boolean = char.1 == '_'
  cmp BYTE PTR [rbp-1], 95
  sete al
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $3.1:rax 
  .loc 9 100 12
  # $2.2: Boolean = $3.1
  mov [rbp-3], al
  # [discarded value]: $3.1
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:rax:[rbp-2] 
  # jump(.LABEL__is_identifier_start_303__3)
  mov [rbp-2], al
  jmp .LABEL__is_identifier_start_303__3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:[rbp-2] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_start_303__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_start_303__stack_frame_size: .word 16

  .loc 9 103 1
  .text
is_identifier_body_304:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_body_304__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_body_304__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 104 9
  # $1.1: Boolean = call(is_identifier_start_303, char.1)
  mov [rbp-1], dil
  call is_identifier_start_303
  # [live values]: char.1:[rbp-1] $1.1:rax 
  # jump($1.1, .LABEL__is_identifier_body_304__2, .LABEL__is_identifier_body_304__3)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_body_304__3
.LABEL__is_identifier_body_304__2:
  .loc 9 105 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_identifier_body_304__end
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
.LABEL__is_identifier_body_304__3:
  .loc 9 107 12
  # $2.1: Boolean = call(is_digit_302, char.1)
  mov dil, [rbp-1]
  call is_digit_302
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] $2.1:rax 
  .loc 9 107 5
  # return($2.1)
  mov [rbp-3], al
  jmp .LABEL__is_identifier_body_304__end
  # [discarded value]: $2.1
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
  # [discarded value]: $1.1
  # [live values]: char.1:[rbp-1] 
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_body_304__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_body_304__stack_frame_size: .word 16

  .loc 9 110 1
  .text
is_letter_305:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_letter_305__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_letter_305__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 111 13
  # $1.1: Int = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 111 28
  # $2.1: Int = cast('a')
  mov bl, 97
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 111 13
  # $3.1: Boolean = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $3.1:r15 
  .loc 9 111 13
  # $4.1: Boolean = $3.1
  mov [rbp-1], r15b
  # [discarded value]: $3.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_letter_305__4, .LABEL__is_letter_305__5)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_letter_305__5
.LABEL__is_letter_305__4:
  .loc 9 111 42
  # $5.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 111 57
  # $6.1: Int = cast('z')
  mov bl, 122
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 111 42
  # $7.1: Boolean = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $7.1:r15 
  .loc 9 111 13
  # $4.2: Boolean = $7.1
  mov [rbp-3], r15b
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_letter_305__5)
  mov [rbp-2], r15b
.LABEL__is_letter_305__5:
  .loc 9 111 13
  # $8.1: Boolean = phi($4.1, $4.2)
  mov al, [rbp-2]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:rax 
  # jump($8.1, .LABEL__is_letter_305__3, .LABEL__is_letter_305__2)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_letter_305__2
.LABEL__is_letter_305__3:
  .loc 9 111 12
  # $8.3: Boolean = phi($8.1, $8.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $8.3:[rbp-3] $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 5
  # return($8.3)
  mov al, [rbp-3]
  jmp .LABEL__is_letter_305__end
  # [discarded value]: $8.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
.LABEL__is_letter_305__2:
  .loc 9 111 73
  # $9.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 88
  # $10.1: Int = cast('A')
  mov bl, 65
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $10.1:rbx $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 73
  # $11.1: Boolean = $9.1 >= $10.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $11.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 73
  # $12.1: Boolean = $11.1
  mov [rbp-4], r15b
  # [discarded value]: $11.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  # jump($12.1, .LABEL__is_letter_305__6, .LABEL__is_letter_305__7)
  test r15b, r15b
  mov [rbp-4], r15b
  jz .LABEL__is_letter_305__7
.LABEL__is_letter_305__6:
  .loc 9 111 102
  # $13.1: Int = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax 
  .loc 9 111 117
  # $14.1: Int = cast('Z')
  mov bl, 90
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax $14.1:rbx 
  .loc 9 111 102
  # $15.1: Boolean = $13.1 <= $14.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $15.1:r15 
  .loc 9 111 73
  # $12.2: Boolean = $15.1
  mov [rbp-5], r15b
  # [discarded value]: $15.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:r15:[rbp-4] 
  # jump(.LABEL__is_letter_305__7)
  mov [rbp-4], r15b
.LABEL__is_letter_305__7:
  .loc 9 111 73
  # $8.2: Boolean = phi($12.1, $12.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:rax:[rbp-3] 
  # jump(.LABEL__is_letter_305__3)
  mov [rbp-3], al
  jmp .LABEL__is_letter_305__3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [discarded value]: $12.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $12.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_letter_305__end:
  mov rsp, rbp
  pop rbp
  ret

is_letter_305__stack_frame_size: .word 16

  .loc 9 114 1
  .text
is_space_306:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_space_306__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_space_306__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 115 12
  # $1.1: Boolean = char.1 == ' '
  cmp dil, 32
  sete al
  # [discarded value]: char.1
  # [live values]: $1.1:rax 
  .loc 9 115 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__is_space_306__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__is_space_306__end:
  mov rsp, rbp
  pop rbp
  ret

is_space_306__stack_frame_size: .word 16

  .loc 9 118 1
  .text
scan_character_token_307:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_character_token_307__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_character_token_307__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 119 9
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 119 9
  # $2.1: Boolean = $1.1 != '\''
  cmp al, 39
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_character_token_307__2, .LABEL__scan_character_token_307__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_character_token_307__3
.LABEL__scan_character_token_307__2:
  .loc 9 120 9
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_character_token_307__3:
  .loc 9 124 25
  # $3.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 124 5
  # $4.1: @String = call(append_352, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_352
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  .loc 9 125 13
  # char.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:rax 
  .loc 9 126 5
  # $6.1: @String = call(append_352, token_lexeme.1, char.1)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_352
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] 
  .loc 9 127 9
  # $7.1: Boolean = char.1 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_character_token_307__4, .LABEL__scan_character_token_307__5)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_character_token_307__5
.LABEL__scan_character_token_307__4:
  .loc 9 128 16
  # $8.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 128 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_character_token_307__5:
  .loc 9 130 9
  # $9.1: Boolean = char.1 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_character_token_307__7, .LABEL__scan_character_token_307__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_character_token_307__9
.LABEL__scan_character_token_307__7:
  .loc 9 131 16
  # char.8: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:rax:[rbp-26] 
  .loc 9 132 9
  # $21.1: @String = call(append_352, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_352
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  .loc 9 133 13
  # $22.1: Boolean = call(is_escape_308, char.8)
  mov dil, [rbp-26]
  call is_escape_308
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $22.1:rax 
  .loc 9 133 13
  # $23.1: Boolean = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:rbx 
  # jump($23.1, .LABEL__scan_character_token_307__20, .LABEL__scan_character_token_307__21)
  test bl, bl
  mov [rbp-29], bl
  jz .LABEL__scan_character_token_307__21
.LABEL__scan_character_token_307__20:
  .loc 9 134 20
  # $24.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  .loc 9 134 13
  # return($24.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
.LABEL__scan_character_token_307__21:
  .loc 9 136 13
  # $25.1: Boolean = char.8 == 'n'
  cmp BYTE PTR [rbp-26], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:rax 
  # jump($25.1, .LABEL__scan_character_token_307__23, .LABEL__scan_character_token_307__25)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_character_token_307__25
.LABEL__scan_character_token_307__23:
  .loc 9 137 13
  # value.8: Int8 = '\n'
  mov al, 10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:rax 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
.LABEL__scan_character_token_307__24:
  # value.10: Int8 = phi(value.8, value.7, value.6, value.5, value.4, value.3)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  .loc 9 151 16
  # char.18: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:rax:[rbp-26] 
  .loc 9 152 9
  # $32.1: @String = call(append_352, token_lexeme.1, char.18)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_352
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:[rbp-26] 
  .loc 9 153 13
  # $33.1: Boolean = char.18 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:rax 
  # jump($33.1, .LABEL__scan_character_token_307__41, .LABEL__scan_character_token_307__8)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_307__8
.LABEL__scan_character_token_307__41:
  .loc 9 154 20
  # $34.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  .loc 9 154 13
  # return($34.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
.LABEL__scan_character_token_307__8:
  # value.9: Int8 = phi(value.2, value.10)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 12
  # $35.1: @Character_Token = new Character_Token(object_type = Character_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.9, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Character_Token
  mov rbx, Character_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.9
  mov r14b, [rbp-31]
  mov BYTE PTR [rax+32], r14b
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 5
  # return($35.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
.LABEL__scan_character_token_307__25:
  .loc 9 138 20
  # $26.1: Boolean = char.8 == '\"'
  cmp BYTE PTR [rbp-26], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:rax 
  # jump($26.1, .LABEL__scan_character_token_307__26, .LABEL__scan_character_token_307__28)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_307__28
.LABEL__scan_character_token_307__26:
  .loc 9 139 13
  # value.7: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_307__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:[rbp-31] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
.LABEL__scan_character_token_307__28:
  .loc 9 140 20
  # $27.1: Boolean = char.8 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:rax 
  # jump($27.1, .LABEL__scan_character_token_307__29, .LABEL__scan_character_token_307__31)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_307__31
.LABEL__scan_character_token_307__29:
  .loc 9 141 13
  # value.6: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_307__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:[rbp-31] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
.LABEL__scan_character_token_307__31:
  .loc 9 142 20
  # $28.1: Boolean = char.8 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:rax 
  # jump($28.1, .LABEL__scan_character_token_307__32, .LABEL__scan_character_token_307__34)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_307__34
.LABEL__scan_character_token_307__32:
  .loc 9 143 13
  # value.5: Int8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_307__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:[rbp-31] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
.LABEL__scan_character_token_307__34:
  .loc 9 144 20
  # $29.1: Boolean = char.8 == 't'
  cmp BYTE PTR [rbp-26], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:rax 
  # jump($29.1, .LABEL__scan_character_token_307__35, .LABEL__scan_character_token_307__37)
  test al, al
  mov [rbp-35], al
  jz .LABEL__scan_character_token_307__37
.LABEL__scan_character_token_307__35:
  .loc 9 145 13
  # value.4: Int8 = '\t'
  mov al, 9
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_307__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:[rbp-31] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
.LABEL__scan_character_token_307__37:
  .loc 9 146 20
  # $30.1: Boolean = char.8 == '0'
  cmp BYTE PTR [rbp-26], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:rax 
  # jump($30.1, .LABEL__scan_character_token_307__38, .LABEL__scan_character_token_307__40)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_character_token_307__40
.LABEL__scan_character_token_307__38:
  .loc 9 147 13
  # value.3: Int8 = '\0'
  mov al, 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_307__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_307__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:[rbp-31] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
.LABEL__scan_character_token_307__40:
  .loc 9 149 13
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_character_token_307__9:
  .loc 9 157 13
  # $10.1: Boolean = char.1 == '\0'
  cmp BYTE PTR [rbp-26], 0
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  .loc 9 157 13
  # $11.1: Boolean = $10.1
  mov [rbp-32], al
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_character_token_307__13, .LABEL__scan_character_token_307__12)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_307__12
.LABEL__scan_character_token_307__13:
  .loc 9 157 13
  # $13.1: Boolean = phi($11.1, $11.2)
  mov al, [rbp-32]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:rax 
  # jump($13.1, .LABEL__scan_character_token_307__11, .LABEL__scan_character_token_307__10)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_307__10
.LABEL__scan_character_token_307__11:
  .loc 9 157 13
  # $13.3: Boolean = phi($13.1, $13.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # jump($13.3, .LABEL__scan_character_token_307__14, .LABEL__scan_character_token_307__15)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__scan_character_token_307__15
.LABEL__scan_character_token_307__14:
  .loc 9 158 20
  # $15.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  .loc 9 158 13
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
.LABEL__scan_character_token_307__15:
  .loc 9 160 9
  # value.2: Int8 = char.1
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:rax:[rbp-31] 
  .loc 9 161 16
  # char.7: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  mov [rbp-31], al
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:rax:[rbp-26] 
  .loc 9 162 9
  # $17.1: @String = call(append_352, token_lexeme.1, char.7)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_352
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:[rbp-26] 
  .loc 9 163 13
  # $18.1: Boolean = char.7 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:rax 
  # jump($18.1, .LABEL__scan_character_token_307__17, .LABEL__scan_character_token_307__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_307__8
.LABEL__scan_character_token_307__17:
  .loc 9 164 20
  # $19.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  .loc 9 164 13
  # return($19.1)
  mov [rbp-42], rax
  jmp .LABEL__scan_character_token_307__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
.LABEL__scan_character_token_307__10:
  .loc 9 157 45
  # $14.1: Boolean = char.1 == '\t'
  cmp BYTE PTR [rbp-26], 9
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $14.1:rax $13.1:[rbp-33] 
  .loc 9 157 13
  # $13.2: Boolean = $14.1
  mov [rbp-34], al
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:rax:[rbp-33] $13.1:[rbp-33] 
  # jump(.LABEL__scan_character_token_307__11)
  mov [rbp-33], al
  jmp .LABEL__scan_character_token_307__11
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
.LABEL__scan_character_token_307__12:
  .loc 9 157 29
  # $12.1: Boolean = char.1 == '\n'
  cmp BYTE PTR [rbp-26], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $12.1:rax 
  .loc 9 157 13
  # $11.2: Boolean = $12.1
  mov [rbp-33], al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:rax:[rbp-32] 
  # jump(.LABEL__scan_character_token_307__13)
  mov [rbp-32], al
  jmp .LABEL__scan_character_token_307__13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:[rbp-32] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] 
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_character_token_307__end:
  mov rsp, rbp
  pop rbp
  ret

scan_character_token_307__stack_frame_size: .word 48

  .loc 9 170 1
  .text
is_escape_308:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_escape_308__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_escape_308__1:
  # char.1: Int8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 171 12
  # $1.1: Boolean = char.1 == 'n'
  cmp dil, 110
  sete al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 171 12
  # $2.1: Boolean = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $2.1:rax 
  # jump($2.1, .LABEL__is_escape_308__11, .LABEL__is_escape_308__10)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], dil
  jz .LABEL__is_escape_308__10
.LABEL__is_escape_308__11:
  .loc 9 171 12
  # $4.1: Boolean = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__is_escape_308__9, .LABEL__is_escape_308__8)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_escape_308__8
.LABEL__is_escape_308__9:
  .loc 9 171 12
  # $6.1: Boolean = phi($4.1, $4.2)
  mov al, [rbp-3]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:rax $4.1:[rbp-3] 
  # jump($6.1, .LABEL__is_escape_308__7, .LABEL__is_escape_308__6)
  test al, al
  mov [rbp-4], al
  jz .LABEL__is_escape_308__6
.LABEL__is_escape_308__7:
  .loc 9 171 12
  # $8.1: Boolean = phi($6.1, $6.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($8.1, .LABEL__is_escape_308__5, .LABEL__is_escape_308__4)
  test al, al
  mov [rbp-5], al
  jz .LABEL__is_escape_308__4
.LABEL__is_escape_308__5:
  .loc 9 171 12
  # $10.1: Boolean = phi($8.1, $8.2)
  mov al, [rbp-5]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($10.1, .LABEL__is_escape_308__3, .LABEL__is_escape_308__2)
  test al, al
  mov [rbp-6], al
  jz .LABEL__is_escape_308__2
.LABEL__is_escape_308__3:
  .loc 9 171 12
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.3:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 5
  # return($10.3)
  mov al, [rbp-6]
  jmp .LABEL__is_escape_308__end
  # [discarded value]: $10.3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_308__2:
  .loc 9 171 90
  # $11.1: Boolean = char.1 == '0'
  cmp BYTE PTR [rbp-2], 48
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $11.1:rax $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $10.2: Boolean = $11.1
  mov [rbp-7], al
  # [discarded value]: $11.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:rax:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_308__3)
  mov [rbp-6], al
  jmp .LABEL__is_escape_308__3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_308__4:
  .loc 9 171 74
  # $9.1: Boolean = char.1 == '\\'
  cmp BYTE PTR [rbp-2], 92
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $9.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $8.2: Boolean = $9.1
  mov [rbp-6], al
  # [discarded value]: $9.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:rax:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_308__5)
  mov [rbp-5], al
  jmp .LABEL__is_escape_308__5
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_308__6:
  .loc 9 171 58
  # $7.1: Boolean = char.1 == '\''
  cmp BYTE PTR [rbp-2], 39
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $7.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $6.2: Boolean = $7.1
  mov [rbp-5], al
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:rax:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_308__7)
  mov [rbp-4], al
  jmp .LABEL__is_escape_308__7
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
.LABEL__is_escape_308__8:
  .loc 9 171 42
  # $5.1: Boolean = char.1 == '\"'
  cmp BYTE PTR [rbp-2], 34
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $5.1:rax $4.1:[rbp-3] 
  .loc 9 171 12
  # $4.2: Boolean = $5.1
  mov [rbp-4], al
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:rax:[rbp-3] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_308__9)
  mov [rbp-3], al
  jmp .LABEL__is_escape_308__9
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:[rbp-3] $4.1:[rbp-3] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [discarded value]: $4.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
.LABEL__is_escape_308__10:
  .loc 9 171 27
  # $3.1: Boolean = char.1 == 't'
  cmp BYTE PTR [rbp-2], 116
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $3.1:rax 
  .loc 9 171 12
  # $2.2: Boolean = $3.1
  mov [rbp-3], al
  # [discarded value]: $3.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__is_escape_308__11)
  mov [rbp-1], al
  jmp .LABEL__is_escape_308__11
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_escape_308__end:
  mov rsp, rbp
  pop rbp
  ret

is_escape_308__stack_frame_size: .word 16

  .loc 9 174 1
  .text
scan_comment_token_309:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_comment_token_309__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_comment_token_309__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_comment_token_309__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_comment_token_309__2:
  .loc 9 175 12
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-24]
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 175 12
  # $2.1: Boolean = $1.1 != '\n'
  cmp al, 10
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_comment_token_309__3, .LABEL__scan_comment_token_309__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_comment_token_309__4
.LABEL__scan_comment_token_309__3:
  .loc 9 176 29
  # $3.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 176 9
  # $4.1: @String = call(append_352, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_352
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_comment_token_309__2)
  jmp .LABEL__scan_comment_token_309__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_comment_token_309__4:
  .loc 9 178 12
  # $5.1: @Comment_Token = new Comment_Token(object_type = Comment_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Comment_Token
  mov rbx, Comment_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] $5.1:rax 
  .loc 9 178 5
  # return($5.1)
  mov [rbp-33], rax
  jmp .LABEL__scan_comment_token_309__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_comment_token_309__end:
  mov rsp, rbp
  pop rbp
  ret

scan_comment_token_309__stack_frame_size: .word 48

  .loc 9 181 1
  .text
scan_identifier_token_310:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_identifier_token_310__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_identifier_token_310__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_identifier_token_310__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_identifier_token_310__2:
  .loc 9 182 12
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-24]
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 182 12
  # $2.1: Boolean = call(is_identifier_body_304, $1.1)
  mov dil, al
  call is_identifier_body_304
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_identifier_token_310__3, .LABEL__scan_identifier_token_310__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__scan_identifier_token_310__4
.LABEL__scan_identifier_token_310__3:
  .loc 9 183 29
  # $3.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 183 9
  # $4.1: @String = call(append_352, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_352
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_identifier_token_310__2)
  jmp .LABEL__scan_identifier_token_310__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_identifier_token_310__4:
  .loc 9 185 9
  # $5.1: Boolean = call(equals_346, token_lexeme.1, "as")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_295[rip] # "as"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__scan_identifier_token_310__5, .LABEL__scan_identifier_token_310__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_identifier_token_310__6
.LABEL__scan_identifier_token_310__5:
  .loc 9 186 16
  # $6.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  .loc 9 186 9
  # return($6.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__scan_identifier_token_310__6:
  .loc 9 188 9
  # $7.1: Boolean = call(equals_346, token_lexeme.1, "break")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_297[rip] # "break"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_identifier_token_310__8, .LABEL__scan_identifier_token_310__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_identifier_token_310__9
.LABEL__scan_identifier_token_310__8:
  .loc 9 189 16
  # $8.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 189 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_identifier_token_310__9:
  .loc 9 191 9
  # $9.1: Boolean = call(equals_346, token_lexeme.1, "else")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_302[rip] # "else"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_identifier_token_310__11, .LABEL__scan_identifier_token_310__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_identifier_token_310__12
.LABEL__scan_identifier_token_310__11:
  .loc 9 192 16
  # $10.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  .loc 9 192 9
  # return($10.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_identifier_token_310__12:
  .loc 9 194 9
  # $11.1: Boolean = call(equals_346, token_lexeme.1, "external")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_305[rip] # "external"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_identifier_token_310__14, .LABEL__scan_identifier_token_310__15)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_identifier_token_310__15
.LABEL__scan_identifier_token_310__14:
  .loc 9 195 16
  # $12.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  .loc 9 195 9
  # return($12.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
.LABEL__scan_identifier_token_310__15:
  .loc 9 197 9
  # $13.1: Boolean = call(equals_346, token_lexeme.1, "false")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_350[rip] # "false"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:rax 
  # jump($13.1, .LABEL__scan_identifier_token_310__17, .LABEL__scan_identifier_token_310__18)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_identifier_token_310__18
.LABEL__scan_identifier_token_310__17:
  .loc 9 198 16
  # $14.1: @Boolean_Token = new Boolean_Token(object_type = Boolean_Token, lexeme = token_lexeme.1, location = token_location.1, value = false, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Boolean_Token
  mov rbx, Boolean_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = false
  mov BYTE PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $14.1:rax 
  .loc 9 198 9
  # return($14.1)
  mov [rbp-38], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] 
.LABEL__scan_identifier_token_310__18:
  .loc 9 200 9
  # $15.1: Boolean = call(equals_346, token_lexeme.1, "if")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_308[rip] # "if"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:rax 
  # jump($15.1, .LABEL__scan_identifier_token_310__20, .LABEL__scan_identifier_token_310__21)
  test al, al
  mov [rbp-31], al
  jz .LABEL__scan_identifier_token_310__21
.LABEL__scan_identifier_token_310__20:
  .loc 9 201 16
  # $16.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $16.1:rax 
  .loc 9 201 9
  # return($16.1)
  mov [rbp-39], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] 
.LABEL__scan_identifier_token_310__21:
  .loc 9 203 9
  # $17.1: Boolean = call(equals_346, token_lexeme.1, "include")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_309[rip] # "include"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:rax 
  # jump($17.1, .LABEL__scan_identifier_token_310__23, .LABEL__scan_identifier_token_310__24)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_identifier_token_310__24
.LABEL__scan_identifier_token_310__23:
  .loc 9 204 16
  # $18.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $18.1:rax 
  .loc 9 204 9
  # return($18.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] 
.LABEL__scan_identifier_token_310__24:
  .loc 9 206 9
  # $19.1: Boolean = call(equals_346, token_lexeme.1, "loop")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_311[rip] # "loop"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:rax 
  # jump($19.1, .LABEL__scan_identifier_token_310__26, .LABEL__scan_identifier_token_310__27)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_identifier_token_310__27
.LABEL__scan_identifier_token_310__26:
  .loc 9 207 16
  # $20.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $20.1:rax 
  .loc 9 207 9
  # return($20.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] 
.LABEL__scan_identifier_token_310__27:
  .loc 9 209 9
  # $21.1: Boolean = call(equals_346, token_lexeme.1, "new")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_274[rip] # "new"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:rax 
  # jump($21.1, .LABEL__scan_identifier_token_310__29, .LABEL__scan_identifier_token_310__30)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_identifier_token_310__30
.LABEL__scan_identifier_token_310__29:
  .loc 9 210 16
  # $22.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $22.1:rax 
  .loc 9 210 9
  # return($22.1)
  mov [rbp-42], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] 
.LABEL__scan_identifier_token_310__30:
  .loc 9 212 9
  # $23.1: Boolean = call(equals_346, token_lexeme.1, "null")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_351[rip] # "null"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:rax 
  # jump($23.1, .LABEL__scan_identifier_token_310__32, .LABEL__scan_identifier_token_310__33)
  test al, al
  mov [rbp-35], al
  jz .LABEL__scan_identifier_token_310__33
.LABEL__scan_identifier_token_310__32:
  .loc 9 213 16
  # $24.1: @Null_Token = new Null_Token(object_type = Null_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Null_Token
  mov rbx, Null_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $24.1:rax 
  .loc 9 213 9
  # return($24.1)
  mov [rbp-43], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] 
.LABEL__scan_identifier_token_310__33:
  .loc 9 215 9
  # $25.1: Boolean = call(equals_346, token_lexeme.1, "return")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_276[rip] # "return"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__scan_identifier_token_310__35, .LABEL__scan_identifier_token_310__36)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_identifier_token_310__36
.LABEL__scan_identifier_token_310__35:
  .loc 9 216 16
  # $26.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $26.1:rax 
  .loc 9 216 9
  # return($26.1)
  mov [rbp-44], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] 
.LABEL__scan_identifier_token_310__36:
  .loc 9 218 9
  # $27.1: Boolean = call(equals_346, token_lexeme.1, "struct")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_315[rip] # "struct"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:rax 
  # jump($27.1, .LABEL__scan_identifier_token_310__38, .LABEL__scan_identifier_token_310__39)
  test al, al
  mov [rbp-37], al
  jz .LABEL__scan_identifier_token_310__39
.LABEL__scan_identifier_token_310__38:
  .loc 9 219 16
  # $28.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $28.1:rax 
  .loc 9 219 9
  # return($28.1)
  mov [rbp-45], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] 
.LABEL__scan_identifier_token_310__39:
  .loc 9 221 9
  # $29.1: Boolean = call(equals_346, token_lexeme.1, "true")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_352[rip] # "true"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:rax 
  # jump($29.1, .LABEL__scan_identifier_token_310__41, .LABEL__scan_identifier_token_310__42)
  test al, al
  mov [rbp-38], al
  jz .LABEL__scan_identifier_token_310__42
.LABEL__scan_identifier_token_310__41:
  .loc 9 222 16
  # $30.1: @Boolean_Token = new Boolean_Token(object_type = Boolean_Token, lexeme = token_lexeme.1, location = token_location.1, value = true, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Boolean_Token
  mov rbx, Boolean_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = true
  mov BYTE PTR [rax+32], 1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $30.1:rax 
  .loc 9 222 9
  # return($30.1)
  mov [rbp-46], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] 
.LABEL__scan_identifier_token_310__42:
  .loc 9 224 9
  # $31.1: Boolean = call(equals_346, token_lexeme.1, "undefined")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_244[rip] # "undefined"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:rax 
  # jump($31.1, .LABEL__scan_identifier_token_310__44, .LABEL__scan_identifier_token_310__45)
  test al, al
  mov [rbp-39], al
  jz .LABEL__scan_identifier_token_310__45
.LABEL__scan_identifier_token_310__44:
  .loc 9 225 16
  # $32.1: @Undefined_Token = new Undefined_Token(object_type = Undefined_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Undefined_Token
  mov rbx, Undefined_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $32.1:rax 
  .loc 9 225 9
  # return($32.1)
  mov [rbp-47], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] 
.LABEL__scan_identifier_token_310__45:
  .loc 9 227 9
  # $33.1: Boolean = call(equals_346, token_lexeme.1, "while")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_317[rip] # "while"
  call equals_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:rax 
  # jump($33.1, .LABEL__scan_identifier_token_310__47, .LABEL__scan_identifier_token_310__48)
  test al, al
  mov [rbp-40], al
  jz .LABEL__scan_identifier_token_310__48
.LABEL__scan_identifier_token_310__47:
  .loc 9 228 16
  # $34.1: @Keyword_Token = new Keyword_Token(object_type = Keyword_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Keyword_Token
  mov rbx, Keyword_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $34.1:rax 
  .loc 9 228 9
  # return($34.1)
  mov [rbp-48], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] 
.LABEL__scan_identifier_token_310__48:
  .loc 9 230 12
  # $35.1: @Identifier_Token = new Identifier_Token(object_type = Identifier_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Identifier_Token
  mov rbx, Identifier_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] $35.1:rax 
  .loc 9 230 5
  # return($35.1)
  mov [rbp-48], rax
  jmp .LABEL__scan_identifier_token_310__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] $33.1:[rbp-40] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] $31.1:[rbp-39] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] $29.1:[rbp-38] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] $27.1:[rbp-37] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] $25.1:[rbp-36] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] $23.1:[rbp-35] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] $21.1:[rbp-34] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] $19.1:[rbp-33] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] $17.1:[rbp-32] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] $15.1:[rbp-31] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:[rbp-30] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_identifier_token_310__end:
  mov rsp, rbp
  pop rbp
  ret

scan_identifier_token_310__stack_frame_size: .word 48

  .loc 9 233 1
  .text
scan_integer_token_311:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_integer_token_311__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_integer_token_311__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 234 5
  # value.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx value.1:rax 
  # jump(.LABEL__scan_integer_token_311__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_integer_token_311__2:
  # value.5: Int = phi(value.1, value.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  .loc 9 235 12
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-32]
  call peek_char_299
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $1.1:rax 
  .loc 9 235 12
  # $2.1: Boolean = call(is_digit_302, $1.1)
  mov dil, al
  call is_digit_302
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_integer_token_311__3, .LABEL__scan_integer_token_311__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_integer_token_311__4
.LABEL__scan_integer_token_311__3:
  .loc 9 236 17
  # char.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-32]
  call next_char_300
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 237 17
  # $4.1: Int = value.5 * 10
  mov rbx, [rbp-8]
  imul rbx, 10
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx 
  .loc 9 237 31
  # $5.1: Int = cast(char.1)
  mov r15b, al
  movsx r15, r15b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 
  .loc 9 237 45
  # $6.1: Int = cast('0')
  mov r14b, 48
  movsx r14, r14b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 $6.1:r14 
  .loc 9 237 31
  # $7.1: Int = $5.1 - $6.1
  mov r13, r15
  sub r13, r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $7.1:r13 
  .loc 9 237 17
  # $8.1: Int = $4.1 + $7.1
  mov r15, rbx
  add r15, r13
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $8.1:r15 
  .loc 9 237 9
  # value.3: Int = $8.1
  mov [rbp-41], r15
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax value.3:r15:[rbp-8] 
  .loc 9 238 9
  # $9.1: @String = call(append_352, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], r15
  call append_352
  # [discarded value]: $9.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # jump(.LABEL__scan_integer_token_311__2)
  jmp .LABEL__scan_integer_token_311__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_integer_token_311__4:
  .loc 9 240 12
  # $10.1: @Integer_Token = new Integer_Token(object_type = Integer_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.5, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = Integer_Token
  mov rbx, Integer_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.5
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] value.1:[rbp-8] value.5:r14:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  .loc 9 240 5
  # return($10.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_integer_token_311__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] value.5:[rbp-8] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] 
  # [discarded value]: value.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_integer_token_311__end:
  mov rsp, rbp
  pop rbp
  ret

scan_integer_token_311__stack_frame_size: .word 48

  .loc 9 243 1
  .text
scan_space_token_312:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_space_token_312__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_space_token_312__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 244 5
  # count.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx count.1:rax 
  # jump(.LABEL__scan_space_token_312__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_space_token_312__2:
  # count.5: Int = phi(count.1, count.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  .loc 9 245 12
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-32]
  call peek_char_299
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $1.1:rax 
  .loc 9 245 12
  # $2.1: Boolean = $1.1 == ' '
  cmp al, 32
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_space_token_312__3, .LABEL__scan_space_token_312__4)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__scan_space_token_312__4
.LABEL__scan_space_token_312__3:
  .loc 9 246 17
  # char.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-32]
  call next_char_300
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 247 17
  # $4.1: Int = count.5 + 1
  mov rbx, [rbp-8]
  add rbx, 1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx 
  .loc 9 247 9
  # count.3: Int = $4.1
  mov [rbp-41], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax count.3:rbx:[rbp-8] 
  .loc 9 248 9
  # $5.1: @String = call(append_352, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], rbx
  call append_352
  # [discarded value]: $5.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # jump(.LABEL__scan_space_token_312__2)
  jmp .LABEL__scan_space_token_312__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # [discarded value]: count.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_space_token_312__4:
  .loc 9 250 12
  # $6.1: @Space_Token = new Space_Token(object_type = Space_Token, lexeme = token_lexeme.1, location = token_location.1, count = count.5, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = Space_Token
  mov rbx, Space_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .count = count.5
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] count.1:[rbp-8] count.5:r14:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  .loc 9 250 5
  # return($6.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_space_token_312__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] count.5:[rbp-8] 
  # [discarded value]: count.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] 
  # [discarded value]: count.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_space_token_312__end:
  mov rsp, rbp
  pop rbp
  ret

scan_space_token_312__stack_frame_size: .word 48

  .loc 9 253 1
  .text
scan_string_token_313:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_string_token_313__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_string_token_313__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 254 9
  # $1.1: Int8 = call(peek_char_299, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 254 9
  # $2.1: Boolean = $1.1 != '"'
  cmp al, 34
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_string_token_313__2, .LABEL__scan_string_token_313__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_string_token_313__3
.LABEL__scan_string_token_313__2:
  .loc 9 255 9
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_string_token_313__3:
  .loc 14 4 19
  # $4.1: @Int8 = call(malloc, 16)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $4.1:rax 
  .loc 9 258 14
  # value.1: @String = new String(data = $4.1, data_size = 16, length = 0)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  #     .data = $4.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:rax 
  .loc 9 260 25
  # $6.1: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  mov [rbp-33], rax
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] $6.1:rax 
  .loc 9 260 5
  # $7.1: @String = call(append_352, token_lexeme.1, $6.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_352
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] 
  # jump(.LABEL__scan_string_token_313__4)
.LABEL__scan_string_token_313__4:
  .loc 9 262 17
  # char.1: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-24]
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax 
  .loc 9 263 13
  # $9.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax $9.1:rbx 
  .loc 9 263 13
  # $10.1: Boolean = $9.1
  mov [rbp-34], bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__scan_string_token_313__7, .LABEL__scan_string_token_313__6)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-35], bl
  jz .LABEL__scan_string_token_313__6
.LABEL__scan_string_token_313__7:
  .loc 9 263 13
  # $10.3: Boolean = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__scan_string_token_313__8, .LABEL__scan_string_token_313__9)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__scan_string_token_313__9
.LABEL__scan_string_token_313__8:
  .loc 9 264 20
  # $12.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  .loc 9 264 13
  # return($12.1)
  mov [rbp-43], rax
  jmp .LABEL__scan_string_token_313__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
.LABEL__scan_string_token_313__9:
  .loc 9 266 16
  # char.3: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:rax:[rbp-34] 
  .loc 9 267 9
  # $14.1: @String = call(append_352, token_lexeme.1, char.3)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_352
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  .loc 9 268 13
  # $15.1: Boolean = char.3 == '"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:rax 
  # jump($15.1, .LABEL__scan_string_token_313__11, .LABEL__scan_string_token_313__12)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_string_token_313__12
.LABEL__scan_string_token_313__11:
  .loc 9 269 20
  # $16.1: @String_Token = new String_Token(object_type = String_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.1, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = String_Token
  mov rbx, String_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:r14:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  .loc 9 269 13
  # return($16.1)
  mov [rbp-44], rax
  jmp .LABEL__scan_string_token_313__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
.LABEL__scan_string_token_313__12:
  .loc 9 271 13
  # $17.1: Boolean = char.3 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:rax 
  # jump($17.1, .LABEL__scan_string_token_313__14, .LABEL__scan_string_token_313__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__scan_string_token_313__16
.LABEL__scan_string_token_313__14:
  .loc 9 272 20
  # char.6: Int8 = call(peek_char_299, self.1)
  mov rdi, [rbp-24]
  call peek_char_299
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] 
  .loc 9 273 17
  # $20.1: Boolean = char.6 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] $20.1:rbx 
  .loc 9 273 17
  # $21.1: Boolean = $20.1
  mov [rbp-38], bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] $21.1:rbx 
  # jump($21.1, .LABEL__scan_string_token_313__18, .LABEL__scan_string_token_313__17)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-38], bl
  jz .LABEL__scan_string_token_313__17
.LABEL__scan_string_token_313__18:
  .loc 9 273 17
  # $21.3: Boolean = phi($21.1, $21.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # jump($21.3, .LABEL__scan_string_token_313__19, .LABEL__scan_string_token_313__20)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__scan_string_token_313__20
.LABEL__scan_string_token_313__19:
  .loc 9 274 24
  # $23.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  .loc 9 274 17
  # return($23.1)
  mov [rbp-46], rax
  jmp .LABEL__scan_string_token_313__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
.LABEL__scan_string_token_313__20:
  .loc 9 276 20
  # char.8: Int8 = call(next_char_300, self.1)
  mov rdi, [rbp-24]
  call next_char_300
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:rax:[rbp-34] 
  .loc 9 277 13
  # $25.1: @String = call(append_352, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_352
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  .loc 9 278 17
  # $26.1: Boolean = call(is_escape_308, char.8)
  mov dil, [rbp-34]
  call is_escape_308
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $26.1:rax 
  .loc 9 278 17
  # $27.1: Boolean = $26.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:rbx 
  # jump($27.1, .LABEL__scan_string_token_313__22, .LABEL__scan_string_token_313__23)
  test bl, bl
  mov [rbp-39], bl
  jz .LABEL__scan_string_token_313__23
.LABEL__scan_string_token_313__22:
  .loc 9 279 24
  # $28.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  .loc 9 279 17
  # return($28.1)
  mov [rbp-47], rax
  jmp .LABEL__scan_string_token_313__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
.LABEL__scan_string_token_313__23:
  .loc 9 281 17
  # $29.1: Boolean = char.8 == 'n'
  cmp BYTE PTR [rbp-34], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:rax 
  # jump($29.1, .LABEL__scan_string_token_313__25, .LABEL__scan_string_token_313__27)
  test al, al
  mov [rbp-40], al
  jz .LABEL__scan_string_token_313__27
.LABEL__scan_string_token_313__25:
  .loc 9 282 17
  # $40.1: @String = call(append_352, value.1, '\n')
  mov rdi, [rbp-33]
  mov sil, 10
  call append_352
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
.LABEL__scan_string_token_313__27:
  .loc 9 283 24
  # $30.1: Boolean = char.8 == '\"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:rax 
  # jump($30.1, .LABEL__scan_string_token_313__28, .LABEL__scan_string_token_313__30)
  test al, al
  mov [rbp-41], al
  jz .LABEL__scan_string_token_313__30
.LABEL__scan_string_token_313__28:
  .loc 9 284 17
  # $39.1: @String = call(append_352, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_352
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
.LABEL__scan_string_token_313__30:
  .loc 9 285 24
  # $31.1: Boolean = char.8 == '\''
  cmp BYTE PTR [rbp-34], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:rax 
  # jump($31.1, .LABEL__scan_string_token_313__31, .LABEL__scan_string_token_313__33)
  test al, al
  mov [rbp-42], al
  jz .LABEL__scan_string_token_313__33
.LABEL__scan_string_token_313__31:
  .loc 9 286 17
  # $38.1: @String = call(append_352, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_352
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
.LABEL__scan_string_token_313__33:
  .loc 9 287 24
  # $32.1: Boolean = char.8 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:rax 
  # jump($32.1, .LABEL__scan_string_token_313__34, .LABEL__scan_string_token_313__36)
  test al, al
  mov [rbp-43], al
  jz .LABEL__scan_string_token_313__36
.LABEL__scan_string_token_313__34:
  .loc 9 288 17
  # $37.1: @String = call(append_352, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_352
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
.LABEL__scan_string_token_313__36:
  .loc 9 289 24
  # $33.1: Boolean = char.8 == 't'
  cmp BYTE PTR [rbp-34], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:rax 
  # jump($33.1, .LABEL__scan_string_token_313__37, .LABEL__scan_string_token_313__39)
  test al, al
  mov [rbp-44], al
  jz .LABEL__scan_string_token_313__39
.LABEL__scan_string_token_313__37:
  .loc 9 290 17
  # $36.1: @String = call(append_352, value.1, '\t')
  mov rdi, [rbp-33]
  mov sil, 9
  call append_352
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
.LABEL__scan_string_token_313__39:
  .loc 9 291 24
  # $34.1: Boolean = char.8 == '0'
  cmp BYTE PTR [rbp-34], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:rax 
  # jump($34.1, .LABEL__scan_string_token_313__40, .LABEL__scan_string_token_313__42)
  test al, al
  mov [rbp-45], al
  jz .LABEL__scan_string_token_313__42
.LABEL__scan_string_token_313__40:
  .loc 9 292 17
  # $35.1: @String = call(append_352, value.1, '\0')
  mov rdi, [rbp-33]
  mov sil, 0
  call append_352
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
.LABEL__scan_string_token_313__42:
  .loc 9 294 17
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # [discarded value]: $21.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
.LABEL__scan_string_token_313__17:
  .loc 9 273 33
  # $22.1: Boolean = char.6 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $22.1:rax 
  .loc 9 273 17
  # $21.2: Boolean = $22.1
  mov [rbp-39], al
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:rax:[rbp-38] 
  # jump(.LABEL__scan_string_token_313__18)
  mov [rbp-38], al
  jmp .LABEL__scan_string_token_313__18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:[rbp-38] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [discarded value]: $21.1
  # [discarded value]: char.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
.LABEL__scan_string_token_313__16:
  .loc 9 297 13
  # $18.1: @String = call(append_352, value.1, char.3)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_352
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # jump(.LABEL__scan_string_token_313__4)
  jmp .LABEL__scan_string_token_313__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  # [discarded value]: char.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
.LABEL__scan_string_token_313__6:
  .loc 9 263 29
  # $11.1: Boolean = char.1 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $11.1:rax 
  .loc 9 263 13
  # $10.2: Boolean = $11.1
  mov [rbp-36], al
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__scan_string_token_313__7)
  mov [rbp-35], al
  jmp .LABEL__scan_string_token_313__7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_string_token_313__end:
  mov rsp, rbp
  pop rbp
  ret

scan_string_token_313__stack_frame_size: .word 48

  .loc 1 325 1
  .text
abort_314:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_314__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_314__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: location.1:rdi message.1:rsi 
  .loc 1 326 5
  # $1.1: @FILE = call(end_line_340, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_340
  # [live values]: location.1:[rbp-8] message.1:[rbp-16] $1.1:rax 
  .loc 1 326 5
  # $2.1: @FILE = call(write_317, $1.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_317
  # [discarded value]: $1.1
  # [discarded value]: location.1
  # [live values]: message.1:[rbp-16] $2.1:rax 
  .loc 1 326 5
  # $3.1: @FILE = call(write_337, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_86[rip] # ": "
  call write_337
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-16] $3.1:rax 
  .loc 1 326 5
  # $4.1: @FILE = call(write_337, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_337
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 1 326 5
  # $5.1: @FILE = call(end_line_340, $4.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: 
  .loc 1 327 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_314__end:
  mov rsp, rbp
  pop rbp
  ret

abort_314__stack_frame_size: .word 16

  .loc 1 332 1
  .text
write_315:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_315__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_315__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: file.1:rdi token.1:rsi 
  .loc 1 333 9
  # $2.1: Boolean = call(is_343, token.1, Other_Token)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, Other_Token[rip]
  call is_343
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__write_315__3, .LABEL__write_315__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_315__2
.LABEL__write_315__3:
  .loc 1 333 9
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump($2.3, .LABEL__write_315__4, .LABEL__write_315__6)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__write_315__6
.LABEL__write_315__4:
  .loc 1 334 20
  # $12.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $12.1:rax 
  .loc 1 334 9
  # $13.1: @FILE = call(write_339, file.1, $12.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_339
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $13.1:rax 
  .loc 1 334 9
  # $14.1: @FILE = call(write_337, $13.1, "[2;37m")
  mov rdi, rax
  lea rsi, .LABEL__string_353[rip] # "[2;37m"
  call write_337
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # jump(.LABEL__write_315__5)
.LABEL__write_315__5:
  .loc 1 340 16
  # $15.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] token.1:rax:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $15.1:rbx 
  .loc 1 340 5
  # $16.1: @FILE = call(write_337, file.1, $15.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_337
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  .loc 1 341 16
  # $17.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $17.1:rax 
  .loc 1 341 5
  # $18.1: @FILE = call(write_339, file.1, $17.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_339
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $18.1:rax 
  .loc 1 341 5
  # $19.1: @FILE = call(write_337, $18.1, "[0m")
  mov rdi, rax
  lea rsi, .LABEL__string_354[rip] # "[0m"
  call write_337
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  .loc 1 342 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_315__end
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
.LABEL__write_315__6:
  .loc 1 335 16
  # $4.1: Boolean = call(is_343, token.1, Literal_Token)
  mov rdi, [rbp-16]
  mov rsi, Literal_Token[rip]
  call is_343
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__write_315__7, .LABEL__write_315__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_315__9
.LABEL__write_315__7:
  .loc 1 336 20
  # $9.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $9.1:rax 
  .loc 1 336 9
  # $10.1: @FILE = call(write_339, file.1, $9.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_339
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $10.1:rax 
  .loc 1 336 9
  # $11.1: @FILE = call(write_337, $10.1, "[1;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_355[rip] # "[1;33m"
  call write_337
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
  # jump(.LABEL__write_315__5)
  jmp .LABEL__write_315__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
.LABEL__write_315__9:
  .loc 1 337 16
  # $5.1: Boolean = call(is_343, token.1, Comment_Token)
  mov rdi, [rbp-16]
  mov rsi, Comment_Token[rip]
  call is_343
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  # jump($5.1, .LABEL__write_315__10, .LABEL__write_315__5)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_315__5
.LABEL__write_315__10:
  .loc 1 338 20
  # $6.1: Int8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] $6.1:rax 
  .loc 1 338 9
  # $7.1: @FILE = call(write_339, file.1, $6.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_339
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] $7.1:rax 
  .loc 1 338 9
  # $8.1: @FILE = call(write_337, $7.1, "[2;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_356[rip] # "[2;33m"
  call write_337
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] 
  # jump(.LABEL__write_315__5)
  jmp .LABEL__write_315__5
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] $5.1:[rbp-19] 
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.3:[rbp-17] 
  # [discarded value]: $2.3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__write_315__2:
  .loc 1 333 34
  # $2.2: Boolean = call(is_343, token.1, Keyword_Token)
  mov rdi, [rbp-16]
  mov rsi, Keyword_Token[rip]
  call is_343
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:rax:[rbp-17] 
  # jump(.LABEL__write_315__3)
  mov [rbp-17], al
  jmp .LABEL__write_315__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] $2.2:[rbp-17] 
  # [discarded value]: $2.2
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [discarded value]: token.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_315__end:
  mov rsp, rbp
  pop rbp
  ret

write_315__stack_frame_size: .word 32

  .loc 11 15 1
  .text
create_source_316:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_source_316__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_source_316__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 11 16 19
  # $1.1: @Int8 = load_struct_member(file_path.1, data)
  mov rax, [rdi]
  # [live values]: file_path.1:rdi $1.1:rax 
  .loc 11 16 35
  # $2.1: @Int8 = load_struct_member("r", data)
  lea rbx, .LABEL__string_357[rip] # "r"
  mov r15, [rbx]
  # [live values]: file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 11 16 13
  # file.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] file.1:rax 
  .loc 11 17 9
  # $4.1: Boolean = file.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file_path.1:[rbp-8] file.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__create_source_316__2, .LABEL__create_source_316__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__create_source_316__3
.LABEL__create_source_316__2:
  .loc 11 18 9
  # return(null)
  xor rax, rax
  jmp .LABEL__create_source_316__end
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__create_source_316__3:
  .loc 11 21 5
  # content_size.1: Int = 1024
  mov rax, 1024
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:rax 
  .loc 11 22 16
  # content.1: @Int8 = call(malloc, content_size.1)
  mov rdi, rax
  mov [rbp-25], rax
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax 
  .loc 11 23 5
  # content_length.1: Int = 0
  xor rbx, rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax content_length.1:rbx 
  # jump(.LABEL__create_source_316__5)
  mov [rbp-33], rax
  mov [rbp-41], rbx
.LABEL__create_source_316__5:
  # content_size.5: Int = phi(content_size.1, content_size.6)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] 
  # content_length.6: Int = phi(content_length.1, content_length.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] 
  # content.6: @Int8 = phi(content.1, content.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] 
  .loc 11 25 17
  # char.1: Int32 = call(fgetc, file.1)
  mov rdi, [rbp-16]
  call fgetc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:rax 
  .loc 11 26 13
  # $8.1: Int32 = call(feof, file.1)
  mov rdi, [rbp-16]
  mov [rbp-45], eax
  call feof
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $8.1:rax 
  .loc 11 26 13
  # $9.1: Int = cast($8.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $9.1:rbx 
  .loc 11 26 13
  # $10.1: Boolean = $9.1 != 0
  cmp rbx, 0
  setne al
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:rax 
  # jump($10.1, .LABEL__create_source_316__6, .LABEL__create_source_316__8)
  test al, al
  mov [rbp-46], al
  jz .LABEL__create_source_316__8
.LABEL__create_source_316__6:
  .loc 11 36 5
  # store_array_item(content.6, content_length.6, '\0')
  mov rax, [rbp-33]
  mov rbx, [rbp-41]
  add rax, rbx
  mov BYTE PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  .loc 11 38 12
  # $19.1: @Source = new Source(file_path = file_path.1, content = content.6, id = undefined)
  mov rdi, 24
  call malloc
  #     .id = undefined
  #     .file_path = file_path.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .content = content.6
  mov r15, [rbp-33]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: file_path.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:r15:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $19.1:rax 
  .loc 11 38 5
  # return($19.1)
  mov [rbp-54], rax
  jmp .LABEL__create_source_316__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
.LABEL__create_source_316__8:
  .loc 11 29 13
  # $11.1: Int = content_length.6 + 1
  mov rax, [rbp-41]
  add rax, 1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax 
  .loc 11 29 34
  # $12.1: Int = content_size.5 - 1
  mov rbx, [rbp-25]
  dec rbx
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax $12.1:rbx 
  .loc 11 29 13
  # $13.1: Boolean = $11.1 > $12.1
  cmp rax, rbx
  setg r15b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:r15 
  # jump($13.1, .LABEL__create_source_316__10, .LABEL__create_source_316__11)
  test r15b, r15b
  mov [rbp-47], r15b
  jz .LABEL__create_source_316__11
.LABEL__create_source_316__10:
  .loc 11 30 28
  # $14.1: Int = content_size.5 + 1024
  mov rax, [rbp-25]
  add rax, 1024
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] $14.1:rax 
  .loc 11 30 13
  # content_size.4: Int = $14.1
  mov [rbp-55], rax
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:rax:[rbp-25] 
  .loc 11 31 23
  # content.3: @Int8 = call(realloc, content.6, content_size.4)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov [rbp-25], rax
  call realloc
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:rax:[rbp-33] 
  # jump(.LABEL__create_source_316__11)
  mov [rbp-33], rax
.LABEL__create_source_316__11:
  # content_size.6: Int = phi(content_size.4, content_size.5)
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] 
  # content.4: @Int8 = phi(content.6, content.3)
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 33 35
  # $17.1: Int8 = cast(char.1)
  mov eax, [rbp-45]
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] $17.1:rax 
  .loc 11 33 9
  # store_array_item(content.4, content_length.6, $17.1)
  mov rbx, [rbp-33]
  mov r15, [rbp-41]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 34 26
  # $18.1: Int = content_length.6 + 1
  mov rax, [rbp-41]
  add rax, 1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] $18.1:rax 
  .loc 11 34 9
  # content_length.4: Int = $18.1
  mov [rbp-55], rax
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:rax:[rbp-41] 
  # jump(.LABEL__create_source_316__5)
  mov [rbp-41], rax
  jmp .LABEL__create_source_316__5
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:[rbp-41] 
  # [discarded value]: content_length.4
  # [discarded value]: content.4
  # [discarded value]: content_size.6
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [discarded value]: content.3
  # [discarded value]: content_size.4
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] 
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] 
  # [discarded value]: char.1
  # [discarded value]: content.6
  # [discarded value]: content_length.6
  # [discarded value]: content_size.5
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [discarded value]: content_length.1
  # [discarded value]: content.1
  # [discarded value]: content_size.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] 
  # [discarded value]: file.1
  # [live values]: 
.LABEL__create_source_316__end:
  mov rsp, rbp
  pop rbp
  ret

create_source_316__stack_frame_size: .word 64

  .loc 1 347 1
  .text
write_317:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_317__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_317__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi location.1:rsi 
  .loc 1 348 9
  # $1.1: Boolean = location.1 == null
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi location.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_317__2, .LABEL__write_317__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_317__3
.LABEL__write_317__2:
  .loc 1 349 16
  # $2.1: @FILE = call(write_337, self.1, "null")
  mov rdi, [rbp-17]
  lea rsi, .LABEL__string_351[rip] # "null"
  call write_337
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 349 9
  # return($2.1)
  mov [rbp-25], rax
  jmp .LABEL__write_317__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_317__3:
  .loc 1 351 23
  # $3.1: @Source = load_struct_member(location.1, source)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:rbx 
  .loc 1 351 23
  # $4.1: @String = load_struct_member($3.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $4.1:r15 
  .loc 1 351 12
  # $5.1: @FILE = call(write_337, self.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, r15
  call write_337
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  .loc 1 351 12
  # $6.1: @FILE = call(write_339, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 351 67
  # $7.1: Int = load_struct_member(location.1, line)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 1 351 12
  # $8.1: @FILE = call(write_336, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $8.1:rax 
  .loc 1 351 12
  # $9.1: @FILE = call(write_339, $8.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_339
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 351 99
  # $10.1: Int = load_struct_member(location.1, column)
  mov rbx, [rbp-9]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 1 351 12
  # $11.1: @FILE = call(write_336, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_336
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $11.1:rax 
  .loc 1 351 5
  # return($11.1)
  mov [rbp-25], rax
  jmp .LABEL__write_317__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] 
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_317__end:
  mov rsp, rbp
  pop rbp
  ret

write_317__stack_frame_size: .word 32

  .loc 12 9 1
  .text
append_318:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_318__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_318__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 10 52
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 10 13
  # item.1: @List_Item = new List_Item(data = data.1, prev_item = $1.1, next_item = null, is_removed = false)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  #     .prev_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .next_item = null
  mov QWORD PTR [rax+8], 0
  #     .data = data.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .is_removed = false
  mov BYTE PTR [rax+24], 0
  # [discarded value]: $1.1
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 11 9
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 11 9
  # $4.1: Boolean = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__append_318__2, .LABEL__append_318__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__append_318__4
.LABEL__append_318__2:
  .loc 12 12 9
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_318__3)
.LABEL__append_318__3:
  .loc 12 16 5
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 17 17
  # $6.1: Int = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 17 17
  # $7.1: Int = $6.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 17 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__append_318__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__append_318__4:
  .loc 12 14 9
  # $5.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 14 9
  # store_struct_member($5.1, next_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_318__3)
  jmp .LABEL__append_318__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_318__end:
  mov rsp, rbp
  pop rbp
  ret

append_318__stack_frame_size: .word 48

  .loc 12 20 1
  .text
prepend_319:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_319__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_319__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 21 52
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 21 13
  # item.1: @List_Item = new List_Item(data = data.1, next_item = $1.1, prev_item = null, is_removed = false)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  #     .prev_item = null
  mov QWORD PTR [rax], 0
  #     .next_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .data = data.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .is_removed = false
  mov BYTE PTR [rax+24], 0
  # [discarded value]: $1.1
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 22 9
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 22 9
  # $4.1: Boolean = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__prepend_319__2, .LABEL__prepend_319__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__prepend_319__4
.LABEL__prepend_319__2:
  .loc 12 23 9
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_319__3)
.LABEL__prepend_319__3:
  .loc 12 27 5
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 28 17
  # $6.1: Int = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 28 17
  # $7.1: Int = $6.1 + 1
  mov r14, r15
  add r14, 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 28 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__prepend_319__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__prepend_319__4:
  .loc 12 25 9
  # $5.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 25 9
  # store_struct_member($5.1, prev_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_319__3)
  jmp .LABEL__prepend_319__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_319__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_319__stack_frame_size: .word 48

  .loc 12 31 1
  .text
remove_320:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_320__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_320__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 32 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_320__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_320__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 33 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_320__3, .LABEL__remove_320__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_320__4
.LABEL__remove_320__3:
  .loc 12 34 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 34 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_320__5, .LABEL__remove_320__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_320__6
.LABEL__remove_320__5:
  .loc 12 35 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_320__4)
.LABEL__remove_320__4:
  .loc 12 40 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_320__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_320__6:
  .loc 12 38 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_320__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_320__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_320__end:
  mov rsp, rbp
  pop rbp
  ret

remove_320__stack_frame_size: .word 32

  .loc 12 43 1
  .text
remove_all_321:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_all_321__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_all_321__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 44 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_all_321__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_all_321__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 45 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_all_321__3, .LABEL__remove_all_321__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_all_321__4
.LABEL__remove_all_321__3:
  .loc 12 46 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 46 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_all_321__5, .LABEL__remove_all_321__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_all_321__6
.LABEL__remove_all_321__5:
  .loc 12 47 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_all_321__6)
.LABEL__remove_all_321__6:
  .loc 12 49 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_all_321__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_all_321__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_all_321__4:
  .loc 12 51 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_all_321__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_all_321__end:
  mov rsp, rbp
  pop rbp
  ret

remove_all_321__stack_frame_size: .word 32

  .loc 12 54 1
  .text
prune_322:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prune_322__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prune_322__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 55 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi item.1:rax 
  # jump(.LABEL__prune_322__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__prune_322__2:
  # item.2: @List_Item = phi(item.1, item.13)
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 56 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__prune_322__3, .LABEL__prune_322__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__prune_322__4
.LABEL__prune_322__3:
  .loc 12 57 13
  # $3.1: Boolean = load_struct_member(item.2, is_removed)
  mov rax, [rbp-8]
  mov bl, [rax+24]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  # jump($3.1, .LABEL__prune_322__5, .LABEL__prune_322__6)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__prune_322__6
.LABEL__prune_322__5:
  .loc 12 58 17
  # $4.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $4.1:rbx 
  .loc 12 58 17
  # $5.1: Boolean = $4.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:r15 
  # jump($5.1, .LABEL__prune_322__7, .LABEL__prune_322__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__prune_322__8
.LABEL__prune_322__7:
  .loc 12 59 17
  # $6.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx 
  .loc 12 59 44
  # $7.1: @List_Item = load_struct_member(item.2, next_item)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx $7.1:r15 
  .loc 12 59 17
  # store_struct_member($6.1, next_item, $7.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # jump(.LABEL__prune_322__8)
.LABEL__prune_322__8:
  .loc 12 61 17
  # $8.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $8.1:rbx 
  .loc 12 61 17
  # $9.1: Boolean = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:r15 
  # jump($9.1, .LABEL__prune_322__9, .LABEL__prune_322__10)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__prune_322__10
.LABEL__prune_322__9:
  .loc 12 62 17
  # $10.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 12 62 44
  # $11.1: @List_Item = load_struct_member(item.2, prev_item)
  mov r15, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx $11.1:r15 
  .loc 12 62 17
  # store_struct_member($10.1, prev_item, $11.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # jump(.LABEL__prune_322__10)
.LABEL__prune_322__10:
  .loc 12 64 17
  # $12.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $12.1:rbx 
  .loc 12 64 17
  # $13.1: Boolean = $12.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:r15 
  # jump($13.1, .LABEL__prune_322__11, .LABEL__prune_322__12)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__prune_322__12
.LABEL__prune_322__11:
  .loc 12 65 35
  # $14.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $14.1:rbx 
  .loc 12 65 17
  # store_struct_member(self.1, first_item, $14.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # jump(.LABEL__prune_322__12)
.LABEL__prune_322__12:
  .loc 12 67 17
  # $15.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $15.1:rbx 
  .loc 12 67 17
  # $16.1: Boolean = $15.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:r15 
  # jump($16.1, .LABEL__prune_322__13, .LABEL__prune_322__14)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__prune_322__14
.LABEL__prune_322__13:
  .loc 12 68 34
  # $17.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $17.1:rbx 
  .loc 12 68 17
  # store_struct_member(self.1, last_item, $17.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_322__14)
.LABEL__prune_322__14:
  .loc 12 70 25
  # $18.1: Int = load_struct_member(self.1, size)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $18.1:rbx 
  .loc 12 70 25
  # $19.1: Int = $18.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $19.1:r15 
  .loc 12 70 13
  # store_struct_member(self.1, size, $19.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_322__6)
.LABEL__prune_322__6:
  .loc 12 72 16
  # item.13: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:rbx:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_322__2)
  mov [rbp-8], rbx
  jmp .LABEL__prune_322__2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: item.13
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__prune_322__4:
  .loc 12 74 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__prune_322__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prune_322__end:
  mov rsp, rbp
  pop rbp
  ret

prune_322__stack_frame_size: .word 32

  .loc 12 77 1
  .text
replace_323:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_323__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_323__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # new_data.1: @Any = load_variable(new_data)
  # [live values]: self.1:rdi data.1:rsi new_data.1:rdx 
  .loc 12 78 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi new_data.1:rdx item.1:rax 
  # jump(.LABEL__replace_323__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_323__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 79 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_323__3, .LABEL__replace_323__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_323__4
.LABEL__replace_323__3:
  .loc 12 80 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 80 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_323__5, .LABEL__replace_323__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_323__6
.LABEL__replace_323__5:
  .loc 12 81 13
  # store_struct_member(item.2, data, new_data.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: data.1:[rbp-24] new_data.1:rbx:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_323__6)
.LABEL__replace_323__6:
  .loc 12 83 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_323__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_323__2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_323__4:
  # return()
  jmp .LABEL__replace_323__end
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: new_data.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__replace_323__end:
  mov rsp, rbp
  pop rbp
  ret

replace_323__stack_frame_size: .word 32

  .loc 12 87 1
  .text
contains_324:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR contains_324__stack_frame_size[rip]
  sub rsp, rax
.LABEL__contains_324__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 88 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi item.1:rax 
  # jump(.LABEL__contains_324__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__contains_324__2:
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 89 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__contains_324__3, .LABEL__contains_324__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__contains_324__4
.LABEL__contains_324__3:
  .loc 12 90 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 12 90 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__contains_324__5, .LABEL__contains_324__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__contains_324__6
.LABEL__contains_324__5:
  .loc 12 91 13
  # return(true)
  mov al, 1
  jmp .LABEL__contains_324__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__contains_324__6:
  .loc 12 93 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:rbx:[rbp-8] 
  # jump(.LABEL__contains_324__2)
  mov [rbp-8], rbx
  jmp .LABEL__contains_324__2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:[rbp-8] 
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__contains_324__4:
  .loc 12 95 5
  # return(false)
  mov al, 0
  jmp .LABEL__contains_324__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__contains_324__end:
  mov rsp, rbp
  pop rbp
  ret

contains_324__stack_frame_size: .word 32

  .loc 12 98 1
  .text
index_of_325:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_325__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_325__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 99 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi data.1:rsi index.1:rax 
  .loc 12 100 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi index.1:rax item.1:rbx 
  # jump(.LABEL__index_of_325__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
.LABEL__index_of_325__2:
  # index.5: Int = phi(index.1, index.4)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] 
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  .loc 12 101 12
  # $2.1: Boolean = item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__index_of_325__3, .LABEL__index_of_325__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__index_of_325__4
.LABEL__index_of_325__3:
  .loc 12 102 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 102 13
  # $4.1: Boolean = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__index_of_325__5, .LABEL__index_of_325__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__index_of_325__6
.LABEL__index_of_325__5:
  .loc 12 103 13
  # return(index.5)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_325__end
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__index_of_325__6:
  .loc 12 105 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] 
  .loc 12 106 17
  # $6.1: Int = index.5 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] $6.1:rax 
  .loc 12 106 9
  # index.4: Int = $6.1
  mov [rbp-34], rax
  # [discarded value]: $6.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] index.4:rax:[rbp-8] 
  # jump(.LABEL__index_of_325__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  jmp .LABEL__index_of_325__2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:[rbp-16] index.4:[rbp-8] 
  # [discarded value]: index.4
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__index_of_325__4:
  .loc 12 108 12
  # $7.1: Int =  - 1
  mov rax, 1
  neg rax
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $7.1:rax 
  .loc 12 108 5
  # return($7.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_325__end
  # [discarded value]: $7.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [discarded value]: item.2
  # [discarded value]: index.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [discarded value]: item.1
  # [discarded value]: index.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__index_of_325__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_325__stack_frame_size: .word 48

  .loc 12 111 1
  .text
get_326:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_326__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_326__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: Int = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 12 112 18
  # $1.1: Int = load_struct_member(self.1, size)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  .loc 12 112 9
  # $2.1: Boolean = index.1 >= $1.1
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $2.1:rbx 
  .loc 12 112 9
  # $3.1: Boolean = $2.1
  mov [rbp-1], bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi index.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__get_326__3, .LABEL__get_326__2)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__get_326__2
.LABEL__get_326__3:
  .loc 12 112 9
  # $3.3: Boolean = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # jump($3.3, .LABEL__get_326__4, .LABEL__get_326__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__get_326__5
.LABEL__get_326__4:
  .loc 12 113 9
  # return(null)
  xor rax, rax
  jmp .LABEL__get_326__end
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
.LABEL__get_326__5:
  .loc 12 115 13
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:rbx 
  # jump(.LABEL__get_326__7)
  mov [rbp-25], rbx
.LABEL__get_326__7:
  # item.5: @List_Item = phi(item.1, item.3)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] 
  # index.3: Int = phi(index.5, index.1)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  .loc 12 116 12
  # $6.1: Boolean = index.3 > 0
  cmp QWORD PTR [rbp-9], 0
  setg al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__get_326__8, .LABEL__get_326__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_326__9
.LABEL__get_326__8:
  .loc 12 117 16
  # item.3: @List_Item = load_struct_member(item.5, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] 
  .loc 12 118 17
  # $8.1: Int = index.3 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] $8.1:rax 
  .loc 12 118 9
  # index.5: Int = $8.1
  mov [rbp-34], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] index.5:rax:[rbp-9] 
  # jump(.LABEL__get_326__7)
  mov [rbp-9], rax
  mov [rbp-25], rbx
  jmp .LABEL__get_326__7
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:[rbp-25] index.5:[rbp-9] 
  # [discarded value]: index.5
  # [discarded value]: item.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
.LABEL__get_326__9:
  .loc 12 120 12
  # $9.1: @Any = load_struct_member(item.5, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:rax:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] $9.1:rbx 
  .loc 12 120 5
  # return($9.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_326__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [discarded value]: index.3
  # [discarded value]: item.5
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [discarded value]: item.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_326__2:
  .loc 12 112 31
  # $4.1: Boolean = index.1 < 0
  cmp QWORD PTR [rbp-9], 0
  setl al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $4.1:rax 
  .loc 12 112 9
  # $3.2: Boolean = $4.1
  mov [rbp-18], al
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:rax:[rbp-1] 
  # jump(.LABEL__get_326__3)
  mov [rbp-1], al
  jmp .LABEL__get_326__3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:[rbp-1] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [discarded value]: index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_326__end:
  mov rsp, rbp
  pop rbp
  ret

get_326__stack_frame_size: .word 48

  .loc 12 123 1
  .text
first_327:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR first_327__stack_frame_size[rip]
  sub rsp, rax
.LABEL__first_327__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 124 9
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 124 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__first_327__2, .LABEL__first_327__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__first_327__3
.LABEL__first_327__2:
  .loc 12 125 9
  # return(null)
  xor rax, rax
  jmp .LABEL__first_327__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__first_327__3:
  .loc 12 127 12
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 127 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 127 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__first_327__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__first_327__end:
  mov rsp, rbp
  pop rbp
  ret

first_327__stack_frame_size: .word 32

  .loc 12 130 1
  .text
last_328:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_328__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_328__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 131 9
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 131 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__last_328__2, .LABEL__last_328__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__last_328__3
.LABEL__last_328__2:
  .loc 12 132 9
  # return(null)
  xor rax, rax
  jmp .LABEL__last_328__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__last_328__3:
  .loc 12 134 12
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 134 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 134 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__last_328__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_328__end:
  mov rsp, rbp
  pop rbp
  ret

last_328__stack_frame_size: .word 32

  .loc 12 149 1
  .text
create_iterator_329:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_iterator_329__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_iterator_329__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  .loc 12 150 63
  # $1.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: $1.1:rax 
  .loc 12 150 12
  # $2.1: @List_Iterator = new List_Iterator(current_item = null, next_item = $1.1)
  mov [rbp-8], rax
  mov rdi, 16
  call malloc
  #     .current_item = null
  mov QWORD PTR [rax], 0
  #     .next_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 12 150 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_iterator_329__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_iterator_329__end:
  mov rsp, rbp
  pop rbp
  ret

create_iterator_329__stack_frame_size: .word 16

  .loc 12 153 1
  .text
current_330:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR current_330__stack_frame_size[rip]
  sub rsp, rax
.LABEL__current_330__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 154 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 154 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__current_330__2, .LABEL__current_330__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__current_330__3
.LABEL__current_330__2:
  .loc 12 155 16
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 155 16
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 155 9
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__current_330__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__current_330__3:
  .loc 12 157 5
  # return(null)
  xor rax, rax
  jmp .LABEL__current_330__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__current_330__end:
  mov rsp, rbp
  pop rbp
  ret

current_330__stack_frame_size: .word 32

  .loc 12 160 1
  .text
remove_current_331:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_current_331__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_current_331__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 161 5
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 161 5
  # store_struct_member($1.1, is_removed, true)
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__remove_current_331__end
  # [live values]: 
.LABEL__remove_current_331__end:
  mov rsp, rbp
  pop rbp
  ret

remove_current_331__stack_frame_size: .word 0

  .loc 12 164 1
  .text
has_next_332:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_next_332__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_next_332__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 165 12
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 165 12
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 12 165 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_next_332__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_next_332__end:
  mov rsp, rbp
  pop rbp
  ret

has_next_332__stack_frame_size: .word 16

  .loc 12 168 1
  .text
next_333:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_333__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_333__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 169 9
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 169 9
  # $2.1: Boolean = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__next_333__2, .LABEL__next_333__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__next_333__3
.LABEL__next_333__2:
  .loc 12 170 9
  # return(null)
  xor rax, rax
  jmp .LABEL__next_333__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__next_333__3:
  .loc 12 172 25
  # $3.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 172 5
  # store_struct_member(self.1, current_item, $3.1)
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 173 22
  # $4.1: @List_Item = load_struct_member(self.1, next_item)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 12 173 22
  # $5.1: @List_Item = load_struct_member($4.1, next_item)
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:r15 
  .loc 12 173 5
  # store_struct_member(self.1, next_item, $5.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 174 12
  # $6.1: @List_Item = load_struct_member(self.1, current_item)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 12 174 12
  # $7.1: @Any = load_struct_member($6.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  .loc 12 174 5
  # return($7.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__next_333__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_333__end:
  mov rsp, rbp
  pop rbp
  ret

next_333__stack_frame_size: .word 32

  .loc 12 177 1
  .text
change_334:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR change_334__stack_frame_size[rip]
  sub rsp, rax
.LABEL__change_334__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 178 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 178 9
  # $2.1: Boolean = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi data.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__change_334__2, .LABEL__change_334__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__change_334__3
.LABEL__change_334__2:
  .loc 12 179 9
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 179 9
  # store_struct_member($3.1, data, data.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] data.1:r15:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__change_334__3)
.LABEL__change_334__3:
  # return()
  jmp .LABEL__change_334__end
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] 
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__change_334__end:
  mov rsp, rbp
  pop rbp
  ret

change_334__stack_frame_size: .word 32

  .loc 1 356 1
  .text
write_line_335:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_line_335__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_line_335__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 1 357 12
  # $1.1: @FILE = call(end_line_340, file.1)
  mov [rbp-8], rsi
  call end_line_340
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 1 357 12
  # $2.1: @FILE = call(write_337, $1.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_337
  # [discarded value]: $1.1
  # [discarded value]: string.1
  # [live values]: $2.1:rax 
  .loc 1 357 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_line_335__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_line_335__end:
  mov rsp, rbp
  pop rbp
  ret

write_line_335__stack_frame_size: .word 16

  .loc 1 360 1
  .text
write_336:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_336__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_336__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 1 361 9
  # $1.1: Boolean = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_336__2, .LABEL__write_336__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_336__3
.LABEL__write_336__2:
  .loc 1 362 16
  # $2.1: @FILE = call(write_339, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call write_339
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 362 38
  # $3.1: Int =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 1 362 16
  # $4.1: @FILE = call(write_336, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call write_336
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 362 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__write_336__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_336__3:
  .loc 1 364 9
  # $5.1: Boolean = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__write_336__5, .LABEL__write_336__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_336__6
.LABEL__write_336__5:
  .loc 1 365 20
  # $6.1: Int = number.1 / 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 1 365 9
  # $7.1: @FILE = call(write_336, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__write_336__6)
.LABEL__write_336__6:
  .loc 1 367 12
  # $8.1: Int = number.1 // 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 1 367 27
  # $9.1: Int = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 1 367 12
  # $10.1: Int = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 1 367 11
  # $11.1: Int32 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 1 367 5
  # $12.1: Int32 = call(fputc, $11.1, self.1)
  mov edi, eax
  mov rsi, [rbp-17]
  call fputc
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  .loc 1 368 5
  # return(self.1)
  mov rax, [rbp-17]
  jmp .LABEL__write_336__end
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_336__end:
  mov rsp, rbp
  pop rbp
  ret

write_336__stack_frame_size: .word 32

  .loc 1 371 1
  .text
write_337:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_337__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_337__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: self.1:rdi string.1:rsi 
  .loc 1 372 23
  # $1.1: @Int8 = load_struct_member(string.1, data)
  mov rax, [rsi]
  # [discarded value]: string.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 1 372 12
  # $2.1: @FILE = call(write_338, self.1, $1.1)
  mov rsi, rax
  call write_338
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 1 372 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_337__end:
  mov rsp, rbp
  pop rbp
  ret

write_337__stack_frame_size: .word 16

  .loc 1 375 1
  .text
write_338:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_338__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_338__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # chars.1: @Int8 = load_variable(chars)
  # [live values]: self.1:rdi chars.1:rsi 
  .loc 1 376 9
  # $1.1: Int32 = call(fputs, chars.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call fputs
  # [discarded value]: chars.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 1 376 9
  # $2.1: Int = cast($1.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  .loc 1 376 9
  # $3.1: Boolean = $2.1 < 0
  cmp rbx, 0
  setl al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__write_338__2, .LABEL__write_338__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__write_338__3
.LABEL__write_338__2:
  .loc 1 377 9
  # $4.1: @FILE = call(end_line_340, stderr)
  mov rdi, stderr[rip]
  call end_line_340
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $4.1:rax 
  .loc 1 377 9
  # $5.1: @FILE = call(end_line_340, $4.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $5.1:rax 
  .loc 1 377 9
  # $6.1: @FILE = call(write_337, $5.1, "Failed to write text")
  mov rdi, rax
  lea rsi, .LABEL__string_358[rip] # "Failed to write text"
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $6.1:rax 
  .loc 1 377 9
  # $7.1: @FILE = call(end_line_340, $6.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  .loc 1 378 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__write_338__3:
  .loc 1 380 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_338__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_338__end:
  mov rsp, rbp
  pop rbp
  ret

write_338__stack_frame_size: .word 16

  .loc 1 383 1
  .text
write_339:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_339__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_339__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 1 384 10
  # c.1: Int32 = cast(char.1)
  mov al, sil
  movsx eax, al
  # [discarded value]: char.1
  # [live values]: self.1:rdi c.1:rax 
  .loc 1 385 9
  # $2.1: Int32 = call(fputc, c.1, self.1)
  mov [rbp-8], rdi
  mov edi, eax
  mov rsi, [rbp-8]
  mov [rbp-12], eax
  call fputc
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $2.1:rax 
  .loc 1 385 9
  # $3.1: Boolean = $2.1 != c.1
  cmp eax, DWORD PTR [rbp-12]
  setne bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:rbx 
  # jump($3.1, .LABEL__write_339__2, .LABEL__write_339__3)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__write_339__3
.LABEL__write_339__2:
  .loc 1 386 9
  # $4.1: @FILE = call(end_line_340, stderr)
  mov rdi, stderr[rip]
  call end_line_340
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $4.1:rax 
  .loc 1 386 9
  # $5.1: @FILE = call(end_line_340, $4.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $5.1:rax 
  .loc 1 386 9
  # $6.1: @FILE = call(write_337, $5.1, "Failed to write character: ")
  mov rdi, rax
  lea rsi, .LABEL__string_359[rip] # "Failed to write character: "
  call write_337
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax 
  .loc 1 386 81
  # $7.1: Int = cast(c.1)
  mov ebx, [rbp-12]
  movsx rbx, ebx
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax $7.1:rbx 
  .loc 1 386 9
  # $8.1: @FILE = call(write_336, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call write_336
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $8.1:rax 
  .loc 1 386 9
  # $9.1: @FILE = call(end_line_340, $8.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  .loc 1 387 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
.LABEL__write_339__3:
  .loc 1 389 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_339__end
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [discarded value]: c.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_339__end:
  mov rsp, rbp
  pop rbp
  ret

write_339__stack_frame_size: .word 16

  .loc 1 392 1
  .text
end_line_340:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR end_line_340__stack_frame_size[rip]
  sub rsp, rax
.LABEL__end_line_340__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 1 393 12
  # $1.1: @FILE = call(write_339, self.1, '\n')
  mov sil, 10
  call write_339
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 1 393 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__end_line_340__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__end_line_340__end:
  mov rsp, rbp
  pop rbp
  ret

end_line_340__stack_frame_size: .word 16

  .loc 1 396 1
  .text
flush_341:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR flush_341__stack_frame_size[rip]
  sub rsp, rax
.LABEL__flush_341__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  .loc 1 397 5
  # $1.1: Int32 = call(fflush, file.1)
  mov [rbp-8], rdi
  call fflush
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] 
  .loc 1 398 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__flush_341__end
  # [discarded value]: file.1
  # [live values]: 
.LABEL__flush_341__end:
  mov rsp, rbp
  pop rbp
  ret

flush_341__stack_frame_size: .word 16

  .loc 1 401 1
  .text
abort_342:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_342__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_342__1:
  # message.1: @String = load_variable(message)
  # [live values]: message.1:rdi 
  .loc 1 402 5
  # $1.1: @FILE = call(end_line_340, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_340
  # [live values]: message.1:[rbp-8] $1.1:rax 
  .loc 1 402 5
  # $2.1: @FILE = call(end_line_340, $1.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] $2.1:rax 
  .loc 1 402 5
  # $3.1: @FILE = call(write_337, $2.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_337
  # [discarded value]: $2.1
  # [discarded value]: message.1
  # [live values]: $3.1:rax 
  .loc 1 402 5
  # $4.1: @FILE = call(end_line_340, $3.1)
  mov rdi, rax
  call end_line_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: 
  .loc 1 403 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_342__end:
  mov rsp, rbp
  pop rbp
  ret

abort_342__stack_frame_size: .word 16

  .loc 13 13 1
  .text
is_343:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_343__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_343__1:
  # self.1: @Object = load_variable(self)
  # [live values]: self.1:rdi 
  # object_type.1: @Object_Type = load_variable(object_type)
  # [live values]: self.1:rdi object_type.1:rsi 
  .loc 13 14 18
  # self_type.1: @Object_Type = load_struct_member(self.1, object_type)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: object_type.1:rsi self_type.1:rax 
  # jump(.LABEL__is_343__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__is_343__2:
  # self_type.2: @Object_Type = phi(self_type.1, self_type.4)
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  .loc 13 16 13
  # $2.1: Boolean = self_type.2 == object_type.1
  mov rax, [rbp-8]
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:rax:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__is_343__4, .LABEL__is_343__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__is_343__5
.LABEL__is_343__4:
  .loc 13 17 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_343__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_343__5:
  .loc 13 19 21
  # self_type.4: @Object_Type = load_struct_member(self_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] 
  .loc 13 20 13
  # $4.1: Boolean = self_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_343__7, .LABEL__is_343__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_343__2
.LABEL__is_343__7:
  .loc 13 21 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_343__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] 
  # [discarded value]: self_type.4
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [discarded value]: self_type.2
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [discarded value]: self_type.1
  # [discarded value]: object_type.1
  # [live values]: 
.LABEL__is_343__end:
  mov rsp, rbp
  pop rbp
  ret

is_343__stack_frame_size: .word 32

  .loc 14 9 1
  .text
create_string_344:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_344__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_344__1:
  # data.1: @Int8 = load_variable(data)
  # [live values]: data.1:rdi 
  .loc 14 10 5
  # data_length.1: Int = 0
  xor rax, rax
  # [live values]: data.1:rdi data_length.1:rax 
  # jump(.LABEL__create_string_344__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__create_string_344__2:
  # data_length.2: Int = phi(data_length.1, data_length.4)
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  .loc 14 12 17
  # char.1: Int8 = load_array_item(data.1, data_length.2)
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  add rax, rbx
  mov al, [rax]
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] char.1:rax 
  .loc 14 13 13
  # $2.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__create_string_344__3, .LABEL__create_string_344__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__create_string_344__5
.LABEL__create_string_344__3:
  .loc 14 19 48
  # $4.1: Int = data_length.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $4.1:rax 
  .loc 14 19 12
  # $5.1: @String = new String(data = data.1, data_size = $4.1, length = data_length.2)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  #     .data = data.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = $4.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+8], r15
  #     .length = data_length.2
  mov r14, [rbp-8]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $4.1
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:r14:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 14 19 5
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__create_string_344__end
  # [discarded value]: $5.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__create_string_344__5:
  .loc 14 16 23
  # $3.1: Int = data_length.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $3.1:rax 
  .loc 14 16 9
  # data_length.4: Int = $3.1
  mov [rbp-25], rax
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:rax:[rbp-8] 
  # jump(.LABEL__create_string_344__2)
  mov [rbp-8], rax
  jmp .LABEL__create_string_344__2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:[rbp-8] 
  # [discarded value]: data_length.4
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # [discarded value]: data_length.2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [discarded value]: data_length.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__create_string_344__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_344__stack_frame_size: .word 32

  .loc 14 22 1
  .text
clone_345:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR clone_345__stack_frame_size[rip]
  sub rsp, rax
.LABEL__clone_345__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 23 39
  # $1.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 14 23 32
  # $3.1: @Int8 = call(malloc, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call malloc
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 14 23 77
  # $4.1: Int = load_struct_member(self.1, data_size)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 14 23 14
  # clone.1: @String = new String(data = $3.1, data_size = $4.1, length = 0)
  mov [rbp-16], rax
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  #     .data = $3.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = $4.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+8], r15
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] clone.1:rax 
  .loc 14 24 5
  # $6.1: @String = call(append_354, clone.1, self.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_354
  # [discarded value]: $6.1
  # [discarded value]: self.1
  # [live values]: clone.1:[rbp-16] 
  .loc 14 25 5
  # return(clone.1)
  mov rax, [rbp-16]
  jmp .LABEL__clone_345__end
  # [discarded value]: clone.1
  # [live values]: 
.LABEL__clone_345__end:
  mov rsp, rbp
  pop rbp
  ret

clone_345__stack_frame_size: .word 32

  .loc 14 28 1
  .text
equals_346:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_346__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_346__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 29 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 29 24
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 29 9
  # $3.1: Boolean = $1.1 == $2.1
  cmp rax, rbx
  sete r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__equals_346__2, .LABEL__equals_346__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__equals_346__3
.LABEL__equals_346__2:
  .loc 14 30 9
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__equals_346__4)
  mov [rbp-25], rax
.LABEL__equals_346__4:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 31 24
  # $4.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 31 16
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__equals_346__5, .LABEL__equals_346__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__equals_346__6
.LABEL__equals_346__5:
  .loc 14 32 17
  # $6.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 32 17
  # $7.1: Int8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 32 37
  # $8.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 32 37
  # $9.1: Int8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 32 17
  # $10.1: Boolean = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__equals_346__7, .LABEL__equals_346__8)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__equals_346__8
.LABEL__equals_346__7:
  .loc 14 33 17
  # return(false)
  mov al, 0
  jmp .LABEL__equals_346__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__equals_346__8:
  .loc 14 35 21
  # $11.1: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] $11.1:rax 
  .loc 14 35 13
  # index.5: Int = $11.1
  mov [rbp-35], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__equals_346__4)
  mov [rbp-25], rax
  jmp .LABEL__equals_346__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__equals_346__6:
  .loc 14 37 9
  # return(true)
  mov al, 1
  jmp .LABEL__equals_346__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__equals_346__3:
  .loc 14 39 5
  # return(false)
  mov al, 0
  jmp .LABEL__equals_346__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__equals_346__end:
  mov rsp, rbp
  pop rbp
  ret

equals_346__stack_frame_size: .word 48

  .loc 14 42 1
  .text
index_of_347:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_347__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_347__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 43 5
  # self_index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:rdi other.1:rsi self_index.1:rax 
  # jump(.LABEL__index_of_347__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__index_of_347__2:
  # self_index.2: Int = phi(self_index.1, self_index.6)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  .loc 14 44 26
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx 
  .loc 14 44 40
  # $2.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx $2.1:r14 
  .loc 14 44 26
  # $3.1: Int = $1.1 - $2.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $3.1:r13 
  .loc 14 44 12
  # $4.1: Boolean = self_index.2 <= $3.1
  cmp QWORD PTR [rbp-8], r13
  setle bl
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:rbx 
  # jump($4.1, .LABEL__index_of_347__3, .LABEL__index_of_347__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__index_of_347__4
.LABEL__index_of_347__3:
  .loc 14 45 9
  # other_index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:rax 
  # jump(.LABEL__index_of_347__5)
  mov [rbp-33], rax
.LABEL__index_of_347__5:
  # other_index.2: Int = phi(other_index.1, other_index.5)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] 
  .loc 14 46 30
  # $5.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $5.1:rbx 
  .loc 14 46 16
  # $6.1: Boolean = other_index.2 < $5.1
  cmp QWORD PTR [rbp-33], rbx
  setl r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $6.1:r15 
  .loc 14 46 16
  # $7.1: Boolean = $6.1
  mov [rbp-34], r15b
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:r15 
  # jump($7.1, .LABEL__index_of_347__8, .LABEL__index_of_347__9)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__index_of_347__9
.LABEL__index_of_347__8:
  .loc 14 46 56
  # $8.1: Int = self_index.2 + other_index.2
  mov rax, [rbp-8]
  add rax, QWORD PTR [rbp-33]
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax 
  .loc 14 46 46
  # $9.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax $9.1:r15 
  .loc 14 46 46
  # $10.1: Int8 = load_array_item($9.1, $8.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov r14b, [r14]
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 
  .loc 14 46 85
  # $11.1: @Int8 = load_struct_member(other.1, data)
  mov rax, [rbp-16]
  mov r15, [rax]
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $11.1:r15 
  .loc 14 46 85
  # $12.1: Int8 = load_array_item($11.1, other_index.2)
  mov r13, r15
  mov r12, [rbp-33]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $11.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $12.1:r13 
  .loc 14 46 46
  # $13.1: Boolean = $10.1 == $12.1
  cmp r14b, r13b
  sete r15b
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $13.1:r15 
  .loc 14 46 16
  # $7.2: Boolean = $13.1
  mov [rbp-35], r15b
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:r15:[rbp-34] 
  # jump(.LABEL__index_of_347__9)
  mov [rbp-34], r15b
.LABEL__index_of_347__9:
  .loc 14 46 16
  # $7.3: Boolean = phi($7.1, $7.2)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($7.3, .LABEL__index_of_347__6, .LABEL__index_of_347__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__index_of_347__7
.LABEL__index_of_347__6:
  .loc 14 47 27
  # $14.1: Int = other_index.2 + 1
  mov rax, [rbp-33]
  add rax, 1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $14.1:rax $7.2:[rbp-34] $7.3:[rbp-34] 
  .loc 14 47 13
  # other_index.5: Int = $14.1
  mov [rbp-42], rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:rax:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump(.LABEL__index_of_347__5)
  mov [rbp-33], rax
  jmp .LABEL__index_of_347__5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: other_index.5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_347__7:
  .loc 14 49 28
  # $15.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $15.1:rbx $7.2:[rbp-34] $7.3:[rbp-34] 
  .loc 14 49 13
  # $16.1: Boolean = other_index.2 == $15.1
  cmp QWORD PTR [rbp-33], rbx
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:r15 $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($16.1, .LABEL__index_of_347__10, .LABEL__index_of_347__11)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__index_of_347__11
.LABEL__index_of_347__10:
  .loc 14 50 13
  # return(self_index.2)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_347__end
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_347__11:
  .loc 14 52 22
  # $17.1: Int = self_index.2 + 1
  mov rax, [rbp-8]
  add rax, 1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] $17.1:rax 
  .loc 14 52 9
  # self_index.6: Int = $17.1
  mov [rbp-43], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:rax:[rbp-8] 
  # jump(.LABEL__index_of_347__2)
  mov [rbp-8], rax
  jmp .LABEL__index_of_347__2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:[rbp-8] 
  # [discarded value]: self_index.6
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $7.3
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [discarded value]: $7.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [discarded value]: other_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [discarded value]: other_index.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
.LABEL__index_of_347__4:
  .loc 14 54 12
  # $18.1: Int =  - 1
  mov rax, 1
  neg rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] $18.1:rax 
  .loc 14 54 5
  # return($18.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_347__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # [discarded value]: self_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [discarded value]: self_index.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__index_of_347__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_347__stack_frame_size: .word 48

  .loc 14 57 1
  .text
starts_with_348:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR starts_with_348__stack_frame_size[rip]
  sub rsp, rax
.LABEL__starts_with_348__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 58 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 58 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 58 9
  # $3.1: Boolean = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__starts_with_348__2, .LABEL__starts_with_348__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__starts_with_348__3
.LABEL__starts_with_348__2:
  .loc 14 59 9
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_348__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__starts_with_348__3:
  .loc 14 61 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__starts_with_348__5)
  mov [rbp-25], rax
.LABEL__starts_with_348__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 62 20
  # $4.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 62 12
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__starts_with_348__6, .LABEL__starts_with_348__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__starts_with_348__7
.LABEL__starts_with_348__6:
  .loc 14 63 13
  # $6.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 63 13
  # $7.1: Int8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 63 33
  # $8.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 63 33
  # $9.1: Int8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 63 13
  # $10.1: Boolean = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__starts_with_348__8, .LABEL__starts_with_348__9)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__starts_with_348__9
.LABEL__starts_with_348__8:
  .loc 14 64 13
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_348__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__starts_with_348__9:
  .loc 14 66 17
  # $11.1: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] $11.1:rax 
  .loc 14 66 9
  # index.5: Int = $11.1
  mov [rbp-35], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__starts_with_348__5)
  mov [rbp-25], rax
  jmp .LABEL__starts_with_348__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__starts_with_348__7:
  .loc 14 68 5
  # return(true)
  mov al, 1
  jmp .LABEL__starts_with_348__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__starts_with_348__end:
  mov rsp, rbp
  pop rbp
  ret

starts_with_348__stack_frame_size: .word 48

  .loc 14 71 1
  .text
ends_with_349:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR ends_with_349__stack_frame_size[rip]
  sub rsp, rax
.LABEL__ends_with_349__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 72 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 72 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 72 9
  # $3.1: Boolean = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__ends_with_349__2, .LABEL__ends_with_349__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__ends_with_349__3
.LABEL__ends_with_349__2:
  .loc 14 73 9
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_349__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__ends_with_349__3:
  .loc 14 75 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__ends_with_349__5)
  mov [rbp-25], rax
.LABEL__ends_with_349__5:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 76 20
  # $4.1: Int = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 76 12
  # $5.1: Boolean = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__ends_with_349__6, .LABEL__ends_with_349__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__ends_with_349__7
.LABEL__ends_with_349__6:
  .loc 14 77 23
  # $6.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 77 37
  # $7.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx $7.1:r14 
  .loc 14 77 23
  # $8.1: Int = $6.1 - $7.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $8.1:r13 
  .loc 14 77 23
  # $9.1: Int = $8.1 + index.2
  mov rbx, r13
  add rbx, QWORD PTR [rbp-25]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx 
  .loc 14 77 13
  # $10.1: @Int8 = load_struct_member(self.1, data)
  mov r14, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx $10.1:r14 
  .loc 14 77 13
  # $11.1: Int8 = load_array_item($10.1, $9.1)
  mov r13, r14
  mov r12, rbx
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 
  .loc 14 77 62
  # $12.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [r15]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $12.1:rbx 
  .loc 14 77 62
  # $13.1: Int8 = load_array_item($12.1, index.2)
  mov r14, rbx
  mov r12, [rbp-25]
  add r14, r12
  mov r14b, [r14]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $13.1:r14 
  .loc 14 77 13
  # $14.1: Boolean = $11.1 != $13.1
  cmp r13b, r14b
  setne bl
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:rbx 
  # jump($14.1, .LABEL__ends_with_349__8, .LABEL__ends_with_349__9)
  test bl, bl
  mov [rbp-27], bl
  jz .LABEL__ends_with_349__9
.LABEL__ends_with_349__8:
  .loc 14 78 13
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_349__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__ends_with_349__9:
  .loc 14 80 17
  # $15.1: Int = index.2 + 1
  mov rax, [rbp-25]
  add rax, 1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] $15.1:rax 
  .loc 14 80 9
  # index.5: Int = $15.1
  mov [rbp-35], rax
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__ends_with_349__5)
  mov [rbp-25], rax
  jmp .LABEL__ends_with_349__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__ends_with_349__7:
  .loc 14 82 5
  # return(true)
  mov al, 1
  jmp .LABEL__ends_with_349__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__ends_with_349__end:
  mov rsp, rbp
  pop rbp
  ret

ends_with_349__stack_frame_size: .word 48

  .loc 14 85 1
  .text
last_index_of_350:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_350__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_350__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 86 37
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 86 37
  # $2.1: Int = $1.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 86 12
  # $3.1: Int = call(last_index_of_351, self.1, char.1, $2.1)
  mov rdx, rbx
  call last_index_of_351
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 14 86 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_350__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__last_index_of_350__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_350__stack_frame_size: .word 16

  .loc 14 89 1
  .text
last_index_of_351:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_351__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_351__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # index.1: Int = load_variable(from_index)
  # [live values]: self.1:rdi char.1:rsi index.1:rdx 
  # jump(.LABEL__last_index_of_351__2)
  mov [rbp-8], rdx
  mov [rbp-9], sil
  mov [rbp-17], rdi
.LABEL__last_index_of_351__2:
  # index.2: Int = phi(index.1, index.5)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] 
  .loc 14 91 12
  # $1.1: Boolean = index.2 >= 0
  cmp QWORD PTR [rbp-8], 0
  setge al
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $1.1:rax 
  .loc 14 91 12
  # $2.1: Boolean = $1.1
  mov [rbp-18], al
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__last_index_of_351__5, .LABEL__last_index_of_351__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__last_index_of_351__6
.LABEL__last_index_of_351__5:
  .loc 14 91 26
  # $3.1: @Int8 = load_struct_member(self.1, data)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $3.1:rbx 
  .loc 14 91 26
  # $4.1: Int8 = load_array_item($3.1, index.2)
  mov r15, rbx
  mov r14, [rbp-8]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $4.1:r15 
  .loc 14 91 26
  # $5.1: Boolean = $4.1 != char.1
  cmp r15b, BYTE PTR [rbp-9]
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $5.1:rbx 
  .loc 14 91 12
  # $2.2: Boolean = $5.1
  mov [rbp-19], bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:rbx:[rbp-18] 
  # jump(.LABEL__last_index_of_351__6)
  mov [rbp-18], bl
.LABEL__last_index_of_351__6:
  .loc 14 91 12
  # $2.3: Boolean = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump($2.3, .LABEL__last_index_of_351__3, .LABEL__last_index_of_351__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__last_index_of_351__4
.LABEL__last_index_of_351__3:
  .loc 14 92 17
  # $6.1: Int = index.2 - 1
  mov rax, [rbp-8]
  dec rax
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $6.1:rax $2.2:[rbp-18] $2.3:[rbp-18] 
  .loc 14 92 9
  # index.5: Int = $6.1
  mov [rbp-26], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:rax:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump(.LABEL__last_index_of_351__2)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_351__2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
.LABEL__last_index_of_351__4:
  .loc 14 94 5
  # return(index.2)
  mov rax, [rbp-8]
  jmp .LABEL__last_index_of_351__end
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [discarded value]: index.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_index_of_351__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_351__stack_frame_size: .word 32

  .loc 14 97 1
  .text
append_352:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_352__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_352__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: Int8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 98 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 98 9
  # $2.1: Int = $1.1 + 1
  mov rbx, rax
  add rbx, 1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 98 28
  # $3.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx $3.1:rax 
  .loc 14 98 9
  # $4.1: Boolean = $2.1 >= $3.1
  cmp rbx, rax
  setge r15b
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi char.1:rsi $4.1:r15 
  # jump($4.1, .LABEL__append_352__2, .LABEL__append_352__3)
  test r15b, r15b
  mov [rbp-1], sil
  mov [rbp-9], rdi
  mov [rbp-10], r15b
  jz .LABEL__append_352__3
.LABEL__append_352__2:
  .loc 14 99 26
  # $5.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $5.1:rbx 
  .loc 14 99 26
  # $6.1: Int = $5.1 + 16
  mov r15, rbx
  add r15, 16
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $6.1:r15 
  .loc 14 99 9
  # store_struct_member(self.1, data_size, $6.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  .loc 14 100 29
  # $7.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx 
  .loc 14 100 40
  # $8.1: Int = load_struct_member(self.1, data_size)
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx $8.1:r15 
  .loc 14 100 21
  # $10.1: @Int8 = call(realloc, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call realloc
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $10.1:rax 
  .loc 14 100 9
  # store_struct_member(self.1, data, $10.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # jump(.LABEL__append_352__3)
.LABEL__append_352__3:
  .loc 14 102 15
  # $11.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx 
  .loc 14 102 5
  # $12.1: @Int8 = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx $12.1:r15 
  .loc 14 102 5
  # store_array_item($12.1, $11.1, char.1)
  mov r14, r15
  mov r13, rbx
  add r14, r13
  mov r13b, [rbp-1]
  mov BYTE PTR [r14], r13b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 103 19
  # $13.1: Int = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $13.1:rbx 
  .loc 14 103 19
  # $14.1: Int = $13.1 + 1
  mov r15, rbx
  add r15, 1
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $14.1:r15 
  .loc 14 103 5
  # store_struct_member(self.1, length, $14.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 104 15
  # $15.1: Int = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx 
  .loc 14 104 5
  # $16.1: @Int8 = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx $16.1:r15 
  .loc 14 104 5
  # store_array_item($16.1, $15.1, '\0')
  mov r14, r15
  mov r12, rbx
  add r14, r12
  mov BYTE PTR [r14], 0
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 105 5
  # return(self.1)
  jmp .LABEL__append_352__end
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_352__end:
  mov rsp, rbp
  pop rbp
  ret

append_352__stack_frame_size: .word 16

  .loc 14 108 1
  .text
append_353:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_353__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_353__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: Int = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 14 109 9
  # $1.1: Boolean = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__append_353__2, .LABEL__append_353__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_353__3
.LABEL__append_353__2:
  .loc 14 110 16
  # $2.1: @String = call(append_352, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call append_352
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 14 110 40
  # $3.1: Int =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 14 110 16
  # $4.1: @String = call(append_353, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call append_353
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 14 110 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__append_353__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__append_353__3:
  .loc 14 112 9
  # $5.1: Boolean = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__append_353__5, .LABEL__append_353__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__append_353__6
.LABEL__append_353__5:
  .loc 14 113 21
  # $6.1: Int = number.1 / 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 14 113 9
  # $7.1: @String = call(append_353, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call append_353
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__append_353__6)
.LABEL__append_353__6:
  .loc 14 115 25
  # $8.1: Int = number.1 // 10
  mov rax, [rbp-9]
  cqto
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 14 115 40
  # $9.1: Int = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 14 115 25
  # $10.1: Int = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 14 115 24
  # $11.1: Int8 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 14 115 12
  # $12.1: @String = call(append_352, self.1, $11.1)
  mov rdi, [rbp-17]
  mov sil, al
  call append_352
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $12.1:rax 
  .loc 14 115 5
  # return($12.1)
  mov [rbp-26], rax
  jmp .LABEL__append_353__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_353__end:
  mov rsp, rbp
  pop rbp
  ret

append_353__stack_frame_size: .word 32

  .loc 14 118 1
  .text
append_354:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_354__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_354__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 119 9
  # $1.1: Int = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 119 23
  # $2.1: Int = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 119 9
  # $3.1: Int = $1.1 + $2.1
  mov r15, rax
  add r15, rbx
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  .loc 14 119 39
  # $4.1: Int = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 $4.1:rax 
  .loc 14 119 9
  # $5.1: Boolean = $3.1 >= $4.1
  cmp r15, rax
  setge bl
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi other.1:rsi $5.1:rbx 
  # jump($5.1, .LABEL__append_354__2, .LABEL__append_354__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_354__3
.LABEL__append_354__2:
  .loc 14 120 26
  # $6.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $6.1:rbx 
  .loc 14 120 40
  # $7.1: Int = load_struct_member(other.1, length)
  mov r15, [rbp-9]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 14 120 26
  # $8.1: Int = $6.1 + $7.1
  mov r13, rbx
  add r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $8.1:r13 
  .loc 14 120 26
  # $9.1: Int = $8.1 + 1
  mov rbx, r13
  add rbx, 1
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $9.1:rbx 
  .loc 14 120 9
  # store_struct_member(self.1, data_size, $9.1)
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] 
  .loc 14 121 29
  # $10.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx 
  .loc 14 121 40
  # $11.1: Int = load_struct_member(self.1, data_size)
  mov r14, [rax+8]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx $11.1:r14 
  .loc 14 121 21
  # $13.1: @Int8 = call(realloc, $10.1, $11.1)
  mov rdi, rbx
  mov rsi, r14
  call realloc
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $13.1:rax 
  .loc 14 121 9
  # store_struct_member(self.1, data, $13.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # jump(.LABEL__append_354__3)
.LABEL__append_354__3:
  .loc 14 123 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:rax 
  .loc 14 124 19
  # other_data.1: @Int8 = load_struct_member(other.1, data)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 
  .loc 14 125 18
  # self_data.1: @Int8 = load_struct_member(self.1, data)
  mov r14, [rbp-17]
  mov r13, [r14]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 
  .loc 14 126 20
  # self_length.1: Int = load_struct_member(self.1, length)
  mov r12, [r14+16]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 self_length.1:r12 
  # jump(.LABEL__append_354__4)
  mov [rbp-25], rax
  mov [rbp-33], r12
  mov [rbp-41], r13
  mov [rbp-49], r15
.LABEL__append_354__4:
  # self_length.2: Int = phi(self_length.1, self_length.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] 
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  .loc 14 128 17
  # char.1: Int8 = load_array_item(other_data.1, index.2)
  mov rax, [rbp-49]
  mov rbx, [rbp-25]
  add rax, rbx
  mov al, [rax]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 129 9
  # store_array_item(self_data.1, self_length.2, char.1)
  mov rbx, [rbp-41]
  mov r15, [rbp-33]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 130 13
  # $18.1: Boolean = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:rbx 
  # jump($18.1, .LABEL__append_354__5, .LABEL__append_354__7)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__append_354__7
.LABEL__append_354__5:
  .loc 14 136 5
  # store_struct_member(self.1, length, self_length.2)
  mov rax, [rbp-17]
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:rbx:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  .loc 14 137 5
  # return(self.1)
  jmp .LABEL__append_354__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
.LABEL__append_354__7:
  .loc 14 133 23
  # $19.1: Int = self_length.2 + 1
  mov rax, [rbp-33]
  add rax, 1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] $19.1:rax 
  .loc 14 133 9
  # self_length.4: Int = $19.1
  mov [rbp-58], rax
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] 
  .loc 14 134 17
  # $20.1: Int = index.2 + 1
  mov rbx, [rbp-25]
  add rbx, 1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] $20.1:rbx 
  .loc 14 134 9
  # index.4: Int = $20.1
  mov [rbp-58], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] index.4:rbx:[rbp-25] 
  # jump(.LABEL__append_354__4)
  mov [rbp-33], rax
  mov [rbp-25], rbx
  jmp .LABEL__append_354__4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:[rbp-33] index.4:[rbp-25] 
  # [discarded value]: index.4
  # [discarded value]: self_length.4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [discarded value]: self_length.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [discarded value]: self_length.1
  # [discarded value]: self_data.1
  # [discarded value]: other_data.1
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_354__end:
  mov rsp, rbp
  pop rbp
  ret

append_354__stack_frame_size: .word 64

  .loc 14 140 1
  .text
remove_355:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_355__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_355__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # begin_index.1: Int = load_variable(begin_index)
  # [live values]: self.1:rdi begin_index.1:rsi 
  # end_index.1: Int = load_variable(end_index)
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx 
  .loc 14 141 9
  # $1.1: Boolean = begin_index.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $1.1:rax 
  .loc 14 141 9
  # $2.1: Boolean = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $2.1:rax 
  # jump($2.1, .LABEL__remove_355__5, .LABEL__remove_355__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__remove_355__4
.LABEL__remove_355__5:
  .loc 14 141 9
  # $4.1: Boolean = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__remove_355__3, .LABEL__remove_355__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__remove_355__2
.LABEL__remove_355__3:
  .loc 14 141 9
  # $4.3: Boolean = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # jump($4.3, .LABEL__remove_355__6, .LABEL__remove_355__7)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_355__7
.LABEL__remove_355__6:
  .loc 14 142 9
  # call(abort_342, "Invalid state")
  lea rdi, .LABEL__string_44[rip] # "Invalid state"
  call abort_342
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
.LABEL__remove_355__7:
  .loc 14 144 5
  # index.1: Int = 0
  xor rax, rax
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:rax 
  # jump(.LABEL__remove_355__8)
  mov [rbp-34], rax
.LABEL__remove_355__8:
  # index.2: Int = phi(index.1, index.4)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  .loc 14 145 12
  # $7.1: Int = index.2 + end_index.1
  mov rax, [rbp-34]
  add rax, QWORD PTR [rbp-9]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax 
  .loc 14 145 33
  # $8.1: Int = load_struct_member(self.1, length)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax $8.1:r15 
  .loc 14 145 12
  # $9.1: Boolean = $7.1 <= $8.1
  cmp rax, r15
  setle r14b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:r14 
  # jump($9.1, .LABEL__remove_355__9, .LABEL__remove_355__10)
  test r14b, r14b
  mov [rbp-35], r14b
  jz .LABEL__remove_355__10
.LABEL__remove_355__9:
  .loc 14 146 19
  # $10.1: Int = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax 
  .loc 14 146 9
  # $11.1: @Int8 = load_struct_member(self.1, data)
  mov rbx, [rbp-25]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 
  .loc 14 146 52
  # $12.1: Int = end_index.1 + index.2
  mov r14, [rbp-9]
  add r14, QWORD PTR [rbp-34]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 
  .loc 14 146 42
  # $13.1: @Int8 = load_struct_member(self.1, data)
  mov r13, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 $13.1:r13 
  .loc 14 146 42
  # $14.1: Int8 = load_array_item($13.1, $12.1)
  mov r12, r13
  mov r11, r14
  add r12, r11
  mov r12b, [r12]
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $14.1:r12 
  .loc 14 146 9
  # store_array_item($11.1, $10.1, $14.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov BYTE PTR [r14], r12b
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 147 17
  # $15.1: Int = index.2 + 1
  mov rax, [rbp-34]
  add rax, 1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $15.1:rax 
  .loc 14 147 9
  # index.4: Int = $15.1
  mov [rbp-43], rax
  # [discarded value]: $15.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:rax:[rbp-34] 
  # jump(.LABEL__remove_355__8)
  mov [rbp-34], rax
  jmp .LABEL__remove_355__8
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:[rbp-34] 
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
.LABEL__remove_355__10:
  .loc 14 149 19
  # $16.1: Int = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $16.1:rax 
  .loc 14 149 19
  # $17.1: Int = $16.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $17.1:rbx 
  .loc 14 149 5
  # store_struct_member(self.1, length, $17.1)
  mov rax, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 150 5
  # return(self.1)
  jmp .LABEL__remove_355__end
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
.LABEL__remove_355__2:
  .loc 14 141 68
  # $5.1: Int = load_struct_member(self.1, length)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $5.1:rbx $4.1:[rbp-26] 
  .loc 14 141 55
  # $6.1: Boolean = end_index.1 >= $5.1
  cmp QWORD PTR [rbp-9], rbx
  setge r15b
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $6.1:r15 $4.1:[rbp-26] 
  .loc 14 141 9
  # $4.2: Boolean = $6.1
  mov [rbp-27], r15b
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:r15:[rbp-26] $4.1:[rbp-26] 
  # jump(.LABEL__remove_355__3)
  mov [rbp-26], r15b
  jmp .LABEL__remove_355__3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_355__4:
  .loc 14 141 28
  # $3.1: Boolean = begin_index.1 > end_index.1
  mov rax, [rbp-17]
  cmp rax, QWORD PTR [rbp-9]
  setg bl
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 14 141 9
  # $2.2: Boolean = $3.1
  mov [rbp-26], bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:rbx:[rbp-1] 
  # jump(.LABEL__remove_355__5)
  mov [rbp-1], bl
  jmp .LABEL__remove_355__5
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: end_index.1
  # [discarded value]: begin_index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_355__end:
  mov rsp, rbp
  pop rbp
  ret

remove_355__stack_frame_size: .word 48

  .section .rodata

  .align 8
.LABEL__string_0:
  .quad .LABEL__string_0__data
  .quad 7
  .quad 6
.LABEL__string_0__data: .string "Usage:"

  .align 8
.LABEL__string_1:
  .quad .LABEL__string_1__data
  .quad 28
  .quad 27
.LABEL__string_1__data: .string " <INPUT FILE> <OUTPUT FILE>"

  .align 8
.LABEL__string_2:
  .quad .LABEL__string_2__data
  .quad 6
  .quad 5
.LABEL__string_2__data: .string ".code"

  .align 8
.LABEL__string_3:
  .quad .LABEL__string_3__data
  .quad 2
  .quad 1
.LABEL__string_3__data: .string "'"

  .align 8
.LABEL__string_4:
  .quad .LABEL__string_4__data
  .quad 28
  .quad 27
.LABEL__string_4__data: .string "' doesn't end with '.code'."

  .align 8
.LABEL__string_5:
  .quad .LABEL__string_5__data
  .quad 3
  .quad 2
.LABEL__string_5__data: .string ".s"

  .align 8
.LABEL__string_6:
  .quad .LABEL__string_6__data
  .quad 25
  .quad 24
.LABEL__string_6__data: .string "' doesn't end with '.s'."

  .align 8
.LABEL__string_7:
  .quad .LABEL__string_7__data
  .quad 4
  .quad 3
.LABEL__string_7__data: .string ".ir"

  .align 8
.LABEL__string_8:
  .quad .LABEL__string_8__data
  .quad 26
  .quad 25
.LABEL__string_8__data: .string "' doesn't end with '.ir'."

  .align 8
.LABEL__string_9:
  .quad .LABEL__string_9__data
  .quad 2
  .quad 1
.LABEL__string_9__data: .string "w"

  .align 8
.LABEL__string_10:
  .quad .LABEL__string_10__data
  .quad 9
  .quad 8
.LABEL__string_10__data: .string "  .file "

  .align 8
.LABEL__string_11:
  .quad .LABEL__string_11__data
  .quad 3
  .quad 2
.LABEL__string_11__data: .string " \""

  .align 8
.LABEL__string_12:
  .quad .LABEL__string_12__data
  .quad 2
  .quad 1
.LABEL__string_12__data: .string "\""

  .align 8
.LABEL__string_13:
  .quad .LABEL__string_13__data
  .quad 25
  .quad 24
.LABEL__string_13__data: .string "  .intel_syntax noprefix"

  .align 8
.LABEL__string_14:
  .quad .LABEL__string_14__data
  .quad 8
  .quad 7
.LABEL__string_14__data: .string "  .loc "

  .align 8
.LABEL__string_15:
  .quad .LABEL__string_15__data
  .quad 8
  .quad 7
.LABEL__string_15__data: .string "  .text"

  .align 8
.LABEL__string_16:
  .quad .LABEL__string_16__data
  .quad 5
  .quad 4
.LABEL__string_16__data: .string "main"

  .align 8
.LABEL__string_17:
  .quad .LABEL__string_17__data
  .quad 14
  .quad 13
.LABEL__string_17__data: .string "  .globl main"

  .align 8
.LABEL__string_18:
  .quad .LABEL__string_18__data
  .quad 6
  .quad 5
.LABEL__string_18__data: .string "main:"

  .align 8
.LABEL__string_19:
  .quad .LABEL__string_19__data
  .quad 11
  .quad 10
.LABEL__string_19__data: .string "  push rbp"

  .align 8
.LABEL__string_20:
  .quad .LABEL__string_20__data
  .quad 15
  .quad 14
.LABEL__string_20__data: .string "  mov rbp, rsp"

  .align 8
.LABEL__string_21:
  .quad .LABEL__string_21__data
  .quad 23
  .quad 22
.LABEL__string_21__data: .string "  movsx rax, WORD PTR "

  .align 8
.LABEL__string_22:
  .quad .LABEL__string_22__data
  .quad 19
  .quad 18
.LABEL__string_22__data: .string "__stack_frame_size"

  .align 8
.LABEL__string_23:
  .quad .LABEL__string_23__data
  .quad 6
  .quad 5
.LABEL__string_23__data: .string "[rip]"

  .align 8
.LABEL__string_24:
  .quad .LABEL__string_24__data
  .quad 15
  .quad 14
.LABEL__string_24__data: .string "  sub rsp, rax"

  .align 8
.LABEL__string_25:
  .quad .LABEL__string_25__data
  .quad 2
  .quad 1
.LABEL__string_25__data: .string ":"

  .align 8
.LABEL__string_26:
  .quad .LABEL__string_26__data
  .quad 15
  .quad 14
.LABEL__string_26__data: .string "  mov rsp, rbp"

  .align 8
.LABEL__string_27:
  .quad .LABEL__string_27__data
  .quad 10
  .quad 9
.LABEL__string_27__data: .string "  pop rbp"

  .align 8
.LABEL__string_28:
  .quad .LABEL__string_28__data
  .quad 15
  .quad 14
.LABEL__string_28__data: .string "  xor rax, rax"

  .align 8
.LABEL__string_29:
  .quad .LABEL__string_29__data
  .quad 6
  .quad 5
.LABEL__string_29__data: .string "  ret"

  .align 8
.LABEL__string_30:
  .quad .LABEL__string_30__data
  .quad 9
  .quad 8
.LABEL__string_30__data: .string ": .word "

  .align 8
.LABEL__string_31:
  .quad .LABEL__string_31__data
  .quad 9
  .quad 8
.LABEL__string_31__data: .string ".LABEL__"

  .align 8
.LABEL__string_32:
  .quad .LABEL__string_32__data
  .quad 3
  .quad 2
.LABEL__string_32__data: .string "__"

  .align 8
.LABEL__string_33:
  .quad .LABEL__string_33__data
  .quad 4
  .quad 3
.LABEL__string_33__data: .string "end"

  .align 8
.LABEL__string_34:
  .quad .LABEL__string_34__data
  .quad 32
  .quad 31
.LABEL__string_34__data: .string "  # [unreachable instruction]: "

  .align 8
.LABEL__string_35:
  .quad .LABEL__string_35__data
  .quad 5
  .quad 4
.LABEL__string_35__data: .string "  # "

  .align 8
.LABEL__string_36:
  .quad .LABEL__string_36__data
  .quad 26
  .quad 25
.LABEL__string_36__data: .string "Unsupported instruction: "

  .align 8
.LABEL__string_37:
  .quad .LABEL__string_37__data
  .quad 7
  .quad 6
.LABEL__string_37__data: .string "  add "

  .align 8
.LABEL__string_38:
  .quad .LABEL__string_38__data
  .quad 3
  .quad 2
.LABEL__string_38__data: .string ", "

  .align 8
.LABEL__string_39:
  .quad .LABEL__string_39__data
  .quad 8
  .quad 7
.LABEL__string_39__data: .string "  call "

  .align 8
.LABEL__string_40:
  .quad .LABEL__string_40__data
  .quad 9
  .quad 8
.LABEL__string_40__data: .string "  movsx "

  .align 8
.LABEL__string_41:
  .quad .LABEL__string_41__data
  .quad 13
  .quad 12
.LABEL__string_41__data: .string "Cannot cast "

  .align 8
.LABEL__string_42:
  .quad .LABEL__string_42__data
  .quad 5
  .quad 4
.LABEL__string_42__data: .string " to "

  .align 8
.LABEL__string_43:
  .quad .LABEL__string_43__data
  .quad 23
  .quad 22
.LABEL__string_43__data: .string "Unsupported value type"

  .align 8
.LABEL__string_44:
  .quad .LABEL__string_44__data
  .quad 14
  .quad 13
.LABEL__string_44__data: .string "Invalid state"

  .align 8
.LABEL__string_45:
  .quad .LABEL__string_45__data
  .quad 8
  .quad 7
.LABEL__string_45__data: .string "  test "

  .align 8
.LABEL__string_46:
  .quad .LABEL__string_46__data
  .quad 7
  .quad 6
.LABEL__string_46__data: .string "  jnz "

  .align 8
.LABEL__string_47:
  .quad .LABEL__string_47__data
  .quad 6
  .quad 5
.LABEL__string_47__data: .string "  jz "

  .align 8
.LABEL__string_48:
  .quad .LABEL__string_48__data
  .quad 7
  .quad 6
.LABEL__string_48__data: .string "  cmp "

  .align 8
.LABEL__string_49:
  .quad .LABEL__string_49__data
  .quad 8
  .quad 7
.LABEL__string_49__data: .string "  sete "

  .align 8
.LABEL__string_50:
  .quad .LABEL__string_50__data
  .quad 8
  .quad 7
.LABEL__string_50__data: .string "  setg "

  .align 8
.LABEL__string_51:
  .quad .LABEL__string_51__data
  .quad 9
  .quad 8
.LABEL__string_51__data: .string "  setge "

  .align 8
.LABEL__string_52:
  .quad .LABEL__string_52__data
  .quad 8
  .quad 7
.LABEL__string_52__data: .string "  setl "

  .align 8
.LABEL__string_53:
  .quad .LABEL__string_53__data
  .quad 9
  .quad 8
.LABEL__string_53__data: .string "  setle "

  .align 8
.LABEL__string_54:
  .quad .LABEL__string_54__data
  .quad 9
  .quad 8
.LABEL__string_54__data: .string "  setne "

  .align 8
.LABEL__string_55:
  .quad .LABEL__string_55__data
  .quad 42
  .quad 41
.LABEL__string_55__data: .string "Unsupported comparison instruction type: "

  .align 8
.LABEL__string_56:
  .quad .LABEL__string_56__data
  .quad 7
  .quad 6
.LABEL__string_56__data: .string "  jmp "

  .align 8
.LABEL__string_57:
  .quad .LABEL__string_57__data
  .quad 7
  .quad 6
.LABEL__string_57__data: .string "  cqto"

  .align 8
.LABEL__string_58:
  .quad .LABEL__string_58__data
  .quad 8
  .quad 7
.LABEL__string_58__data: .string "  idiv "

  .align 8
.LABEL__string_59:
  .quad .LABEL__string_59__data
  .quad 7
  .quad 6
.LABEL__string_59__data: .string "  mov "

  .align 8
.LABEL__string_60:
  .quad .LABEL__string_60__data
  .quad 8
  .quad 7
.LABEL__string_60__data: .string "  imul "

  .align 8
.LABEL__string_61:
  .quad .LABEL__string_61__data
  .quad 24
  .quad 23
.LABEL__string_61__data: .string "Variable has no address"

  .align 8
.LABEL__string_62:
  .quad .LABEL__string_62__data
  .quad 7
  .quad 6
.LABEL__string_62__data: .string "  lea "

  .align 8
.LABEL__string_63:
  .quad .LABEL__string_63__data
  .quad 28
  .quad 27
.LABEL__string_63__data: .string "Unsupported variable type: "

  .align 8
.LABEL__string_64:
  .quad .LABEL__string_64__data
  .quad 7
  .quad 6
.LABEL__string_64__data: .string "malloc"

  .align 8
.LABEL__string_65:
  .quad .LABEL__string_65__data
  .quad 12
  .quad 11
.LABEL__string_65__data: .string "Looks like "

  .align 8
.LABEL__string_66:
  .quad .LABEL__string_66__data
  .quad 29
  .quad 28
.LABEL__string_66__data: .string " is not properly initialized"

  .align 8
.LABEL__string_67:
  .quad .LABEL__string_67__data
  .quad 11
  .quad 10
.LABEL__string_67__data: .string "QWORD PTR "

  .align 8
.LABEL__string_68:
  .quad .LABEL__string_68__data
  .quad 11
  .quad 10
.LABEL__string_68__data: .string "DWORD PTR "

  .align 8
.LABEL__string_69:
  .quad .LABEL__string_69__data
  .quad 10
  .quad 9
.LABEL__string_69__data: .string "WORD PTR "

  .align 8
.LABEL__string_70:
  .quad .LABEL__string_70__data
  .quad 10
  .quad 9
.LABEL__string_70__data: .string "BYTE PTR "

  .align 8
.LABEL__string_71:
  .quad .LABEL__string_71__data
  .quad 19
  .quad 18
.LABEL__string_71__data: .string "Unsupported type: "

  .align 8
.LABEL__string_72:
  .quad .LABEL__string_72__data
  .quad 7
  .quad 6
.LABEL__string_72__data: .string "  neg "

  .align 8
.LABEL__string_73:
  .quad .LABEL__string_73__data
  .quad 7
  .quad 6
.LABEL__string_73__data: .string "  dec "

  .align 8
.LABEL__string_74:
  .quad .LABEL__string_74__data
  .quad 7
  .quad 6
.LABEL__string_74__data: .string "  sub "

  .align 8
.LABEL__string_75:
  .quad .LABEL__string_75__data
  .quad 7
  .quad 6
.LABEL__string_75__data: .string "  xor "

  .align 8
.LABEL__string_76:
  .quad .LABEL__string_76__data
  .quad 4
  .quad 3
.LABEL__string_76__data: .string " # "

  .align 8
.LABEL__string_77:
  .quad .LABEL__string_77__data
  .quad 27
  .quad 26
.LABEL__string_77__data: .string "Unsupported literal type: "

  .align 8
.LABEL__string_78:
  .quad .LABEL__string_78__data
  .quad 25
  .quad 24
.LABEL__string_78__data: .string "Unsupported value type: "

  .align 8
.LABEL__string_79:
  .quad .LABEL__string_79__data
  .quad 56
  .quad 55
.LABEL__string_79__data: .string "The required variable value has been discarded already?"

  .align 8
.LABEL__string_80:
  .quad .LABEL__string_80__data
  .quad 17
  .quad 16
.LABEL__string_80__data: .string "  mov QWORD PTR "

  .align 8
.LABEL__string_81:
  .quad .LABEL__string_81__data
  .quad 16
  .quad 15
.LABEL__string_81__data: .string "  mov BYTE PTR "

  .align 8
.LABEL__string_82:
  .quad .LABEL__string_82__data
  .quad 4
  .quad 3
.LABEL__string_82__data: .string ", 0"

  .align 8
.LABEL__string_83:
  .quad .LABEL__string_83__data
  .quad 20
  .quad 19
.LABEL__string_83__data: .string "Unsupported value: "

  .align 8
.LABEL__string_84:
  .quad .LABEL__string_84__data
  .quad 10
  .quad 9
.LABEL__string_84__data: .string "  #     ."

  .align 8
.LABEL__string_85:
  .quad .LABEL__string_85__data
  .quad 4
  .quad 3
.LABEL__string_85__data: .string " = "

  .align 8
.LABEL__string_86:
  .quad .LABEL__string_86__data
  .quad 3
  .quad 2
.LABEL__string_86__data: .string ": "

  .align 8
.LABEL__string_87:
  .quad .LABEL__string_87__data
  .quad 20
  .quad 19
.LABEL__string_87__data: .string " is not initialized"

  .align 8
.LABEL__string_88:
  .quad .LABEL__string_88__data
  .quad 31
  .quad 30
.LABEL__string_88__data: .string "Unsupported constant literal: "

  .align 8
.LABEL__string_89:
  .quad .LABEL__string_89__data
  .quad 24
  .quad 23
.LABEL__string_89__data: .string "Unsupported type size: "

  .align 8
.LABEL__string_90:
  .quad .LABEL__string_90__data
  .quad 13
  .quad 12
.LABEL__string_90__data: .string "[Generator] "

  .align 8
.LABEL__string_91:
  .quad .LABEL__string_91__data
  .quad 4
  .quad 3
.LABEL__string_91__data: .string "rax"

  .align 8
.LABEL__string_92:
  .quad .LABEL__string_92__data
  .quad 4
  .quad 3
.LABEL__string_92__data: .string "eax"

  .align 8
.LABEL__string_93:
  .quad .LABEL__string_93__data
  .quad 3
  .quad 2
.LABEL__string_93__data: .string "ax"

  .align 8
.LABEL__string_94:
  .quad .LABEL__string_94__data
  .quad 3
  .quad 2
.LABEL__string_94__data: .string "al"

  .align 8
.LABEL__string_95:
  .quad .LABEL__string_95__data
  .quad 4
  .quad 3
.LABEL__string_95__data: .string "rcx"

  .align 8
.LABEL__string_96:
  .quad .LABEL__string_96__data
  .quad 4
  .quad 3
.LABEL__string_96__data: .string "ecx"

  .align 8
.LABEL__string_97:
  .quad .LABEL__string_97__data
  .quad 3
  .quad 2
.LABEL__string_97__data: .string "cx"

  .align 8
.LABEL__string_98:
  .quad .LABEL__string_98__data
  .quad 3
  .quad 2
.LABEL__string_98__data: .string "cl"

  .align 8
.LABEL__string_99:
  .quad .LABEL__string_99__data
  .quad 4
  .quad 3
.LABEL__string_99__data: .string "rdx"

  .align 8
.LABEL__string_100:
  .quad .LABEL__string_100__data
  .quad 4
  .quad 3
.LABEL__string_100__data: .string "edx"

  .align 8
.LABEL__string_101:
  .quad .LABEL__string_101__data
  .quad 3
  .quad 2
.LABEL__string_101__data: .string "dx"

  .align 8
.LABEL__string_102:
  .quad .LABEL__string_102__data
  .quad 3
  .quad 2
.LABEL__string_102__data: .string "dl"

  .align 8
.LABEL__string_103:
  .quad .LABEL__string_103__data
  .quad 4
  .quad 3
.LABEL__string_103__data: .string "rbx"

  .align 8
.LABEL__string_104:
  .quad .LABEL__string_104__data
  .quad 4
  .quad 3
.LABEL__string_104__data: .string "ebx"

  .align 8
.LABEL__string_105:
  .quad .LABEL__string_105__data
  .quad 3
  .quad 2
.LABEL__string_105__data: .string "bx"

  .align 8
.LABEL__string_106:
  .quad .LABEL__string_106__data
  .quad 3
  .quad 2
.LABEL__string_106__data: .string "bl"

  .align 8
.LABEL__string_107:
  .quad .LABEL__string_107__data
  .quad 4
  .quad 3
.LABEL__string_107__data: .string "rsi"

  .align 8
.LABEL__string_108:
  .quad .LABEL__string_108__data
  .quad 4
  .quad 3
.LABEL__string_108__data: .string "esi"

  .align 8
.LABEL__string_109:
  .quad .LABEL__string_109__data
  .quad 3
  .quad 2
.LABEL__string_109__data: .string "si"

  .align 8
.LABEL__string_110:
  .quad .LABEL__string_110__data
  .quad 4
  .quad 3
.LABEL__string_110__data: .string "sil"

  .align 8
.LABEL__string_111:
  .quad .LABEL__string_111__data
  .quad 4
  .quad 3
.LABEL__string_111__data: .string "rdi"

  .align 8
.LABEL__string_112:
  .quad .LABEL__string_112__data
  .quad 4
  .quad 3
.LABEL__string_112__data: .string "edi"

  .align 8
.LABEL__string_113:
  .quad .LABEL__string_113__data
  .quad 3
  .quad 2
.LABEL__string_113__data: .string "di"

  .align 8
.LABEL__string_114:
  .quad .LABEL__string_114__data
  .quad 4
  .quad 3
.LABEL__string_114__data: .string "dil"

  .align 8
.LABEL__string_115:
  .quad .LABEL__string_115__data
  .quad 4
  .quad 3
.LABEL__string_115__data: .string "rsp"

  .align 8
.LABEL__string_116:
  .quad .LABEL__string_116__data
  .quad 4
  .quad 3
.LABEL__string_116__data: .string "esp"

  .align 8
.LABEL__string_117:
  .quad .LABEL__string_117__data
  .quad 3
  .quad 2
.LABEL__string_117__data: .string "sp"

  .align 8
.LABEL__string_118:
  .quad .LABEL__string_118__data
  .quad 4
  .quad 3
.LABEL__string_118__data: .string "spl"

  .align 8
.LABEL__string_119:
  .quad .LABEL__string_119__data
  .quad 4
  .quad 3
.LABEL__string_119__data: .string "rbp"

  .align 8
.LABEL__string_120:
  .quad .LABEL__string_120__data
  .quad 4
  .quad 3
.LABEL__string_120__data: .string "ebp"

  .align 8
.LABEL__string_121:
  .quad .LABEL__string_121__data
  .quad 3
  .quad 2
.LABEL__string_121__data: .string "bp"

  .align 8
.LABEL__string_122:
  .quad .LABEL__string_122__data
  .quad 4
  .quad 3
.LABEL__string_122__data: .string "bpl"

  .align 8
.LABEL__string_123:
  .quad .LABEL__string_123__data
  .quad 3
  .quad 2
.LABEL__string_123__data: .string "r8"

  .align 8
.LABEL__string_124:
  .quad .LABEL__string_124__data
  .quad 4
  .quad 3
.LABEL__string_124__data: .string "r8d"

  .align 8
.LABEL__string_125:
  .quad .LABEL__string_125__data
  .quad 4
  .quad 3
.LABEL__string_125__data: .string "r8w"

  .align 8
.LABEL__string_126:
  .quad .LABEL__string_126__data
  .quad 4
  .quad 3
.LABEL__string_126__data: .string "r8b"

  .align 8
.LABEL__string_127:
  .quad .LABEL__string_127__data
  .quad 3
  .quad 2
.LABEL__string_127__data: .string "r9"

  .align 8
.LABEL__string_128:
  .quad .LABEL__string_128__data
  .quad 4
  .quad 3
.LABEL__string_128__data: .string "r9d"

  .align 8
.LABEL__string_129:
  .quad .LABEL__string_129__data
  .quad 4
  .quad 3
.LABEL__string_129__data: .string "r9w"

  .align 8
.LABEL__string_130:
  .quad .LABEL__string_130__data
  .quad 4
  .quad 3
.LABEL__string_130__data: .string "r9b"

  .align 8
.LABEL__string_131:
  .quad .LABEL__string_131__data
  .quad 4
  .quad 3
.LABEL__string_131__data: .string "r10"

  .align 8
.LABEL__string_132:
  .quad .LABEL__string_132__data
  .quad 5
  .quad 4
.LABEL__string_132__data: .string "r10d"

  .align 8
.LABEL__string_133:
  .quad .LABEL__string_133__data
  .quad 5
  .quad 4
.LABEL__string_133__data: .string "r10w"

  .align 8
.LABEL__string_134:
  .quad .LABEL__string_134__data
  .quad 5
  .quad 4
.LABEL__string_134__data: .string "r10b"

  .align 8
.LABEL__string_135:
  .quad .LABEL__string_135__data
  .quad 4
  .quad 3
.LABEL__string_135__data: .string "r11"

  .align 8
.LABEL__string_136:
  .quad .LABEL__string_136__data
  .quad 5
  .quad 4
.LABEL__string_136__data: .string "r11d"

  .align 8
.LABEL__string_137:
  .quad .LABEL__string_137__data
  .quad 5
  .quad 4
.LABEL__string_137__data: .string "r11w"

  .align 8
.LABEL__string_138:
  .quad .LABEL__string_138__data
  .quad 5
  .quad 4
.LABEL__string_138__data: .string "r11b"

  .align 8
.LABEL__string_139:
  .quad .LABEL__string_139__data
  .quad 4
  .quad 3
.LABEL__string_139__data: .string "r12"

  .align 8
.LABEL__string_140:
  .quad .LABEL__string_140__data
  .quad 5
  .quad 4
.LABEL__string_140__data: .string "r12d"

  .align 8
.LABEL__string_141:
  .quad .LABEL__string_141__data
  .quad 5
  .quad 4
.LABEL__string_141__data: .string "r12w"

  .align 8
.LABEL__string_142:
  .quad .LABEL__string_142__data
  .quad 5
  .quad 4
.LABEL__string_142__data: .string "r12b"

  .align 8
.LABEL__string_143:
  .quad .LABEL__string_143__data
  .quad 4
  .quad 3
.LABEL__string_143__data: .string "r13"

  .align 8
.LABEL__string_144:
  .quad .LABEL__string_144__data
  .quad 5
  .quad 4
.LABEL__string_144__data: .string "r13d"

  .align 8
.LABEL__string_145:
  .quad .LABEL__string_145__data
  .quad 5
  .quad 4
.LABEL__string_145__data: .string "r13w"

  .align 8
.LABEL__string_146:
  .quad .LABEL__string_146__data
  .quad 5
  .quad 4
.LABEL__string_146__data: .string "r13b"

  .align 8
.LABEL__string_147:
  .quad .LABEL__string_147__data
  .quad 4
  .quad 3
.LABEL__string_147__data: .string "r14"

  .align 8
.LABEL__string_148:
  .quad .LABEL__string_148__data
  .quad 5
  .quad 4
.LABEL__string_148__data: .string "r14d"

  .align 8
.LABEL__string_149:
  .quad .LABEL__string_149__data
  .quad 5
  .quad 4
.LABEL__string_149__data: .string "r14w"

  .align 8
.LABEL__string_150:
  .quad .LABEL__string_150__data
  .quad 5
  .quad 4
.LABEL__string_150__data: .string "r14b"

  .align 8
.LABEL__string_151:
  .quad .LABEL__string_151__data
  .quad 4
  .quad 3
.LABEL__string_151__data: .string "r15"

  .align 8
.LABEL__string_152:
  .quad .LABEL__string_152__data
  .quad 5
  .quad 4
.LABEL__string_152__data: .string "r15d"

  .align 8
.LABEL__string_153:
  .quad .LABEL__string_153__data
  .quad 5
  .quad 4
.LABEL__string_153__data: .string "r15w"

  .align 8
.LABEL__string_154:
  .quad .LABEL__string_154__data
  .quad 5
  .quad 4
.LABEL__string_154__data: .string "r15b"

  .align 8
.LABEL__string_155:
  .quad .LABEL__string_155__data
  .quad 24
  .quad 23
.LABEL__string_155__data: .string "All registered are used"

  .align 8
.LABEL__string_156:
  .quad .LABEL__string_156__data
  .quad 10
  .quad 9
.LABEL__string_156__data: .string "Register "

  .align 8
.LABEL__string_157:
  .quad .LABEL__string_157__data
  .quad 30
  .quad 29
.LABEL__string_157__data: .string " already mapped to variable: "

  .align 8
.LABEL__string_158:
  .quad .LABEL__string_158__data
  .quad 28
  .quad 27
.LABEL__string_158__data: .string "  # store global variable: "

  .align 8
.LABEL__string_159:
  .quad .LABEL__string_159__data
  .quad 24
  .quad 23
.LABEL__string_159__data: .string "  # [discarded value]: "

  .align 8
.LABEL__string_160:
  .quad .LABEL__string_160__data
  .quad 20
  .quad 19
.LABEL__string_160__data: .string "  # [live values]: "

  .align 8
.LABEL__string_161:
  .quad .LABEL__string_161__data
  .quad 23
  .quad 22
.LABEL__string_161__data: .string "  # [used registers]: "

  .align 8
.LABEL__string_162:
  .quad .LABEL__string_162__data
  .quad 19
  .quad 18
.LABEL__string_162__data: .string "  .section .rodata"

  .align 8
.LABEL__string_163:
  .quad .LABEL__string_163__data
  .quad 11
  .quad 10
.LABEL__string_163__data: .string "  .align 8"

  .align 8
.LABEL__string_164:
  .quad .LABEL__string_164__data
  .quad 9
  .quad 8
.LABEL__string_164__data: .string "  .quad "

  .align 8
.LABEL__string_165:
  .quad .LABEL__string_165__data
  .quad 7
  .quad 6
.LABEL__string_165__data: .string "__data"

  .align 8
.LABEL__string_166:
  .quad .LABEL__string_166__data
  .quad 17
  .quad 16
.LABEL__string_166__data: .string "__data: .string "

  .align 8
.LABEL__string_167:
  .quad .LABEL__string_167__data
  .quad 16
  .quad 15
.LABEL__string_167__data: .string ".LABEL__string_"

  .align 8
.LABEL__string_168:
  .quad .LABEL__string_168__data
  .quad 17
  .quad 16
.LABEL__string_168__data: .string "  .quad .LABEL__"

  .align 8
.LABEL__string_169:
  .quad .LABEL__string_169__data
  .quad 14
  .quad 13
.LABEL__string_169__data: .string "__object_type"

  .align 8
.LABEL__string_170:
  .quad .LABEL__string_170__data
  .quad 26
  .quad 25
.LABEL__string_170__data: .string "__object_type__name__data"

  .align 8
.LABEL__string_171:
  .quad .LABEL__string_171__data
  .quad 37
  .quad 36
.LABEL__string_171__data: .string "__object_type__name__data: .string \""

  .align 8
.LABEL__string_172:
  .quad .LABEL__string_172__data
  .quad 10
  .quad 9
.LABEL__string_172__data: .string "  .quad 0"

  .align 8
.LABEL__string_173:
  .quad .LABEL__string_173__data
  .quad 7
  .quad 6
.LABEL__string_173__data: .string "  .bss"

  .align 8
.LABEL__string_174:
  .quad .LABEL__string_174__data
  .quad 55
  .quad 54
.LABEL__string_174__data: .string "Global variables must be declared as undefined for now"

  .align 8
.LABEL__string_175:
  .quad .LABEL__string_175__data
  .quad 9
  .quad 8
.LABEL__string_175__data: .string "  .skip "

  .align 8
.LABEL__string_176:
  .quad .LABEL__string_176__data
  .quad 4
  .quad 3
.LABEL__string_176__data: .string "Any"

  .align 8
.LABEL__string_177:
  .quad .LABEL__string_177__data
  .quad 8
  .quad 7
.LABEL__string_177__data: .string "Boolean"

  .align 8
.LABEL__string_178:
  .quad .LABEL__string_178__data
  .quad 4
  .quad 3
.LABEL__string_178__data: .string "Int"

  .align 8
.LABEL__string_179:
  .quad .LABEL__string_179__data
  .quad 5
  .quad 4
.LABEL__string_179__data: .string "Int8"

  .align 8
.LABEL__string_180:
  .quad .LABEL__string_180__data
  .quad 6
  .quad 5
.LABEL__string_180__data: .string "Int16"

  .align 8
.LABEL__string_181:
  .quad .LABEL__string_181__data
  .quad 6
  .quad 5
.LABEL__string_181__data: .string "Int32"

  .align 8
.LABEL__string_182:
  .quad .LABEL__string_182__data
  .quad 6
  .quad 5
.LABEL__string_182__data: .string "Int64"

  .align 8
.LABEL__string_183:
  .quad .LABEL__string_183__data
  .quad 8
  .quad 7
.LABEL__string_183__data: .string "Nothing"

  .align 8
.LABEL__string_184:
  .quad .LABEL__string_184__data
  .quad 5
  .quad 4
.LABEL__string_184__data: .string "Null"

  .align 8
.LABEL__string_185:
  .quad .LABEL__string_185__data
  .quad 10
  .quad 9
.LABEL__string_185__data: .string "Undefined"

  .align 8
.LABEL__string_186:
  .quad .LABEL__string_186__data
  .quad 21
  .quad 20
.LABEL__string_186__data: .string "Undefined function: "

  .align 8
.LABEL__string_187:
  .quad .LABEL__string_187__data
  .quad 6
  .quad 5
.LABEL__string_187__data: .string " :: ("

  .align 8
.LABEL__string_188:
  .quad .LABEL__string_188__data
  .quad 2
  .quad 1
.LABEL__string_188__data: .string ")"

  .align 8
.LABEL__string_189:
  .quad .LABEL__string_189__data
  .quad 2
  .quad 1
.LABEL__string_189__data: .string "$"

  .align 8
.LABEL__string_190:
  .quad .LABEL__string_190__data
  .quad 29
  .quad 28
.LABEL__string_190__data: .string "Duplicate type declaration: "

  .align 8
.LABEL__string_191:
  .quad .LABEL__string_191__data
  .quad 19
  .quad 18
.LABEL__string_191__data: .string "Not a struct type."

  .align 8
.LABEL__string_192:
  .quad .LABEL__string_192__data
  .quad 12
  .quad 11
.LABEL__string_192__data: .string "Object_Type"

  .align 8
.LABEL__string_193:
  .quad .LABEL__string_193__data
  .quad 15
  .quad 14
.LABEL__string_193__data: .string "Unknown type: "

  .align 8
.LABEL__string_194:
  .quad .LABEL__string_194__data
  .quad 25
  .quad 24
.LABEL__string_194__data: .string "Missing return statement"

  .align 8
.LABEL__string_195:
  .quad .LABEL__string_195__data
  .quad 42
  .quad 41
.LABEL__string_195__data: .string "Found non-empty unreachable block: block."

  .align 8
.LABEL__string_196:
  .quad .LABEL__string_196__data
  .quad 25
  .quad 24
.LABEL__string_196__data: .string " requires a basic block."

  .align 8
.LABEL__string_197:
  .quad .LABEL__string_197__data
  .quad 21
  .quad 20
.LABEL__string_197__data: .string "Not an array pointer"

  .align 8
.LABEL__string_198:
  .quad .LABEL__string_198__data
  .quad 8
  .quad 7
.LABEL__string_198__data: .string "Not a '"

  .align 8
.LABEL__string_199:
  .quad .LABEL__string_199__data
  .quad 8
  .quad 7
.LABEL__string_199__data: .string "' value"

  .align 8
.LABEL__string_200:
  .quad .LABEL__string_200__data
  .quad 18
  .quad 17
.LABEL__string_200__data: .string " doesn't have a '"

  .align 8
.LABEL__string_201:
  .quad .LABEL__string_201__data
  .quad 9
  .quad 8
.LABEL__string_201__data: .string "' member"

  .align 8
.LABEL__string_202:
  .quad .LABEL__string_202__data
  .quad 22
  .quad 21
.LABEL__string_202__data: .string "Undeclared variable: "

  .align 8
.LABEL__string_203:
  .quad .LABEL__string_203__data
  .quad 25
  .quad 24
.LABEL__string_203__data: .string "Break outside of a loop?"

  .align 8
.LABEL__string_204:
  .quad .LABEL__string_204__data
  .quad 18
  .quad 17
.LABEL__string_204__data: .string "Cannot assign a '"

  .align 8
.LABEL__string_205:
  .quad .LABEL__string_205__data
  .quad 15
  .quad 14
.LABEL__string_205__data: .string "' value to a '"

  .align 8
.LABEL__string_206:
  .quad .LABEL__string_206__data
  .quad 11
  .quad 10
.LABEL__string_206__data: .string "' variable"

  .align 8
.LABEL__string_207:
  .quad .LABEL__string_207__data
  .quad 29
  .quad 28
.LABEL__string_207__data: .string ": Redundant type declaration"

  .align 8
.LABEL__string_208:
  .quad .LABEL__string_208__data
  .quad 24
  .quad 23
.LABEL__string_208__data: .string "Invalid variable type: "

  .align 8
.LABEL__string_209:
  .quad .LABEL__string_209__data
  .quad 34
  .quad 33
.LABEL__string_209__data: .string "Cannot infer type from null value"

  .align 8
.LABEL__string_210:
  .quad .LABEL__string_210__data
  .quad 9
  .quad 8
.LABEL__string_210__data: .string "Not an \""

  .align 8
.LABEL__string_211:
  .quad .LABEL__string_211__data
  .quad 13
  .quad 12
.LABEL__string_211__data: .string "\" expression"

  .align 8
.LABEL__string_212:
  .quad .LABEL__string_212__data
  .quad 35
  .quad 34
.LABEL__string_212__data: .string "TODO: Evaluate constant expression"

  .align 8
.LABEL__string_213:
  .quad .LABEL__string_213__data
  .quad 31
  .quad 30
.LABEL__string_213__data: .string "Not an IR_Pointer_Type value: "

  .align 8
.LABEL__string_214:
  .quad .LABEL__string_214__data
  .quad 16
  .quad 15
.LABEL__string_214__data: .string "Values of type "

  .align 8
.LABEL__string_215:
  .quad .LABEL__string_215__data
  .quad 18
  .quad 17
.LABEL__string_215__data: .string " are not callable"

  .align 8
.LABEL__string_216:
  .quad .LABEL__string_216__data
  .quad 28
  .quad 27
.LABEL__string_216__data: .string "Invalid type literal syntax"

  .align 8
.LABEL__string_217:
  .quad .LABEL__string_217__data
  .quad 38
  .quad 37
.LABEL__string_217__data: .string "Found at least two matching functions"

  .align 8
.LABEL__string_218:
  .quad .LABEL__string_218__data
  .quad 5
  .quad 4
.LABEL__string_218__data: .string " :: "

  .align 8
.LABEL__string_219:
  .quad .LABEL__string_219__data
  .quad 29
  .quad 28
.LABEL__string_219__data: .string "Found no matching function: "

  .align 8
.LABEL__string_220:
  .quad .LABEL__string_220__data
  .quad 9
  .quad 8
.LABEL__string_220__data: .string ") -> Any"

  .align 8
.LABEL__string_221:
  .quad .LABEL__string_221__data
  .quad 22
  .quad 21
.LABEL__string_221__data: .string "Unsupported arguments"

  .align 8
.LABEL__string_222:
  .quad .LABEL__string_222__data
  .quad 54
  .quad 53
.LABEL__string_222__data: .string "Positional arguments cannot be added after named ones"

  .align 8
.LABEL__string_223:
  .quad .LABEL__string_223__data
  .quad 31
  .quad 30
.LABEL__string_223__data: .string "Operands are not the same type"

  .align 8
.LABEL__string_224:
  .quad .LABEL__string_224__data
  .quad 7
  .quad 6
.LABEL__string_224__data: .string "String"

  .align 8
.LABEL__string_225:
  .quad .LABEL__string_225__data
  .quad 22
  .quad 21
.LABEL__string_225__data: .string " has no such member: "

  .align 8
.LABEL__string_226:
  .quad .LABEL__string_226__data
  .quad 25
  .quad 24
.LABEL__string_226__data: .string "Unuspported value type: "

  .align 8
.LABEL__string_227:
  .quad .LABEL__string_227__data
  .quad 37
  .quad 36
.LABEL__string_227__data: .string "Not a IR_Struct_Type pointer value: "

  .align 8
.LABEL__string_228:
  .quad .LABEL__string_228__data
  .quad 1
  .quad 0
.LABEL__string_228__data: .string ""

  .align 8
.LABEL__string_229:
  .quad .LABEL__string_229__data
  .quad 12
  .quad 11
.LABEL__string_229__data: .string "object_type"

  .align 8
.LABEL__string_230:
  .quad .LABEL__string_230__data
  .quad 34
  .quad 33
.LABEL__string_230__data: .string "Struct init argument without name"

  .align 8
.LABEL__string_231:
  .quad .LABEL__string_231__data
  .quad 28
  .quad 27
.LABEL__string_231__data: .string "Undeclared variable value: "

  .align 8
.LABEL__string_232:
  .quad .LABEL__string_232__data
  .quad 32
  .quad 31
.LABEL__string_232__data: .string "Variable type without address: "

  .align 8
.LABEL__string_233:
  .quad .LABEL__string_233__data
  .quad 19
  .quad 18
.LABEL__string_233__data: .string "Unknown function: "

  .align 8
.LABEL__string_234:
  .quad .LABEL__string_234__data
  .quad 19
  .quad 18
.LABEL__string_234__data: .string "Unknown variable: "

  .align 8
.LABEL__string_235:
  .quad .LABEL__string_235__data
  .quad 20
  .quad 19
.LABEL__string_235__data: .string ": Unexpected type: "

  .align 8
.LABEL__string_236:
  .quad .LABEL__string_236__data
  .quad 2
  .quad 1
.LABEL__string_236__data: .string "@"

  .align 8
.LABEL__string_237:
  .quad .LABEL__string_237__data
  .quad 2
  .quad 1
.LABEL__string_237__data: .string "["

  .align 8
.LABEL__string_238:
  .quad .LABEL__string_238__data
  .quad 2
  .quad 1
.LABEL__string_238__data: .string "]"

  .align 8
.LABEL__string_239:
  .quad .LABEL__string_239__data
  .quad 2
  .quad 1
.LABEL__string_239__data: .string "("

  .align 8
.LABEL__string_240:
  .quad .LABEL__string_240__data
  .quad 6
  .quad 5
.LABEL__string_240__data: .string ") -> "

  .align 8
.LABEL__string_241:
  .quad .LABEL__string_241__data
  .quad 7
  .quad 6
.LABEL__string_241__data: .string "Object"

  .align 8
.LABEL__string_242:
  .quad .LABEL__string_242__data
  .quad 7
  .quad 6
.LABEL__string_242__data: .string "Found "

  .align 8
.LABEL__string_243:
  .quad .LABEL__string_243__data
  .quad 29
  .quad 28
.LABEL__string_243__data: .string " without user instructions: "

  .align 8
.LABEL__string_244:
  .quad .LABEL__string_244__data
  .quad 10
  .quad 9
.LABEL__string_244__data: .string "undefined"

  .align 8
.LABEL__string_245:
  .quad .LABEL__string_245__data
  .quad 9
  .quad 8
.LABEL__string_245__data: .string ".address"

  .align 8
.LABEL__string_246:
  .quad .LABEL__string_246__data
  .quad 10
  .quad 9
.LABEL__string_246__data: .string "condition"

  .align 8
.LABEL__string_247:
  .quad .LABEL__string_247__data
  .quad 55
  .quad 54
.LABEL__string_247__data: .string "Tried to remove instruction belonging to another block"

  .align 8
.LABEL__string_248:
  .quad .LABEL__string_248__data
  .quad 7
  .quad 6
.LABEL__string_248__data: .string "block."

  .align 8
.LABEL__string_249:
  .quad .LABEL__string_249__data
  .quad 4
  .quad 3
.LABEL__string_249__data: .string "   "

  .align 8
.LABEL__string_250:
  .quad .LABEL__string_250__data
  .quad 3
  .quad 2
.LABEL__string_250__data: .string " {"

  .align 8
.LABEL__string_251:
  .quad .LABEL__string_251__data
  .quad 6
  .quad 5
.LABEL__string_251__data: .string "abort"

  .align 8
.LABEL__string_252:
  .quad .LABEL__string_252__data
  .quad 5
  .quad 4
.LABEL__string_252__data: .string "exit"

  .align 8
.LABEL__string_253:
  .quad .LABEL__string_253__data
  .quad 17
  .quad 16
.LABEL__string_253__data: .string "argument-0-value"

  .align 8
.LABEL__string_254:
  .quad .LABEL__string_254__data
  .quad 17
  .quad 16
.LABEL__string_254__data: .string "argument-1-value"

  .align 8
.LABEL__string_255:
  .quad .LABEL__string_255__data
  .quad 17
  .quad 16
.LABEL__string_255__data: .string "argument-2-value"

  .align 8
.LABEL__string_256:
  .quad .LABEL__string_256__data
  .quad 17
  .quad 16
.LABEL__string_256__data: .string "argument-3-value"

  .align 8
.LABEL__string_257:
  .quad .LABEL__string_257__data
  .quad 17
  .quad 16
.LABEL__string_257__data: .string "argument-4-value"

  .align 8
.LABEL__string_258:
  .quad .LABEL__string_258__data
  .quad 17
  .quad 16
.LABEL__string_258__data: .string "argument-5-value"

  .align 8
.LABEL__string_259:
  .quad .LABEL__string_259__data
  .quad 25
  .quad 24
.LABEL__string_259__data: .string "Missing argument index: "

  .align 8
.LABEL__string_260:
  .quad .LABEL__string_260__data
  .quad 5
  .quad 4
.LABEL__string_260__data: .string "call"

  .align 8
.LABEL__string_261:
  .quad .LABEL__string_261__data
  .quad 17
  .quad 16
.LABEL__string_261__data: .string "function_address"

  .align 8
.LABEL__string_262:
  .quad .LABEL__string_262__data
  .quad 5
  .quad 4
.LABEL__string_262__data: .string "cast"

  .align 8
.LABEL__string_263:
  .quad .LABEL__string_263__data
  .quad 6
  .quad 5
.LABEL__string_263__data: .string "value"

  .align 8
.LABEL__string_264:
  .quad .LABEL__string_264__data
  .quad 5
  .quad 4
.LABEL__string_264__data: .string "jump"

  .align 8
.LABEL__string_265:
  .quad .LABEL__string_265__data
  .quad 16
  .quad 15
.LABEL__string_265__data: .string "load_array_item"

  .align 8
.LABEL__string_266:
  .quad .LABEL__string_266__data
  .quad 12
  .quad 11
.LABEL__string_266__data: .string "array_value"

  .align 8
.LABEL__string_267:
  .quad .LABEL__string_267__data
  .quad 12
  .quad 11
.LABEL__string_267__data: .string "index_value"

  .align 8
.LABEL__string_268:
  .quad .LABEL__string_268__data
  .quad 27
  .quad 26
.LABEL__string_268__data: .string "load_struct_member_address"

  .align 8
.LABEL__string_269:
  .quad .LABEL__string_269__data
  .quad 19
  .quad 18
.LABEL__string_269__data: .string "load_struct_member"

  .align 8
.LABEL__string_270:
  .quad .LABEL__string_270__data
  .quad 21
  .quad 20
.LABEL__string_270__data: .string "struct_pointer_value"

  .align 8
.LABEL__string_271:
  .quad .LABEL__string_271__data
  .quad 22
  .quad 21
.LABEL__string_271__data: .string "load_variable_address"

  .align 8
.LABEL__string_272:
  .quad .LABEL__string_272__data
  .quad 15
  .quad 14
.LABEL__string_272__data: .string "variable_value"

  .align 8
.LABEL__string_273:
  .quad .LABEL__string_273__data
  .quad 14
  .quad 13
.LABEL__string_273__data: .string "load_variable"

  .align 8
.LABEL__string_274:
  .quad .LABEL__string_274__data
  .quad 4
  .quad 3
.LABEL__string_274__data: .string "new"

  .align 8
.LABEL__string_275:
  .quad .LABEL__string_275__data
  .quad 11
  .quad 10
.LABEL__string_275__data: .string "init_value"

  .align 8
.LABEL__string_276:
  .quad .LABEL__string_276__data
  .quad 7
  .quad 6
.LABEL__string_276__data: .string "return"

  .align 8
.LABEL__string_277:
  .quad .LABEL__string_277__data
  .quad 13
  .quad 12
.LABEL__string_277__data: .string "return_value"

  .align 8
.LABEL__string_278:
  .quad .LABEL__string_278__data
  .quad 17
  .quad 16
.LABEL__string_278__data: .string "store_array_item"

  .align 8
.LABEL__string_279:
  .quad .LABEL__string_279__data
  .quad 20
  .quad 19
.LABEL__string_279__data: .string "store_struct_member"

  .align 8
.LABEL__string_280:
  .quad .LABEL__string_280__data
  .quad 11
  .quad 10
.LABEL__string_280__data: .string "left_value"

  .align 8
.LABEL__string_281:
  .quad .LABEL__string_281__data
  .quad 12
  .quad 11
.LABEL__string_281__data: .string "right_value"

  .align 8
.LABEL__string_282:
  .quad .LABEL__string_282__data
  .quad 4
  .quad 3
.LABEL__string_282__data: .string " + "

  .align 8
.LABEL__string_283:
  .quad .LABEL__string_283__data
  .quad 4
  .quad 3
.LABEL__string_283__data: .string " / "

  .align 8
.LABEL__string_284:
  .quad .LABEL__string_284__data
  .quad 5
  .quad 4
.LABEL__string_284__data: .string " == "

  .align 8
.LABEL__string_285:
  .quad .LABEL__string_285__data
  .quad 4
  .quad 3
.LABEL__string_285__data: .string " > "

  .align 8
.LABEL__string_286:
  .quad .LABEL__string_286__data
  .quad 5
  .quad 4
.LABEL__string_286__data: .string " >= "

  .align 8
.LABEL__string_287:
  .quad .LABEL__string_287__data
  .quad 4
  .quad 3
.LABEL__string_287__data: .string " < "

  .align 8
.LABEL__string_288:
  .quad .LABEL__string_288__data
  .quad 5
  .quad 4
.LABEL__string_288__data: .string " <= "

  .align 8
.LABEL__string_289:
  .quad .LABEL__string_289__data
  .quad 5
  .quad 4
.LABEL__string_289__data: .string " // "

  .align 8
.LABEL__string_290:
  .quad .LABEL__string_290__data
  .quad 4
  .quad 3
.LABEL__string_290__data: .string " * "

  .align 8
.LABEL__string_291:
  .quad .LABEL__string_291__data
  .quad 5
  .quad 4
.LABEL__string_291__data: .string " != "

  .align 8
.LABEL__string_292:
  .quad .LABEL__string_292__data
  .quad 4
  .quad 3
.LABEL__string_292__data: .string " - "

  .align 8
.LABEL__string_293:
  .quad .LABEL__string_293__data
  .quad 4
  .quad 3
.LABEL__string_293__data: .string "phi"

  .align 8
.LABEL__string_294:
  .quad .LABEL__string_294__data
  .quad 2
  .quad 1
.LABEL__string_294__data: .string "&"

  .align 8
.LABEL__string_295:
  .quad .LABEL__string_295__data
  .quad 3
  .quad 2
.LABEL__string_295__data: .string "as"

  .align 8
.LABEL__string_296:
  .quad .LABEL__string_296__data
  .quad 2
  .quad 1
.LABEL__string_296__data: .string "*"

  .align 8
.LABEL__string_297:
  .quad .LABEL__string_297__data
  .quad 6
  .quad 5
.LABEL__string_297__data: .string "break"

  .align 8
.LABEL__string_298:
  .quad .LABEL__string_298__data
  .quad 2
  .quad 1
.LABEL__string_298__data: .string "}"

  .align 8
.LABEL__string_299:
  .quad .LABEL__string_299__data
  .quad 2
  .quad 1
.LABEL__string_299__data: .string ";"

  .align 8
.LABEL__string_300:
  .quad .LABEL__string_300__data
  .quad 2
  .quad 1
.LABEL__string_300__data: .string ","

  .align 8
.LABEL__string_301:
  .quad .LABEL__string_301__data
  .quad 2
  .quad 1
.LABEL__string_301__data: .string "."

  .align 8
.LABEL__string_302:
  .quad .LABEL__string_302__data
  .quad 5
  .quad 4
.LABEL__string_302__data: .string "else"

  .align 8
.LABEL__string_303:
  .quad .LABEL__string_303__data
  .quad 2
  .quad 1
.LABEL__string_303__data: .string "="

  .align 8
.LABEL__string_304:
  .quad .LABEL__string_304__data
  .quad 2
  .quad 1
.LABEL__string_304__data: .string "!"

  .align 8
.LABEL__string_305:
  .quad .LABEL__string_305__data
  .quad 9
  .quad 8
.LABEL__string_305__data: .string "external"

  .align 8
.LABEL__string_306:
  .quad .LABEL__string_306__data
  .quad 2
  .quad 1
.LABEL__string_306__data: .string ">"

  .align 8
.LABEL__string_307:
  .quad .LABEL__string_307__data
  .quad 2
  .quad 1
.LABEL__string_307__data: .string "-"

  .align 8
.LABEL__string_308:
  .quad .LABEL__string_308__data
  .quad 3
  .quad 2
.LABEL__string_308__data: .string "if"

  .align 8
.LABEL__string_309:
  .quad .LABEL__string_309__data
  .quad 8
  .quad 7
.LABEL__string_309__data: .string "include"

  .align 8
.LABEL__string_310:
  .quad .LABEL__string_310__data
  .quad 2
  .quad 1
.LABEL__string_310__data: .string "<"

  .align 8
.LABEL__string_311:
  .quad .LABEL__string_311__data
  .quad 5
  .quad 4
.LABEL__string_311__data: .string "loop"

  .align 8
.LABEL__string_312:
  .quad .LABEL__string_312__data
  .quad 2
  .quad 1
.LABEL__string_312__data: .string "{"

  .align 8
.LABEL__string_313:
  .quad .LABEL__string_313__data
  .quad 2
  .quad 1
.LABEL__string_313__data: .string "+"

  .align 8
.LABEL__string_314:
  .quad .LABEL__string_314__data
  .quad 2
  .quad 1
.LABEL__string_314__data: .string "/"

  .align 8
.LABEL__string_315:
  .quad .LABEL__string_315__data
  .quad 7
  .quad 6
.LABEL__string_315__data: .string "struct"

  .align 8
.LABEL__string_316:
  .quad .LABEL__string_316__data
  .quad 2
  .quad 1
.LABEL__string_316__data: .string "|"

  .align 8
.LABEL__string_317:
  .quad .LABEL__string_317__data
  .quad 6
  .quad 5
.LABEL__string_317__data: .string "while"

  .align 8
.LABEL__string_318:
  .quad .LABEL__string_318__data
  .quad 22
  .quad 21
.LABEL__string_318__data: .string "Failed to open file: "

  .align 8
.LABEL__string_319:
  .quad .LABEL__string_319__data
  .quad 35
  .quad 34
.LABEL__string_319__data: .string ": File doesn't end with a new line"

  .align 8
.LABEL__string_320:
  .quad .LABEL__string_320__data
  .quad 24
  .quad 23
.LABEL__string_320__data: .string "Unsupported file path: "

  .align 8
.LABEL__string_321:
  .quad .LABEL__string_321__data
  .quad 3
  .quad 2
.LABEL__string_321__data: .string "./"

  .align 8
.LABEL__string_322:
  .quad .LABEL__string_322__data
  .quad 4
  .quad 3
.LABEL__string_322__data: .string "../"

  .align 8
.LABEL__string_323:
  .quad .LABEL__string_323__data
  .quad 5
  .quad 4
.LABEL__string_323__data: .string "/../"

  .align 8
.LABEL__string_324:
  .quad .LABEL__string_324__data
  .quad 39
  .quad 38
.LABEL__string_324__data: .string "Cannot use expression as variable name"

  .align 8
.LABEL__string_325:
  .quad .LABEL__string_325__data
  .quad 37
  .quad 36
.LABEL__string_325__data: .string "Cannot use expression as struct name"

  .align 8
.LABEL__string_326:
  .quad .LABEL__string_326__data
  .quad 39
  .quad 38
.LABEL__string_326__data: .string "Cannot use expression as function name"

  .align 8
.LABEL__string_327:
  .quad .LABEL__string_327__data
  .quad 12
  .quad 11
.LABEL__string_327__data: .string ": Consumed "

  .align 8
.LABEL__string_328:
  .quad .LABEL__string_328__data
  .quad 15
  .quad 14
.LABEL__string_328__data: .string " spaces where "

  .align 8
.LABEL__string_329:
  .quad .LABEL__string_329__data
  .quad 14
  .quad 13
.LABEL__string_329__data: .string " are expected"

  .align 8
.LABEL__string_330:
  .quad .LABEL__string_330__data
  .quad 26
  .quad 25
.LABEL__string_330__data: .string "Unsupported token matcher"

  .align 8
.LABEL__string_331:
  .quad .LABEL__string_331__data
  .quad 14
  .quad 13
.LABEL__string_331__data: .string ": Unexpected "

  .align 8
.LABEL__string_332:
  .quad .LABEL__string_332__data
  .quad 2
  .quad 1
.LABEL__string_332__data: .string " "

  .align 8
.LABEL__string_333:
  .quad .LABEL__string_333__data
  .quad 5
  .quad 4
.LABEL__string_333__data: .string "if ("

  .align 8
.LABEL__string_334:
  .quad .LABEL__string_334__data
  .quad 3
  .quad 2
.LABEL__string_334__data: .string ") "

  .align 8
.LABEL__string_335:
  .quad .LABEL__string_335__data
  .quad 7
  .quad 6
.LABEL__string_335__data: .string " else "

  .align 8
.LABEL__string_336:
  .quad .LABEL__string_336__data
  .quad 6
  .quad 5
.LABEL__string_336__data: .string "loop "

  .align 8
.LABEL__string_337:
  .quad .LABEL__string_337__data
  .quad 11
  .quad 10
.LABEL__string_337__data: .string " :: struct"

  .align 8
.LABEL__string_338:
  .quad .LABEL__string_338__data
  .quad 4
  .quad 3
.LABEL__string_338__data: .string " : "

  .align 8
.LABEL__string_339:
  .quad .LABEL__string_339__data
  .quad 12
  .quad 11
.LABEL__string_339__data: .string " = external"

  .align 8
.LABEL__string_340:
  .quad .LABEL__string_340__data
  .quad 5
  .quad 4
.LABEL__string_340__data: .string " := "

  .align 8
.LABEL__string_341:
  .quad .LABEL__string_341__data
  .quad 8
  .quad 7
.LABEL__string_341__data: .string "while ("

  .align 8
.LABEL__string_342:
  .quad .LABEL__string_342__data
  .quad 33
  .quad 32
.LABEL__string_342__data: .string "Unsupported AST_Statement type: "

  .align 8
.LABEL__string_343:
  .quad .LABEL__string_343__data
  .quad 3
  .quad 2
.LABEL__string_343__data: .string "; "

  .align 8
.LABEL__string_344:
  .quad .LABEL__string_344__data
  .quad 28
  .quad 27
.LABEL__string_344__data: .string "Unsupported AST_Type type: "

  .align 8
.LABEL__string_345:
  .quad .LABEL__string_345__data
  .quad 5
  .quad 4
.LABEL__string_345__data: .string " && "

  .align 8
.LABEL__string_346:
  .quad .LABEL__string_346__data
  .quad 5
  .quad 4
.LABEL__string_346__data: .string " || "

  .align 8
.LABEL__string_347:
  .quad .LABEL__string_347__data
  .quad 5
  .quad 4
.LABEL__string_347__data: .string " as "

  .align 8
.LABEL__string_348:
  .quad .LABEL__string_348__data
  .quad 5
  .quad 4
.LABEL__string_348__data: .string "new "

  .align 8
.LABEL__string_349:
  .quad .LABEL__string_349__data
  .quad 34
  .quad 33
.LABEL__string_349__data: .string "Unsupported AST_Expression type: "

  .align 8
.LABEL__string_350:
  .quad .LABEL__string_350__data
  .quad 6
  .quad 5
.LABEL__string_350__data: .string "false"

  .align 8
.LABEL__string_351:
  .quad .LABEL__string_351__data
  .quad 5
  .quad 4
.LABEL__string_351__data: .string "null"

  .align 8
.LABEL__string_352:
  .quad .LABEL__string_352__data
  .quad 5
  .quad 4
.LABEL__string_352__data: .string "true"

  .align 8
.LABEL__string_353:
  .quad .LABEL__string_353__data
  .quad 7
  .quad 6
.LABEL__string_353__data: .string "[2;37m"

  .align 8
.LABEL__string_354:
  .quad .LABEL__string_354__data
  .quad 4
  .quad 3
.LABEL__string_354__data: .string "[0m"

  .align 8
.LABEL__string_355:
  .quad .LABEL__string_355__data
  .quad 7
  .quad 6
.LABEL__string_355__data: .string "[1;33m"

  .align 8
.LABEL__string_356:
  .quad .LABEL__string_356__data
  .quad 7
  .quad 6
.LABEL__string_356__data: .string "[2;33m"

  .align 8
.LABEL__string_357:
  .quad .LABEL__string_357__data
  .quad 2
  .quad 1
.LABEL__string_357__data: .string "r"

  .align 8
.LABEL__string_358:
  .quad .LABEL__string_358__data
  .quad 21
  .quad 20
.LABEL__string_358__data: .string "Failed to write text"

  .align 8
.LABEL__string_359:
  .quad .LABEL__string_359__data
  .quad 28
  .quad 27
.LABEL__string_359__data: .string "Failed to write character: "

  .section .rodata

  .align 8
MC_Register:
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register__object_type:
  .quad 0
  .quad .LABEL__MC_Register__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__MC_Register__object_type__name__data: .string "MC_Register"

  .align 8
Object:
  .quad .LABEL__Object__object_type
.LABEL__Object__object_type:
  .quad 0
  .quad .LABEL__Object__object_type__name__data
  .quad 7
  .quad 6
  .quad 0
.LABEL__Object__object_type__name__data: .string "Object"

  .align 8
IR_Instruction:
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Instruction__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__Object__object_type
.LABEL__IR_Instruction__object_type__name__data: .string "IR_Instruction"

  .align 8
IR_Variable_Value:
  .quad .LABEL__IR_Variable_Value__object_type
.LABEL__IR_Variable_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Variable_Value__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Variable_Value__object_type__name__data: .string "IR_Variable_Value"

  .align 8
IR_Value:
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Value__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__IR_Value__object_type__name__data: .string "IR_Value"

  .align 8
IR_Type:
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Type__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__IR_Type__object_type__name__data: .string "IR_Type"

  .align 8
IR_Variable:
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Variable__object_type:
  .quad 0
  .quad .LABEL__IR_Variable__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__IR_Variable__object_type__name__data: .string "IR_Variable"

  .align 8
IR_Block:
  .quad .LABEL__IR_Block__object_type
.LABEL__IR_Block__object_type:
  .quad 0
  .quad .LABEL__IR_Block__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__IR_Block__object_type__name__data: .string "IR_Block"

  .align 8
IR_Function:
  .quad .LABEL__IR_Function__object_type
.LABEL__IR_Function__object_type:
  .quad 0
  .quad .LABEL__IR_Function__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__IR_Function__object_type__name__data: .string "IR_Function"

  .align 8
IR_Function_Type:
  .quad .LABEL__IR_Function_Type__object_type
.LABEL__IR_Function_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Type__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Function_Type__object_type__name__data: .string "IR_Function_Type"

  .align 8
MC_Address:
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Address__object_type__name__data
  .quad 11
  .quad 10
  .quad .LABEL__Object__object_type
.LABEL__MC_Address__object_type__name__data: .string "MC_Address"

  .align 8
MC_Register_RAX:
  .quad .LABEL__MC_Register_RAX__object_type
.LABEL__MC_Register_RAX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RAX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RAX__object_type__name__data: .string "MC_Register_RAX"

  .align 8
MC_Register_RCX:
  .quad .LABEL__MC_Register_RCX__object_type
.LABEL__MC_Register_RCX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RCX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RCX__object_type__name__data: .string "MC_Register_RCX"

  .align 8
MC_Register_RDX:
  .quad .LABEL__MC_Register_RDX__object_type
.LABEL__MC_Register_RDX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RDX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RDX__object_type__name__data: .string "MC_Register_RDX"

  .align 8
MC_Register_RBX:
  .quad .LABEL__MC_Register_RBX__object_type
.LABEL__MC_Register_RBX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RBX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RBX__object_type__name__data: .string "MC_Register_RBX"

  .align 8
MC_Register_RSI:
  .quad .LABEL__MC_Register_RSI__object_type
.LABEL__MC_Register_RSI__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RSI__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RSI__object_type__name__data: .string "MC_Register_RSI"

  .align 8
MC_Register_RDI:
  .quad .LABEL__MC_Register_RDI__object_type
.LABEL__MC_Register_RDI__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RDI__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RDI__object_type__name__data: .string "MC_Register_RDI"

  .align 8
MC_Register_RSP:
  .quad .LABEL__MC_Register_RSP__object_type
.LABEL__MC_Register_RSP__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RSP__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RSP__object_type__name__data: .string "MC_Register_RSP"

  .align 8
MC_Register_RBP:
  .quad .LABEL__MC_Register_RBP__object_type
.LABEL__MC_Register_RBP__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RBP__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RBP__object_type__name__data: .string "MC_Register_RBP"

  .align 8
MC_Register_R8:
  .quad .LABEL__MC_Register_R8__object_type
.LABEL__MC_Register_R8__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R8__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R8__object_type__name__data: .string "MC_Register_R8"

  .align 8
MC_Register_R9:
  .quad .LABEL__MC_Register_R9__object_type
.LABEL__MC_Register_R9__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R9__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R9__object_type__name__data: .string "MC_Register_R9"

  .align 8
MC_Register_R10:
  .quad .LABEL__MC_Register_R10__object_type
.LABEL__MC_Register_R10__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R10__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R10__object_type__name__data: .string "MC_Register_R10"

  .align 8
MC_Register_R11:
  .quad .LABEL__MC_Register_R11__object_type
.LABEL__MC_Register_R11__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R11__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R11__object_type__name__data: .string "MC_Register_R11"

  .align 8
MC_Register_R12:
  .quad .LABEL__MC_Register_R12__object_type
.LABEL__MC_Register_R12__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R12__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R12__object_type__name__data: .string "MC_Register_R12"

  .align 8
MC_Register_R13:
  .quad .LABEL__MC_Register_R13__object_type
.LABEL__MC_Register_R13__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R13__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R13__object_type__name__data: .string "MC_Register_R13"

  .align 8
MC_Register_R14:
  .quad .LABEL__MC_Register_R14__object_type
.LABEL__MC_Register_R14__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R14__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R14__object_type__name__data: .string "MC_Register_R14"

  .align 8
MC_Register_R15:
  .quad .LABEL__MC_Register_R15__object_type
.LABEL__MC_Register_R15__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R15__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R15__object_type__name__data: .string "MC_Register_R15"

  .align 8
MC_Global_Variable_Address:
  .quad .LABEL__MC_Global_Variable_Address__object_type
.LABEL__MC_Global_Variable_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Global_Variable_Address__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Global_Variable_Address__object_type__name__data: .string "MC_Global_Variable_Address"

  .align 8
MC_Register_Based_Address:
  .quad .LABEL__MC_Register_Based_Address__object_type
.LABEL__MC_Register_Based_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Register_Based_Address__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Register_Based_Address__object_type__name__data: .string "MC_Register_Based_Address"

  .align 8
MC_Local_Variable_Address:
  .quad .LABEL__MC_Local_Variable_Address__object_type
.LABEL__MC_Local_Variable_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Local_Variable_Address__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__MC_Register_Based_Address__object_type
.LABEL__MC_Local_Variable_Address__object_type__name__data: .string "MC_Local_Variable_Address"

  .align 8
String_Token:
  .quad .LABEL__String_Token__object_type
.LABEL__String_Token__object_type:
  .quad 0
  .quad .LABEL__String_Token__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__Literal_Token__object_type
.LABEL__String_Token__object_type__name__data: .string "String_Token"

  .align 8
Literal_Token:
  .quad .LABEL__Literal_Token__object_type
.LABEL__Literal_Token__object_type:
  .quad 0
  .quad .LABEL__Literal_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Token__object_type
.LABEL__Literal_Token__object_type__name__data: .string "Literal_Token"

  .align 8
Token:
  .quad .LABEL__Token__object_type
.LABEL__Token__object_type:
  .quad 0
  .quad .LABEL__Token__object_type__name__data
  .quad 6
  .quad 5
  .quad .LABEL__Object__object_type
.LABEL__Token__object_type__name__data: .string "Token"

  .align 8
IR_Any_Type:
  .quad .LABEL__IR_Any_Type__object_type
.LABEL__IR_Any_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Any_Type__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Any_Type__object_type__name__data: .string "IR_Any_Type"

  .align 8
IR_Boolean_Type:
  .quad .LABEL__IR_Boolean_Type__object_type
.LABEL__IR_Boolean_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Boolean_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Boolean_Type__object_type__name__data: .string "IR_Boolean_Type"

  .align 8
IR_Int_Type:
  .quad .LABEL__IR_Int_Type__object_type
.LABEL__IR_Int_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int_Type__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Int_Type__object_type__name__data: .string "IR_Int_Type"

  .align 8
IR_Int8_Type:
  .quad .LABEL__IR_Int8_Type__object_type
.LABEL__IR_Int8_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int8_Type__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Int8_Type__object_type__name__data: .string "IR_Int8_Type"

  .align 8
IR_Int16_Type:
  .quad .LABEL__IR_Int16_Type__object_type
.LABEL__IR_Int16_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int16_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Int16_Type__object_type__name__data: .string "IR_Int16_Type"

  .align 8
IR_Int32_Type:
  .quad .LABEL__IR_Int32_Type__object_type
.LABEL__IR_Int32_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int32_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Int32_Type__object_type__name__data: .string "IR_Int32_Type"

  .align 8
IR_Int64_Type:
  .quad .LABEL__IR_Int64_Type__object_type
.LABEL__IR_Int64_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int64_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Int64_Type__object_type__name__data: .string "IR_Int64_Type"

  .align 8
IR_Nothing_Type:
  .quad .LABEL__IR_Nothing_Type__object_type
.LABEL__IR_Nothing_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Nothing_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Nothing_Type__object_type__name__data: .string "IR_Nothing_Type"

  .align 8
IR_Null_Type:
  .quad .LABEL__IR_Null_Type__object_type
.LABEL__IR_Null_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Null_Type__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Null_Type__object_type__name__data: .string "IR_Null_Type"

  .align 8
IR_Undefined_Type:
  .quad .LABEL__IR_Undefined_Type__object_type
.LABEL__IR_Undefined_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Undefined_Type__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Undefined_Type__object_type__name__data: .string "IR_Undefined_Type"

  .align 8
IR_Pointer_Type:
  .quad .LABEL__IR_Pointer_Type__object_type
.LABEL__IR_Pointer_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Pointer_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Pointer_Type__object_type__name__data: .string "IR_Pointer_Type"

  .align 8
IR_Array_Type:
  .quad .LABEL__IR_Array_Type__object_type
.LABEL__IR_Array_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Array_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Pointer_Type__object_type
.LABEL__IR_Array_Type__object_type__name__data: .string "IR_Array_Type"

  .align 8
AST_Expression:
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Expression__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__Object__object_type
.LABEL__AST_Expression__object_type__name__data: .string "AST_Expression"

  .align 8
IR_Struct_Type:
  .quad .LABEL__IR_Struct_Type__object_type
.LABEL__IR_Struct_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Struct_Type__object_type__name__data: .string "IR_Struct_Type"

  .align 8
AST_Struct_Statement:
  .quad .LABEL__AST_Struct_Statement__object_type
.LABEL__AST_Struct_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Struct_Statement__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Struct_Statement__object_type__name__data: .string "AST_Struct_Statement"

  .align 8
AST_Statement:
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Statement__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Object__object_type
.LABEL__AST_Statement__object_type__name__data: .string "AST_Statement"

  .align 8
Identifier_Token:
  .quad .LABEL__Identifier_Token__object_type
.LABEL__Identifier_Token__object_type:
  .quad 0
  .quad .LABEL__Identifier_Token__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__Token__object_type
.LABEL__Identifier_Token__object_type__name__data: .string "Identifier_Token"

  .align 8
AST_Type:
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Type__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__AST_Type__object_type__name__data: .string "AST_Type"

  .align 8
IR_Link:
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Link__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__IR_Link__object_type__name__data: .string "IR_Link"

  .align 8
IR_Requires_Value_Link:
  .quad .LABEL__IR_Requires_Value_Link__object_type
.LABEL__IR_Requires_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Requires_Value_Link__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Requires_Value_Link__object_type__name__data: .string "IR_Requires_Value_Link"

  .align 8
IR_Required_By_Value_Link:
  .quad .LABEL__IR_Required_By_Value_Link__object_type
.LABEL__IR_Required_By_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Required_By_Value_Link__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Required_By_Value_Link__object_type__name__data: .string "IR_Required_By_Value_Link"

  .align 8
IR_Undefined_Value:
  .quad .LABEL__IR_Undefined_Value__object_type
.LABEL__IR_Undefined_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Undefined_Value__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Undefined_Value__object_type__name__data: .string "IR_Undefined_Value"

  .align 8
IR_Constant_Value:
  .quad .LABEL__IR_Constant_Value__object_type
.LABEL__IR_Constant_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Constant_Value__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Constant_Value__object_type__name__data: .string "IR_Constant_Value"

  .align 8
IR_Struct_Literal_Value:
  .quad .LABEL__IR_Struct_Literal_Value__object_type
.LABEL__IR_Struct_Literal_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Literal_Value__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Struct_Literal_Value__object_type__name__data: .string "IR_Struct_Literal_Value"

  .align 8
IR_Struct_Literal_Member_Value_Link:
  .quad .LABEL__IR_Struct_Literal_Member_Value_Link__object_type
.LABEL__IR_Struct_Literal_Member_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Literal_Member_Value_Link__object_type__name__data
  .quad 36
  .quad 35
  .quad .LABEL__IR_Requires_Value_Link__object_type
.LABEL__IR_Struct_Literal_Member_Value_Link__object_type__name__data: .string "IR_Struct_Literal_Member_Value_Link"

  .align 8
IR_Global_Variable_Value:
  .quad .LABEL__IR_Global_Variable_Value__object_type
.LABEL__IR_Global_Variable_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable_Value__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Global_Variable_Value__object_type__name__data: .string "IR_Global_Variable_Value"

  .align 8
IR_Global_Variable_Address_Value:
  .quad .LABEL__IR_Global_Variable_Address_Value__object_type
.LABEL__IR_Global_Variable_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable_Address_Value__object_type__name__data
  .quad 33
  .quad 32
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Global_Variable_Address_Value__object_type__name__data: .string "IR_Global_Variable_Address_Value"

  .align 8
IR_Variable_Address_Value:
  .quad .LABEL__IR_Variable_Address_Value__object_type
.LABEL__IR_Variable_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Variable_Address_Value__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Variable_Address_Value__object_type__name__data: .string "IR_Variable_Address_Value"

  .align 8
IR_Function_Address_Value:
  .quad .LABEL__IR_Function_Address_Value__object_type
.LABEL__IR_Function_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Address_Value__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Function_Address_Value__object_type__name__data: .string "IR_Function_Address_Value"

  .align 8
IR_Global_Variable:
  .quad .LABEL__IR_Global_Variable__object_type
.LABEL__IR_Global_Variable__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Global_Variable__object_type__name__data: .string "IR_Global_Variable"

  .align 8
IR_Function_Parameter:
  .quad .LABEL__IR_Function_Parameter__object_type
.LABEL__IR_Function_Parameter__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Parameter__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Function_Parameter__object_type__name__data: .string "IR_Function_Parameter"

  .align 8
IR_Call_Instruction:
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Call_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Call_Instruction__object_type__name__data: .string "IR_Call_Instruction"

  .align 8
IR_Direct_Call_Instruction:
  .quad .LABEL__IR_Direct_Call_Instruction__object_type
.LABEL__IR_Direct_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Direct_Call_Instruction__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Direct_Call_Instruction__object_type__name__data: .string "IR_Direct_Call_Instruction"

  .align 8
IR_Dynamic_Call_Instruction:
  .quad .LABEL__IR_Dynamic_Call_Instruction__object_type
.LABEL__IR_Dynamic_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Dynamic_Call_Instruction__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Dynamic_Call_Instruction__object_type__name__data: .string "IR_Dynamic_Call_Instruction"

  .align 8
IR_Cast_Instruction:
  .quad .LABEL__IR_Cast_Instruction__object_type
.LABEL__IR_Cast_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Cast_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Cast_Instruction__object_type__name__data: .string "IR_Cast_Instruction"

  .align 8
IR_Jump_Instruction:
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Jump_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Jump_Instruction__object_type__name__data: .string "IR_Jump_Instruction"

  .align 8
IR_Conditional_Jump_Instruction:
  .quad .LABEL__IR_Conditional_Jump_Instruction__object_type
.LABEL__IR_Conditional_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Conditional_Jump_Instruction__object_type__name__data
  .quad 32
  .quad 31
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Conditional_Jump_Instruction__object_type__name__data: .string "IR_Conditional_Jump_Instruction"

  .align 8
IR_Direct_Jump_Instruction:
  .quad .LABEL__IR_Direct_Jump_Instruction__object_type
.LABEL__IR_Direct_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Direct_Jump_Instruction__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Direct_Jump_Instruction__object_type__name__data: .string "IR_Direct_Jump_Instruction"

  .align 8
IR_Load_Array_Item_Instruction:
  .quad .LABEL__IR_Load_Array_Item_Instruction__object_type
.LABEL__IR_Load_Array_Item_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Array_Item_Instruction__object_type__name__data
  .quad 31
  .quad 30
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Array_Item_Instruction__object_type__name__data: .string "IR_Load_Array_Item_Instruction"

  .align 8
IR_Load_Struct_Member_Instruction:
  .quad .LABEL__IR_Load_Struct_Member_Instruction__object_type
.LABEL__IR_Load_Struct_Member_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Struct_Member_Instruction__object_type__name__data
  .quad 34
  .quad 33
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Struct_Member_Instruction__object_type__name__data: .string "IR_Load_Struct_Member_Instruction"

  .align 8
IR_Load_Variable_Address_Instruction:
  .quad .LABEL__IR_Load_Variable_Address_Instruction__object_type
.LABEL__IR_Load_Variable_Address_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Address_Instruction__object_type__name__data
  .quad 37
  .quad 36
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Variable_Address_Instruction__object_type__name__data: .string "IR_Load_Variable_Address_Instruction"

  .align 8
IR_Load_Variable_Instruction:
  .quad .LABEL__IR_Load_Variable_Instruction__object_type
.LABEL__IR_Load_Variable_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Instruction__object_type__name__data
  .quad 29
  .quad 28
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Variable_Instruction__object_type__name__data: .string "IR_Load_Variable_Instruction"

  .align 8
IR_New_Instruction:
  .quad .LABEL__IR_New_Instruction__object_type
.LABEL__IR_New_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_New_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_New_Instruction__object_type__name__data: .string "IR_New_Instruction"

  .align 8
IR_Return_Instruction:
  .quad .LABEL__IR_Return_Instruction__object_type
.LABEL__IR_Return_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Return_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Return_Instruction__object_type__name__data: .string "IR_Return_Instruction"

  .align 8
IR_Set_Instruction:
  .quad .LABEL__IR_Set_Instruction__object_type
.LABEL__IR_Set_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Set_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Set_Instruction__object_type__name__data: .string "IR_Set_Instruction"

  .align 8
IR_Store_Array_Item_Instruction:
  .quad .LABEL__IR_Store_Array_Item_Instruction__object_type
.LABEL__IR_Store_Array_Item_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Store_Array_Item_Instruction__object_type__name__data
  .quad 32
  .quad 31
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Store_Array_Item_Instruction__object_type__name__data: .string "IR_Store_Array_Item_Instruction"

  .align 8
IR_Store_Struct_Member_Instruction:
  .quad .LABEL__IR_Store_Struct_Member_Instruction__object_type
.LABEL__IR_Store_Struct_Member_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Store_Struct_Member_Instruction__object_type__name__data
  .quad 35
  .quad 34
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Store_Struct_Member_Instruction__object_type__name__data: .string "IR_Store_Struct_Member_Instruction"

  .align 8
IR_Binary_Instruction:
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Binary_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Binary_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Binary_Instruction__object_type__name__data: .string "IR_Binary_Instruction"

  .align 8
IR_Add_Instruction:
  .quad .LABEL__IR_Add_Instruction__object_type
.LABEL__IR_Add_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Add_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Add_Instruction__object_type__name__data: .string "IR_Add_Instruction"

  .align 8
IR_Comparison_Instruction:
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Comparison_Instruction__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Comparison_Instruction__object_type__name__data: .string "IR_Comparison_Instruction"

  .align 8
IR_Divide_Instruction:
  .quad .LABEL__IR_Divide_Instruction__object_type
.LABEL__IR_Divide_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Divide_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Divide_Instruction__object_type__name__data: .string "IR_Divide_Instruction"

  .align 8
IR_Equals_Comparison_Instruction:
  .quad .LABEL__IR_Equals_Comparison_Instruction__object_type
.LABEL__IR_Equals_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Equals_Comparison_Instruction__object_type__name__data
  .quad 33
  .quad 32
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Equals_Comparison_Instruction__object_type__name__data: .string "IR_Equals_Comparison_Instruction"

  .align 8
IR_Greater_Comparison_Instruction:
  .quad .LABEL__IR_Greater_Comparison_Instruction__object_type
.LABEL__IR_Greater_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Greater_Comparison_Instruction__object_type__name__data
  .quad 34
  .quad 33
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Greater_Comparison_Instruction__object_type__name__data: .string "IR_Greater_Comparison_Instruction"

  .align 8
IR_Greater_Or_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type
.LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type__name__data
  .quad 43
  .quad 42
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Greater_Or_Equal_Comparison_Instruction"

  .align 8
IR_Less_Comparison_Instruction:
  .quad .LABEL__IR_Less_Comparison_Instruction__object_type
.LABEL__IR_Less_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Less_Comparison_Instruction__object_type__name__data
  .quad 31
  .quad 30
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Less_Comparison_Instruction__object_type__name__data: .string "IR_Less_Comparison_Instruction"

  .align 8
IR_Less_Or_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type
.LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type__name__data
  .quad 40
  .quad 39
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Less_Or_Equal_Comparison_Instruction"

  .align 8
IR_Modulo_Instruction:
  .quad .LABEL__IR_Modulo_Instruction__object_type
.LABEL__IR_Modulo_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Modulo_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Modulo_Instruction__object_type__name__data: .string "IR_Modulo_Instruction"

  .align 8
IR_Multiply_Instruction:
  .quad .LABEL__IR_Multiply_Instruction__object_type
.LABEL__IR_Multiply_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Multiply_Instruction__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Multiply_Instruction__object_type__name__data: .string "IR_Multiply_Instruction"

  .align 8
IR_Not_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Not_Equal_Comparison_Instruction__object_type
.LABEL__IR_Not_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Not_Equal_Comparison_Instruction__object_type__name__data
  .quad 36
  .quad 35
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Not_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Not_Equal_Comparison_Instruction"

  .align 8
IR_Substract_Instruction:
  .quad .LABEL__IR_Substract_Instruction__object_type
.LABEL__IR_Substract_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Substract_Instruction__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Substract_Instruction__object_type__name__data: .string "IR_Substract_Instruction"

  .align 8
IR_Phi_Instruction:
  .quad .LABEL__IR_Phi_Instruction__object_type
.LABEL__IR_Phi_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Phi_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Phi_Instruction__object_type__name__data: .string "IR_Phi_Instruction"

  .align 8
Matcher:
  .quad .LABEL__Matcher__object_type
.LABEL__Matcher__object_type:
  .quad 0
  .quad .LABEL__Matcher__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__Matcher__object_type__name__data: .string "Matcher"

  .align 8
Comment_Matcher:
  .quad .LABEL__Comment_Matcher__object_type
.LABEL__Comment_Matcher__object_type:
  .quad 0
  .quad .LABEL__Comment_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Comment_Matcher__object_type__name__data: .string "Comment_Matcher"

  .align 8
End_Of_File_Matcher:
  .quad .LABEL__End_Of_File_Matcher__object_type
.LABEL__End_Of_File_Matcher__object_type:
  .quad 0
  .quad .LABEL__End_Of_File_Matcher__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__Matcher__object_type
.LABEL__End_Of_File_Matcher__object_type__name__data: .string "End_Of_File_Matcher"

  .align 8
End_Of_Line_Matcher:
  .quad .LABEL__End_Of_Line_Matcher__object_type
.LABEL__End_Of_Line_Matcher__object_type:
  .quad 0
  .quad .LABEL__End_Of_Line_Matcher__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__Matcher__object_type
.LABEL__End_Of_Line_Matcher__object_type__name__data: .string "End_Of_Line_Matcher"

  .align 8
Identifier_Matcher:
  .quad .LABEL__Identifier_Matcher__object_type
.LABEL__Identifier_Matcher__object_type:
  .quad 0
  .quad .LABEL__Identifier_Matcher__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__Matcher__object_type
.LABEL__Identifier_Matcher__object_type__name__data: .string "Identifier_Matcher"

  .align 8
Keyword_Matcher:
  .quad .LABEL__Keyword_Matcher__object_type
.LABEL__Keyword_Matcher__object_type:
  .quad 0
  .quad .LABEL__Keyword_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Keyword_Matcher__object_type__name__data: .string "Keyword_Matcher"

  .align 8
Literal_Matcher:
  .quad .LABEL__Literal_Matcher__object_type
.LABEL__Literal_Matcher__object_type:
  .quad 0
  .quad .LABEL__Literal_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Literal_Matcher__object_type__name__data: .string "Literal_Matcher"

  .align 8
String_Literal_Matcher:
  .quad .LABEL__String_Literal_Matcher__object_type
.LABEL__String_Literal_Matcher__object_type:
  .quad 0
  .quad .LABEL__String_Literal_Matcher__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__Matcher__object_type
.LABEL__String_Literal_Matcher__object_type__name__data: .string "String_Literal_Matcher"

  .align 8
Other_Matcher:
  .quad .LABEL__Other_Matcher__object_type
.LABEL__Other_Matcher__object_type:
  .quad 0
  .quad .LABEL__Other_Matcher__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Matcher__object_type
.LABEL__Other_Matcher__object_type__name__data: .string "Other_Matcher"

  .align 8
Space_Matcher:
  .quad .LABEL__Space_Matcher__object_type
.LABEL__Space_Matcher__object_type:
  .quad 0
  .quad .LABEL__Space_Matcher__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Matcher__object_type
.LABEL__Space_Matcher__object_type__name__data: .string "Space_Matcher"

  .align 8
AST_Include_Statement:
  .quad .LABEL__AST_Include_Statement__object_type
.LABEL__AST_Include_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Include_Statement__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Include_Statement__object_type__name__data: .string "AST_Include_Statement"

  .align 8
AST_Function_Statement:
  .quad .LABEL__AST_Function_Statement__object_type
.LABEL__AST_Function_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Function_Statement__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Function_Statement__object_type__name__data: .string "AST_Function_Statement"

  .align 8
AST_Function_Type:
  .quad .LABEL__AST_Function_Type__object_type
.LABEL__AST_Function_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Function_Type__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Function_Type__object_type__name__data: .string "AST_Function_Type"

  .align 8
AST_Block_Statement:
  .quad .LABEL__AST_Block_Statement__object_type
.LABEL__AST_Block_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Block_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Block_Statement__object_type__name__data: .string "AST_Block_Statement"

  .align 8
AST_Expression_Statement:
  .quad .LABEL__AST_Expression_Statement__object_type
.LABEL__AST_Expression_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Expression_Statement__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Expression_Statement__object_type__name__data: .string "AST_Expression_Statement"

  .align 8
AST_If_Statement:
  .quad .LABEL__AST_If_Statement__object_type
.LABEL__AST_If_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_If_Statement__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_If_Statement__object_type__name__data: .string "AST_If_Statement"

  .align 8
AST_Loop_Statement:
  .quad .LABEL__AST_Loop_Statement__object_type
.LABEL__AST_Loop_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Loop_Statement__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Loop_Statement__object_type__name__data: .string "AST_Loop_Statement"

  .align 8
AST_While_Statement:
  .quad .LABEL__AST_While_Statement__object_type
.LABEL__AST_While_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_While_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_While_Statement__object_type__name__data: .string "AST_While_Statement"

  .align 8
AST_Break_Statement:
  .quad .LABEL__AST_Break_Statement__object_type
.LABEL__AST_Break_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Break_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Break_Statement__object_type__name__data: .string "AST_Break_Statement"

  .align 8
AST_Return_Statement:
  .quad .LABEL__AST_Return_Statement__object_type
.LABEL__AST_Return_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Return_Statement__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Return_Statement__object_type__name__data: .string "AST_Return_Statement"

  .align 8
AST_Variable_Statement:
  .quad .LABEL__AST_Variable_Statement__object_type
.LABEL__AST_Variable_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Variable_Statement__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Variable_Statement__object_type__name__data: .string "AST_Variable_Statement"

  .align 8
AST_Assignment_Statement:
  .quad .LABEL__AST_Assignment_Statement__object_type
.LABEL__AST_Assignment_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Assignment_Statement__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Assignment_Statement__object_type__name__data: .string "AST_Assignment_Statement"

  .align 8
Other_Token:
  .quad .LABEL__Other_Token__object_type
.LABEL__Other_Token__object_type:
  .quad 0
  .quad .LABEL__Other_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Other_Token__object_type__name__data: .string "Other_Token"

  .align 8
AST_Named_Type:
  .quad .LABEL__AST_Named_Type__object_type
.LABEL__AST_Named_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Named_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Named_Type__object_type__name__data: .string "AST_Named_Type"

  .align 8
AST_Pointer_Type:
  .quad .LABEL__AST_Pointer_Type__object_type
.LABEL__AST_Pointer_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Pointer_Type__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Pointer_Type__object_type__name__data: .string "AST_Pointer_Type"

  .align 8
AST_Array_Type:
  .quad .LABEL__AST_Array_Type__object_type
.LABEL__AST_Array_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Array_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Array_Type__object_type__name__data: .string "AST_Array_Type"

  .align 8
AST_Atomic_Expression:
  .quad .LABEL__AST_Atomic_Expression__object_type
.LABEL__AST_Atomic_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Atomic_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Atomic_Expression__object_type__name__data: .string "AST_Atomic_Expression"

  .align 8
AST_Literal_Expression:
  .quad .LABEL__AST_Literal_Expression__object_type
.LABEL__AST_Literal_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Literal_Expression__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Literal_Expression__object_type__name__data: .string "AST_Literal_Expression"

  .align 8
AST_Variable_Expression:
  .quad .LABEL__AST_Variable_Expression__object_type
.LABEL__AST_Variable_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Variable_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Variable_Expression__object_type__name__data: .string "AST_Variable_Expression"

  .align 8
AST_Binary_Expression:
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Binary_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Binary_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Binary_Expression__object_type__name__data: .string "AST_Binary_Expression"

  .align 8
AST_Add_Expression:
  .quad .LABEL__AST_Add_Expression__object_type
.LABEL__AST_Add_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Add_Expression__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Add_Expression__object_type__name__data: .string "AST_Add_Expression"

  .align 8
AST_Divide_Expression:
  .quad .LABEL__AST_Divide_Expression__object_type
.LABEL__AST_Divide_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Divide_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Divide_Expression__object_type__name__data: .string "AST_Divide_Expression"

  .align 8
AST_Equals_Expression:
  .quad .LABEL__AST_Equals_Expression__object_type
.LABEL__AST_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Equals_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Equals_Expression__object_type__name__data: .string "AST_Equals_Expression"

  .align 8
AST_Greater_Than_Expression:
  .quad .LABEL__AST_Greater_Than_Expression__object_type
.LABEL__AST_Greater_Than_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Expression__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Greater_Than_Expression__object_type__name__data: .string "AST_Greater_Than_Expression"

  .align 8
AST_Greater_Than_Or_Equals_Expression:
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__object_type
.LABEL__AST_Greater_Than_Or_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__object_type__name__data
  .quad 38
  .quad 37
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Greater_Than_Or_Equals_Expression__object_type__name__data: .string "AST_Greater_Than_Or_Equals_Expression"

  .align 8
AST_Less_Than_Expression:
  .quad .LABEL__AST_Less_Than_Expression__object_type
.LABEL__AST_Less_Than_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Less_Than_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Less_Than_Expression__object_type__name__data: .string "AST_Less_Than_Expression"

  .align 8
AST_Less_Than_Or_Equals_Expression:
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__object_type
.LABEL__AST_Less_Than_Or_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__object_type__name__data
  .quad 35
  .quad 34
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Less_Than_Or_Equals_Expression__object_type__name__data: .string "AST_Less_Than_Or_Equals_Expression"

  .align 8
AST_Logic_And_Expression:
  .quad .LABEL__AST_Logic_And_Expression__object_type
.LABEL__AST_Logic_And_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Logic_And_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Logic_And_Expression__object_type__name__data: .string "AST_Logic_And_Expression"

  .align 8
AST_Logic_Or_Expression:
  .quad .LABEL__AST_Logic_Or_Expression__object_type
.LABEL__AST_Logic_Or_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Logic_Or_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Logic_Or_Expression__object_type__name__data: .string "AST_Logic_Or_Expression"

  .align 8
AST_Modulo_Expression:
  .quad .LABEL__AST_Modulo_Expression__object_type
.LABEL__AST_Modulo_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Modulo_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Modulo_Expression__object_type__name__data: .string "AST_Modulo_Expression"

  .align 8
AST_Multiply_Expression:
  .quad .LABEL__AST_Multiply_Expression__object_type
.LABEL__AST_Multiply_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Multiply_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Multiply_Expression__object_type__name__data: .string "AST_Multiply_Expression"

  .align 8
AST_Not_Equals_Expression:
  .quad .LABEL__AST_Not_Equals_Expression__object_type
.LABEL__AST_Not_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Not_Equals_Expression__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Not_Equals_Expression__object_type__name__data: .string "AST_Not_Equals_Expression"

  .align 8
AST_Substract_Expression:
  .quad .LABEL__AST_Substract_Expression__object_type
.LABEL__AST_Substract_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Substract_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Substract_Expression__object_type__name__data: .string "AST_Substract_Expression"

  .align 8
AST_Unary_Expression:
  .quad .LABEL__AST_Unary_Expression__object_type
.LABEL__AST_Unary_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Unary_Expression__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Unary_Expression__object_type__name__data: .string "AST_Unary_Expression"

  .align 8
AST_Negate_Expression:
  .quad .LABEL__AST_Negate_Expression__object_type
.LABEL__AST_Negate_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Negate_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Unary_Expression__object_type
.LABEL__AST_Negate_Expression__object_type__name__data: .string "AST_Negate_Expression"

  .align 8
AST_Cast_Expression:
  .quad .LABEL__AST_Cast_Expression__object_type
.LABEL__AST_Cast_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Cast_Expression__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Cast_Expression__object_type__name__data: .string "AST_Cast_Expression"

  .align 8
AST_New_Expression:
  .quad .LABEL__AST_New_Expression__object_type
.LABEL__AST_New_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_New_Expression__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_New_Expression__object_type__name__data: .string "AST_New_Expression"

  .align 8
AST_Call_Expression:
  .quad .LABEL__AST_Call_Expression__object_type
.LABEL__AST_Call_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Call_Expression__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Call_Expression__object_type__name__data: .string "AST_Call_Expression"

  .align 8
AST_Access_Expression:
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Access_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Access_Expression__object_type__name__data: .string "AST_Access_Expression"

  .align 8
AST_Member_Access_Expression:
  .quad .LABEL__AST_Member_Access_Expression__object_type
.LABEL__AST_Member_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Member_Access_Expression__object_type__name__data
  .quad 29
  .quad 28
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Member_Access_Expression__object_type__name__data: .string "AST_Member_Access_Expression"

  .align 8
AST_Array_Access_Expression:
  .quad .LABEL__AST_Array_Access_Expression__object_type
.LABEL__AST_Array_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Array_Access_Expression__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Array_Access_Expression__object_type__name__data: .string "AST_Array_Access_Expression"

  .align 8
Character_Token:
  .quad .LABEL__Character_Token__object_type
.LABEL__Character_Token__object_type:
  .quad 0
  .quad .LABEL__Character_Token__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Literal_Token__object_type
.LABEL__Character_Token__object_type__name__data: .string "Character_Token"

  .align 8
Boolean_Token:
  .quad .LABEL__Boolean_Token__object_type
.LABEL__Boolean_Token__object_type:
  .quad 0
  .quad .LABEL__Boolean_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Literal_Token__object_type
.LABEL__Boolean_Token__object_type__name__data: .string "Boolean_Token"

  .align 8
Comment_Token:
  .quad .LABEL__Comment_Token__object_type
.LABEL__Comment_Token__object_type:
  .quad 0
  .quad .LABEL__Comment_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Token__object_type
.LABEL__Comment_Token__object_type__name__data: .string "Comment_Token"

  .align 8
End_Of_File_Token:
  .quad .LABEL__End_Of_File_Token__object_type
.LABEL__End_Of_File_Token__object_type:
  .quad 0
  .quad .LABEL__End_Of_File_Token__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__Token__object_type
.LABEL__End_Of_File_Token__object_type__name__data: .string "End_Of_File_Token"

  .align 8
End_Of_Line_Token:
  .quad .LABEL__End_Of_Line_Token__object_type
.LABEL__End_Of_Line_Token__object_type:
  .quad 0
  .quad .LABEL__End_Of_Line_Token__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__Token__object_type
.LABEL__End_Of_Line_Token__object_type__name__data: .string "End_Of_Line_Token"

  .align 8
Error_Token:
  .quad .LABEL__Error_Token__object_type
.LABEL__Error_Token__object_type:
  .quad 0
  .quad .LABEL__Error_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Error_Token__object_type__name__data: .string "Error_Token"

  .align 8
Integer_Token:
  .quad .LABEL__Integer_Token__object_type
.LABEL__Integer_Token__object_type:
  .quad 0
  .quad .LABEL__Integer_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Literal_Token__object_type
.LABEL__Integer_Token__object_type__name__data: .string "Integer_Token"

  .align 8
Keyword_Token:
  .quad .LABEL__Keyword_Token__object_type
.LABEL__Keyword_Token__object_type:
  .quad 0
  .quad .LABEL__Keyword_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Token__object_type
.LABEL__Keyword_Token__object_type__name__data: .string "Keyword_Token"

  .align 8
Null_Token:
  .quad .LABEL__Null_Token__object_type
.LABEL__Null_Token__object_type:
  .quad 0
  .quad .LABEL__Null_Token__object_type__name__data
  .quad 11
  .quad 10
  .quad .LABEL__Literal_Token__object_type
.LABEL__Null_Token__object_type__name__data: .string "Null_Token"

  .align 8
Space_Token:
  .quad .LABEL__Space_Token__object_type
.LABEL__Space_Token__object_type:
  .quad 0
  .quad .LABEL__Space_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Space_Token__object_type__name__data: .string "Space_Token"

  .align 8
Undefined_Token:
  .quad .LABEL__Undefined_Token__object_type
.LABEL__Undefined_Token__object_type:
  .quad 0
  .quad .LABEL__Undefined_Token__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Literal_Token__object_type
.LABEL__Undefined_Token__object_type__name__data: .string "Undefined_Token"
