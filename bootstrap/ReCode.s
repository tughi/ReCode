  .file 1 "bootstrap/ReCode.code"
  .file 2 "bootstrap/code/compiler/Generator.code"
  .file 3 "bootstrap/code/compiler/IR_Builder.code"
  .file 4 "bootstrap/code/compiler/Counter.code"
  .file 5 "bootstrap/code/compiler/IR.code"
  .file 6 "bootstrap/code/compiler/IR_Values_Map.code"
  .file 7 "bootstrap/code/compiler/Parser.code"
  .file 8 "bootstrap/code/compiler/AST.code"
  .file 9 "bootstrap/code/compiler/Scanner.code"
  .file 10 "bootstrap/code/compiler/Token.code"
  .file 11 "bootstrap/code/compiler/Source.code"
  .file 12 "bootstrap/code/compiler/List.code"
  .file 13 "bootstrap/code/lang/Object.code"
  .file 14 "bootstrap/code/lang/String.code"
  .file 15 "bootstrap/code/core/Platform.code"

  .intel_syntax noprefix

  .bss

  .align 8
optional_comment:
  .skip 8

  .align 8
optional_space:
  .skip 8

  .align 8
required_ampersand:
  .skip 8

  .align 8
required_as:
  .skip 8

  .align 8
required_asterisk:
  .skip 8

  .align 8
required_at:
  .skip 8

  .align 8
required_break:
  .skip 8

  .align 8
required_close_brace:
  .skip 8

  .align 8
required_close_bracket:
  .skip 8

  .align 8
required_close_paren:
  .skip 8

  .align 8
required_colon:
  .skip 8

  .align 8
required_column:
  .skip 8

  .align 8
required_comma:
  .skip 8

  .align 8
required_comment:
  .skip 8

  .align 8
required_define:
  .skip 8

  .align 8
required_dot:
  .skip 8

  .align 8
required_else:
  .skip 8

  .align 8
required_end_of_file:
  .skip 8

  .align 8
required_end_of_line:
  .skip 8

  .align 8
required_equals:
  .skip 8

  .align 8
required_exclamation_mark:
  .skip 8

  .align 8
required_extends:
  .skip 8

  .align 8
required_external:
  .skip 8

  .align 8
required_func:
  .skip 8

  .align 8
required_greater_than:
  .skip 8

  .align 8
required_hyphen:
  .skip 8

  .align 8
required_identifier:
  .skip 8

  .align 8
required_if:
  .skip 8

  .align 8
required_include:
  .skip 8

  .align 8
required_less_than:
  .skip 8

  .align 8
required_let:
  .skip 8

  .align 8
required_literal:
  .skip 8

  .align 8
required_loop:
  .skip 8

  .align 8
required_new:
  .skip 8

  .align 8
required_open_brace:
  .skip 8

  .align 8
required_open_bracket:
  .skip 8

  .align 8
required_open_paren:
  .skip 8

  .align 8
required_plus:
  .skip 8

  .align 8
required_question_mark:
  .skip 8

  .align 8
required_return:
  .skip 8

  .align 8
required_slash:
  .skip 8

  .align 8
required_string_literal:
  .skip 8

  .align 8
required_struct:
  .skip 8

  .align 8
required_unknown:
  .skip 8

  .align 8
required_vertical_bar:
  .skip 8

  .align 8
required_while:
  .skip 8

  .loc 1 3 8
  .text
  .globl main
main:
main_1:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR main_1__stack_frame_size[rip]
  sub rsp, rax
.LABEL__main_1__1:
  # argc.1: isize = load_variable(argc)
  # [live values]: argc.1:rdi 
  # argv.1: [[i8; ?]; ?] = load_variable(argv)
  # [live values]: argc.1:rdi argv.1:rsi 
  .loc 1 4 9
  # $1.1: bool = argc.1 < 3
  cmp rdi, 3
  setl al
  # [live values]: argc.1:rdi argv.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__main_1__2, .LABEL__main_1__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__main_1__3
.LABEL__main_1__2:
  .loc 1 5 9
  # $2.1: @FILE = call(write_383, stdout, "Usage:")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_0[rip] # "Usage:"
  call write_383
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 5 9
  # $3.1: @FILE = call(end_line_386, $2.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  .loc 1 6 9
  # $4.1: @FILE = call(write_385, stdout, '\t')
  mov rdi, stdout[rip]
  mov sil, 9
  call write_385
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 6 34
  # $5.1: [i8; ?] = load_array_item(argv.1, 0)
  mov rbx, [rbp-9]
  mov rbx, [rbx]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $4.1:rax $5.1:rbx 
  .loc 1 6 9
  # $6.1: @FILE = call(write_384, $4.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_384
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 6 9
  # $7.1: @FILE = call(write_383, $6.1, " <INPUT FILE> <OUTPUT FILE>")
  mov rdi, rax
  lea rsi, .LABEL__string_1[rip] # " <INPUT FILE> <OUTPUT FILE>"
  call write_383
  # [discarded value]: $6.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $7.1:rax 
  .loc 1 6 9
  # $8.1: @FILE = call(end_line_386, $7.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  .loc 1 7 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__main_1__3:
  .loc 1 10 42
  # $9.1: [i8; ?] = load_array_item(argv.1, 1)
  mov rax, [rbp-9]
  add rax, 8
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 10 28
  # source_file_path.1: @String = call(create_string_390, $9.1)
  mov rdi, rax
  call create_string_390
  # [discarded value]: $9.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:rax 
  .loc 1 11 9
  # $11.1: bool = call(ends_with_395, source_file_path.1, ".code")
  mov rdi, rax
  lea rsi, .LABEL__string_2[rip] # ".code"
  mov [rbp-25], rax
  call ends_with_395
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $11.1:rax 
  .loc 1 11 9
  # $12.1: bool = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:rbx 
  # jump($12.1, .LABEL__main_1__4, .LABEL__main_1__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__main_1__5
.LABEL__main_1__4:
  .loc 1 12 9
  # $13.1: @FILE = call(write_383, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_383
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $13.1:rax 
  .loc 1 12 9
  # $14.1: @FILE = call(write_383, $13.1, source_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_383
  # [discarded value]: $13.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $14.1:rax 
  .loc 1 12 9
  # $15.1: @FILE = call(write_383, $14.1, "' doesn't end with '.code'.")
  mov rdi, rax
  lea rsi, .LABEL__string_4[rip] # "' doesn't end with '.code'."
  call write_383
  # [discarded value]: $14.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $15.1:rax 
  .loc 1 12 9
  # $16.1: @FILE = call(end_line_386, $15.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  .loc 1 13 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
.LABEL__main_1__5:
  .loc 1 16 42
  # $17.1: [i8; ?] = load_array_item(argv.1, 2)
  mov rax, [rbp-9]
  add rax, 16
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] $17.1:rax 
  .loc 1 16 28
  # output_file_path.1: @String = call(create_string_390, $17.1)
  mov rdi, rax
  call create_string_390
  # [discarded value]: $17.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:rax 
  .loc 1 17 9
  # $19.1: bool = call(ends_with_395, output_file_path.1, ".s")
  mov rdi, rax
  lea rsi, .LABEL__string_5[rip] # ".s"
  mov [rbp-34], rax
  call ends_with_395
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $19.1:rax 
  .loc 1 17 9
  # $20.1: bool = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:rbx 
  # jump($20.1, .LABEL__main_1__6, .LABEL__main_1__7)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__main_1__7
.LABEL__main_1__6:
  .loc 1 18 9
  # $21.1: @FILE = call(write_383, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_383
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $21.1:rax 
  .loc 1 18 9
  # $22.1: @FILE = call(write_383, $21.1, output_file_path.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_383
  # [discarded value]: $21.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $22.1:rax 
  .loc 1 18 9
  # $23.1: @FILE = call(write_383, $22.1, "' doesn't end with '.s'.")
  mov rdi, rax
  lea rsi, .LABEL__string_6[rip] # "' doesn't end with '.s'."
  call write_383
  # [discarded value]: $22.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] $23.1:rax 
  .loc 1 18 9
  # $24.1: @FILE = call(end_line_386, $23.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  .loc 1 19 9
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
.LABEL__main_1__7:
  .loc 1 22 9
  # dump_file_path.1: @String = null
  xor rax, rax
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax 
  .loc 1 23 9
  # $25.1: bool = argc.1 >= 4
  cmp QWORD PTR [rbp-17], 4
  setge bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:rax $25.1:rbx 
  # jump($25.1, .LABEL__main_1__8, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__main_1__9
.LABEL__main_1__8:
  .loc 1 24 40
  # $26.1: [i8; ?] = load_array_item(argv.1, 3)
  mov rax, [rbp-9]
  add rax, 24
  mov rax, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] $26.1:rax 
  .loc 1 24 26
  # dump_file_path.2: @String = call(create_string_390, $26.1)
  mov rdi, rax
  call create_string_390
  # [discarded value]: $26.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:rax:[rbp-43] 
  .loc 1 25 13
  # $28.1: bool = call(ends_with_395, dump_file_path.2, ".ir")
  mov rdi, rax
  lea rsi, .LABEL__string_7[rip] # ".ir"
  mov [rbp-43], rax
  call ends_with_395
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $28.1:rax 
  .loc 1 25 13
  # $29.1: bool = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:rbx 
  # jump($29.1, .LABEL__main_1__10, .LABEL__main_1__9)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__main_1__9
.LABEL__main_1__10:
  .loc 1 26 13
  # $30.1: @FILE = call(write_383, stdout, "'")
  mov rdi, stdout[rip]
  lea rsi, .LABEL__string_3[rip] # "'"
  call write_383
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $30.1:rax 
  .loc 1 26 13
  # $31.1: @FILE = call(write_383, $30.1, dump_file_path.2)
  mov rdi, rax
  mov rsi, [rbp-43]
  call write_383
  # [discarded value]: $30.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $31.1:rax 
  .loc 1 26 13
  # $32.1: @FILE = call(write_383, $31.1, "' doesn't end with '.ir'.")
  mov rdi, rax
  lea rsi, .LABEL__string_8[rip] # "' doesn't end with '.ir'."
  call write_383
  # [discarded value]: $31.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] $32.1:rax 
  .loc 1 26 13
  # $33.1: @FILE = call(end_line_386, $32.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  .loc 1 27 13
  # call(exit, 1)
  mov rdi, 1
  call exit
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
.LABEL__main_1__9:
  # dump_file_path.4: @String = phi(dump_file_path.1, dump_file_path.2)
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] 
  .loc 1 31 5
  # call(init_matchers_300)
  call init_matchers_300
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] 
  .loc 1 33 28
  # compilation_unit.1: @Compilation_Unit = call(parse_250, source_file_path.1)
  mov rdi, [rbp-25]
  call parse_250
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] compilation_unit.1:rax 
  .loc 1 36 17
  # build.1: @IR_Build = call(build_63, compilation_unit.1)
  mov rdi, rax
  call build_63
  # [discarded value]: compilation_unit.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax 
  .loc 1 37 9
  # $36.1: bool = dump_file_path.4 != null
  cmp QWORD PTR [rbp-43], 0
  setne bl
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:rax $36.1:rbx 
  # jump($36.1, .LABEL__main_1__12, .LABEL__main_1__13)
  test bl, bl
  mov [rbp-53], rax
  mov [rbp-54], bl
  jz .LABEL__main_1__13
.LABEL__main_1__12:
  .loc 1 38 31
  # $37.1: [i8; ?] = load_struct_member(dump_file_path.4, data)
  mov rax, [rbp-43]
  mov rbx, [rax]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx 
  .loc 1 38 52
  # $38.1: [i8; ?] = load_struct_member("w", data)
  lea r15, .LABEL__string_9[rip] # "w"
  mov r14, [r15]
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:rax:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] $37.1:rbx $38.1:r14 
  .loc 1 38 25
  # dump_file.1: @FILE = call(fopen, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call fopen
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:rax 
  .loc 1 39 9
  # call(dump_64, build.1, dump_file.1)
  mov rdi, [rbp-53]
  mov rsi, rax
  mov [rbp-62], rax
  call dump_64
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] dump_file.1:[rbp-62] 
  .loc 1 40 9
  # $40.1: i32 = call(fclose, dump_file.1)
  mov rdi, [rbp-62]
  call fclose
  # [discarded value]: $40.1
  # [discarded value]: dump_file.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # jump(.LABEL__main_1__13)
.LABEL__main_1__13:
  .loc 1 43 5
  # call(generate_2, build.1, output_file_path.1)
  mov rdi, [rbp-53]
  mov rsi, [rbp-34]
  call generate_2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # return()
  jmp .LABEL__main_1__end
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] $36.1:[rbp-54] 
  # [discarded value]: $36.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] dump_file_path.4:[rbp-43] build.1:[rbp-53] 
  # [discarded value]: build.1
  # [discarded value]: dump_file_path.4
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] $29.1:[rbp-45] 
  # [discarded value]: $29.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] dump_file_path.2:[rbp-43] 
  # [discarded value]: dump_file_path.2
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] $25.1:[rbp-44] 
  # [discarded value]: $25.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] dump_file_path.1:[rbp-43] 
  # [discarded value]: dump_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] $20.1:[rbp-35] 
  # [discarded value]: $20.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] output_file_path.1:[rbp-34] 
  # [discarded value]: output_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] $12.1:[rbp-26] 
  # [discarded value]: $12.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] source_file_path.1:[rbp-25] 
  # [discarded value]: source_file_path.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: argc.1:[rbp-17] argv.1:[rbp-9] 
  # [discarded value]: argv.1
  # [discarded value]: argc.1
  # [live values]: 
.LABEL__main_1__end:
  mov rsp, rbp
  pop rbp
  xor rax, rax
  ret

main_1__stack_frame_size: .word 64

  .loc 2 3 8
  .text
generate_2:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_2__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_2__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: build.1:rdi output_file_path.1:rsi 
  .loc 2 4 21
  # generator.1: @MC_Generator = call(create_mc_generator_36, output_file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call create_mc_generator_36
  # [discarded value]: output_file_path.1
  # [live values]: build.1:[rbp-8] generator.1:rax 
  .loc 2 6 30
  # $2.1: @List = load_struct_member(build.1, sources)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax $2.1:r15 
  .loc 2 6 30
  # build_sources_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: build.1:rbx:[rbp-8] generator.1:rax build_sources_item.1:r14 
  # jump(.LABEL__generate_2__2)
  mov [rbp-16], rax
  mov [rbp-24], r14
.LABEL__generate_2__2:
  # build_sources_item.2: @List_Item = phi(build_sources_item.1, build_sources_item.4)
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  .loc 2 7 12
  # $4.1: bool = build_sources_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__generate_2__3, .LABEL__generate_2__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_2__4
.LABEL__generate_2__3:
  .loc 2 8 28
  # build_source.1: @Source = load_struct_member(build_sources_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx 
  .loc 2 9 9
  # $7.1: @FILE = load_struct_member(generator.1, output_file)
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: build.1:[rbp-8] generator.1:r15:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:rax:[rbp-24] $4.1:[rbp-25] build_source.1:rbx $7.1:r14 
  .loc 2 9 9
  # $8.1: @FILE = call(write_383, $7.1, "  .file ")
  mov rdi, r14
  lea rsi, .LABEL__string_10[rip] # "  .file "
  mov [rbp-33], rbx
  call write_383
  # [discarded value]: $7.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $8.1:rax 
  .loc 2 9 55
  # $9.1: isize = load_struct_member(build_source.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:rbx:[rbp-33] $8.1:rax $9.1:r15 
  .loc 2 9 9
  # $10.1: @FILE = call(write_382, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $10.1:rax 
  .loc 2 9 9
  # $11.1: @FILE = call(write_383, $10.1, " \"")
  mov rdi, rax
  lea rsi, .LABEL__string_11[rip] # " \""
  call write_383
  # [discarded value]: $10.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_source.1:[rbp-33] $11.1:rax 
  .loc 2 9 91
  # $12.1: @String = load_struct_member(build_source.1, file_path)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: build_source.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $11.1:rax $12.1:r15 
  .loc 2 9 9
  # $13.1: @FILE = call(write_383, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $13.1:rax 
  .loc 2 9 9
  # $14.1: @FILE = call(write_383, $13.1, "\"")
  mov rdi, rax
  lea rsi, .LABEL__string_12[rip] # "\""
  call write_383
  # [discarded value]: $13.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $14.1:rax 
  .loc 2 9 9
  # $15.1: @FILE = call(end_line_386, $14.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 10 30
  # build_sources_item.4: @List_Item = load_struct_member(build_sources_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:rbx:[rbp-24] 
  # jump(.LABEL__generate_2__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_2__2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] build_sources_item.4:[rbp-24] 
  # [discarded value]: build_sources_item.4
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_2__4:
  .loc 2 13 5
  # $17.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $17.1:rbx 
  .loc 2 13 5
  # $18.1: @FILE = call(write_line_381, $17.1, "  .intel_syntax noprefix")
  mov rdi, rbx
  lea rsi, .LABEL__string_13[rip] # "  .intel_syntax noprefix"
  call write_line_381
  # [discarded value]: $17.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $18.1:rax 
  .loc 2 13 5
  # $19.1: @FILE = call(end_line_386, $18.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 15 41
  # $20.1: @List = load_struct_member(build.1, global_variables)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $20.1:rbx 
  .loc 2 15 5
  # call(generate_global_variables_62, generator.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_global_variables_62
  # [discarded value]: $20.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  .loc 2 17 21
  # $21.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] $21.1:rbx 
  .loc 2 17 21
  # functions.1: @List_Iterator = call(create_iterator_375, $21.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $21.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:rax 
  # jump(.LABEL__generate_2__5)
  mov [rbp-33], rax
.LABEL__generate_2__5:
  .loc 2 18 12
  # $23.1: bool = call(has_next_378, functions.1)
  mov rdi, [rbp-33]
  call has_next_378
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:rax 
  # jump($23.1, .LABEL__generate_2__6, .LABEL__generate_2__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_2__7
.LABEL__generate_2__6:
  .loc 2 19 24
  # function.1: @IR_Function = call(next_379, functions.1)
  mov rdi, [rbp-33]
  call next_379
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax 
  .loc 2 20 13
  # $26.1: bool = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax $26.1:rbx 
  .loc 2 20 13
  # $27.1: bool = $26.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $26.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:rax $27.1:r15 
  # jump($27.1, .LABEL__generate_2__8, .LABEL__generate_2__5)
  test r15b, r15b
  mov [rbp-42], rax
  mov [rbp-43], r15b
  jz .LABEL__generate_2__5
.LABEL__generate_2__8:
  .loc 2 21 13
  # call(generate_function_3, generator.1, function.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  call generate_function_3
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] $27.1:[rbp-43] 
  # jump(.LABEL__generate_2__5)
  jmp .LABEL__generate_2__5
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] $27.1:[rbp-43] 
  # [discarded value]: $27.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] function.1:[rbp-42] 
  # [discarded value]: function.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
.LABEL__generate_2__7:
  .loc 2 25 5
  # call(generate_strings_58, generator.1)
  mov rdi, [rbp-16]
  call generate_strings_58
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  .loc 2 27 37
  # $28.1: @List = load_struct_member(build.1, named_types)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: build.1:rax:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] $28.1:rbx 
  .loc 2 27 5
  # call(generate_object_types_60, generator.1, $28.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_object_types_60
  # [discarded value]: $28.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  .loc 2 29 5
  # $29.1: @FILE = load_struct_member(generator.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: build.1:[rbp-8] generator.1:rax:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] $29.1:rbx 
  .loc 2 29 5
  # $30.1: i32 = call(fclose, $29.1)
  mov rdi, rbx
  call fclose
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  # return()
  jmp .LABEL__generate_2__end
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] $23.1:[rbp-34] 
  # [discarded value]: $23.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] functions.1:[rbp-33] 
  # [discarded value]: functions.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] build_sources_item.2:[rbp-24] 
  # [discarded value]: build_sources_item.2
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [live values]: build.1:[rbp-8] generator.1:[rbp-16] build_sources_item.1:[rbp-24] 
  # [discarded value]: build_sources_item.1
  # [discarded value]: generator.1
  # [discarded value]: build.1
  # [live values]: 
.LABEL__generate_2__end:
  mov rsp, rbp
  pop rbp
  ret

generate_2__stack_frame_size: .word 48

  .loc 2 32 8
  .text
generate_function_3:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_function_3__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_function_3__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 2 33 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi function.1:rsi $1.1:rax 
  .loc 2 33 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_386
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 34 5
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $3.1:rbx 
  .loc 2 34 5
  # $4.1: @FILE = call(write_383, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_383
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $4.1:rax 
  .loc 2 34 45
  # $5.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  .loc 2 34 45
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $6.1:r14 
  .loc 2 34 45
  # $7.1: isize = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $4.1:rax $7.1:r15 
  .loc 2 34 5
  # $8.1: @FILE = call(write_382, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $8.1:rax 
  .loc 2 34 5
  # $9.1: @FILE = call(write_385, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $9.1:rax 
  .loc 2 34 91
  # $10.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $10.1:r15 
  .loc 2 34 91
  # $11.1: isize = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $9.1:rax $11.1:r14 
  .loc 2 34 5
  # $12.1: @FILE = call(write_382, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $12.1:rax 
  .loc 2 34 5
  # $13.1: @FILE = call(write_385, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $13.1:rax 
  .loc 2 34 132
  # $14.1: @Source_Location = load_struct_member(function.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $14.1:r15 
  .loc 2 34 132
  # $15.1: isize = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] function.1:rbx:[rbp-16] $13.1:rax $15.1:r14 
  .loc 2 34 5
  # $16.1: @FILE = call(write_382, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $16.1:rax 
  .loc 2 34 5
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 35 5
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $18.1:rbx 
  .loc 2 35 5
  # $19.1: @FILE = call(write_383, $18.1, "  .text")
  mov rdi, rbx
  lea rsi, .LABEL__string_15[rip] # "  .text"
  call write_383
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $19.1:rax 
  .loc 2 35 5
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  .loc 2 36 9
  # $21.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $21.1:rbx 
  .loc 2 36 9
  # $22.1: bool = call(equals_392, $21.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_392
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:rax 
  # jump($22.1, .LABEL__generate_function_3__2, .LABEL__generate_function_3__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_function_3__3
.LABEL__generate_function_3__2:
  .loc 2 37 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $23.1:rbx 
  .loc 2 37 9
  # $24.1: @FILE = call(write_383, $23.1, "  .globl main")
  mov rdi, rbx
  lea rsi, .LABEL__string_17[rip] # "  .globl main"
  call write_383
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $24.1:rax 
  .loc 2 37 9
  # $25.1: @FILE = call(end_line_386, $24.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 38 9
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $26.1:rbx 
  .loc 2 38 9
  # $27.1: @FILE = call(write_383, $26.1, "main:")
  mov rdi, rbx
  lea rsi, .LABEL__string_18[rip] # "main:"
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $27.1:rax 
  .loc 2 38 9
  # $28.1: @FILE = call(end_line_386, $27.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # jump(.LABEL__generate_function_3__3)
.LABEL__generate_function_3__3:
  .loc 2 40 5
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $29.1:rbx 
  .loc 2 40 5
  # $30.1: @FILE = call(write_function_label_4, $29.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $30.1:rax 
  .loc 2 40 5
  # $31.1: @FILE = call(write_385, $30.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $31.1:rax 
  .loc 2 40 5
  # $32.1: @FILE = call(end_line_386, $31.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 41 5
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $33.1:rbx 
  .loc 2 41 5
  # $34.1: @FILE = call(write_383, $33.1, "  push rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_19[rip] # "  push rbp"
  call write_383
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $34.1:rax 
  .loc 2 41 5
  # $35.1: @FILE = call(end_line_386, $34.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 42 5
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $36.1:rbx 
  .loc 2 42 5
  # $37.1: @FILE = call(write_383, $36.1, "  mov rbp, rsp")
  mov rdi, rbx
  lea rsi, .LABEL__string_20[rip] # "  mov rbp, rsp"
  call write_383
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $37.1:rax 
  .loc 2 42 5
  # $38.1: @FILE = call(end_line_386, $37.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 43 5
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $39.1:rbx 
  .loc 2 43 5
  # $40.1: @FILE = call(write_383, $39.1, "  movsx rax, WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_21[rip] # "  movsx rax, WORD PTR "
  call write_383
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $40.1:rax 
  .loc 2 43 5
  # $41.1: @FILE = call(write_function_label_4, $40.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $41.1:rax 
  .loc 2 43 5
  # $42.1: @FILE = call(write_383, $41.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_383
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $42.1:rax 
  .loc 2 43 5
  # $43.1: @FILE = call(write_383, $42.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_383
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $43.1:rax 
  .loc 2 43 5
  # $44.1: @FILE = call(end_line_386, $43.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 44 5
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $45.1:rbx 
  .loc 2 44 5
  # $46.1: @FILE = call(write_383, $45.1, "  sub rsp, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_24[rip] # "  sub rsp, rax"
  call write_383
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] $46.1:rax 
  .loc 2 44 5
  # $47.1: @FILE = call(end_line_386, $46.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  .loc 2 46 18
  # $48.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] $48.1:rbx 
  .loc 2 46 18
  # blocks.1: @List_Iterator = call(create_iterator_375, $48.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:rax 
  # jump(.LABEL__generate_function_3__4)
  mov [rbp-25], rax
.LABEL__generate_function_3__4:
  .loc 2 47 12
  # $50.1: bool = call(has_next_378, blocks.1)
  mov rdi, [rbp-25]
  call has_next_378
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:rax 
  # jump($50.1, .LABEL__generate_function_3__5, .LABEL__generate_function_3__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_function_3__6
.LABEL__generate_function_3__5:
  .loc 2 48 21
  # block.1: @IR_Block = call(next_379, blocks.1)
  mov rdi, [rbp-25]
  call next_379
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block.1:rax 
  .loc 2 49 33
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:rbx 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
.LABEL__generate_function_3__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 2 50 16
  # $54.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:rax 
  # jump($54.1, .LABEL__generate_function_3__8, .LABEL__generate_function_3__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_function_3__4
.LABEL__generate_function_3__8:
  .loc 2 51 17
  # $55.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $55.1:rbx 
  .loc 2 51 17
  # $56.1: bool = $55.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $54.1:[rbp-35] $56.1:r15 
  # jump($56.1, .LABEL__generate_function_3__10, .LABEL__generate_function_3__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_function_3__11
.LABEL__generate_function_3__10:
  .loc 2 52 17
  # call(create_mc_value_39, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  call create_mc_value_39
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_function_3__11)
.LABEL__generate_function_3__11:
  .loc 2 54 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:rbx:[rbp-34] 
  # jump(.LABEL__generate_function_3__7)
  mov [rbp-34], rbx
  jmp .LABEL__generate_function_3__7
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] block_instruction.6:[rbp-34] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] $56.1:[rbp-36] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $54.1:[rbp-35] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
.LABEL__generate_function_3__6:
  .loc 2 58 25
  # $58.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-16]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $58.1:rbx 
  .loc 2 58 25
  # $60.1: @IR_Block = call(first_373, $58.1)
  mov rdi, rbx
  call first_373
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $60.1:rax 
  .loc 2 58 5
  # call(generate_block_7, self.1, $60.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call generate_block_7
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 60 5
  # call(output_unreached_ir_instructions_6, self.1)
  mov rdi, [rbp-8]
  call output_unreached_ir_instructions_6
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 62 5
  # $61.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $61.1:rbx 
  .loc 2 62 5
  # $62.1: @FILE = call(write_function_end_label_5, $61.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_end_label_5
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $62.1:rax 
  .loc 2 62 5
  # $63.1: @FILE = call(write_383, $62.1, ":")
  mov rdi, rax
  lea rsi, .LABEL__string_25[rip] # ":"
  call write_383
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $63.1:rax 
  .loc 2 62 5
  # $64.1: @FILE = call(end_line_386, $63.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 63 5
  # $65.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $65.1:rbx 
  .loc 2 63 5
  # $66.1: @FILE = call(write_383, $65.1, "  mov rsp, rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_26[rip] # "  mov rsp, rbp"
  call write_383
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $66.1:rax 
  .loc 2 63 5
  # $67.1: @FILE = call(end_line_386, $66.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 64 5
  # $68.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $68.1:rbx 
  .loc 2 64 5
  # $69.1: @FILE = call(write_383, $68.1, "  pop rbp")
  mov rdi, rbx
  lea rsi, .LABEL__string_27[rip] # "  pop rbp"
  call write_383
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $69.1:rax 
  .loc 2 64 5
  # $70.1: @FILE = call(end_line_386, $69.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  .loc 2 65 9
  # $71.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $71.1:rbx 
  .loc 2 65 9
  # $73.1: bool = call(equals_392, $71.1, "main")
  mov rdi, rbx
  lea rsi, .LABEL__string_16[rip] # "main"
  call equals_392
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:rax 
  # jump($73.1, .LABEL__generate_function_3__12, .LABEL__generate_function_3__13)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_function_3__13
.LABEL__generate_function_3__12:
  .loc 2 65 41
  # $74.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] function.1:rax:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $74.1:rbx 
  .loc 2 65 41
  # $73.2: bool = call(is_389, $74.1, IR_Nothing_Type)
  mov rdi, rbx
  mov rsi, IR_Nothing_Type[rip]
  call is_389
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:rax:[rbp-27] 
  # jump(.LABEL__generate_function_3__13)
  mov [rbp-27], al
.LABEL__generate_function_3__13:
  .loc 2 65 9
  # $73.3: bool = phi($73.1, $73.2)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump($73.3, .LABEL__generate_function_3__14, .LABEL__generate_function_3__15)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_function_3__15
.LABEL__generate_function_3__14:
  .loc 2 66 9
  # $76.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $76.1:rbx 
  .loc 2 66 9
  # $77.1: @FILE = call(write_383, $76.1, "  xor rax, rax")
  mov rdi, rbx
  lea rsi, .LABEL__string_28[rip] # "  xor rax, rax"
  call write_383
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $77.1:rax 
  .loc 2 66 9
  # $78.1: @FILE = call(end_line_386, $77.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $78.1
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # jump(.LABEL__generate_function_3__15)
.LABEL__generate_function_3__15:
  .loc 2 68 5
  # $79.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $79.1:rbx 
  .loc 2 68 5
  # $80.1: @FILE = call(write_383, $79.1, "  ret")
  mov rdi, rbx
  lea rsi, .LABEL__string_29[rip] # "  ret"
  call write_383
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $80.1:rax 
  .loc 2 68 5
  # $81.1: @FILE = call(end_line_386, $80.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] $81.1:rax 
  .loc 2 68 5
  # $82.1: @FILE = call(end_line_386, $81.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  .loc 2 70 28
  # stack_frame_size.1: isize = load_struct_member(self.1, stack_frame_size)
  mov rax, [rbp-8]
  mov rbx, [rax+161]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx 
  .loc 2 71 9
  # $84.1: isize = stack_frame_size.1 // 16
  mov rax, rbx
  cqo
  mov r15, 16
  idiv r15
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $84.1:rdx 
  .loc 2 71 9
  # $85.1: bool = $84.1 != 0
  cmp rdx, 0
  setne al
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:rbx $85.1:rax 
  # jump($85.1, .LABEL__generate_function_3__16, .LABEL__generate_function_3__17)
  test al, al
  mov [rbp-28], al
  mov [rbp-36], rbx
  jz .LABEL__generate_function_3__17
.LABEL__generate_function_3__16:
  .loc 2 72 28
  # $86.1: isize = stack_frame_size.1 + 16
  mov rax, [rbp-36]
  add rax, 16
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:rax 
  .loc 2 72 52
  # $87.1: isize = stack_frame_size.1 // 16
  mov [rbp-44], rax
  mov rax, [rbp-36]
  cqo
  mov rbx, 16
  idiv rbx
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $86.1:[rbp-44] $87.1:rdx 
  .loc 2 72 28
  # $88.1: isize = $86.1 - $87.1
  mov rax, [rbp-44]
  sub rax, rdx
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] $88.1:rax 
  .loc 2 72 9
  # stack_frame_size.3: isize = $88.1
  mov [rbp-44], rax
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:rax:[rbp-36] 
  # jump(.LABEL__generate_function_3__17)
  mov [rbp-36], rax
.LABEL__generate_function_3__17:
  # stack_frame_size.4: isize = phi(stack_frame_size.1, stack_frame_size.3)
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] 
  .loc 2 74 5
  # $89.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $89.1:rbx 
  .loc 2 74 5
  # $90.1: @FILE = call(write_function_label_4, $89.1, function.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call write_function_label_4
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $90.1:rax 
  .loc 2 74 5
  # $91.1: @FILE = call(write_383, $90.1, "__stack_frame_size")
  mov rdi, rax
  lea rsi, .LABEL__string_22[rip] # "__stack_frame_size"
  call write_383
  # [discarded value]: $90.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $91.1:rax 
  .loc 2 74 5
  # $92.1: @FILE = call(write_383, $91.1, ": .word ")
  mov rdi, rax
  lea rsi, .LABEL__string_30[rip] # ": .word "
  call write_383
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] stack_frame_size.4:[rbp-36] $92.1:rax 
  .loc 2 74 5
  # $93.1: @FILE = call(write_382, $92.1, stack_frame_size.4)
  mov rdi, rax
  mov rsi, [rbp-36]
  call write_382
  # [discarded value]: $92.1
  # [discarded value]: stack_frame_size.4
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] $93.1:rax 
  .loc 2 74 5
  # $94.1: @FILE = call(end_line_386, $93.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $94.1
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  .loc 2 76 5
  # call(reset_37, self.1)
  mov rdi, [rbp-8]
  call reset_37
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # return()
  jmp .LABEL__generate_function_3__end
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] stack_frame_size.3:[rbp-36] 
  # [discarded value]: stack_frame_size.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] $85.1:[rbp-28] 
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] stack_frame_size.1:[rbp-36] 
  # [discarded value]: stack_frame_size.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] $73.3:[rbp-27] 
  # [discarded value]: $73.3
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] $73.2:[rbp-27] 
  # [discarded value]: $73.2
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] $73.1:[rbp-27] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] $50.1:[rbp-26] 
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] blocks.1:[rbp-25] 
  # [discarded value]: blocks.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] $22.1:[rbp-17] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] function.1:[rbp-16] 
  # [discarded value]: function.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_function_3__end:
  mov rsp, rbp
  pop rbp
  ret

generate_function_3__stack_frame_size: .word 48

  .loc 2 79 8
  .text
write_function_label_4:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_label_4__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_label_4__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 80 16
  # $1.1: @String = load_struct_member(function.1, name)
  mov rax, [rsi+24]
  # [live values]: file.1:rdi function.1:rsi $1.1:rax 
  .loc 2 80 5
  # $2.1: @FILE = call(write_383, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call write_383
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  .loc 2 81 9
  # $3.1: bool = load_struct_member(function.1, is_external)
  mov rax, [rbp-8]
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 81 9
  # $4.1: bool = $3.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-16] function.1:rax:[rbp-8] $4.1:r15 
  # jump($4.1, .LABEL__write_function_label_4__2, .LABEL__write_function_label_4__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__write_function_label_4__3
.LABEL__write_function_label_4__2:
  .loc 2 82 9
  # $5.1: @FILE = call(write_385, file.1, '_')
  mov rdi, [rbp-16]
  mov sil, 95
  call write_385
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] $5.1:rax 
  .loc 2 82 31
  # $6.1: isize = load_struct_member(function.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-16] function.1:rbx:[rbp-8] $4.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 82 9
  # $7.1: @FILE = call(write_382, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # jump(.LABEL__write_function_label_4__3)
.LABEL__write_function_label_4__3:
  .loc 2 84 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__write_function_label_4__end
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] function.1:[rbp-8] 
  # [discarded value]: function.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_function_label_4__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_label_4__stack_frame_size: .word 32

  .loc 2 87 8
  .text
write_function_end_label_5:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_function_end_label_5__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_function_end_label_5__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: file.1:rdi function.1:rsi 
  .loc 2 88 12
  # $1.1: @FILE = call(write_383, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_383
  # [discarded value]: file.1
  # [live values]: function.1:[rbp-8] $1.1:rax 
  .loc 2 88 12
  # $2.1: @FILE = call(write_function_label_4, $1.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_function_label_4
  # [discarded value]: $1.1
  # [discarded value]: function.1
  # [live values]: $2.1:rax 
  .loc 2 88 12
  # $3.1: @FILE = call(write_383, $2.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_383
  # [discarded value]: $2.1
  # [live values]: $3.1:rax 
  .loc 2 88 12
  # $4.1: @FILE = call(write_383, $3.1, "end")
  mov rdi, rax
  lea rsi, .LABEL__string_33[rip] # "end"
  call write_383
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 2 88 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__write_function_end_label_5__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__write_function_end_label_5__end:
  mov rsp, rbp
  pop rbp
  ret

write_function_end_label_5__stack_frame_size: .word 16

  .loc 2 91 8
  .text
output_unreached_ir_instructions_6:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_unreached_ir_instructions_6__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_unreached_ir_instructions_6__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 92 9
  # $1.1: bool = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 92 9
  # $2.1: bool = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__output_unreached_ir_instructions_6__2, .LABEL__output_unreached_ir_instructions_6__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__output_unreached_ir_instructions_6__3
.LABEL__output_unreached_ir_instructions_6__2:
  .loc 2 93 9
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_unreached_ir_instructions_6__3:
  .loc 2 95 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-9]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
.LABEL__output_unreached_ir_instructions_6__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  .loc 2 96 12
  # $4.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__output_unreached_ir_instructions_6__6, .LABEL__output_unreached_ir_instructions_6__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__output_unreached_ir_instructions_6__7
.LABEL__output_unreached_ir_instructions_6__6:
  .loc 2 97 35
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-17]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 2 97 35
  # $6.1: @List = load_struct_member($5.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] $6.1:r15 
  .loc 2 97 35
  # ir_instruction_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:rax:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:rbx 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
.LABEL__output_unreached_ir_instructions_6__8:
  # ir_instruction_item.2: @List_Item = phi(ir_instruction_item.1, ir_instruction_item.5)
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  .loc 2 98 16
  # $8.1: bool = ir_instruction_item.2 != null
  cmp QWORD PTR [rbp-26], 0
  setne al
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:rax 
  # jump($8.1, .LABEL__output_unreached_ir_instructions_6__9, .LABEL__output_unreached_ir_instructions_6__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__output_unreached_ir_instructions_6__10
.LABEL__output_unreached_ir_instructions_6__9:
  .loc 2 99 34
  # ir_instruction.1: @IR_Instruction = load_struct_member(ir_instruction_item.2, data)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx 
  .loc 2 100 17
  # $11.1: bool = load_struct_member(ir_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $11.1:r15 
  .loc 2 100 17
  # $12.1: bool = $11.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:rax:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__output_unreached_ir_instructions_6__11, .LABEL__output_unreached_ir_instructions_6__12)
  test r14b, r14b
  mov [rbp-35], rbx
  mov [rbp-36], r14b
  jz .LABEL__output_unreached_ir_instructions_6__12
.LABEL__output_unreached_ir_instructions_6__11:
  .loc 2 101 17
  # $13.1: func (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(ir_instruction.1, dump)
  mov rax, [rbp-35]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx 
  .loc 2 101 37
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:rax:[rbp-35] $12.1:[rbp-36] $13.1:rbx $14.1:r14 
  .loc 2 101 17
  # $15.1: @FILE = call($13.1, ir_instruction.1, $14.1, "  # [unreachable instruction]: ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_34[rip] # "  # [unreachable instruction]: "
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # jump(.LABEL__output_unreached_ir_instructions_6__12)
.LABEL__output_unreached_ir_instructions_6__12:
  .loc 2 103 35
  # ir_instruction_item.5: @List_Item = load_struct_member(ir_instruction_item.2, next_item)
  mov rax, [rbp-26]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:rbx:[rbp-26] 
  # jump(.LABEL__output_unreached_ir_instructions_6__8)
  mov [rbp-26], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__8
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] ir_instruction_item.5:[rbp-26] 
  # [discarded value]: ir_instruction_item.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] $12.1:[rbp-36] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] ir_instruction.1:[rbp-35] 
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
.LABEL__output_unreached_ir_instructions_6__10:
  .loc 2 105 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:rbx:[rbp-17] 
  # jump(.LABEL__output_unreached_ir_instructions_6__5)
  mov [rbp-17], rbx
  jmp .LABEL__output_unreached_ir_instructions_6__5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] mc_value.5:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] ir_instruction_item.2:[rbp-26] 
  # [discarded value]: ir_instruction_item.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] ir_instruction_item.1:[rbp-26] 
  # [discarded value]: ir_instruction_item.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
.LABEL__output_unreached_ir_instructions_6__7:
  # return()
  jmp .LABEL__output_unreached_ir_instructions_6__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] mc_value.2:[rbp-17] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-17] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_unreached_ir_instructions_6__end:
  mov rsp, rbp
  pop rbp
  ret

output_unreached_ir_instructions_6__stack_frame_size: .word 48

  .loc 2 109 8
  .text
generate_block_7:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_block_7__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_block_7__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 110 5
  # store_struct_member(block.1, is_being_generated, true)
  mov BYTE PTR [rsi+48], 1
  # [live values]: self.1:rdi block.1:rsi 
  .loc 2 111 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi block.1:rsi $1.1:rax 
  .loc 2 111 5
  # $2.1: @FILE = call(write_block_label_8, $1.1, block.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call write_block_label_8
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $2.1:rax 
  .loc 2 111 5
  # $3.1: @FILE = call(write_385, $2.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] $3.1:rax 
  .loc 2 111 5
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] 
  .loc 2 112 29
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:rbx 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
.LABEL__generate_block_7__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.8)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  .loc 2 113 12
  # $6.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__generate_block_7__3, .LABEL__generate_block_7__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_block_7__4
.LABEL__generate_block_7__3:
  .loc 2 114 9
  # call(generate_instruction_9, self.1, block_instruction.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call generate_instruction_9
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  .loc 2 115 13
  # $7.1: bool = call(is_389, block_instruction.2, IR_Load_Variable_Instruction)
  mov rdi, [rbp-24]
  mov rsi, IR_Load_Variable_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $7.1:rax 
  .loc 2 115 13
  # $8.1: bool = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $8.1:rbx 
  .loc 2 115 13
  # $9.1: bool = $8.1
  mov [rbp-26], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:rbx 
  # jump($9.1, .LABEL__generate_block_7__7, .LABEL__generate_block_7__8)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__8
.LABEL__generate_block_7__7:
  .loc 2 115 76
  # $10.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $10.1:rbx 
  .loc 2 115 76
  # $11.1: bool = $10.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $11.1:r15 
  .loc 2 115 13
  # $9.2: bool = $11.1
  mov [rbp-27], r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:r15:[rbp-26] 
  # jump(.LABEL__generate_block_7__8)
  mov [rbp-26], r15b
.LABEL__generate_block_7__8:
  .loc 2 115 13
  # $12.1: bool = phi($9.1, $9.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:rax 
  # jump($12.1, .LABEL__generate_block_7__5, .LABEL__generate_block_7__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_block_7__6
.LABEL__generate_block_7__5:
  .loc 2 115 118
  # $13.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $13.1:rbx $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 115 118
  # $14.1: @IR_Variable = load_struct_member($13.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $14.1:r15 $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 115 118
  # $12.2: bool = call(is_389, $14.1, IR_Global_Variable)
  mov rdi, r15
  mov rsi, IR_Global_Variable[rip]
  call is_389
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:rax:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__6)
  mov [rbp-27], al
.LABEL__generate_block_7__6:
  .loc 2 115 13
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump($12.3, .LABEL__generate_block_7__9, .LABEL__generate_block_7__10)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__generate_block_7__10
.LABEL__generate_block_7__9:
  .loc 2 116 55
  # $16.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:rax:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $16.1:rbx 
  .loc 2 116 40
  # $17.1: @MC_Value = call(get_value_42, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] $17.1:rax 
  .loc 2 116 13
  # call(spill_global_variable_45, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call spill_global_variable_45
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_block_7__10)
.LABEL__generate_block_7__10:
  .loc 2 118 9
  # $18.1: isize = call(discard_used_values_48, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_48
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 119 9
  # call(output_live_values_50, self.1)
  mov rdi, [rbp-8]
  call output_live_values_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 120 9
  # call(output_used_registers_52, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_52
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  .loc 2 121 29
  # block_instruction.8: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-24]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:rbx:[rbp-24] 
  # jump(.LABEL__generate_block_7__2)
  mov [rbp-24], rbx
  jmp .LABEL__generate_block_7__2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] block_instruction.8:[rbp-24] 
  # [discarded value]: block_instruction.8
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $12.3:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $12.2:[rbp-27] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $9.2:[rbp-26] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
.LABEL__generate_block_7__4:
  .loc 2 123 5
  # store_struct_member(block.1, is_generated, true)
  mov rax, [rbp-16]
  mov BYTE PTR [rax+49], 1
  # [live values]: self.1:[rbp-8] block.1:rax:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  .loc 2 124 9
  # $20.1: isize = call(discard_used_values_48, self.1)
  mov rdi, [rbp-8]
  call discard_used_values_48
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $20.1:rax 
  .loc 2 124 9
  # $21.1: bool = $20.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:rbx 
  # jump($21.1, .LABEL__generate_block_7__11, .LABEL__generate_block_7__12)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_block_7__12
.LABEL__generate_block_7__11:
  .loc 2 125 9
  # call(output_live_values_50, self.1)
  mov rdi, [rbp-8]
  call output_live_values_50
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  .loc 2 126 9
  # call(output_used_registers_52, self.1)
  mov rdi, [rbp-8]
  call output_used_registers_52
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # jump(.LABEL__generate_block_7__12)
.LABEL__generate_block_7__12:
  # return()
  jmp .LABEL__generate_block_7__end
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] $21.1:[rbp-26] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] block_instruction.2:[rbp-24] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [live values]: self.1:[rbp-8] block.1:[rbp-16] block_instruction.1:[rbp-24] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_block_7__end:
  mov rsp, rbp
  pop rbp
  ret

generate_block_7__stack_frame_size: .word 32

  .loc 2 130 8
  .text
write_block_label_8:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_block_label_8__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_block_label_8__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: file.1:rdi block.1:rsi 
  .loc 2 131 12
  # $1.1: @FILE = call(write_383, file.1, ".LABEL__")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_383
  # [discarded value]: file.1
  # [live values]: block.1:[rbp-8] $1.1:rax 
  .loc 2 131 41
  # $2.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $2.1:r15 
  .loc 2 131 41
  # $3.1: @String = load_struct_member($2.1, name)
  mov r14, [r15+24]
  # [discarded value]: $2.1
  # [live values]: block.1:rbx:[rbp-8] $1.1:rax $3.1:r14 
  .loc 2 131 12
  # $4.1: @FILE = call(write_383, $1.1, $3.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] $4.1:rax 
  .loc 2 131 12
  # $5.1: @FILE = call(write_385, $4.1, '_')
  mov rdi, rax
  mov sil, 95
  call write_385
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] $5.1:rax 
  .loc 2 131 79
  # $6.1: @IR_Function = load_struct_member(block.1, function)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $6.1:r15 
  .loc 2 131 79
  # $7.1: isize = load_struct_member($6.1, id)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: block.1:rbx:[rbp-8] $5.1:rax $7.1:r14 
  .loc 2 131 12
  # $8.1: @FILE = call(write_382, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: block.1:[rbp-8] $8.1:rax 
  .loc 2 131 12
  # $9.1: @FILE = call(write_383, $8.1, "__")
  mov rdi, rax
  lea rsi, .LABEL__string_32[rip] # "__"
  call write_383
  # [discarded value]: $8.1
  # [live values]: block.1:[rbp-8] $9.1:rax 
  .loc 2 131 116
  # $10.1: isize = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [discarded value]: block.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 2 131 12
  # $11.1: @FILE = call(write_382, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 2 131 5
  # return($11.1)
  mov [rbp-8], rax
  jmp .LABEL__write_block_label_8__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__write_block_label_8__end:
  mov rsp, rbp
  pop rbp
  ret

write_block_label_8__stack_frame_size: .word 16

  .loc 2 134 8
  .text
generate_instruction_9:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_instruction_9__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_instruction_9__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 135 9
  # $1.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 135 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_instruction_9__2, .LABEL__generate_instruction_9__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_instruction_9__3
.LABEL__generate_instruction_9__2:
  .loc 2 136 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 136 9
  # $4.1: @FILE = call(write_383, $3.1, "  .loc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_14[rip] # "  .loc "
  call write_383
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  .loc 2 136 49
  # $5.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $5.1:r15 
  .loc 2 136 49
  # $6.1: @Source = load_struct_member($5.1, source)
  mov r14, [r15]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $6.1:r14 
  .loc 2 136 49
  # $7.1: isize = load_struct_member($6.1, id)
  mov r15, [r14]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $4.1:rax $7.1:r15 
  .loc 2 136 9
  # $8.1: @FILE = call(write_382, $4.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $8.1:rax 
  .loc 2 136 9
  # $9.1: @FILE = call(write_385, $8.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $9.1:rax 
  .loc 2 136 98
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 2 136 98
  # $11.1: isize = load_struct_member($10.1, line)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $9.1:rax $11.1:r14 
  .loc 2 136 9
  # $12.1: @FILE = call(write_382, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 136 9
  # $13.1: @FILE = call(write_385, $12.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $13.1:rax 
  .loc 2 136 142
  # $14.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $14.1:r15 
  .loc 2 136 142
  # $15.1: isize = load_struct_member($14.1, column)
  mov r14, [r15+16]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $13.1:rax $15.1:r14 
  .loc 2 136 9
  # $16.1: @FILE = call(write_382, $13.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 136 9
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__generate_instruction_9__3)
.LABEL__generate_instruction_9__3:
  .loc 2 138 9
  # $18.1: bool = load_struct_member(self.1, output_debug_comments)
  mov rax, [rbp-17]
  mov bl, [rax+16]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:rbx 
  # jump($18.1, .LABEL__generate_instruction_9__4, .LABEL__generate_instruction_9__5)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__generate_instruction_9__5
.LABEL__generate_instruction_9__4:
  .loc 2 139 9
  # $19.1: func (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(instruction.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx 
  .loc 2 139 26
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-17]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $19.1:rbx $20.1:r14 
  .loc 2 139 9
  # $21.1: @FILE = call($19.1, instruction.1, $20.1, "  # ")
  mov rdi, rax
  mov rsi, r14
  lea rdx, .LABEL__string_35[rip] # "  # "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # jump(.LABEL__generate_instruction_9__5)
.LABEL__generate_instruction_9__5:
  .loc 2 141 9
  # $22.1: bool = call(is_389, instruction.1, IR_Add_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Add_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:rax 
  # jump($22.1, .LABEL__generate_instruction_9__6, .LABEL__generate_instruction_9__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__generate_instruction_9__8
.LABEL__generate_instruction_9__6:
  .loc 2 142 39
  # $65.1: @IR_Add_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $65.1:rax 
  .loc 2 142 9
  # call(generate_add_instruction_10, self.1, $65.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_add_instruction_10
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # jump(.LABEL__generate_instruction_9__7)
.LABEL__generate_instruction_9__7:
  .loc 2 184 5
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # return()
  jmp .LABEL__generate_instruction_9__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
.LABEL__generate_instruction_9__8:
  .loc 2 143 16
  # $23.1: bool = call(is_389, instruction.1, IR_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Call_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:rax 
  # jump($23.1, .LABEL__generate_instruction_9__9, .LABEL__generate_instruction_9__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__generate_instruction_9__11
.LABEL__generate_instruction_9__9:
  .loc 2 144 40
  # $64.1: @IR_Call_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $64.1:rax 
  .loc 2 144 9
  # call(generate_call_instruction_11, self.1, $64.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_call_instruction_11
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
.LABEL__generate_instruction_9__11:
  .loc 2 145 16
  # $24.1: bool = call(is_389, instruction.1, IR_Cast_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Cast_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:rax 
  # jump($24.1, .LABEL__generate_instruction_9__12, .LABEL__generate_instruction_9__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__generate_instruction_9__14
.LABEL__generate_instruction_9__12:
  .loc 2 146 40
  # $63.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $63.1:rax 
  .loc 2 146 9
  # call(generate_cast_instruction_12, self.1, $63.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_cast_instruction_12
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
.LABEL__generate_instruction_9__14:
  .loc 2 147 16
  # $25.1: bool = call(is_389, instruction.1, IR_Conditional_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Conditional_Jump_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:rax 
  # jump($25.1, .LABEL__generate_instruction_9__15, .LABEL__generate_instruction_9__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__generate_instruction_9__17
.LABEL__generate_instruction_9__15:
  .loc 2 148 52
  # $62.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $62.1:rax 
  .loc 2 148 9
  # call(generate_conditional_jump_instruction_13, self.1, $62.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_conditional_jump_instruction_13
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
.LABEL__generate_instruction_9__17:
  .loc 2 149 16
  # $26.1: bool = call(is_389, instruction.1, IR_Comparison_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_instruction_9__18, .LABEL__generate_instruction_9__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_instruction_9__20
.LABEL__generate_instruction_9__18:
  .loc 2 150 46
  # $61.1: @IR_Comparison_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $61.1:rax 
  .loc 2 150 9
  # call(generate_comparison_instruction_14, self.1, $61.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_comparison_instruction_14
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
.LABEL__generate_instruction_9__20:
  .loc 2 151 16
  # $27.1: bool = call(is_389, instruction.1, IR_Direct_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:rax 
  # jump($27.1, .LABEL__generate_instruction_9__21, .LABEL__generate_instruction_9__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_instruction_9__23
.LABEL__generate_instruction_9__21:
  .loc 2 152 47
  # $60.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $60.1:rax 
  .loc 2 152 9
  # call(generate_direct_jump_instruction_15, self.1, $60.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_direct_jump_instruction_15
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
.LABEL__generate_instruction_9__23:
  .loc 2 153 16
  # $28.1: bool = call(is_389, instruction.1, IR_Divide_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Divide_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:rax 
  # jump($28.1, .LABEL__generate_instruction_9__24, .LABEL__generate_instruction_9__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_instruction_9__26
.LABEL__generate_instruction_9__24:
  .loc 2 154 42
  # $59.1: @IR_Divide_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $59.1:rax 
  .loc 2 154 9
  # call(generate_divide_instruction_16, self.1, $59.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_divide_instruction_16
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
.LABEL__generate_instruction_9__26:
  .loc 2 155 16
  # $29.1: bool = call(is_389, instruction.1, IR_Load_Array_Item_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Array_Item_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:rax 
  # jump($29.1, .LABEL__generate_instruction_9__27, .LABEL__generate_instruction_9__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_instruction_9__29
.LABEL__generate_instruction_9__27:
  .loc 2 156 51
  # $58.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $58.1:rax 
  .loc 2 156 9
  # call(generate_load_array_item_instruction_17, self.1, $58.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_array_item_instruction_17
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
.LABEL__generate_instruction_9__29:
  .loc 2 157 16
  # $30.1: bool = call(is_389, instruction.1, IR_Load_Struct_Member_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Struct_Member_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:rax 
  # jump($30.1, .LABEL__generate_instruction_9__30, .LABEL__generate_instruction_9__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_instruction_9__32
.LABEL__generate_instruction_9__30:
  .loc 2 158 54
  # $57.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $57.1:rax 
  .loc 2 158 9
  # call(generate_load_struct_member_instruction_20, self.1, $57.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_struct_member_instruction_20
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
.LABEL__generate_instruction_9__32:
  .loc 2 159 16
  # $31.1: bool = call(is_389, instruction.1, IR_Load_Variable_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Variable_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__generate_instruction_9__33, .LABEL__generate_instruction_9__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_instruction_9__35
.LABEL__generate_instruction_9__33:
  .loc 2 160 49
  # $56.1: @IR_Load_Variable_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $56.1:rax 
  .loc 2 160 9
  # call(generate_load_variable_instruction_19, self.1, $56.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_variable_instruction_19
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__generate_instruction_9__35:
  .loc 2 161 16
  # $32.1: bool = call(is_389, instruction.1, IR_Load_Variable_Address_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Load_Variable_Address_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  # jump($32.1, .LABEL__generate_instruction_9__36, .LABEL__generate_instruction_9__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_instruction_9__38
.LABEL__generate_instruction_9__36:
  .loc 2 162 57
  # $55.1: @IR_Load_Variable_Address_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $55.1:rax 
  .loc 2 162 9
  # call(generate_load_variable_address_instruction_18, self.1, $55.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_load_variable_address_instruction_18
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
.LABEL__generate_instruction_9__38:
  .loc 2 163 16
  # $33.1: bool = call(is_389, instruction.1, IR_Modulo_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Modulo_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:rax 
  # jump($33.1, .LABEL__generate_instruction_9__39, .LABEL__generate_instruction_9__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_instruction_9__41
.LABEL__generate_instruction_9__39:
  .loc 2 164 42
  # $54.1: @IR_Modulo_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $54.1:rax 
  .loc 2 164 9
  # call(generate_modulo_instruction_21, self.1, $54.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_modulo_instruction_21
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
.LABEL__generate_instruction_9__41:
  .loc 2 165 16
  # $34.1: bool = call(is_389, instruction.1, IR_Multiply_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Multiply_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:rax 
  # jump($34.1, .LABEL__generate_instruction_9__42, .LABEL__generate_instruction_9__44)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_instruction_9__44
.LABEL__generate_instruction_9__42:
  .loc 2 166 44
  # $53.1: @IR_Multiply_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $53.1:rax 
  .loc 2 166 9
  # call(generate_multiply_instruction_22, self.1, $53.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_multiply_instruction_22
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
.LABEL__generate_instruction_9__44:
  .loc 2 167 16
  # $35.1: bool = call(is_389, instruction.1, IR_New_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_New_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:rax 
  # jump($35.1, .LABEL__generate_instruction_9__45, .LABEL__generate_instruction_9__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_instruction_9__47
.LABEL__generate_instruction_9__45:
  .loc 2 168 39
  # $52.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $52.1:rax 
  .loc 2 168 9
  # call(generate_new_instruction_23, self.1, $52.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_new_instruction_23
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
.LABEL__generate_instruction_9__47:
  .loc 2 169 16
  # $36.1: bool = call(is_389, instruction.1, IR_Phi_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Phi_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:rax 
  # jump($36.1, .LABEL__generate_instruction_9__48, .LABEL__generate_instruction_9__50)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_instruction_9__50
.LABEL__generate_instruction_9__48:
  .loc 2 170 39
  # $51.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $51.1:rax 
  .loc 2 170 9
  # call(generate_phi_instruction_24, self.1, $51.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_phi_instruction_24
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
.LABEL__generate_instruction_9__50:
  .loc 2 171 16
  # $37.1: bool = call(is_389, instruction.1, IR_Return_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Return_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:rax 
  # jump($37.1, .LABEL__generate_instruction_9__51, .LABEL__generate_instruction_9__53)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_instruction_9__53
.LABEL__generate_instruction_9__51:
  .loc 2 172 42
  # $50.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $50.1:rax 
  .loc 2 172 9
  # call(generate_return_instruction_25, self.1, $50.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_return_instruction_25
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
.LABEL__generate_instruction_9__53:
  .loc 2 173 16
  # $38.1: bool = call(is_389, instruction.1, IR_Set_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Set_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:rax 
  # jump($38.1, .LABEL__generate_instruction_9__54, .LABEL__generate_instruction_9__56)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_instruction_9__56
.LABEL__generate_instruction_9__54:
  .loc 2 174 39
  # $49.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $49.1:rax 
  .loc 2 174 9
  # call(generate_set_instruction_26, self.1, $49.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_set_instruction_26
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
.LABEL__generate_instruction_9__56:
  .loc 2 175 16
  # $39.1: bool = call(is_389, instruction.1, IR_Store_Array_Item_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Store_Array_Item_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:rax 
  # jump($39.1, .LABEL__generate_instruction_9__57, .LABEL__generate_instruction_9__59)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_instruction_9__59
.LABEL__generate_instruction_9__57:
  .loc 2 176 52
  # $48.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $48.1:rax 
  .loc 2 176 9
  # call(generate_store_array_item_instruction_27, self.1, $48.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_array_item_instruction_27
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
.LABEL__generate_instruction_9__59:
  .loc 2 177 16
  # $40.1: bool = call(is_389, instruction.1, IR_Store_Struct_Member_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Store_Struct_Member_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:rax 
  # jump($40.1, .LABEL__generate_instruction_9__60, .LABEL__generate_instruction_9__62)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_instruction_9__62
.LABEL__generate_instruction_9__60:
  .loc 2 178 55
  # $47.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $47.1:rax 
  .loc 2 178 9
  # call(generate_store_struct_member_instruction_28, self.1, $47.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_store_struct_member_instruction_28
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
.LABEL__generate_instruction_9__62:
  .loc 2 179 16
  # $41.1: bool = call(is_389, instruction.1, IR_Substract_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Substract_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:rax 
  # jump($41.1, .LABEL__generate_instruction_9__63, .LABEL__generate_instruction_9__65)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_instruction_9__65
.LABEL__generate_instruction_9__63:
  .loc 2 180 45
  # $46.1: @IR_Substract_Instruction = instruction.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $46.1:rax 
  .loc 2 180 9
  # call(generate_substract_instruction_29, self.1, $46.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call generate_substract_instruction_29
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # jump(.LABEL__generate_instruction_9__7)
  jmp .LABEL__generate_instruction_9__7
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
.LABEL__generate_instruction_9__65:
  .loc 2 182 20
  # $42.1: @String = call(clone_391, "Unsupported instruction: ")
  lea rdi, .LABEL__string_36[rip] # "Unsupported instruction: "
  call clone_391
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax 
  .loc 2 182 62
  # $43.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $43.1:r15 
  .loc 2 182 62
  # $44.1: @String = load_struct_member_address($43.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-17] instruction.1:rbx:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $42.1:rax $43.1:r15 $44.1:r14 
  .loc 2 182 20
  # $45.1: @String = call(append_400, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] $45.1:rax 
  .loc 2 182 9
  # call(abort_35, self.1, $45.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call abort_35
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] $41.1:[rbp-38] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] $40.1:[rbp-37] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] $39.1:[rbp-36] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] $38.1:[rbp-35] 
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] $37.1:[rbp-34] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] $36.1:[rbp-33] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] $35.1:[rbp-32] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] $34.1:[rbp-31] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] $33.1:[rbp-30] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] $32.1:[rbp-29] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] $30.1:[rbp-27] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] $29.1:[rbp-26] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] $28.1:[rbp-25] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] $27.1:[rbp-24] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] $26.1:[rbp-23] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] $25.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] $24.1:[rbp-21] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] $23.1:[rbp-20] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] $22.1:[rbp-19] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $18.1:[rbp-18] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_instruction_9__end:
  mov rsp, rbp
  pop rbp
  ret

generate_instruction_9__stack_frame_size: .word 48

  .loc 2 187 8
  .text
generate_add_instruction_10:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_add_instruction_10__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_add_instruction_10__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Add_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 188 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 189 47
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 189 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 190 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 190 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 191 40
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 191 40
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $6.1:r15 
  .loc 2 191 21
  # type_size.1: isize = call(get_type_size_56, self.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:rax 
  .loc 2 192 23
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:rax 
  .loc 2 193 9
  # $9.1: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__generate_add_instruction_10__2, .LABEL__generate_add_instruction_10__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_add_instruction_10__3
.LABEL__generate_add_instruction_10__2:
  .loc 2 194 27
  # right_value.1: @IR_Constant_Value = right_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] right_value.1:rax 
  .loc 2 195 14
  # $12.1: @Integer_Token = load_struct_member(right_value.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $12.1:rbx 
  .loc 2 195 13
  # $13.1: isize = load_struct_member($12.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $13.1:rax 
  .loc 2 195 13
  # $14.1: bool = $13.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:rbx 
  # jump($14.1, .LABEL__generate_add_instruction_10__4, .LABEL__generate_add_instruction_10__3)
  test bl, bl
  mov [rbp-42], bl
  jz .LABEL__generate_add_instruction_10__3
.LABEL__generate_add_instruction_10__4:
  .loc 2 196 13
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $15.1:rbx 
  .loc 2 196 13
  # $16.1: @FILE = call(write_383, $15.1, "  inc ")
  mov rdi, rbx
  lea rsi, .LABEL__string_37[rip] # "  inc "
  call write_383
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] 
  .loc 2 197 17
  # $17.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:rax 
  # jump($17.1, .LABEL__generate_add_instruction_10__6, .LABEL__generate_add_instruction_10__8)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_add_instruction_10__8
.LABEL__generate_add_instruction_10__6:
  .loc 2 198 17
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $32.1:rbx 
  .loc 2 198 40
  # $33.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $32.1:rbx $33.1:r14 
  .loc 2 198 17
  # $34.1: @FILE = call(write_383, $32.1, $33.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] 
  # jump(.LABEL__generate_add_instruction_10__7)
.LABEL__generate_add_instruction_10__7:
  .loc 2 208 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $35.1:rbx 
  .loc 2 208 13
  # $36.1: @FILE = call(end_line_386, $35.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] 
  .loc 2 209 13
  # return()
  jmp .LABEL__generate_add_instruction_10__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] 
.LABEL__generate_add_instruction_10__8:
  .loc 2 199 24
  # $18.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:rax 
  # jump($18.1, .LABEL__generate_add_instruction_10__9, .LABEL__generate_add_instruction_10__11)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_add_instruction_10__11
.LABEL__generate_add_instruction_10__9:
  .loc 2 200 17
  # $29.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $29.1:rbx 
  .loc 2 200 40
  # $30.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $29.1:rbx $30.1:r14 
  .loc 2 200 17
  # $31.1: @FILE = call(write_383, $29.1, $30.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] 
  # jump(.LABEL__generate_add_instruction_10__7)
  jmp .LABEL__generate_add_instruction_10__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] 
.LABEL__generate_add_instruction_10__11:
  .loc 2 201 24
  # $19.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:rax 
  # jump($19.1, .LABEL__generate_add_instruction_10__12, .LABEL__generate_add_instruction_10__14)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_add_instruction_10__14
.LABEL__generate_add_instruction_10__12:
  .loc 2 202 17
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $26.1:rbx 
  .loc 2 202 40
  # $27.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $26.1:rbx $27.1:r14 
  .loc 2 202 17
  # $28.1: @FILE = call(write_383, $26.1, $27.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
  # jump(.LABEL__generate_add_instruction_10__7)
  jmp .LABEL__generate_add_instruction_10__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
.LABEL__generate_add_instruction_10__14:
  .loc 2 203 24
  # $20.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:rax 
  # jump($20.1, .LABEL__generate_add_instruction_10__15, .LABEL__generate_add_instruction_10__17)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_add_instruction_10__17
.LABEL__generate_add_instruction_10__15:
  .loc 2 204 17
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $23.1:rbx 
  .loc 2 204 40
  # $24.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $23.1:rbx $24.1:r14 
  .loc 2 204 17
  # $25.1: @FILE = call(write_383, $23.1, $24.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # jump(.LABEL__generate_add_instruction_10__7)
  jmp .LABEL__generate_add_instruction_10__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
.LABEL__generate_add_instruction_10__17:
  .loc 2 206 28
  # $21.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:rax 
  .loc 2 206 28
  # $22.1: @String = call(append_399, $21.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $22.1:rax 
  .loc 2 206 17
  # call(abort_35, self.1, $22.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] $18.1:[rbp-44] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $17.1:[rbp-43] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] 
.LABEL__generate_add_instruction_10__3:
  .loc 2 212 5
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $37.1:rbx 
  .loc 2 212 5
  # $38.1: @FILE = call(write_383, $37.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] 
  .loc 2 213 9
  # $39.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:rax 
  # jump($39.1, .LABEL__generate_add_instruction_10__19, .LABEL__generate_add_instruction_10__21)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_add_instruction_10__21
.LABEL__generate_add_instruction_10__19:
  .loc 2 214 9
  # $54.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $54.1:rbx 
  .loc 2 214 32
  # $55.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $54.1:rbx $55.1:r14 
  .loc 2 214 9
  # $56.1: @FILE = call(write_383, $54.1, $55.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] 
  # jump(.LABEL__generate_add_instruction_10__20)
.LABEL__generate_add_instruction_10__20:
  .loc 2 224 5
  # $57.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $57.1:rbx 
  .loc 2 224 5
  # $58.1: @FILE = call(write_383, $57.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $58.1:rax 
  .loc 2 224 54
  # $59.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-51], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $58.1:[rbp-51] $59.1:rax 
  .loc 2 224 5
  # $60.1: @FILE = call(write_operand_34, $58.1, self.1, $59.1)
  mov rdi, [rbp-51]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_34
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $60.1:rax 
  .loc 2 224 5
  # $61.1: @FILE = call(end_line_386, $60.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] 
  # return()
  jmp .LABEL__generate_add_instruction_10__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] 
.LABEL__generate_add_instruction_10__21:
  .loc 2 215 16
  # $40.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:rax 
  # jump($40.1, .LABEL__generate_add_instruction_10__22, .LABEL__generate_add_instruction_10__24)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_add_instruction_10__24
.LABEL__generate_add_instruction_10__22:
  .loc 2 216 9
  # $51.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $51.1:rbx 
  .loc 2 216 32
  # $52.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $51.1:rbx $52.1:r14 
  .loc 2 216 9
  # $53.1: @FILE = call(write_383, $51.1, $52.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] 
  # jump(.LABEL__generate_add_instruction_10__20)
  jmp .LABEL__generate_add_instruction_10__20
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] 
.LABEL__generate_add_instruction_10__24:
  .loc 2 217 16
  # $41.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:rax 
  # jump($41.1, .LABEL__generate_add_instruction_10__25, .LABEL__generate_add_instruction_10__27)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_add_instruction_10__27
.LABEL__generate_add_instruction_10__25:
  .loc 2 218 9
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $48.1:rbx 
  .loc 2 218 32
  # $49.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $48.1:rbx $49.1:r14 
  .loc 2 218 9
  # $50.1: @FILE = call(write_383, $48.1, $49.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] 
  # jump(.LABEL__generate_add_instruction_10__20)
  jmp .LABEL__generate_add_instruction_10__20
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] 
.LABEL__generate_add_instruction_10__27:
  .loc 2 219 16
  # $42.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:rax 
  # jump($42.1, .LABEL__generate_add_instruction_10__28, .LABEL__generate_add_instruction_10__30)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_add_instruction_10__30
.LABEL__generate_add_instruction_10__28:
  .loc 2 220 9
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] $45.1:rbx 
  .loc 2 220 32
  # $46.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] $45.1:rbx $46.1:r14 
  .loc 2 220 9
  # $47.1: @FILE = call(write_383, $45.1, $46.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] 
  # jump(.LABEL__generate_add_instruction_10__20)
  jmp .LABEL__generate_add_instruction_10__20
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] 
.LABEL__generate_add_instruction_10__30:
  .loc 2 222 20
  # $43.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] $43.1:rax 
  .loc 2 222 20
  # $44.1: @String = call(append_399, $43.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] $44.1:rax 
  .loc 2 222 9
  # call(abort_35, self.1, $44.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] $42.1:[rbp-46] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] $41.1:[rbp-45] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] $40.1:[rbp-44] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] $39.1:[rbp-43] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] $14.1:[rbp-42] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] right_value.1:[rbp-40] 
  # [discarded value]: right_value.1
  # [discarded value]: type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_add_instruction_10__end:
  mov rsp, rbp
  pop rbp
  ret

generate_add_instruction_10__stack_frame_size: .word 64

  .loc 2 227 8
  .text
generate_call_instruction_11:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_call_instruction_11__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_call_instruction_11__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 228 9
  # $1.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 228 9
  # $2.1: bool = $1.1 > 0
  cmp rax, 0
  setg bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__generate_call_instruction_11__2, .LABEL__generate_call_instruction_11__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__2:
  .loc 2 229 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-17]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 229 53
  # $4.1: @IR_Value = call(get_argument_value_188, instruction.1, 0)
  mov rdi, [rbp-9]
  xor rsi, rsi
  mov [rbp-25], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $4.1:rax 
  .loc 2 229 9
  # call(generate_load_value_30, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 230 13
  # $5.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:rbx 
  .loc 2 230 13
  # $6.1: bool = $5.1 > 1
  cmp rbx, 1
  setg r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:r15 
  # jump($6.1, .LABEL__generate_call_instruction_11__4, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__4:
  .loc 2 231 38
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:rbx 
  .loc 2 231 57
  # $8.1: @IR_Value = call(get_argument_value_188, instruction.1, 1)
  mov rdi, [rbp-9]
  mov rsi, 1
  mov [rbp-26], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $7.1:[rbp-26] $8.1:rax 
  .loc 2 231 13
  # call(generate_load_value_30, self.1, $7.1, $8.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-26]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  .loc 2 232 17
  # $9.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $9.1:rbx 
  .loc 2 232 17
  # $10.1: bool = $9.1 > 2
  cmp rbx, 2
  setg r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:r15 
  # jump($10.1, .LABEL__generate_call_instruction_11__6, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__6:
  .loc 2 233 42
  # $11.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-17]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:rbx 
  .loc 2 233 61
  # $12.1: @IR_Value = call(get_argument_value_188, instruction.1, 2)
  mov rdi, [rbp-9]
  mov rsi, 2
  mov [rbp-27], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $11.1:[rbp-27] $12.1:rax 
  .loc 2 233 17
  # call(generate_load_value_30, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-27]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  .loc 2 234 21
  # $13.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $13.1:rbx 
  .loc 2 234 21
  # $14.1: bool = $13.1 > 3
  cmp rbx, 3
  setg r15b
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:r15 
  # jump($14.1, .LABEL__generate_call_instruction_11__8, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__8:
  .loc 2 235 46
  # $15.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-17]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:rbx 
  .loc 2 235 65
  # $16.1: @IR_Value = call(get_argument_value_188, instruction.1, 3)
  mov rdi, [rbp-9]
  mov rsi, 3
  mov [rbp-28], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $15.1:[rbp-28] $16.1:rax 
  .loc 2 235 21
  # call(generate_load_value_30, self.1, $15.1, $16.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-28]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  .loc 2 236 25
  # $17.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $17.1:rbx 
  .loc 2 236 25
  # $18.1: bool = $17.1 > 4
  cmp rbx, 4
  setg r15b
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:r15 
  # jump($18.1, .LABEL__generate_call_instruction_11__10, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__10:
  .loc 2 237 50
  # $19.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-17]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:rbx 
  .loc 2 237 68
  # $20.1: @IR_Value = call(get_argument_value_188, instruction.1, 4)
  mov rdi, [rbp-9]
  mov rsi, 4
  mov [rbp-29], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $19.1:[rbp-29] $20.1:rax 
  .loc 2 237 25
  # call(generate_load_value_30, self.1, $19.1, $20.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-29]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  .loc 2 238 29
  # $21.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-9]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $21.1:rbx 
  .loc 2 238 29
  # $22.1: bool = $21.1 > 5
  cmp rbx, 5
  setg r15b
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:r15 
  # jump($22.1, .LABEL__generate_call_instruction_11__12, .LABEL__generate_call_instruction_11__3)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__generate_call_instruction_11__3
.LABEL__generate_call_instruction_11__12:
  .loc 2 239 54
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-17]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:rbx 
  .loc 2 239 72
  # $24.1: @IR_Value = call(get_argument_value_188, instruction.1, 5)
  mov rdi, [rbp-9]
  mov rsi, 5
  mov [rbp-30], rbx
  call get_argument_value_188
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $23.1:[rbp-30] $24.1:rax 
  .loc 2 239 29
  # call(generate_load_value_30, self.1, $23.1, $24.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-30]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__3)
.LABEL__generate_call_instruction_11__3:
  .loc 2 246 9
  # $25.1: bool = call(is_389, instruction.1, IR_Direct_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Call_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:rax $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump($25.1, .LABEL__generate_call_instruction_11__14, .LABEL__generate_call_instruction_11__16)
  test al, al
  mov [rbp-23], al
  jz .LABEL__generate_call_instruction_11__16
.LABEL__generate_call_instruction_11__14:
  .loc 2 247 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 248 9
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_46
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  .loc 2 249 9
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $38.1:rbx 
  .loc 2 249 9
  # $39.1: @FILE = call(write_383, $38.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_41[rip] # "  call "
  call write_383
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax 
  .loc 2 249 65
  # $40.1: @IR_Direct_Call_Instruction = instruction.1
  mov rbx, [rbp-9]
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $40.1:rbx 
  .loc 2 249 64
  # $41.1: @IR_Function = load_struct_member($40.1, function)
  mov r15, [rbx+73]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $39.1:rax $41.1:r15 
  .loc 2 249 9
  # $42.1: @FILE = call(write_function_label_4, $39.1, $41.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $41.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $42.1:rax 
  .loc 2 249 9
  # $43.1: @FILE = call(end_line_386, $42.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # jump(.LABEL__generate_call_instruction_11__15)
.LABEL__generate_call_instruction_11__15:
  .loc 2 258 9
  # $44.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $44.1:rbx 
  .loc 2 258 9
  # $45.1: bool = $44.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:r15 
  # jump($45.1, .LABEL__generate_call_instruction_11__20, .LABEL__generate_call_instruction_11__21)
  test r15b, r15b
  mov [rbp-24], r15b
  jz .LABEL__generate_call_instruction_11__21
.LABEL__generate_call_instruction_11__20:
  .loc 2 259 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx 
  .loc 2 259 59
  # $47.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-17]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] $46.1:rbx $47.1:r14 
  .loc 2 259 9
  # $48.1: @MC_Value = call(map_variable_value_41, self.1, $46.1, $47.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__21)
.LABEL__generate_call_instruction_11__21:
  # return()
  jmp .LABEL__generate_call_instruction_11__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
.LABEL__generate_call_instruction_11__16:
  .loc 2 250 16
  # $26.1: bool = call(is_389, instruction.1, IR_Dynamic_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Dynamic_Call_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:rax 
  # jump($26.1, .LABEL__generate_call_instruction_11__17, .LABEL__generate_call_instruction_11__19)
  test al, al
  mov [rbp-24], al
  jz .LABEL__generate_call_instruction_11__19
.LABEL__generate_call_instruction_11__17:
  .loc 2 251 34
  # $29.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-17]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx 
  .loc 2 251 54
  # $30.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov r15, [rbp-9]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:rbx $30.1:r15 
  .loc 2 251 53
  # $31.1: @IR_Variable_Value = call(get_function_address_194, $30.1)
  mov rdi, r15
  mov [rbp-32], rbx
  call get_function_address_194
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $29.1:[rbp-32] $31.1:rax 
  .loc 2 251 9
  # call(generate_load_value_30, self.1, $29.1, $31.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-32]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $31.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 252 9
  # store_struct_member(instruction.1, is_generated, true)
  mov rax, [rbp-9]
  mov BYTE PTR [rax+56], 1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 253 9
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-17]
  call release_all_registers_46
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  .loc 2 254 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $32.1:rbx 
  .loc 2 254 9
  # $33.1: @FILE = call(write_383, $32.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_41[rip] # "  call "
  call write_383
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax 
  .loc 2 254 49
  # $34.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-17]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $34.1:r15 
  .loc 2 254 49
  # $35.1: @String = load_struct_member($34.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $34.1
  # [live values]: self.1:rbx:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $33.1:rax $35.1:r14 
  .loc 2 254 9
  # $36.1: @FILE = call(write_383, $33.1, $35.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $35.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $36.1:rax 
  .loc 2 254 9
  # $37.1: @FILE = call(end_line_386, $36.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # jump(.LABEL__generate_call_instruction_11__15)
  jmp .LABEL__generate_call_instruction_11__15
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
.LABEL__generate_call_instruction_11__19:
  .loc 2 256 15
  # $27.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx 
  .loc 2 256 37
  # $28.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] $27.1:rbx $28.1:r15 
  .loc 2 256 9
  # call(abort_145, $27.1, $28.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] $26.1:[rbp-24] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $25.1:[rbp-23] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] $22.1:[rbp-22] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] $18.1:[rbp-21] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] $14.1:[rbp-20] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] $10.1:[rbp-19] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_call_instruction_11__end:
  mov rsp, rbp
  pop rbp
  ret

generate_call_instruction_11__stack_frame_size: .word 32

  .loc 2 263 8
  .text
generate_cast_instruction_12:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_cast_instruction_12__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_cast_instruction_12__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Cast_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 264 20
  # ir_value.1: @IR_Value = call(get_value_197, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_197
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  .loc 2 265 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rax 
  .loc 2 266 5
  # call(generate_load_value_30, self.1, result_register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 267 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $3.1:rbx 
  .loc 2 267 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-32]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  .loc 2 268 9
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $5.1:rbx 
  .loc 2 268 9
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $6.1:r15 
  .loc 2 268 9
  # $7.1: bool = call(is_389, $6.1, IR_Int_Type)
  mov rdi, r15
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:rax 
  # jump($7.1, .LABEL__generate_cast_instruction_12__2, .LABEL__generate_cast_instruction_12__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_cast_instruction_12__3
.LABEL__generate_cast_instruction_12__2:
  .loc 2 269 13
  # $8.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $8.1:rbx 
  .loc 2 269 13
  # $9.1: bool = call(is_389, $8.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_cast_instruction_12__4, .LABEL__generate_cast_instruction_12__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_cast_instruction_12__5
.LABEL__generate_cast_instruction_12__4:
  .loc 2 270 26
  # $10.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $10.1:rbx 
  .loc 2 270 13
  # $11.1: @FILE = call(write_363, stderr, $10.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $11.1:rax 
  .loc 2 270 13
  # $12.1: @FILE = call(write_383, $11.1, ": Redundant cast")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # ": Redundant cast"
  call write_383
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $12.1:rax 
  .loc 2 270 13
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  .loc 2 271 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__generate_cast_instruction_12__5:
  .loc 2 273 13
  # $14.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $14.1:rbx 
  .loc 2 273 13
  # $15.1: bool = call(is_389, $14.1, IR_Int16_Type)
  mov rdi, rbx
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:rax 
  # jump($15.1, .LABEL__generate_cast_instruction_12__7, .LABEL__generate_cast_instruction_12__8)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_cast_instruction_12__8
.LABEL__generate_cast_instruction_12__7:
  .loc 2 274 13
  # $16.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $16.1:rbx 
  .loc 2 274 13
  # $17.1: @FILE = call(write_383, $16.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $17.1:rax 
  .loc 2 274 54
  # $18.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $17.1:rax $18.1:r15 
  .loc 2 274 13
  # $19.1: @FILE = call(write_383, $17.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $19.1:rax 
  .loc 2 274 13
  # $20.1: @FILE = call(write_383, $19.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $20.1:rax 
  .loc 2 274 96
  # $21.1: @String = load_struct_member(result_register.1, name_w)
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $20.1:rax $21.1:r15 
  .loc 2 274 13
  # $22.1: @FILE = call(write_383, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $22.1:rax 
  .loc 2 274 13
  # $23.1: @FILE = call(end_line_386, $22.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] 
  .loc 2 275 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] 
.LABEL__generate_cast_instruction_12__8:
  .loc 2 277 13
  # $24.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $24.1:rbx 
  .loc 2 277 13
  # $25.1: bool = call(is_389, $24.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__generate_cast_instruction_12__10, .LABEL__generate_cast_instruction_12__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__11
.LABEL__generate_cast_instruction_12__10:
  .loc 2 278 13
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $26.1:rbx 
  .loc 2 278 13
  # $27.1: @FILE = call(write_383, $26.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $27.1:rax 
  .loc 2 278 54
  # $28.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $27.1:rax $28.1:r15 
  .loc 2 278 13
  # $29.1: @FILE = call(write_383, $27.1, $28.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $29.1:rax 
  .loc 2 278 13
  # $30.1: @FILE = call(write_383, $29.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $30.1:rax 
  .loc 2 278 96
  # $31.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $30.1:rax $31.1:r15 
  .loc 2 278 13
  # $32.1: @FILE = call(write_383, $30.1, $31.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $32.1:rax 
  .loc 2 278 13
  # $33.1: @FILE = call(end_line_386, $32.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] 
  .loc 2 279 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] 
.LABEL__generate_cast_instruction_12__11:
  .loc 2 281 13
  # $34.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $34.1:rbx 
  .loc 2 281 13
  # $35.1: bool = call(is_389, $34.1, IR_Int64_Type)
  mov rdi, rbx
  mov rsi, IR_Int64_Type[rip]
  call is_389
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:rax 
  # jump($35.1, .LABEL__generate_cast_instruction_12__13, .LABEL__generate_cast_instruction_12__14)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__14
.LABEL__generate_cast_instruction_12__13:
  .loc 2 282 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__14:
  .loc 2 284 13
  # $36.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $36.1:rbx 
  .loc 2 284 13
  # $37.1: bool = call(is_389, $36.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:rax 
  # jump($37.1, .LABEL__generate_cast_instruction_12__16, .LABEL__generate_cast_instruction_12__17)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__17
.LABEL__generate_cast_instruction_12__16:
  .loc 2 285 13
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $38.1:rbx 
  .loc 2 285 13
  # $39.1: @FILE = call(write_383, $38.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $39.1:rax 
  .loc 2 285 54
  # $40.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $39.1:rax $40.1:r15 
  .loc 2 285 13
  # $41.1: @FILE = call(write_383, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $41.1:rax 
  .loc 2 285 13
  # $42.1: @FILE = call(write_383, $41.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $42.1:rax 
  .loc 2 285 96
  # $43.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $42.1:rax $43.1:r15 
  .loc 2 285 13
  # $44.1: @FILE = call(write_383, $42.1, $43.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $44.1:rax 
  .loc 2 285 13
  # $45.1: @FILE = call(end_line_386, $44.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] 
  .loc 2 286 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__17:
  .loc 2 288 20
  # $46.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $46.1:rax 
  .loc 2 288 49
  # $47.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $46.1:rax $47.1:r15 
  .loc 2 288 49
  # $48.1: @Object_Type = load_struct_member($47.1, object_type)
  mov r14, [r15]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $46.1:rax $48.1:r14 
  .loc 2 288 49
  # $49.1: @String = load_struct_member_address($48.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $46.1:rax $48.1:r14 $49.1:r15 
  .loc 2 288 20
  # $50.1: @String = call(append_400, $46.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $50.1:rax 
  .loc 2 288 20
  # $51.1: @String = call(append_400, $50.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $51.1:rax 
  .loc 2 288 103
  # $52.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $51.1:rax $52.1:r15 
  .loc 2 288 103
  # $53.1: @IR_Type = load_struct_member($52.1, type)
  mov r14, [r15+8]
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $51.1:rax $53.1:r14 
  .loc 2 288 103
  # $54.1: @Object_Type = load_struct_member($53.1, object_type)
  mov r15, [r14]
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $51.1:rax $54.1:r15 
  .loc 2 288 103
  # $55.1: @String = load_struct_member_address($54.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $51.1:rax $54.1:r15 $55.1:r14 
  .loc 2 288 20
  # $56.1: @String = call(append_400, $51.1, $55.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] $56.1:rax 
  .loc 2 288 9
  # call(abort_35, self.1, $56.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] $37.1:[rbp-38] 
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] $35.1:[rbp-37] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] $25.1:[rbp-36] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] $15.1:[rbp-35] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] 
.LABEL__generate_cast_instruction_12__3:
  .loc 2 290 9
  # $57.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $57.1:rbx 
  .loc 2 290 9
  # $58.1: @IR_Type = load_struct_member($57.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $58.1:r15 
  .loc 2 290 9
  # $59.1: bool = call(is_389, $58.1, IR_Int16_Type)
  mov rdi, r15
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:rax 
  # jump($59.1, .LABEL__generate_cast_instruction_12__19, .LABEL__generate_cast_instruction_12__20)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_cast_instruction_12__20
.LABEL__generate_cast_instruction_12__19:
  .loc 2 291 13
  # $60.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $60.1:rbx 
  .loc 2 291 13
  # $61.1: bool = call(is_389, $60.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:rax 
  # jump($61.1, .LABEL__generate_cast_instruction_12__21, .LABEL__generate_cast_instruction_12__22)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_cast_instruction_12__22
.LABEL__generate_cast_instruction_12__21:
  .loc 2 292 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] 
.LABEL__generate_cast_instruction_12__22:
  .loc 2 294 13
  # $62.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $62.1:rbx 
  .loc 2 294 13
  # $63.1: bool = call(is_389, $62.1, IR_Int16_Type)
  mov rdi, rbx
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:rax 
  # jump($63.1, .LABEL__generate_cast_instruction_12__24, .LABEL__generate_cast_instruction_12__25)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__25
.LABEL__generate_cast_instruction_12__24:
  .loc 2 295 26
  # $64.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $64.1:rbx 
  .loc 2 295 13
  # $65.1: @FILE = call(write_363, stderr, $64.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $65.1:rax 
  .loc 2 295 13
  # $66.1: @FILE = call(write_383, $65.1, ": Redundant cast")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # ": Redundant cast"
  call write_383
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $66.1:rax 
  .loc 2 295 13
  # $67.1: @FILE = call(end_line_386, $66.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] 
  .loc 2 296 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] 
.LABEL__generate_cast_instruction_12__25:
  .loc 2 298 13
  # $68.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $68.1:rbx 
  .loc 2 298 13
  # $69.1: bool = call(is_389, $68.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:rax 
  # jump($69.1, .LABEL__generate_cast_instruction_12__27, .LABEL__generate_cast_instruction_12__28)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__28
.LABEL__generate_cast_instruction_12__27:
  .loc 2 299 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__28:
  .loc 2 301 13
  # $70.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $70.1:rbx 
  .loc 2 301 13
  # $71.1: bool = call(is_389, $70.1, IR_Int64_Type)
  mov rdi, rbx
  mov rsi, IR_Int64_Type[rip]
  call is_389
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:rax 
  # jump($71.1, .LABEL__generate_cast_instruction_12__30, .LABEL__generate_cast_instruction_12__31)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__31
.LABEL__generate_cast_instruction_12__30:
  .loc 2 302 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__31:
  .loc 2 304 13
  # $72.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $72.1:rbx 
  .loc 2 304 13
  # $73.1: bool = call(is_389, $72.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:rax 
  # jump($73.1, .LABEL__generate_cast_instruction_12__33, .LABEL__generate_cast_instruction_12__34)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_cast_instruction_12__34
.LABEL__generate_cast_instruction_12__33:
  .loc 2 305 13
  # $74.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $74.1:rbx 
  .loc 2 305 13
  # $75.1: @FILE = call(write_383, $74.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $75.1:rax 
  .loc 2 305 54
  # $76.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $75.1:rax $76.1:r15 
  .loc 2 305 13
  # $77.1: @FILE = call(write_383, $75.1, $76.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $77.1:rax 
  .loc 2 305 13
  # $78.1: @FILE = call(write_383, $77.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $78.1:rax 
  .loc 2 305 96
  # $79.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $78.1:rax $79.1:r15 
  .loc 2 305 13
  # $80.1: @FILE = call(write_383, $78.1, $79.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $80.1:rax 
  .loc 2 305 13
  # $81.1: @FILE = call(end_line_386, $80.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $81.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] 
  .loc 2 306 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] 
.LABEL__generate_cast_instruction_12__34:
  .loc 2 308 20
  # $82.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $82.1:rax 
  .loc 2 308 49
  # $83.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $82.1:rax $83.1:r15 
  .loc 2 308 49
  # $84.1: @Object_Type = load_struct_member($83.1, object_type)
  mov r14, [r15]
  # [discarded value]: $83.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $82.1:rax $84.1:r14 
  .loc 2 308 49
  # $85.1: @String = load_struct_member_address($84.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $82.1:rax $84.1:r14 $85.1:r15 
  .loc 2 308 20
  # $86.1: @String = call(append_400, $82.1, $85.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $85.1
  # [discarded value]: $84.1
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $86.1:rax 
  .loc 2 308 20
  # $87.1: @String = call(append_400, $86.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $87.1:rax 
  .loc 2 308 103
  # $88.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $87.1:rax $88.1:r15 
  .loc 2 308 103
  # $89.1: @IR_Type = load_struct_member($88.1, type)
  mov r14, [r15+8]
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $87.1:rax $89.1:r14 
  .loc 2 308 103
  # $90.1: @Object_Type = load_struct_member($89.1, object_type)
  mov r15, [r14]
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $87.1:rax $90.1:r15 
  .loc 2 308 103
  # $91.1: @String = load_struct_member_address($90.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $87.1:rax $90.1:r15 $91.1:r14 
  .loc 2 308 20
  # $92.1: @String = call(append_400, $87.1, $91.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $91.1
  # [discarded value]: $90.1
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] $92.1:rax 
  .loc 2 308 9
  # call(abort_35, self.1, $92.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] $73.1:[rbp-39] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] $71.1:[rbp-38] 
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] $69.1:[rbp-37] 
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] $63.1:[rbp-36] 
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $61.1:[rbp-35] 
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] 
.LABEL__generate_cast_instruction_12__20:
  .loc 2 310 9
  # $93.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $93.1:rbx 
  .loc 2 310 9
  # $94.1: @IR_Type = load_struct_member($93.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $94.1:r15 
  .loc 2 310 9
  # $95.1: bool = call(is_389, $94.1, IR_Int32_Type)
  mov rdi, r15
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:rax 
  # jump($95.1, .LABEL__generate_cast_instruction_12__36, .LABEL__generate_cast_instruction_12__37)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_cast_instruction_12__37
.LABEL__generate_cast_instruction_12__36:
  .loc 2 311 13
  # $96.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $96.1:rbx 
  .loc 2 311 13
  # $97.1: bool = call(is_389, $96.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:rax 
  # jump($97.1, .LABEL__generate_cast_instruction_12__38, .LABEL__generate_cast_instruction_12__39)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__39
.LABEL__generate_cast_instruction_12__38:
  .loc 2 312 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] 
.LABEL__generate_cast_instruction_12__39:
  .loc 2 314 13
  # $98.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $98.1:rbx 
  .loc 2 314 13
  # $99.1: bool = call(is_389, $98.1, IR_Int16_Type)
  mov rdi, rbx
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:rax 
  # jump($99.1, .LABEL__generate_cast_instruction_12__41, .LABEL__generate_cast_instruction_12__42)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__42
.LABEL__generate_cast_instruction_12__41:
  .loc 2 315 13
  # $100.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $100.1:rbx 
  .loc 2 315 13
  # $101.1: @FILE = call(write_383, $100.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $101.1:rax 
  .loc 2 315 54
  # $102.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $101.1:rax $102.1:r15 
  .loc 2 315 13
  # $103.1: @FILE = call(write_383, $101.1, $102.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $102.1
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $103.1:rax 
  .loc 2 315 13
  # $104.1: @FILE = call(write_383, $103.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $104.1:rax 
  .loc 2 315 96
  # $105.1: @String = load_struct_member(result_register.1, name_w)
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $104.1:rax $105.1:r15 
  .loc 2 315 13
  # $106.1: @FILE = call(write_383, $104.1, $105.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $105.1
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $106.1:rax 
  .loc 2 315 13
  # $107.1: @FILE = call(end_line_386, $106.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $107.1
  # [discarded value]: $106.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] 
  .loc 2 316 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__42:
  .loc 2 318 13
  # $108.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $108.1:rbx 
  .loc 2 318 13
  # $109.1: bool = call(is_389, $108.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:rax 
  # jump($109.1, .LABEL__generate_cast_instruction_12__44, .LABEL__generate_cast_instruction_12__45)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__45
.LABEL__generate_cast_instruction_12__44:
  .loc 2 319 26
  # $110.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $110.1:rbx 
  .loc 2 319 13
  # $111.1: @FILE = call(write_363, stderr, $110.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $111.1:rax 
  .loc 2 319 13
  # $112.1: @FILE = call(write_383, $111.1, ": Redundant cast")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # ": Redundant cast"
  call write_383
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $112.1:rax 
  .loc 2 319 13
  # $113.1: @FILE = call(end_line_386, $112.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $113.1
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] 
  .loc 2 320 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__45:
  .loc 2 322 13
  # $114.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $114.1:rbx 
  .loc 2 322 13
  # $115.1: bool = call(is_389, $114.1, IR_Int64_Type)
  mov rdi, rbx
  mov rsi, IR_Int64_Type[rip]
  call is_389
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:rax 
  # jump($115.1, .LABEL__generate_cast_instruction_12__47, .LABEL__generate_cast_instruction_12__48)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_cast_instruction_12__48
.LABEL__generate_cast_instruction_12__47:
  .loc 2 323 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] 
.LABEL__generate_cast_instruction_12__48:
  .loc 2 325 13
  # $116.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $116.1:rbx 
  .loc 2 325 13
  # $117.1: bool = call(is_389, $116.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:rax 
  # jump($117.1, .LABEL__generate_cast_instruction_12__50, .LABEL__generate_cast_instruction_12__51)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_cast_instruction_12__51
.LABEL__generate_cast_instruction_12__50:
  .loc 2 326 13
  # $118.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $118.1:rbx 
  .loc 2 326 13
  # $119.1: @FILE = call(write_383, $118.1, "  movsx ")
  mov rdi, rbx
  lea rsi, .LABEL__string_43[rip] # "  movsx "
  call write_383
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $119.1:rax 
  .loc 2 326 54
  # $120.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-32]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $119.1:rax $120.1:r15 
  .loc 2 326 13
  # $121.1: @FILE = call(write_383, $119.1, $120.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $120.1
  # [discarded value]: $119.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $121.1:rax 
  .loc 2 326 13
  # $122.1: @FILE = call(write_383, $121.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $122.1:rax 
  .loc 2 326 96
  # $123.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-32]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:rbx:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $122.1:rax $123.1:r15 
  .loc 2 326 13
  # $124.1: @FILE = call(write_383, $122.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $123.1
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $124.1:rax 
  .loc 2 326 13
  # $125.1: @FILE = call(end_line_386, $124.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $125.1
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] 
  .loc 2 327 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] 
.LABEL__generate_cast_instruction_12__51:
  .loc 2 329 20
  # $126.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $126.1:rax 
  .loc 2 329 49
  # $127.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $126.1:rax $127.1:r15 
  .loc 2 329 49
  # $128.1: @Object_Type = load_struct_member($127.1, object_type)
  mov r14, [r15]
  # [discarded value]: $127.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $126.1:rax $128.1:r14 
  .loc 2 329 49
  # $129.1: @String = load_struct_member_address($128.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $126.1:rax $128.1:r14 $129.1:r15 
  .loc 2 329 20
  # $130.1: @String = call(append_400, $126.1, $129.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $129.1
  # [discarded value]: $128.1
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $130.1:rax 
  .loc 2 329 20
  # $131.1: @String = call(append_400, $130.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $131.1:rax 
  .loc 2 329 103
  # $132.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $131.1:rax $132.1:r15 
  .loc 2 329 103
  # $133.1: @IR_Type = load_struct_member($132.1, type)
  mov r14, [r15+8]
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $131.1:rax $133.1:r14 
  .loc 2 329 103
  # $134.1: @Object_Type = load_struct_member($133.1, object_type)
  mov r15, [r14]
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $131.1:rax $134.1:r15 
  .loc 2 329 103
  # $135.1: @String = load_struct_member_address($134.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $131.1:rax $134.1:r15 $135.1:r14 
  .loc 2 329 20
  # $136.1: @String = call(append_400, $131.1, $135.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $135.1
  # [discarded value]: $134.1
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] $136.1:rax 
  .loc 2 329 9
  # call(abort_35, self.1, $136.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] $117.1:[rbp-40] 
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] $115.1:[rbp-39] 
  # [discarded value]: $115.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] $109.1:[rbp-38] 
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] $99.1:[rbp-37] 
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $97.1:[rbp-36] 
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] 
.LABEL__generate_cast_instruction_12__37:
  .loc 2 331 9
  # $137.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $137.1:rbx 
  .loc 2 331 9
  # $138.1: @IR_Type = load_struct_member($137.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $138.1:r15 
  .loc 2 331 9
  # $139.1: bool = call(is_389, $138.1, IR_Int8_Type)
  mov rdi, r15
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [discarded value]: $138.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:rax 
  # jump($139.1, .LABEL__generate_cast_instruction_12__53, .LABEL__generate_cast_instruction_12__54)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_cast_instruction_12__54
.LABEL__generate_cast_instruction_12__53:
  .loc 2 332 13
  # $140.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $140.1:rbx 
  .loc 2 332 13
  # $141.1: bool = call(is_389, $140.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $140.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:rax 
  # jump($141.1, .LABEL__generate_cast_instruction_12__55, .LABEL__generate_cast_instruction_12__56)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_cast_instruction_12__56
.LABEL__generate_cast_instruction_12__55:
  .loc 2 333 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] 
.LABEL__generate_cast_instruction_12__56:
  .loc 2 335 13
  # $142.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $142.1:rbx 
  .loc 2 335 13
  # $143.1: bool = call(is_389, $142.1, IR_Int16_Type)
  mov rdi, rbx
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:rax 
  # jump($143.1, .LABEL__generate_cast_instruction_12__58, .LABEL__generate_cast_instruction_12__59)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_cast_instruction_12__59
.LABEL__generate_cast_instruction_12__58:
  .loc 2 336 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] 
.LABEL__generate_cast_instruction_12__59:
  .loc 2 338 13
  # $144.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $144.1:rbx 
  .loc 2 338 13
  # $145.1: bool = call(is_389, $144.1, IR_Int32_Type)
  mov rdi, rbx
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [discarded value]: $144.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:rax 
  # jump($145.1, .LABEL__generate_cast_instruction_12__61, .LABEL__generate_cast_instruction_12__62)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_cast_instruction_12__62
.LABEL__generate_cast_instruction_12__61:
  .loc 2 339 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] 
.LABEL__generate_cast_instruction_12__62:
  .loc 2 341 13
  # $146.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $146.1:rbx 
  .loc 2 341 13
  # $147.1: bool = call(is_389, $146.1, IR_Int64_Type)
  mov rdi, rbx
  mov rsi, IR_Int64_Type[rip]
  call is_389
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:rax 
  # jump($147.1, .LABEL__generate_cast_instruction_12__64, .LABEL__generate_cast_instruction_12__65)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_cast_instruction_12__65
.LABEL__generate_cast_instruction_12__64:
  .loc 2 342 13
  # return()
  jmp .LABEL__generate_cast_instruction_12__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] 
.LABEL__generate_cast_instruction_12__65:
  .loc 2 344 13
  # $148.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $148.1:rbx 
  .loc 2 344 13
  # $149.1: bool = call(is_389, $148.1, IR_Int8_Type)
  mov rdi, rbx
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:rax 
  # jump($149.1, .LABEL__generate_cast_instruction_12__67, .LABEL__generate_cast_instruction_12__68)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_cast_instruction_12__68
.LABEL__generate_cast_instruction_12__67:
  .loc 2 345 26
  # $150.1: @Source_Location = load_struct_member(instruction.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $150.1:rbx 
  .loc 2 345 13
  # $151.1: @FILE = call(write_363, stderr, $150.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $150.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $151.1:rax 
  .loc 2 345 13
  # $152.1: @FILE = call(write_383, $151.1, ": Redundant cast")
  mov rdi, rax
  lea rsi, .LABEL__string_42[rip] # ": Redundant cast"
  call write_383
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $152.1:rax 
  .loc 2 345 13
  # $153.1: @FILE = call(end_line_386, $152.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $153.1
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] 
  # jump(.LABEL__generate_cast_instruction_12__68)
.LABEL__generate_cast_instruction_12__68:
  .loc 2 347 20
  # $154.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $154.1:rax 
  .loc 2 347 49
  # $155.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $154.1:rax $155.1:r15 
  .loc 2 347 49
  # $156.1: @Object_Type = load_struct_member($155.1, object_type)
  mov r14, [r15]
  # [discarded value]: $155.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $154.1:rax $156.1:r14 
  .loc 2 347 49
  # $157.1: @String = load_struct_member_address($156.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $154.1:rax $156.1:r14 $157.1:r15 
  .loc 2 347 20
  # $158.1: @String = call(append_400, $154.1, $157.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $157.1
  # [discarded value]: $156.1
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $158.1:rax 
  .loc 2 347 20
  # $159.1: @String = call(append_400, $158.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $159.1:rax 
  .loc 2 347 103
  # $160.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $159.1:rax $160.1:r15 
  .loc 2 347 103
  # $161.1: @IR_Type = load_struct_member($160.1, type)
  mov r14, [r15+8]
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $159.1:rax $161.1:r14 
  .loc 2 347 103
  # $162.1: @Object_Type = load_struct_member($161.1, object_type)
  mov r15, [r14]
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $159.1:rax $162.1:r15 
  .loc 2 347 103
  # $163.1: @String = load_struct_member_address($162.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $159.1:rax $162.1:r15 $163.1:r14 
  .loc 2 347 20
  # $164.1: @String = call(append_400, $159.1, $163.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $163.1
  # [discarded value]: $162.1
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] $164.1:rax 
  .loc 2 347 9
  # call(abort_35, self.1, $164.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $164.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] $149.1:[rbp-41] 
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] $147.1:[rbp-40] 
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] $145.1:[rbp-39] 
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] $143.1:[rbp-38] 
  # [discarded value]: $143.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $141.1:[rbp-37] 
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] 
.LABEL__generate_cast_instruction_12__54:
  .loc 2 349 16
  # $165.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $165.1:rax 
  .loc 2 349 45
  # $166.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $165.1:rax $166.1:r15 
  .loc 2 349 45
  # $167.1: @Object_Type = load_struct_member($166.1, object_type)
  mov r14, [r15]
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $165.1:rax $167.1:r14 
  .loc 2 349 45
  # $168.1: @String = load_struct_member_address($167.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rbx:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $165.1:rax $167.1:r14 $168.1:r15 
  .loc 2 349 16
  # $169.1: @String = call(append_400, $165.1, $168.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $168.1
  # [discarded value]: $167.1
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $169.1:rax 
  .loc 2 349 16
  # $170.1: @String = call(append_400, $169.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $170.1:rax 
  .loc 2 349 99
  # $171.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $170.1:rax $171.1:r15 
  .loc 2 349 99
  # $172.1: @IR_Type = load_struct_member($171.1, type)
  mov r14, [r15+8]
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $170.1:rax $172.1:r14 
  .loc 2 349 99
  # $173.1: @Object_Type = load_struct_member($172.1, object_type)
  mov r15, [r14]
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $170.1:rax $173.1:r15 
  .loc 2 349 99
  # $174.1: @String = load_struct_member_address($173.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $170.1:rax $173.1:r15 $174.1:r14 
  .loc 2 349 16
  # $175.1: @String = call(append_400, $170.1, $174.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $174.1
  # [discarded value]: $173.1
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] $175.1:rax 
  .loc 2 349 5
  # call(abort_35, self.1, $175.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] $139.1:[rbp-36] 
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] $95.1:[rbp-35] 
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] $59.1:[rbp-34] 
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] $7.1:[rbp-33] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] result_register.1:[rbp-32] 
  # [discarded value]: result_register.1
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_cast_instruction_12__end:
  mov rsp, rbp
  pop rbp
  ret

generate_cast_instruction_12__stack_frame_size: .word 48

  .loc 2 352 8
  .text
generate_conditional_jump_instruction_13:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_conditional_jump_instruction_13__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_conditional_jump_instruction_13__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Conditional_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 353 27
  # condition_value.1: @IR_Value = call(get_condition_value_199, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_condition_value_199
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax 
  .loc 2 354 9
  # $2.1: @IR_Type = load_struct_member(condition_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:rax $2.1:rbx 
  .loc 2 354 9
  # $3.1: bool = call(is_389, $2.1, IR_Boolean_Type)
  mov rdi, rbx
  mov rsi, IR_Boolean_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $3.1:rax 
  .loc 2 354 9
  # $4.1: bool = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:rbx 
  # jump($4.1, .LABEL__generate_conditional_jump_instruction_13__2, .LABEL__generate_conditional_jump_instruction_13__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__generate_conditional_jump_instruction_13__3
.LABEL__generate_conditional_jump_instruction_13__2:
  .loc 2 355 9
  # call(abort_35, self.1, "Unsupported value type")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_46[rip] # "Unsupported value type"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__generate_conditional_jump_instruction_13__3:
  .loc 2 358 9
  # $5.1: bool = call(is_389, condition_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__generate_conditional_jump_instruction_13__4, .LABEL__generate_conditional_jump_instruction_13__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_conditional_jump_instruction_13__6
.LABEL__generate_conditional_jump_instruction_13__4:
  .loc 2 359 31
  # condition_value.1: @IR_Variable_Value = condition_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:rax 
  .loc 2 360 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 361 13
  # $9.1: bool = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax $9.1:rbx 
  # jump($9.1, .LABEL__generate_conditional_jump_instruction_13__7, .LABEL__generate_conditional_jump_instruction_13__8)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__generate_conditional_jump_instruction_13__8
.LABEL__generate_conditional_jump_instruction_13__7:
  .loc 2 362 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
.LABEL__generate_conditional_jump_instruction_13__8:
  .loc 2 364 30
  # condition_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx 
  .loc 2 365 13
  # $11.1: bool = condition_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $9.1:[rbp-43] condition_register.3:rbx $11.1:r15 
  # jump($11.1, .LABEL__generate_conditional_jump_instruction_13__9, .LABEL__generate_conditional_jump_instruction_13__5)
  test r15b, r15b
  mov [rbp-51], rbx
  mov [rbp-52], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__5
.LABEL__generate_conditional_jump_instruction_13__9:
  .loc 2 366 34
  # condition_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:rax:[rbp-51] 
  .loc 2 367 13
  # call(generate_load_value_30, self.1, condition_register.4, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-34]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
.LABEL__generate_conditional_jump_instruction_13__5:
  # condition_register.5: @MC_Register = phi(condition_register.2, condition_register.4, condition_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $13.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $14.1: @FILE = call(write_383, $13.1, "  test ")
  mov rdi, rbx
  lea rsi, .LABEL__string_48[rip] # "  test "
  call write_383
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $14.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 45
  # $15.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:rbx:[rbp-51] $14.1:rax $15.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $16.1: @FILE = call(write_383, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $16.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $17.1: @FILE = call(write_383, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.5:[rbp-51] $17.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 90
  # $18.1: @String = load_struct_member(condition_register.5, name_b)
  mov rbx, [rbp-51]
  mov r15, [rbx+32]
  # [discarded value]: condition_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $17.1:rax $18.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $19.1: @FILE = call(write_383, $17.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $19.1:rax condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 373 5
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 374 5
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_46
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 375 9
  # $21.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $21.1:rbx condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 375 9
  # $22.1: bool = load_struct_member($21.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:r15 condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # jump($22.1, .LABEL__generate_conditional_jump_instruction_13__11, .LABEL__generate_conditional_jump_instruction_13__13)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__13
.LABEL__generate_conditional_jump_instruction_13__11:
  .loc 2 376 9
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $33.1:rbx 
  .loc 2 376 9
  # $34.1: @FILE = call(write_383, $33.1, "  jnz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_49[rip] # "  jnz "
  call write_383
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax 
  .loc 2 376 60
  # $35.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $34.1:rax $35.1:r15 
  .loc 2 376 9
  # $36.1: @FILE = call(write_block_label_8, $34.1, $35.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $36.1:rax 
  .loc 2 376 9
  # $37.1: @FILE = call(end_line_386, $36.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 377 13
  # $38.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $38.1:rbx 
  .loc 2 377 13
  # $39.1: bool = load_struct_member($38.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:r15 
  # jump($39.1, .LABEL__generate_conditional_jump_instruction_13__16, .LABEL__generate_conditional_jump_instruction_13__17)
  test r15b, r15b
  mov [rbp-54], r15b
  jz .LABEL__generate_conditional_jump_instruction_13__17
.LABEL__generate_conditional_jump_instruction_13__16:
  .loc 2 378 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
.LABEL__generate_conditional_jump_instruction_13__17:
  .loc 2 380 29
  # $40.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] $40.1:rbx 
  .loc 2 380 9
  # call(generate_block_7, self.1, $40.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
.LABEL__generate_conditional_jump_instruction_13__12:
  # return()
  jmp .LABEL__generate_conditional_jump_instruction_13__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $39.1:[rbp-54] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
.LABEL__generate_conditional_jump_instruction_13__13:
  .loc 2 382 9
  # $23.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $23.1:rbx 
  .loc 2 382 9
  # $24.1: @FILE = call(write_383, $23.1, "  jz ")
  mov rdi, rbx
  lea rsi, .LABEL__string_50[rip] # "  jz "
  call write_383
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax 
  .loc 2 382 59
  # $25.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $24.1:rax $25.1:r15 
  .loc 2 382 9
  # $26.1: @FILE = call(write_block_label_8, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $26.1:rax 
  .loc 2 382 9
  # $27.1: @FILE = call(end_line_386, $26.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 383 29
  # $28.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $28.1:rbx 
  .loc 2 383 9
  # call(generate_block_7, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  .loc 2 384 13
  # $29.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $29.1:rbx 
  .loc 2 384 13
  # $30.1: bool = load_struct_member($29.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $30.1:r15 
  .loc 2 384 13
  # $31.1: bool = $30.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:rbx 
  # jump($31.1, .LABEL__generate_conditional_jump_instruction_13__14, .LABEL__generate_conditional_jump_instruction_13__12)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__generate_conditional_jump_instruction_13__12
.LABEL__generate_conditional_jump_instruction_13__14:
  .loc 2 385 33
  # $32.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rax, [rbp-16]
  mov rbx, [rax+73]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] $32.1:rbx 
  .loc 2 385 13
  # call(generate_block_7, self.1, $32.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__12)
  jmp .LABEL__generate_conditional_jump_instruction_13__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] $31.1:[rbp-54] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] $22.1:[rbp-53] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] condition_register.4:[rbp-51] 
  # [discarded value]: condition_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] $11.1:[rbp-52] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] condition_register.3:[rbp-51] 
  # [discarded value]: condition_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] $9.1:[rbp-43] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__generate_conditional_jump_instruction_13__6:
  .loc 2 370 30
  # condition_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:rax:[rbp-51] 
  .loc 2 371 9
  # call(generate_load_value_30, self.1, condition_register.2, condition_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # jump(.LABEL__generate_conditional_jump_instruction_13__5)
  jmp .LABEL__generate_conditional_jump_instruction_13__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] condition_register.2:[rbp-51] 
  # [discarded value]: condition_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] condition_value.1:[rbp-24] 
  # [discarded value]: condition_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_conditional_jump_instruction_13__end:
  mov rsp, rbp
  pop rbp
  ret

generate_conditional_jump_instruction_13__stack_frame_size: .word 64

  .loc 2 390 8
  .text
generate_comparison_instruction_14:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_comparison_instruction_14__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_comparison_instruction_14__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Comparison_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 391 22
  # left_value.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_left_value_232
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:rax 
  .loc 2 392 23
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:rax 
  .loc 2 393 9
  # $4.1: bool = call(is_389, left_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-32], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__generate_comparison_instruction_14__2, .LABEL__generate_comparison_instruction_14__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_comparison_instruction_14__3
.LABEL__generate_comparison_instruction_14__2:
  .loc 2 393 45
  # $4.2: bool = call(is_389, right_value.1, IR_Variable_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:rax:[rbp-33] 
  # jump(.LABEL__generate_comparison_instruction_14__3)
  mov [rbp-33], al
.LABEL__generate_comparison_instruction_14__3:
  .loc 2 393 9
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, .LABEL__generate_comparison_instruction_14__4, .LABEL__generate_comparison_instruction_14__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__4:
  .loc 2 394 44
  # $6.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $6.1:rax 
  .loc 2 394 29
  # mc_left_value.1: @MC_Value = call(get_value_42, self.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] mc_left_value.1:rax 
  .loc 2 395 13
  # $8.1: @MC_Register = load_struct_member(mc_left_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_left_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:rbx 
  .loc 2 395 13
  # $9.1: bool = $8.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__generate_comparison_instruction_14__6, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__6:
  .loc 2 396 49
  # $10.1: @IR_Variable_Value = right_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $10.1:rax 
  .loc 2 396 34
  # mc_right_value.1: @MC_Value = call(get_value_42, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] mc_right_value.1:rax 
  .loc 2 397 17
  # $12.1: @MC_Register = load_struct_member(mc_right_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_right_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $12.1:rbx 
  .loc 2 397 17
  # $13.1: bool = $12.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:rax 
  # jump($13.1, .LABEL__generate_comparison_instruction_14__8, .LABEL__generate_comparison_instruction_14__5)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_comparison_instruction_14__5
.LABEL__generate_comparison_instruction_14__8:
  .loc 2 398 32
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:rax 
  .loc 2 399 17
  # call(generate_load_value_30, self.1, register.1, left_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-43], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] 
  .loc 2 400 41
  # $15.1: @IR_Variable_Value = left_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] register.1:[rbp-43] $15.1:rax 
  .loc 2 400 17
  # $16.1: @MC_Value = call(map_variable_value_41, self.1, $15.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__5)
.LABEL__generate_comparison_instruction_14__5:
  .loc 2 404 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $17.1:rbx $13.1:[rbp-35] 
  .loc 2 404 5
  # $18.1: @FILE = call(write_383, $17.1, "  cmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_51[rip] # "  cmp "
  call write_383
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $18.1:rax $13.1:[rbp-35] 
  .loc 2 404 5
  # $19.1: @FILE = call(write_operand_34, $18.1, self.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-24]
  call write_operand_34
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $19.1:rax $13.1:[rbp-35] 
  .loc 2 404 5
  # $20.1: @FILE = call(write_383, $19.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $20.1:rax $13.1:[rbp-35] 
  .loc 2 404 5
  # $21.1: @FILE = call(write_operand_34, $20.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-32]
  call write_operand_34
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $21.1:rax $13.1:[rbp-35] 
  .loc 2 404 5
  # $22.1: @FILE = call(end_line_386, $21.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  .loc 2 405 20
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rax $13.1:[rbp-35] 
  .loc 2 406 9
  # $24.1: bool = call(is_389, instruction.1, IR_Equals_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Equals_Comparison_Instruction[rip]
  mov [rbp-43], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:rax $13.1:[rbp-35] 
  # jump($24.1, .LABEL__generate_comparison_instruction_14__10, .LABEL__generate_comparison_instruction_14__12)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_comparison_instruction_14__12
.LABEL__generate_comparison_instruction_14__10:
  .loc 2 407 9
  # $69.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $69.1:rbx 
  .loc 2 407 9
  # $70.1: @FILE = call(write_383, $69.1, "  sete ")
  mov rdi, rbx
  lea rsi, .LABEL__string_52[rip] # "  sete "
  call write_383
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax 
  .loc 2 407 49
  # $71.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $70.1:rax $71.1:r15 
  .loc 2 407 9
  # $72.1: @FILE = call(write_383, $70.1, $71.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $71.1
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $72.1:rax 
  .loc 2 407 9
  # $73.1: @FILE = call(end_line_386, $72.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  .loc 2 408 33
  # $74.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $74.1:rbx 
  .loc 2 408 9
  # $75.1: @MC_Value = call(map_variable_value_41, self.1, $74.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
.LABEL__generate_comparison_instruction_14__11:
  # return()
  jmp .LABEL__generate_comparison_instruction_14__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
.LABEL__generate_comparison_instruction_14__12:
  .loc 2 409 16
  # $25.1: bool = call(is_389, instruction.1, IR_Greater_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Greater_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:rax 
  # jump($25.1, .LABEL__generate_comparison_instruction_14__13, .LABEL__generate_comparison_instruction_14__15)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_comparison_instruction_14__15
.LABEL__generate_comparison_instruction_14__13:
  .loc 2 410 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $62.1:rbx 
  .loc 2 410 9
  # $63.1: @FILE = call(write_383, $62.1, "  setg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_53[rip] # "  setg "
  call write_383
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax 
  .loc 2 410 49
  # $64.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $63.1:rax $64.1:r15 
  .loc 2 410 9
  # $65.1: @FILE = call(write_383, $63.1, $64.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $65.1:rax 
  .loc 2 410 9
  # $66.1: @FILE = call(end_line_386, $65.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  .loc 2 411 33
  # $67.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $67.1:rbx 
  .loc 2 411 9
  # $68.1: @MC_Value = call(map_variable_value_41, self.1, $67.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $68.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
.LABEL__generate_comparison_instruction_14__15:
  .loc 2 412 16
  # $26.1: bool = call(is_389, instruction.1, IR_Greater_Or_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:rax 
  # jump($26.1, .LABEL__generate_comparison_instruction_14__16, .LABEL__generate_comparison_instruction_14__18)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_comparison_instruction_14__18
.LABEL__generate_comparison_instruction_14__16:
  .loc 2 413 9
  # $55.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $55.1:rbx 
  .loc 2 413 9
  # $56.1: @FILE = call(write_383, $55.1, "  setge ")
  mov rdi, rbx
  lea rsi, .LABEL__string_54[rip] # "  setge "
  call write_383
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax 
  .loc 2 413 50
  # $57.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $56.1:rax $57.1:r15 
  .loc 2 413 9
  # $58.1: @FILE = call(write_383, $56.1, $57.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $58.1:rax 
  .loc 2 413 9
  # $59.1: @FILE = call(end_line_386, $58.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  .loc 2 414 33
  # $60.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $60.1:rbx 
  .loc 2 414 9
  # $61.1: @MC_Value = call(map_variable_value_41, self.1, $60.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
.LABEL__generate_comparison_instruction_14__18:
  .loc 2 415 16
  # $27.1: bool = call(is_389, instruction.1, IR_Less_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Less_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:rax 
  # jump($27.1, .LABEL__generate_comparison_instruction_14__19, .LABEL__generate_comparison_instruction_14__21)
  test al, al
  mov [rbp-47], al
  jz .LABEL__generate_comparison_instruction_14__21
.LABEL__generate_comparison_instruction_14__19:
  .loc 2 416 9
  # $48.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $48.1:rbx 
  .loc 2 416 9
  # $49.1: @FILE = call(write_383, $48.1, "  setl ")
  mov rdi, rbx
  lea rsi, .LABEL__string_55[rip] # "  setl "
  call write_383
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax 
  .loc 2 416 49
  # $50.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $49.1:rax $50.1:r15 
  .loc 2 416 9
  # $51.1: @FILE = call(write_383, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $51.1:rax 
  .loc 2 416 9
  # $52.1: @FILE = call(end_line_386, $51.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  .loc 2 417 33
  # $53.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $53.1:rbx 
  .loc 2 417 9
  # $54.1: @MC_Value = call(map_variable_value_41, self.1, $53.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
.LABEL__generate_comparison_instruction_14__21:
  .loc 2 418 16
  # $28.1: bool = call(is_389, instruction.1, IR_Less_Or_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Less_Or_Equal_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:rax 
  # jump($28.1, .LABEL__generate_comparison_instruction_14__22, .LABEL__generate_comparison_instruction_14__24)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_comparison_instruction_14__24
.LABEL__generate_comparison_instruction_14__22:
  .loc 2 419 9
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $41.1:rbx 
  .loc 2 419 9
  # $42.1: @FILE = call(write_383, $41.1, "  setle ")
  mov rdi, rbx
  lea rsi, .LABEL__string_56[rip] # "  setle "
  call write_383
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax 
  .loc 2 419 50
  # $43.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $42.1:rax $43.1:r15 
  .loc 2 419 9
  # $44.1: @FILE = call(write_383, $42.1, $43.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $44.1:rax 
  .loc 2 419 9
  # $45.1: @FILE = call(end_line_386, $44.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  .loc 2 420 33
  # $46.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $46.1:rbx 
  .loc 2 420 9
  # $47.1: @MC_Value = call(map_variable_value_41, self.1, $46.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
.LABEL__generate_comparison_instruction_14__24:
  .loc 2 421 16
  # $29.1: bool = call(is_389, instruction.1, IR_Not_Equal_Comparison_Instruction)
  mov rdi, [rbp-16]
  mov rsi, IR_Not_Equal_Comparison_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:rax 
  # jump($29.1, .LABEL__generate_comparison_instruction_14__25, .LABEL__generate_comparison_instruction_14__27)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_comparison_instruction_14__27
.LABEL__generate_comparison_instruction_14__25:
  .loc 2 422 9
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $34.1:rbx 
  .loc 2 422 9
  # $35.1: @FILE = call(write_383, $34.1, "  setne ")
  mov rdi, rbx
  lea rsi, .LABEL__string_57[rip] # "  setne "
  call write_383
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax 
  .loc 2 422 50
  # $36.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:rbx:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $35.1:rax $36.1:r15 
  .loc 2 422 9
  # $37.1: @FILE = call(write_383, $35.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $37.1:rax 
  .loc 2 422 9
  # $38.1: @FILE = call(end_line_386, $37.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  .loc 2 423 33
  # $39.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $39.1:rbx 
  .loc 2 423 9
  # $40.1: @MC_Value = call(map_variable_value_41, self.1, $39.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-43]
  call map_variable_value_41
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # jump(.LABEL__generate_comparison_instruction_14__11)
  jmp .LABEL__generate_comparison_instruction_14__11
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
.LABEL__generate_comparison_instruction_14__27:
  .loc 2 425 20
  # $30.1: @String = call(clone_391, "Unsupported comparison instruction type: ")
  lea rdi, .LABEL__string_58[rip] # "Unsupported comparison instruction type: "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax 
  .loc 2 425 78
  # $31.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $31.1:r15 
  .loc 2 425 78
  # $32.1: @String = load_struct_member_address($31.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $30.1:rax $31.1:r15 $32.1:r14 
  .loc 2 425 20
  # $33.1: @String = call(append_400, $30.1, $32.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] $33.1:rax 
  .loc 2 425 9
  # call(abort_35, self.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] $29.1:[rbp-49] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] $28.1:[rbp-48] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] $27.1:[rbp-47] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] $26.1:[rbp-46] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] $25.1:[rbp-45] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $24.1:[rbp-44] $13.1:[rbp-35] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] register.1:[rbp-43] $13.1:[rbp-35] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] $13.1:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] left_value.1:[rbp-24] right_value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_comparison_instruction_14__end:
  mov rsp, rbp
  pop rbp
  ret

generate_comparison_instruction_14__stack_frame_size: .word 64

  .loc 2 429 8
  .text
generate_direct_jump_instruction_15:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_direct_jump_instruction_15__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_direct_jump_instruction_15__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Direct_Jump_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 430 5
  # call(release_all_registers_46, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_46
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 431 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 431 9
  # $2.1: bool = load_struct_member($1.1, is_being_generated)
  mov r15b, [rbx+48]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__generate_direct_jump_instruction_15__2, .LABEL__generate_direct_jump_instruction_15__4)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__generate_direct_jump_instruction_15__4
.LABEL__generate_direct_jump_instruction_15__2:
  .loc 2 432 9
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $4.1:rbx 
  .loc 2 432 9
  # $5.1: @FILE = call(write_383, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  jmp "
  call write_383
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 2 432 60
  # $6.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $2.1:[rbp-17] $5.1:rax $6.1:r15 
  .loc 2 432 9
  # $7.1: @FILE = call(write_block_label_8, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] $7.1:rax 
  .loc 2 432 9
  # $8.1: @FILE = call(end_line_386, $7.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
.LABEL__generate_direct_jump_instruction_15__3:
  # return()
  jmp .LABEL__generate_direct_jump_instruction_15__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
.LABEL__generate_direct_jump_instruction_15__4:
  .loc 2 434 29
  # $3.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rax, [rbp-8]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 2 434 9
  # call(generate_block_7, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call generate_block_7
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_direct_jump_instruction_15__3)
  jmp .LABEL__generate_direct_jump_instruction_15__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_direct_jump_instruction_15__end:
  mov rsp, rbp
  pop rbp
  ret

generate_direct_jump_instruction_15__stack_frame_size: .word 32

  .loc 2 438 8
  .text
generate_divide_instruction_16:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_divide_instruction_16__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_divide_instruction_16__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Divide_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 439 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 439 5
  # call(release_register_47, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 440 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 440 49
  # $3.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 440 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 441 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 441 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 442 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 442 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 443 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 443 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 445 40
  # $7.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] $7.1:r15 
  .loc 2 445 40
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] $8.1:r14 
  .loc 2 445 21
  # type_size.1: isize = call(get_type_size_56, self.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call get_type_size_56
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:rax 
  .loc 2 446 9
  # $10.1: bool = type_size.1 == 8
  cmp rax, 8
  sete bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__generate_divide_instruction_16__2, .LABEL__generate_divide_instruction_16__4)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_divide_instruction_16__4
.LABEL__generate_divide_instruction_16__2:
  .loc 2 447 9
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $21.1:rbx 
  .loc 2 447 9
  # $22.1: @FILE = call(write_383, $21.1, "  cqo")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  cqo"
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $22.1:rax 
  .loc 2 447 9
  # $23.1: @FILE = call(end_line_386, $22.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # jump(.LABEL__generate_divide_instruction_16__3)
.LABEL__generate_divide_instruction_16__3:
  .loc 2 456 23
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:rax 
  .loc 2 457 9
  # $25.1: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:rax 
  # jump($25.1, .LABEL__generate_divide_instruction_16__11, .LABEL__generate_divide_instruction_16__13)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_divide_instruction_16__13
.LABEL__generate_divide_instruction_16__11:
  .loc 2 458 24
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax 
  .loc 2 459 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax 
  .loc 2 460 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-42], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  .loc 2 461 9
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $31.1:rbx 
  .loc 2 461 9
  # $32.1: @FILE = call(write_383, $31.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  idiv "
  call write_383
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  .loc 2 462 13
  # $33.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:rax 
  # jump($33.1, .LABEL__generate_divide_instruction_16__14, .LABEL__generate_divide_instruction_16__16)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_divide_instruction_16__16
.LABEL__generate_divide_instruction_16__14:
  .loc 2 463 13
  # $44.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $44.1:rbx 
  .loc 2 463 36
  # $45.1: @String = load_struct_member(register.1, name_q)
  mov r15, [rbp-42]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $44.1:rbx $45.1:r14 
  .loc 2 463 13
  # $46.1: @FILE = call(write_383, $44.1, $45.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # jump(.LABEL__generate_divide_instruction_16__15)
.LABEL__generate_divide_instruction_16__15:
  .loc 2 471 9
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $47.1:rbx 
  .loc 2 471 9
  # $48.1: @FILE = call(end_line_386, $47.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 472 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-42]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax:[rbp-42] $33.1:[rbp-43] 
  # jump(.LABEL__generate_divide_instruction_16__12)
.LABEL__generate_divide_instruction_16__12:
  .loc 2 476 5
  # $49.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $49.1:rbx 
  .loc 2 476 5
  # store_struct_member($49.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 477 5
  # $50.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $50.1:rbx 
  .loc 2 477 5
  # store_struct_member($50.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 478 29
  # $51.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $51.1:r15 
  .loc 2 478 55
  # $52.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r14, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $51.1:r15 $52.1:r14 
  .loc 2 478 5
  # $53.1: @MC_Value = call(map_variable_value_41, self.1, $51.1, $52.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # return()
  jmp .LABEL__generate_divide_instruction_16__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
.LABEL__generate_divide_instruction_16__16:
  .loc 2 464 20
  # $34.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:rax 
  # jump($34.1, .LABEL__generate_divide_instruction_16__17, .LABEL__generate_divide_instruction_16__19)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_divide_instruction_16__19
.LABEL__generate_divide_instruction_16__17:
  .loc 2 465 13
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $41.1:rbx 
  .loc 2 465 36
  # $42.1: @String = load_struct_member(register.1, name_d)
  mov r15, [rbp-42]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $41.1:rbx $42.1:r14 
  .loc 2 465 13
  # $43.1: @FILE = call(write_383, $41.1, $42.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
  # jump(.LABEL__generate_divide_instruction_16__15)
  jmp .LABEL__generate_divide_instruction_16__15
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
.LABEL__generate_divide_instruction_16__19:
  .loc 2 466 20
  # $35.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:rax 
  # jump($35.1, .LABEL__generate_divide_instruction_16__20, .LABEL__generate_divide_instruction_16__22)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_divide_instruction_16__22
.LABEL__generate_divide_instruction_16__20:
  .loc 2 467 13
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $38.1:rbx 
  .loc 2 467 36
  # $39.1: @String = load_struct_member(register.1, name_w)
  mov r15, [rbp-42]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $38.1:rbx $39.1:r14 
  .loc 2 467 13
  # $40.1: @FILE = call(write_383, $38.1, $39.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
  # jump(.LABEL__generate_divide_instruction_16__15)
  jmp .LABEL__generate_divide_instruction_16__15
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
.LABEL__generate_divide_instruction_16__22:
  .loc 2 469 24
  # $36.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $36.1:rax 
  .loc 2 469 24
  # $37.1: @String = call(append_399, $36.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_399
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $37.1:rax 
  .loc 2 469 13
  # call(abort_35, self.1, $37.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
.LABEL__generate_divide_instruction_16__13:
  .loc 2 474 9
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $26.1:rbx 
  .loc 2 474 9
  # $27.1: @FILE = call(write_383, $26.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  idiv "
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $27.1:rax 
  .loc 2 474 9
  # $28.1: @FILE = call(write_operand_34, $27.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-33]
  call write_operand_34
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $28.1:rax 
  .loc 2 474 9
  # $29.1: @FILE = call(end_line_386, $28.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
  # jump(.LABEL__generate_divide_instruction_16__12)
  jmp .LABEL__generate_divide_instruction_16__12
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] 
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
.LABEL__generate_divide_instruction_16__4:
  .loc 2 448 16
  # $11.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__generate_divide_instruction_16__5, .LABEL__generate_divide_instruction_16__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_divide_instruction_16__7
.LABEL__generate_divide_instruction_16__5:
  .loc 2 449 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $18.1:rbx 
  .loc 2 449 9
  # $19.1: @FILE = call(write_383, $18.1, "  cdq")
  mov rdi, rbx
  lea rsi, .LABEL__string_62[rip] # "  cdq"
  call write_383
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $19.1:rax 
  .loc 2 449 9
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
  # jump(.LABEL__generate_divide_instruction_16__3)
  jmp .LABEL__generate_divide_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__generate_divide_instruction_16__7:
  .loc 2 450 16
  # $12.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  # jump($12.1, .LABEL__generate_divide_instruction_16__8, .LABEL__generate_divide_instruction_16__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_divide_instruction_16__10
.LABEL__generate_divide_instruction_16__8:
  .loc 2 451 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $15.1:rbx 
  .loc 2 451 9
  # $16.1: @FILE = call(write_383, $15.1, "  cwd")
  mov rdi, rbx
  lea rsi, .LABEL__string_63[rip] # "  cwd"
  call write_383
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $16.1:rax 
  .loc 2 451 9
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_divide_instruction_16__3)
  jmp .LABEL__generate_divide_instruction_16__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
.LABEL__generate_divide_instruction_16__10:
  .loc 2 453 20
  # $13.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $13.1:rax 
  .loc 2 453 20
  # $14.1: @String = call(append_399, $13.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_399
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $14.1:rax 
  .loc 2 453 9
  # call(abort_35, self.1, $14.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] 
  # [discarded value]: type_size.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_divide_instruction_16__end:
  mov rsp, rbp
  pop rbp
  ret

generate_divide_instruction_16__stack_frame_size: .word 48

  .loc 2 481 8
  .text
generate_load_array_item_instruction_17:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_array_item_instruction_17__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_array_item_instruction_17__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 482 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 483 47
  # $2.1: @IR_Value = call(get_array_value_203, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_203
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 483 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 484 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 484 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 485 53
  # $5.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 485 53
  # $6.1: @IR_Type = load_struct_member($5.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $6.1:r15 
  .loc 2 485 34
  # result_value_type_size.1: isize = call(get_type_size_56, self.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:rax 
  .loc 2 487 23
  # index_value.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_index_value_204
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:rax 
  .loc 2 488 9
  # $9.1: bool = call(is_389, index_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-40], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_array_item_instruction_17__2, .LABEL__generate_load_array_item_instruction_17__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_array_item_instruction_17__4
.LABEL__generate_load_array_item_instruction_17__2:
  .loc 2 489 27
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax 
  .loc 2 490 13
  # $29.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax $29.1:rbx 
  .loc 2 490 13
  # $30.1: bool = call(is_389, $29.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  mov [rbp-49], rax
  call is_389
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $30.1:rax 
  .loc 2 490 13
  # $31.1: bool = $30.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:rbx 
  # jump($31.1, .LABEL__generate_load_array_item_instruction_17__7, .LABEL__generate_load_array_item_instruction_17__8)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__generate_load_array_item_instruction_17__8
.LABEL__generate_load_array_item_instruction_17__7:
  .loc 2 491 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
.LABEL__generate_load_array_item_instruction_17__8:
  .loc 2 493 28
  # $33.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-49]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] $33.1:rbx 
  .loc 2 493 27
  # index_value.1: isize = load_struct_member($33.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 
  .loc 2 494 13
  # $35.1: bool = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:rax:[rbp-49] $31.1:[rbp-50] index_value.1:r15 $35.1:rbx 
  # jump($35.1, .LABEL__generate_load_array_item_instruction_17__9, .LABEL__generate_load_array_item_instruction_17__3)
  test bl, bl
  mov [rbp-51], bl
  mov [rbp-59], r15
  jz .LABEL__generate_load_array_item_instruction_17__3
.LABEL__generate_load_array_item_instruction_17__9:
  .loc 2 495 17
  # $36.1: bool = index_value.1 < 0
  cmp QWORD PTR [rbp-59], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:rax 
  # jump($36.1, .LABEL__generate_load_array_item_instruction_17__11, .LABEL__generate_load_array_item_instruction_17__12)
  test al, al
  mov [rbp-60], al
  jz .LABEL__generate_load_array_item_instruction_17__12
.LABEL__generate_load_array_item_instruction_17__11:
  .loc 2 496 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__12:
  .loc 2 498 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $37.1:rbx 
  .loc 2 498 13
  # $38.1: @FILE = call(write_383, $37.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax 
  .loc 2 498 52
  # $39.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $38.1:rax $39.1:r15 
  .loc 2 498 13
  # $40.1: @FILE = call(write_383, $38.1, $39.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $40.1:rax 
  .loc 2 498 13
  # $41.1: @FILE = call(write_383, $40.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax 
  .loc 2 498 94
  # $42.1: isize = index_value.1 * result_value_type_size.1
  mov rbx, [rbp-59]
  imul rbx, QWORD PTR [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $41.1:rax $42.1:rbx 
  .loc 2 498 13
  # $43.1: @FILE = call(write_382, $41.1, $42.1)
  mov rdi, rax
  mov rsi, rbx
  call write_382
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $43.1:rax 
  .loc 2 498 13
  # $44.1: @FILE = call(end_line_386, $43.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
.LABEL__generate_load_array_item_instruction_17__3:
  .loc 2 509 19
  # address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = result_register.1, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = result_register.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  .loc 2 510 9
  # $46.1: bool = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete r15b
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:rax $46.1:r15 index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump($46.1, .LABEL__generate_load_array_item_instruction_17__13, .LABEL__generate_load_array_item_instruction_17__15)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_array_item_instruction_17__15
.LABEL__generate_load_array_item_instruction_17__13:
  .loc 2 511 9
  # $70.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $70.1:rbx 
  .loc 2 511 9
  # $71.1: @FILE = call(write_383, $70.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax 
  .loc 2 511 48
  # $72.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $71.1:rax $72.1:r15 
  .loc 2 511 9
  # $73.1: @FILE = call(write_383, $71.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $73.1:rax 
  .loc 2 511 9
  # $74.1: @FILE = call(write_383, $73.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $74.1:rax 
  .loc 2 511 9
  # $75.1: @FILE = call(write_55, $74.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $75.1:rax 
  .loc 2 511 9
  # $76.1: @FILE = call(end_line_386, $75.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
.LABEL__generate_load_array_item_instruction_17__14:
  # return()
  jmp .LABEL__generate_load_array_item_instruction_17__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
.LABEL__generate_load_array_item_instruction_17__15:
  .loc 2 512 16
  # $47.1: bool = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:rax 
  # jump($47.1, .LABEL__generate_load_array_item_instruction_17__16, .LABEL__generate_load_array_item_instruction_17__18)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_array_item_instruction_17__18
.LABEL__generate_load_array_item_instruction_17__16:
  .loc 2 513 9
  # $63.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $63.1:rbx 
  .loc 2 513 9
  # $64.1: @FILE = call(write_383, $63.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax 
  .loc 2 513 48
  # $65.1: @String = load_struct_member(result_register.1, name_d)
  mov rbx, [rbp-24]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $64.1:rax $65.1:r15 
  .loc 2 513 9
  # $66.1: @FILE = call(write_383, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $66.1:rax 
  .loc 2 513 9
  # $67.1: @FILE = call(write_383, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $67.1:rax 
  .loc 2 513 9
  # $68.1: @FILE = call(write_55, $67.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $68.1:rax 
  .loc 2 513 9
  # $69.1: @FILE = call(end_line_386, $68.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
.LABEL__generate_load_array_item_instruction_17__18:
  .loc 2 514 16
  # $48.1: bool = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:rax 
  # jump($48.1, .LABEL__generate_load_array_item_instruction_17__19, .LABEL__generate_load_array_item_instruction_17__21)
  test al, al
  mov [rbp-71], al
  jz .LABEL__generate_load_array_item_instruction_17__21
.LABEL__generate_load_array_item_instruction_17__19:
  .loc 2 515 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $56.1:rbx 
  .loc 2 515 9
  # $57.1: @FILE = call(write_383, $56.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax 
  .loc 2 515 48
  # $58.1: @String = load_struct_member(result_register.1, name_w)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $57.1:rax $58.1:r15 
  .loc 2 515 9
  # $59.1: @FILE = call(write_383, $57.1, $58.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $59.1:rax 
  .loc 2 515 9
  # $60.1: @FILE = call(write_383, $59.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $60.1:rax 
  .loc 2 515 9
  # $61.1: @FILE = call(write_55, $60.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $61.1:rax 
  .loc 2 515 9
  # $62.1: @FILE = call(end_line_386, $61.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
.LABEL__generate_load_array_item_instruction_17__21:
  .loc 2 517 9
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $49.1:rbx 
  .loc 2 517 9
  # $50.1: @FILE = call(write_383, $49.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax 
  .loc 2 517 48
  # $51.1: @String = load_struct_member(result_register.1, name_b)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $50.1:rax $51.1:r15 
  .loc 2 517 9
  # $52.1: @FILE = call(write_383, $50.1, $51.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $52.1:rax 
  .loc 2 517 9
  # $53.1: @FILE = call(write_383, $52.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $53.1:rax 
  .loc 2 517 9
  # $54.1: @FILE = call(write_55, $53.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_55
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] $54.1:rax 
  .loc 2 517 9
  # $55.1: @FILE = call(end_line_386, $54.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # jump(.LABEL__generate_load_array_item_instruction_17__14)
  jmp .LABEL__generate_load_array_item_instruction_17__14
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] $48.1:[rbp-71] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] $47.1:[rbp-70] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] $46.1:[rbp-69] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] address.1:[rbp-68] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] $36.1:[rbp-60] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] $35.1:[rbp-51] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] index_value.1:[rbp-59] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] $31.1:[rbp-50] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_value.1:[rbp-49] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
.LABEL__generate_load_array_item_instruction_17__4:
  .loc 2 501 30
  # index_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rax 
  .loc 2 502 50
  # $11.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-49], rax
  call get_index_value_204
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $11.1:rax 
  .loc 2 502 9
  # call(generate_load_value_30, self.1, index_register.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-49]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  .loc 2 503 13
  # $12.1: bool = result_value_type_size.1 > 1
  cmp QWORD PTR [rbp-32], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:rax 
  # jump($12.1, .LABEL__generate_load_array_item_instruction_17__5, .LABEL__generate_load_array_item_instruction_17__6)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_array_item_instruction_17__6
.LABEL__generate_load_array_item_instruction_17__5:
  .loc 2 504 13
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $13.1:rbx 
  .loc 2 504 13
  # $14.1: @FILE = call(write_383, $13.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_65[rip] # "  imul "
  call write_383
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $14.1:rax 
  .loc 2 504 53
  # $15.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $14.1:rax $15.1:r15 
  .loc 2 504 13
  # $16.1: @FILE = call(write_383, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $16.1:rax 
  .loc 2 504 13
  # $17.1: @FILE = call(write_383, $16.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $17.1:rax 
  .loc 2 504 13
  # $18.1: @FILE = call(write_382, $17.1, result_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_382
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $18.1:rax 
  .loc 2 504 13
  # $19.1: @FILE = call(end_line_386, $18.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__6)
.LABEL__generate_load_array_item_instruction_17__6:
  .loc 2 506 9
  # $20.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $20.1:rbx 
  .loc 2 506 9
  # $21.1: @FILE = call(write_383, $20.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax 
  .loc 2 506 48
  # $22.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rbx:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $21.1:rax $22.1:r15 
  .loc 2 506 9
  # $23.1: @FILE = call(write_383, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $23.1:rax 
  .loc 2 506 9
  # $24.1: @FILE = call(write_383, $23.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $24.1:rax 
  .loc 2 506 90
  # $25.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:rbx:[rbp-49] $12.1:[rbp-50] $24.1:rax $25.1:r15 
  .loc 2 506 9
  # $26.1: @FILE = call(write_383, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] $26.1:rax 
  .loc 2 506 9
  # $27.1: @FILE = call(end_line_386, $26.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__generate_load_array_item_instruction_17__3)
  jmp .LABEL__generate_load_array_item_instruction_17__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] index_register.1:[rbp-49] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] $9.1:[rbp-41] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] result_value_type_size.1:[rbp-32] index_value.1:[rbp-40] 
  # [discarded value]: index_value.1
  # [discarded value]: result_value_type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_array_item_instruction_17__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_array_item_instruction_17__stack_frame_size: .word 80

  .loc 2 521 8
  .text
generate_load_variable_address_instruction_18:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_address_instruction_18__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_address_instruction_18__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Address_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 522 41
  # $1.1: @IR_Variable_Value = call(get_variable_value_210, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_variable_value_210
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $1.1:rax 
  .loc 2 522 26
  # variable_value.1: @MC_Value = call(get_value_42, self.1, $1.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax 
  .loc 2 523 9
  # $3.1: bool = variable_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__generate_load_variable_address_instruction_18__2, .LABEL__generate_load_variable_address_instruction_18__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_load_variable_address_instruction_18__3
.LABEL__generate_load_variable_address_instruction_18__2:
  .loc 2 524 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__generate_load_variable_address_instruction_18__3:
  .loc 2 526 9
  # $4.1: @MC_Address = load_struct_member(variable_value.1, address)
  mov rax, [rbp-24]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax:[rbp-24] $3.1:[rbp-25] $4.1:rbx 
  .loc 2 526 9
  # $5.1: bool = $4.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rax:[rbp-24] $3.1:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__generate_load_variable_address_instruction_18__4, .LABEL__generate_load_variable_address_instruction_18__5)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__generate_load_variable_address_instruction_18__5
.LABEL__generate_load_variable_address_instruction_18__4:
  .loc 2 527 9
  # call(abort_35, self.1, "Variable has no address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_66[rip] # "Variable has no address"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__generate_load_variable_address_instruction_18__5:
  .loc 2 529 48
  # $6.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 529 74
  # $7.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-34], rbx
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $6.1:[rbp-34] $7.1:rax 
  .loc 2 529 24
  # result_value.1: @MC_Value = call(map_variable_value_41, self.1, $6.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-34]
  mov rdx, rax
  call map_variable_value_41
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:rax 
  .loc 2 530 5
  # $9.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:rax $9.1:r15 
  .loc 2 530 5
  # $10.1: @FILE = call(write_383, $9.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-34], rax
  call write_383
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] result_value.1:[rbp-34] $10.1:rax 
  .loc 2 530 44
  # $11.1: @MC_Register = load_struct_member(result_value.1, register)
  mov rbx, [rbp-34]
  mov r15, [rbx+32]
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $10.1:rax $11.1:r15 
  .loc 2 530 44
  # $12.1: @String = load_struct_member($11.1, name_q)
  mov rbx, [r15+8]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $10.1:rax $12.1:rbx 
  .loc 2 530 5
  # $13.1: @FILE = call(write_383, $10.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call write_383
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $13.1:rax 
  .loc 2 530 5
  # $14.1: @FILE = call(write_383, $13.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $14.1:rax 
  .loc 2 530 92
  # $15.1: @MC_Address = load_struct_member(variable_value.1, address)
  mov rbx, [rbp-24]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:rbx:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $14.1:rax $15.1:r15 
  .loc 2 530 5
  # $16.1: @FILE = call(write_55, $14.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] $16.1:rax 
  .loc 2 530 5
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
  # return()
  jmp .LABEL__generate_load_variable_address_instruction_18__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] variable_value.1:[rbp-24] 
  # [discarded value]: variable_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_variable_address_instruction_18__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_address_instruction_18__stack_frame_size: .word 48

  .loc 2 533 8
  .text
generate_load_variable_instruction_19:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_variable_instruction_19__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_variable_instruction_19__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Variable_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 534 9
  # $1.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rax, [rsi+65]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 534 9
  # $2.1: bool = call(is_389, $1.1, IR_Function_Parameter)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, IR_Function_Parameter[rip]
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_variable_instruction_19__2, .LABEL__generate_load_variable_instruction_19__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_load_variable_instruction_19__4
.LABEL__generate_load_variable_instruction_19__2:
  .loc 2 535 25
  # parameter.1: @IR_Function_Parameter = load_struct_member(instruction.1, variable)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx 
  .loc 2 536 31
  # $10.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov r15, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $10.1:r15 
  .loc 2 536 31
  # $11.1: @IR_Function = load_struct_member($10.1, function)
  mov r14, [r15+16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $11.1:r14 
  .loc 2 536 31
  # $12.1: @List = load_struct_member($11.1, parameters)
  mov r15, [r14+32]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter.1:rbx $12.1:r15 
  .loc 2 536 31
  # parameter_index.1: isize = call(index_of_371, $12.1, parameter.1)
  mov rdi, r15
  mov rsi, rbx
  call index_of_371
  # [discarded value]: $12.1
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax 
  .loc 2 537 13
  # $14.1: bool = parameter_index.1 < 0
  cmp rax, 0
  setl bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:rax $14.1:rbx 
  # jump($14.1, .LABEL__generate_load_variable_instruction_19__5, .LABEL__generate_load_variable_instruction_19__6)
  test bl, bl
  mov [rbp-25], rax
  mov [rbp-26], bl
  jz .LABEL__generate_load_variable_instruction_19__6
.LABEL__generate_load_variable_instruction_19__5:
  .loc 2 538 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] 
.LABEL__generate_load_variable_instruction_19__6:
  .loc 2 540 13
  # $15.1: bool = parameter_index.1 == 0
  cmp QWORD PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:rax 
  # jump($15.1, .LABEL__generate_load_variable_instruction_19__7, .LABEL__generate_load_variable_instruction_19__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_load_variable_instruction_19__9
.LABEL__generate_load_variable_instruction_19__7:
  .loc 2 541 37
  # $37.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $37.1:rbx 
  .loc 2 541 63
  # $38.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov r15, [rbp-8]
  mov r14, [r15+57]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $37.1:rbx $38.1:r14 
  .loc 2 541 13
  # $39.1: @MC_Value = call(map_variable_value_41, self.1, $37.1, $38.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
.LABEL__generate_load_variable_instruction_19__3:
  # return()
  jmp .LABEL__generate_load_variable_instruction_19__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
.LABEL__generate_load_variable_instruction_19__9:
  .loc 2 542 20
  # $16.1: bool = parameter_index.1 == 1
  cmp QWORD PTR [rbp-25], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:rax 
  # jump($16.1, .LABEL__generate_load_variable_instruction_19__10, .LABEL__generate_load_variable_instruction_19__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_variable_instruction_19__12
.LABEL__generate_load_variable_instruction_19__10:
  .loc 2 543 37
  # $34.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $34.1:rbx 
  .loc 2 543 63
  # $35.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov r15, [rbp-8]
  mov r14, [r15+49]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $34.1:rbx $35.1:r14 
  .loc 2 543 13
  # $36.1: @MC_Value = call(map_variable_value_41, self.1, $34.1, $35.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
.LABEL__generate_load_variable_instruction_19__12:
  .loc 2 544 20
  # $17.1: bool = parameter_index.1 == 2
  cmp QWORD PTR [rbp-25], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:rax 
  # jump($17.1, .LABEL__generate_load_variable_instruction_19__13, .LABEL__generate_load_variable_instruction_19__15)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_variable_instruction_19__15
.LABEL__generate_load_variable_instruction_19__13:
  .loc 2 545 37
  # $31.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $31.1:rbx 
  .loc 2 545 63
  # $32.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r15, [rbp-8]
  mov r14, [r15+33]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $31.1:rbx $32.1:r14 
  .loc 2 545 13
  # $33.1: @MC_Value = call(map_variable_value_41, self.1, $31.1, $32.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
.LABEL__generate_load_variable_instruction_19__15:
  .loc 2 546 20
  # $18.1: bool = parameter_index.1 == 3
  cmp QWORD PTR [rbp-25], 3
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:rax 
  # jump($18.1, .LABEL__generate_load_variable_instruction_19__16, .LABEL__generate_load_variable_instruction_19__18)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_load_variable_instruction_19__18
.LABEL__generate_load_variable_instruction_19__16:
  .loc 2 547 37
  # $28.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $28.1:rbx 
  .loc 2 547 63
  # $29.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov r15, [rbp-8]
  mov r14, [r15+25]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $28.1:rbx $29.1:r14 
  .loc 2 547 13
  # $30.1: @MC_Value = call(map_variable_value_41, self.1, $28.1, $29.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
.LABEL__generate_load_variable_instruction_19__18:
  .loc 2 548 20
  # $19.1: bool = parameter_index.1 == 4
  cmp QWORD PTR [rbp-25], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:rax 
  # jump($19.1, .LABEL__generate_load_variable_instruction_19__19, .LABEL__generate_load_variable_instruction_19__21)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_load_variable_instruction_19__21
.LABEL__generate_load_variable_instruction_19__19:
  .loc 2 549 37
  # $25.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $25.1:rbx 
  .loc 2 549 63
  # $26.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov r15, [rbp-8]
  mov r14, [r15+81]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $25.1:rbx $26.1:r14 
  .loc 2 549 13
  # $27.1: @MC_Value = call(map_variable_value_41, self.1, $25.1, $26.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
.LABEL__generate_load_variable_instruction_19__21:
  .loc 2 550 20
  # $20.1: bool = parameter_index.1 == 5
  cmp QWORD PTR [rbp-25], 5
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:rax 
  # jump($20.1, .LABEL__generate_load_variable_instruction_19__22, .LABEL__generate_load_variable_instruction_19__24)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_load_variable_instruction_19__24
.LABEL__generate_load_variable_instruction_19__22:
  .loc 2 551 37
  # $22.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $22.1:rbx 
  .loc 2 551 63
  # $23.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov r15, [rbp-8]
  mov r14, [r15+89]
  # [live values]: self.1:r15:[rbp-8] instruction.1:rax:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $22.1:rbx $23.1:r14 
  .loc 2 551 13
  # $24.1: @MC_Value = call(map_variable_value_41, self.1, $22.1, $23.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
  # jump(.LABEL__generate_load_variable_instruction_19__3)
  jmp .LABEL__generate_load_variable_instruction_19__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
.LABEL__generate_load_variable_instruction_19__24:
  .loc 2 553 24
  # $21.1: @String = call(clone_391, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] $21.1:rax 
  .loc 2 553 13
  # call(abort_35, self.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] $20.1:[rbp-32] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] $19.1:[rbp-31] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] $18.1:[rbp-30] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] $17.1:[rbp-29] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] $16.1:[rbp-28] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] $15.1:[rbp-27] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] $14.1:[rbp-26] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] parameter_index.1:[rbp-25] 
  # [discarded value]: parameter_index.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__generate_load_variable_instruction_19__4:
  .loc 2 556 20
  # $3.1: @String = call(clone_391, "Unsupported variable type: ")
  lea rdi, .LABEL__string_68[rip] # "Unsupported variable type: "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 2 556 64
  # $4.1: @IR_Variable = load_struct_member(instruction.1, variable)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $4.1:r15 
  .loc 2 556 64
  # $5.1: @Object_Type = load_struct_member($4.1, object_type)
  mov r14, [r15]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $5.1:r14 
  .loc 2 556 64
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $3.1:rax $5.1:r14 $6.1:r15 
  .loc 2 556 20
  # $7.1: @String = call(append_400, $3.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 2 556 9
  # call(abort_35, self.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_variable_instruction_19__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_variable_instruction_19__stack_frame_size: .word 32

  .loc 2 560 8
  .text
generate_load_struct_member_instruction_20:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_struct_member_instruction_20__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_struct_member_instruction_20__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Load_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 561 35
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_207, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_207
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  .loc 2 563 9
  # $2.1: bool = call(is_389, ir_struct_pointer_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_load_struct_member_instruction_20__2, .LABEL__generate_load_struct_member_instruction_20__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_load_struct_member_instruction_20__4
.LABEL__generate_load_struct_member_instruction_20__2:
  .loc 2 564 39
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 565 39
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_42, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 566 13
  # $6.1: bool = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__generate_load_struct_member_instruction_20__5, .LABEL__generate_load_struct_member_instruction_20__6)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_load_struct_member_instruction_20__6
.LABEL__generate_load_struct_member_instruction_20__5:
  .loc 2 567 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_load_struct_member_instruction_20__6:
  .loc 2 569 35
  # struct_pointer_register.3: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx 
  .loc 2 570 13
  # $8.1: bool = struct_pointer_register.3 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:rbx $8.1:r15 
  # jump($8.1, .LABEL__generate_load_struct_member_instruction_20__7, .LABEL__generate_load_struct_member_instruction_20__3)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__3
.LABEL__generate_load_struct_member_instruction_20__7:
  .loc 2 571 17
  # $9.1: @MC_Address = load_struct_member(mc_struct_pointer_value.1, address)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $9.1:rbx 
  .loc 2 571 17
  # $10.1: bool = $9.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:r15 
  # jump($10.1, .LABEL__generate_load_struct_member_instruction_20__9, .LABEL__generate_load_struct_member_instruction_20__10)
  test r15b, r15b
  mov [rbp-52], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__10
.LABEL__generate_load_struct_member_instruction_20__9:
  .loc 2 572 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
.LABEL__generate_load_struct_member_instruction_20__10:
  .loc 2 574 39
  # struct_pointer_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:rax:[rbp-50] 
  .loc 2 575 13
  # call(generate_load_value_30, self.1, struct_pointer_register.4, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 576 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, ir_struct_pointer_value.1, struct_pointer_register.4)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
.LABEL__generate_load_struct_member_instruction_20__3:
  # struct_pointer_register.8: @MC_Register = phi(struct_pointer_register.2, struct_pointer_register.4, struct_pointer_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 584 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 585 29
  # $14.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rax $14.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 585 5
  # $15.1: @MC_Value = call(map_variable_value_41, self.1, $14.1, result_register.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  mov [rbp-60], rax
  call map_variable_value_41
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 586 53
  # $16.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] $16.1:rbx struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 586 37
  # struct_type_member_offset.1: isize = call(get_offset_33, self.1, $16.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 587 9
  # $18.1: bool = load_struct_member(instruction.1, load_address)
  mov rbx, [rbp-16]
  mov r15b, [rbx+73]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:rax $18.1:r15 struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # jump($18.1, .LABEL__generate_load_struct_member_instruction_20__11, .LABEL__generate_load_struct_member_instruction_20__13)
  test r15b, r15b
  mov [rbp-68], rax
  mov [rbp-69], r15b
  jz .LABEL__generate_load_struct_member_instruction_20__13
.LABEL__generate_load_struct_member_instruction_20__11:
  .loc 2 588 9
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $45.1:rbx 
  .loc 2 588 9
  # $46.1: @FILE = call(write_383, $45.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax 
  .loc 2 588 48
  # $47.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $46.1:rax $47.1:r15 
  .loc 2 588 9
  # $48.1: @FILE = call(write_383, $46.1, $47.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $48.1:rax 
  .loc 2 588 9
  # $49.1: @FILE = call(write_383, $48.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax 
  .loc 2 588 90
  # $50.1: @String = load_struct_member(struct_pointer_register.8, name_q)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $49.1:rax $50.1:r15 
  .loc 2 588 9
  # $51.1: @FILE = call(write_383, $49.1, $50.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $50.1
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $51.1:rax 
  .loc 2 588 9
  # $52.1: @FILE = call(end_line_386, $51.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  .loc 2 589 13
  # $53.1: bool = struct_type_member_offset.1 > 0
  cmp QWORD PTR [rbp-68], 0
  setg al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:rax 
  # jump($53.1, .LABEL__generate_load_struct_member_instruction_20__26, .LABEL__generate_load_struct_member_instruction_20__12)
  test al, al
  mov [rbp-70], al
  jz .LABEL__generate_load_struct_member_instruction_20__12
.LABEL__generate_load_struct_member_instruction_20__26:
  .loc 2 590 13
  # $54.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $54.1:rbx 
  .loc 2 590 13
  # $55.1: @FILE = call(write_383, $54.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax 
  .loc 2 590 52
  # $56.1: @String = load_struct_member(result_register.1, name_q)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:rbx:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $55.1:rax $56.1:r15 
  .loc 2 590 13
  # $57.1: @FILE = call(write_383, $55.1, $56.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $57.1:rax 
  .loc 2 590 13
  # $58.1: @FILE = call(write_383, $57.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $58.1:rax 
  .loc 2 590 13
  # $59.1: @FILE = call(write_382, $58.1, struct_type_member_offset.1)
  mov rdi, rax
  mov rsi, [rbp-68]
  call write_382
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] $59.1:rax 
  .loc 2 590 13
  # $60.1: @FILE = call(end_line_386, $59.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
.LABEL__generate_load_struct_member_instruction_20__12:
  .loc 2 608 5
  # store_struct_member(struct_pointer_register.8, is_reserved, false)
  mov rax, [rbp-50]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rax:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # return()
  jmp .LABEL__generate_load_struct_member_instruction_20__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $53.1:[rbp-70] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
.LABEL__generate_load_struct_member_instruction_20__13:
  .loc 2 593 57
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $19.1:rbx 
  .loc 2 593 57
  # $20.1: @IR_Type = load_struct_member($19.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] $20.1:r15 
  .loc 2 593 38
  # result_value_type_size.1: isize = call(get_type_size_56, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax 
  .loc 2 594 9
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:rax $22.1:r15 
  .loc 2 594 9
  # $23.1: @FILE = call(write_383, $22.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  mov [rbp-77], rax
  call write_383
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  .loc 2 595 13
  # $24.1: bool = result_value_type_size.1 == 8
  cmp QWORD PTR [rbp-77], 8
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__generate_load_struct_member_instruction_20__14, .LABEL__generate_load_struct_member_instruction_20__16)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_load_struct_member_instruction_20__16
.LABEL__generate_load_struct_member_instruction_20__14:
  .loc 2 596 13
  # $37.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx 
  .loc 2 596 36
  # $38.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-60]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $37.1:rbx $38.1:r14 
  .loc 2 596 13
  # $39.1: @FILE = call(write_383, $37.1, $38.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
.LABEL__generate_load_struct_member_instruction_20__15:
  .loc 2 606 9
  # $40.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $40.1:rbx 
  .loc 2 606 9
  # $41.1: @FILE = call(write_383, $40.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:rax 
  .loc 2 606 44
  # $42.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.8, offset = struct_type_member_offset.1)
  mov [rbp-86], rax
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.8
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-68]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:rbx:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:r15:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $41.1:[rbp-86] $42.1:rax 
  .loc 2 606 9
  # $43.1: @FILE = call(write_55, $41.1, $42.1)
  mov rdi, [rbp-86]
  mov rsi, rax
  call write_55
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $43.1:rax 
  .loc 2 606 9
  # $44.1: @FILE = call(end_line_386, $43.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__12)
  jmp .LABEL__generate_load_struct_member_instruction_20__12
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__generate_load_struct_member_instruction_20__16:
  .loc 2 597 20
  # $25.1: bool = result_value_type_size.1 == 4
  cmp QWORD PTR [rbp-77], 4
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:rax 
  # jump($25.1, .LABEL__generate_load_struct_member_instruction_20__17, .LABEL__generate_load_struct_member_instruction_20__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_load_struct_member_instruction_20__19
.LABEL__generate_load_struct_member_instruction_20__17:
  .loc 2 598 13
  # $34.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx 
  .loc 2 598 36
  # $35.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $34.1:rbx $35.1:r14 
  .loc 2 598 13
  # $36.1: @FILE = call(write_383, $34.1, $35.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
.LABEL__generate_load_struct_member_instruction_20__19:
  .loc 2 599 20
  # $26.1: bool = result_value_type_size.1 == 2
  cmp QWORD PTR [rbp-77], 2
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:rax 
  # jump($26.1, .LABEL__generate_load_struct_member_instruction_20__20, .LABEL__generate_load_struct_member_instruction_20__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_load_struct_member_instruction_20__22
.LABEL__generate_load_struct_member_instruction_20__20:
  .loc 2 600 13
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx 
  .loc 2 600 36
  # $32.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-60]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $31.1:rbx $32.1:r14 
  .loc 2 600 13
  # $33.1: @FILE = call(write_383, $31.1, $32.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
.LABEL__generate_load_struct_member_instruction_20__22:
  .loc 2 601 20
  # $27.1: bool = result_value_type_size.1 == 1
  cmp QWORD PTR [rbp-77], 1
  sete al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:rax 
  # jump($27.1, .LABEL__generate_load_struct_member_instruction_20__23, .LABEL__generate_load_struct_member_instruction_20__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_load_struct_member_instruction_20__25
.LABEL__generate_load_struct_member_instruction_20__23:
  .loc 2 602 13
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx 
  .loc 2 602 36
  # $29.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-60]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:r15:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] $28.1:rbx $29.1:r14 
  .loc 2 602 13
  # $30.1: @FILE = call(write_383, $28.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__15)
  jmp .LABEL__generate_load_struct_member_instruction_20__15
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
.LABEL__generate_load_struct_member_instruction_20__25:
  .loc 2 604 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] $27.1:[rbp-81] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] $26.1:[rbp-80] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] $25.1:[rbp-79] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] result_value_type_size.1:[rbp-77] 
  # [discarded value]: result_value_type_size.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $18.1:[rbp-69] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.8:[rbp-50] result_register.1:[rbp-60] struct_type_member_offset.1:[rbp-68] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: result_register.1
  # [discarded value]: struct_pointer_register.8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] struct_pointer_register.4:[rbp-50] 
  # [discarded value]: struct_pointer_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] $10.1:[rbp-52] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] $8.1:[rbp-51] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] struct_pointer_register.3:[rbp-50] 
  # [discarded value]: struct_pointer_register.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_load_struct_member_instruction_20__4:
  .loc 2 579 35
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 580 9
  # store_struct_member(struct_pointer_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 581 9
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_load_struct_member_instruction_20__3)
  jmp .LABEL__generate_load_struct_member_instruction_20__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_struct_member_instruction_20__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_struct_member_instruction_20__stack_frame_size: .word 96

  .loc 2 611 8
  .text
generate_modulo_instruction_21:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_modulo_instruction_21__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_modulo_instruction_21__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Modulo_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 612 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 612 5
  # call(release_register_47, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 613 30
  # $2.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $2.1:rbx 
  .loc 2 613 49
  # $3.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rbx
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 2 613 5
  # call(generate_load_value_30, self.1, $2.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 614 5
  # $4.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-16]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $4.1:rbx 
  .loc 2 614 5
  # store_struct_member($4.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 615 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $5.1:rbx 
  .loc 2 615 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 616 5
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $6.1:rbx 
  .loc 2 616 5
  # store_struct_member($6.1, is_reserved, true)
  mov BYTE PTR [rbx+40], 1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 618 40
  # $7.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] $7.1:r15 
  .loc 2 618 40
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] $8.1:r14 
  .loc 2 618 21
  # type_size.1: isize = call(get_type_size_56, self.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call get_type_size_56
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:rax 
  .loc 2 619 9
  # $10.1: bool = type_size.1 == 8
  cmp rax, 8
  sete bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__generate_modulo_instruction_21__2, .LABEL__generate_modulo_instruction_21__4)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_modulo_instruction_21__4
.LABEL__generate_modulo_instruction_21__2:
  .loc 2 620 9
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $21.1:rbx 
  .loc 2 620 9
  # $22.1: @FILE = call(write_383, $21.1, "  cqo")
  mov rdi, rbx
  lea rsi, .LABEL__string_60[rip] # "  cqo"
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $22.1:rax 
  .loc 2 620 9
  # $23.1: @FILE = call(end_line_386, $22.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
.LABEL__generate_modulo_instruction_21__3:
  .loc 2 629 23
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:rax 
  .loc 2 630 9
  # $25.1: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:rax 
  # jump($25.1, .LABEL__generate_modulo_instruction_21__11, .LABEL__generate_modulo_instruction_21__13)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_modulo_instruction_21__13
.LABEL__generate_modulo_instruction_21__11:
  .loc 2 631 24
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax 
  .loc 2 632 9
  # store_struct_member(register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax 
  .loc 2 633 9
  # call(generate_load_value_30, self.1, register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-42], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  .loc 2 634 9
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $31.1:rbx 
  .loc 2 634 9
  # $32.1: @FILE = call(write_383, $31.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  idiv "
  call write_383
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  .loc 2 635 13
  # $33.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:rax 
  # jump($33.1, .LABEL__generate_modulo_instruction_21__14, .LABEL__generate_modulo_instruction_21__16)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_modulo_instruction_21__16
.LABEL__generate_modulo_instruction_21__14:
  .loc 2 636 13
  # $44.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $44.1:rbx 
  .loc 2 636 36
  # $45.1: @String = load_struct_member(register.1, name_q)
  mov r15, [rbp-42]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $44.1:rbx $45.1:r14 
  .loc 2 636 13
  # $46.1: @FILE = call(write_383, $44.1, $45.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # jump(.LABEL__generate_modulo_instruction_21__15)
.LABEL__generate_modulo_instruction_21__15:
  .loc 2 644 9
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $47.1:rbx 
  .loc 2 644 9
  # $48.1: @FILE = call(end_line_386, $47.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 645 9
  # store_struct_member(register.1, is_reserved, false)
  mov rax, [rbp-42]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:rax:[rbp-42] $33.1:[rbp-43] 
  # jump(.LABEL__generate_modulo_instruction_21__12)
.LABEL__generate_modulo_instruction_21__12:
  .loc 2 649 5
  # $49.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-16]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $49.1:rbx 
  .loc 2 649 5
  # store_struct_member($49.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 650 5
  # $50.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $50.1:rbx 
  .loc 2 650 5
  # store_struct_member($50.1, is_reserved, false)
  mov BYTE PTR [rbx+40], 0
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  .loc 2 651 29
  # $51.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $51.1:r15 
  .loc 2 651 55
  # $52.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov r14, [rax+33]
  # [live values]: self.1:rax:[rbp-16] instruction.1:rbx:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $51.1:r15 $52.1:r14 
  .loc 2 651 5
  # $53.1: @MC_Value = call(map_variable_value_41, self.1, $51.1, $52.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # return()
  jmp .LABEL__generate_modulo_instruction_21__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
.LABEL__generate_modulo_instruction_21__16:
  .loc 2 637 20
  # $34.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:rax 
  # jump($34.1, .LABEL__generate_modulo_instruction_21__17, .LABEL__generate_modulo_instruction_21__19)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_modulo_instruction_21__19
.LABEL__generate_modulo_instruction_21__17:
  .loc 2 638 13
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $41.1:rbx 
  .loc 2 638 36
  # $42.1: @String = load_struct_member(register.1, name_d)
  mov r15, [rbp-42]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $41.1:rbx $42.1:r14 
  .loc 2 638 13
  # $43.1: @FILE = call(write_383, $41.1, $42.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
  # jump(.LABEL__generate_modulo_instruction_21__15)
  jmp .LABEL__generate_modulo_instruction_21__15
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
.LABEL__generate_modulo_instruction_21__19:
  .loc 2 639 20
  # $35.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:rax 
  # jump($35.1, .LABEL__generate_modulo_instruction_21__20, .LABEL__generate_modulo_instruction_21__22)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_modulo_instruction_21__22
.LABEL__generate_modulo_instruction_21__20:
  .loc 2 640 13
  # $38.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $38.1:rbx 
  .loc 2 640 36
  # $39.1: @String = load_struct_member(register.1, name_w)
  mov r15, [rbp-42]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:r15:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $38.1:rbx $39.1:r14 
  .loc 2 640 13
  # $40.1: @FILE = call(write_383, $38.1, $39.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
  # jump(.LABEL__generate_modulo_instruction_21__15)
  jmp .LABEL__generate_modulo_instruction_21__15
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
.LABEL__generate_modulo_instruction_21__22:
  .loc 2 642 24
  # $36.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $36.1:rax 
  .loc 2 642 24
  # $37.1: @String = call(append_399, $36.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_399
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] $37.1:rax 
  .loc 2 642 13
  # call(abort_35, self.1, $37.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] $35.1:[rbp-45] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] $34.1:[rbp-44] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] $33.1:[rbp-43] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] register.1:[rbp-42] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
.LABEL__generate_modulo_instruction_21__13:
  .loc 2 647 9
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $26.1:rbx 
  .loc 2 647 9
  # $27.1: @FILE = call(write_383, $26.1, "  idiv ")
  mov rdi, rbx
  lea rsi, .LABEL__string_61[rip] # "  idiv "
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $27.1:rax 
  .loc 2 647 9
  # $28.1: @FILE = call(write_operand_34, $27.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-33]
  call write_operand_34
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] $28.1:rax 
  .loc 2 647 9
  # $29.1: @FILE = call(end_line_386, $28.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
  # jump(.LABEL__generate_modulo_instruction_21__12)
  jmp .LABEL__generate_modulo_instruction_21__12
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] $25.1:[rbp-34] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] right_value.1:[rbp-33] 
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
.LABEL__generate_modulo_instruction_21__4:
  .loc 2 621 16
  # $11.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__generate_modulo_instruction_21__5, .LABEL__generate_modulo_instruction_21__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_modulo_instruction_21__7
.LABEL__generate_modulo_instruction_21__5:
  .loc 2 622 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $18.1:rbx 
  .loc 2 622 9
  # $19.1: @FILE = call(write_383, $18.1, "  cdq")
  mov rdi, rbx
  lea rsi, .LABEL__string_62[rip] # "  cdq"
  call write_383
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $19.1:rax 
  .loc 2 622 9
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
  jmp .LABEL__generate_modulo_instruction_21__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__generate_modulo_instruction_21__7:
  .loc 2 623 16
  # $12.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  # jump($12.1, .LABEL__generate_modulo_instruction_21__8, .LABEL__generate_modulo_instruction_21__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_modulo_instruction_21__10
.LABEL__generate_modulo_instruction_21__8:
  .loc 2 624 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $15.1:rbx 
  .loc 2 624 9
  # $16.1: @FILE = call(write_383, $15.1, "  cwd")
  mov rdi, rbx
  lea rsi, .LABEL__string_63[rip] # "  cwd"
  call write_383
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $16.1:rax 
  .loc 2 624 9
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
  # jump(.LABEL__generate_modulo_instruction_21__3)
  jmp .LABEL__generate_modulo_instruction_21__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
.LABEL__generate_modulo_instruction_21__10:
  .loc 2 626 20
  # $13.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $13.1:rax 
  .loc 2 626 20
  # $14.1: @String = call(append_399, $13.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_399
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] $14.1:rax 
  .loc 2 626 9
  # call(abort_35, self.1, $14.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] $12.1:[rbp-27] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] $10.1:[rbp-25] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] type_size.1:[rbp-24] 
  # [discarded value]: type_size.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_modulo_instruction_21__end:
  mov rsp, rbp
  pop rbp
  ret

generate_modulo_instruction_21__stack_frame_size: .word 48

  .loc 2 654 8
  .text
generate_multiply_instruction_22:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_multiply_instruction_22__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_multiply_instruction_22__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Multiply_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 655 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 656 47
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $2.1:rax 
  .loc 2 656 5
  # call(generate_load_value_30, self.1, result_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 657 29
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $3.1:rbx 
  .loc 2 657 5
  # $4.1: @MC_Value = call(map_variable_value_41, self.1, $3.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 658 5
  # $5.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] $5.1:rbx 
  .loc 2 658 5
  # $6.1: @FILE = call(write_383, $5.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_65[rip] # "  imul "
  call write_383
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] 
  .loc 2 659 40
  # $7.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $7.1:rbx 
  .loc 2 659 40
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] $8.1:r15 
  .loc 2 659 21
  # type_size.1: isize = call(get_type_size_56, self.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call get_type_size_56
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:rax 
  .loc 2 660 9
  # $10.1: bool = type_size.1 == 8
  cmp rax, 8
  sete bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__generate_multiply_instruction_22__2, .LABEL__generate_multiply_instruction_22__4)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__generate_multiply_instruction_22__4
.LABEL__generate_multiply_instruction_22__2:
  .loc 2 661 9
  # $25.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $25.1:rbx 
  .loc 2 661 32
  # $26.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $25.1:rbx $26.1:r14 
  .loc 2 661 9
  # $27.1: @FILE = call(write_383, $25.1, $26.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] 
  # jump(.LABEL__generate_multiply_instruction_22__3)
.LABEL__generate_multiply_instruction_22__3:
  .loc 2 671 5
  # $28.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $28.1:rbx 
  .loc 2 671 5
  # $29.1: @FILE = call(write_383, $28.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $29.1:rax 
  .loc 2 671 54
  # $30.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-41], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $29.1:[rbp-41] $30.1:rax 
  .loc 2 671 5
  # $31.1: @FILE = call(write_operand_34, $29.1, self.1, $30.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-16]
  mov rdx, rax
  call write_operand_34
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $31.1:rax 
  .loc 2 671 5
  # $32.1: @FILE = call(end_line_386, $31.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] 
  # return()
  jmp .LABEL__generate_multiply_instruction_22__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] 
.LABEL__generate_multiply_instruction_22__4:
  .loc 2 662 16
  # $11.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:rax 
  # jump($11.1, .LABEL__generate_multiply_instruction_22__5, .LABEL__generate_multiply_instruction_22__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__generate_multiply_instruction_22__7
.LABEL__generate_multiply_instruction_22__5:
  .loc 2 663 9
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $22.1:rbx 
  .loc 2 663 32
  # $23.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $22.1:rbx $23.1:r14 
  .loc 2 663 9
  # $24.1: @FILE = call(write_383, $22.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] 
  # jump(.LABEL__generate_multiply_instruction_22__3)
  jmp .LABEL__generate_multiply_instruction_22__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] 
.LABEL__generate_multiply_instruction_22__7:
  .loc 2 664 16
  # $12.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:rax 
  # jump($12.1, .LABEL__generate_multiply_instruction_22__8, .LABEL__generate_multiply_instruction_22__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_multiply_instruction_22__10
.LABEL__generate_multiply_instruction_22__8:
  .loc 2 665 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $19.1:rbx 
  .loc 2 665 32
  # $20.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $19.1:rbx $20.1:r14 
  .loc 2 665 9
  # $21.1: @FILE = call(write_383, $19.1, $20.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] 
  # jump(.LABEL__generate_multiply_instruction_22__3)
  jmp .LABEL__generate_multiply_instruction_22__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] 
.LABEL__generate_multiply_instruction_22__10:
  .loc 2 666 16
  # $13.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:rax 
  # jump($13.1, .LABEL__generate_multiply_instruction_22__11, .LABEL__generate_multiply_instruction_22__13)
  test al, al
  mov [rbp-36], al
  jz .LABEL__generate_multiply_instruction_22__13
.LABEL__generate_multiply_instruction_22__11:
  .loc 2 667 9
  # $16.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] $16.1:rbx 
  .loc 2 667 32
  # $17.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] $16.1:rbx $17.1:r14 
  .loc 2 667 9
  # $18.1: @FILE = call(write_383, $16.1, $17.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] 
  # jump(.LABEL__generate_multiply_instruction_22__3)
  jmp .LABEL__generate_multiply_instruction_22__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] 
.LABEL__generate_multiply_instruction_22__13:
  .loc 2 669 20
  # $14.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] $14.1:rax 
  .loc 2 669 20
  # $15.1: @String = call(append_399, $14.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] $15.1:rax 
  .loc 2 669 9
  # call(abort_35, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] $13.1:[rbp-36] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] $12.1:[rbp-35] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] $11.1:[rbp-34] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] $10.1:[rbp-33] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] 
  # [discarded value]: type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_multiply_instruction_22__end:
  mov rsp, rbp
  pop rbp
  ret

generate_multiply_instruction_22__stack_frame_size: .word 48

  .loc 2 674 8
  .text
generate_new_instruction_23:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_new_instruction_23__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_new_instruction_23__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_New_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 675 5
  # call(release_all_registers_46, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call release_all_registers_46
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 676 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $1.1:rbx 
  .loc 2 676 5
  # $2.1: @FILE = call(write_383, $1.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $2.1:rax 
  .loc 2 676 44
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rbx, [rbp-16]
  mov r15, [rbx+57]
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $3.1:r15 
  .loc 2 676 44
  # $4.1: @String = load_struct_member($3.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-16] instruction.1:[rbp-8] $2.1:rax $4.1:r14 
  .loc 2 676 5
  # $5.1: @FILE = call(write_383, $2.1, $4.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $5.1:rax 
  .loc 2 676 5
  # $6.1: @FILE = call(write_383, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:rax 
  .loc 2 676 107
  # $7.1: @IR_Type = load_struct_member(instruction.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+65]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] $6.1:rax $7.1:r15 
  .loc 2 676 88
  # $8.1: isize = call(get_type_size_56, self.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call get_type_size_56
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $6.1:[rbp-24] $8.1:rax 
  .loc 2 676 5
  # $9.1: @FILE = call(write_382, $6.1, $8.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call write_382
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $9.1:rax 
  .loc 2 676 5
  # $10.1: @FILE = call(end_line_386, $9.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 677 5
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] $11.1:rbx 
  .loc 2 677 5
  # $12.1: @FILE = call(write_383, $11.1, "  call ")
  mov rdi, rbx
  lea rsi, .LABEL__string_41[rip] # "  call "
  call write_383
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $12.1:rax 
  .loc 2 677 5
  # $13.1: @FILE = call(write_383, $12.1, "malloc")
  mov rdi, rax
  lea rsi, .LABEL__string_69[rip] # "malloc"
  call write_383
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] $13.1:rax 
  .loc 2 677 5
  # $14.1: @FILE = call(end_line_386, $13.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 678 29
  # $15.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] $15.1:rbx 
  .loc 2 678 55
  # $16.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov r15, [rbp-16]
  mov r14, [r15+17]
  # [live values]: self.1:r15:[rbp-16] instruction.1:rax:[rbp-8] $15.1:rbx $16.1:r14 
  .loc 2 678 5
  # $17.1: @MC_Value = call(map_variable_value_41, self.1, $15.1, $16.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call map_variable_value_41
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] 
  .loc 2 679 31
  # $18.1: @IR_Value = call(get_init_value_215, instruction.1)
  mov rdi, [rbp-8]
  call get_init_value_215
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-16] $18.1:rax 
  .loc 2 679 102
  # $19.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rbx, [rbp-16]
  mov r15, [rbx+17]
  # [live values]: self.1:rbx:[rbp-16] $18.1:rax $19.1:r15 
  .loc 2 679 61
  # $20.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $19.1, offset = 0)
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $19.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] $18.1:[rbp-24] $20.1:rax 
  .loc 2 679 5
  # call(generate_store_value_31, self.1, $18.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__generate_new_instruction_23__end
  # [live values]: 
.LABEL__generate_new_instruction_23__end:
  mov rsp, rbp
  pop rbp
  ret

generate_new_instruction_23__stack_frame_size: .word 32

  .loc 2 682 8
  .text
generate_phi_instruction_24:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_phi_instruction_24__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_phi_instruction_24__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Phi_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 683 27
  # $1.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 2 683 27
  # result_variable.1: @IR_Variable = load_struct_member($1.1, variable)
  mov rbx, [rax+48]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx 
  .loc 2 684 36
  # $3.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx $3.1:rax 
  .loc 2 684 36
  # instruction_values_entry.1: @IR_Values_Map_Entry = load_struct_member($3.1, first_entry)
  mov r15, [rax]
  # [discarded value]: $3.1
  # [live values]: self.1:rdi instruction.1:rsi result_variable.1:rbx instruction_values_entry.1:r15 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
.LABEL__generate_phi_instruction_24__2:
  # instruction_values_entry.2: @IR_Values_Map_Entry = phi(instruction_values_entry.1, instruction_values_entry.5)
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  .loc 2 685 12
  # $5.1: bool = instruction_values_entry.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:rax 
  # jump($5.1, .LABEL__generate_phi_instruction_24__3, .LABEL__generate_phi_instruction_24__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_phi_instruction_24__4
.LABEL__generate_phi_instruction_24__3:
  .loc 2 686 33
  # instruction_value.1: @IR_Variable_Value = load_struct_member(instruction_values_entry.2, value)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx 
  .loc 2 687 32
  # $8.1: @IR_Variable = load_struct_member(instruction_value.1, variable)
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $8.1:r15 
  .loc 2 687 13
  # $9.1: bool = result_variable.1 != $8.1
  cmp QWORD PTR [rbp-8], r15
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:rax:[rbp-32] $5.1:[rbp-33] instruction_value.1:rbx $9.1:r14 
  # jump($9.1, .LABEL__generate_phi_instruction_24__5, .LABEL__generate_phi_instruction_24__6)
  test r14b, r14b
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__generate_phi_instruction_24__6
.LABEL__generate_phi_instruction_24__5:
  .loc 2 688 35
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-24]
  call find_unused_register_38
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:rax 
  .loc 2 689 13
  # call(generate_load_value_30, self.1, result_register.1, instruction_value.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, [rbp-41]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] 
  .loc 2 690 37
  # $11.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] instruction.1:rax:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] result_register.1:[rbp-50] $11.1:rbx 
  .loc 2 690 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, $11.1, result_register.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: result_register.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  .loc 2 691 13
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__generate_phi_instruction_24__6:
  .loc 2 693 36
  # instruction_values_entry.5: @IR_Values_Map_Entry = load_struct_member(instruction_values_entry.2, next_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:rbx:[rbp-32] 
  # jump(.LABEL__generate_phi_instruction_24__2)
  mov [rbp-32], rbx
  jmp .LABEL__generate_phi_instruction_24__2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] instruction_values_entry.5:[rbp-32] 
  # [discarded value]: instruction_values_entry.5
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] instruction_value.1:[rbp-41] 
  # [discarded value]: instruction_value.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
.LABEL__generate_phi_instruction_24__4:
  # return()
  jmp .LABEL__generate_phi_instruction_24__end
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] $5.1:[rbp-33] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] instruction_values_entry.2:[rbp-32] 
  # [discarded value]: instruction_values_entry.2
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] instruction.1:[rbp-16] result_variable.1:[rbp-8] instruction_values_entry.1:[rbp-32] 
  # [discarded value]: instruction_values_entry.1
  # [discarded value]: result_variable.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_phi_instruction_24__end:
  mov rsp, rbp
  pop rbp
  ret

generate_phi_instruction_24__stack_frame_size: .word 64

  .loc 2 697 8
  .text
generate_return_instruction_25:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_return_instruction_25__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_return_instruction_25__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Return_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 698 24
  # return_value.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_return_value_218
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax 
  .loc 2 699 9
  # $2.1: bool = return_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__generate_return_instruction_25__2, .LABEL__generate_return_instruction_25__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__generate_return_instruction_25__3
.LABEL__generate_return_instruction_25__2:
  .loc 2 700 34
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 700 9
  # call(generate_load_value_30, self.1, $3.1, return_value.1)
  mov rdi, rax
  mov rsi, rbx
  mov rdx, [rbp-24]
  call generate_load_value_30
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # jump(.LABEL__generate_return_instruction_25__3)
.LABEL__generate_return_instruction_25__3:
  .loc 2 702 5
  # call(release_all_registers_46, self.1)
  mov rdi, [rbp-8]
  call release_all_registers_46
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  .loc 2 703 5
  # $4.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $4.1:rbx 
  .loc 2 703 5
  # $5.1: @FILE = call(write_383, $4.1, "  jmp ")
  mov rdi, rbx
  lea rsi, .LABEL__string_59[rip] # "  jmp "
  call write_383
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax 
  .loc 2 703 63
  # $6.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $6.1:r15 
  .loc 2 703 63
  # $7.1: @IR_Function = load_struct_member($6.1, function)
  mov r14, [r15+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $5.1:rax $7.1:r14 
  .loc 2 703 5
  # $8.1: @FILE = call(write_function_end_label_5, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r14
  call write_function_end_label_5
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 703 5
  # $9.1: @FILE = call(end_line_386, $8.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # return()
  jmp .LABEL__generate_return_instruction_25__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] return_value.1:[rbp-24] 
  # [discarded value]: return_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_return_instruction_25__end:
  mov rsp, rbp
  pop rbp
  ret

generate_return_instruction_25__stack_frame_size: .word 32

  .loc 2 706 8
  .text
generate_set_instruction_26:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_set_instruction_26__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_set_instruction_26__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Set_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 707 20
  # ir_value.1: @IR_Value = call(get_value_221, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_value_221
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax 
  .loc 2 708 9
  # $2.1: bool = call(is_389, ir_value.1, IR_Undefined_Value)
  mov rdi, rax
  mov rsi, IR_Undefined_Value[rip]
  mov [rbp-24], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_set_instruction_26__2, .LABEL__generate_set_instruction_26__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_set_instruction_26__3
.LABEL__generate_set_instruction_26__2:
  .loc 2 709 20
  # $3.1: @String = call(clone_391, "Looks like ")
  lea rdi, .LABEL__string_70[rip] # "Looks like "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 2 709 48
  # $4.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $4.1:r15 
  .loc 2 709 48
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $5.1:r14 
  .loc 2 709 48
  # $6.1: @String = load_struct_member($5.1, name)
  mov r15, [r14+16]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $6.1:r15 
  .loc 2 709 20
  # $7.1: @String = call(append_400, $3.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $6.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $7.1:rax 
  .loc 2 709 20
  # $8.1: @String = call(append_400, $7.1, " is not properly initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_71[rip] # " is not properly initialized"
  call append_400
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $8.1:rax 
  .loc 2 709 9
  # call(abort_35, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_set_instruction_26__3:
  .loc 2 711 9
  # $9.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $9.1:rbx 
  .loc 2 711 9
  # $10.1: bool = call(is_389, $9.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:rax 
  # jump($10.1, .LABEL__generate_set_instruction_26__4, .LABEL__generate_set_instruction_26__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_set_instruction_26__6
.LABEL__generate_set_instruction_26__4:
  .loc 2 712 39
  # $20.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $20.1:rbx 
  .loc 2 712 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax 
  .loc 2 713 13
  # $22.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $22.1:rbx 
  .loc 2 713 13
  # $23.1: bool = $22.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax $23.1:r15 
  # jump($23.1, .LABEL__generate_set_instruction_26__13, .LABEL__generate_set_instruction_26__14)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__generate_set_instruction_26__14
.LABEL__generate_set_instruction_26__13:
  .loc 2 714 90
  # $24.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:rax:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $24.1:rbx 
  .loc 2 714 71
  # $25.1: isize = call(get_type_size_56, self.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] $25.1:rax 
  .loc 2 714 36
  # mc_value_address.1: @MC_Local_Variable_Address = call(create_local_variable_address_44, self.1, $25.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_local_variable_address_44
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax 
  .loc 2 715 37
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] instruction.1:rbx:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] mc_value_address.1:rax $27.1:r15 
  .loc 2 715 13
  # call(map_variable_value_40, self.1, $27.1, mc_value_address.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, rax
  call map_variable_value_40
  # [discarded value]: $27.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__14)
.LABEL__generate_set_instruction_26__14:
  .loc 2 717 45
  # $28.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:rax:[rbp-34] $23.1:[rbp-35] $28.1:rbx 
  .loc 2 717 9
  # call(generate_store_value_31, self.1, ir_value.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  mov rdx, rbx
  call generate_store_value_31
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # jump(.LABEL__generate_set_instruction_26__5)
.LABEL__generate_set_instruction_26__5:
  # return()
  jmp .LABEL__generate_set_instruction_26__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] $23.1:[rbp-35] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] mc_value.1:[rbp-34] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__generate_set_instruction_26__6:
  .loc 2 720 13
  # $11.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__generate_set_instruction_26__7, .LABEL__generate_set_instruction_26__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__generate_set_instruction_26__9
.LABEL__generate_set_instruction_26__7:
  .loc 2 721 28
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:rax 
  .loc 2 722 28
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-35], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] mc_value.1:rax 
  .loc 2 723 31
  # result_register.3: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx 
  .loc 2 724 17
  # $16.1: bool = result_register.3 != null
  cmp rbx, 0
  setne al
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:rbx $16.1:rax 
  # jump($16.1, .LABEL__generate_set_instruction_26__10, .LABEL__generate_set_instruction_26__12)
  test al, al
  mov [rbp-36], al
  mov [rbp-44], rbx
  jz .LABEL__generate_set_instruction_26__12
.LABEL__generate_set_instruction_26__10:
  .loc 2 725 17
  # call(release_register_47, self.1, result_register.3)
  mov rdi, [rbp-8]
  mov rsi, [rbp-44]
  call release_register_47
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__8)
.LABEL__generate_set_instruction_26__8:
  # result_register.6: @MC_Register = phi(result_register.2, result_register.4, result_register.3)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] 
  .loc 2 734 33
  # $18.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.6:[rbp-44] $18.1:rbx 
  .loc 2 734 9
  # $19.1: @MC_Value = call(map_variable_value_41, self.1, $18.1, result_register.6)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-44]
  call map_variable_value_41
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: result_register.6
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # jump(.LABEL__generate_set_instruction_26__5)
  jmp .LABEL__generate_set_instruction_26__5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
.LABEL__generate_set_instruction_26__12:
  .loc 2 727 35
  # result_register.4: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:rax:[rbp-44] 
  .loc 2 728 17
  # call(generate_load_value_30, self.1, result_register.4, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-35]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] result_register.4:[rbp-44] 
  # [discarded value]: result_register.4
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] $16.1:[rbp-36] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] ir_value.1:[rbp-35] result_register.3:[rbp-44] 
  # [discarded value]: result_register.3
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__generate_set_instruction_26__9:
  .loc 2 731 31
  # result_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:rax:[rbp-44] 
  .loc 2 732 13
  # call(generate_load_value_30, self.1, result_register.2, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-44], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # jump(.LABEL__generate_set_instruction_26__8)
  jmp .LABEL__generate_set_instruction_26__8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] result_register.2:[rbp-44] 
  # [discarded value]: result_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_set_instruction_26__end:
  mov rsp, rbp
  pop rbp
  ret

generate_set_instruction_26__stack_frame_size: .word 48

  .loc 2 738 8
  .text
generate_store_array_item_instruction_27:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_array_item_instruction_27__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_array_item_instruction_27__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Array_Item_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 739 28
  # address_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 740 5
  # store_struct_member(address_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax 
  .loc 2 741 48
  # $2.1: @IR_Value = call(get_array_value_224, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call get_array_value_224
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] $2.1:rax 
  .loc 2 741 5
  # call(generate_load_value_30, self.1, address_register.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] 
  .loc 2 743 20
  # ir_value.1: @IR_Value = call(get_value_226, instruction.1)
  mov rdi, [rbp-8]
  call get_value_226
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax 
  .loc 2 744 49
  # $4.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:rax $4.1:rbx 
  .loc 2 744 30
  # ir_value_type_size.1: isize = call(get_type_size_56, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-32], rax
  call get_type_size_56
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:rax 
  .loc 2 746 23
  # index_value.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_index_value_225
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:rax 
  .loc 2 747 9
  # $7.1: bool = call(is_389, index_value.1, IR_Constant_Value)
  mov rdi, rax
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-48], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, .LABEL__generate_store_array_item_instruction_27__2, .LABEL__generate_store_array_item_instruction_27__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_store_array_item_instruction_27__4
.LABEL__generate_store_array_item_instruction_27__2:
  .loc 2 748 27
  # index_value.1: @IR_Constant_Value = index_value.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax 
  .loc 2 749 13
  # $27.1: @Literal_Token = load_struct_member(index_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax $27.1:rbx 
  .loc 2 749 13
  # $28.1: bool = call(is_389, $27.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  mov [rbp-57], rax
  call is_389
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $28.1:rax 
  .loc 2 749 13
  # $29.1: bool = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:rbx 
  # jump($29.1, .LABEL__generate_store_array_item_instruction_27__7, .LABEL__generate_store_array_item_instruction_27__8)
  test bl, bl
  mov [rbp-58], bl
  jz .LABEL__generate_store_array_item_instruction_27__8
.LABEL__generate_store_array_item_instruction_27__7:
  .loc 2 750 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
.LABEL__generate_store_array_item_instruction_27__8:
  .loc 2 752 28
  # $31.1: @Integer_Token = load_struct_member(index_value.1, literal)
  mov rax, [rbp-57]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] $31.1:rbx 
  .loc 2 752 27
  # index_value.1: isize = load_struct_member($31.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 
  .loc 2 753 13
  # $33.1: bool = index_value.1 != 0
  cmp r15, 0
  setne bl
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:rax:[rbp-57] $29.1:[rbp-58] index_value.1:r15 $33.1:rbx 
  # jump($33.1, .LABEL__generate_store_array_item_instruction_27__9, .LABEL__generate_store_array_item_instruction_27__3)
  test bl, bl
  mov [rbp-59], bl
  mov [rbp-67], r15
  jz .LABEL__generate_store_array_item_instruction_27__3
.LABEL__generate_store_array_item_instruction_27__9:
  .loc 2 754 17
  # $34.1: bool = index_value.1 < 0
  cmp QWORD PTR [rbp-67], 0
  setl al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:rax 
  # jump($34.1, .LABEL__generate_store_array_item_instruction_27__11, .LABEL__generate_store_array_item_instruction_27__12)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_array_item_instruction_27__12
.LABEL__generate_store_array_item_instruction_27__11:
  .loc 2 755 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
.LABEL__generate_store_array_item_instruction_27__12:
  .loc 2 757 13
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $35.1:rbx 
  .loc 2 757 13
  # $36.1: @FILE = call(write_383, $35.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax 
  .loc 2 757 52
  # $37.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $36.1:rax $37.1:r15 
  .loc 2 757 13
  # $38.1: @FILE = call(write_383, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $38.1:rax 
  .loc 2 757 13
  # $39.1: @FILE = call(write_383, $38.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax 
  .loc 2 757 95
  # $40.1: isize = index_value.1 * ir_value_type_size.1
  mov rbx, [rbp-67]
  imul rbx, QWORD PTR [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $39.1:rax $40.1:rbx 
  .loc 2 757 13
  # $41.1: @FILE = call(write_382, $39.1, $40.1)
  mov rdi, rax
  mov rsi, rbx
  call write_382
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] $41.1:rax 
  .loc 2 757 13
  # $42.1: @FILE = call(end_line_386, $41.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
.LABEL__generate_store_array_item_instruction_27__3:
  .loc 2 770 9
  # $43.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:rax index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # jump($43.1, .LABEL__generate_store_array_item_instruction_27__13, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-69], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__13:
  .loc 2 771 24
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:rax 
  .loc 2 772 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-77], rax
  call get_value_42
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] mc_value.1:rax 
  .loc 2 773 13
  # $46.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $46.1:rbx 
  .loc 2 773 13
  # $47.1: bool = $46.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:rax 
  # jump($47.1, .LABEL__generate_store_array_item_instruction_27__15, .LABEL__generate_store_array_item_instruction_27__14)
  test al, al
  mov [rbp-78], al
  jz .LABEL__generate_store_array_item_instruction_27__14
.LABEL__generate_store_array_item_instruction_27__15:
  .loc 2 774 28
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:rax 
  .loc 2 775 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, [rbp-77]
  mov [rbp-86], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] register.1:[rbp-86] 
  .loc 2 776 13
  # $49.1: @MC_Value = call(map_variable_value_41, self.1, ir_value.1, register.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-77]
  mov rdx, [rbp-86]
  call map_variable_value_41
  # [discarded value]: $49.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # jump(.LABEL__generate_store_array_item_instruction_27__14)
.LABEL__generate_store_array_item_instruction_27__14:
  .loc 2 780 5
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $50.1:rbx 
  .loc 2 780 5
  # $51.1: @FILE = call(write_383, $50.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $51.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  .loc 2 781 9
  # $52.1: bool = ir_value_type_size.1 == 8
  cmp QWORD PTR [rbp-40], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:rax 
  # jump($52.1, .LABEL__generate_store_array_item_instruction_27__17, .LABEL__generate_store_array_item_instruction_27__19)
  test al, al
  mov [rbp-79], al
  jz .LABEL__generate_store_array_item_instruction_27__19
.LABEL__generate_store_array_item_instruction_27__17:
  .loc 2 782 9
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $62.1:rbx 
  .loc 2 782 9
  # $63.1: @FILE = call(write_383, $62.1, "QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_72[rip] # "QWORD PTR "
  call write_383
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
.LABEL__generate_store_array_item_instruction_27__18:
  .loc 2 792 5
  # $64.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:rbx 
  .loc 2 792 28
  # $65.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = address_register.1, offset = 0)
  mov [rbp-87], rbx
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = address_register.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $64.1:[rbp-87] $65.1:rax 
  .loc 2 792 5
  # $66.1: @FILE = call(write_55, $64.1, $65.1)
  mov rdi, [rbp-87]
  mov rsi, rax
  call write_55
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $66.1:rax 
  .loc 2 792 5
  # $67.1: @FILE = call(write_383, $66.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $67.1:rax 
  .loc 2 792 5
  # $68.1: @FILE = call(write_operand_34, $67.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-32]
  call write_operand_34
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $68.1:rax 
  .loc 2 792 5
  # $69.1: @FILE = call(end_line_386, $68.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  .loc 2 793 5
  # store_struct_member(address_register.1, is_reserved, false)
  mov rax, [rbp-24]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rax:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # return()
  jmp .LABEL__generate_store_array_item_instruction_27__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
.LABEL__generate_store_array_item_instruction_27__19:
  .loc 2 783 16
  # $53.1: bool = ir_value_type_size.1 == 4
  cmp QWORD PTR [rbp-40], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:rax 
  # jump($53.1, .LABEL__generate_store_array_item_instruction_27__20, .LABEL__generate_store_array_item_instruction_27__22)
  test al, al
  mov [rbp-80], al
  jz .LABEL__generate_store_array_item_instruction_27__22
.LABEL__generate_store_array_item_instruction_27__20:
  .loc 2 784 9
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $60.1:rbx 
  .loc 2 784 9
  # $61.1: @FILE = call(write_383, $60.1, "DWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_73[rip] # "DWORD PTR "
  call write_383
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
.LABEL__generate_store_array_item_instruction_27__22:
  .loc 2 785 16
  # $54.1: bool = ir_value_type_size.1 == 2
  cmp QWORD PTR [rbp-40], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:rax 
  # jump($54.1, .LABEL__generate_store_array_item_instruction_27__23, .LABEL__generate_store_array_item_instruction_27__25)
  test al, al
  mov [rbp-81], al
  jz .LABEL__generate_store_array_item_instruction_27__25
.LABEL__generate_store_array_item_instruction_27__23:
  .loc 2 786 9
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $58.1:rbx 
  .loc 2 786 9
  # $59.1: @FILE = call(write_383, $58.1, "WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_74[rip] # "WORD PTR "
  call write_383
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
.LABEL__generate_store_array_item_instruction_27__25:
  .loc 2 787 16
  # $55.1: bool = ir_value_type_size.1 == 1
  cmp QWORD PTR [rbp-40], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:rax 
  # jump($55.1, .LABEL__generate_store_array_item_instruction_27__26, .LABEL__generate_store_array_item_instruction_27__28)
  test al, al
  mov [rbp-82], al
  jz .LABEL__generate_store_array_item_instruction_27__28
.LABEL__generate_store_array_item_instruction_27__26:
  .loc 2 788 9
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] $56.1:rbx 
  .loc 2 788 9
  # $57.1: @FILE = call(write_383, $56.1, "BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_75[rip] # "BYTE PTR "
  call write_383
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # jump(.LABEL__generate_store_array_item_instruction_27__18)
  jmp .LABEL__generate_store_array_item_instruction_27__18
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
.LABEL__generate_store_array_item_instruction_27__28:
  .loc 2 790 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] $55.1:[rbp-82] 
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] $54.1:[rbp-81] 
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] $53.1:[rbp-80] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] $52.1:[rbp-79] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] $47.1:[rbp-78] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] ir_value.1:[rbp-77] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] $43.1:[rbp-69] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] $34.1:[rbp-68] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] $33.1:[rbp-59] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] index_value.1:[rbp-67] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] $29.1:[rbp-58] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_value.1:[rbp-57] 
  # [discarded value]: index_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
.LABEL__generate_store_array_item_instruction_27__4:
  .loc 2 760 30
  # index_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-16]
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 761 9
  # store_struct_member(index_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax 
  .loc 2 762 50
  # $9.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-57], rax
  call get_index_value_225
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $9.1:rax 
  .loc 2 762 9
  # call(generate_load_value_30, self.1, index_register.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-57]
  mov rdx, rax
  call generate_load_value_30
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  .loc 2 763 13
  # $10.1: bool = ir_value_type_size.1 > 1
  cmp QWORD PTR [rbp-40], 1
  setg al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:rax 
  # jump($10.1, .LABEL__generate_store_array_item_instruction_27__5, .LABEL__generate_store_array_item_instruction_27__6)
  test al, al
  mov [rbp-58], al
  jz .LABEL__generate_store_array_item_instruction_27__6
.LABEL__generate_store_array_item_instruction_27__5:
  .loc 2 764 13
  # $11.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $11.1:rbx 
  .loc 2 764 13
  # $12.1: @FILE = call(write_383, $11.1, "  imul ")
  mov rdi, rbx
  lea rsi, .LABEL__string_65[rip] # "  imul "
  call write_383
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $12.1:rax 
  .loc 2 764 53
  # $13.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $12.1:rax $13.1:r15 
  .loc 2 764 13
  # $14.1: @FILE = call(write_383, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $14.1:rax 
  .loc 2 764 13
  # $15.1: @FILE = call(write_383, $14.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $15.1:rax 
  .loc 2 764 13
  # $16.1: @FILE = call(write_382, $15.1, ir_value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_382
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $16.1:rax 
  .loc 2 764 13
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__6)
.LABEL__generate_store_array_item_instruction_27__6:
  .loc 2 766 9
  # $18.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $18.1:rbx 
  .loc 2 766 9
  # $19.1: @FILE = call(write_383, $18.1, "  add ")
  mov rdi, rbx
  lea rsi, .LABEL__string_39[rip] # "  add "
  call write_383
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax 
  .loc 2 766 48
  # $20.1: @String = load_struct_member(address_register.1, name_q)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:rbx:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $19.1:rax $20.1:r15 
  .loc 2 766 9
  # $21.1: @FILE = call(write_383, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $21.1:rax 
  .loc 2 766 9
  # $22.1: @FILE = call(write_383, $21.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $22.1:rax 
  .loc 2 766 91
  # $23.1: @String = load_struct_member(index_register.1, name_q)
  mov rbx, [rbp-57]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rbx:[rbp-57] $10.1:[rbp-58] $22.1:rax $23.1:r15 
  .loc 2 766 9
  # $24.1: @FILE = call(write_383, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] $24.1:rax 
  .loc 2 766 9
  # $25.1: @FILE = call(end_line_386, $24.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  .loc 2 767 9
  # store_struct_member(index_register.1, is_reserved, false)
  mov rax, [rbp-57]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:rax:[rbp-57] $10.1:[rbp-58] 
  # jump(.LABEL__generate_store_array_item_instruction_27__3)
  jmp .LABEL__generate_store_array_item_instruction_27__3
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] $10.1:[rbp-58] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] index_register.1:[rbp-57] 
  # [discarded value]: index_register.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] $7.1:[rbp-49] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] address_register.1:[rbp-24] ir_value.1:[rbp-32] ir_value_type_size.1:[rbp-40] index_value.1:[rbp-48] 
  # [discarded value]: index_value.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: ir_value.1
  # [discarded value]: address_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_array_item_instruction_27__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_array_item_instruction_27__stack_frame_size: .word 96

  .loc 2 796 8
  .text
generate_store_struct_member_instruction_28:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_member_instruction_28__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_member_instruction_28__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Store_Struct_Member_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 797 35
  # ir_struct_pointer_value.1: @IR_Value = call(get_struct_pointer_value_229, instruction.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  call get_struct_pointer_value_229
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rax 
  .loc 2 798 9
  # $2.1: bool = call(is_389, ir_struct_pointer_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__generate_store_struct_member_instruction_28__2, .LABEL__generate_store_struct_member_instruction_28__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__generate_store_struct_member_instruction_28__4
.LABEL__generate_store_struct_member_instruction_28__2:
  .loc 2 799 39
  # ir_struct_pointer_value.1: @IR_Variable_Value = ir_struct_pointer_value.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:rax 
  .loc 2 800 39
  # mc_struct_pointer_value.1: @MC_Value = call(get_value_42, self.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-33], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax 
  .loc 2 801 13
  # $15.1: bool = mc_struct_pointer_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax $15.1:rbx 
  # jump($15.1, .LABEL__generate_store_struct_member_instruction_28__8, .LABEL__generate_store_struct_member_instruction_28__9)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__generate_store_struct_member_instruction_28__9
.LABEL__generate_store_struct_member_instruction_28__8:
  .loc 2 802 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] 
.LABEL__generate_store_struct_member_instruction_28__9:
  .loc 2 804 39
  # struct_pointer_register.1: @MC_Register = load_struct_member(mc_struct_pointer_value.1, register)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:rbx 
  .loc 2 805 13
  # $17.1: bool = struct_pointer_register.1 == null
  cmp rbx, 0
  sete r15b
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:rax:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:rbx $17.1:r15 
  # jump($17.1, .LABEL__generate_store_struct_member_instruction_28__10, .LABEL__generate_store_struct_member_instruction_28__11)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__generate_store_struct_member_instruction_28__11
.LABEL__generate_store_struct_member_instruction_28__10:
  .loc 2 806 39
  # struct_pointer_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:rax:[rbp-50] 
  .loc 2 807 13
  # call(generate_load_value_30, self.1, struct_pointer_register.2, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-33]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  .loc 2 808 13
  # $19.1: @MC_Value = call(map_variable_value_41, self.1, ir_struct_pointer_value.1, struct_pointer_register.2)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__11)
.LABEL__generate_store_struct_member_instruction_28__11:
  # struct_pointer_register.5: @MC_Register = phi(struct_pointer_register.1, struct_pointer_register.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] 
  .loc 2 811 57
  # $20.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] $20.1:rbx 
  .loc 2 811 41
  # struct_type_member_offset.1: isize = call(get_offset_33, self.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:rax 
  .loc 2 812 24
  # ir_value.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-59], rax
  call get_value_230
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax 
  .loc 2 813 13
  # $24.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, rax
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-67], rax
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:rax 
  # jump($24.1, .LABEL__generate_store_struct_member_instruction_28__12, .LABEL__generate_store_struct_member_instruction_28__13)
  test al, al
  mov [rbp-68], al
  jz .LABEL__generate_store_struct_member_instruction_28__13
.LABEL__generate_store_struct_member_instruction_28__12:
  .loc 2 813 47
  # $25.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-67]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:rax:[rbp-67] $24.1:[rbp-68] $25.1:rbx 
  .loc 2 813 47
  # $26.1: bool = call(is_389, $25.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $26.1:rax 
  .loc 2 813 47
  # $27.1: bool = $26.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $27.1:rbx 
  .loc 2 813 13
  # $24.2: bool = $27.1
  mov [rbp-69], bl
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:rbx:[rbp-68] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__13)
  mov [rbp-68], bl
.LABEL__generate_store_struct_member_instruction_28__13:
  .loc 2 813 13
  # $24.3: bool = phi($24.1, $24.2)
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] 
  # jump($24.3, .LABEL__generate_store_struct_member_instruction_28__14, .LABEL__generate_store_struct_member_instruction_28__15)
  mov al, [rbp-68]
  test al, al
  jz .LABEL__generate_store_struct_member_instruction_28__15
.LABEL__generate_store_struct_member_instruction_28__14:
  .loc 2 814 28
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-67]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:rax 
  .loc 2 815 28
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-76], rax
  call get_value_42
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] mc_value.1:rax 
  .loc 2 816 17
  # $30.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $30.1:rbx 
  .loc 2 816 17
  # $31.1: bool = $30.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:rax 
  # jump($31.1, .LABEL__generate_store_struct_member_instruction_28__16, .LABEL__generate_store_struct_member_instruction_28__15)
  test al, al
  mov [rbp-77], al
  jz .LABEL__generate_store_struct_member_instruction_28__15
.LABEL__generate_store_struct_member_instruction_28__16:
  .loc 2 817 32
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] register.1:rax 
  .loc 2 818 17
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-76]
  mov [rbp-85], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] register.1:[rbp-85] 
  .loc 2 819 17
  # $33.1: @MC_Value = call(map_variable_value_41, self.1, ir_value.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-76]
  mov rdx, [rbp-85]
  call map_variable_value_41
  # [discarded value]: $33.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] struct_pointer_register.5:[rbp-50] struct_type_member_offset.1:[rbp-59] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__15)
.LABEL__generate_store_struct_member_instruction_28__15:
  .loc 2 822 42
  # struct_type_member_address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.5, offset = struct_type_member_offset.1)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.5
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-59]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: struct_type_member_offset.1
  # [discarded value]: struct_pointer_register.5
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] struct_type_member_address.1:rax 
  .loc 2 823 9
  # call(generate_store_value_31, self.1, ir_value.1, struct_type_member_address.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-67]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: struct_type_member_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__3)
.LABEL__generate_store_struct_member_instruction_28__3:
  # return()
  jmp .LABEL__generate_store_struct_member_instruction_28__end
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] $31.1:[rbp-77] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] ir_value.1:[rbp-76] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] $24.3:[rbp-68] 
  # [discarded value]: $24.3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] $24.2:[rbp-68] 
  # [discarded value]: $24.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] ir_value.1:[rbp-67] $24.1:[rbp-68] 
  # [discarded value]: $24.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] struct_pointer_register.2:[rbp-50] 
  # [discarded value]: struct_pointer_register.2
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] $17.1:[rbp-51] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] struct_pointer_register.1:[rbp-50] 
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] $15.1:[rbp-42] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] ir_struct_pointer_value.1:[rbp-33] mc_struct_pointer_value.1:[rbp-41] 
  # [discarded value]: mc_struct_pointer_value.1
  # [discarded value]: ir_struct_pointer_value.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__generate_store_struct_member_instruction_28__4:
  .loc 2 824 16
  # $3.1: bool = call(is_389, ir_struct_pointer_value.1, IR_Global_Variable_Address_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable_Address_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__generate_store_struct_member_instruction_28__5, .LABEL__generate_store_struct_member_instruction_28__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_store_struct_member_instruction_28__7
.LABEL__generate_store_struct_member_instruction_28__5:
  .loc 2 825 39
  # struct_pointer_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rax 
  .loc 2 826 9
  # store_struct_member(struct_pointer_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rax 
  .loc 2 827 9
  # call(generate_load_value_30, self.1, struct_pointer_register.1, ir_struct_pointer_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-24]
  mov [rbp-34], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] 
  .loc 2 828 57
  # $9.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:[rbp-8] instruction.1:rax:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] $9.1:rbx 
  .loc 2 828 41
  # struct_type_member_offset.1: isize = call(get_offset_33, self.1, $9.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_offset_33
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] struct_type_member_offset.1:rax 
  .loc 2 829 42
  # struct_type_member_address.1: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = struct_pointer_register.1, offset = struct_type_member_offset.1)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = struct_pointer_register.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .offset = struct_type_member_offset.1
  mov r15, [rbp-42]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: struct_type_member_offset.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:rbx:[rbp-34] struct_type_member_address.1:rax 
  .loc 2 830 35
  # $12.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-42], rax
  call get_value_230
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] struct_type_member_address.1:[rbp-42] $12.1:rax 
  .loc 2 830 9
  # call(generate_store_value_31, self.1, $12.1, struct_type_member_address.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-42]
  call generate_store_value_31
  # [discarded value]: $12.1
  # [discarded value]: struct_type_member_address.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] struct_pointer_register.1:[rbp-34] 
  .loc 2 831 9
  # store_struct_member(struct_pointer_register.1, is_reserved, false)
  mov rax, [rbp-34]
  mov BYTE PTR [rax+40], 0
  # [discarded value]: struct_pointer_register.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # jump(.LABEL__generate_store_struct_member_instruction_28__3)
  jmp .LABEL__generate_store_struct_member_instruction_28__3
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__generate_store_struct_member_instruction_28__7:
  .loc 2 833 20
  # $4.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  call clone_391
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax 
  .loc 2 833 55
  # $5.1: @Object_Type = load_struct_member(ir_struct_pointer_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rbx:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax $5.1:r15 
  .loc 2 833 55
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:rbx:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $4.1:rax $5.1:r15 $6.1:r14 
  .loc 2 833 20
  # $7.1: @String = call(append_400, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] $7.1:rax 
  .loc 2 833 9
  # call(abort_35, self.1, $7.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] instruction.1:[rbp-16] ir_struct_pointer_value.1:[rbp-24] 
  # [discarded value]: ir_struct_pointer_value.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_struct_member_instruction_28__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_member_instruction_28__stack_frame_size: .word 96

  .loc 2 837 8
  .text
generate_substract_instruction_29:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_substract_instruction_29__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_substract_instruction_29__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Substract_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 2 838 27
  # result_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call find_unused_register_38
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:rax 
  .loc 2 839 40
  # $2.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] result_register.1:rax $2.1:r15 
  .loc 2 839 40
  # $3.1: @IR_Type = load_struct_member($2.1, type)
  mov r14, [r15+8]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] instruction.1:rbx:[rbp-8] result_register.1:rax $3.1:r14 
  .loc 2 839 21
  # type_size.1: isize = call(get_type_size_56, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, r14
  mov [rbp-24], rax
  call get_type_size_56
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:rax 
  .loc 2 840 22
  # left_value.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-32], rax
  call get_left_value_232
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:rax 
  .loc 2 841 23
  # right_value.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-8]
  mov [rbp-40], rax
  call get_right_value_233
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:rax 
  .loc 2 842 9
  # $7.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-40]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-48], rax
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:rax 
  # jump($7.1, .LABEL__generate_substract_instruction_29__2, .LABEL__generate_substract_instruction_29__3)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__2:
  .loc 2 843 26
  # left_value.1: @IR_Constant_Value = left_value.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] left_value.1:rax 
  .loc 2 844 14
  # $10.1: @Integer_Token = load_struct_member(left_value.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $10.1:rbx 
  .loc 2 844 13
  # $11.1: isize = load_struct_member($10.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $11.1:rax 
  .loc 2 844 13
  # $12.1: bool = $11.1 == 0
  cmp rax, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:rbx 
  # jump($12.1, .LABEL__generate_substract_instruction_29__4, .LABEL__generate_substract_instruction_29__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__generate_substract_instruction_29__3
.LABEL__generate_substract_instruction_29__4:
  .loc 2 845 13
  # call(generate_load_value_30, self.1, result_register.1, right_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-48]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
  .loc 2 846 13
  # $13.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $13.1:rbx 
  .loc 2 846 13
  # $14.1: @FILE = call(write_383, $13.1, "  neg ")
  mov rdi, rbx
  lea rsi, .LABEL__string_77[rip] # "  neg "
  call write_383
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
  .loc 2 847 17
  # $15.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:rax 
  # jump($15.1, .LABEL__generate_substract_instruction_29__6, .LABEL__generate_substract_instruction_29__8)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_substract_instruction_29__8
.LABEL__generate_substract_instruction_29__6:
  .loc 2 848 17
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $30.1:rbx 
  .loc 2 848 40
  # $31.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $30.1:rbx $31.1:r14 
  .loc 2 848 17
  # $32.1: @FILE = call(write_383, $30.1, $31.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
  # jump(.LABEL__generate_substract_instruction_29__7)
.LABEL__generate_substract_instruction_29__7:
  .loc 2 858 13
  # $33.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $33.1:rbx 
  .loc 2 858 13
  # $34.1: @FILE = call(end_line_386, $33.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
  .loc 2 859 37
  # $35.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $35.1:rbx 
  .loc 2 859 13
  # $36.1: @MC_Value = call(map_variable_value_41, self.1, $35.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
  .loc 2 860 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
.LABEL__generate_substract_instruction_29__8:
  .loc 2 849 24
  # $16.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:rax 
  # jump($16.1, .LABEL__generate_substract_instruction_29__9, .LABEL__generate_substract_instruction_29__11)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_substract_instruction_29__11
.LABEL__generate_substract_instruction_29__9:
  .loc 2 850 17
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $27.1:rbx 
  .loc 2 850 40
  # $28.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $27.1:rbx $28.1:r14 
  .loc 2 850 17
  # $29.1: @FILE = call(write_383, $27.1, $28.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] 
  # jump(.LABEL__generate_substract_instruction_29__7)
  jmp .LABEL__generate_substract_instruction_29__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] 
.LABEL__generate_substract_instruction_29__11:
  .loc 2 851 24
  # $17.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:rax 
  # jump($17.1, .LABEL__generate_substract_instruction_29__12, .LABEL__generate_substract_instruction_29__14)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_substract_instruction_29__14
.LABEL__generate_substract_instruction_29__12:
  .loc 2 852 17
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $24.1:rbx 
  .loc 2 852 40
  # $25.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $24.1:rbx $25.1:r14 
  .loc 2 852 17
  # $26.1: @FILE = call(write_383, $24.1, $25.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] 
  # jump(.LABEL__generate_substract_instruction_29__7)
  jmp .LABEL__generate_substract_instruction_29__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] 
.LABEL__generate_substract_instruction_29__14:
  .loc 2 853 24
  # $18.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:rax 
  # jump($18.1, .LABEL__generate_substract_instruction_29__15, .LABEL__generate_substract_instruction_29__17)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_substract_instruction_29__17
.LABEL__generate_substract_instruction_29__15:
  .loc 2 854 17
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] $21.1:rbx 
  .loc 2 854 40
  # $22.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] $21.1:rbx $22.1:r14 
  .loc 2 854 17
  # $23.1: @FILE = call(write_383, $21.1, $22.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] 
  # jump(.LABEL__generate_substract_instruction_29__7)
  jmp .LABEL__generate_substract_instruction_29__7
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] 
.LABEL__generate_substract_instruction_29__17:
  .loc 2 856 28
  # $19.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] $19.1:rax 
  .loc 2 856 28
  # $20.1: @String = call(append_399, $19.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] $20.1:rax 
  .loc 2 856 17
  # call(abort_35, self.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] $18.1:[rbp-54] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] $17.1:[rbp-53] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] $16.1:[rbp-52] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $15.1:[rbp-51] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
.LABEL__generate_substract_instruction_29__3:
  .loc 2 863 5
  # call(generate_load_value_30, self.1, result_register.1, left_value.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov rdx, [rbp-40]
  call generate_load_value_30
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
  .loc 2 864 29
  # $37.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] instruction.1:rax:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $37.1:rbx 
  .loc 2 864 5
  # $38.1: @MC_Value = call(map_variable_value_41, self.1, $37.1, result_register.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call map_variable_value_41
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
  .loc 2 865 9
  # $39.1: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-48]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:rax 
  # jump($39.1, .LABEL__generate_substract_instruction_29__19, .LABEL__generate_substract_instruction_29__20)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_substract_instruction_29__20
.LABEL__generate_substract_instruction_29__19:
  .loc 2 866 27
  # right_value.1: @IR_Constant_Value = right_value.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] right_value.1:rax 
  .loc 2 867 14
  # $42.1: @Integer_Token = load_struct_member(right_value.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $42.1:rbx 
  .loc 2 867 13
  # $43.1: isize = load_struct_member($42.1, value)
  mov rax, [rbx+32]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $43.1:rax 
  .loc 2 867 13
  # $44.1: bool = $43.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:rbx 
  # jump($44.1, .LABEL__generate_substract_instruction_29__21, .LABEL__generate_substract_instruction_29__20)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__generate_substract_instruction_29__20
.LABEL__generate_substract_instruction_29__21:
  .loc 2 868 13
  # $45.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $45.1:rbx 
  .loc 2 868 13
  # $46.1: @FILE = call(write_383, $45.1, "  dec ")
  mov rdi, rbx
  lea rsi, .LABEL__string_78[rip] # "  dec "
  call write_383
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] 
  .loc 2 869 17
  # $47.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:rax 
  # jump($47.1, .LABEL__generate_substract_instruction_29__23, .LABEL__generate_substract_instruction_29__25)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_substract_instruction_29__25
.LABEL__generate_substract_instruction_29__23:
  .loc 2 870 17
  # $62.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $62.1:rbx 
  .loc 2 870 40
  # $63.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $62.1:rbx $63.1:r14 
  .loc 2 870 17
  # $64.1: @FILE = call(write_383, $62.1, $63.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] 
  # jump(.LABEL__generate_substract_instruction_29__24)
.LABEL__generate_substract_instruction_29__24:
  .loc 2 880 13
  # $65.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $65.1:rbx 
  .loc 2 880 13
  # $66.1: @FILE = call(end_line_386, $65.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] 
  .loc 2 881 13
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] 
.LABEL__generate_substract_instruction_29__25:
  .loc 2 871 24
  # $48.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:rax 
  # jump($48.1, .LABEL__generate_substract_instruction_29__26, .LABEL__generate_substract_instruction_29__28)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_substract_instruction_29__28
.LABEL__generate_substract_instruction_29__26:
  .loc 2 872 17
  # $59.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $59.1:rbx 
  .loc 2 872 40
  # $60.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $59.1:rbx $60.1:r14 
  .loc 2 872 17
  # $61.1: @FILE = call(write_383, $59.1, $60.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] 
  # jump(.LABEL__generate_substract_instruction_29__24)
  jmp .LABEL__generate_substract_instruction_29__24
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] 
.LABEL__generate_substract_instruction_29__28:
  .loc 2 873 24
  # $49.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:rax 
  # jump($49.1, .LABEL__generate_substract_instruction_29__29, .LABEL__generate_substract_instruction_29__31)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_substract_instruction_29__31
.LABEL__generate_substract_instruction_29__29:
  .loc 2 874 17
  # $56.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $56.1:rbx 
  .loc 2 874 40
  # $57.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $56.1:rbx $57.1:r14 
  .loc 2 874 17
  # $58.1: @FILE = call(write_383, $56.1, $57.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] 
  # jump(.LABEL__generate_substract_instruction_29__24)
  jmp .LABEL__generate_substract_instruction_29__24
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] 
.LABEL__generate_substract_instruction_29__31:
  .loc 2 875 24
  # $50.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:rax 
  # jump($50.1, .LABEL__generate_substract_instruction_29__32, .LABEL__generate_substract_instruction_29__34)
  test al, al
  mov [rbp-56], al
  jz .LABEL__generate_substract_instruction_29__34
.LABEL__generate_substract_instruction_29__32:
  .loc 2 876 17
  # $53.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] $53.1:rbx 
  .loc 2 876 40
  # $54.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] $53.1:rbx $54.1:r14 
  .loc 2 876 17
  # $55.1: @FILE = call(write_383, $53.1, $54.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] 
  # jump(.LABEL__generate_substract_instruction_29__24)
  jmp .LABEL__generate_substract_instruction_29__24
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] 
.LABEL__generate_substract_instruction_29__34:
  .loc 2 878 28
  # $51.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] $51.1:rax 
  .loc 2 878 28
  # $52.1: @String = call(append_399, $51.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] $52.1:rax 
  .loc 2 878 17
  # call(abort_35, self.1, $52.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] $50.1:[rbp-56] 
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] $49.1:[rbp-55] 
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] $48.1:[rbp-54] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $47.1:[rbp-53] 
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] 
.LABEL__generate_substract_instruction_29__20:
  .loc 2 884 5
  # $67.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $67.1:rbx 
  .loc 2 884 5
  # $68.1: @FILE = call(write_383, $67.1, "  sub ")
  mov rdi, rbx
  lea rsi, .LABEL__string_79[rip] # "  sub "
  call write_383
  # [discarded value]: $68.1
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] 
  .loc 2 885 9
  # $69.1: bool = type_size.1 == 8
  cmp QWORD PTR [rbp-32], 8
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:rax 
  # jump($69.1, .LABEL__generate_substract_instruction_29__36, .LABEL__generate_substract_instruction_29__38)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_substract_instruction_29__38
.LABEL__generate_substract_instruction_29__36:
  .loc 2 886 9
  # $84.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $84.1:rbx 
  .loc 2 886 32
  # $85.1: @String = load_struct_member(result_register.1, name_q)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $84.1:rbx $85.1:r14 
  .loc 2 886 9
  # $86.1: @FILE = call(write_383, $84.1, $85.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $86.1
  # [discarded value]: $85.1
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] 
  # jump(.LABEL__generate_substract_instruction_29__37)
.LABEL__generate_substract_instruction_29__37:
  .loc 2 896 5
  # $87.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $87.1:rbx 
  .loc 2 896 5
  # $88.1: @FILE = call(write_383, $87.1, ", ")
  mov rdi, rbx
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $87.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $88.1:rax 
  .loc 2 896 5
  # $89.1: @FILE = call(write_operand_34, $88.1, self.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov rdx, [rbp-48]
  call write_operand_34
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $89.1:rax 
  .loc 2 896 5
  # $90.1: @FILE = call(end_line_386, $89.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $90.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] 
  # return()
  jmp .LABEL__generate_substract_instruction_29__end
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] 
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] 
.LABEL__generate_substract_instruction_29__38:
  .loc 2 887 16
  # $70.1: bool = type_size.1 == 4
  cmp QWORD PTR [rbp-32], 4
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:rax 
  # jump($70.1, .LABEL__generate_substract_instruction_29__39, .LABEL__generate_substract_instruction_29__41)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_substract_instruction_29__41
.LABEL__generate_substract_instruction_29__39:
  .loc 2 888 9
  # $81.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $81.1:rbx 
  .loc 2 888 32
  # $82.1: @String = load_struct_member(result_register.1, name_d)
  mov r15, [rbp-24]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $81.1:rbx $82.1:r14 
  .loc 2 888 9
  # $83.1: @FILE = call(write_383, $81.1, $82.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] 
  # jump(.LABEL__generate_substract_instruction_29__37)
  jmp .LABEL__generate_substract_instruction_29__37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] 
.LABEL__generate_substract_instruction_29__41:
  .loc 2 889 16
  # $71.1: bool = type_size.1 == 2
  cmp QWORD PTR [rbp-32], 2
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:rax 
  # jump($71.1, .LABEL__generate_substract_instruction_29__42, .LABEL__generate_substract_instruction_29__44)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_substract_instruction_29__44
.LABEL__generate_substract_instruction_29__42:
  .loc 2 890 9
  # $78.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $78.1:rbx 
  .loc 2 890 32
  # $79.1: @String = load_struct_member(result_register.1, name_w)
  mov r15, [rbp-24]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $78.1:rbx $79.1:r14 
  .loc 2 890 9
  # $80.1: @FILE = call(write_383, $78.1, $79.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $80.1
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] 
  # jump(.LABEL__generate_substract_instruction_29__37)
  jmp .LABEL__generate_substract_instruction_29__37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] 
.LABEL__generate_substract_instruction_29__44:
  .loc 2 891 16
  # $72.1: bool = type_size.1 == 1
  cmp QWORD PTR [rbp-32], 1
  sete al
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:rax 
  # jump($72.1, .LABEL__generate_substract_instruction_29__45, .LABEL__generate_substract_instruction_29__47)
  test al, al
  mov [rbp-56], al
  jz .LABEL__generate_substract_instruction_29__47
.LABEL__generate_substract_instruction_29__45:
  .loc 2 892 9
  # $75.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] $75.1:rbx 
  .loc 2 892 32
  # $76.1: @String = load_struct_member(result_register.1, name_b)
  mov r15, [rbp-24]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-16] instruction.1:[rbp-8] result_register.1:r15:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] $75.1:rbx $76.1:r14 
  .loc 2 892 9
  # $77.1: @FILE = call(write_383, $75.1, $76.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $77.1
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] 
  # jump(.LABEL__generate_substract_instruction_29__37)
  jmp .LABEL__generate_substract_instruction_29__37
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] 
.LABEL__generate_substract_instruction_29__47:
  .loc 2 894 20
  # $73.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] $73.1:rax 
  .loc 2 894 20
  # $74.1: @String = call(append_399, $73.1, type_size.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call append_399
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] $74.1:rax 
  .loc 2 894 9
  # call(abort_35, self.1, $74.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] $72.1:[rbp-56] 
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] $71.1:[rbp-55] 
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] $70.1:[rbp-54] 
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] $69.1:[rbp-53] 
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] $44.1:[rbp-52] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] $39.1:[rbp-51] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] $7.1:[rbp-49] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-8] result_register.1:[rbp-24] type_size.1:[rbp-32] left_value.1:[rbp-40] right_value.1:[rbp-48] 
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: type_size.1
  # [discarded value]: result_register.1
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_substract_instruction_29__end:
  mov rsp, rbp
  pop rbp
  ret

generate_substract_instruction_29__stack_frame_size: .word 64

  .loc 2 899 8
  .text
generate_load_value_30:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_load_value_30__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_load_value_30__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx 
  .loc 2 900 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $1.1:rax 
  .loc 2 900 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi ir_value.1:rdx $2.1:rbx 
  # jump($2.1, .LABEL__generate_load_value_30__2, .LABEL__generate_load_value_30__3)
  test bl, bl
  mov [rbp-8], rdx
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__generate_load_value_30__3
.LABEL__generate_load_value_30__2:
  .loc 2 901 13
  # $3.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rax 
  # jump($3.1, .LABEL__generate_load_value_30__4, .LABEL__generate_load_value_30__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__4:
  .loc 2 902 28
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax 
  .loc 2 903 29
  # $5.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-17]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $5.1:r15 
  .loc 2 903 29
  # $6.1: @IR_Variable_Value = load_struct_member($5.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] ir_value.1:rax $6.1:r14 
  .loc 2 903 17
  # $7.1: bool = ir_value.1 == $6.1
  cmp rax, r14
  sete r15b
  # [discarded value]: $6.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__generate_load_value_30__6, .LABEL__generate_load_value_30__5)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__generate_load_value_30__5
.LABEL__generate_load_value_30__6:
  .loc 2 904 17
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__5:
  .loc 2 907 9
  # call(release_register_47, self.1, register.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-17]
  call release_register_47
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__generate_load_value_30__3)
.LABEL__generate_load_value_30__3:
  .loc 2 909 9
  # $8.1: bool = call(is_389, ir_value.1, IR_Constant_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:rax $7.1:[rbp-27] 
  # jump($8.1, .LABEL__generate_load_value_30__9, .LABEL__generate_load_value_30__11)
  test al, al
  mov [rbp-28], al
  jz .LABEL__generate_load_value_30__11
.LABEL__generate_load_value_30__9:
  .loc 2 910 24
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax 
  .loc 2 911 13
  # $226.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax $226.1:rbx 
  .loc 2 911 13
  # $227.1: bool = call(is_389, $226.1, Boolean_Token)
  mov rdi, rbx
  mov rsi, Boolean_Token[rip]
  mov [rbp-36], rax
  call is_389
  # [discarded value]: $226.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:rax 
  # jump($227.1, .LABEL__generate_load_value_30__85, .LABEL__generate_load_value_30__87)
  test al, al
  mov [rbp-37], al
  jz .LABEL__generate_load_value_30__87
.LABEL__generate_load_value_30__85:
  .loc 2 912 27
  # literal.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] literal.1:rbx 
  .loc 2 913 17
  # $299.1: bool = load_struct_member(literal.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $299.1:r15 
  # jump($299.1, .LABEL__generate_load_value_30__106, .LABEL__generate_load_value_30__108)
  test r15b, r15b
  mov [rbp-38], r15b
  jz .LABEL__generate_load_value_30__108
.LABEL__generate_load_value_30__106:
  .loc 2 914 17
  # $307.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $307.1:rbx 
  .loc 2 914 17
  # $308.1: @FILE = call(write_383, $307.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $307.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $308.1:rax 
  .loc 2 914 56
  # $309.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $308.1:rax $309.1:r15 
  .loc 2 914 17
  # $310.1: @FILE = call(write_383, $308.1, $309.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $309.1
  # [discarded value]: $308.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $310.1:rax 
  .loc 2 914 17
  # $311.1: @FILE = call(write_383, $310.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $310.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $311.1:rax 
  .loc 2 914 17
  # $312.1: @FILE = call(write_382, $311.1, 1)
  mov rdi, rax
  mov rsi, 1
  call write_382
  # [discarded value]: $311.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $312.1:rax 
  .loc 2 914 17
  # $313.1: @FILE = call(end_line_386, $312.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $313.1
  # [discarded value]: $312.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
.LABEL__generate_load_value_30__10:
  # return()
  jmp .LABEL__generate_load_value_30__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] 
.LABEL__generate_load_value_30__108:
  .loc 2 916 17
  # $300.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $300.1:rbx 
  .loc 2 916 17
  # $301.1: @FILE = call(write_383, $300.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $300.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $301.1:rax 
  .loc 2 916 56
  # $302.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $301.1:rax $302.1:r15 
  .loc 2 916 17
  # $303.1: @FILE = call(write_383, $301.1, $302.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $302.1
  # [discarded value]: $301.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $303.1:rax 
  .loc 2 916 17
  # $304.1: @FILE = call(write_383, $303.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $303.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $304.1:rax 
  .loc 2 916 17
  # $305.1: @FILE = call(write_382, $304.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_382
  # [discarded value]: $304.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] $305.1:rax 
  .loc 2 916 17
  # $306.1: @FILE = call(end_line_386, $305.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $306.1
  # [discarded value]: $305.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $299.1:[rbp-38] 
  # [discarded value]: $299.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] 
.LABEL__generate_load_value_30__87:
  .loc 2 918 20
  # $228.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $228.1:rbx 
  .loc 2 918 20
  # $229.1: bool = call(is_389, $228.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_389
  # [discarded value]: $228.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:rax 
  # jump($229.1, .LABEL__generate_load_value_30__88, .LABEL__generate_load_value_30__90)
  test al, al
  mov [rbp-38], al
  jz .LABEL__generate_load_value_30__90
.LABEL__generate_load_value_30__88:
  .loc 2 919 13
  # $286.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $286.1:rbx 
  .loc 2 919 13
  # $287.1: @FILE = call(write_383, $286.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $286.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $287.1:rax 
  .loc 2 919 52
  # $288.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $287.1:rax $288.1:r15 
  .loc 2 919 13
  # $289.1: @FILE = call(write_383, $287.1, $288.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $288.1
  # [discarded value]: $287.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $289.1:rax 
  .loc 2 919 13
  # $290.1: @FILE = call(write_383, $289.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $289.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $290.1:rax 
  .loc 2 919 88
  # $292.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $290.1:rax $292.1:r15 
  .loc 2 919 87
  # $293.1: i8 = load_struct_member($292.1, value)
  mov r14b, [r15+32]
  # [discarded value]: $292.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $290.1:rax $293.1:r14 
  .loc 2 919 87
  # $294.1: isize = cast($293.1)
  mov r15b, r14b
  movsx r15, r15b
  # [discarded value]: $293.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $290.1:rax $294.1:r15 
  .loc 2 919 13
  # $295.1: @FILE = call(write_382, $290.1, $294.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $294.1
  # [discarded value]: $290.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $295.1:rax 
  .loc 2 919 13
  # $296.1: @FILE = call(end_line_386, $295.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $296.1
  # [discarded value]: $295.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] 
.LABEL__generate_load_value_30__90:
  .loc 2 920 20
  # $230.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $230.1:rbx 
  .loc 2 920 20
  # $231.1: bool = call(is_389, $230.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_389
  # [discarded value]: $230.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:rax 
  # jump($231.1, .LABEL__generate_load_value_30__91, .LABEL__generate_load_value_30__93)
  test al, al
  mov [rbp-39], al
  jz .LABEL__generate_load_value_30__93
.LABEL__generate_load_value_30__91:
  .loc 2 921 27
  # literal.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:rbx 
  .loc 2 922 17
  # $268.1: isize = load_struct_member(literal.1, value)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:rbx $268.1:r15 
  .loc 2 922 17
  # $269.1: bool = $268.1 == 0
  cmp r15, 0
  sete r14b
  # [discarded value]: $268.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:rbx $269.1:r14 
  # jump($269.1, .LABEL__generate_load_value_30__103, .LABEL__generate_load_value_30__105)
  test r14b, r14b
  mov [rbp-47], rbx
  mov [rbp-48], r14b
  jz .LABEL__generate_load_value_30__105
.LABEL__generate_load_value_30__103:
  .loc 2 923 17
  # $278.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $278.1:rbx 
  .loc 2 923 17
  # $279.1: @FILE = call(write_383, $278.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  xor "
  call write_383
  # [discarded value]: $278.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $279.1:rax 
  .loc 2 923 56
  # $280.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $279.1:rax $280.1:r15 
  .loc 2 923 17
  # $281.1: @FILE = call(write_383, $279.1, $280.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $280.1
  # [discarded value]: $279.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $281.1:rax 
  .loc 2 923 17
  # $282.1: @FILE = call(write_383, $281.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $281.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $282.1:rax 
  .loc 2 923 91
  # $283.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $282.1:rax $283.1:r15 
  .loc 2 923 17
  # $284.1: @FILE = call(write_383, $282.1, $283.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $283.1
  # [discarded value]: $282.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $284.1:rax 
  .loc 2 923 17
  # $285.1: @FILE = call(end_line_386, $284.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $285.1
  # [discarded value]: $284.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] 
.LABEL__generate_load_value_30__105:
  .loc 2 925 17
  # $270.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $270.1:rbx 
  .loc 2 925 17
  # $271.1: @FILE = call(write_383, $270.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $270.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $271.1:rax 
  .loc 2 925 56
  # $272.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $271.1:rax $272.1:r15 
  .loc 2 925 17
  # $273.1: @FILE = call(write_383, $271.1, $272.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $272.1
  # [discarded value]: $271.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $273.1:rax 
  .loc 2 925 17
  # $274.1: @FILE = call(write_383, $273.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $273.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $274.1:rax 
  .loc 2 925 91
  # $275.1: isize = load_struct_member(literal.1, value)
  mov rbx, [rbp-47]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:rbx:[rbp-47] $269.1:[rbp-48] $274.1:rax $275.1:r15 
  .loc 2 925 17
  # $276.1: @FILE = call(write_382, $274.1, $275.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $275.1
  # [discarded value]: $274.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] $276.1:rax 
  .loc 2 925 17
  # $277.1: @FILE = call(end_line_386, $276.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $277.1
  # [discarded value]: $276.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] $269.1:[rbp-48] 
  # [discarded value]: $269.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] literal.1:[rbp-47] 
  # [discarded value]: literal.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] 
.LABEL__generate_load_value_30__93:
  .loc 2 927 20
  # $232.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $232.1:rbx 
  .loc 2 927 20
  # $233.1: bool = call(is_389, $232.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_389
  # [discarded value]: $232.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:rax 
  # jump($233.1, .LABEL__generate_load_value_30__94, .LABEL__generate_load_value_30__96)
  test al, al
  mov [rbp-40], al
  jz .LABEL__generate_load_value_30__96
.LABEL__generate_load_value_30__94:
  .loc 2 928 13
  # $258.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $258.1:rbx 
  .loc 2 928 13
  # $259.1: @FILE = call(write_383, $258.1, "  xor ")
  mov rdi, rbx
  lea rsi, .LABEL__string_80[rip] # "  xor "
  call write_383
  # [discarded value]: $258.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $259.1:rax 
  .loc 2 928 52
  # $260.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $259.1:rax $260.1:r15 
  .loc 2 928 13
  # $261.1: @FILE = call(write_383, $259.1, $260.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $260.1
  # [discarded value]: $259.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $261.1:rax 
  .loc 2 928 13
  # $262.1: @FILE = call(write_383, $261.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $261.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $262.1:rax 
  .loc 2 928 87
  # $263.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $262.1:rax $263.1:r15 
  .loc 2 928 13
  # $264.1: @FILE = call(write_383, $262.1, $263.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $263.1
  # [discarded value]: $262.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $264.1:rax 
  .loc 2 928 13
  # $265.1: @FILE = call(end_line_386, $264.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $265.1
  # [discarded value]: $264.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] 
.LABEL__generate_load_value_30__96:
  .loc 2 929 20
  # $234.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $234.1:rbx 
  .loc 2 929 20
  # $235.1: bool = call(is_389, $234.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_389
  # [discarded value]: $234.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:rax 
  # jump($235.1, .LABEL__generate_load_value_30__97, .LABEL__generate_load_value_30__99)
  test al, al
  mov [rbp-41], al
  jz .LABEL__generate_load_value_30__99
.LABEL__generate_load_value_30__97:
  .loc 2 930 49
  # $244.1: @String_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $244.1:rbx 
  .loc 2 930 29
  # mc_string.1: @MC_String = call(convert_string_57, self.1, $244.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  call convert_string_57
  # [discarded value]: $244.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:rax 
  .loc 2 931 13
  # $246.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:rax $246.1:r15 
  .loc 2 931 13
  # $247.1: @FILE = call(write_383, $246.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-49], rax
  call write_383
  # [discarded value]: $246.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $247.1:rax 
  .loc 2 931 52
  # $248.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $247.1:rax $248.1:r15 
  .loc 2 931 13
  # $249.1: @FILE = call(write_383, $247.1, $248.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $248.1
  # [discarded value]: $247.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $249.1:rax 
  .loc 2 931 13
  # $250.1: @FILE = call(write_383, $249.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $249.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $250.1:rax 
  .loc 2 931 13
  # $251.1: @FILE = call(write_string_label_59, $250.1, mc_string.1)
  mov rdi, rax
  mov rsi, [rbp-49]
  call write_string_label_59
  # [discarded value]: $250.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $251.1:rax 
  .loc 2 931 13
  # $252.1: @FILE = call(write_383, $251.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_383
  # [discarded value]: $251.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $252.1:rax 
  .loc 2 931 13
  # $253.1: @FILE = call(write_383, $252.1, " # ")
  mov rdi, rax
  lea rsi, .LABEL__string_81[rip] # " # "
  call write_383
  # [discarded value]: $252.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] mc_string.1:[rbp-49] $253.1:rax 
  .loc 2 931 145
  # $254.1: @String_Token = load_struct_member(mc_string.1, literal)
  mov rbx, [rbp-49]
  mov r15, [rbx+8]
  # [discarded value]: mc_string.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $253.1:rax $254.1:r15 
  .loc 2 931 145
  # $255.1: @String = load_struct_member($254.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $254.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $253.1:rax $255.1:rbx 
  .loc 2 931 13
  # $256.1: @FILE = call(write_383, $253.1, $255.1)
  mov rdi, rax
  mov rsi, rbx
  call write_383
  # [discarded value]: $255.1
  # [discarded value]: $253.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $256.1:rax 
  .loc 2 931 13
  # $257.1: @FILE = call(end_line_386, $256.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $257.1
  # [discarded value]: $256.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] 
.LABEL__generate_load_value_30__99:
  .loc 2 932 20
  # $236.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-36]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rax:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $236.1:rbx 
  .loc 2 932 20
  # $237.1: bool = call(is_389, $236.1, Undefined_Token)
  mov rdi, rbx
  mov rsi, Undefined_Token[rip]
  call is_389
  # [discarded value]: $236.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:rax 
  # jump($237.1, .LABEL__generate_load_value_30__10, .LABEL__generate_load_value_30__102)
  test al, al
  mov [rbp-42], al
  jnz .LABEL__generate_load_value_30__10
.LABEL__generate_load_value_30__102:
  .loc 2 935 24
  # $238.1: @String = call(clone_391, "Unsupported literal type: ")
  lea rdi, .LABEL__string_82[rip] # "Unsupported literal type: "
  call clone_391
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] $238.1:rax 
  .loc 2 935 67
  # $239.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-36]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] $238.1:rax $239.1:r15 
  .loc 2 935 67
  # $240.1: @Object_Type = load_struct_member($239.1, object_type)
  mov r14, [r15]
  # [discarded value]: $239.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] $238.1:rax $240.1:r14 
  .loc 2 935 67
  # $241.1: @String = load_struct_member_address($240.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:rbx:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] $238.1:rax $240.1:r14 $241.1:r15 
  .loc 2 935 24
  # $242.1: @String = call(append_400, $238.1, $241.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $241.1
  # [discarded value]: $240.1
  # [discarded value]: $238.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] $242.1:rax 
  .loc 2 935 13
  # call(abort_35, self.1, $242.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $242.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] $237.1:[rbp-42] 
  # [discarded value]: $237.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] $235.1:[rbp-41] 
  # [discarded value]: $235.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] $233.1:[rbp-40] 
  # [discarded value]: $233.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] $231.1:[rbp-39] 
  # [discarded value]: $231.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] $229.1:[rbp-38] 
  # [discarded value]: $229.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] $227.1:[rbp-37] 
  # [discarded value]: $227.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] ir_value.1:[rbp-36] 
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
.LABEL__generate_load_value_30__11:
  .loc 2 937 16
  # $9.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__generate_load_value_30__12, .LABEL__generate_load_value_30__14)
  test al, al
  mov [rbp-29], al
  jz .LABEL__generate_load_value_30__14
.LABEL__generate_load_value_30__12:
  .loc 2 938 24
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax 
  .loc 2 939 29
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value.1:rax ir_value_type.1:rbx 
  .loc 2 940 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov [rbp-37], rbx
  call get_value_42
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax 
  .loc 2 941 13
  # $69.1: bool = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax $69.1:rbx 
  # jump($69.1, .LABEL__generate_load_value_30__32, .LABEL__generate_load_value_30__33)
  test bl, bl
  mov [rbp-45], rax
  mov [rbp-46], bl
  jz .LABEL__generate_load_value_30__33
.LABEL__generate_load_value_30__32:
  .loc 2 942 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] 
.LABEL__generate_load_value_30__33:
  .loc 2 944 9
  # store_struct_member(register.1, loaded_value, mc_value.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-45]
  mov QWORD PTR [rax+49], rbx
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] 
  .loc 2 945 13
  # $70.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $70.1:r15 
  .loc 2 945 13
  # $71.1: bool = $70.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:r14 
  # jump($71.1, .LABEL__generate_load_value_30__34, .LABEL__generate_load_value_30__36)
  test r14b, r14b
  mov [rbp-47], r14b
  jz .LABEL__generate_load_value_30__36
.LABEL__generate_load_value_30__34:
  .loc 2 946 17
  # $141.1: bool = call(is_389, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Boolean_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:rax 
  # jump($141.1, .LABEL__generate_load_value_30__61, .LABEL__generate_load_value_30__63)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_load_value_30__63
.LABEL__generate_load_value_30__61:
  .loc 2 947 17
  # $216.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $216.1:rbx 
  .loc 2 947 17
  # $217.1: @FILE = call(write_383, $216.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $216.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $217.1:rax 
  .loc 2 947 56
  # $218.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $217.1:rax $218.1:r15 
  .loc 2 947 17
  # $219.1: @FILE = call(write_383, $217.1, $218.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $218.1
  # [discarded value]: $217.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $219.1:rax 
  .loc 2 947 17
  # $220.1: @FILE = call(write_383, $219.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $219.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $220.1:rax 
  .loc 2 947 91
  # $221.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $220.1:rax $221.1:r15 
  .loc 2 947 91
  # $222.1: @String = load_struct_member($221.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $221.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $220.1:rax $222.1:r14 
  .loc 2 947 17
  # $223.1: @FILE = call(write_383, $220.1, $222.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $222.1
  # [discarded value]: $220.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $223.1:rax 
  .loc 2 947 17
  # $224.1: @FILE = call(end_line_386, $223.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $224.1
  # [discarded value]: $223.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] 
.LABEL__generate_load_value_30__63:
  .loc 2 948 24
  # $142.1: bool = call(is_389, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:rax 
  # jump($142.1, .LABEL__generate_load_value_30__64, .LABEL__generate_load_value_30__66)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__66
.LABEL__generate_load_value_30__64:
  .loc 2 949 17
  # $207.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $207.1:rbx 
  .loc 2 949 17
  # $208.1: @FILE = call(write_383, $207.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $207.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $208.1:rax 
  .loc 2 949 56
  # $209.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $208.1:rax $209.1:r15 
  .loc 2 949 17
  # $210.1: @FILE = call(write_383, $208.1, $209.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $209.1
  # [discarded value]: $208.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $210.1:rax 
  .loc 2 949 17
  # $211.1: @FILE = call(write_383, $210.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $210.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $211.1:rax 
  .loc 2 949 91
  # $212.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $211.1:rax $212.1:r15 
  .loc 2 949 91
  # $213.1: @String = load_struct_member($212.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $212.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $211.1:rax $213.1:r14 
  .loc 2 949 17
  # $214.1: @FILE = call(write_383, $211.1, $213.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $213.1
  # [discarded value]: $211.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $214.1:rax 
  .loc 2 949 17
  # $215.1: @FILE = call(end_line_386, $214.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $215.1
  # [discarded value]: $214.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] 
.LABEL__generate_load_value_30__66:
  .loc 2 950 24
  # $143.1: bool = call(is_389, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:rax 
  # jump($143.1, .LABEL__generate_load_value_30__67, .LABEL__generate_load_value_30__69)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__69
.LABEL__generate_load_value_30__67:
  .loc 2 951 17
  # $198.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $198.1:rbx 
  .loc 2 951 17
  # $199.1: @FILE = call(write_383, $198.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $199.1:rax 
  .loc 2 951 56
  # $200.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $199.1:rax $200.1:r15 
  .loc 2 951 17
  # $201.1: @FILE = call(write_383, $199.1, $200.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $200.1
  # [discarded value]: $199.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $201.1:rax 
  .loc 2 951 17
  # $202.1: @FILE = call(write_383, $201.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $201.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $202.1:rax 
  .loc 2 951 91
  # $203.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $202.1:rax $203.1:r15 
  .loc 2 951 91
  # $204.1: @String = load_struct_member($203.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $203.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $202.1:rax $204.1:r14 
  .loc 2 951 17
  # $205.1: @FILE = call(write_383, $202.1, $204.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $204.1
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $205.1:rax 
  .loc 2 951 17
  # $206.1: @FILE = call(end_line_386, $205.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $206.1
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] 
.LABEL__generate_load_value_30__69:
  .loc 2 952 24
  # $144.1: bool = call(is_389, ir_value_type.1, IR_Int16_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:rax 
  # jump($144.1, .LABEL__generate_load_value_30__70, .LABEL__generate_load_value_30__72)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__72
.LABEL__generate_load_value_30__70:
  .loc 2 953 17
  # $189.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $189.1:rbx 
  .loc 2 953 17
  # $190.1: @FILE = call(write_383, $189.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $190.1:rax 
  .loc 2 953 56
  # $191.1: @String = load_struct_member(register.1, name_w)
  mov rbx, [rbp-17]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $190.1:rax $191.1:r15 
  .loc 2 953 17
  # $192.1: @FILE = call(write_383, $190.1, $191.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $191.1
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $192.1:rax 
  .loc 2 953 17
  # $193.1: @FILE = call(write_383, $192.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $193.1:rax 
  .loc 2 953 91
  # $194.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $193.1:rax $194.1:r15 
  .loc 2 953 91
  # $195.1: @String = load_struct_member($194.1, name_w)
  mov r14, [r15+24]
  # [discarded value]: $194.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $193.1:rax $195.1:r14 
  .loc 2 953 17
  # $196.1: @FILE = call(write_383, $193.1, $195.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $195.1
  # [discarded value]: $193.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $196.1:rax 
  .loc 2 953 17
  # $197.1: @FILE = call(end_line_386, $196.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $197.1
  # [discarded value]: $196.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] 
.LABEL__generate_load_value_30__72:
  .loc 2 954 24
  # $145.1: bool = call(is_389, ir_value_type.1, IR_Int32_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:rax 
  # jump($145.1, .LABEL__generate_load_value_30__73, .LABEL__generate_load_value_30__75)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__75
.LABEL__generate_load_value_30__73:
  .loc 2 955 17
  # $180.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $180.1:rbx 
  .loc 2 955 17
  # $181.1: @FILE = call(write_383, $180.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $181.1:rax 
  .loc 2 955 56
  # $182.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $181.1:rax $182.1:r15 
  .loc 2 955 17
  # $183.1: @FILE = call(write_383, $181.1, $182.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $182.1
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $183.1:rax 
  .loc 2 955 17
  # $184.1: @FILE = call(write_383, $183.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $184.1:rax 
  .loc 2 955 91
  # $185.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $184.1:rax $185.1:r15 
  .loc 2 955 91
  # $186.1: @String = load_struct_member($185.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $185.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $184.1:rax $186.1:r14 
  .loc 2 955 17
  # $187.1: @FILE = call(write_383, $184.1, $186.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $186.1
  # [discarded value]: $184.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $187.1:rax 
  .loc 2 955 17
  # $188.1: @FILE = call(end_line_386, $187.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $188.1
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] 
.LABEL__generate_load_value_30__75:
  .loc 2 956 24
  # $146.1: bool = call(is_389, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:rax 
  # jump($146.1, .LABEL__generate_load_value_30__76, .LABEL__generate_load_value_30__78)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__78
.LABEL__generate_load_value_30__76:
  .loc 2 957 17
  # $171.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $171.1:rbx 
  .loc 2 957 17
  # $172.1: @FILE = call(write_383, $171.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $172.1:rax 
  .loc 2 957 56
  # $173.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $172.1:rax $173.1:r15 
  .loc 2 957 17
  # $174.1: @FILE = call(write_383, $172.1, $173.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $173.1
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $174.1:rax 
  .loc 2 957 17
  # $175.1: @FILE = call(write_383, $174.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $174.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $175.1:rax 
  .loc 2 957 91
  # $176.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $175.1:rax $176.1:r15 
  .loc 2 957 91
  # $177.1: @String = load_struct_member($176.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $175.1:rax $177.1:r14 
  .loc 2 957 17
  # $178.1: @FILE = call(write_383, $175.1, $177.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $177.1
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $178.1:rax 
  .loc 2 957 17
  # $179.1: @FILE = call(end_line_386, $178.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $179.1
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] 
.LABEL__generate_load_value_30__78:
  .loc 2 958 24
  # $147.1: bool = call(is_389, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:rax 
  # jump($147.1, .LABEL__generate_load_value_30__79, .LABEL__generate_load_value_30__81)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_load_value_30__81
.LABEL__generate_load_value_30__79:
  .loc 2 959 17
  # $162.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $162.1:rbx 
  .loc 2 959 17
  # $163.1: @FILE = call(write_383, $162.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $162.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $163.1:rax 
  .loc 2 959 56
  # $164.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $163.1:rax $164.1:r15 
  .loc 2 959 17
  # $165.1: @FILE = call(write_383, $163.1, $164.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $164.1
  # [discarded value]: $163.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $165.1:rax 
  .loc 2 959 17
  # $166.1: @FILE = call(write_383, $165.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $165.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $166.1:rax 
  .loc 2 959 91
  # $167.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $166.1:rax $167.1:r15 
  .loc 2 959 91
  # $168.1: @String = load_struct_member($167.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $166.1:rax $168.1:r14 
  .loc 2 959 17
  # $169.1: @FILE = call(write_383, $166.1, $168.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $168.1
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $169.1:rax 
  .loc 2 959 17
  # $170.1: @FILE = call(end_line_386, $169.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $170.1
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] 
.LABEL__generate_load_value_30__81:
  .loc 2 960 24
  # $148.1: bool = call(is_389, ir_value_type.1, IR_Unchecked_Array_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:rax 
  # jump($148.1, .LABEL__generate_load_value_30__82, .LABEL__generate_load_value_30__84)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_load_value_30__84
.LABEL__generate_load_value_30__82:
  .loc 2 961 17
  # $153.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $153.1:rbx 
  .loc 2 961 17
  # $154.1: @FILE = call(write_383, $153.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $153.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $154.1:rax 
  .loc 2 961 56
  # $155.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $154.1:rax $155.1:r15 
  .loc 2 961 17
  # $156.1: @FILE = call(write_383, $154.1, $155.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $155.1
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $156.1:rax 
  .loc 2 961 17
  # $157.1: @FILE = call(write_383, $156.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $157.1:rax 
  .loc 2 961 91
  # $158.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-45]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $157.1:rax $158.1:r15 
  .loc 2 961 91
  # $159.1: @String = load_struct_member($158.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $157.1:rax $159.1:r14 
  .loc 2 961 17
  # $160.1: @FILE = call(write_383, $157.1, $159.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $159.1
  # [discarded value]: $157.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $160.1:rax 
  .loc 2 961 17
  # $161.1: @FILE = call(end_line_386, $160.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $161.1
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] 
.LABEL__generate_load_value_30__84:
  .loc 2 963 28
  # $149.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $149.1:rax 
  .loc 2 963 69
  # $150.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $149.1:rax $150.1:r15 
  .loc 2 963 69
  # $151.1: @String = load_struct_member_address($150.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $149.1:rax $150.1:r15 $151.1:r14 
  .loc 2 963 28
  # $152.1: @String = call(append_400, $149.1, $151.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $151.1
  # [discarded value]: $150.1
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] $152.1:rax 
  .loc 2 963 17
  # call(abort_35, self.1, $152.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] $148.1:[rbp-55] 
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] $147.1:[rbp-54] 
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] $146.1:[rbp-53] 
  # [discarded value]: $146.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] $145.1:[rbp-52] 
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] $144.1:[rbp-51] 
  # [discarded value]: $144.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] $143.1:[rbp-50] 
  # [discarded value]: $143.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] $142.1:[rbp-49] 
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $141.1:[rbp-48] 
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] 
.LABEL__generate_load_value_30__36:
  .loc 2 965 20
  # $72.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-45]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $72.1:rbx 
  .loc 2 965 20
  # $73.1: bool = $72.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rax:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:r15 
  # jump($73.1, .LABEL__generate_load_value_30__37, .LABEL__generate_load_value_30__39)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__generate_load_value_30__39
.LABEL__generate_load_value_30__37:
  .loc 2 966 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] 
.LABEL__generate_load_value_30__39:
  .loc 2 967 20
  # $74.1: bool = call(is_389, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Boolean_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:rax 
  # jump($74.1, .LABEL__generate_load_value_30__40, .LABEL__generate_load_value_30__42)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_load_value_30__42
.LABEL__generate_load_value_30__40:
  .loc 2 968 13
  # $133.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $133.1:rbx 
  .loc 2 968 13
  # $134.1: @FILE = call(write_383, $133.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $134.1:rax 
  .loc 2 968 52
  # $135.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $134.1:rax $135.1:r15 
  .loc 2 968 13
  # $136.1: @FILE = call(write_383, $134.1, $135.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $135.1
  # [discarded value]: $134.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $136.1:rax 
  .loc 2 968 13
  # $137.1: @FILE = call(write_383, $136.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $137.1:rax 
  .loc 2 968 87
  # $138.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $137.1:rax $138.1:r15 
  .loc 2 968 13
  # $139.1: @FILE = call(write_55, $137.1, $138.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $138.1
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $139.1:rax 
  .loc 2 968 13
  # $140.1: @FILE = call(end_line_386, $139.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $140.1
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
.LABEL__generate_load_value_30__42:
  .loc 2 969 20
  # $75.1: bool = call(is_389, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:rax 
  # jump($75.1, .LABEL__generate_load_value_30__43, .LABEL__generate_load_value_30__45)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_load_value_30__45
.LABEL__generate_load_value_30__43:
  .loc 2 970 13
  # $125.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $125.1:rbx 
  .loc 2 970 13
  # $126.1: @FILE = call(write_383, $125.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $125.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $126.1:rax 
  .loc 2 970 52
  # $127.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $126.1:rax $127.1:r15 
  .loc 2 970 13
  # $128.1: @FILE = call(write_383, $126.1, $127.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $127.1
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $128.1:rax 
  .loc 2 970 13
  # $129.1: @FILE = call(write_383, $128.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $128.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $129.1:rax 
  .loc 2 970 87
  # $130.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $129.1:rax $130.1:r15 
  .loc 2 970 13
  # $131.1: @FILE = call(write_55, $129.1, $130.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $130.1
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $131.1:rax 
  .loc 2 970 13
  # $132.1: @FILE = call(end_line_386, $131.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $132.1
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
.LABEL__generate_load_value_30__45:
  .loc 2 971 20
  # $76.1: bool = call(is_389, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:rax 
  # jump($76.1, .LABEL__generate_load_value_30__46, .LABEL__generate_load_value_30__48)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_load_value_30__48
.LABEL__generate_load_value_30__46:
  .loc 2 972 13
  # $117.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $117.1:rbx 
  .loc 2 972 13
  # $118.1: @FILE = call(write_383, $117.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $118.1:rax 
  .loc 2 972 52
  # $119.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $118.1:rax $119.1:r15 
  .loc 2 972 13
  # $120.1: @FILE = call(write_383, $118.1, $119.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $120.1:rax 
  .loc 2 972 13
  # $121.1: @FILE = call(write_383, $120.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $121.1:rax 
  .loc 2 972 87
  # $122.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $121.1:rax $122.1:r15 
  .loc 2 972 13
  # $123.1: @FILE = call(write_55, $121.1, $122.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $122.1
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $123.1:rax 
  .loc 2 972 13
  # $124.1: @FILE = call(end_line_386, $123.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $124.1
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
.LABEL__generate_load_value_30__48:
  .loc 2 973 20
  # $77.1: bool = call(is_389, ir_value_type.1, IR_Int32_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:rax 
  # jump($77.1, .LABEL__generate_load_value_30__49, .LABEL__generate_load_value_30__51)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_load_value_30__51
.LABEL__generate_load_value_30__49:
  .loc 2 974 13
  # $109.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $109.1:rbx 
  .loc 2 974 13
  # $110.1: @FILE = call(write_383, $109.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $110.1:rax 
  .loc 2 974 52
  # $111.1: @String = load_struct_member(register.1, name_d)
  mov rbx, [rbp-17]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $110.1:rax $111.1:r15 
  .loc 2 974 13
  # $112.1: @FILE = call(write_383, $110.1, $111.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $111.1
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $112.1:rax 
  .loc 2 974 13
  # $113.1: @FILE = call(write_383, $112.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $113.1:rax 
  .loc 2 974 87
  # $114.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $113.1:rax $114.1:r15 
  .loc 2 974 13
  # $115.1: @FILE = call(write_55, $113.1, $114.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $114.1
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $115.1:rax 
  .loc 2 974 13
  # $116.1: @FILE = call(end_line_386, $115.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $116.1
  # [discarded value]: $115.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
.LABEL__generate_load_value_30__51:
  .loc 2 975 20
  # $78.1: bool = call(is_389, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:rax 
  # jump($78.1, .LABEL__generate_load_value_30__52, .LABEL__generate_load_value_30__54)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_load_value_30__54
.LABEL__generate_load_value_30__52:
  .loc 2 976 13
  # $101.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $101.1:rbx 
  .loc 2 976 13
  # $102.1: @FILE = call(write_383, $101.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $102.1:rax 
  .loc 2 976 52
  # $103.1: @String = load_struct_member(register.1, name_b)
  mov rbx, [rbp-17]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $102.1:rax $103.1:r15 
  .loc 2 976 13
  # $104.1: @FILE = call(write_383, $102.1, $103.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $103.1
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $104.1:rax 
  .loc 2 976 13
  # $105.1: @FILE = call(write_383, $104.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $105.1:rax 
  .loc 2 976 87
  # $106.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $105.1:rax $106.1:r15 
  .loc 2 976 13
  # $107.1: @FILE = call(write_55, $105.1, $106.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $107.1:rax 
  .loc 2 976 13
  # $108.1: @FILE = call(end_line_386, $107.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $108.1
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
.LABEL__generate_load_value_30__54:
  .loc 2 977 20
  # $79.1: bool = call(is_389, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:rax 
  # jump($79.1, .LABEL__generate_load_value_30__55, .LABEL__generate_load_value_30__57)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_load_value_30__57
.LABEL__generate_load_value_30__55:
  .loc 2 978 13
  # $93.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $93.1:rbx 
  .loc 2 978 13
  # $94.1: @FILE = call(write_383, $93.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $94.1:rax 
  .loc 2 978 52
  # $95.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $94.1:rax $95.1:r15 
  .loc 2 978 13
  # $96.1: @FILE = call(write_383, $94.1, $95.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $95.1
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $96.1:rax 
  .loc 2 978 13
  # $97.1: @FILE = call(write_383, $96.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $97.1:rax 
  .loc 2 978 87
  # $98.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $97.1:rax $98.1:r15 
  .loc 2 978 13
  # $99.1: @FILE = call(write_55, $97.1, $98.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $98.1
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $99.1:rax 
  .loc 2 978 13
  # $100.1: @FILE = call(end_line_386, $99.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $100.1
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
.LABEL__generate_load_value_30__57:
  .loc 2 979 20
  # $80.1: bool = call(is_389, ir_value_type.1, IR_Unchecked_Array_Type)
  mov rdi, [rbp-37]
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:rax 
  # jump($80.1, .LABEL__generate_load_value_30__58, .LABEL__generate_load_value_30__60)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_load_value_30__60
.LABEL__generate_load_value_30__58:
  .loc 2 980 13
  # $85.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $85.1:rbx 
  .loc 2 980 13
  # $86.1: @FILE = call(write_383, $85.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $85.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $86.1:rax 
  .loc 2 980 52
  # $87.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $86.1:rax $87.1:r15 
  .loc 2 980 13
  # $88.1: @FILE = call(write_383, $86.1, $87.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $87.1
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $88.1:rax 
  .loc 2 980 13
  # $89.1: @FILE = call(write_383, $88.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $89.1:rax 
  .loc 2 980 87
  # $90.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-45]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:rbx:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $89.1:rax $90.1:r15 
  .loc 2 980 13
  # $91.1: @FILE = call(write_55, $89.1, $90.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $90.1
  # [discarded value]: $89.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $91.1:rax 
  .loc 2 980 13
  # $92.1: @FILE = call(end_line_386, $91.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $92.1
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] 
.LABEL__generate_load_value_30__60:
  .loc 2 982 24
  # $81.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $81.1:rax 
  .loc 2 982 65
  # $82.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-37]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $81.1:rax $82.1:r15 
  .loc 2 982 65
  # $83.1: @String = load_struct_member_address($82.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:rbx:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $81.1:rax $82.1:r15 $83.1:r14 
  .loc 2 982 24
  # $84.1: @String = call(append_400, $81.1, $83.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] $84.1:rax 
  .loc 2 982 13
  # call(abort_35, self.1, $84.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] $80.1:[rbp-55] 
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] $79.1:[rbp-54] 
  # [discarded value]: $79.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] $78.1:[rbp-53] 
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] $77.1:[rbp-52] 
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] $76.1:[rbp-51] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] $75.1:[rbp-50] 
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] $74.1:[rbp-49] 
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] $73.1:[rbp-48] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] $71.1:[rbp-47] 
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] $69.1:[rbp-46] 
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] ir_value_type.1:[rbp-37] mc_value.1:[rbp-45] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value_type.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
.LABEL__generate_load_value_30__14:
  .loc 2 984 16
  # $10.1: bool = call(is_389, ir_value.1, IR_Variable_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Variable_Address_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:rax 
  # jump($10.1, .LABEL__generate_load_value_30__15, .LABEL__generate_load_value_30__17)
  test al, al
  mov [rbp-30], al
  jz .LABEL__generate_load_value_30__17
.LABEL__generate_load_value_30__15:
  .loc 2 985 24
  # ir_value.1: @IR_Variable_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] ir_value.1:rax 
  .loc 2 986 33
  # ir_variable_value.1: @IR_Variable_Value = load_struct_member(ir_value.1, variable_value)
  mov rbx, [rax+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] ir_variable_value.1:rbx 
  .loc 2 987 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_variable_value.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  call get_value_42
  # [discarded value]: ir_variable_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rax 
  .loc 2 988 13
  # $57.1: bool = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rax $57.1:rbx 
  # jump($57.1, .LABEL__generate_load_value_30__30, .LABEL__generate_load_value_30__31)
  test bl, bl
  mov [rbp-38], rax
  mov [rbp-39], bl
  jz .LABEL__generate_load_value_30__31
.LABEL__generate_load_value_30__30:
  .loc 2 989 13
  # call(abort_35, self.1, "The required variable value has been discarded already?")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_84[rip] # "The required variable value has been discarded already?"
  call abort_35
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
.LABEL__generate_load_value_30__31:
  .loc 2 991 9
  # $58.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $58.1:rbx 
  .loc 2 991 9
  # $59.1: @FILE = call(write_383, $58.1, "  lea ")
  mov rdi, rbx
  lea rsi, .LABEL__string_67[rip] # "  lea "
  call write_383
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $59.1:rax 
  .loc 2 991 48
  # $60.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $59.1:rax $60.1:r15 
  .loc 2 991 9
  # $61.1: @FILE = call(write_383, $59.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $61.1:rax 
  .loc 2 991 9
  # $62.1: @FILE = call(write_383, $61.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $62.1:rax 
  .loc 2 991 83
  # $63.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-38]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:rbx:[rbp-38] $57.1:[rbp-39] $62.1:rax $63.1:r15 
  .loc 2 991 9
  # $64.1: @FILE = call(write_55, $62.1, $63.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] $64.1:rax 
  .loc 2 991 9
  # $65.1: @FILE = call(end_line_386, $64.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] $57.1:[rbp-39] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] mc_value.1:[rbp-38] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] 
.LABEL__generate_load_value_30__17:
  .loc 2 992 16
  # $11.1: bool = call(is_389, ir_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:rax 
  # jump($11.1, .LABEL__generate_load_value_30__18, .LABEL__generate_load_value_30__20)
  test al, al
  mov [rbp-31], al
  jz .LABEL__generate_load_value_30__20
.LABEL__generate_load_value_30__18:
  .loc 2 993 24
  # ir_value.1: @IR_Global_Variable_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax 
  .loc 2 994 29
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax ir_value_type.1:rbx 
  .loc 2 995 13
  # $40.1: bool = call(is_389, ir_value_type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-39], rax
  mov [rbp-47], rbx
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:rax 
  # jump($40.1, .LABEL__generate_load_value_30__27, .LABEL__generate_load_value_30__29)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_load_value_30__29
.LABEL__generate_load_value_30__27:
  .loc 2 996 81
  # $45.1: @IR_Variable = load_struct_member(ir_value.1, variable)
  mov rax, [rbp-39]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:rax:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $45.1:rbx 
  .loc 2 996 36
  # variable_address.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $45.1)
  mov [rbp-56], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $45.1
  mov rbx, [rbp-56]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:rax 
  .loc 2 997 13
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:rax $47.1:r15 
  .loc 2 997 13
  # $48.1: @FILE = call(write_383, $47.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  mov [rbp-56], rax
  call write_383
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $48.1:rax 
  .loc 2 997 52
  # $49.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $48.1:rax $49.1:r15 
  .loc 2 997 13
  # $50.1: @FILE = call(write_383, $48.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $50.1:rax 
  .loc 2 997 13
  # $51.1: @FILE = call(write_383, $50.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] variable_address.1:[rbp-56] $51.1:rax 
  .loc 2 997 13
  # $52.1: @FILE = call(write_55, $51.1, variable_address.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call write_55
  # [discarded value]: $51.1
  # [discarded value]: variable_address.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $52.1:rax 
  .loc 2 997 13
  # $53.1: @FILE = call(end_line_386, $52.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
.LABEL__generate_load_value_30__29:
  .loc 2 999 24
  # $41.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $41.1:rax 
  .loc 2 999 65
  # $42.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-47]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:rbx:[rbp-47] $40.1:[rbp-48] $41.1:rax $42.1:r15 
  .loc 2 999 65
  # $43.1: @String = load_struct_member_address($42.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:rbx:[rbp-47] $40.1:[rbp-48] $41.1:rax $42.1:r15 $43.1:r14 
  .loc 2 999 24
  # $44.1: @String = call(append_400, $41.1, $43.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $43.1
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] $44.1:rax 
  .loc 2 999 13
  # call(abort_35, self.1, $44.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] $40.1:[rbp-48] 
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] ir_value.1:[rbp-39] ir_value_type.1:[rbp-47] 
  # [discarded value]: ir_value_type.1
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] 
.LABEL__generate_load_value_30__20:
  .loc 2 1001 16
  # $12.1: bool = call(is_389, ir_value.1, IR_Global_Variable_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Global_Variable_Address_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:rax 
  # jump($12.1, .LABEL__generate_load_value_30__21, .LABEL__generate_load_value_30__23)
  test al, al
  mov [rbp-32], al
  jz .LABEL__generate_load_value_30__23
.LABEL__generate_load_value_30__21:
  .loc 2 1002 24
  # ir_value.1: @IR_Global_Variable_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] ir_value.1:rax 
  .loc 2 1003 77
  # $29.1: @IR_Variable = load_struct_member(ir_value.1, variable)
  mov rbx, [rax+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $29.1:rbx 
  .loc 2 1003 32
  # variable_address.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $29.1)
  mov [rbp-40], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $29.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:rax 
  .loc 2 1004 9
  # $31.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:rax $31.1:r15 
  .loc 2 1004 9
  # $32.1: @FILE = call(write_383, $31.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-40], rax
  call write_383
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $32.1:rax 
  .loc 2 1004 48
  # $33.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $32.1:rax $33.1:r15 
  .loc 2 1004 9
  # $34.1: @FILE = call(write_383, $32.1, $33.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $34.1:rax 
  .loc 2 1004 9
  # $35.1: @FILE = call(write_383, $34.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] variable_address.1:[rbp-40] $35.1:rax 
  .loc 2 1004 9
  # $36.1: @FILE = call(write_55, $35.1, variable_address.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  call write_55
  # [discarded value]: $35.1
  # [discarded value]: variable_address.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $36.1:rax 
  .loc 2 1004 9
  # $37.1: @FILE = call(end_line_386, $36.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
.LABEL__generate_load_value_30__23:
  .loc 2 1005 16
  # $13.1: bool = call(is_389, ir_value.1, IR_Function_Address_Value)
  mov rdi, [rbp-8]
  mov rsi, IR_Function_Address_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:rax 
  # jump($13.1, .LABEL__generate_load_value_30__24, .LABEL__generate_load_value_30__26)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_load_value_30__26
.LABEL__generate_load_value_30__24:
  .loc 2 1006 24
  # ir_value.1: @IR_Function_Address_Value = ir_value.1
  mov rax, [rbp-8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:rax 
  .loc 2 1007 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:rax $19.1:r15 
  .loc 2 1007 9
  # $20.1: @FILE = call(write_383, $19.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-41], rax
  call write_383
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $20.1:rax 
  .loc 2 1007 48
  # $21.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-17]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $20.1:rax $21.1:r15 
  .loc 2 1007 9
  # $22.1: @FILE = call(write_383, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $22.1:rax 
  .loc 2 1007 9
  # $23.1: @FILE = call(write_383, $22.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] ir_value.1:[rbp-41] $23.1:rax 
  .loc 2 1007 98
  # $24.1: @IR_Function = load_struct_member(ir_value.1, function)
  mov rbx, [rbp-41]
  mov r15, [rbx+48]
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $23.1:rax $24.1:r15 
  .loc 2 1007 9
  # $25.1: @FILE = call(write_function_label_4, $23.1, $24.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $25.1:rax 
  .loc 2 1007 9
  # $26.1: @FILE = call(write_383, $25.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_383
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $26.1:rax 
  .loc 2 1007 9
  # $27.1: @FILE = call(end_line_386, $26.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
  # jump(.LABEL__generate_load_value_30__10)
  jmp .LABEL__generate_load_value_30__10
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
.LABEL__generate_load_value_30__26:
  .loc 2 1009 20
  # $14.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax 
  .loc 2 1009 61
  # $15.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax $15.1:r15 
  .loc 2 1009 61
  # $16.1: @String = load_struct_member_address($15.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:rbx:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $14.1:rax $15.1:r15 $16.1:r14 
  .loc 2 1009 20
  # $17.1: @String = call(append_400, $14.1, $16.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] $17.1:rax 
  .loc 2 1009 9
  # call(abort_35, self.1, $17.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_35
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] $13.1:[rbp-33] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] $12.1:[rbp-32] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] $11.1:[rbp-31] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] $10.1:[rbp-30] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] $9.1:[rbp-29] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $8.1:[rbp-28] $7.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] ir_value.1:[rbp-8] 
  # [discarded value]: ir_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_load_value_30__end:
  mov rsp, rbp
  pop rbp
  ret

generate_load_value_30__stack_frame_size: .word 64

  .loc 2 1013 8
  .text
generate_store_value_31:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_value_31__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_value_31__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: self.1:rdi ir_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx 
  .loc 2 1014 25
  # ir_value_type.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi ir_value.1:rsi address.1:rdx ir_value_type.1:rax 
  .loc 2 1015 9
  # $3.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Variable_Value[rip]
  mov [rbp-24], rax
  mov [rbp-32], rdx
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__generate_store_value_31__2, .LABEL__generate_store_value_31__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__generate_store_value_31__3
.LABEL__generate_store_value_31__2:
  .loc 2 1015 43
  # $4.1: bool = call(is_389, ir_value_type.1, IR_Struct_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $4.1:rax 
  .loc 2 1015 43
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $5.1:rbx 
  .loc 2 1015 9
  # $3.2: bool = $5.1
  mov [rbp-34], bl
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:rbx:[rbp-33] 
  # jump(.LABEL__generate_store_value_31__3)
  mov [rbp-33], bl
.LABEL__generate_store_value_31__3:
  .loc 2 1015 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__generate_store_value_31__4, .LABEL__generate_store_value_31__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__generate_store_value_31__5
.LABEL__generate_store_value_31__4:
  .loc 2 1016 39
  # $6.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] $6.1:rax 
  .loc 2 1016 24
  # mc_value.1: @MC_Value = call(get_value_42, self.1, $6.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax 
  .loc 2 1017 13
  # $8.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax $8.1:rbx 
  .loc 2 1017 13
  # $9.1: bool = $8.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax $9.1:r15 
  # jump($9.1, .LABEL__generate_store_value_31__6, .LABEL__generate_store_value_31__5)
  test r15b, r15b
  mov [rbp-41], rax
  mov [rbp-42], r15b
  jz .LABEL__generate_store_value_31__5
.LABEL__generate_store_value_31__6:
  .loc 2 1018 28
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] register.1:rax 
  .loc 2 1019 13
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-50], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] register.1:[rbp-50] 
  .loc 2 1020 37
  # $11.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-41]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:rax:[rbp-41] $9.1:[rbp-42] register.1:[rbp-50] $11.1:rbx 
  .loc 2 1020 13
  # $12.1: @MC_Value = call(map_variable_value_41, self.1, $11.1, register.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-50]
  call map_variable_value_41
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # jump(.LABEL__generate_store_value_31__5)
.LABEL__generate_store_value_31__5:
  .loc 2 1023 9
  # $14.1: bool = call(is_389, ir_value.1, IR_Constant_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:rax 
  # jump($14.1, .LABEL__generate_store_value_31__8, .LABEL__generate_store_value_31__9)
  test al, al
  mov [rbp-43], al
  jz .LABEL__generate_store_value_31__9
.LABEL__generate_store_value_31__8:
  .loc 2 1023 44
  # $15.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $15.1:rax 
  .loc 2 1023 43
  # $16.1: @Literal_Token = load_struct_member($15.1, literal)
  mov rbx, [rax+48]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $16.1:rbx 
  .loc 2 1023 43
  # $14.2: bool = call(is_389, $16.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_389
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:rax:[rbp-43] 
  # jump(.LABEL__generate_store_value_31__9)
  mov [rbp-43], al
.LABEL__generate_store_value_31__9:
  .loc 2 1023 9
  # $14.3: bool = phi($14.1, $14.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # jump($14.3, .LABEL__generate_store_value_31__10, .LABEL__generate_store_value_31__12)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__generate_store_value_31__12
.LABEL__generate_store_value_31__10:
  .loc 2 1024 24
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:rax 
  .loc 2 1025 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-51], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] 
  .loc 2 1026 9
  # $243.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $243.1:rbx 
  .loc 2 1026 9
  # $244.1: @FILE = call(write_383, $243.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $243.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $244.1:rax 
  .loc 2 1026 9
  # $245.1: @FILE = call(write_55, $244.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $244.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $245.1:rax 
  .loc 2 1026 9
  # $246.1: @FILE = call(write_383, $245.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $245.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] register.1:[rbp-51] $246.1:rax 
  .loc 2 1026 75
  # $247.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-51]
  mov r15, [rbx+8]
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $246.1:rax $247.1:r15 
  .loc 2 1026 9
  # $248.1: @FILE = call(write_383, $246.1, $247.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $247.1
  # [discarded value]: $246.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $248.1:rax 
  .loc 2 1026 9
  # $249.1: @FILE = call(end_line_386, $248.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $249.1
  # [discarded value]: $248.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # jump(.LABEL__generate_store_value_31__11)
.LABEL__generate_store_value_31__11:
  # return()
  jmp .LABEL__generate_store_value_31__end
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
.LABEL__generate_store_value_31__12:
  .loc 2 1027 16
  # $18.1: bool = call(is_389, ir_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:rax 
  # jump($18.1, .LABEL__generate_store_value_31__13, .LABEL__generate_store_value_31__15)
  test al, al
  mov [rbp-44], al
  jz .LABEL__generate_store_value_31__15
.LABEL__generate_store_value_31__13:
  .loc 2 1028 24
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:rax 
  .loc 2 1029 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-52], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] 
  .loc 2 1030 13
  # $230.1: bool = call(is_389, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:rax 
  # jump($230.1, .LABEL__generate_store_value_31__82, .LABEL__generate_store_value_31__84)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_store_value_31__84
.LABEL__generate_store_value_31__82:
  .loc 2 1031 13
  # $235.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $235.1:rbx 
  .loc 2 1031 13
  # $236.1: @FILE = call(write_383, $235.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $235.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $236.1:rax 
  .loc 2 1031 13
  # $237.1: @FILE = call(write_55, $236.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $236.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $237.1:rax 
  .loc 2 1031 13
  # $238.1: @FILE = call(write_383, $237.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $237.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $238.1:rax 
  .loc 2 1031 79
  # $239.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-52]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:rbx:[rbp-52] $230.1:[rbp-53] $238.1:rax $239.1:r15 
  .loc 2 1031 13
  # $240.1: @FILE = call(write_383, $238.1, $239.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $239.1
  # [discarded value]: $238.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $240.1:rax 
  .loc 2 1031 13
  # $241.1: @FILE = call(end_line_386, $240.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $241.1
  # [discarded value]: $240.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] 
.LABEL__generate_store_value_31__84:
  .loc 2 1033 24
  # $231.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $231.1:rax 
  .loc 2 1033 65
  # $232.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $231.1:rax $232.1:r15 
  .loc 2 1033 65
  # $233.1: @String = load_struct_member_address($232.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $231.1:rax $232.1:r15 $233.1:r14 
  .loc 2 1033 24
  # $234.1: @String = call(append_400, $231.1, $233.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $233.1
  # [discarded value]: $232.1
  # [discarded value]: $231.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] $234.1:rax 
  .loc 2 1033 13
  # call(abort_35, self.1, $234.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $234.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] $230.1:[rbp-53] 
  # [discarded value]: $230.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] register.1:[rbp-52] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] 
.LABEL__generate_store_value_31__15:
  .loc 2 1035 16
  # $19.1: bool = call(is_389, ir_value.1, IR_Function_Address_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Address_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:rax 
  # jump($19.1, .LABEL__generate_store_value_31__16, .LABEL__generate_store_value_31__18)
  test al, al
  mov [rbp-45], al
  jz .LABEL__generate_store_value_31__18
.LABEL__generate_store_value_31__16:
  .loc 2 1036 24
  # register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:rax 
  .loc 2 1037 9
  # call(generate_load_value_30, self.1, register.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, [rbp-16]
  mov [rbp-53], rax
  call generate_load_value_30
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] 
  .loc 2 1038 13
  # $217.1: bool = call(is_389, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:rax 
  # jump($217.1, .LABEL__generate_store_value_31__79, .LABEL__generate_store_value_31__81)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_store_value_31__81
.LABEL__generate_store_value_31__79:
  .loc 2 1039 13
  # $222.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $222.1:rbx 
  .loc 2 1039 13
  # $223.1: @FILE = call(write_383, $222.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $222.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $223.1:rax 
  .loc 2 1039 13
  # $224.1: @FILE = call(write_55, $223.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $223.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $224.1:rax 
  .loc 2 1039 13
  # $225.1: @FILE = call(write_383, $224.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $224.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $225.1:rax 
  .loc 2 1039 79
  # $226.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-53]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:rbx:[rbp-53] $217.1:[rbp-54] $225.1:rax $226.1:r15 
  .loc 2 1039 13
  # $227.1: @FILE = call(write_383, $225.1, $226.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $226.1
  # [discarded value]: $225.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $227.1:rax 
  .loc 2 1039 13
  # $228.1: @FILE = call(end_line_386, $227.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $228.1
  # [discarded value]: $227.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] 
.LABEL__generate_store_value_31__81:
  .loc 2 1041 24
  # $218.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $218.1:rax 
  .loc 2 1041 65
  # $219.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $218.1:rax $219.1:r15 
  .loc 2 1041 65
  # $220.1: @String = load_struct_member_address($219.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $218.1:rax $219.1:r15 $220.1:r14 
  .loc 2 1041 24
  # $221.1: @String = call(append_400, $218.1, $220.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $220.1
  # [discarded value]: $219.1
  # [discarded value]: $218.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] $221.1:rax 
  .loc 2 1041 13
  # call(abort_35, self.1, $221.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $221.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] $217.1:[rbp-54] 
  # [discarded value]: $217.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] register.1:[rbp-53] 
  # [discarded value]: register.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
.LABEL__generate_store_value_31__18:
  .loc 2 1043 16
  # $20.1: bool = call(is_389, ir_value_type.1, IR_Int_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:rax 
  # jump($20.1, .LABEL__generate_store_value_31__19, .LABEL__generate_store_value_31__21)
  test al, al
  mov [rbp-46], al
  jz .LABEL__generate_store_value_31__21
.LABEL__generate_store_value_31__19:
  .loc 2 1044 9
  # $210.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $210.1:rbx 
  .loc 2 1044 9
  # $211.1: @FILE = call(write_383, $210.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $210.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $211.1:rax 
  .loc 2 1044 9
  # $212.1: @FILE = call(write_55, $211.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $211.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $212.1:rax 
  .loc 2 1044 9
  # $213.1: @FILE = call(write_383, $212.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $212.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $213.1:rax 
  .loc 2 1044 9
  # $214.1: @FILE = call(write_operand_34, $213.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $213.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $214.1:rax 
  .loc 2 1044 9
  # $215.1: @FILE = call(end_line_386, $214.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $215.1
  # [discarded value]: $214.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
.LABEL__generate_store_value_31__21:
  .loc 2 1045 16
  # $21.1: bool = call(is_389, ir_value_type.1, IR_Int16_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:rax 
  # jump($21.1, .LABEL__generate_store_value_31__22, .LABEL__generate_store_value_31__24)
  test al, al
  mov [rbp-47], al
  jz .LABEL__generate_store_value_31__24
.LABEL__generate_store_value_31__22:
  .loc 2 1046 9
  # $204.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $204.1:rbx 
  .loc 2 1046 9
  # $205.1: @FILE = call(write_383, $204.1, "  mov WORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_86[rip] # "  mov WORD PTR "
  call write_383
  # [discarded value]: $204.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $205.1:rax 
  .loc 2 1046 9
  # $206.1: @FILE = call(write_55, $205.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $205.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $206.1:rax 
  .loc 2 1046 9
  # $207.1: @FILE = call(write_383, $206.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $206.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $207.1:rax 
  .loc 2 1046 9
  # $208.1: @FILE = call(write_operand_34, $207.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $207.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $208.1:rax 
  .loc 2 1046 9
  # $209.1: @FILE = call(end_line_386, $208.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $209.1
  # [discarded value]: $208.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
.LABEL__generate_store_value_31__24:
  .loc 2 1047 16
  # $22.1: bool = call(is_389, ir_value_type.1, IR_Int32_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:rax 
  # jump($22.1, .LABEL__generate_store_value_31__25, .LABEL__generate_store_value_31__27)
  test al, al
  mov [rbp-48], al
  jz .LABEL__generate_store_value_31__27
.LABEL__generate_store_value_31__25:
  .loc 2 1048 9
  # $198.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $198.1:rbx 
  .loc 2 1048 9
  # $199.1: @FILE = call(write_383, $198.1, "  mov DWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_87[rip] # "  mov DWORD PTR "
  call write_383
  # [discarded value]: $198.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $199.1:rax 
  .loc 2 1048 9
  # $200.1: @FILE = call(write_55, $199.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $199.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $200.1:rax 
  .loc 2 1048 9
  # $201.1: @FILE = call(write_383, $200.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $200.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $201.1:rax 
  .loc 2 1048 9
  # $202.1: @FILE = call(write_operand_34, $201.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $201.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $202.1:rax 
  .loc 2 1048 9
  # $203.1: @FILE = call(end_line_386, $202.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $203.1
  # [discarded value]: $202.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
.LABEL__generate_store_value_31__27:
  .loc 2 1049 16
  # $23.1: bool = call(is_389, ir_value_type.1, IR_Int64_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int64_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:rax 
  # jump($23.1, .LABEL__generate_store_value_31__28, .LABEL__generate_store_value_31__30)
  test al, al
  mov [rbp-49], al
  jz .LABEL__generate_store_value_31__30
.LABEL__generate_store_value_31__28:
  .loc 2 1050 9
  # $192.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $192.1:rbx 
  .loc 2 1050 9
  # $193.1: @FILE = call(write_383, $192.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $192.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $193.1:rax 
  .loc 2 1050 9
  # $194.1: @FILE = call(write_55, $193.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $193.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $194.1:rax 
  .loc 2 1050 9
  # $195.1: @FILE = call(write_383, $194.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $194.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $195.1:rax 
  .loc 2 1050 9
  # $196.1: @FILE = call(write_operand_34, $195.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $195.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $196.1:rax 
  .loc 2 1050 9
  # $197.1: @FILE = call(end_line_386, $196.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $197.1
  # [discarded value]: $196.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
.LABEL__generate_store_value_31__30:
  .loc 2 1051 16
  # $24.1: bool = call(is_389, ir_value_type.1, IR_Int8_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:rax 
  # jump($24.1, .LABEL__generate_store_value_31__31, .LABEL__generate_store_value_31__33)
  test al, al
  mov [rbp-50], al
  jz .LABEL__generate_store_value_31__33
.LABEL__generate_store_value_31__31:
  .loc 2 1052 9
  # $186.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $186.1:rbx 
  .loc 2 1052 9
  # $187.1: @FILE = call(write_383, $186.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_88[rip] # "  mov BYTE PTR "
  call write_383
  # [discarded value]: $186.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $187.1:rax 
  .loc 2 1052 9
  # $188.1: @FILE = call(write_55, $187.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $187.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $188.1:rax 
  .loc 2 1052 9
  # $189.1: @FILE = call(write_383, $188.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $188.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $189.1:rax 
  .loc 2 1052 9
  # $190.1: @FILE = call(write_operand_34, $189.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $189.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $190.1:rax 
  .loc 2 1052 9
  # $191.1: @FILE = call(end_line_386, $190.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $191.1
  # [discarded value]: $190.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
.LABEL__generate_store_value_31__33:
  .loc 2 1053 16
  # $25.1: bool = call(is_389, ir_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:rax 
  # jump($25.1, .LABEL__generate_store_value_31__34, .LABEL__generate_store_value_31__36)
  test al, al
  mov [rbp-51], al
  jz .LABEL__generate_store_value_31__36
.LABEL__generate_store_value_31__34:
  .loc 2 1054 9
  # $180.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $180.1:rbx 
  .loc 2 1054 9
  # $181.1: @FILE = call(write_383, $180.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $180.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $181.1:rax 
  .loc 2 1054 9
  # $182.1: @FILE = call(write_55, $181.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $181.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $182.1:rax 
  .loc 2 1054 9
  # $183.1: @FILE = call(write_383, $182.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $182.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $183.1:rax 
  .loc 2 1054 9
  # $184.1: @FILE = call(write_operand_34, $183.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $183.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $184.1:rax 
  .loc 2 1054 9
  # $185.1: @FILE = call(end_line_386, $184.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $185.1
  # [discarded value]: $184.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
.LABEL__generate_store_value_31__36:
  .loc 2 1055 16
  # $26.1: bool = call(is_389, ir_value_type.1, IR_Null_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:rax 
  # jump($26.1, .LABEL__generate_store_value_31__37, .LABEL__generate_store_value_31__39)
  test al, al
  mov [rbp-52], al
  jz .LABEL__generate_store_value_31__39
.LABEL__generate_store_value_31__37:
  .loc 2 1056 9
  # $175.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $175.1:rbx 
  .loc 2 1056 9
  # $176.1: @FILE = call(write_383, $175.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $175.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $176.1:rax 
  .loc 2 1056 9
  # $177.1: @FILE = call(write_55, $176.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $176.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $177.1:rax 
  .loc 2 1056 9
  # $178.1: @FILE = call(write_383, $177.1, ", 0")
  mov rdi, rax
  lea rsi, .LABEL__string_89[rip] # ", 0"
  call write_383
  # [discarded value]: $177.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $178.1:rax 
  .loc 2 1056 9
  # $179.1: @FILE = call(end_line_386, $178.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $179.1
  # [discarded value]: $178.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
.LABEL__generate_store_value_31__39:
  .loc 2 1057 16
  # $27.1: bool = call(is_389, ir_value_type.1, IR_Boolean_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Boolean_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:rax 
  # jump($27.1, .LABEL__generate_store_value_31__40, .LABEL__generate_store_value_31__42)
  test al, al
  mov [rbp-53], al
  jz .LABEL__generate_store_value_31__42
.LABEL__generate_store_value_31__40:
  .loc 2 1058 9
  # $169.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $169.1:rbx 
  .loc 2 1058 9
  # $170.1: @FILE = call(write_383, $169.1, "  mov BYTE PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_88[rip] # "  mov BYTE PTR "
  call write_383
  # [discarded value]: $169.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $170.1:rax 
  .loc 2 1058 9
  # $171.1: @FILE = call(write_55, $170.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $170.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $171.1:rax 
  .loc 2 1058 9
  # $172.1: @FILE = call(write_383, $171.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $171.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $172.1:rax 
  .loc 2 1058 9
  # $173.1: @FILE = call(write_operand_34, $172.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $172.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $173.1:rax 
  .loc 2 1058 9
  # $174.1: @FILE = call(end_line_386, $173.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $174.1
  # [discarded value]: $173.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] 
.LABEL__generate_store_value_31__42:
  .loc 2 1059 16
  # $28.1: bool = call(is_389, ir_value_type.1, IR_Struct_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:rax 
  # jump($28.1, .LABEL__generate_store_value_31__43, .LABEL__generate_store_value_31__45)
  test al, al
  mov [rbp-54], al
  jz .LABEL__generate_store_value_31__45
.LABEL__generate_store_value_31__43:
  .loc 2 1060 27
  # struct_type.1: @IR_Struct_Type = ir_value_type.1
  mov rax, [rbp-24]
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] 
  .loc 2 1064 13
  # $48.1: bool = call(is_389, address.1, MC_Register_Based_Address)
  mov rdi, [rbp-32]
  mov rsi, MC_Register_Based_Address[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:rax 
  # jump($48.1, .LABEL__generate_store_value_31__52, .LABEL__generate_store_value_31__54)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_store_value_31__54
.LABEL__generate_store_value_31__52:
  .loc 2 1065 27
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] address.1:rax 
  .loc 2 1066 13
  # destination_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] address.1:rax destination_register.3:rbx 
  .loc 2 1067 76
  # $59.1: @MC_Register = load_struct_member(address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] address.1:rax destination_register.3:rbx $59.1:r15 
  .loc 2 1067 35
  # destination_address.3: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $59.1, offset = 0)
  mov [rbp-63], rax
  mov [rbp-71], rbx
  mov [rbp-79], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $59.1
  mov rbx, [rbp-79]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] address.1:[rbp-63] destination_register.3:[rbp-71] destination_address.3:rax 
  .loc 2 1068 48
  # destination_address_extra_offset.3: isize = load_struct_member(address.1, offset)
  mov rbx, [rbp-63]
  mov r15, [rbx+16]
  # [discarded value]: address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:rax destination_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__53)
  mov [rbp-79], rax
  mov [rbp-87], r15
.LABEL__generate_store_value_31__53:
  # destination_address.9: @MC_Register_Based_Address = phi(destination_address.2, destination_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] 
  # destination_address_extra_offset.9: isize = phi(destination_address_extra_offset.2, destination_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] 
  # destination_register.6: @MC_Register = phi(destination_register.2, destination_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] 
  .loc 2 1076 13
  # $62.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:rax 
  # jump($62.1, .LABEL__generate_store_value_31__55, .LABEL__generate_store_value_31__57)
  test al, al
  mov [rbp-88], al
  jz .LABEL__generate_store_value_31__57
.LABEL__generate_store_value_31__55:
  .loc 2 1077 28
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] ir_value.1:rax 
  .loc 2 1078 28
  # mc_value.1: @MC_Value = call(get_value_42, self.1, ir_value.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_value_42
  # [discarded value]: ir_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:rax 
  .loc 2 1079 17
  # $73.1: bool = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:rax $73.1:rbx 
  # jump($73.1, .LABEL__generate_store_value_31__61, .LABEL__generate_store_value_31__62)
  test bl, bl
  mov [rbp-96], rax
  mov [rbp-97], bl
  jz .LABEL__generate_store_value_31__62
.LABEL__generate_store_value_31__61:
  .loc 2 1080 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] 
.LABEL__generate_store_value_31__62:
  .loc 2 1085 36
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-96]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:rax:[rbp-96] $73.1:[rbp-97] mc_value_address.1:rbx 
  .loc 2 1086 17
  # $75.1: bool = call(is_389, mc_value_address.1, MC_Register_Based_Address)
  mov rdi, rbx
  mov rsi, MC_Register_Based_Address[rip]
  mov [rbp-105], rbx
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:rax 
  # jump($75.1, .LABEL__generate_store_value_31__63, .LABEL__generate_store_value_31__65)
  test al, al
  mov [rbp-106], al
  jz .LABEL__generate_store_value_31__65
.LABEL__generate_store_value_31__63:
  .loc 2 1087 40
  # mc_value_address.1: @MC_Register_Based_Address = mc_value_address.1
  mov rax, [rbp-105]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] mc_value_address.1:rax 
  .loc 2 1088 17
  # source_register.3: @MC_Register = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] mc_value_address.1:rax source_register.3:rbx 
  .loc 2 1089 75
  # $86.1: @MC_Register = load_struct_member(mc_value_address.1, register)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] mc_value_address.1:rax source_register.3:rbx $86.1:r15 
  .loc 2 1089 34
  # source_address.3: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = $86.1, offset = 0)
  mov [rbp-114], rax
  mov [rbp-122], rbx
  mov [rbp-130], r15
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = $86.1
  mov rbx, [rbp-130]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $86.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] mc_value_address.1:[rbp-114] source_register.3:[rbp-122] source_address.3:rax 
  .loc 2 1090 47
  # source_address_extra_offset.3: isize = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rbp-114]
  mov r15, [rbx+16]
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:rax source_address_extra_offset.3:r15 
  # jump(.LABEL__generate_store_value_31__64)
  mov [rbp-130], rax
  mov [rbp-138], r15
.LABEL__generate_store_value_31__64:
  # source_register.9: @MC_Register = phi(source_register.2, source_register.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] 
  # source_address.9: @MC_Register_Based_Address = phi(source_address.2, source_address.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] 
  # source_address_extra_offset.9: isize = phi(source_address_extra_offset.2, source_address_extra_offset.3)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] 
  .loc 2 1098 38
  # ir_value_type_size.1: isize = call(get_type_size_56, self.1, ir_value_type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call get_type_size_56
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:rax 
  .loc 2 1099 33
  # data_register.1: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  mov [rbp-146], rax
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rax 
  .loc 2 1100 13
  # store_struct_member(data_register.1, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rax 
  .loc 2 1101 17
  # copied_bytes.1: isize = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rax copied_bytes.1:rbx 
  # jump(.LABEL__generate_store_value_31__66)
  mov [rbp-154], rax
  mov [rbp-162], rbx
.LABEL__generate_store_value_31__66:
  # copied_bytes.2: isize = phi(copied_bytes.1, copied_bytes.4)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] 
  .loc 2 1102 20
  # $91.1: isize = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-146]
  sub rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $91.1:rax 
  .loc 2 1102 20
  # $92.1: bool = $91.1 >= 8
  cmp rax, 8
  setge bl
  # [discarded value]: $91.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:rbx 
  # jump($92.1, .LABEL__generate_store_value_31__67, .LABEL__generate_store_value_31__68)
  test bl, bl
  mov [rbp-163], bl
  jz .LABEL__generate_store_value_31__68
.LABEL__generate_store_value_31__67:
  .loc 2 1103 41
  # $93.1: isize = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-138]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $93.1:rax 
  .loc 2 1103 17
  # store_struct_member(source_address.9, offset, $93.1)
  mov rbx, [rbp-130]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $93.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
  .loc 2 1104 17
  # $94.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $94.1:r15 
  .loc 2 1104 17
  # $95.1: @FILE = call(write_383, $94.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $94.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $95.1:rax 
  .loc 2 1104 56
  # $96.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-154]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $95.1:rax $96.1:r15 
  .loc 2 1104 17
  # $97.1: @FILE = call(write_383, $95.1, $96.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $96.1
  # [discarded value]: $95.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $97.1:rax 
  .loc 2 1104 17
  # $98.1: @FILE = call(write_383, $97.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $97.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $98.1:rax 
  .loc 2 1104 17
  # $99.1: @FILE = call(write_55, $98.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-130]
  call write_55
  # [discarded value]: $98.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $99.1:rax 
  .loc 2 1104 17
  # $100.1: @FILE = call(end_line_386, $99.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $100.1
  # [discarded value]: $99.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
  .loc 2 1105 46
  # $101.1: isize = destination_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-87]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $101.1:rax 
  .loc 2 1105 17
  # store_struct_member(destination_address.9, offset, $101.1)
  mov rbx, [rbp-79]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $101.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
  .loc 2 1106 17
  # $102.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $102.1:r15 
  .loc 2 1106 17
  # $103.1: @FILE = call(write_383, $102.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $102.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $103.1:rax 
  .loc 2 1106 17
  # $104.1: @FILE = call(write_55, $103.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-79]
  call write_55
  # [discarded value]: $103.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $104.1:rax 
  .loc 2 1106 17
  # $105.1: @FILE = call(write_383, $104.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $105.1:rax 
  .loc 2 1106 95
  # $106.1: @String = load_struct_member(data_register.1, name_q)
  mov rbx, [rbp-154]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $105.1:rax $106.1:r15 
  .loc 2 1106 17
  # $107.1: @FILE = call(write_383, $105.1, $106.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $107.1:rax 
  .loc 2 1106 17
  # $108.1: @FILE = call(end_line_386, $107.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $108.1
  # [discarded value]: $107.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
  .loc 2 1107 32
  # $109.1: isize = copied_bytes.2 + 8
  mov rax, [rbp-162]
  add rax, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $109.1:rax 
  .loc 2 1107 17
  # copied_bytes.4: isize = $109.1
  mov [rbp-171], rax
  # [discarded value]: $109.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] copied_bytes.4:rax:[rbp-162] 
  # jump(.LABEL__generate_store_value_31__66)
  mov [rbp-162], rax
  jmp .LABEL__generate_store_value_31__66
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] copied_bytes.4:[rbp-162] 
  # [discarded value]: copied_bytes.4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
.LABEL__generate_store_value_31__68:
  .loc 2 1109 17
  # $110.1: isize = ir_value_type_size.1 - copied_bytes.2
  mov rax, [rbp-146]
  sub rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $110.1:rax 
  .loc 2 1109 17
  # $111.1: bool = $110.1 >= 4
  cmp rax, 4
  setge bl
  # [discarded value]: $110.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:rbx 
  # jump($111.1, .LABEL__generate_store_value_31__69, .LABEL__generate_store_value_31__70)
  test bl, bl
  mov [rbp-164], bl
  jz .LABEL__generate_store_value_31__70
.LABEL__generate_store_value_31__69:
  .loc 2 1110 41
  # $112.1: isize = source_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-138]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $112.1:rax 
  .loc 2 1110 17
  # store_struct_member(source_address.9, offset, $112.1)
  mov rbx, [rbp-130]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] 
  .loc 2 1111 17
  # $113.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $113.1:r15 
  .loc 2 1111 17
  # $114.1: @FILE = call(write_383, $113.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $113.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $114.1:rax 
  .loc 2 1111 56
  # $115.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-154]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $114.1:rax $115.1:r15 
  .loc 2 1111 17
  # $116.1: @FILE = call(write_383, $114.1, $115.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $115.1
  # [discarded value]: $114.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $116.1:rax 
  .loc 2 1111 17
  # $117.1: @FILE = call(write_383, $116.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $117.1:rax 
  .loc 2 1111 17
  # $118.1: @FILE = call(write_55, $117.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-130]
  call write_55
  # [discarded value]: $117.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $118.1:rax 
  .loc 2 1111 17
  # $119.1: @FILE = call(end_line_386, $118.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] 
  .loc 2 1112 46
  # $120.1: isize = destination_address_extra_offset.9 + copied_bytes.2
  mov rax, [rbp-87]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $120.1:rax 
  .loc 2 1112 17
  # store_struct_member(destination_address.9, offset, $120.1)
  mov rbx, [rbp-79]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $120.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] 
  .loc 2 1113 17
  # $121.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $121.1:r15 
  .loc 2 1113 17
  # $122.1: @FILE = call(write_383, $121.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $121.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $122.1:rax 
  .loc 2 1113 17
  # $123.1: @FILE = call(write_55, $122.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-79]
  call write_55
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $123.1:rax 
  .loc 2 1113 17
  # $124.1: @FILE = call(write_383, $123.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $124.1:rax 
  .loc 2 1113 95
  # $125.1: @String = load_struct_member(data_register.1, name_d)
  mov rbx, [rbp-154]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $124.1:rax $125.1:r15 
  .loc 2 1113 17
  # $126.1: @FILE = call(write_383, $124.1, $125.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $125.1
  # [discarded value]: $124.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $126.1:rax 
  .loc 2 1113 17
  # $127.1: @FILE = call(end_line_386, $126.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $127.1
  # [discarded value]: $126.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] 
  .loc 2 1114 32
  # $128.1: isize = copied_bytes.2 + 4
  mov rax, [rbp-162]
  add rax, 4
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] $128.1:rax 
  .loc 2 1114 17
  # copied_bytes.7: isize = $128.1
  mov [rbp-172], rax
  # [discarded value]: $128.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:rax:[rbp-162] 
  # jump(.LABEL__generate_store_value_31__70)
  mov [rbp-162], rax
.LABEL__generate_store_value_31__70:
  # copied_bytes.8: isize = phi(copied_bytes.7, copied_bytes.2)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] 
  .loc 2 1116 17
  # $129.1: isize = ir_value_type_size.1 - copied_bytes.8
  mov rax, [rbp-146]
  sub rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $129.1:rax 
  .loc 2 1116 17
  # $130.1: bool = $129.1 >= 2
  cmp rax, 2
  setge bl
  # [discarded value]: $129.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:rbx 
  # jump($130.1, .LABEL__generate_store_value_31__71, .LABEL__generate_store_value_31__72)
  test bl, bl
  mov [rbp-165], bl
  jz .LABEL__generate_store_value_31__72
.LABEL__generate_store_value_31__71:
  .loc 2 1117 41
  # $131.1: isize = source_address_extra_offset.9 + copied_bytes.8
  mov rax, [rbp-138]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $131.1:rax 
  .loc 2 1117 17
  # store_struct_member(source_address.9, offset, $131.1)
  mov rbx, [rbp-130]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $131.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] 
  .loc 2 1118 17
  # $132.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $132.1:r15 
  .loc 2 1118 17
  # $133.1: @FILE = call(write_383, $132.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $132.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $133.1:rax 
  .loc 2 1118 56
  # $134.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-154]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $133.1:rax $134.1:r15 
  .loc 2 1118 17
  # $135.1: @FILE = call(write_383, $133.1, $134.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $134.1
  # [discarded value]: $133.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $135.1:rax 
  .loc 2 1118 17
  # $136.1: @FILE = call(write_383, $135.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $135.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $136.1:rax 
  .loc 2 1118 17
  # $137.1: @FILE = call(write_55, $136.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-130]
  call write_55
  # [discarded value]: $136.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $137.1:rax 
  .loc 2 1118 17
  # $138.1: @FILE = call(end_line_386, $137.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $138.1
  # [discarded value]: $137.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] 
  .loc 2 1119 46
  # $139.1: isize = destination_address_extra_offset.9 + copied_bytes.8
  mov rax, [rbp-87]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $139.1:rax 
  .loc 2 1119 17
  # store_struct_member(destination_address.9, offset, $139.1)
  mov rbx, [rbp-79]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $139.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] 
  .loc 2 1120 17
  # $140.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $140.1:r15 
  .loc 2 1120 17
  # $141.1: @FILE = call(write_383, $140.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $140.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $141.1:rax 
  .loc 2 1120 17
  # $142.1: @FILE = call(write_55, $141.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-79]
  call write_55
  # [discarded value]: $141.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $142.1:rax 
  .loc 2 1120 17
  # $143.1: @FILE = call(write_383, $142.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $142.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $143.1:rax 
  .loc 2 1120 95
  # $144.1: @String = load_struct_member(data_register.1, name_w)
  mov rbx, [rbp-154]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $143.1:rax $144.1:r15 
  .loc 2 1120 17
  # $145.1: @FILE = call(write_383, $143.1, $144.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $144.1
  # [discarded value]: $143.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $145.1:rax 
  .loc 2 1120 17
  # $146.1: @FILE = call(end_line_386, $145.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $146.1
  # [discarded value]: $145.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] 
  .loc 2 1121 32
  # $147.1: isize = copied_bytes.8 + 2
  mov rax, [rbp-162]
  add rax, 2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] $147.1:rax 
  .loc 2 1121 17
  # copied_bytes.10: isize = $147.1
  mov [rbp-173], rax
  # [discarded value]: $147.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:rax:[rbp-162] 
  # jump(.LABEL__generate_store_value_31__72)
  mov [rbp-162], rax
.LABEL__generate_store_value_31__72:
  # copied_bytes.11: isize = phi(copied_bytes.8, copied_bytes.10)
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] 
  .loc 2 1123 17
  # $148.1: isize = ir_value_type_size.1 - copied_bytes.11
  mov rax, [rbp-146]
  sub rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $148.1:rax 
  .loc 2 1123 17
  # $149.1: bool = $148.1 == 1
  cmp rax, 1
  sete bl
  # [discarded value]: $148.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:rbx 
  # jump($149.1, .LABEL__generate_store_value_31__73, .LABEL__generate_store_value_31__74)
  test bl, bl
  mov [rbp-166], bl
  jz .LABEL__generate_store_value_31__74
.LABEL__generate_store_value_31__73:
  .loc 2 1124 41
  # $150.1: isize = source_address_extra_offset.9 + copied_bytes.11
  mov rax, [rbp-138]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $150.1:rax 
  .loc 2 1124 17
  # store_struct_member(source_address.9, offset, $150.1)
  mov rbx, [rbp-130]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $150.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  .loc 2 1125 17
  # $151.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:rbx:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $151.1:r15 
  .loc 2 1125 17
  # $152.1: @FILE = call(write_383, $151.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $151.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $152.1:rax 
  .loc 2 1125 56
  # $153.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-154]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $152.1:rax $153.1:r15 
  .loc 2 1125 17
  # $154.1: @FILE = call(write_383, $152.1, $153.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $153.1
  # [discarded value]: $152.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $154.1:rax 
  .loc 2 1125 17
  # $155.1: @FILE = call(write_383, $154.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $154.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $155.1:rax 
  .loc 2 1125 17
  # $156.1: @FILE = call(write_55, $155.1, source_address.9)
  mov rdi, rax
  mov rsi, [rbp-130]
  call write_55
  # [discarded value]: $155.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $156.1:rax 
  .loc 2 1125 17
  # $157.1: @FILE = call(end_line_386, $156.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $157.1
  # [discarded value]: $156.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  .loc 2 1126 46
  # $158.1: isize = destination_address_extra_offset.9 + copied_bytes.11
  mov rax, [rbp-87]
  add rax, QWORD PTR [rbp-162]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $158.1:rax 
  .loc 2 1126 17
  # store_struct_member(destination_address.9, offset, $158.1)
  mov rbx, [rbp-79]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $158.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  .loc 2 1127 17
  # $159.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rbx:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $159.1:r15 
  .loc 2 1127 17
  # $160.1: @FILE = call(write_383, $159.1, "  mov ")
  mov rdi, r15
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $159.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $160.1:rax 
  .loc 2 1127 17
  # $161.1: @FILE = call(write_55, $160.1, destination_address.9)
  mov rdi, rax
  mov rsi, [rbp-79]
  call write_55
  # [discarded value]: $160.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $161.1:rax 
  .loc 2 1127 17
  # $162.1: @FILE = call(write_383, $161.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $161.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $162.1:rax 
  .loc 2 1127 95
  # $163.1: @String = load_struct_member(data_register.1, name_b)
  mov rbx, [rbp-154]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rbx:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $162.1:rax $163.1:r15 
  .loc 2 1127 17
  # $164.1: @FILE = call(write_383, $162.1, $163.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $163.1
  # [discarded value]: $162.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $164.1:rax 
  .loc 2 1127 17
  # $165.1: @FILE = call(end_line_386, $164.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $165.1
  # [discarded value]: $164.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  .loc 2 1128 32
  # $166.1: isize = copied_bytes.11 + 1
  mov rax, [rbp-162]
  inc rax
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $166.1:rax 
  .loc 2 1128 17
  # copied_bytes.13: isize = $166.1
  mov [rbp-174], rax
  # [discarded value]: copied_bytes.13
  # [discarded value]: $166.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  # jump(.LABEL__generate_store_value_31__74)
.LABEL__generate_store_value_31__74:
  .loc 2 1130 13
  # store_struct_member(data_register.1, is_reserved, false)
  mov rax, [rbp-154]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rax:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  .loc 2 1131 17
  # $167.1: bool = source_register.9 != null
  cmp QWORD PTR [rbp-122], 0
  setne bl
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:rax:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:rbx 
  # jump($167.1, .LABEL__generate_store_value_31__75, .LABEL__generate_store_value_31__56)
  test bl, bl
  mov [rbp-167], bl
  jz .LABEL__generate_store_value_31__56
.LABEL__generate_store_value_31__75:
  .loc 2 1132 17
  # store_struct_member(source_register.9, is_reserved, false)
  mov rax, [rbp-122]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:rax:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # jump(.LABEL__generate_store_value_31__56)
.LABEL__generate_store_value_31__56:
  .loc 2 1140 13
  # $168.1: bool = destination_register.6 != null
  cmp QWORD PTR [rbp-71], 0
  setne al
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] $168.1:rax mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # jump($168.1, .LABEL__generate_store_value_31__77, .LABEL__generate_store_value_31__11)
  test al, al
  mov [rbp-168], al
  jz .LABEL__generate_store_value_31__11
.LABEL__generate_store_value_31__77:
  .loc 2 1141 13
  # store_struct_member(destination_register.6, is_reserved, false)
  mov rax, [rbp-71]
  mov BYTE PTR [rax+40], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:rax:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] $168.1:[rbp-168] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] $168.1:[rbp-168] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # [discarded value]: $168.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] $167.1:[rbp-167] 
  # [discarded value]: $167.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] $149.1:[rbp-166] 
  # [discarded value]: $149.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] copied_bytes.11:[rbp-162] 
  # [discarded value]: copied_bytes.11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] copied_bytes.10:[rbp-162] 
  # [discarded value]: copied_bytes.10
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] $130.1:[rbp-165] 
  # [discarded value]: $130.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] copied_bytes.8:[rbp-162] 
  # [discarded value]: copied_bytes.8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] copied_bytes.7:[rbp-162] 
  # [discarded value]: copied_bytes.7
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] $111.1:[rbp-164] 
  # [discarded value]: $111.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] $92.1:[rbp-163] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] copied_bytes.2:[rbp-162] 
  # [discarded value]: copied_bytes.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] source_register.9:[rbp-122] source_address.9:[rbp-130] source_address_extra_offset.9:[rbp-138] ir_value_type_size.1:[rbp-146] data_register.1:[rbp-154] copied_bytes.1:[rbp-162] 
  # [discarded value]: copied_bytes.1
  # [discarded value]: data_register.1
  # [discarded value]: ir_value_type_size.1
  # [discarded value]: source_address_extra_offset.9
  # [discarded value]: source_address.9
  # [discarded value]: source_register.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.3:[rbp-122] source_address.3:[rbp-130] source_address_extra_offset.3:[rbp-138] 
  # [discarded value]: source_address_extra_offset.3
  # [discarded value]: source_address.3
  # [discarded value]: source_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] 
.LABEL__generate_store_value_31__65:
  .loc 2 1092 35
  # source_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rax:[rbp-122] 
  .loc 2 1093 17
  # store_struct_member(source_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rax:[rbp-122] 
  .loc 2 1094 17
  # $77.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rax:[rbp-122] $77.1:r15 
  .loc 2 1094 17
  # $78.1: @FILE = call(write_383, $77.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-122], rax
  call write_383
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] $78.1:rax 
  .loc 2 1094 56
  # $79.1: @String = load_struct_member(source_register.2, name_q)
  mov rbx, [rbp-122]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rbx:[rbp-122] $78.1:rax $79.1:r15 
  .loc 2 1094 17
  # $80.1: @FILE = call(write_383, $78.1, $79.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] $80.1:rax 
  .loc 2 1094 17
  # $81.1: @FILE = call(write_383, $80.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] $81.1:rax 
  .loc 2 1094 17
  # $82.1: @FILE = call(write_55, $81.1, mc_value_address.1)
  mov rdi, rax
  mov rsi, [rbp-105]
  call write_55
  # [discarded value]: $81.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] $82.1:rax 
  .loc 2 1094 17
  # $83.1: @FILE = call(end_line_386, $82.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] 
  .loc 2 1095 34
  # source_address.2: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = source_register.2, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = source_register.2
  mov rbx, [rbp-122]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rbx:[rbp-122] source_address.2:rax:[rbp-130] 
  .loc 2 1096 17
  # source_address_extra_offset.2: isize = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:rbx:[rbp-122] source_address.2:rax:[rbp-130] source_address_extra_offset.2:r15:[rbp-138] 
  # jump(.LABEL__generate_store_value_31__64)
  mov [rbp-130], rax
  mov [rbp-138], r15
  jmp .LABEL__generate_store_value_31__64
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] source_register.2:[rbp-122] source_address.2:[rbp-130] source_address_extra_offset.2:[rbp-138] 
  # [discarded value]: source_address_extra_offset.2
  # [discarded value]: source_address.2
  # [discarded value]: source_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] $75.1:[rbp-106] 
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] mc_value_address.1:[rbp-105] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] $73.1:[rbp-97] 
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] mc_value.1:[rbp-96] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] 
.LABEL__generate_store_value_31__57:
  .loc 2 1134 20
  # $63.1: bool = call(is_389, ir_value.1, IR_Struct_Literal_Value)
  mov rdi, [rbp-16]
  mov rsi, IR_Struct_Literal_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:rax 
  # jump($63.1, .LABEL__generate_store_value_31__58, .LABEL__generate_store_value_31__60)
  test al, al
  mov [rbp-89], al
  jz .LABEL__generate_store_value_31__60
.LABEL__generate_store_value_31__58:
  .loc 2 1135 13
  # store_struct_member(destination_address.9, offset, destination_address_extra_offset.9)
  mov rax, [rbp-79]
  mov rbx, [rbp-87]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rax:[rbp-79] destination_address_extra_offset.9:rbx:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] 
  .loc 2 1136 54
  # $68.1: @IR_Struct_Literal_Value = ir_value.1
  mov r15, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rax:[rbp-79] destination_address_extra_offset.9:rbx:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $68.1:r15 
  .loc 2 1136 91
  # $70.1: @IR_Struct_Type = load_struct_member(ir_value.1, type)
  mov r14, [rbp-16]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-8] ir_value.1:r14:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:rax:[rbp-79] destination_address_extra_offset.9:rbx:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $68.1:r15 $70.1:r13 
  .loc 2 1136 13
  # call(generate_store_struct_literal_value_32, self.1, $68.1, $70.1, destination_address.9)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov rdx, r13
  mov rcx, rax
  call generate_store_struct_literal_value_32
  # [discarded value]: $70.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] 
  # jump(.LABEL__generate_store_value_31__56)
  jmp .LABEL__generate_store_value_31__56
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] 
.LABEL__generate_store_value_31__60:
  .loc 2 1138 24
  # $64.1: @String = call(clone_391, "Unsupported value: ")
  lea rdi, .LABEL__string_90[rip] # "Unsupported value: "
  call clone_391
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $64.1:rax 
  .loc 2 1138 60
  # $65.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $64.1:rax $65.1:r15 
  .loc 2 1138 60
  # $66.1: @String = load_struct_member_address($65.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:rbx:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $64.1:rax $65.1:r15 $66.1:r14 
  .loc 2 1138 24
  # $67.1: @String = call(append_400, $64.1, $66.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] $67.1:rax 
  .loc 2 1138 13
  # call(abort_35, self.1, $67.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] $63.1:[rbp-89] 
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] $62.1:[rbp-88] 
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] destination_address.9:[rbp-79] destination_address_extra_offset.9:[rbp-87] destination_register.6:[rbp-71] 
  # [discarded value]: destination_register.6
  # [discarded value]: destination_address_extra_offset.9
  # [discarded value]: destination_address.9
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.3:[rbp-71] destination_address.3:[rbp-79] destination_address_extra_offset.3:[rbp-87] 
  # [discarded value]: destination_address_extra_offset.3
  # [discarded value]: destination_address.3
  # [discarded value]: destination_register.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] 
.LABEL__generate_store_value_31__54:
  .loc 2 1070 36
  # destination_register.2: @MC_Register = call(find_unused_register_38, self.1)
  mov rdi, [rbp-8]
  call find_unused_register_38
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rax:[rbp-71] 
  .loc 2 1071 13
  # store_struct_member(destination_register.2, is_reserved, true)
  mov BYTE PTR [rax+40], 1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rax:[rbp-71] 
  .loc 2 1072 13
  # $50.1: @FILE = load_struct_member(self.1, output_file)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rax:[rbp-71] $50.1:r15 
  .loc 2 1072 13
  # $51.1: @FILE = call(write_383, $50.1, "  lea ")
  mov rdi, r15
  lea rsi, .LABEL__string_67[rip] # "  lea "
  mov [rbp-71], rax
  call write_383
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] $51.1:rax 
  .loc 2 1072 52
  # $52.1: @String = load_struct_member(destination_register.2, name_q)
  mov rbx, [rbp-71]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rbx:[rbp-71] $51.1:rax $52.1:r15 
  .loc 2 1072 13
  # $53.1: @FILE = call(write_383, $51.1, $52.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] $53.1:rax 
  .loc 2 1072 13
  # $54.1: @FILE = call(write_383, $53.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] $54.1:rax 
  .loc 2 1072 13
  # $55.1: @FILE = call(write_55, $54.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] $55.1:rax 
  .loc 2 1072 13
  # $56.1: @FILE = call(end_line_386, $55.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] 
  .loc 2 1073 35
  # destination_address.2: @MC_Register_Based_Address = new MC_Register_Based_Address(object_type = MC_Register_Based_Address, register = destination_register.2, offset = 0)
  mov rdi, 24
  call malloc
  #     .object_type = MC_Register_Based_Address
  mov rbx, MC_Register_Based_Address[rip]
  mov [rax], rbx
  #     .register = destination_register.2
  mov rbx, [rbp-71]
  mov QWORD PTR [rax+8], rbx
  #     .offset = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rbx:[rbp-71] destination_address.2:rax:[rbp-79] 
  .loc 2 1074 13
  # destination_address_extra_offset.2: isize = 0
  xor r15, r15
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:rbx:[rbp-71] destination_address.2:rax:[rbp-79] destination_address_extra_offset.2:r15:[rbp-87] 
  # jump(.LABEL__generate_store_value_31__53)
  mov [rbp-79], rax
  mov [rbp-87], r15
  jmp .LABEL__generate_store_value_31__53
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] destination_register.2:[rbp-71] destination_address.2:[rbp-79] destination_address_extra_offset.2:[rbp-87] 
  # [discarded value]: destination_address_extra_offset.2
  # [discarded value]: destination_address.2
  # [discarded value]: destination_register.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $48.1:[rbp-55] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] 
.LABEL__generate_store_value_31__45:
  .loc 2 1143 16
  # $29.1: bool = call(is_389, ir_value_type.1, IR_Function_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:rax 
  # jump($29.1, .LABEL__generate_store_value_31__46, .LABEL__generate_store_value_31__48)
  test al, al
  mov [rbp-55], al
  jz .LABEL__generate_store_value_31__48
.LABEL__generate_store_value_31__46:
  .loc 2 1144 9
  # $41.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $41.1:rbx 
  .loc 2 1144 9
  # $42.1: @FILE = call(write_383, $41.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $42.1:rax 
  .loc 2 1144 9
  # $43.1: @FILE = call(write_55, $42.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $43.1:rax 
  .loc 2 1144 9
  # $44.1: @FILE = call(write_383, $43.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $44.1:rax 
  .loc 2 1144 9
  # $45.1: @FILE = call(write_operand_34, $44.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $45.1:rax 
  .loc 2 1144 9
  # $46.1: @FILE = call(end_line_386, $45.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] 
.LABEL__generate_store_value_31__48:
  .loc 2 1145 16
  # $30.1: bool = call(is_389, ir_value_type.1, IR_Unchecked_Array_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:rax 
  # jump($30.1, .LABEL__generate_store_value_31__49, .LABEL__generate_store_value_31__51)
  test al, al
  mov [rbp-56], al
  jz .LABEL__generate_store_value_31__51
.LABEL__generate_store_value_31__49:
  .loc 2 1146 9
  # $35.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $35.1:rbx 
  .loc 2 1146 9
  # $36.1: @FILE = call(write_383, $35.1, "  mov QWORD PTR ")
  mov rdi, rbx
  lea rsi, .LABEL__string_85[rip] # "  mov QWORD PTR "
  call write_383
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $36.1:rax 
  .loc 2 1146 9
  # $37.1: @FILE = call(write_55, $36.1, address.1)
  mov rdi, rax
  mov rsi, [rbp-32]
  call write_55
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $37.1:rax 
  .loc 2 1146 9
  # $38.1: @FILE = call(write_383, $37.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $38.1:rax 
  .loc 2 1146 9
  # $39.1: @FILE = call(write_operand_34, $38.1, self.1, ir_value.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rdx, [rbp-16]
  call write_operand_34
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $39.1:rax 
  .loc 2 1146 9
  # $40.1: @FILE = call(end_line_386, $39.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] 
  # jump(.LABEL__generate_store_value_31__11)
  jmp .LABEL__generate_store_value_31__11
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] 
.LABEL__generate_store_value_31__51:
  .loc 2 1148 20
  # $31.1: @String = call(clone_391, "Unsupported value type: ")
  lea rdi, .LABEL__string_83[rip] # "Unsupported value type: "
  call clone_391
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $31.1:rax 
  .loc 2 1148 61
  # $32.1: @Object_Type = load_struct_member(ir_value_type.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $31.1:rax $32.1:r15 
  .loc 2 1148 61
  # $33.1: @String = load_struct_member_address($32.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:rbx:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $31.1:rax $32.1:r15 $33.1:r14 
  .loc 2 1148 20
  # $34.1: @String = call(append_400, $31.1, $33.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] $34.1:rax 
  .loc 2 1148 9
  # call(abort_35, self.1, $34.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] $30.1:[rbp-56] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] $29.1:[rbp-55] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] $28.1:[rbp-54] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] $27.1:[rbp-53] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] $26.1:[rbp-52] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] $25.1:[rbp-51] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] $24.1:[rbp-50] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] $23.1:[rbp-49] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] $22.1:[rbp-48] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] $21.1:[rbp-47] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] $20.1:[rbp-46] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] $19.1:[rbp-45] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] $18.1:[rbp-44] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] $14.3:[rbp-43] 
  # [discarded value]: $14.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] $14.2:[rbp-43] 
  # [discarded value]: $14.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] mc_value.1:[rbp-41] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] ir_value.1:[rbp-16] address.1:[rbp-32] ir_value_type.1:[rbp-24] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: ir_value_type.1
  # [discarded value]: address.1
  # [discarded value]: ir_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_value_31__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_value_31__stack_frame_size: .word 176

  .loc 2 1152 8
  .text
generate_store_struct_literal_value_32:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_store_struct_literal_value_32__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_store_struct_literal_value_32__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_value.1: @IR_Struct_Literal_Value = load_variable(ir_value)
  # [live values]: self.1:rdi ir_value.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx 
  # address.1: @MC_Register_Based_Address = load_variable(address)
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx 
  .loc 2 1153 9
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rdx+16]
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx $1.1:rax 
  .loc 2 1153 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi ir_value.1:rsi struct_type.1:rdx address.1:rcx $2.1:rbx 
  # jump($2.1, .LABEL__generate_store_struct_literal_value_32__2, .LABEL__generate_store_struct_literal_value_32__3)
  test bl, bl
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-17], bl
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  jz .LABEL__generate_store_struct_literal_value_32__3
.LABEL__generate_store_struct_literal_value_32__2:
  .loc 2 1154 60
  # $3.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 2 1154 9
  # call(generate_store_struct_literal_value_32, self.1, ir_value.1, $3.1, address.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rbx
  mov rcx, [rbp-8]
  call generate_store_struct_literal_value_32
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # jump(.LABEL__generate_store_struct_literal_value_32__3)
.LABEL__generate_store_struct_literal_value_32__3:
  .loc 2 1156 36
  # $4.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] $4.1:rbx 
  .loc 2 1156 36
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rax:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:r15 
  # jump(.LABEL__generate_store_struct_literal_value_32__4)
  mov [rbp-41], r15
.LABEL__generate_store_struct_literal_value_32__4:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.5)
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] 
  .loc 2 1157 12
  # $6.1: bool = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:rax 
  # jump($6.1, .LABEL__generate_store_struct_literal_value_32__5, .LABEL__generate_store_struct_literal_value_32__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__generate_store_struct_literal_value_32__6
.LABEL__generate_store_struct_literal_value_32__5:
  .loc 2 1158 34
  # struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:rax:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx 
  .loc 2 1159 40
  # struct_type_member_value.1: @IR_Value = call(get_member_value_158, ir_value.1, struct_type_member.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  mov [rbp-50], rbx
  call get_member_value_158
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax 
  .loc 2 1160 13
  # $10.1: bool = struct_type_member_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__generate_store_struct_literal_value_32__7, .LABEL__generate_store_struct_literal_value_32__9)
  test bl, bl
  mov [rbp-58], rax
  mov [rbp-59], bl
  jz .LABEL__generate_store_struct_literal_value_32__9
.LABEL__generate_store_struct_literal_value_32__7:
  .loc 2 1161 13
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $21.1:rbx 
  .loc 2 1161 13
  # $22.1: @FILE = call(write_383, $21.1, "  #     .")
  mov rdi, rbx
  lea rsi, .LABEL__string_91[rip] # "  #     ."
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $22.1:rax 
  .loc 2 1161 55
  # $23.1: @String = load_struct_member(struct_type_member.1, name)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $22.1:rax $23.1:r15 
  .loc 2 1161 13
  # $24.1: @FILE = call(write_383, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $24.1:rax 
  .loc 2 1161 13
  # $25.1: @FILE = call(write_383, $24.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_92[rip] # " = "
  call write_383
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $25.1:rax 
  .loc 2 1161 13
  # $26.1: @FILE = call(write_154, $25.1, struct_type_member_value.1, false)
  mov rdi, rax
  mov rsi, [rbp-58]
  mov dl, 0
  call write_154
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $26.1:rax 
  .loc 2 1161 13
  # $27.1: @FILE = call(end_line_386, $26.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  .loc 2 1162 17
  # $28.1: @IR_Type = load_struct_member(struct_type_member_value.1, type)
  mov rax, [rbp-58]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:rax:[rbp-58] $10.1:[rbp-59] $28.1:rbx 
  .loc 2 1162 17
  # $29.1: bool = call(is_389, $28.1, IR_Undefined_Type)
  mov rdi, rbx
  mov rsi, IR_Undefined_Type[rip]
  call is_389
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $29.1:rax 
  .loc 2 1162 17
  # $30.1: bool = $29.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:rbx 
  # jump($30.1, .LABEL__generate_store_struct_literal_value_32__10, .LABEL__generate_store_struct_literal_value_32__8)
  test bl, bl
  mov [rbp-60], bl
  jz .LABEL__generate_store_struct_literal_value_32__8
.LABEL__generate_store_struct_literal_value_32__10:
  .loc 2 1163 49
  # struct_type_member_offset.1: isize = call(get_offset_33, self.1, struct_type_member.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-50]
  call get_offset_33
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax 
  .loc 2 1164 34
  # $32.1: isize = load_struct_member(address.1, offset)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax $32.1:r15 
  .loc 2 1164 34
  # $33.1: isize = $32.1 + struct_type_member_offset.1
  mov r14, r15
  add r14, rax
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax $33.1:r14 
  .loc 2 1164 17
  # store_struct_member(address.1, offset, $33.1)
  mov QWORD PTR [rbx+16], r14
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rbx:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:rax 
  .loc 2 1165 17
  # call(generate_store_value_31, self.1, struct_type_member_value.1, address.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-58]
  mov rdx, rbx
  mov [rbp-68], rax
  call generate_store_value_31
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:[rbp-68] 
  .loc 2 1166 34
  # $34.1: isize = load_struct_member(address.1, offset)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_member_offset.1:[rbp-68] $34.1:rbx 
  .loc 2 1166 34
  # $35.1: isize = $34.1 - struct_type_member_offset.1
  mov r15, rbx
  sub r15, QWORD PTR [rbp-68]
  # [discarded value]: $34.1
  # [discarded value]: struct_type_member_offset.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] $35.1:r15 
  .loc 2 1166 17
  # store_struct_member(address.1, offset, $35.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:rax:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # jump(.LABEL__generate_store_struct_literal_value_32__8)
.LABEL__generate_store_struct_literal_value_32__8:
  .loc 2 1171 36
  # struct_type_members_item.5: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_members_item.5:rbx:[rbp-41] 
  # jump(.LABEL__generate_store_struct_literal_value_32__4)
  mov [rbp-41], rbx
  jmp .LABEL__generate_store_struct_literal_value_32__4
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] struct_type_members_item.5:[rbp-41] 
  # [discarded value]: struct_type_members_item.5
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $30.1:[rbp-60] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
.LABEL__generate_store_struct_literal_value_32__9:
  .loc 2 1169 26
  # $11.1: @Source_Location = load_struct_member(ir_value.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-33] ir_value.1:rax:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $11.1:rbx 
  .loc 2 1169 13
  # $12.1: @FILE = call(write_363, stderr, $11.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $12.1:rax 
  .loc 2 1169 13
  # $13.1: @FILE = call(write_383, $12.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $13.1:rax 
  .loc 2 1169 63
  # $14.1: @String = load_struct_member(struct_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:rbx:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $13.1:rax $14.1:r15 
  .loc 2 1169 13
  # $15.1: @FILE = call(write_383, $13.1, $14.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $15.1:rax 
  .loc 2 1169 13
  # $16.1: @FILE = call(write_385, $15.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $16.1:rax 
  .loc 2 1169 98
  # $17.1: @String = load_struct_member(struct_type_member.1, name)
  mov rbx, [rbp-50]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:rbx:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $16.1:rax $17.1:r15 
  .loc 2 1169 13
  # $18.1: @FILE = call(write_383, $16.1, $17.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $18.1:rax 
  .loc 2 1169 13
  # $19.1: @FILE = call(write_383, $18.1, " is not initialized")
  mov rdi, rax
  lea rsi, .LABEL__string_94[rip] # " is not initialized"
  call write_383
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] $19.1:rax 
  .loc 2 1169 13
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  # jump(.LABEL__generate_store_struct_literal_value_32__8)
  jmp .LABEL__generate_store_struct_literal_value_32__8
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] $10.1:[rbp-59] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] struct_type_member.1:[rbp-50] struct_type_member_value.1:[rbp-58] 
  # [discarded value]: struct_type_member_value.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] 
.LABEL__generate_store_struct_literal_value_32__6:
  # return()
  jmp .LABEL__generate_store_struct_literal_value_32__end
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] struct_type_members_item.2:[rbp-41] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] struct_type_members_item.1:[rbp-41] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-33] ir_value.1:[rbp-25] struct_type.1:[rbp-16] address.1:[rbp-8] 
  # [discarded value]: address.1
  # [discarded value]: struct_type.1
  # [discarded value]: ir_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_store_struct_literal_value_32__end:
  mov rsp, rbp
  pop rbp
  ret

generate_store_struct_literal_value_32__stack_frame_size: .word 80

  .loc 2 1175 8
  .text
get_offset_33:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_offset_33__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_offset_33__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  .loc 2 1176 9
  # offset.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax 
  .loc 2 1177 23
  # struct_type.1: @IR_Struct_Type = load_struct_member(struct_type_member.1, struct_type)
  mov rbx, [rsi]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx 
  .loc 2 1178 9
  # $2.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov r15, [rbx+16]
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $2.1:r15 
  .loc 2 1178 9
  # $3.1: bool = $2.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $2.1
  # [live values]: self.1:rdi struct_type_member.1:rsi offset.1:rax struct_type.1:rbx $3.1:r14 
  # jump($3.1, .LABEL__get_offset_33__2, .LABEL__get_offset_33__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-33], r14b
  jz .LABEL__get_offset_33__3
.LABEL__get_offset_33__2:
  .loc 2 1179 37
  # $4.1: @IR_Struct_Type = load_struct_member(struct_type.1, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 1179 18
  # offset.2: isize = call(get_type_size_56, self.1, $4.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:rax:[rbp-8] 
  # jump(.LABEL__get_offset_33__3)
  mov [rbp-8], rax
.LABEL__get_offset_33__3:
  # offset.7: isize = phi(offset.1, offset.2)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] 
  .loc 2 1181 43
  # $6.1: @List = load_struct_member(struct_type.1, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] $6.1:rbx 
  .loc 2 1181 43
  # current_struct_type_member_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:rax:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:r15 
  # jump(.LABEL__get_offset_33__4)
  mov [rbp-41], r15
.LABEL__get_offset_33__4:
  # offset.6: isize = phi(offset.7, offset.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] 
  # current_struct_type_member_item.2: @List_Item = phi(current_struct_type_member_item.1, current_struct_type_member_item.5)
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  .loc 2 1182 12
  # $8.1: bool = current_struct_type_member_item.2 != null
  cmp QWORD PTR [rbp-41], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_offset_33__5, .LABEL__get_offset_33__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_offset_33__6
.LABEL__get_offset_33__5:
  .loc 2 1183 42
  # current_struct_type_member.1: @IR_Struct_Type_Member = load_struct_member(current_struct_type_member_item.2, data)
  mov rax, [rbp-41]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx 
  .loc 2 1184 13
  # $11.1: bool = current_struct_type_member.1 == struct_type_member.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:rax:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rbx $11.1:r15 
  # jump($11.1, .LABEL__get_offset_33__7, .LABEL__get_offset_33__8)
  test r15b, r15b
  mov [rbp-50], rbx
  mov [rbp-51], r15b
  jz .LABEL__get_offset_33__8
.LABEL__get_offset_33__7:
  .loc 2 1185 13
  # return(offset.6)
  mov rax, [rbp-8]
  jmp .LABEL__get_offset_33__end
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
.LABEL__get_offset_33__8:
  .loc 2 1187 46
  # $12.1: @IR_Type = load_struct_member(current_struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:rax:[rbp-50] $11.1:[rbp-51] $12.1:rbx 
  .loc 2 1187 27
  # $13.1: isize = call(get_type_size_56, self.1, $12.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] $13.1:rax 
  .loc 2 1187 18
  # $14.1: isize = offset.6 + $13.1
  mov rbx, [rbp-8]
  add rbx, rax
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] $14.1:rbx 
  .loc 2 1187 9
  # offset.5: isize = $14.1
  mov [rbp-59], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] 
  .loc 2 1188 43
  # current_struct_type_member_item.5: @List_Item = load_struct_member(current_struct_type_member_item.2, next_item)
  mov rax, [rbp-41]
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:rbx:[rbp-8] current_struct_type_member_item.5:r15:[rbp-41] 
  # jump(.LABEL__get_offset_33__4)
  mov [rbp-8], rbx
  mov [rbp-41], r15
  jmp .LABEL__get_offset_33__4
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] offset.5:[rbp-8] current_struct_type_member_item.5:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.5
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] $11.1:[rbp-51] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] current_struct_type_member.1:[rbp-50] 
  # [discarded value]: current_struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
.LABEL__get_offset_33__6:
  .loc 2 1190 5
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] offset.6:[rbp-8] current_struct_type_member_item.2:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.2
  # [discarded value]: offset.6
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] offset.7:[rbp-8] current_struct_type_member_item.1:[rbp-41] 
  # [discarded value]: current_struct_type_member_item.1
  # [discarded value]: offset.7
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] offset.2:[rbp-8] 
  # [discarded value]: offset.2
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] struct_type_member.1:[rbp-24] offset.1:[rbp-8] struct_type.1:[rbp-16] 
  # [discarded value]: struct_type.1
  # [discarded value]: offset.1
  # [discarded value]: struct_type_member.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_offset_33__end:
  mov rsp, rbp
  pop rbp
  ret

get_offset_33__stack_frame_size: .word 64

  .loc 2 1193 8
  .text
write_operand_34:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_operand_34__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_operand_34__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # generator.1: @MC_Generator = load_variable(generator)
  # [live values]: file.1:rdi generator.1:rsi 
  # ir_value.1: @IR_Value = load_variable(ir_value)
  # [live values]: file.1:rdi generator.1:rsi ir_value.1:rdx 
  .loc 2 1194 9
  # $1.1: bool = call(is_389, ir_value.1, IR_Constant_Value)
  mov [rbp-8], rdi
  mov rdi, rdx
  mov [rbp-16], rsi
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-24], rdx
  call is_389
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_operand_34__2, .LABEL__write_operand_34__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_operand_34__3
.LABEL__write_operand_34__2:
  .loc 2 1195 24
  # ir_value.1: @IR_Constant_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax 
  .loc 2 1196 13
  # $3.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax $3.1:rbx 
  .loc 2 1196 13
  # $4.1: bool = call(is_389, $3.1, Boolean_Token)
  mov rdi, rbx
  mov rsi, Boolean_Token[rip]
  mov [rbp-33], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:rax 
  # jump($4.1, .LABEL__write_operand_34__4, .LABEL__write_operand_34__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_operand_34__5
.LABEL__write_operand_34__4:
  .loc 2 1197 18
  # $6.1: @Boolean_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $6.1:rbx 
  .loc 2 1197 17
  # $7.1: bool = load_struct_member($6.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $7.1:r15 
  # jump($7.1, .LABEL__write_operand_34__6, .LABEL__write_operand_34__7)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__write_operand_34__7
.LABEL__write_operand_34__6:
  .loc 2 1198 24
  # $8.1: @FILE = call(write_382, file.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call write_382
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $8.1:rax 
  .loc 2 1198 17
  # return($8.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
.LABEL__write_operand_34__7:
  .loc 2 1200 20
  # $9.1: @FILE = call(write_382, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_382
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] $9.1:rax 
  .loc 2 1200 13
  # return($9.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__write_operand_34__5:
  .loc 2 1202 13
  # $10.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $10.1:rbx 
  .loc 2 1202 13
  # $11.1: bool = call(is_389, $10.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_389
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__write_operand_34__10, .LABEL__write_operand_34__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_operand_34__11
.LABEL__write_operand_34__10:
  .loc 2 1203 32
  # $13.1: @Character_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $13.1:rbx 
  .loc 2 1203 31
  # $14.1: i8 = load_struct_member($13.1, value)
  mov r15b, [rbx+32]
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $14.1:r15 
  .loc 2 1203 31
  # $15.1: isize = cast($14.1)
  mov bl, r15b
  movsx rbx, bl
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $15.1:rbx 
  .loc 2 1203 20
  # $16.1: @FILE = call(write_382, file.1, $15.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_382
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $16.1:rax 
  .loc 2 1203 13
  # return($16.1)
  mov [rbp-43], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
.LABEL__write_operand_34__11:
  .loc 2 1205 13
  # $17.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  .loc 2 1205 13
  # $18.1: bool = call(is_389, $17.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_389
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  # jump($18.1, .LABEL__write_operand_34__13, .LABEL__write_operand_34__14)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_operand_34__14
.LABEL__write_operand_34__13:
  .loc 2 1206 32
  # $20.1: @Integer_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $20.1:rbx 
  .loc 2 1206 31
  # $21.1: isize = load_struct_member($20.1, value)
  mov r15, [rbx+32]
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $21.1:r15 
  .loc 2 1206 20
  # $22.1: @FILE = call(write_382, file.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_382
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $22.1:rax 
  .loc 2 1206 13
  # return($22.1)
  mov [rbp-44], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
.LABEL__write_operand_34__14:
  .loc 2 1208 13
  # $23.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rax:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $23.1:rbx 
  .loc 2 1208 13
  # $24.1: bool = call(is_389, $23.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_389
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:rax 
  # jump($24.1, .LABEL__write_operand_34__16, .LABEL__write_operand_34__17)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_operand_34__17
.LABEL__write_operand_34__16:
  .loc 2 1209 20
  # $25.1: @FILE = call(write_382, file.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call write_382
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $25.1:rax 
  .loc 2 1209 13
  # return($25.1)
  mov [rbp-45], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
.LABEL__write_operand_34__17:
  .loc 2 1211 25
  # $26.1: @String = call(clone_391, "Unsupported constant literal: ")
  lea rdi, .LABEL__string_95[rip] # "Unsupported constant literal: "
  call clone_391
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax 
  .loc 2 1211 72
  # $27.1: @Literal_Token = load_struct_member(ir_value.1, literal)
  mov rbx, [rbp-33]
  mov r15, [rbx+48]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $27.1:r15 
  .loc 2 1211 72
  # $28.1: @Object_Type = load_struct_member($27.1, object_type)
  mov r14, [r15]
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $28.1:r14 
  .loc 2 1211 72
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r15, r14
  add r15, 8
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:rbx:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $26.1:rax $28.1:r14 $29.1:r15 
  .loc 2 1211 25
  # $30.1: @String = call(append_400, $26.1, $29.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] $30.1:rax 
  .loc 2 1211 9
  # call(abort_35, generator.1, $30.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] $24.1:[rbp-37] 
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] $18.1:[rbp-36] 
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] ir_value.1:[rbp-33] 
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_operand_34__3:
  .loc 2 1213 9
  # $31.1: bool = call(is_389, ir_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:rax 
  # jump($31.1, .LABEL__write_operand_34__19, .LABEL__write_operand_34__20)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_operand_34__20
.LABEL__write_operand_34__19:
  .loc 2 1214 24
  # ir_value.1: @IR_Variable_Value = ir_value.1
  mov rax, [rbp-24]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax 
  .loc 2 1215 24
  # mc_value.1: @MC_Value = call(get_value_42, generator.1, ir_value.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-34], rax
  call get_value_42
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax 
  .loc 2 1216 13
  # $34.1: bool = mc_value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax $34.1:rbx 
  # jump($34.1, .LABEL__write_operand_34__21, .LABEL__write_operand_34__22)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__write_operand_34__22
.LABEL__write_operand_34__21:
  .loc 2 1217 13
  # call(abort_35, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
.LABEL__write_operand_34__22:
  .loc 2 1219 55
  # $35.1: @IR_Type = load_struct_member(ir_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:rax:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] $35.1:rbx 
  .loc 2 1219 31
  # value_type_size.1: isize = call(get_type_size_56, generator.1, $35.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax 
  .loc 2 1220 13
  # $37.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $37.1:r15 
  .loc 2 1220 13
  # $38.1: bool = $37.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:rax $38.1:r14 
  # jump($38.1, .LABEL__write_operand_34__23, .LABEL__write_operand_34__24)
  test r14b, r14b
  mov [rbp-51], rax
  mov [rbp-52], r14b
  jz .LABEL__write_operand_34__24
.LABEL__write_operand_34__23:
  .loc 2 1221 17
  # $39.1: bool = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:rax 
  # jump($39.1, .LABEL__write_operand_34__25, .LABEL__write_operand_34__26)
  test al, al
  mov [rbp-53], al
  jz .LABEL__write_operand_34__26
.LABEL__write_operand_34__25:
  .loc 2 1222 35
  # $40.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $40.1:rbx 
  .loc 2 1222 35
  # $41.1: @String = load_struct_member($40.1, name_q)
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $41.1:r15 
  .loc 2 1222 24
  # $42.1: @FILE = call(write_383, file.1, $41.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_383
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $42.1:rax 
  .loc 2 1222 17
  # return($42.1)
  mov [rbp-61], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $42.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
.LABEL__write_operand_34__26:
  .loc 2 1224 17
  # $43.1: bool = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:rax 
  # jump($43.1, .LABEL__write_operand_34__28, .LABEL__write_operand_34__29)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_34__29
.LABEL__write_operand_34__28:
  .loc 2 1225 35
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $44.1:rbx 
  .loc 2 1225 35
  # $45.1: @String = load_struct_member($44.1, name_d)
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $45.1:r15 
  .loc 2 1225 24
  # $46.1: @FILE = call(write_383, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_383
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $46.1:rax 
  .loc 2 1225 17
  # return($46.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
.LABEL__write_operand_34__29:
  .loc 2 1227 17
  # $47.1: bool = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:rax 
  # jump($47.1, .LABEL__write_operand_34__31, .LABEL__write_operand_34__32)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_34__32
.LABEL__write_operand_34__31:
  .loc 2 1228 35
  # $48.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $48.1:rbx 
  .loc 2 1228 35
  # $49.1: @String = load_struct_member($48.1, name_w)
  mov r15, [rbx+24]
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $49.1:r15 
  .loc 2 1228 24
  # $50.1: @FILE = call(write_383, file.1, $49.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_383
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $50.1:rax 
  .loc 2 1228 17
  # return($50.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
.LABEL__write_operand_34__32:
  .loc 2 1230 17
  # $51.1: bool = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:rax 
  # jump($51.1, .LABEL__write_operand_34__34, .LABEL__write_operand_34__35)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_34__35
.LABEL__write_operand_34__34:
  .loc 2 1231 35
  # $52.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $52.1:rbx 
  .loc 2 1231 35
  # $53.1: @String = load_struct_member($52.1, name_b)
  mov r15, [rbx+32]
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $53.1:r15 
  .loc 2 1231 24
  # $54.1: @FILE = call(write_383, file.1, $53.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  call write_383
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $54.1:rax 
  .loc 2 1231 17
  # return($54.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
.LABEL__write_operand_34__35:
  .loc 2 1233 29
  # $55.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $55.1:rax 
  .loc 2 1233 29
  # $56.1: @String = call(append_399, $55.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_399
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] $56.1:rax 
  .loc 2 1233 13
  # call(abort_35, generator.1, $56.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] $51.1:[rbp-56] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] $47.1:[rbp-55] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] $43.1:[rbp-54] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $39.1:[rbp-53] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
.LABEL__write_operand_34__24:
  .loc 2 1235 13
  # $57.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rax, [rbp-42]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $57.1:rbx 
  .loc 2 1235 13
  # $58.1: bool = $57.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rax:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:r15 
  # jump($58.1, .LABEL__write_operand_34__37, .LABEL__write_operand_34__38)
  test r15b, r15b
  mov [rbp-53], r15b
  jz .LABEL__write_operand_34__38
.LABEL__write_operand_34__37:
  .loc 2 1236 17
  # $59.1: bool = value_type_size.1 == 8
  cmp QWORD PTR [rbp-51], 8
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:rax 
  # jump($59.1, .LABEL__write_operand_34__39, .LABEL__write_operand_34__40)
  test al, al
  mov [rbp-54], al
  jz .LABEL__write_operand_34__40
.LABEL__write_operand_34__39:
  .loc 2 1237 24
  # $60.1: @FILE = call(write_383, file.1, "QWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_72[rip] # "QWORD PTR "
  call write_383
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax 
  .loc 2 1237 55
  # $61.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $60.1:rax $61.1:r15 
  .loc 2 1237 24
  # $62.1: @FILE = call(write_55, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $62.1:rax 
  .loc 2 1237 17
  # return($62.1)
  mov [rbp-62], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
.LABEL__write_operand_34__40:
  .loc 2 1239 17
  # $63.1: bool = value_type_size.1 == 4
  cmp QWORD PTR [rbp-51], 4
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:rax 
  # jump($63.1, .LABEL__write_operand_34__42, .LABEL__write_operand_34__43)
  test al, al
  mov [rbp-55], al
  jz .LABEL__write_operand_34__43
.LABEL__write_operand_34__42:
  .loc 2 1240 24
  # $64.1: @FILE = call(write_383, file.1, "DWORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_73[rip] # "DWORD PTR "
  call write_383
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax 
  .loc 2 1240 55
  # $65.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $64.1:rax $65.1:r15 
  .loc 2 1240 24
  # $66.1: @FILE = call(write_55, $64.1, $65.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $66.1:rax 
  .loc 2 1240 17
  # return($66.1)
  mov [rbp-63], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
.LABEL__write_operand_34__43:
  .loc 2 1242 17
  # $67.1: bool = value_type_size.1 == 2
  cmp QWORD PTR [rbp-51], 2
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:rax 
  # jump($67.1, .LABEL__write_operand_34__45, .LABEL__write_operand_34__46)
  test al, al
  mov [rbp-56], al
  jz .LABEL__write_operand_34__46
.LABEL__write_operand_34__45:
  .loc 2 1243 24
  # $68.1: @FILE = call(write_383, file.1, "WORD PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_74[rip] # "WORD PTR "
  call write_383
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax 
  .loc 2 1243 54
  # $69.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $68.1:rax $69.1:r15 
  .loc 2 1243 24
  # $70.1: @FILE = call(write_55, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $70.1:rax 
  .loc 2 1243 17
  # return($70.1)
  mov [rbp-64], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
.LABEL__write_operand_34__46:
  .loc 2 1245 17
  # $71.1: bool = value_type_size.1 == 1
  cmp QWORD PTR [rbp-51], 1
  sete al
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:rax 
  # jump($71.1, .LABEL__write_operand_34__48, .LABEL__write_operand_34__49)
  test al, al
  mov [rbp-57], al
  jz .LABEL__write_operand_34__49
.LABEL__write_operand_34__48:
  .loc 2 1246 24
  # $72.1: @FILE = call(write_383, file.1, "BYTE PTR ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_75[rip] # "BYTE PTR "
  call write_383
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax 
  .loc 2 1246 54
  # $73.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:rbx:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $72.1:rax $73.1:r15 
  .loc 2 1246 24
  # $74.1: @FILE = call(write_55, $72.1, $73.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $73.1
  # [discarded value]: $72.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $74.1:rax 
  .loc 2 1246 17
  # return($74.1)
  mov [rbp-65], rax
  jmp .LABEL__write_operand_34__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
.LABEL__write_operand_34__49:
  .loc 2 1248 29
  # $75.1: @String = call(clone_391, "Unsupported type size: ")
  lea rdi, .LABEL__string_38[rip] # "Unsupported type size: "
  call clone_391
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $75.1:rax 
  .loc 2 1248 29
  # $76.1: @String = call(append_399, $75.1, value_type_size.1)
  mov rdi, rax
  mov rsi, [rbp-51]
  call append_399
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] $76.1:rax 
  .loc 2 1248 13
  # call(abort_35, generator.1, $76.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] $71.1:[rbp-57] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] $67.1:[rbp-56] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] $63.1:[rbp-55] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] $59.1:[rbp-54] 
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
.LABEL__write_operand_34__38:
  .loc 2 1250 9
  # call(abort_35, generator.1, "Invalid state")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] $58.1:[rbp-53] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] $38.1:[rbp-52] 
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] value_type_size.1:[rbp-51] 
  # [discarded value]: value_type_size.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] $34.1:[rbp-43] 
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] ir_value.1:[rbp-34] mc_value.1:[rbp-42] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_value.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
.LABEL__write_operand_34__20:
  .loc 2 1252 21
  # $77.1: @String = call(clone_391, "Unsupported value: ")
  lea rdi, .LABEL__string_90[rip] # "Unsupported value: "
  call clone_391
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax 
  .loc 2 1252 57
  # $78.1: @Object_Type = load_struct_member(ir_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $78.1:r15 
  .loc 2 1252 57
  # $79.1: @String = load_struct_member_address($78.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:rbx:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $77.1:rax $78.1:r15 $79.1:r14 
  .loc 2 1252 21
  # $80.1: @String = call(append_400, $77.1, $79.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $79.1
  # [discarded value]: $78.1
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] $80.1:rax 
  .loc 2 1252 5
  # call(abort_35, generator.1, $80.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call abort_35
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] $31.1:[rbp-26] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] generator.1:[rbp-16] ir_value.1:[rbp-24] 
  # [discarded value]: ir_value.1
  # [discarded value]: generator.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_operand_34__end:
  mov rsp, rbp
  pop rbp
  ret

write_operand_34__stack_frame_size: .word 80

  .loc 2 1255 8
  .text
abort_35:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_35__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_35__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: self.1:rdi message.1:rsi 
  .loc 2 1256 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: message.1:rsi $1.1:rax 
  .loc 2 1256 5
  # $2.1: @FILE = call(flush_387, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call flush_387
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] 
  .loc 2 1257 11
  # $3.1: @String = call(clone_391, "[Generator] ")
  lea rdi, .LABEL__string_96[rip] # "[Generator] "
  call clone_391
  # [live values]: message.1:[rbp-8] $3.1:rax 
  .loc 2 1257 11
  # $4.1: @String = call(append_400, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_400
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 2 1257 5
  # call(abort_388, $4.1)
  mov rdi, rax
  call abort_388
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__abort_35__end:
  mov rsp, rbp
  pop rbp
  ret

abort_35__stack_frame_size: .word 16

  .loc 2 1286 8
  .text
create_mc_generator_36:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_generator_36__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_generator_36__1:
  # output_file_path.1: @String = load_variable(output_file_path)
  # [live values]: output_file_path.1:rdi 
  .loc 2 1289 29
  # $1.1: [i8; ?] = load_struct_member(output_file_path.1, data)
  mov rax, [rdi]
  # [live values]: output_file_path.1:rdi $1.1:rax 
  .loc 2 1289 52
  # $2.1: [i8; ?] = load_struct_member("w", data)
  lea rbx, .LABEL__string_9[rip] # "w"
  mov r15, [rbx]
  # [live values]: output_file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 2 1289 23
  # $3.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: output_file_path.1:[rbp-8] $3.1:rax 
  .loc 2 1264 33
  # $4.1: @MC_Register_RAX = new MC_Register_RAX(object_type = MC_Register_RAX, name_q = "rax", name_d = "eax", name_w = "ax", name_b = "al", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-16], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RAX
  mov rbx, MC_Register_RAX[rip]
  mov [rax], rbx
  #     .name_q = "rax"
  lea rbx, .LABEL__string_97[rip] # "rax"
  mov [rax+8], rbx
  #     .name_d = "eax"
  lea rbx, .LABEL__string_98[rip] # "eax"
  mov [rax+16], rbx
  #     .name_w = "ax"
  lea rbx, .LABEL__string_99[rip] # "ax"
  mov [rax+24], rbx
  #     .name_b = "al"
  lea rbx, .LABEL__string_100[rip] # "al"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:rax 
  .loc 2 1265 33
  # $5.1: @MC_Register_RCX = new MC_Register_RCX(object_type = MC_Register_RCX, name_q = "rcx", name_d = "ecx", name_w = "cx", name_b = "cl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-24], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RCX
  mov rbx, MC_Register_RCX[rip]
  mov [rax], rbx
  #     .name_q = "rcx"
  lea rbx, .LABEL__string_101[rip] # "rcx"
  mov [rax+8], rbx
  #     .name_d = "ecx"
  lea rbx, .LABEL__string_102[rip] # "ecx"
  mov [rax+16], rbx
  #     .name_w = "cx"
  lea rbx, .LABEL__string_103[rip] # "cx"
  mov [rax+24], rbx
  #     .name_b = "cl"
  lea rbx, .LABEL__string_104[rip] # "cl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 2 1266 33
  # $6.1: @MC_Register_RDX = new MC_Register_RDX(object_type = MC_Register_RDX, name_q = "rdx", name_d = "edx", name_w = "dx", name_b = "dl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-32], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RDX
  mov rbx, MC_Register_RDX[rip]
  mov [rax], rbx
  #     .name_q = "rdx"
  lea rbx, .LABEL__string_105[rip] # "rdx"
  mov [rax+8], rbx
  #     .name_d = "edx"
  lea rbx, .LABEL__string_106[rip] # "edx"
  mov [rax+16], rbx
  #     .name_w = "dx"
  lea rbx, .LABEL__string_107[rip] # "dx"
  mov [rax+24], rbx
  #     .name_b = "dl"
  lea rbx, .LABEL__string_108[rip] # "dl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:rax 
  .loc 2 1267 33
  # $7.1: @MC_Register_RBX = new MC_Register_RBX(object_type = MC_Register_RBX, name_q = "rbx", name_d = "ebx", name_w = "bx", name_b = "bl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-40], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RBX
  mov rbx, MC_Register_RBX[rip]
  mov [rax], rbx
  #     .name_q = "rbx"
  lea rbx, .LABEL__string_109[rip] # "rbx"
  mov [rax+8], rbx
  #     .name_d = "ebx"
  lea rbx, .LABEL__string_110[rip] # "ebx"
  mov [rax+16], rbx
  #     .name_w = "bx"
  lea rbx, .LABEL__string_111[rip] # "bx"
  mov [rax+24], rbx
  #     .name_b = "bl"
  lea rbx, .LABEL__string_112[rip] # "bl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:rax 
  .loc 2 1268 33
  # $8.1: @MC_Register_RSI = new MC_Register_RSI(object_type = MC_Register_RSI, name_q = "rsi", name_d = "esi", name_w = "si", name_b = "sil", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-48], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RSI
  mov rbx, MC_Register_RSI[rip]
  mov [rax], rbx
  #     .name_q = "rsi"
  lea rbx, .LABEL__string_113[rip] # "rsi"
  mov [rax+8], rbx
  #     .name_d = "esi"
  lea rbx, .LABEL__string_114[rip] # "esi"
  mov [rax+16], rbx
  #     .name_w = "si"
  lea rbx, .LABEL__string_115[rip] # "si"
  mov [rax+24], rbx
  #     .name_b = "sil"
  lea rbx, .LABEL__string_116[rip] # "sil"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 2 1269 33
  # $9.1: @MC_Register_RDI = new MC_Register_RDI(object_type = MC_Register_RDI, name_q = "rdi", name_d = "edi", name_w = "di", name_b = "dil", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-56], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RDI
  mov rbx, MC_Register_RDI[rip]
  mov [rax], rbx
  #     .name_q = "rdi"
  lea rbx, .LABEL__string_117[rip] # "rdi"
  mov [rax+8], rbx
  #     .name_d = "edi"
  lea rbx, .LABEL__string_118[rip] # "edi"
  mov [rax+16], rbx
  #     .name_w = "di"
  lea rbx, .LABEL__string_119[rip] # "di"
  mov [rax+24], rbx
  #     .name_b = "dil"
  lea rbx, .LABEL__string_120[rip] # "dil"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:rax 
  .loc 2 1270 33
  # $10.1: @MC_Register_RSP = new MC_Register_RSP(object_type = MC_Register_RSP, name_q = "rsp", name_d = "esp", name_w = "sp", name_b = "spl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-64], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RSP
  mov rbx, MC_Register_RSP[rip]
  mov [rax], rbx
  #     .name_q = "rsp"
  lea rbx, .LABEL__string_121[rip] # "rsp"
  mov [rax+8], rbx
  #     .name_d = "esp"
  lea rbx, .LABEL__string_122[rip] # "esp"
  mov [rax+16], rbx
  #     .name_w = "sp"
  lea rbx, .LABEL__string_123[rip] # "sp"
  mov [rax+24], rbx
  #     .name_b = "spl"
  lea rbx, .LABEL__string_124[rip] # "spl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:rax 
  .loc 2 1271 33
  # $11.1: @MC_Register_RBP = new MC_Register_RBP(object_type = MC_Register_RBP, name_q = "rbp", name_d = "ebp", name_w = "bp", name_b = "bpl", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-72], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_RBP
  mov rbx, MC_Register_RBP[rip]
  mov [rax], rbx
  #     .name_q = "rbp"
  lea rbx, .LABEL__string_125[rip] # "rbp"
  mov [rax+8], rbx
  #     .name_d = "ebp"
  lea rbx, .LABEL__string_126[rip] # "ebp"
  mov [rax+16], rbx
  #     .name_w = "bp"
  lea rbx, .LABEL__string_127[rip] # "bp"
  mov [rax+24], rbx
  #     .name_b = "bpl"
  lea rbx, .LABEL__string_128[rip] # "bpl"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:rax 
  .loc 2 1272 32
  # $12.1: @MC_Register_R8 = new MC_Register_R8(object_type = MC_Register_R8, name_q = "r8", name_d = "r8d", name_w = "r8w", name_b = "r8b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-80], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R8
  mov rbx, MC_Register_R8[rip]
  mov [rax], rbx
  #     .name_q = "r8"
  lea rbx, .LABEL__string_129[rip] # "r8"
  mov [rax+8], rbx
  #     .name_d = "r8d"
  lea rbx, .LABEL__string_130[rip] # "r8d"
  mov [rax+16], rbx
  #     .name_w = "r8w"
  lea rbx, .LABEL__string_131[rip] # "r8w"
  mov [rax+24], rbx
  #     .name_b = "r8b"
  lea rbx, .LABEL__string_132[rip] # "r8b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:rax 
  .loc 2 1273 32
  # $13.1: @MC_Register_R9 = new MC_Register_R9(object_type = MC_Register_R9, name_q = "r9", name_d = "r9d", name_w = "r9w", name_b = "r9b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-88], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R9
  mov rbx, MC_Register_R9[rip]
  mov [rax], rbx
  #     .name_q = "r9"
  lea rbx, .LABEL__string_133[rip] # "r9"
  mov [rax+8], rbx
  #     .name_d = "r9d"
  lea rbx, .LABEL__string_134[rip] # "r9d"
  mov [rax+16], rbx
  #     .name_w = "r9w"
  lea rbx, .LABEL__string_135[rip] # "r9w"
  mov [rax+24], rbx
  #     .name_b = "r9b"
  lea rbx, .LABEL__string_136[rip] # "r9b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:rax 
  .loc 2 1274 33
  # $14.1: @MC_Register_R10 = new MC_Register_R10(object_type = MC_Register_R10, name_q = "r10", name_d = "r10d", name_w = "r10w", name_b = "r10b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-96], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R10
  mov rbx, MC_Register_R10[rip]
  mov [rax], rbx
  #     .name_q = "r10"
  lea rbx, .LABEL__string_137[rip] # "r10"
  mov [rax+8], rbx
  #     .name_d = "r10d"
  lea rbx, .LABEL__string_138[rip] # "r10d"
  mov [rax+16], rbx
  #     .name_w = "r10w"
  lea rbx, .LABEL__string_139[rip] # "r10w"
  mov [rax+24], rbx
  #     .name_b = "r10b"
  lea rbx, .LABEL__string_140[rip] # "r10b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:rax 
  .loc 2 1275 33
  # $15.1: @MC_Register_R11 = new MC_Register_R11(object_type = MC_Register_R11, name_q = "r11", name_d = "r11d", name_w = "r11w", name_b = "r11b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-104], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R11
  mov rbx, MC_Register_R11[rip]
  mov [rax], rbx
  #     .name_q = "r11"
  lea rbx, .LABEL__string_141[rip] # "r11"
  mov [rax+8], rbx
  #     .name_d = "r11d"
  lea rbx, .LABEL__string_142[rip] # "r11d"
  mov [rax+16], rbx
  #     .name_w = "r11w"
  lea rbx, .LABEL__string_143[rip] # "r11w"
  mov [rax+24], rbx
  #     .name_b = "r11b"
  lea rbx, .LABEL__string_144[rip] # "r11b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:rax 
  .loc 2 1276 33
  # $16.1: @MC_Register_R12 = new MC_Register_R12(object_type = MC_Register_R12, name_q = "r12", name_d = "r12d", name_w = "r12w", name_b = "r12b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-112], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R12
  mov rbx, MC_Register_R12[rip]
  mov [rax], rbx
  #     .name_q = "r12"
  lea rbx, .LABEL__string_145[rip] # "r12"
  mov [rax+8], rbx
  #     .name_d = "r12d"
  lea rbx, .LABEL__string_146[rip] # "r12d"
  mov [rax+16], rbx
  #     .name_w = "r12w"
  lea rbx, .LABEL__string_147[rip] # "r12w"
  mov [rax+24], rbx
  #     .name_b = "r12b"
  lea rbx, .LABEL__string_148[rip] # "r12b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:rax 
  .loc 2 1277 33
  # $17.1: @MC_Register_R13 = new MC_Register_R13(object_type = MC_Register_R13, name_q = "r13", name_d = "r13d", name_w = "r13w", name_b = "r13b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-120], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R13
  mov rbx, MC_Register_R13[rip]
  mov [rax], rbx
  #     .name_q = "r13"
  lea rbx, .LABEL__string_149[rip] # "r13"
  mov [rax+8], rbx
  #     .name_d = "r13d"
  lea rbx, .LABEL__string_150[rip] # "r13d"
  mov [rax+16], rbx
  #     .name_w = "r13w"
  lea rbx, .LABEL__string_151[rip] # "r13w"
  mov [rax+24], rbx
  #     .name_b = "r13b"
  lea rbx, .LABEL__string_152[rip] # "r13b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:rax 
  .loc 2 1278 33
  # $18.1: @MC_Register_R14 = new MC_Register_R14(object_type = MC_Register_R14, name_q = "r14", name_d = "r14d", name_w = "r14w", name_b = "r14b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-128], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R14
  mov rbx, MC_Register_R14[rip]
  mov [rax], rbx
  #     .name_q = "r14"
  lea rbx, .LABEL__string_153[rip] # "r14"
  mov [rax+8], rbx
  #     .name_d = "r14d"
  lea rbx, .LABEL__string_154[rip] # "r14d"
  mov [rax+16], rbx
  #     .name_w = "r14w"
  lea rbx, .LABEL__string_155[rip] # "r14w"
  mov [rax+24], rbx
  #     .name_b = "r14b"
  lea rbx, .LABEL__string_156[rip] # "r14b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:rax 
  .loc 2 1279 33
  # $19.1: @MC_Register_R15 = new MC_Register_R15(object_type = MC_Register_R15, name_q = "r15", name_d = "r15d", name_w = "r15w", name_b = "r15b", is_reserved = false, value = null, loaded_value = null)
  mov [rbp-136], rax
  mov rdi, 57
  call malloc
  #     .object_type = MC_Register_R15
  mov rbx, MC_Register_R15[rip]
  mov [rax], rbx
  #     .name_q = "r15"
  lea rbx, .LABEL__string_157[rip] # "r15"
  mov [rax+8], rbx
  #     .name_d = "r15d"
  lea rbx, .LABEL__string_158[rip] # "r15d"
  mov [rax+16], rbx
  #     .name_w = "r15w"
  lea rbx, .LABEL__string_159[rip] # "r15w"
  mov [rax+24], rbx
  #     .name_b = "r15b"
  lea rbx, .LABEL__string_160[rip] # "r15b"
  mov [rax+32], rbx
  #     .is_reserved = false
  mov BYTE PTR [rax+40], 0
  #     .value = null
  mov QWORD PTR [rax+41], 0
  #     .loaded_value = null
  mov QWORD PTR [rax+49], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:rax 
  .loc 2 1283 21
  # $20.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-144], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: output_file_path.1:[rbp-8] $3.1:[rbp-16] $4.1:[rbp-24] $5.1:[rbp-32] $6.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $9.1:[rbp-64] $10.1:[rbp-72] $11.1:[rbp-80] $12.1:[rbp-88] $13.1:[rbp-96] $14.1:[rbp-104] $15.1:[rbp-112] $16.1:[rbp-120] $17.1:[rbp-128] $18.1:[rbp-136] $19.1:[rbp-144] $20.1:rax 
  .loc 2 1287 12
  # $21.1: @MC_Generator = new MC_Generator(output_file_path = output_file_path.1, output_file = $3.1, output_debug_comments = true, register_rax = $4.1, register_rcx = $5.1, register_rdx = $6.1, register_rbx = $7.1, register_rsi = $8.1, register_rdi = $9.1, register_rsp = $10.1, register_rbp = $11.1, register_r8 = $12.1, register_r9 = $13.1, register_r10 = $14.1, register_r11 = $15.1, register_r12 = $16.1, register_r13 = $17.1, register_r14 = $18.1, register_r15 = $19.1, first_value = null, last_value = null, stack_frame_size = 0, strings = $20.1)
  mov [rbp-152], rax
  mov rdi, 177
  call malloc
  #     .output_file_path = output_file_path.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .output_file = $3.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .output_debug_comments = true
  mov BYTE PTR [rax+16], 1
  #     .register_rax = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+17], r14
  #     .register_rcx = $5.1
  mov r13, [rbp-32]
  mov QWORD PTR [rax+25], r13
  #     .register_rdx = $6.1
  mov r12, [rbp-40]
  mov QWORD PTR [rax+33], r12
  #     .register_rbx = $7.1
  mov r11, [rbp-48]
  mov QWORD PTR [rax+41], r11
  #     .register_rsi = $8.1
  mov r10, [rbp-56]
  mov QWORD PTR [rax+49], r10
  #     .register_rdi = $9.1
  mov r9, [rbp-64]
  mov QWORD PTR [rax+57], r9
  #     .register_rsp = $10.1
  mov r8, [rbp-72]
  mov QWORD PTR [rax+65], r8
  #     .register_rbp = $11.1
  mov rcx, [rbp-80]
  mov QWORD PTR [rax+73], rcx
  #     .register_r8 = $12.1
  mov rdx, [rbp-88]
  mov QWORD PTR [rax+81], rdx
  #     .register_r9 = $13.1
  mov rsi, [rbp-96]
  mov QWORD PTR [rax+89], rsi
  #     .register_r10 = $14.1
  mov rdi, [rbp-104]
  mov QWORD PTR [rax+97], rdi
  #     .register_r11 = $15.1
  mov rbx, [rbp-112]
  mov QWORD PTR [rax+105], rbx
  #     .register_r12 = $16.1
  mov rbx, [rbp-120]
  mov QWORD PTR [rax+113], rbx
  #     .register_r13 = $17.1
  mov rbx, [rbp-128]
  mov QWORD PTR [rax+121], rbx
  #     .register_r14 = $18.1
  mov rbx, [rbp-136]
  mov QWORD PTR [rax+129], rbx
  #     .register_r15 = $19.1
  mov rbx, [rbp-144]
  mov QWORD PTR [rax+137], rbx
  #     .first_value = null
  mov QWORD PTR [rax+145], 0
  #     .last_value = null
  mov QWORD PTR [rax+153], 0
  #     .stack_frame_size = 0
  mov QWORD PTR [rax+161], 0
  #     .strings = $20.1
  mov rbx, [rbp-152]
  mov QWORD PTR [rax+169], rbx
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: output_file_path.1
  # [live values]: $21.1:rax 
  .loc 2 1287 5
  # return($21.1)
  mov [rbp-8], rax
  jmp .LABEL__create_mc_generator_36__end
  # [discarded value]: $21.1
  # [live values]: 
.LABEL__create_mc_generator_36__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_generator_36__stack_frame_size: .word 160

  .loc 2 1294 8
  .text
reset_37:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_37__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_37__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__reset_37__2)
  mov [rbp-8], rdi
.LABEL__reset_37__2:
  .loc 2 1295 12
  # $1.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1295 12
  # $2.1: bool = $1.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__reset_37__3, .LABEL__reset_37__4)
  test r15b, r15b
  mov [rbp-9], r15b
  jz .LABEL__reset_37__4
.LABEL__reset_37__3:
  .loc 2 1296 21
  # value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-8]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1297 28
  # $4.1: @MC_Value = load_struct_member(value.1, next_value)
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx $4.1:r15 
  .loc 2 1297 9
  # store_struct_member(self.1, first_value, $4.1)
  mov QWORD PTR [rax+145], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1298 9
  # store_struct_member(value.1, prev_value, null)
  mov QWORD PTR [rbx], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1299 9
  # store_struct_member(value.1, next_value, null)
  mov QWORD PTR [rbx+8], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] value.1:rbx 
  .loc 2 1300 13
  # $5.1: @MC_Register = load_struct_member(value.1, register)
  mov r15, [rbx+32]
  # [discarded value]: value.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $5.1:r15 
  .loc 2 1300 13
  # $6.1: bool = $5.1 != null
  cmp r15, 0
  setne bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] $6.1:rbx 
  # jump($6.1, .LABEL__reset_37__5, .LABEL__reset_37__2)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__reset_37__2
.LABEL__reset_37__5:
  .loc 2 1301 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-10] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__reset_37__4:
  .loc 2 1304 5
  # store_struct_member(self.1, last_value, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+153], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  .loc 2 1305 5
  # store_struct_member(self.1, stack_frame_size, 0)
  mov QWORD PTR [rax+161], 0
  # [live values]: self.1:rax:[rbp-8] $2.1:[rbp-9] 
  # return()
  jmp .LABEL__reset_37__end
  # [live values]: self.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_37__end:
  mov rsp, rbp
  pop rbp
  ret

reset_37__stack_frame_size: .word 16

  .loc 2 1308 8
  .text
find_unused_register_38:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR find_unused_register_38__stack_frame_size[rip]
  sub rsp, rax
.LABEL__find_unused_register_38__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1309 9
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1309 9
  # $2.1: bool = load_struct_member($1.1, is_reserved)
  mov bl, [rax+40]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 2 1309 9
  # $3.1: bool = $2.1 == false
  cmp bl, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  .loc 2 1309 9
  # $4.1: bool = $3.1
  mov [rbp-1], al
  # [discarded value]: $3.1
  # [live values]: self.1:rdi $4.1:rax 
  # jump($4.1, .LABEL__find_unused_register_38__2, .LABEL__find_unused_register_38__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__find_unused_register_38__3
.LABEL__find_unused_register_38__2:
  .loc 2 1309 51
  # $5.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $5.1:rbx 
  .loc 2 1309 51
  # $6.1: @MC_Value = load_struct_member($5.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $6.1:r15 
  .loc 2 1309 51
  # $7.1: bool = $6.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $7.1:rbx 
  .loc 2 1309 9
  # $4.2: bool = $7.1
  mov [rbp-10], bl
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:rbx:[rbp-1] 
  # jump(.LABEL__find_unused_register_38__3)
  mov [rbp-1], bl
.LABEL__find_unused_register_38__3:
  .loc 2 1309 9
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # jump($4.3, .LABEL__find_unused_register_38__4, .LABEL__find_unused_register_38__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__find_unused_register_38__5
.LABEL__find_unused_register_38__4:
  .loc 2 1310 16
  # $8.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-9]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $8.1:rbx 
  .loc 2 1310 9
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
.LABEL__find_unused_register_38__5:
  .loc 2 1312 9
  # $9.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $9.1:rbx 
  .loc 2 1312 9
  # $10.1: bool = load_struct_member($9.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $10.1:r15 
  .loc 2 1312 9
  # $11.1: bool = $10.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $11.1:rbx 
  .loc 2 1312 9
  # $12.1: bool = $11.1
  mov [rbp-10], bl
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:rbx 
  # jump($12.1, .LABEL__find_unused_register_38__7, .LABEL__find_unused_register_38__8)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__find_unused_register_38__8
.LABEL__find_unused_register_38__7:
  .loc 2 1312 51
  # $13.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $13.1:rbx 
  .loc 2 1312 51
  # $14.1: @MC_Value = load_struct_member($13.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $14.1:r15 
  .loc 2 1312 51
  # $15.1: bool = $14.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $15.1:rbx 
  .loc 2 1312 9
  # $12.2: bool = $15.1
  mov [rbp-11], bl
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:rbx:[rbp-10] 
  # jump(.LABEL__find_unused_register_38__8)
  mov [rbp-10], bl
.LABEL__find_unused_register_38__8:
  .loc 2 1312 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # jump($12.3, .LABEL__find_unused_register_38__9, .LABEL__find_unused_register_38__10)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__find_unused_register_38__10
.LABEL__find_unused_register_38__9:
  .loc 2 1313 16
  # $16.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $16.1:rbx 
  .loc 2 1313 9
  # return($16.1)
  mov rax, rbx
  mov [rbp-18], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
.LABEL__find_unused_register_38__10:
  .loc 2 1315 9
  # $17.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $17.1:rbx 
  .loc 2 1315 9
  # $18.1: bool = load_struct_member($17.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $18.1:r15 
  .loc 2 1315 9
  # $19.1: bool = $18.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $19.1:rbx 
  .loc 2 1315 9
  # $20.1: bool = $19.1
  mov [rbp-11], bl
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:rbx 
  # jump($20.1, .LABEL__find_unused_register_38__12, .LABEL__find_unused_register_38__13)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__find_unused_register_38__13
.LABEL__find_unused_register_38__12:
  .loc 2 1315 51
  # $21.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $21.1:rbx 
  .loc 2 1315 51
  # $22.1: @MC_Value = load_struct_member($21.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $22.1:r15 
  .loc 2 1315 51
  # $23.1: bool = $22.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $23.1:rbx 
  .loc 2 1315 9
  # $20.2: bool = $23.1
  mov [rbp-12], bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:rbx:[rbp-11] 
  # jump(.LABEL__find_unused_register_38__13)
  mov [rbp-11], bl
.LABEL__find_unused_register_38__13:
  .loc 2 1315 9
  # $20.3: bool = phi($20.1, $20.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # jump($20.3, .LABEL__find_unused_register_38__14, .LABEL__find_unused_register_38__15)
  mov al, [rbp-11]
  test al, al
  jz .LABEL__find_unused_register_38__15
.LABEL__find_unused_register_38__14:
  .loc 2 1316 16
  # $24.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-9]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $24.1:rbx 
  .loc 2 1316 9
  # return($24.1)
  mov rax, rbx
  mov [rbp-19], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
.LABEL__find_unused_register_38__15:
  .loc 2 1318 9
  # $25.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $25.1:rbx 
  .loc 2 1318 9
  # $26.1: bool = load_struct_member($25.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $25.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $26.1:r15 
  .loc 2 1318 9
  # $27.1: bool = $26.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $27.1:rbx 
  .loc 2 1318 9
  # $28.1: bool = $27.1
  mov [rbp-12], bl
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:rbx 
  # jump($28.1, .LABEL__find_unused_register_38__17, .LABEL__find_unused_register_38__18)
  test bl, bl
  mov [rbp-12], bl
  jz .LABEL__find_unused_register_38__18
.LABEL__find_unused_register_38__17:
  .loc 2 1318 51
  # $29.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $29.1:rbx 
  .loc 2 1318 51
  # $30.1: @MC_Value = load_struct_member($29.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $29.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $30.1:r15 
  .loc 2 1318 51
  # $31.1: bool = $30.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $31.1:rbx 
  .loc 2 1318 9
  # $28.2: bool = $31.1
  mov [rbp-13], bl
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:rbx:[rbp-12] 
  # jump(.LABEL__find_unused_register_38__18)
  mov [rbp-12], bl
.LABEL__find_unused_register_38__18:
  .loc 2 1318 9
  # $28.3: bool = phi($28.1, $28.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # jump($28.3, .LABEL__find_unused_register_38__19, .LABEL__find_unused_register_38__20)
  mov al, [rbp-12]
  test al, al
  jz .LABEL__find_unused_register_38__20
.LABEL__find_unused_register_38__19:
  .loc 2 1319 16
  # $32.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-9]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $32.1:rbx 
  .loc 2 1319 9
  # return($32.1)
  mov rax, rbx
  mov [rbp-20], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
.LABEL__find_unused_register_38__20:
  .loc 2 1321 9
  # $33.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $33.1:rbx 
  .loc 2 1321 9
  # $34.1: bool = load_struct_member($33.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $34.1:r15 
  .loc 2 1321 9
  # $35.1: bool = $34.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $34.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $35.1:rbx 
  .loc 2 1321 9
  # $36.1: bool = $35.1
  mov [rbp-13], bl
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:rbx 
  # jump($36.1, .LABEL__find_unused_register_38__22, .LABEL__find_unused_register_38__23)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__find_unused_register_38__23
.LABEL__find_unused_register_38__22:
  .loc 2 1321 51
  # $37.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $37.1:rbx 
  .loc 2 1321 51
  # $38.1: @MC_Value = load_struct_member($37.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $38.1:r15 
  .loc 2 1321 51
  # $39.1: bool = $38.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $38.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $39.1:rbx 
  .loc 2 1321 9
  # $36.2: bool = $39.1
  mov [rbp-14], bl
  # [discarded value]: $39.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:rbx:[rbp-13] 
  # jump(.LABEL__find_unused_register_38__23)
  mov [rbp-13], bl
.LABEL__find_unused_register_38__23:
  .loc 2 1321 9
  # $36.3: bool = phi($36.1, $36.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # jump($36.3, .LABEL__find_unused_register_38__24, .LABEL__find_unused_register_38__25)
  mov al, [rbp-13]
  test al, al
  jz .LABEL__find_unused_register_38__25
.LABEL__find_unused_register_38__24:
  .loc 2 1322 16
  # $40.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-9]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $40.1:rbx 
  .loc 2 1322 9
  # return($40.1)
  mov rax, rbx
  mov [rbp-21], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
.LABEL__find_unused_register_38__25:
  .loc 2 1324 9
  # $41.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $41.1:rbx 
  .loc 2 1324 9
  # $42.1: bool = load_struct_member($41.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $41.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $42.1:r15 
  .loc 2 1324 9
  # $43.1: bool = $42.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $42.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $43.1:rbx 
  .loc 2 1324 9
  # $44.1: bool = $43.1
  mov [rbp-14], bl
  # [discarded value]: $43.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:rbx 
  # jump($44.1, .LABEL__find_unused_register_38__27, .LABEL__find_unused_register_38__28)
  test bl, bl
  mov [rbp-14], bl
  jz .LABEL__find_unused_register_38__28
.LABEL__find_unused_register_38__27:
  .loc 2 1324 51
  # $45.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $45.1:rbx 
  .loc 2 1324 51
  # $46.1: @MC_Value = load_struct_member($45.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $45.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $46.1:r15 
  .loc 2 1324 51
  # $47.1: bool = $46.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $46.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $47.1:rbx 
  .loc 2 1324 9
  # $44.2: bool = $47.1
  mov [rbp-15], bl
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:rbx:[rbp-14] 
  # jump(.LABEL__find_unused_register_38__28)
  mov [rbp-14], bl
.LABEL__find_unused_register_38__28:
  .loc 2 1324 9
  # $44.3: bool = phi($44.1, $44.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # jump($44.3, .LABEL__find_unused_register_38__29, .LABEL__find_unused_register_38__30)
  mov al, [rbp-14]
  test al, al
  jz .LABEL__find_unused_register_38__30
.LABEL__find_unused_register_38__29:
  .loc 2 1325 16
  # $48.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-9]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $48.1:rbx 
  .loc 2 1325 9
  # return($48.1)
  mov rax, rbx
  mov [rbp-22], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
.LABEL__find_unused_register_38__30:
  .loc 2 1327 9
  # $49.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $49.1:rbx 
  .loc 2 1327 9
  # $50.1: bool = load_struct_member($49.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $49.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $50.1:r15 
  .loc 2 1327 9
  # $51.1: bool = $50.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $50.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $51.1:rbx 
  .loc 2 1327 9
  # $52.1: bool = $51.1
  mov [rbp-15], bl
  # [discarded value]: $51.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:rbx 
  # jump($52.1, .LABEL__find_unused_register_38__32, .LABEL__find_unused_register_38__33)
  test bl, bl
  mov [rbp-15], bl
  jz .LABEL__find_unused_register_38__33
.LABEL__find_unused_register_38__32:
  .loc 2 1327 51
  # $53.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $53.1:rbx 
  .loc 2 1327 51
  # $54.1: @MC_Value = load_struct_member($53.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $53.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $54.1:r15 
  .loc 2 1327 51
  # $55.1: bool = $54.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $54.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $55.1:rbx 
  .loc 2 1327 9
  # $52.2: bool = $55.1
  mov [rbp-16], bl
  # [discarded value]: $55.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:rbx:[rbp-15] 
  # jump(.LABEL__find_unused_register_38__33)
  mov [rbp-15], bl
.LABEL__find_unused_register_38__33:
  .loc 2 1327 9
  # $52.3: bool = phi($52.1, $52.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # jump($52.3, .LABEL__find_unused_register_38__34, .LABEL__find_unused_register_38__35)
  mov al, [rbp-15]
  test al, al
  jz .LABEL__find_unused_register_38__35
.LABEL__find_unused_register_38__34:
  .loc 2 1328 16
  # $56.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-9]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $56.1:rbx 
  .loc 2 1328 9
  # return($56.1)
  mov rax, rbx
  mov [rbp-23], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
.LABEL__find_unused_register_38__35:
  .loc 2 1330 9
  # $57.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $57.1:rbx 
  .loc 2 1330 9
  # $58.1: bool = load_struct_member($57.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $57.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $58.1:r15 
  .loc 2 1330 9
  # $59.1: bool = $58.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $58.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $59.1:rbx 
  .loc 2 1330 9
  # $60.1: bool = $59.1
  mov [rbp-16], bl
  # [discarded value]: $59.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:rbx 
  # jump($60.1, .LABEL__find_unused_register_38__37, .LABEL__find_unused_register_38__38)
  test bl, bl
  mov [rbp-16], bl
  jz .LABEL__find_unused_register_38__38
.LABEL__find_unused_register_38__37:
  .loc 2 1330 51
  # $61.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $61.1:rbx 
  .loc 2 1330 51
  # $62.1: @MC_Value = load_struct_member($61.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $61.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $62.1:r15 
  .loc 2 1330 51
  # $63.1: bool = $62.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $62.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $63.1:rbx 
  .loc 2 1330 9
  # $60.2: bool = $63.1
  mov [rbp-17], bl
  # [discarded value]: $63.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:rbx:[rbp-16] 
  # jump(.LABEL__find_unused_register_38__38)
  mov [rbp-16], bl
.LABEL__find_unused_register_38__38:
  .loc 2 1330 9
  # $60.3: bool = phi($60.1, $60.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # jump($60.3, .LABEL__find_unused_register_38__39, .LABEL__find_unused_register_38__40)
  mov al, [rbp-16]
  test al, al
  jz .LABEL__find_unused_register_38__40
.LABEL__find_unused_register_38__39:
  .loc 2 1331 16
  # $64.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-9]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $64.1:rbx 
  .loc 2 1331 9
  # return($64.1)
  mov rax, rbx
  mov [rbp-24], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
.LABEL__find_unused_register_38__40:
  .loc 2 1333 9
  # $65.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $65.1:rbx 
  .loc 2 1333 9
  # $66.1: bool = load_struct_member($65.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $65.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $66.1:r15 
  .loc 2 1333 9
  # $67.1: bool = $66.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $66.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $67.1:rbx 
  .loc 2 1333 9
  # $68.1: bool = $67.1
  mov [rbp-17], bl
  # [discarded value]: $67.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:rbx 
  # jump($68.1, .LABEL__find_unused_register_38__42, .LABEL__find_unused_register_38__43)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__find_unused_register_38__43
.LABEL__find_unused_register_38__42:
  .loc 2 1333 50
  # $69.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $69.1:rbx 
  .loc 2 1333 50
  # $70.1: @MC_Value = load_struct_member($69.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $69.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $70.1:r15 
  .loc 2 1333 50
  # $71.1: bool = $70.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $70.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $71.1:rbx 
  .loc 2 1333 9
  # $68.2: bool = $71.1
  mov [rbp-18], bl
  # [discarded value]: $71.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:rbx:[rbp-17] 
  # jump(.LABEL__find_unused_register_38__43)
  mov [rbp-17], bl
.LABEL__find_unused_register_38__43:
  .loc 2 1333 9
  # $68.3: bool = phi($68.1, $68.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # jump($68.3, .LABEL__find_unused_register_38__44, .LABEL__find_unused_register_38__45)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__find_unused_register_38__45
.LABEL__find_unused_register_38__44:
  .loc 2 1334 16
  # $72.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-9]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $72.1:rbx 
  .loc 2 1334 9
  # return($72.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
.LABEL__find_unused_register_38__45:
  .loc 2 1336 9
  # $73.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $73.1:rbx 
  .loc 2 1336 9
  # $74.1: bool = load_struct_member($73.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $73.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $74.1:r15 
  .loc 2 1336 9
  # $75.1: bool = $74.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $74.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $75.1:rbx 
  .loc 2 1336 9
  # $76.1: bool = $75.1
  mov [rbp-18], bl
  # [discarded value]: $75.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:rbx 
  # jump($76.1, .LABEL__find_unused_register_38__47, .LABEL__find_unused_register_38__48)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__find_unused_register_38__48
.LABEL__find_unused_register_38__47:
  .loc 2 1336 50
  # $77.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $77.1:rbx 
  .loc 2 1336 50
  # $78.1: @MC_Value = load_struct_member($77.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $77.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $78.1:r15 
  .loc 2 1336 50
  # $79.1: bool = $78.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $78.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $79.1:rbx 
  .loc 2 1336 9
  # $76.2: bool = $79.1
  mov [rbp-19], bl
  # [discarded value]: $79.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:rbx:[rbp-18] 
  # jump(.LABEL__find_unused_register_38__48)
  mov [rbp-18], bl
.LABEL__find_unused_register_38__48:
  .loc 2 1336 9
  # $76.3: bool = phi($76.1, $76.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # jump($76.3, .LABEL__find_unused_register_38__49, .LABEL__find_unused_register_38__50)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__find_unused_register_38__50
.LABEL__find_unused_register_38__49:
  .loc 2 1337 16
  # $80.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-9]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $80.1:rbx 
  .loc 2 1337 9
  # return($80.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
.LABEL__find_unused_register_38__50:
  .loc 2 1339 9
  # $81.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $81.1:rbx 
  .loc 2 1339 9
  # $82.1: bool = load_struct_member($81.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $81.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $82.1:r15 
  .loc 2 1339 9
  # $83.1: bool = $82.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $82.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $83.1:rbx 
  .loc 2 1339 9
  # $84.1: bool = $83.1
  mov [rbp-19], bl
  # [discarded value]: $83.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:rbx 
  # jump($84.1, .LABEL__find_unused_register_38__52, .LABEL__find_unused_register_38__53)
  test bl, bl
  mov [rbp-19], bl
  jz .LABEL__find_unused_register_38__53
.LABEL__find_unused_register_38__52:
  .loc 2 1339 51
  # $85.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $85.1:rbx 
  .loc 2 1339 51
  # $86.1: @MC_Value = load_struct_member($85.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $85.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $86.1:r15 
  .loc 2 1339 51
  # $87.1: bool = $86.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $86.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $87.1:rbx 
  .loc 2 1339 9
  # $84.2: bool = $87.1
  mov [rbp-20], bl
  # [discarded value]: $87.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:rbx:[rbp-19] 
  # jump(.LABEL__find_unused_register_38__53)
  mov [rbp-19], bl
.LABEL__find_unused_register_38__53:
  .loc 2 1339 9
  # $84.3: bool = phi($84.1, $84.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # jump($84.3, .LABEL__find_unused_register_38__54, .LABEL__find_unused_register_38__55)
  mov al, [rbp-19]
  test al, al
  jz .LABEL__find_unused_register_38__55
.LABEL__find_unused_register_38__54:
  .loc 2 1340 16
  # $88.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-9]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $88.1:rbx 
  .loc 2 1340 9
  # return($88.1)
  mov rax, rbx
  mov [rbp-27], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $88.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
.LABEL__find_unused_register_38__55:
  .loc 2 1342 9
  # $89.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $89.1:rbx 
  .loc 2 1342 9
  # $90.1: bool = load_struct_member($89.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $89.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $90.1:r15 
  .loc 2 1342 9
  # $91.1: bool = $90.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $90.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $91.1:rbx 
  .loc 2 1342 9
  # $92.1: bool = $91.1
  mov [rbp-20], bl
  # [discarded value]: $91.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:rbx 
  # jump($92.1, .LABEL__find_unused_register_38__57, .LABEL__find_unused_register_38__58)
  test bl, bl
  mov [rbp-20], bl
  jz .LABEL__find_unused_register_38__58
.LABEL__find_unused_register_38__57:
  .loc 2 1342 51
  # $93.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $93.1:rbx 
  .loc 2 1342 51
  # $94.1: @MC_Value = load_struct_member($93.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $93.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $94.1:r15 
  .loc 2 1342 51
  # $95.1: bool = $94.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $94.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $95.1:rbx 
  .loc 2 1342 9
  # $92.2: bool = $95.1
  mov [rbp-21], bl
  # [discarded value]: $95.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:rbx:[rbp-20] 
  # jump(.LABEL__find_unused_register_38__58)
  mov [rbp-20], bl
.LABEL__find_unused_register_38__58:
  .loc 2 1342 9
  # $92.3: bool = phi($92.1, $92.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # jump($92.3, .LABEL__find_unused_register_38__59, .LABEL__find_unused_register_38__60)
  mov al, [rbp-20]
  test al, al
  jz .LABEL__find_unused_register_38__60
.LABEL__find_unused_register_38__59:
  .loc 2 1343 16
  # $96.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-9]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $96.1:rbx 
  .loc 2 1343 9
  # return($96.1)
  mov rax, rbx
  mov [rbp-28], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $96.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
.LABEL__find_unused_register_38__60:
  .loc 2 1345 9
  # $97.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $97.1:rbx 
  .loc 2 1345 9
  # $98.1: bool = load_struct_member($97.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $97.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $98.1:r15 
  .loc 2 1345 9
  # $99.1: bool = $98.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $98.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $99.1:rbx 
  .loc 2 1345 9
  # $100.1: bool = $99.1
  mov [rbp-21], bl
  # [discarded value]: $99.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:rbx 
  # jump($100.1, .LABEL__find_unused_register_38__62, .LABEL__find_unused_register_38__63)
  test bl, bl
  mov [rbp-21], bl
  jz .LABEL__find_unused_register_38__63
.LABEL__find_unused_register_38__62:
  .loc 2 1345 51
  # $101.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $101.1:rbx 
  .loc 2 1345 51
  # $102.1: @MC_Value = load_struct_member($101.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $101.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $102.1:r15 
  .loc 2 1345 51
  # $103.1: bool = $102.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $102.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $103.1:rbx 
  .loc 2 1345 9
  # $100.2: bool = $103.1
  mov [rbp-22], bl
  # [discarded value]: $103.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:rbx:[rbp-21] 
  # jump(.LABEL__find_unused_register_38__63)
  mov [rbp-21], bl
.LABEL__find_unused_register_38__63:
  .loc 2 1345 9
  # $100.3: bool = phi($100.1, $100.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # jump($100.3, .LABEL__find_unused_register_38__64, .LABEL__find_unused_register_38__65)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__find_unused_register_38__65
.LABEL__find_unused_register_38__64:
  .loc 2 1346 16
  # $104.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $104.1:rbx 
  .loc 2 1346 9
  # return($104.1)
  mov rax, rbx
  mov [rbp-29], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $104.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
.LABEL__find_unused_register_38__65:
  .loc 2 1348 9
  # $105.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $105.1:rbx 
  .loc 2 1348 9
  # $106.1: bool = load_struct_member($105.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $105.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $106.1:r15 
  .loc 2 1348 9
  # $107.1: bool = $106.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $106.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $107.1:rbx 
  .loc 2 1348 9
  # $108.1: bool = $107.1
  mov [rbp-22], bl
  # [discarded value]: $107.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:rbx 
  # jump($108.1, .LABEL__find_unused_register_38__67, .LABEL__find_unused_register_38__68)
  test bl, bl
  mov [rbp-22], bl
  jz .LABEL__find_unused_register_38__68
.LABEL__find_unused_register_38__67:
  .loc 2 1348 51
  # $109.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $109.1:rbx 
  .loc 2 1348 51
  # $110.1: @MC_Value = load_struct_member($109.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $109.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $110.1:r15 
  .loc 2 1348 51
  # $111.1: bool = $110.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $110.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $111.1:rbx 
  .loc 2 1348 9
  # $108.2: bool = $111.1
  mov [rbp-23], bl
  # [discarded value]: $111.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:rbx:[rbp-22] 
  # jump(.LABEL__find_unused_register_38__68)
  mov [rbp-22], bl
.LABEL__find_unused_register_38__68:
  .loc 2 1348 9
  # $108.3: bool = phi($108.1, $108.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # jump($108.3, .LABEL__find_unused_register_38__69, .LABEL__find_unused_register_38__70)
  mov al, [rbp-22]
  test al, al
  jz .LABEL__find_unused_register_38__70
.LABEL__find_unused_register_38__69:
  .loc 2 1349 16
  # $112.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-9]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $112.1:rbx 
  .loc 2 1349 9
  # return($112.1)
  mov rax, rbx
  mov [rbp-30], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $112.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
.LABEL__find_unused_register_38__70:
  .loc 2 1351 9
  # $113.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $113.1:rbx 
  .loc 2 1351 9
  # $114.1: bool = load_struct_member($113.1, is_reserved)
  mov r15b, [rbx+40]
  # [discarded value]: $113.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $114.1:r15 
  .loc 2 1351 9
  # $115.1: bool = $114.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $114.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $115.1:rbx 
  .loc 2 1351 9
  # $116.1: bool = $115.1
  mov [rbp-23], bl
  # [discarded value]: $115.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:rbx 
  # jump($116.1, .LABEL__find_unused_register_38__72, .LABEL__find_unused_register_38__73)
  test bl, bl
  mov [rbp-23], bl
  jz .LABEL__find_unused_register_38__73
.LABEL__find_unused_register_38__72:
  .loc 2 1351 51
  # $117.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $117.1:rbx 
  .loc 2 1351 51
  # $118.1: @MC_Value = load_struct_member($117.1, value)
  mov r15, [rbx+41]
  # [discarded value]: $117.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 
  .loc 2 1351 78
  # $119.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 $119.1:rbx 
  .loc 2 1351 78
  # $120.1: @MC_Value = load_struct_member($119.1, loaded_value)
  mov r14, [rbx+49]
  # [discarded value]: $119.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $118.1:r15 $120.1:r14 
  .loc 2 1351 51
  # $121.1: bool = $118.1 == $120.1
  cmp r15, r14
  sete bl
  # [discarded value]: $120.1
  # [discarded value]: $118.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $121.1:rbx 
  .loc 2 1351 9
  # $116.2: bool = $121.1
  mov [rbp-24], bl
  # [discarded value]: $121.1
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:rbx:[rbp-23] 
  # jump(.LABEL__find_unused_register_38__73)
  mov [rbp-23], bl
.LABEL__find_unused_register_38__73:
  .loc 2 1351 9
  # $116.3: bool = phi($116.1, $116.2)
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  # jump($116.3, .LABEL__find_unused_register_38__74, .LABEL__find_unused_register_38__75)
  mov al, [rbp-23]
  test al, al
  jz .LABEL__find_unused_register_38__75
.LABEL__find_unused_register_38__74:
  .loc 2 1352 31
  # $122.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] $122.1:rbx 
  .loc 2 1352 9
  # call(release_register_47, self.1, $122.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $122.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  .loc 2 1353 16
  # $123.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-9]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] $123.1:rbx 
  .loc 2 1353 9
  # return($123.1)
  mov rax, rbx
  mov [rbp-31], rbx
  jmp .LABEL__find_unused_register_38__end
  # [discarded value]: $123.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
.LABEL__find_unused_register_38__75:
  .loc 2 1355 5
  # call(abort_35, self.1, "All registered are used")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_161[rip] # "All registered are used"
  call abort_35
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] $116.3:[rbp-23] 
  # [discarded value]: $116.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] $116.2:[rbp-23] 
  # [discarded value]: $116.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] $116.1:[rbp-23] 
  # [discarded value]: $116.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] $108.3:[rbp-22] 
  # [discarded value]: $108.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] $108.2:[rbp-22] 
  # [discarded value]: $108.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] $108.1:[rbp-22] 
  # [discarded value]: $108.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] $100.3:[rbp-21] 
  # [discarded value]: $100.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] $100.2:[rbp-21] 
  # [discarded value]: $100.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] $100.1:[rbp-21] 
  # [discarded value]: $100.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] $92.3:[rbp-20] 
  # [discarded value]: $92.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] $92.2:[rbp-20] 
  # [discarded value]: $92.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] $92.1:[rbp-20] 
  # [discarded value]: $92.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] $84.3:[rbp-19] 
  # [discarded value]: $84.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] $84.2:[rbp-19] 
  # [discarded value]: $84.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] $84.1:[rbp-19] 
  # [discarded value]: $84.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] $76.3:[rbp-18] 
  # [discarded value]: $76.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] $76.2:[rbp-18] 
  # [discarded value]: $76.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] $76.1:[rbp-18] 
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] $68.3:[rbp-17] 
  # [discarded value]: $68.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] $68.2:[rbp-17] 
  # [discarded value]: $68.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] $68.1:[rbp-17] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] $60.3:[rbp-16] 
  # [discarded value]: $60.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] $60.2:[rbp-16] 
  # [discarded value]: $60.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] $60.1:[rbp-16] 
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] $52.3:[rbp-15] 
  # [discarded value]: $52.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] $52.2:[rbp-15] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] $52.1:[rbp-15] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] $44.3:[rbp-14] 
  # [discarded value]: $44.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] $44.2:[rbp-14] 
  # [discarded value]: $44.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] $44.1:[rbp-14] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] $36.3:[rbp-13] 
  # [discarded value]: $36.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] $36.2:[rbp-13] 
  # [discarded value]: $36.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] $36.1:[rbp-13] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] $28.3:[rbp-12] 
  # [discarded value]: $28.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] $28.2:[rbp-12] 
  # [discarded value]: $28.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] $28.1:[rbp-12] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] $20.3:[rbp-11] 
  # [discarded value]: $20.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] $20.2:[rbp-11] 
  # [discarded value]: $20.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] $20.1:[rbp-11] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] $12.3:[rbp-10] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] $12.2:[rbp-10] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] $4.3:[rbp-1] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] $4.2:[rbp-1] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $4.1:[rbp-1] 
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__find_unused_register_38__end:
  mov rsp, rbp
  pop rbp
  ret

find_unused_register_38__stack_frame_size: .word 32

  .loc 2 1358 8
  .text
create_mc_value_39:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_mc_value_39__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_mc_value_39__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_instruction.1: @IR_Instruction = load_variable(ir_instruction)
  # [live values]: self.1:rdi ir_instruction.1:rsi 
  .loc 2 1360 22
  # $1.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rdi+153]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax 
  .loc 2 1361 29
  # $2.1: @IR_Variable_Value = load_struct_member(ir_instruction.1, result_value)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi ir_instruction.1:rsi $1.1:rax $2.1:rbx 
  .loc 2 1359 20
  # mc_value.1: @MC_Value = new MC_Value(prev_value = $1.1, ir_variable_value = $2.1, ir_instruction = ir_instruction.1, next_value = null, register = null, address = null)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 48
  call malloc
  #     .prev_value = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .next_value = null
  mov QWORD PTR [rax+8], 0
  #     .ir_instruction = ir_instruction.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .ir_variable_value = $2.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  #     .register = null
  mov QWORD PTR [rax+32], 0
  #     .address = null
  mov QWORD PTR [rax+40], 0
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: ir_instruction.1
  # [live values]: self.1:[rbp-32] mc_value.1:rax 
  .loc 2 1364 9
  # $4.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rbp-32]
  mov r15, [rbx+145]
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $4.1:r15 
  .loc 2 1364 9
  # $5.1: bool = $4.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-32] mc_value.1:rax $5.1:r14 
  # jump($5.1, .LABEL__create_mc_value_39__2, .LABEL__create_mc_value_39__4)
  test r14b, r14b
  mov [rbp-40], rax
  mov [rbp-41], r14b
  jz .LABEL__create_mc_value_39__4
.LABEL__create_mc_value_39__2:
  .loc 2 1365 9
  # store_struct_member(self.1, first_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+145], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_39__3)
.LABEL__create_mc_value_39__3:
  .loc 2 1369 5
  # store_struct_member(self.1, last_value, mc_value.1)
  mov rax, [rbp-32]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+153], rbx
  # [live values]: self.1:rax:[rbp-32] mc_value.1:rbx:[rbp-40] $5.1:[rbp-41] 
  # return()
  jmp .LABEL__create_mc_value_39__end
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
.LABEL__create_mc_value_39__4:
  .loc 2 1367 9
  # $6.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rax, [rbp-32]
  mov rbx, [rax+153]
  # [live values]: self.1:rax:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] $6.1:rbx 
  .loc 2 1367 9
  # store_struct_member($6.1, next_value, mc_value.1)
  mov r15, [rbp-40]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-32] mc_value.1:r15:[rbp-40] $5.1:[rbp-41] 
  # jump(.LABEL__create_mc_value_39__3)
  jmp .LABEL__create_mc_value_39__3
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] $5.1:[rbp-41] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] mc_value.1:[rbp-40] 
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_mc_value_39__end:
  mov rsp, rbp
  pop rbp
  ret

create_mc_value_39__stack_frame_size: .word 48

  .loc 2 1372 8
  .text
map_variable_value_40:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_40__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_40__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx 
  .loc 2 1373 9
  # $1.1: bool = address.1 == null
  cmp rdx, 0
  sete al
  # [live values]: self.1:rdi ir_variable_value.1:rsi address.1:rdx $1.1:rax 
  # jump($1.1, .LABEL__map_variable_value_40__2, .LABEL__map_variable_value_40__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__map_variable_value_40__3
.LABEL__map_variable_value_40__2:
  .loc 2 1374 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__map_variable_value_40__3:
  .loc 2 1376 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-25]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__map_variable_value_40__4)
  mov [rbp-33], rbx
.LABEL__map_variable_value_40__4:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.7)
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  .loc 2 1377 12
  # $3.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_40__5, .LABEL__map_variable_value_40__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_40__6
.LABEL__map_variable_value_40__5:
  .loc 2 1378 13
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $4.1:rbx 
  .loc 2 1378 13
  # $5.1: @IR_Variable = load_struct_member($4.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 
  .loc 2 1378 52
  # $6.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-17]
  mov r14, [rbx+48]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $5.1:r15 $6.1:r14 
  .loc 2 1378 13
  # $7.1: bool = $5.1 == $6.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:rbx:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:r13 
  # jump($7.1, .LABEL__map_variable_value_40__7, .LABEL__map_variable_value_40__8)
  test r13b, r13b
  mov [rbp-35], r13b
  jz .LABEL__map_variable_value_40__8
.LABEL__map_variable_value_40__7:
  .loc 2 1379 17
  # $8.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-33]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $8.1:rbx 
  .loc 2 1379 17
  # $9.1: bool = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:r15 
  # jump($9.1, .LABEL__map_variable_value_40__9, .LABEL__map_variable_value_40__10)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__map_variable_value_40__10
.LABEL__map_variable_value_40__9:
  .loc 2 1380 17
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-25]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
.LABEL__map_variable_value_40__10:
  .loc 2 1382 13
  # store_struct_member(mc_value.2, address, address.1)
  mov rax, [rbp-33]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:rbx:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:rax:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # jump(.LABEL__map_variable_value_40__8)
.LABEL__map_variable_value_40__8:
  .loc 2 1384 20
  # mc_value.7: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:rbx:[rbp-33] 
  # jump(.LABEL__map_variable_value_40__4)
  mov [rbp-33], rbx
  jmp .LABEL__map_variable_value_40__4
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] mc_value.7:[rbp-33] 
  # [discarded value]: mc_value.7
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__map_variable_value_40__6:
  # return()
  jmp .LABEL__map_variable_value_40__end
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] mc_value.2:[rbp-33] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] mc_value.1:[rbp-33] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-25] ir_variable_value.1:[rbp-17] address.1:[rbp-9] 
  # [discarded value]: address.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_40__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_40__stack_frame_size: .word 48

  .loc 2 1388 8
  .text
map_variable_value_41:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR map_variable_value_41__stack_frame_size[rip]
  sub rsp, rax
.LABEL__map_variable_value_41__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx 
  .loc 2 1389 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [live values]: self.1:rdi ir_variable_value.1:rsi register.1:rdx mc_value.1:rax 
  # jump(.LABEL__map_variable_value_41__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__map_variable_value_41__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.8)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1390 12
  # $2.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $2.1:rax 
  .loc 2 1390 12
  # $3.1: bool = $2.1
  mov [rbp-33], al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__map_variable_value_41__5, .LABEL__map_variable_value_41__6)
  test al, al
  mov [rbp-33], al
  jz .LABEL__map_variable_value_41__6
.LABEL__map_variable_value_41__5:
  .loc 2 1390 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $4.1:rbx 
  .loc 2 1390 32
  # $5.1: bool = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-24]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $5.1:r15 
  .loc 2 1390 12
  # $3.2: bool = $5.1
  mov [rbp-34], r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $3.2:r15:[rbp-33] 
  # jump(.LABEL__map_variable_value_41__6)
  mov [rbp-33], r15b
.LABEL__map_variable_value_41__6:
  .loc 2 1390 12
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($3.3, .LABEL__map_variable_value_41__3, .LABEL__map_variable_value_41__4)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__map_variable_value_41__4
.LABEL__map_variable_value_41__3:
  .loc 2 1391 13
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $6.1:rbx $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1391 13
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1391 52
  # $8.1: @IR_Variable = load_struct_member(ir_variable_value.1, variable)
  mov rbx, [rbp-24]
  mov r14, [rbx+48]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $7.1:r15 $8.1:r14 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1391 13
  # $9.1: bool = $7.1 == $8.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $9.1:r13 $3.2:[rbp-33] $3.3:[rbp-33] 
  .loc 2 1391 13
  # $10.1: bool = $9.1
  mov [rbp-34], r13b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:rbx:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:r13 $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($10.1, .LABEL__map_variable_value_41__7, .LABEL__map_variable_value_41__8)
  test r13b, r13b
  mov [rbp-34], r13b
  jz .LABEL__map_variable_value_41__8
.LABEL__map_variable_value_41__7:
  .loc 2 1391 82
  # $11.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $11.1:rbx 
  .loc 2 1391 82
  # $12.1: bool = $11.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $12.1:r15 
  .loc 2 1391 13
  # $10.2: bool = $12.1
  mov [rbp-35], r15b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:r15:[rbp-34] 
  # jump(.LABEL__map_variable_value_41__8)
  mov [rbp-34], r15b
.LABEL__map_variable_value_41__8:
  .loc 2 1391 13
  # $10.3: bool = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump($10.3, .LABEL__map_variable_value_41__9, .LABEL__map_variable_value_41__10)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__map_variable_value_41__10
.LABEL__map_variable_value_41__9:
  .loc 2 1392 35
  # $13.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] $13.1:rbx 
  .loc 2 1392 13
  # call(release_register_47, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # jump(.LABEL__map_variable_value_41__10)
.LABEL__map_variable_value_41__10:
  .loc 2 1394 20
  # mc_value.8: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:rbx:[rbp-8] 
  # jump(.LABEL__map_variable_value_41__2)
  mov [rbp-8], rbx
  jmp .LABEL__map_variable_value_41__2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] mc_value.8:[rbp-8] 
  # [discarded value]: mc_value.8
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] $10.3:[rbp-34] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $10.2:[rbp-34] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $10.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_41__4:
  .loc 2 1396 9
  # $15.1: bool = mc_value.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:rax $3.2:[rbp-33] $3.3:[rbp-33] 
  # jump($15.1, .LABEL__map_variable_value_41__11, .LABEL__map_variable_value_41__12)
  test al, al
  mov [rbp-34], al
  jz .LABEL__map_variable_value_41__12
.LABEL__map_variable_value_41__11:
  .loc 2 1397 9
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
.LABEL__map_variable_value_41__12:
  .loc 2 1399 9
  # $16.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rbp-16]
  mov rbx, [rax+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $16.1:rbx 
  .loc 2 1399 9
  # $17.1: bool = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rax:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:r15 
  # jump($17.1, .LABEL__map_variable_value_41__13, .LABEL__map_variable_value_41__14)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__map_variable_value_41__14
.LABEL__map_variable_value_41__13:
  .loc 2 1400 20
  # $18.1: @String = call(clone_391, "Register ")
  lea rdi, .LABEL__string_162[rip] # "Register "
  call clone_391
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax 
  .loc 2 1400 46
  # $19.1: @String = load_struct_member(register.1, name_q)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $18.1:rax $19.1:r15 
  .loc 2 1400 20
  # $20.1: @String = call(append_400, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $20.1:rax 
  .loc 2 1400 20
  # $21.1: @String = call(append_400, $20.1, " already mapped to variable: ")
  mov rdi, rax
  lea rsi, .LABEL__string_163[rip] # " already mapped to variable: "
  call append_400
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax 
  .loc 2 1400 110
  # $22.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $22.1:r15 
  .loc 2 1400 110
  # $23.1: @IR_Variable_Value = load_struct_member($22.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $23.1:r14 
  .loc 2 1400 110
  # $24.1: @IR_Variable = load_struct_member($23.1, variable)
  mov r15, [r14+48]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $24.1:r15 
  .loc 2 1400 110
  # $25.1: @String = load_struct_member($24.1, name)
  mov r14, [r15+16]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $21.1:rax $25.1:r14 
  .loc 2 1400 20
  # $26.1: @String = call(append_400, $21.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $26.1:rax 
  .loc 2 1400 20
  # $27.1: @String = call(append_398, $26.1, '.')
  mov rdi, rax
  mov sil, 46
  call append_398
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax 
  .loc 2 1400 177
  # $28.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-16]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $28.1:r15 
  .loc 2 1400 177
  # $29.1: @IR_Variable_Value = load_struct_member($28.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $29.1:r14 
  .loc 2 1400 177
  # $30.1: isize = load_struct_member($29.1, version)
  mov r15, [r14+56]
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $27.1:rax $30.1:r15 
  .loc 2 1400 20
  # $31.1: @String = call(append_399, $27.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call append_399
  # [discarded value]: $30.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] $31.1:rax 
  .loc 2 1400 9
  # call(abort_35, self.1, $31.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  call abort_35
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
.LABEL__map_variable_value_41__14:
  .loc 2 1402 5
  # store_struct_member(mc_value.2, register, register.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1403 5
  # store_struct_member(register.1, value, mc_value.2)
  mov QWORD PTR [rbx+41], rax
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:rbx:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  .loc 2 1404 5
  # return(mc_value.2)
  jmp .LABEL__map_variable_value_41__end
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $15.1:[rbp-34] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] $3.3:[rbp-33] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] $3.2:[rbp-33] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] ir_variable_value.1:[rbp-24] register.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: ir_variable_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__map_variable_value_41__end:
  mov rsp, rbp
  pop rbp
  ret

map_variable_value_41__stack_frame_size: .word 48

  .loc 2 1407 8
  .text
get_value_42:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_42__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_42__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_variable_value.1: @IR_Variable_Value = load_variable(ir_variable_value)
  # [live values]: self.1:rdi ir_variable_value.1:rsi 
  .loc 2 1408 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rdi+145]
  # [discarded value]: self.1
  # [live values]: ir_variable_value.1:rsi mc_value.1:rax 
  # jump(.LABEL__get_value_42__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_value_42__2:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] 
  .loc 2 1409 12
  # $2.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $2.1:rax 
  .loc 2 1409 12
  # $3.1: bool = $2.1
  mov [rbp-17], al
  # [discarded value]: $2.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_value_42__5, .LABEL__get_value_42__6)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_value_42__6
.LABEL__get_value_42__5:
  .loc 2 1409 32
  # $4.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $4.1:rbx 
  .loc 2 1409 32
  # $5.1: bool = $4.1 != ir_variable_value.1
  cmp rbx, QWORD PTR [rbp-16]
  setne r15b
  # [discarded value]: $4.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $5.1:r15 
  .loc 2 1409 12
  # $3.2: bool = $5.1
  mov [rbp-18], r15b
  # [discarded value]: $5.1
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:rax:[rbp-8] $3.1:[rbp-17] $3.2:r15:[rbp-17] 
  # jump(.LABEL__get_value_42__6)
  mov [rbp-17], r15b
.LABEL__get_value_42__6:
  .loc 2 1409 12
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__get_value_42__3, .LABEL__get_value_42__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__get_value_42__4
.LABEL__get_value_42__3:
  .loc 2 1410 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:rbx:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # jump(.LABEL__get_value_42__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_value_42__2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] mc_value.5:[rbp-8] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: mc_value.5
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
.LABEL__get_value_42__4:
  .loc 2 1412 5
  # return(mc_value.2)
  mov rax, [rbp-8]
  jmp .LABEL__get_value_42__end
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] mc_value.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: mc_value.2
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [live values]: ir_variable_value.1:[rbp-16] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: ir_variable_value.1
  # [live values]: 
.LABEL__get_value_42__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_42__stack_frame_size: .word 32

  .loc 2 1415 8
  .text
spill_local_variable_43:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_local_variable_43__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_local_variable_43__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1416 49
  # $1.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  .loc 2 1416 49
  # $2.1: @IR_Type = load_struct_member($1.1, type)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi mc_value.1:rsi $2.1:rbx 
  .loc 2 1416 30
  # variable_type_size.1: isize = call(get_type_size_56, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_type_size_56
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:rax 
  .loc 2 1417 9
  # $4.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:rax $4.1:r15 
  .loc 2 1417 9
  # $5.1: bool = $4.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:rax $5.1:r14 
  # jump($5.1, .LABEL__spill_local_variable_43__2, .LABEL__spill_local_variable_43__3)
  test r14b, r14b
  mov [rbp-24], rax
  mov [rbp-25], r14b
  jz .LABEL__spill_local_variable_43__3
.LABEL__spill_local_variable_43__2:
  .loc 2 1418 33
  # $6.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] mc_value.1:rax:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 2 1418 61
  # $7.1: @MC_Local_Variable_Address = call(create_local_variable_address_44, self.1, variable_type_size.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  mov [rbp-33], rbx
  call create_local_variable_address_44
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $6.1:[rbp-33] $7.1:rax 
  .loc 2 1418 9
  # call(map_variable_value_40, self.1, $6.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-33]
  mov rdx, rax
  call map_variable_value_40
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__spill_local_variable_43__3)
.LABEL__spill_local_variable_43__3:
  .loc 2 1420 9
  # $8.1: bool = variable_type_size.1 == 8
  cmp QWORD PTR [rbp-24], 8
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__spill_local_variable_43__4, .LABEL__spill_local_variable_43__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__spill_local_variable_43__6
.LABEL__spill_local_variable_43__4:
  .loc 2 1421 9
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $39.1:rbx 
  .loc 2 1421 9
  # $40.1: @FILE = call(write_383, $39.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $40.1:rax 
  .loc 2 1421 48
  # $41.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $40.1:rax $41.1:r15 
  .loc 2 1421 9
  # $42.1: @FILE = call(write_55, $40.1, $41.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $42.1:rax 
  .loc 2 1421 9
  # $43.1: @FILE = call(write_383, $42.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax 
  .loc 2 1421 84
  # $44.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax $44.1:r15 
  .loc 2 1421 84
  # $45.1: @String = load_struct_member($44.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $43.1:rax $45.1:r14 
  .loc 2 1421 9
  # $46.1: @FILE = call(write_383, $43.1, $45.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $45.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $46.1:rax 
  .loc 2 1421 9
  # $47.1: @FILE = call(end_line_386, $46.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $47.1
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # jump(.LABEL__spill_local_variable_43__5)
.LABEL__spill_local_variable_43__5:
  # return()
  jmp .LABEL__spill_local_variable_43__end
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
.LABEL__spill_local_variable_43__6:
  .loc 2 1422 16
  # $9.1: bool = variable_type_size.1 == 4
  cmp QWORD PTR [rbp-24], 4
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:rax 
  # jump($9.1, .LABEL__spill_local_variable_43__7, .LABEL__spill_local_variable_43__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__spill_local_variable_43__9
.LABEL__spill_local_variable_43__7:
  .loc 2 1423 9
  # $30.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $30.1:rbx 
  .loc 2 1423 9
  # $31.1: @FILE = call(write_383, $30.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $31.1:rax 
  .loc 2 1423 48
  # $32.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $31.1:rax $32.1:r15 
  .loc 2 1423 9
  # $33.1: @FILE = call(write_55, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $33.1:rax 
  .loc 2 1423 9
  # $34.1: @FILE = call(write_383, $33.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax 
  .loc 2 1423 84
  # $35.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax $35.1:r15 
  .loc 2 1423 84
  # $36.1: @String = load_struct_member($35.1, name_d)
  mov r14, [r15+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $34.1:rax $36.1:r14 
  .loc 2 1423 9
  # $37.1: @FILE = call(write_383, $34.1, $36.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $37.1:rax 
  .loc 2 1423 9
  # $38.1: @FILE = call(end_line_386, $37.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
.LABEL__spill_local_variable_43__9:
  .loc 2 1424 16
  # $10.1: bool = variable_type_size.1 == 2
  cmp QWORD PTR [rbp-24], 2
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:rax 
  # jump($10.1, .LABEL__spill_local_variable_43__10, .LABEL__spill_local_variable_43__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__spill_local_variable_43__12
.LABEL__spill_local_variable_43__10:
  .loc 2 1425 9
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $21.1:rbx 
  .loc 2 1425 9
  # $22.1: @FILE = call(write_383, $21.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $22.1:rax 
  .loc 2 1425 48
  # $23.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $22.1:rax $23.1:r15 
  .loc 2 1425 9
  # $24.1: @FILE = call(write_55, $22.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $24.1:rax 
  .loc 2 1425 9
  # $25.1: @FILE = call(write_383, $24.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax 
  .loc 2 1425 84
  # $26.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax $26.1:r15 
  .loc 2 1425 84
  # $27.1: @String = load_struct_member($26.1, name_w)
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $25.1:rax $27.1:r14 
  .loc 2 1425 9
  # $28.1: @FILE = call(write_383, $25.1, $27.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $27.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $28.1:rax 
  .loc 2 1425 9
  # $29.1: @FILE = call(end_line_386, $28.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
.LABEL__spill_local_variable_43__12:
  .loc 2 1426 16
  # $11.1: bool = variable_type_size.1 == 1
  cmp QWORD PTR [rbp-24], 1
  sete al
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__spill_local_variable_43__13, .LABEL__spill_local_variable_43__5)
  test al, al
  mov [rbp-29], al
  jz .LABEL__spill_local_variable_43__5
.LABEL__spill_local_variable_43__13:
  .loc 2 1427 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $12.1:rbx 
  .loc 2 1427 9
  # $13.1: @FILE = call(write_383, $12.1, "  mov ")
  mov rdi, rbx
  lea rsi, .LABEL__string_64[rip] # "  mov "
  call write_383
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $13.1:rax 
  .loc 2 1427 48
  # $14.1: @MC_Address = load_struct_member(mc_value.1, address)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $13.1:rax $14.1:r15 
  .loc 2 1427 9
  # $15.1: @FILE = call(write_55, $13.1, $14.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $15.1:rax 
  .loc 2 1427 9
  # $16.1: @FILE = call(write_383, $15.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax 
  .loc 2 1427 84
  # $17.1: @MC_Register = load_struct_member(mc_value.1, register)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax $17.1:r15 
  .loc 2 1427 84
  # $18.1: @String = load_struct_member($17.1, name_b)
  mov r14, [r15+32]
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] mc_value.1:rbx:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $16.1:rax $18.1:r14 
  .loc 2 1427 9
  # $19.1: @FILE = call(write_383, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] $19.1:rax 
  .loc 2 1427 9
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] 
  # jump(.LABEL__spill_local_variable_43__5)
  jmp .LABEL__spill_local_variable_43__5
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] $11.1:[rbp-29] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] $10.1:[rbp-28] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] mc_value.1:[rbp-8] variable_type_size.1:[rbp-24] 
  # [discarded value]: variable_type_size.1
  # [discarded value]: mc_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__spill_local_variable_43__end:
  mov rsp, rbp
  pop rbp
  ret

spill_local_variable_43__stack_frame_size: .word 48

  .loc 2 1431 8
  .text
create_local_variable_address_44:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_local_variable_address_44__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_local_variable_address_44__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_type_size.1: isize = load_variable(variable_type_size)
  # [live values]: self.1:rdi variable_type_size.1:rsi 
  .loc 2 1432 9
  # offset.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax 
  .loc 2 1433 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rbx, [rdi+145]
  # [live values]: self.1:rdi variable_type_size.1:rsi offset.1:rax mc_value.1:rbx 
  # jump(.LABEL__create_local_variable_address_44__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__create_local_variable_address_44__2:
  # offset.8: isize = phi(offset.1, offset.9)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.5)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1434 12
  # $2.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__create_local_variable_address_44__3, .LABEL__create_local_variable_address_44__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_local_variable_address_44__4
.LABEL__create_local_variable_address_44__3:
  .loc 2 1435 32
  # mc_value_address.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx 
  .loc 2 1436 13
  # $4.1: bool = mc_value_address.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx $4.1:r15 
  .loc 2 1436 13
  # $5.1: bool = $4.1
  mov [rbp-34], r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-33] mc_value_address.1:rbx $5.1:r15 
  # jump($5.1, .LABEL__create_local_variable_address_44__5, .LABEL__create_local_variable_address_44__6)
  test r15b, r15b
  mov [rbp-41], rbx
  mov [rbp-42], r15b
  jz .LABEL__create_local_variable_address_44__6
.LABEL__create_local_variable_address_44__5:
  .loc 2 1436 41
  # $5.2: bool = call(is_389, mc_value_address.1, MC_Local_Variable_Address)
  mov rdi, [rbp-41]
  mov rsi, MC_Local_Variable_Address[rip]
  call is_389
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:rax:[rbp-42] 
  # jump(.LABEL__create_local_variable_address_44__6)
  mov [rbp-42], al
.LABEL__create_local_variable_address_44__6:
  .loc 2 1436 13
  # $5.3: bool = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # jump($5.3, .LABEL__create_local_variable_address_44__7, .LABEL__create_local_variable_address_44__8)
  mov al, [rbp-42]
  test al, al
  jz .LABEL__create_local_variable_address_44__8
.LABEL__create_local_variable_address_44__7:
  .loc 2 1437 36
  # mc_value_address.1: @MC_Local_Variable_Address = mc_value_address.1
  mov rax, [rbp-41]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax 
  .loc 2 1438 26
  # $8.1: isize = load_struct_member(mc_value_address.1, offset)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $8.1:rbx 
  .loc 2 1438 17
  # $9.1: bool = offset.8 > $8.1
  cmp QWORD PTR [rbp-8], rbx
  setg r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax $9.1:r15 
  # jump($9.1, .LABEL__create_local_variable_address_44__9, .LABEL__create_local_variable_address_44__8)
  test r15b, r15b
  mov [rbp-50], rax
  mov [rbp-51], r15b
  jz .LABEL__create_local_variable_address_44__8
.LABEL__create_local_variable_address_44__9:
  .loc 2 1439 26
  # offset.3: isize = load_struct_member(mc_value_address.1, offset)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:rax:[rbp-50] $9.1:[rbp-51] offset.3:rbx:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_44__8)
  mov [rbp-8], rbx
.LABEL__create_local_variable_address_44__8:
  # offset.9: isize = phi(offset.3, offset.8)
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] offset.3:[rbp-8] 
  .loc 2 1442 20
  # mc_value.5: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:rbx:[rbp-16] offset.3:[rbp-8] 
  # jump(.LABEL__create_local_variable_address_44__2)
  mov [rbp-16], rbx
  jmp .LABEL__create_local_variable_address_44__2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.9:[rbp-8] mc_value.5:[rbp-16] offset.3:[rbp-8] 
  # [discarded value]: mc_value.5
  # [discarded value]: offset.9
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] offset.3:[rbp-8] 
  # [discarded value]: offset.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] mc_value_address.1:[rbp-50] 
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] $5.3:[rbp-42] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] $5.2:[rbp-42] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] mc_value_address.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [discarded value]: mc_value_address.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
.LABEL__create_local_variable_address_44__4:
  .loc 2 1444 14
  # $12.1: isize = offset.8 - variable_type_size.1
  mov rax, [rbp-8]
  sub rax, QWORD PTR [rbp-24]
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] $12.1:rax 
  .loc 2 1444 5
  # offset.5: isize = $12.1
  mov [rbp-41], rax
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] 
  .loc 2 1445 9
  # $13.1: isize =  - offset.5
  mov rbx, rax
  neg rbx
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx 
  .loc 2 1445 19
  # $14.1: isize = load_struct_member(self.1, stack_frame_size)
  mov r15, [rbp-32]
  mov r14, [r15+161]
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $13.1:rbx $14.1:r14 
  .loc 2 1445 9
  # $15.1: bool = $13.1 > $14.1
  cmp rbx, r14
  setg r13b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:rax:[rbp-8] $15.1:r13 
  # jump($15.1, .LABEL__create_local_variable_address_44__11, .LABEL__create_local_variable_address_44__12)
  test r13b, r13b
  mov [rbp-8], rax
  mov [rbp-34], r13b
  jz .LABEL__create_local_variable_address_44__12
.LABEL__create_local_variable_address_44__11:
  .loc 2 1446 33
  # $16.1: isize =  - offset.5
  mov rax, [rbp-8]
  neg rax
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $16.1:rax 
  .loc 2 1446 9
  # store_struct_member(self.1, stack_frame_size, $16.1)
  mov rbx, [rbp-32]
  mov QWORD PTR [rbx+161], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # jump(.LABEL__create_local_variable_address_44__12)
.LABEL__create_local_variable_address_44__12:
  .loc 2 1448 53
  # $17.1: @MC_Register = load_struct_member(self.1, register_rbp)
  mov rax, [rbp-32]
  mov rbx, [rax+73]
  # [live values]: self.1:rax:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] $17.1:rbx 
  .loc 2 1448 12
  # $18.1: @MC_Local_Variable_Address = new MC_Local_Variable_Address(object_type = MC_Local_Variable_Address, register = $17.1, offset = offset.5)
  mov [rbp-42], rbx
  mov rdi, 24
  call malloc
  #     .object_type = MC_Local_Variable_Address
  mov rbx, MC_Local_Variable_Address[rip]
  mov [rax], rbx
  #     .register = $17.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  #     .offset = offset.5
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:r15:[rbp-8] $15.1:[rbp-34] $18.1:rax 
  .loc 2 1448 5
  # return($18.1)
  mov [rbp-42], rax
  jmp .LABEL__create_local_variable_address_44__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] $15.1:[rbp-34] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] offset.5:[rbp-8] 
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] offset.8:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: offset.8
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-32] variable_type_size.1:[rbp-24] offset.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: offset.1
  # [discarded value]: variable_type_size.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_local_variable_address_44__end:
  mov rsp, rbp
  pop rbp
  ret

create_local_variable_address_44__stack_frame_size: .word 64

  .loc 2 1451 8
  .text
spill_global_variable_45:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR spill_global_variable_45__stack_frame_size[rip]
  sub rsp, rax
.LABEL__spill_global_variable_45__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # mc_value.1: @MC_Value = load_variable(mc_value)
  # [live values]: self.1:rdi mc_value.1:rsi 
  .loc 2 1452 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi mc_value.1:rsi $1.1:rax 
  .loc 2 1452 5
  # $2.1: @FILE = call(write_383, $1.1, "  # store global variable: ")
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_164[rip] # "  # store global variable: "
  call write_383
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $2.1:rax 
  .loc 2 1452 65
  # $3.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $3.1:r15 
  .loc 2 1452 65
  # $4.1: @IR_Variable = load_struct_member($3.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $4.1:r14 
  .loc 2 1452 65
  # $5.1: @String = load_struct_member($4.1, name)
  mov r15, [r14+16]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] mc_value.1:rbx:[rbp-16] $2.1:rax $5.1:r15 
  .loc 2 1452 5
  # $6.1: @FILE = call(write_383, $2.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $5.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] $6.1:rax 
  .loc 2 1452 5
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] mc_value.1:[rbp-16] 
  .loc 2 1453 31
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] mc_value.1:rax:[rbp-16] $8.1:rbx 
  .loc 2 1453 104
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov r15, [rax+24]
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-8] $8.1:rbx $9.1:r15 
  .loc 2 1453 104
  # $10.1: @IR_Variable = load_struct_member($9.1, variable)
  mov rax, [r15+48]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $8.1:rbx $10.1:rax 
  .loc 2 1453 59
  # $11.1: @MC_Global_Variable_Address = new MC_Global_Variable_Address(object_type = MC_Global_Variable_Address, ir_variable = $10.1)
  mov [rbp-16], rax
  mov [rbp-24], rbx
  mov rdi, 16
  call malloc
  #     .object_type = MC_Global_Variable_Address
  mov rbx, MC_Global_Variable_Address[rip]
  mov [rax], rbx
  #     .ir_variable = $10.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $8.1:[rbp-24] $11.1:rax 
  .loc 2 1453 5
  # call(generate_store_value_31, self.1, $8.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  mov rdx, rax
  call generate_store_value_31
  # [discarded value]: $11.1
  # [discarded value]: $8.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__spill_global_variable_45__end
  # [live values]: 
.LABEL__spill_global_variable_45__end:
  mov rsp, rbp
  pop rbp
  ret

spill_global_variable_45__stack_frame_size: .word 32

  .loc 2 1456 8
  .text
release_all_registers_46:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_all_registers_46__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_all_registers_46__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1457 27
  # $1.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rdi+17]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1457 5
  # call(release_register_47, self.1, $1.1)
  mov rsi, rax
  mov [rbp-8], rdi
  call release_register_47
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1458 27
  # $2.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $2.1:rbx 
  .loc 2 1458 5
  # call(release_register_47, self.1, $2.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1459 27
  # $3.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1459 5
  # call(release_register_47, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1460 27
  # $4.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1460 5
  # call(release_register_47, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1461 27
  # $5.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1461 5
  # call(release_register_47, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1462 27
  # $6.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1462 5
  # call(release_register_47, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1463 27
  # $7.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1463 5
  # call(release_register_47, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1464 27
  # $8.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1464 5
  # call(release_register_47, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1465 27
  # $9.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1465 5
  # call(release_register_47, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1466 27
  # $10.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1466 5
  # call(release_register_47, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1467 27
  # $11.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1467 5
  # call(release_register_47, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1468 27
  # $12.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1468 5
  # call(release_register_47, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1469 27
  # $13.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1469 5
  # call(release_register_47, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1470 27
  # $14.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1470 5
  # call(release_register_47, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call release_register_47
  # [discarded value]: $14.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__release_all_registers_46__end
  # [live values]: 
.LABEL__release_all_registers_46__end:
  mov rsp, rbp
  pop rbp
  ret

release_all_registers_46__stack_frame_size: .word 16

  .loc 2 1473 8
  .text
release_register_47:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR release_register_47__stack_frame_size[rip]
  sub rsp, rax
.LABEL__release_register_47__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1474 20
  # mc_value.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax 
  .loc 2 1475 9
  # $2.1: bool = mc_value.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:rdi register.1:rsi mc_value.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__release_register_47__2, .LABEL__release_register_47__3)
  test bl, bl
  mov [rbp-8], rax
  mov [rbp-9], bl
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__release_register_47__3
.LABEL__release_register_47__2:
  .loc 2 1476 13
  # $3.1: @MC_Value = load_struct_member(register.1, loaded_value)
  mov rax, [rbp-17]
  mov rbx, [rax+49]
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 2 1476 13
  # $4.1: bool = $3.1 != mc_value.1
  cmp rbx, QWORD PTR [rbp-8]
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] register.1:rax:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  # jump($4.1, .LABEL__release_register_47__4, .LABEL__release_register_47__5)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__release_register_47__5
.LABEL__release_register_47__4:
  .loc 2 1477 33
  # $5.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $5.1:rbx 
  .loc 2 1477 33
  # $6.1: bool = call(is_used_49, $5.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $6.1:rax 
  .loc 2 1477 33
  # $7.1: bool = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] $7.1:rbx 
  .loc 2 1477 17
  # persist_value.1: bool = $7.1
  mov [rbp-27], bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rbx 
  .loc 2 1479 17
  # $8.1: bool = persist_value.1 == false
  cmp bl, 0
  sete al
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:rbx $8.1:rax 
  # jump($8.1, .LABEL__release_register_47__6, .LABEL__release_register_47__7)
  test al, al
  mov [rbp-27], al
  mov [rbp-28], bl
  jz .LABEL__release_register_47__7
.LABEL__release_register_47__6:
  .loc 2 1480 55
  # $9.1: @IR_Variable_Value = load_struct_member(mc_value.1, ir_variable_value)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] $9.1:rbx 
  .loc 2 1480 55
  # $10.1: @List = load_struct_member($9.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] $10.1:r15 
  .loc 2 1480 55
  # ir_value_user_instructions_item.1: @List_Item = load_struct_member($10.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:rbx 
  # jump(.LABEL__release_register_47__8)
  mov [rbp-36], rbx
.LABEL__release_register_47__8:
  # ir_value_user_instructions_item.2: @List_Item = phi(ir_value_user_instructions_item.1, ir_value_user_instructions_item.5)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] 
  .loc 2 1481 24
  # $12.1: bool = ir_value_user_instructions_item.2 != null
  cmp QWORD PTR [rbp-36], 0
  setne al
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:rax 
  # jump($12.1, .LABEL__release_register_47__9, .LABEL__release_register_47__7)
  test al, al
  mov [rbp-37], al
  jz .LABEL__release_register_47__7
.LABEL__release_register_47__9:
  .loc 2 1482 53
  # ir_value_user_instruction.1: @IR_Instruction = load_struct_member(ir_value_user_instructions_item.2, data)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx 
  .loc 2 1483 25
  # $15.1: bool = load_struct_member(ir_value_user_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $15.1:r15 
  .loc 2 1483 25
  # $16.1: bool = $15.1 == false
  cmp r15b, 0
  sete r14b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $16.1:r14 
  .loc 2 1483 25
  # $17.1: bool = $16.1
  mov [rbp-38], r14b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:rax:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:rbx $17.1:r14 
  # jump($17.1, .LABEL__release_register_47__12, .LABEL__release_register_47__11)
  test r14b, r14b
  mov [rbp-45], rbx
  mov [rbp-46], r14b
  jz .LABEL__release_register_47__11
.LABEL__release_register_47__12:
  .loc 2 1483 25
  # $17.3: bool = phi($17.1, $17.2)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
  # jump($17.3, .LABEL__release_register_47__13, .LABEL__release_register_47__14)
  mov al, [rbp-46]
  test al, al
  jz .LABEL__release_register_47__14
.LABEL__release_register_47__13:
  .loc 2 1484 25
  # persist_value.2: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:rax:[rbp-28] 
  # jump(.LABEL__release_register_47__7)
  mov [rbp-28], al
.LABEL__release_register_47__7:
  # persist_value.3: bool = phi(persist_value.1, persist_value.2)
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(persist_value.3, .LABEL__release_register_47__16, .LABEL__release_register_47__5)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__release_register_47__5
.LABEL__release_register_47__16:
  .loc 2 1492 17
  # call(spill_local_variable_43, self.1, mc_value.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call spill_local_variable_43
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(.LABEL__release_register_47__5)
.LABEL__release_register_47__5:
  .loc 2 1496 9
  # store_struct_member(mc_value.1, register, null)
  mov rax, [rbp-8]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  .loc 2 1497 9
  # store_struct_member(register.1, value, null)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+41], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  .loc 2 1498 9
  # store_struct_member(register.1, loaded_value, null)
  mov QWORD PTR [rbx+49], 0
  # [live values]: self.1:[rbp-25] register.1:rbx:[rbp-17] mc_value.1:rax:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # jump(.LABEL__release_register_47__3)
.LABEL__release_register_47__3:
  # return()
  jmp .LABEL__release_register_47__end
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] persist_value.3:[rbp-28] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [discarded value]: persist_value.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] persist_value.2:[rbp-28] 
  # [discarded value]: persist_value.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
.LABEL__release_register_47__14:
  .loc 2 1487 55
  # ir_value_user_instructions_item.5: @List_Item = load_struct_member(ir_value_user_instructions_item.2, next_item)
  mov rax, [rbp-36]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] ir_value_user_instructions_item.5:rbx:[rbp-36] 
  # jump(.LABEL__release_register_47__8)
  mov [rbp-36], rbx
  jmp .LABEL__release_register_47__8
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] ir_value_user_instructions_item.5:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.5
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.3:[rbp-46] 
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
.LABEL__release_register_47__11:
  .loc 2 1483 76
  # $17.2: bool = call(is_389, ir_value_user_instruction.1, IR_Phi_Instruction)
  mov rdi, [rbp-45]
  mov rsi, IR_Phi_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.2:rax:[rbp-46] 
  # jump(.LABEL__release_register_47__12)
  mov [rbp-46], al
  jmp .LABEL__release_register_47__12
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] $17.2:[rbp-46] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] ir_value_user_instruction.1:[rbp-45] $17.1:[rbp-46] 
  # [discarded value]: $17.1
  # [discarded value]: ir_value_user_instruction.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] ir_value_user_instructions_item.2:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.2
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] 
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] ir_value_user_instructions_item.1:[rbp-36] 
  # [discarded value]: ir_value_user_instructions_item.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] persist_value.1:[rbp-28] 
  # [discarded value]: persist_value.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-25] register.1:[rbp-17] mc_value.1:[rbp-8] 
  # [discarded value]: mc_value.1
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__release_register_47__end:
  mov rsp, rbp
  pop rbp
  ret

release_register_47__stack_frame_size: .word 48

  .loc 2 1502 8
  .text
discard_used_values_48:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR discard_used_values_48__stack_frame_size[rip]
  sub rsp, rax
.LABEL__discard_used_values_48__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1503 9
  # removed_values.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi removed_values.1:rax 
  .loc 2 1505 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, last_value)
  mov rbx, [rdi+153]
  # [live values]: self.1:rdi removed_values.1:rax mc_value.1:rbx 
  # jump(.LABEL__discard_used_values_48__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rdi
.LABEL__discard_used_values_48__2:
  # removed_values.5: isize = phi(removed_values.1, removed_values.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] 
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.20)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  .loc 2 1506 12
  # $2.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__discard_used_values_48__3, .LABEL__discard_used_values_48__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__discard_used_values_48__4
.LABEL__discard_used_values_48__3:
  .loc 2 1507 13
  # $3.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 2 1507 13
  # $5.1: bool = load_struct_member($3.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__discard_used_values_48__7, .LABEL__discard_used_values_48__8)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__discard_used_values_48__8
.LABEL__discard_used_values_48__7:
  .loc 2 1507 53
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1507 53
  # $7.1: @IR_Block = load_struct_member($6.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 2 1507 53
  # $5.2: bool = load_struct_member($7.1, is_being_generated)
  mov bl, [r15+48]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:rbx:[rbp-26] 
  # jump(.LABEL__discard_used_values_48__8)
  mov [rbp-26], bl
.LABEL__discard_used_values_48__8:
  .loc 2 1507 13
  # $9.1: bool = phi($5.1, $5.2)
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:rax 
  # jump($9.1, .LABEL__discard_used_values_48__5, .LABEL__discard_used_values_48__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__discard_used_values_48__6
.LABEL__discard_used_values_48__5:
  .loc 2 1507 112
  # $10.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $10.1:rbx $5.2:[rbp-26] $9.1:[rbp-27] 
  .loc 2 1507 112
  # $9.2: bool = call(is_used_49, $10.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:rax:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # jump(.LABEL__discard_used_values_48__6)
  mov [rbp-27], al
.LABEL__discard_used_values_48__6:
  .loc 2 1507 13
  # $9.3: bool = phi($9.1, $9.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # jump($9.3, .LABEL__discard_used_values_48__9, .LABEL__discard_used_values_48__10)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__9:
  .loc 2 1508 17
  # discard_value.1: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax 
  .loc 2 1509 17
  # value_is_phi_argument.1: bool = false
  mov bl, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx 
  .loc 2 1511 42
  # $12.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx $12.1:r14 
  .loc 2 1511 42
  # $13.1: @List = load_struct_member($12.1, user_instructions)
  mov r13, [r14+24]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx $13.1:r13 
  .loc 2 1511 42
  # user_instructions_item.1: @List_Item = load_struct_member($13.1, first_item)
  mov r14, [r13]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:rax value_is_phi_argument.1:rbx user_instructions_item.1:r14 
  # jump(.LABEL__discard_used_values_48__11)
  mov [rbp-28], al
  mov [rbp-29], bl
  mov [rbp-37], r14
.LABEL__discard_used_values_48__11:
  # value_is_phi_argument.5: bool = phi(value_is_phi_argument.1, value_is_phi_argument.7)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] 
  # user_instructions_item.7: @List_Item = phi(user_instructions_item.1, user_instructions_item.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] 
  # discard_value.2: bool = phi(discard_value.1, discard_value.6)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] 
  .loc 2 1512 20
  # $15.1: bool = discard_value.2
  mov al, [rbp-28]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:rax 
  # jump($15.1, .LABEL__discard_used_values_48__14, .LABEL__discard_used_values_48__15)
  test al, al
  mov [rbp-38], al
  jz .LABEL__discard_used_values_48__15
.LABEL__discard_used_values_48__14:
  .loc 2 1512 37
  # $16.1: bool = user_instructions_item.7 != null
  cmp QWORD PTR [rbp-37], 0
  setne al
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $16.1:rax 
  .loc 2 1512 20
  # $15.2: bool = $16.1
  mov [rbp-39], al
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:rax:[rbp-38] 
  # jump(.LABEL__discard_used_values_48__15)
  mov [rbp-38], al
.LABEL__discard_used_values_48__15:
  .loc 2 1512 20
  # $15.3: bool = phi($15.1, $15.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # jump($15.3, .LABEL__discard_used_values_48__12, .LABEL__discard_used_values_48__13)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__discard_used_values_48__13
.LABEL__discard_used_values_48__12:
  .loc 2 1513 40
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instructions_item.7, data)
  mov rax, [rbp-37]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:rax:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rbx $15.2:[rbp-38] $15.3:[rbp-38] 
  .loc 2 1514 21
  # $19.1: bool = call(is_389, user_instruction.1, IR_Phi_Instruction)
  mov rdi, rbx
  mov rsi, IR_Phi_Instruction[rip]
  mov [rbp-46], rbx
  call is_389
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:rax $15.2:[rbp-38] $15.3:[rbp-38] 
  # jump($19.1, .LABEL__discard_used_values_48__16, .LABEL__discard_used_values_48__17)
  test al, al
  mov [rbp-47], al
  jz .LABEL__discard_used_values_48__17
.LABEL__discard_used_values_48__16:
  .loc 2 1515 21
  # value_is_phi_argument.2: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:rax:[rbp-29] 
  # jump(.LABEL__discard_used_values_48__17)
  mov [rbp-29], al
.LABEL__discard_used_values_48__17:
  # value_is_phi_argument.7: bool = phi(value_is_phi_argument.2, value_is_phi_argument.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] 
  .loc 2 1517 21
  # $20.1: bool = load_struct_member(user_instruction.1, is_generated)
  mov rax, [rbp-46]
  mov bl, [rax+56]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $20.1:rbx 
  .loc 2 1517 21
  # $21.1: bool = $20.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:r15 
  # jump($21.1, .LABEL__discard_used_values_48__18, .LABEL__discard_used_values_48__20)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__discard_used_values_48__20
.LABEL__discard_used_values_48__18:
  .loc 2 1519 21
  # discard_value.4: bool = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:rax:[rbp-28] 
  # jump(.LABEL__discard_used_values_48__19)
  mov [rbp-28], al
.LABEL__discard_used_values_48__19:
  # discard_value.6: bool = phi(discard_value.4, discard_value.3, discard_value.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] 
  .loc 2 1524 42
  # user_instructions_item.5: @List_Item = load_struct_member(user_instructions_item.7, next_item)
  mov rax, [rbp-37]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] user_instructions_item.5:rbx:[rbp-37] 
  # jump(.LABEL__discard_used_values_48__11)
  mov [rbp-37], rbx
  jmp .LABEL__discard_used_values_48__11
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] discard_value.6:[rbp-28] user_instructions_item.5:[rbp-37] 
  # [discarded value]: user_instructions_item.5
  # [discarded value]: discard_value.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] discard_value.4:[rbp-28] 
  # [discarded value]: discard_value.4
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] 
.LABEL__discard_used_values_48__20:
  .loc 2 1520 28
  # $22.1: @IR_Block = load_struct_member(user_instruction.1, parent_block)
  mov rax, [rbp-46]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx 
  .loc 2 1520 61
  # $23.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx $23.1:r14 
  .loc 2 1520 61
  # $24.1: @IR_Block = load_struct_member($23.1, parent_block)
  mov r13, [r14+32]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $22.1:rbx $24.1:r13 
  .loc 2 1520 28
  # $25.1: bool = $22.1 != $24.1
  cmp rbx, r13
  setne r14b
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $25.1:r14 
  .loc 2 1520 28
  # $26.1: bool = $25.1
  mov [rbp-49], r14b
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:r15:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:rax:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:r14 
  # jump($26.1, .LABEL__discard_used_values_48__21, .LABEL__discard_used_values_48__22)
  test r14b, r14b
  mov [rbp-49], r14b
  jz .LABEL__discard_used_values_48__22
.LABEL__discard_used_values_48__21:
  .loc 2 1520 101
  # $27.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $27.1:rbx 
  .loc 2 1520 101
  # $28.1: @IR_Block = load_struct_member($27.1, parent_block)
  mov r15, [rbx+32]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $28.1:r15 
  .loc 2 1520 101
  # $29.1: bool = load_struct_member($28.1, is_generated)
  mov bl, [r15+49]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $29.1:rbx 
  .loc 2 1520 101
  # $30.1: bool = $29.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $30.1:r15 
  .loc 2 1520 28
  # $26.2: bool = $30.1
  mov [rbp-50], r15b
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:r15:[rbp-49] 
  # jump(.LABEL__discard_used_values_48__22)
  mov [rbp-49], r15b
.LABEL__discard_used_values_48__22:
  .loc 2 1520 28
  # $26.3: bool = phi($26.1, $26.2)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] 
  # jump($26.3, .LABEL__discard_used_values_48__23, .LABEL__discard_used_values_48__19)
  mov al, [rbp-49]
  test al, al
  jz .LABEL__discard_used_values_48__19
.LABEL__discard_used_values_48__23:
  .loc 2 1522 21
  # discard_value.3: bool = false
  mov al, 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] discard_value.3:rax:[rbp-28] 
  # jump(.LABEL__discard_used_values_48__19)
  mov [rbp-28], al
  jmp .LABEL__discard_used_values_48__19
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] discard_value.3:[rbp-28] 
  # [discarded value]: discard_value.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] $26.3:[rbp-49] 
  # [discarded value]: $26.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] $26.2:[rbp-49] 
  # [discarded value]: $26.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] $26.1:[rbp-49] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] $21.1:[rbp-48] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] value_is_phi_argument.7:[rbp-29] 
  # [discarded value]: value_is_phi_argument.7
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] value_is_phi_argument.2:[rbp-29] 
  # [discarded value]: value_is_phi_argument.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $19.1:[rbp-47] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] user_instruction.1:[rbp-46] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
.LABEL__discard_used_values_48__13:
  # jump(discard_value.2, .LABEL__discard_used_values_48__25, .LABEL__discard_used_values_48__10)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__25:
  .loc 2 1528 21
  # $32.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $32.1:rbx 
  .loc 2 1528 21
  # $33.1: bool = $32.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:r15 
  # jump($33.1, .LABEL__discard_used_values_48__27, .LABEL__discard_used_values_48__28)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__discard_used_values_48__28
.LABEL__discard_used_values_48__27:
  # jump(value_is_phi_argument.5, .LABEL__discard_used_values_48__29, .LABEL__discard_used_values_48__30)
  mov al, [rbp-29]
  test al, al
  jz .LABEL__discard_used_values_48__30
.LABEL__discard_used_values_48__29:
  .loc 2 1530 25
  # call(spill_local_variable_43, self.1, mc_value.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call spill_local_variable_43
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_48__30)
.LABEL__discard_used_values_48__30:
  .loc 2 1533 21
  # $34.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $34.1:rbx 
  .loc 2 1533 21
  # store_struct_member($34.1, value, null)
  mov QWORD PTR [rbx+41], 0
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  .loc 2 1534 21
  # store_struct_member(mc_value.2, register, null)
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # jump(.LABEL__discard_used_values_48__28)
.LABEL__discard_used_values_48__28:
  .loc 2 1538 21
  # $35.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $35.1:rbx 
  .loc 2 1538 21
  # $36.1: bool = $35.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:r15 
  # jump($36.1, .LABEL__discard_used_values_48__31, .LABEL__discard_used_values_48__33)
  test r15b, r15b
  mov [rbp-40], r15b
  jz .LABEL__discard_used_values_48__33
.LABEL__discard_used_values_48__31:
  .loc 2 1539 21
  # $38.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $38.1:rbx 
  .loc 2 1539 54
  # $39.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $38.1:rbx $39.1:r15 
  .loc 2 1539 21
  # store_struct_member($38.1, next_value, $39.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_48__32)
.LABEL__discard_used_values_48__32:
  .loc 2 1543 21
  # $40.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $40.1:rbx 
  .loc 2 1543 21
  # $41.1: bool = $40.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:r15 
  # jump($41.1, .LABEL__discard_used_values_48__34, .LABEL__discard_used_values_48__36)
  test r15b, r15b
  mov [rbp-41], r15b
  jz .LABEL__discard_used_values_48__36
.LABEL__discard_used_values_48__34:
  .loc 2 1544 21
  # $43.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $43.1:rbx 
  .loc 2 1544 54
  # $44.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov r15, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $43.1:rbx $44.1:r15 
  .loc 2 1544 21
  # store_struct_member($43.1, prev_value, $44.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_48__35)
.LABEL__discard_used_values_48__35:
  .loc 2 1548 34
  # $45.1: isize = removed_values.5 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $45.1:rax 
  .loc 2 1548 17
  # removed_values.3: isize = $45.1
  mov [rbp-49], rax
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:rax:[rbp-8] 
  .loc 2 1550 21
  # $46.1: bool = load_struct_member(self.1, output_debug_comments)
  mov rbx, [rbp-24]
  mov r15b, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:rax:[rbp-8] $46.1:r15 
  # jump($46.1, .LABEL__discard_used_values_48__37, .LABEL__discard_used_values_48__10)
  test r15b, r15b
  mov [rbp-8], rax
  mov [rbp-42], r15b
  jz .LABEL__discard_used_values_48__10
.LABEL__discard_used_values_48__37:
  .loc 2 1551 21
  # $47.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $47.1:rbx 
  .loc 2 1551 21
  # $48.1: @FILE = call(write_383, $47.1, "  # [discarded value]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_165[rip] # "  # [discarded value]: "
  call write_383
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax 
  .loc 2 1551 77
  # $49.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $49.1:r15 
  .loc 2 1551 77
  # $50.1: @IR_Variable = load_struct_member($49.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $50.1:r14 
  .loc 2 1551 77
  # $51.1: @String = load_struct_member($50.1, name)
  mov r15, [r14+16]
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $48.1:rax $51.1:r15 
  .loc 2 1551 21
  # $52.1: @FILE = call(write_383, $48.1, $51.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $51.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $52.1:rax 
  .loc 2 1551 21
  # $53.1: @FILE = call(write_385, $52.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax 
  .loc 2 1551 136
  # $54.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax $54.1:r15 
  .loc 2 1551 136
  # $55.1: isize = load_struct_member($54.1, version)
  mov r14, [r15+56]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $53.1:rax $55.1:r14 
  .loc 2 1551 21
  # $56.1: @FILE = call(write_382, $53.1, $55.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $55.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] $56.1:rax 
  .loc 2 1551 21
  # $57.1: @FILE = call(end_line_386, $56.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $57.1
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # jump(.LABEL__discard_used_values_48__10)
.LABEL__discard_used_values_48__10:
  # removed_values.6: isize = phi(removed_values.3, removed_values.5)
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  .loc 2 1556 20
  # mc_value.20: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] mc_value.20:rbx:[rbp-16] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # jump(.LABEL__discard_used_values_48__2)
  mov [rbp-16], rbx
  jmp .LABEL__discard_used_values_48__2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] removed_values.6:[rbp-8] mc_value.20:[rbp-16] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [discarded value]: mc_value.20
  # [discarded value]: removed_values.6
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] $46.1:[rbp-42] 
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] removed_values.3:[rbp-8] 
  # [discarded value]: removed_values.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
.LABEL__discard_used_values_48__36:
  .loc 2 1546 39
  # $42.1: @MC_Value = load_struct_member(mc_value.2, prev_value)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] $42.1:rbx 
  .loc 2 1546 21
  # store_struct_member(self.1, last_value, $42.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+153], rbx
  # [discarded value]: $42.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # jump(.LABEL__discard_used_values_48__35)
  jmp .LABEL__discard_used_values_48__35
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $41.1:[rbp-41] 
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
.LABEL__discard_used_values_48__33:
  .loc 2 1541 40
  # $37.1: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] $37.1:rbx 
  .loc 2 1541 21
  # store_struct_member(self.1, first_value, $37.1)
  mov r15, [rbp-24]
  mov QWORD PTR [r15+145], rbx
  # [discarded value]: $37.1
  # [live values]: self.1:r15:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:rax:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # jump(.LABEL__discard_used_values_48__32)
  jmp .LABEL__discard_used_values_48__32
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] $36.1:[rbp-40] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] $33.1:[rbp-39] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] $15.3:[rbp-38] 
  # [discarded value]: $15.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] $15.2:[rbp-38] 
  # [discarded value]: $15.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] value_is_phi_argument.5:[rbp-29] user_instructions_item.7:[rbp-37] discard_value.2:[rbp-28] $15.1:[rbp-38] 
  # [discarded value]: $15.1
  # [discarded value]: discard_value.2
  # [discarded value]: user_instructions_item.7
  # [discarded value]: value_is_phi_argument.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] discard_value.1:[rbp-28] value_is_phi_argument.1:[rbp-29] user_instructions_item.1:[rbp-37] 
  # [discarded value]: user_instructions_item.1
  # [discarded value]: value_is_phi_argument.1
  # [discarded value]: discard_value.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $9.3:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.3
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $9.2:[rbp-27] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] $9.1:[rbp-27] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $5.2:[rbp-26] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__discard_used_values_48__4:
  .loc 2 1559 5
  # return(removed_values.5)
  mov rax, [rbp-8]
  jmp .LABEL__discard_used_values_48__end
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] removed_values.5:[rbp-8] mc_value.2:[rbp-16] 
  # [discarded value]: mc_value.2
  # [discarded value]: removed_values.5
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] removed_values.1:[rbp-8] mc_value.1:[rbp-16] 
  # [discarded value]: mc_value.1
  # [discarded value]: removed_values.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__discard_used_values_48__end:
  mov rsp, rbp
  pop rbp
  ret

discard_used_values_48__stack_frame_size: .word 64

  .loc 2 1562 8
  .text
is_used_49:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_used_49__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_used_49__1:
  # self.1: @IR_Value = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1563 34
  # $1.1: @List = load_struct_member(self.1, user_instructions)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1563 34
  # user_instructions_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi user_instructions_item.1:rbx 
  # jump(.LABEL__is_used_49__2)
  mov [rbp-8], rbx
  mov [rbp-16], rdi
.LABEL__is_used_49__2:
  # user_instructions_item.2: @List_Item = phi(user_instructions_item.1, user_instructions_item.5)
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] 
  .loc 2 1564 12
  # $3.1: bool = user_instructions_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__is_used_49__3, .LABEL__is_used_49__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__is_used_49__4
.LABEL__is_used_49__3:
  .loc 2 1565 32
  # user_instruction.1: @IR_Instruction = load_struct_member(user_instructions_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] user_instruction.1:rbx 
  .loc 2 1566 13
  # $6.1: bool = load_struct_member(user_instruction.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: user_instruction.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] $6.1:r15 
  .loc 2 1566 13
  # $7.1: bool = $6.1 == false
  cmp r15b, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:rax:[rbp-8] $3.1:[rbp-17] $7.1:rbx 
  # jump($7.1, .LABEL__is_used_49__5, .LABEL__is_used_49__6)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__is_used_49__6
.LABEL__is_used_49__5:
  .loc 2 1567 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__is_used_49__6:
  .loc 2 1569 34
  # user_instructions_item.5: @List_Item = load_struct_member(user_instructions_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] user_instructions_item.5:rbx:[rbp-8] 
  # jump(.LABEL__is_used_49__2)
  mov [rbp-8], rbx
  jmp .LABEL__is_used_49__2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] user_instructions_item.5:[rbp-8] 
  # [discarded value]: user_instructions_item.5
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__is_used_49__4:
  .loc 2 1571 22
  # $9.1: @List = load_struct_member(self.1, links)
  mov rax, [rbp-16]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] $9.1:rbx 
  .loc 2 1571 22
  # links_item.1: @List_Item = load_struct_member($9.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:r15 
  # jump(.LABEL__is_used_49__8)
  mov [rbp-25], r15
.LABEL__is_used_49__8:
  # links_item.2: @List_Item = phi(links_item.1, links_item.5)
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] 
  .loc 2 1572 12
  # $11.1: bool = links_item.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__is_used_49__9, .LABEL__is_used_49__10)
  test al, al
  mov [rbp-26], al
  jz .LABEL__is_used_49__10
.LABEL__is_used_49__9:
  .loc 2 1573 20
  # link.1: @IR_Link = load_struct_member(links_item.2, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:rax:[rbp-25] $11.1:[rbp-26] link.1:rbx 
  .loc 2 1574 13
  # $14.1: bool = call(is_389, link.1, IR_Required_By_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Required_By_Value_Link[rip]
  mov [rbp-34], rbx
  call is_389
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:rax 
  # jump($14.1, .LABEL__is_used_49__11, .LABEL__is_used_49__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__is_used_49__12
.LABEL__is_used_49__11:
  .loc 2 1575 24
  # link.1: @IR_Required_By_Value_Link = link.1
  mov rax, [rbp-34]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] link.1:rax 
  .loc 2 1576 17
  # $16.1: @IR_Value = load_struct_member(link.1, value)
  mov rbx, [rax+16]
  # [discarded value]: link.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $16.1:rbx 
  .loc 2 1576 17
  # $17.1: bool = call(is_used_49, $16.1)
  mov rdi, rbx
  call is_used_49
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $17.1:rax 
  .loc 2 1576 17
  # $18.1: bool = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:rbx 
  # jump($18.1, .LABEL__is_used_49__13, .LABEL__is_used_49__12)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__is_used_49__12
.LABEL__is_used_49__13:
  .loc 2 1577 17
  # return(false)
  mov al, 0
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] 
.LABEL__is_used_49__12:
  .loc 2 1580 22
  # links_item.5: @List_Item = load_struct_member(links_item.2, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] links_item.5:rbx:[rbp-25] 
  # jump(.LABEL__is_used_49__8)
  mov [rbp-25], rbx
  jmp .LABEL__is_used_49__8
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] links_item.5:[rbp-25] 
  # [discarded value]: links_item.5
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] $18.1:[rbp-36] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] $14.1:[rbp-35] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] link.1:[rbp-34] 
  # [discarded value]: link.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] 
.LABEL__is_used_49__10:
  .loc 2 1582 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_used_49__end
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] links_item.2:[rbp-25] 
  # [discarded value]: links_item.2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] links_item.1:[rbp-25] 
  # [discarded value]: links_item.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] user_instructions_item.2:[rbp-8] 
  # [discarded value]: user_instructions_item.2
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] user_instructions_item.1:[rbp-8] 
  # [discarded value]: user_instructions_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_used_49__end:
  mov rsp, rbp
  pop rbp
  ret

is_used_49__stack_frame_size: .word 48

  .loc 2 1585 8
  .text
output_live_values_50:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_50__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_50__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1586 29
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1586 5
  # call(output_live_values_51, self.1, $1.1)
  mov rsi, rax
  call output_live_values_51
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__output_live_values_50__end
  # [live values]: 
.LABEL__output_live_values_50__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_50__stack_frame_size: .word 0

  .loc 2 1589 8
  .text
output_live_values_51:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_live_values_51__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_live_values_51__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # output_file.1: @FILE = load_variable(output_file)
  # [live values]: self.1:rdi output_file.1:rsi 
  .loc 2 1590 9
  # $1.1: bool = load_struct_member(self.1, output_debug_comments)
  mov al, [rdi+16]
  # [live values]: self.1:rdi output_file.1:rsi $1.1:rax 
  .loc 2 1590 9
  # $2.1: bool = $1.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi output_file.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_live_values_51__2, .LABEL__output_live_values_51__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_live_values_51__3
.LABEL__output_live_values_51__2:
  .loc 2 1591 9
  # return()
  jmp .LABEL__output_live_values_51__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__output_live_values_51__3:
  .loc 2 1593 5
  # $3.1: @FILE = call(write_383, output_file.1, "  # [live values]: ")
  mov rdi, [rbp-9]
  lea rsi, .LABEL__string_166[rip] # "  # [live values]: "
  call write_383
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  .loc 2 1594 20
  # mc_value.1: @MC_Value = load_struct_member(self.1, first_value)
  mov rax, [rbp-17]
  mov rbx, [rax+145]
  # [live values]: self.1:rax:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:rbx 
  # jump(.LABEL__output_live_values_51__5)
  mov [rbp-25], rbx
.LABEL__output_live_values_51__5:
  # mc_value.2: @MC_Value = phi(mc_value.1, mc_value.9)
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  .loc 2 1595 12
  # $5.1: bool = mc_value.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__output_live_values_51__6, .LABEL__output_live_values_51__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__output_live_values_51__7
.LABEL__output_live_values_51__6:
  .loc 2 1596 13
  # $6.1: @IR_Instruction = load_struct_member(mc_value.2, ir_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 2 1596 13
  # $7.1: bool = load_struct_member($6.1, is_generated)
  mov r15b, [rbx+56]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  # jump($7.1, .LABEL__output_live_values_51__8, .LABEL__output_live_values_51__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__output_live_values_51__9
.LABEL__output_live_values_51__8:
  .loc 2 1597 31
  # $8.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rbx 
  .loc 2 1597 31
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:r15 
  .loc 2 1597 31
  # $10.1: @String = load_struct_member($9.1, name)
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $10.1:rbx 
  .loc 2 1597 13
  # $11.1: @FILE = call(write_383, output_file.1, $10.1)
  mov rdi, [rbp-9]
  mov rsi, rbx
  call write_383
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $11.1:rax 
  .loc 2 1597 13
  # $12.1: @FILE = call(write_385, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax 
  .loc 2 1597 90
  # $13.1: @IR_Variable_Value = load_struct_member(mc_value.2, ir_variable_value)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $13.1:r15 
  .loc 2 1597 90
  # $14.1: isize = load_struct_member($13.1, version)
  mov r14, [r15+56]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $12.1:rax $14.1:r14 
  .loc 2 1597 13
  # $15.1: @FILE = call(write_382, $12.1, $14.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  .loc 2 1598 17
  # $16.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $16.1:rbx 
  .loc 2 1598 17
  # $17.1: bool = $16.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:r15 
  # jump($17.1, .LABEL__output_live_values_51__10, .LABEL__output_live_values_51__11)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__output_live_values_51__11
.LABEL__output_live_values_51__10:
  .loc 2 1599 17
  # $18.1: @FILE = call(write_385, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_385
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax 
  .loc 2 1599 46
  # $19.1: @MC_Register = load_struct_member(mc_value.2, register)
  mov rbx, [rbp-25]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $19.1:r15 
  .loc 2 1599 46
  # $20.1: @String = load_struct_member($19.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $18.1:rax $20.1:r14 
  .loc 2 1599 17
  # $21.1: @FILE = call(write_383, $18.1, $20.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # jump(.LABEL__output_live_values_51__11)
.LABEL__output_live_values_51__11:
  .loc 2 1601 17
  # $22.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $22.1:rbx 
  .loc 2 1601 17
  # $23.1: bool = $22.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rax:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:r15 
  # jump($23.1, .LABEL__output_live_values_51__12, .LABEL__output_live_values_51__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__output_live_values_51__13
.LABEL__output_live_values_51__12:
  .loc 2 1602 17
  # $24.1: @FILE = call(write_385, output_file.1, ':')
  mov rdi, [rbp-9]
  mov sil, 58
  call write_385
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax 
  .loc 2 1602 46
  # $25.1: @MC_Address = load_struct_member(mc_value.2, address)
  mov rbx, [rbp-25]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:rbx:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] $24.1:rax $25.1:r15 
  .loc 2 1602 17
  # $26.1: @FILE = call(write_55, $24.1, $25.1)
  mov rdi, rax
  mov rsi, r15
  call write_55
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__13)
.LABEL__output_live_values_51__13:
  .loc 2 1604 13
  # $27.1: @FILE = call(write_385, output_file.1, ' ')
  mov rdi, [rbp-9]
  mov sil, 32
  call write_385
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__9)
.LABEL__output_live_values_51__9:
  .loc 2 1606 20
  # mc_value.9: @MC_Value = load_struct_member(mc_value.2, next_value)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:rbx:[rbp-25] $23.1:[rbp-29] 
  # jump(.LABEL__output_live_values_51__5)
  mov [rbp-25], rbx
  jmp .LABEL__output_live_values_51__5
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] mc_value.9:[rbp-25] $23.1:[rbp-29] 
  # [discarded value]: mc_value.9
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $17.1:[rbp-28] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__output_live_values_51__7:
  .loc 2 1608 5
  # $29.1: @FILE = call(end_line_386, output_file.1)
  mov rdi, [rbp-9]
  call end_line_386
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # return()
  jmp .LABEL__output_live_values_51__end
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] mc_value.2:[rbp-25] 
  # [discarded value]: mc_value.2
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] mc_value.1:[rbp-25] 
  # [discarded value]: mc_value.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] output_file.1:[rbp-9] 
  # [discarded value]: output_file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_live_values_51__end:
  mov rsp, rbp
  pop rbp
  ret

output_live_values_51__stack_frame_size: .word 32

  .loc 2 1611 8
  .text
output_used_registers_52:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_registers_52__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_registers_52__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(true, .LABEL__output_used_registers_52__2, .LABEL__output_used_registers_52__3)
  mov al, 1
  test al, al
  mov [rbp-8], rdi
  jz .LABEL__output_used_registers_52__3
.LABEL__output_used_registers_52__2:
  .loc 2 1613 9
  # return()
  jmp .LABEL__output_used_registers_52__end
  # [live values]: self.1:[rbp-8] 
.LABEL__output_used_registers_52__3:
  .loc 2 1615 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $1.1:rbx 
  .loc 2 1615 5
  # $2.1: @FILE = call(write_383, $1.1, "  # [used registers]: ")
  mov rdi, rbx
  lea rsi, .LABEL__string_167[rip] # "  # [used registers]: "
  call write_383
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1616 31
  # $3.1: @MC_Register = load_struct_member(self.1, register_rax)
  mov rax, [rbp-8]
  mov rbx, [rax+17]
  # [live values]: self.1:rax:[rbp-8] $3.1:rbx 
  .loc 2 1616 5
  # call(output_used_register_53, self.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1617 31
  # $4.1: @MC_Register = load_struct_member(self.1, register_rcx)
  mov rax, [rbp-8]
  mov rbx, [rax+25]
  # [live values]: self.1:rax:[rbp-8] $4.1:rbx 
  .loc 2 1617 5
  # call(output_used_register_53, self.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1618 31
  # $5.1: @MC_Register = load_struct_member(self.1, register_rdx)
  mov rax, [rbp-8]
  mov rbx, [rax+33]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1618 5
  # call(output_used_register_53, self.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1619 31
  # $6.1: @MC_Register = load_struct_member(self.1, register_rbx)
  mov rax, [rbp-8]
  mov rbx, [rax+41]
  # [live values]: self.1:rax:[rbp-8] $6.1:rbx 
  .loc 2 1619 5
  # call(output_used_register_53, self.1, $6.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1620 31
  # $7.1: @MC_Register = load_struct_member(self.1, register_rsi)
  mov rax, [rbp-8]
  mov rbx, [rax+49]
  # [live values]: self.1:rax:[rbp-8] $7.1:rbx 
  .loc 2 1620 5
  # call(output_used_register_53, self.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1621 31
  # $8.1: @MC_Register = load_struct_member(self.1, register_rdi)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: self.1:rax:[rbp-8] $8.1:rbx 
  .loc 2 1621 5
  # call(output_used_register_53, self.1, $8.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1622 31
  # $9.1: @MC_Register = load_struct_member(self.1, register_r8)
  mov rax, [rbp-8]
  mov rbx, [rax+81]
  # [live values]: self.1:rax:[rbp-8] $9.1:rbx 
  .loc 2 1622 5
  # call(output_used_register_53, self.1, $9.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1623 31
  # $10.1: @MC_Register = load_struct_member(self.1, register_r9)
  mov rax, [rbp-8]
  mov rbx, [rax+89]
  # [live values]: self.1:rax:[rbp-8] $10.1:rbx 
  .loc 2 1623 5
  # call(output_used_register_53, self.1, $10.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1624 31
  # $11.1: @MC_Register = load_struct_member(self.1, register_r10)
  mov rax, [rbp-8]
  mov rbx, [rax+97]
  # [live values]: self.1:rax:[rbp-8] $11.1:rbx 
  .loc 2 1624 5
  # call(output_used_register_53, self.1, $11.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1625 31
  # $12.1: @MC_Register = load_struct_member(self.1, register_r11)
  mov rax, [rbp-8]
  mov rbx, [rax+105]
  # [live values]: self.1:rax:[rbp-8] $12.1:rbx 
  .loc 2 1625 5
  # call(output_used_register_53, self.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1626 31
  # $13.1: @MC_Register = load_struct_member(self.1, register_r12)
  mov rax, [rbp-8]
  mov rbx, [rax+113]
  # [live values]: self.1:rax:[rbp-8] $13.1:rbx 
  .loc 2 1626 5
  # call(output_used_register_53, self.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1627 31
  # $14.1: @MC_Register = load_struct_member(self.1, register_r13)
  mov rax, [rbp-8]
  mov rbx, [rax+121]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 2 1627 5
  # call(output_used_register_53, self.1, $14.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1628 31
  # $15.1: @MC_Register = load_struct_member(self.1, register_r14)
  mov rax, [rbp-8]
  mov rbx, [rax+129]
  # [live values]: self.1:rax:[rbp-8] $15.1:rbx 
  .loc 2 1628 5
  # call(output_used_register_53, self.1, $15.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1629 31
  # $16.1: @MC_Register = load_struct_member(self.1, register_r15)
  mov rax, [rbp-8]
  mov rbx, [rax+137]
  # [live values]: self.1:rax:[rbp-8] $16.1:rbx 
  .loc 2 1629 5
  # call(output_used_register_53, self.1, $16.1)
  mov rdi, rax
  mov rsi, rbx
  call output_used_register_53
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1630 5
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] $17.1:rbx 
  .loc 2 1630 5
  # $18.1: @FILE = call(end_line_386, $17.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] 
  # return()
  jmp .LABEL__output_used_registers_52__end
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_registers_52__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_registers_52__stack_frame_size: .word 16

  .loc 2 1633 8
  .text
output_used_register_53:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR output_used_register_53__stack_frame_size[rip]
  sub rsp, rax
.LABEL__output_used_register_53__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # register.1: @MC_Register = load_variable(register)
  # [live values]: self.1:rdi register.1:rsi 
  .loc 2 1634 9
  # $1.1: @MC_Value = load_struct_member(register.1, value)
  mov rax, [rsi+41]
  # [live values]: self.1:rdi register.1:rsi $1.1:rax 
  .loc 2 1634 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi register.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__output_used_register_53__2, .LABEL__output_used_register_53__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__output_used_register_53__3
.LABEL__output_used_register_53__2:
  .loc 2 1635 9
  # $3.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 2 1635 32
  # $4.1: @String = load_struct_member(register.1, name_q)
  mov r15, [rbp-9]
  mov r14, [r15+8]
  # [live values]: self.1:rax:[rbp-17] register.1:r15:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r14 
  .loc 2 1635 9
  # $5.1: @FILE = call(write_383, $3.1, $4.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $5.1:rax 
  .loc 2 1635 9
  # $6.1: @FILE = call(write_385, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $6.1:rax 
  .loc 2 1635 66
  # $7.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 2 1635 66
  # $8.1: @IR_Variable_Value = load_struct_member($7.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $8.1:r14 
  .loc 2 1635 66
  # $9.1: @IR_Variable = load_struct_member($8.1, variable)
  mov r15, [r14+48]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $9.1:r15 
  .loc 2 1635 66
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $6.1:rax $10.1:r14 
  .loc 2 1635 9
  # $11.1: @FILE = call(write_383, $6.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $10.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 2 1635 9
  # $12.1: @FILE = call(write_385, $11.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $12.1:rax 
  .loc 2 1635 131
  # $13.1: @MC_Value = load_struct_member(register.1, value)
  mov rbx, [rbp-9]
  mov r15, [rbx+41]
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $13.1:r15 
  .loc 2 1635 131
  # $14.1: @IR_Variable_Value = load_struct_member($13.1, ir_variable_value)
  mov r14, [r15+24]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $14.1:r14 
  .loc 2 1635 131
  # $15.1: isize = load_struct_member($14.1, version)
  mov r15, [r14+56]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] register.1:rbx:[rbp-9] $2.1:[rbp-1] $12.1:rax $15.1:r15 
  .loc 2 1635 9
  # $16.1: @FILE = call(write_382, $12.1, $15.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $15.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 2 1635 9
  # $17.1: @FILE = call(write_385, $16.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__output_used_register_53__3)
.LABEL__output_used_register_53__3:
  # return()
  jmp .LABEL__output_used_register_53__end
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] register.1:[rbp-9] 
  # [discarded value]: register.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__output_used_register_53__end:
  mov rsp, rbp
  pop rbp
  ret

output_used_register_53__stack_frame_size: .word 32

  .loc 2 1659 8
  .text
init_54:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_54__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_54__1:
  # self.1: @MC_Register = load_variable(self)
  # [live values]: self.1:rdi 
  # name_q.1: @String = load_variable(name_q)
  # [live values]: self.1:rdi name_q.1:rsi 
  # name_d.1: @String = load_variable(name_d)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx 
  # name_w.1: @String = load_variable(name_w)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx 
  # name_b.1: @String = load_variable(name_b)
  # [live values]: self.1:rdi name_q.1:rsi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1660 5
  # store_struct_member(self.1, name_q, name_q.1)
  mov QWORD PTR [rdi+8], rsi
  # [discarded value]: name_q.1
  # [live values]: self.1:rdi name_d.1:rdx name_w.1:rcx name_b.1:r8 
  .loc 2 1661 5
  # store_struct_member(self.1, name_d, name_d.1)
  mov QWORD PTR [rdi+16], rdx
  # [discarded value]: name_d.1
  # [live values]: self.1:rdi name_w.1:rcx name_b.1:r8 
  .loc 2 1662 5
  # store_struct_member(self.1, name_w, name_w.1)
  mov QWORD PTR [rdi+24], rcx
  # [discarded value]: name_w.1
  # [live values]: self.1:rdi name_b.1:r8 
  .loc 2 1663 5
  # store_struct_member(self.1, name_b, name_b.1)
  mov QWORD PTR [rdi+32], r8
  # [discarded value]: name_b.1
  # [live values]: self.1:rdi 
  .loc 2 1664 5
  # store_struct_member(self.1, is_reserved, false)
  mov BYTE PTR [rdi+40], 0
  # [live values]: self.1:rdi 
  .loc 2 1665 5
  # store_struct_member(self.1, value, null)
  mov QWORD PTR [rdi+41], 0
  # [live values]: self.1:rdi 
  .loc 2 1666 5
  # store_struct_member(self.1, loaded_value, null)
  mov QWORD PTR [rdi+49], 0
  # [live values]: self.1:rdi 
  .loc 2 1667 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__init_54__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_54__end:
  mov rsp, rbp
  pop rbp
  ret

init_54__stack_frame_size: .word 16

  .loc 2 1738 8
  .text
write_55:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_55__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_55__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # address.1: @MC_Address = load_variable(address)
  # [live values]: file.1:rdi address.1:rsi 
  .loc 2 1739 9
  # $1.1: bool = call(is_389, address.1, MC_Global_Variable_Address)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, MC_Global_Variable_Address[rip]
  call is_389
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_55__2, .LABEL__write_55__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_55__3
.LABEL__write_55__2:
  .loc 2 1740 23
  # address.1: @MC_Global_Variable_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] address.1:rax 
  .loc 2 1741 27
  # $3.1: @IR_Variable = load_struct_member(address.1, ir_variable)
  mov rbx, [rax+8]
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 2 1741 27
  # $4.1: @String = load_struct_member($3.1, name)
  mov rax, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 2 1741 16
  # $5.1: @FILE = call(write_383, file.1, $4.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_383
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 2 1741 16
  # $6.1: @FILE = call(write_383, $5.1, "[rip]")
  mov rdi, rax
  lea rsi, .LABEL__string_23[rip] # "[rip]"
  call write_383
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $6.1:rax 
  .loc 2 1741 9
  # return($6.1)
  mov [rbp-25], rax
  jmp .LABEL__write_55__end
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_55__3:
  .loc 2 1743 9
  # $7.1: bool = call(is_389, address.1, MC_Register_Based_Address)
  mov rdi, [rbp-16]
  mov rsi, MC_Register_Based_Address[rip]
  call is_389
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__write_55__5, .LABEL__write_55__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_55__6
.LABEL__write_55__5:
  .loc 2 1744 23
  # address.1: @MC_Register_Based_Address = address.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax 
  .loc 2 1745 9
  # $9.1: @FILE = call(write_385, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  mov [rbp-26], rax
  call write_385
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $9.1:rax 
  .loc 2 1745 31
  # $10.1: @MC_Register = load_struct_member(address.1, register)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $10.1:r15 
  .loc 2 1745 31
  # $11.1: @String = load_struct_member($10.1, name_q)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $9.1:rax $11.1:r14 
  .loc 2 1745 9
  # $12.1: @FILE = call(write_383, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  .loc 2 1746 13
  # $13.1: isize = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $13.1:rbx 
  .loc 2 1746 13
  # $14.1: bool = $13.1 > 0
  cmp rbx, 0
  setg r15b
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:r15 
  # jump($14.1, .LABEL__write_55__7, .LABEL__write_55__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__write_55__9
.LABEL__write_55__7:
  .loc 2 1747 13
  # $19.1: @FILE = call(write_385, file.1, '+')
  mov rdi, [rbp-8]
  mov sil, 43
  call write_385
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $19.1:rax 
  .loc 2 1747 35
  # $20.1: isize = load_struct_member(address.1, offset)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rbx:[rbp-26] $14.1:[rbp-27] $19.1:rax $20.1:r15 
  .loc 2 1747 13
  # $21.1: @FILE = call(write_382, $19.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # jump(.LABEL__write_55__8)
.LABEL__write_55__8:
  .loc 2 1751 16
  # $22.1: @FILE = call(write_385, file.1, ']')
  mov rdi, [rbp-8]
  mov sil, 93
  call write_385
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $22.1:rax 
  .loc 2 1751 9
  # return($22.1)
  mov [rbp-35], rax
  jmp .LABEL__write_55__end
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__write_55__9:
  .loc 2 1748 20
  # $15.1: isize = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $15.1:rbx 
  .loc 2 1748 20
  # $16.1: bool = $15.1 < 0
  cmp rbx, 0
  setl r15b
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:r15 
  # jump($16.1, .LABEL__write_55__10, .LABEL__write_55__8)
  test r15b, r15b
  mov [rbp-28], r15b
  jz .LABEL__write_55__8
.LABEL__write_55__10:
  .loc 2 1749 24
  # $17.1: isize = load_struct_member(address.1, offset)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:rax:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] $17.1:rbx 
  .loc 2 1749 13
  # $18.1: @FILE = call(write_382, file.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_382
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # jump(.LABEL__write_55__8)
  jmp .LABEL__write_55__8
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] $16.1:[rbp-28] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] address.1:[rbp-26] 
  # [discarded value]: address.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
.LABEL__write_55__6:
  .loc 2 1753 11
  # $23.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  call clone_391
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax 
  .loc 2 1753 46
  # $24.1: @Object_Type = load_struct_member(address.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $24.1:r15 
  .loc 2 1753 46
  # $25.1: @String = load_struct_member_address($24.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] address.1:rbx:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $23.1:rax $24.1:r15 $25.1:r14 
  .loc 2 1753 11
  # $26.1: @String = call(append_400, $23.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] $26.1:rax 
  .loc 2 1753 5
  # call(abort_388, $26.1)
  mov rdi, rax
  call abort_388
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] address.1:[rbp-16] 
  # [discarded value]: address.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_55__end:
  mov rsp, rbp
  pop rbp
  ret

write_55__stack_frame_size: .word 48

  .loc 2 1771 8
  .text
get_type_size_56:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_type_size_56__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_type_size_56__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # ir_type.1: @IR_Type = load_variable(ir_type)
  # [live values]: self.1:rdi ir_type.1:rsi 
  .loc 2 1772 9
  # $1.1: bool = call(is_389, ir_type.1, IR_Boolean_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Boolean_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_type_size_56__2, .LABEL__get_type_size_56__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_type_size_56__3
.LABEL__get_type_size_56__2:
  .loc 2 1773 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_type_size_56__3:
  .loc 2 1775 9
  # $2.1: bool = call(is_389, ir_type.1, IR_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  # jump($2.1, .LABEL__get_type_size_56__5, .LABEL__get_type_size_56__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__get_type_size_56__6
.LABEL__get_type_size_56__5:
  .loc 2 1776 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
.LABEL__get_type_size_56__6:
  .loc 2 1778 9
  # $3.1: bool = call(is_389, ir_type.1, IR_Int_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:rax 
  # jump($3.1, .LABEL__get_type_size_56__8, .LABEL__get_type_size_56__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__get_type_size_56__9
.LABEL__get_type_size_56__8:
  .loc 2 1779 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
.LABEL__get_type_size_56__9:
  .loc 2 1781 9
  # $4.1: bool = call(is_389, ir_type.1, IR_Int16_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int16_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:rax 
  # jump($4.1, .LABEL__get_type_size_56__11, .LABEL__get_type_size_56__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__get_type_size_56__12
.LABEL__get_type_size_56__11:
  .loc 2 1782 9
  # return(2)
  mov rax, 2
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
.LABEL__get_type_size_56__12:
  .loc 2 1784 9
  # $5.1: bool = call(is_389, ir_type.1, IR_Int32_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int32_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:rax 
  # jump($5.1, .LABEL__get_type_size_56__14, .LABEL__get_type_size_56__15)
  test al, al
  mov [rbp-21], al
  jz .LABEL__get_type_size_56__15
.LABEL__get_type_size_56__14:
  .loc 2 1785 9
  # return(4)
  mov rax, 4
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
.LABEL__get_type_size_56__15:
  .loc 2 1787 9
  # $6.1: bool = call(is_389, ir_type.1, IR_Int8_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Int8_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:rax 
  # jump($6.1, .LABEL__get_type_size_56__17, .LABEL__get_type_size_56__18)
  test al, al
  mov [rbp-22], al
  jz .LABEL__get_type_size_56__18
.LABEL__get_type_size_56__17:
  .loc 2 1788 9
  # return(1)
  mov rax, 1
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
.LABEL__get_type_size_56__18:
  .loc 2 1790 9
  # $7.1: bool = call(is_389, ir_type.1, IR_Null_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:rax 
  # jump($7.1, .LABEL__get_type_size_56__20, .LABEL__get_type_size_56__21)
  test al, al
  mov [rbp-23], al
  jz .LABEL__get_type_size_56__21
.LABEL__get_type_size_56__20:
  .loc 2 1791 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
.LABEL__get_type_size_56__21:
  .loc 2 1793 9
  # $8.1: bool = call(is_389, ir_type.1, IR_Pointer_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:rax 
  # jump($8.1, .LABEL__get_type_size_56__23, .LABEL__get_type_size_56__24)
  test al, al
  mov [rbp-24], al
  jz .LABEL__get_type_size_56__24
.LABEL__get_type_size_56__23:
  .loc 2 1794 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
.LABEL__get_type_size_56__24:
  .loc 2 1796 9
  # $9.1: bool = call(is_389, ir_type.1, IR_Struct_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:rax 
  # jump($9.1, .LABEL__get_type_size_56__26, .LABEL__get_type_size_56__27)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_type_size_56__27
.LABEL__get_type_size_56__26:
  .loc 2 1797 23
  # ir_type.1: @IR_Struct_Type = ir_type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax 
  .loc 2 1798 13
  # size.1: isize = 0
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx 
  .loc 2 1799 13
  # $11.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $11.1:r15 
  .loc 2 1799 13
  # $12.1: bool = $11.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax size.1:rbx $12.1:r14 
  # jump($12.1, .LABEL__get_type_size_56__28, .LABEL__get_type_size_56__29)
  test r14b, r14b
  mov [rbp-33], rax
  mov [rbp-41], rbx
  mov [rbp-42], r14b
  jz .LABEL__get_type_size_56__29
.LABEL__get_type_size_56__28:
  .loc 2 1800 46
  # $13.1: @IR_Struct_Type = load_struct_member(ir_type.1, base_type)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $13.1:rbx 
  .loc 2 1800 27
  # $14.1: isize = call(get_type_size_56, self.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $14.1:rax 
  .loc 2 1800 20
  # $15.1: isize = size.1 + $14.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] $15.1:rbx 
  .loc 2 1800 13
  # size.3: isize = $15.1
  mov [rbp-50], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_56__29)
  mov [rbp-41], rbx
.LABEL__get_type_size_56__29:
  # size.8: isize = phi(size.1, size.3)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] 
  .loc 2 1802 35
  # $16.1: @List = load_struct_member(ir_type.1, members)
  mov rax, [rbp-33]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:rax:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] $16.1:rbx 
  .loc 2 1802 35
  # struct_type_members.1: @List_Iterator = call(create_iterator_375, $16.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:rax 
  # jump(.LABEL__get_type_size_56__30)
  mov [rbp-50], rax
.LABEL__get_type_size_56__30:
  # size.7: isize = phi(size.8, size.5)
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  .loc 2 1803 16
  # $18.1: bool = call(has_next_378, struct_type_members.1)
  mov rdi, [rbp-50]
  call has_next_378
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:rax 
  # jump($18.1, .LABEL__get_type_size_56__31, .LABEL__get_type_size_56__32)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_type_size_56__32
.LABEL__get_type_size_56__31:
  .loc 2 1804 38
  # struct_type_member.1: @IR_Struct_Type_Member = call(next_379, struct_type_members.1)
  mov rdi, [rbp-50]
  call next_379
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] struct_type_member.1:rax 
  .loc 2 1805 46
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $21.1:rbx 
  .loc 2 1805 27
  # $22.1: isize = call(get_type_size_56, self.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_type_size_56
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $22.1:rax 
  .loc 2 1805 20
  # $23.1: isize = size.7 + $22.1
  mov rbx, [rbp-41]
  add rbx, rax
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] $23.1:rbx 
  .loc 2 1805 13
  # size.5: isize = $23.1
  mov [rbp-59], rbx
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:rbx:[rbp-41] 
  # jump(.LABEL__get_type_size_56__30)
  mov [rbp-41], rbx
  jmp .LABEL__get_type_size_56__30
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] size.5:[rbp-41] 
  # [discarded value]: size.5
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
.LABEL__get_type_size_56__32:
  .loc 2 1807 9
  # return(size.7)
  mov rax, [rbp-41]
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] $18.1:[rbp-51] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] size.7:[rbp-41] 
  # [discarded value]: size.7
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] size.8:[rbp-41] struct_type_members.1:[rbp-50] 
  # [discarded value]: struct_type_members.1
  # [discarded value]: size.8
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] size.3:[rbp-41] 
  # [discarded value]: size.3
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] $12.1:[rbp-42] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] ir_type.1:[rbp-33] size.1:[rbp-41] 
  # [discarded value]: size.1
  # [discarded value]: ir_type.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
.LABEL__get_type_size_56__27:
  .loc 2 1809 9
  # $24.1: bool = call(is_389, ir_type.1, IR_Unchecked_Array_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:rax 
  # jump($24.1, .LABEL__get_type_size_56__34, .LABEL__get_type_size_56__35)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_type_size_56__35
.LABEL__get_type_size_56__34:
  .loc 2 1810 9
  # return(8)
  mov rax, 8
  jmp .LABEL__get_type_size_56__end
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] 
.LABEL__get_type_size_56__35:
  .loc 2 1812 16
  # $25.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  call clone_391
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] $25.1:rax 
  .loc 2 1812 51
  # $26.1: @Object_Type = load_struct_member(ir_type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] $25.1:rax $26.1:r15 
  .loc 2 1812 51
  # $27.1: @String = load_struct_member_address($26.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] ir_type.1:rbx:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] $25.1:rax $26.1:r15 $27.1:r14 
  .loc 2 1812 16
  # $28.1: @String = call(append_400, $25.1, $27.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] $28.1:rax 
  .loc 2 1812 5
  # call(abort_35, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call abort_35
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] $24.1:[rbp-26] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] $9.1:[rbp-25] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] $8.1:[rbp-24] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] $7.1:[rbp-23] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] $6.1:[rbp-22] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] $5.1:[rbp-21] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:[rbp-20] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] ir_type.1:[rbp-16] 
  # [discarded value]: ir_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_type_size_56__end:
  mov rsp, rbp
  pop rbp
  ret

get_type_size_56__stack_frame_size: .word 64

  .loc 2 1820 8
  .text
convert_string_57:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_string_57__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_string_57__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # literal.1: @String_Token = load_variable(literal)
  # [live values]: self.1:rdi literal.1:rsi 
  .loc 2 1821 23
  # $1.1: @List = load_struct_member(self.1, strings)
  mov rax, [rdi+169]
  # [live values]: self.1:rdi literal.1:rsi $1.1:rax 
  .loc 2 1821 23
  # string_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi literal.1:rsi string_item.1:rbx 
  # jump(.LABEL__convert_string_57__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__convert_string_57__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.5)
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  .loc 2 1822 12
  # $3.1: bool = string_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__convert_string_57__3, .LABEL__convert_string_57__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_string_57__4
.LABEL__convert_string_57__3:
  .loc 2 1823 22
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx 
  .loc 2 1824 13
  # $6.1: @String_Token = load_struct_member(string.1, literal)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $6.1:r15 
  .loc 2 1824 13
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 
  .loc 2 1824 42
  # $8.1: @String = load_struct_member(literal.1, lexeme)
  mov r15, [rbp-16]
  mov r13, [r15+8]
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:rax:[rbp-8] $3.1:[rbp-25] string.1:rbx $7.1:r14 $8.1:r13 
  .loc 2 1824 13
  # $9.1: bool = call(equals_392, $7.1, $8.1)
  mov rdi, r14
  mov rsi, r13
  mov [rbp-33], rbx
  call equals_392
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__convert_string_57__5, .LABEL__convert_string_57__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_string_57__6
.LABEL__convert_string_57__5:
  .loc 2 1825 13
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_57__end
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__convert_string_57__6:
  .loc 2 1827 23
  # string_item.5: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_string_57__2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_string_57__2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] string_item.5:[rbp-8] 
  # [discarded value]: string_item.5
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
.LABEL__convert_string_57__4:
  .loc 2 1829 37
  # $11.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-24]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $11.1:rbx 
  .loc 2 1829 37
  # $12.1: isize = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] $12.1:r15 
  .loc 2 1829 18
  # string.1: @MC_String = new MC_String(id = $12.1, literal = literal.1)
  mov [rbp-33], r15
  mov rdi, 16
  call malloc
  #     .id = $12.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .literal = literal.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax 
  .loc 2 1830 5
  # $14.1: @List = load_struct_member(self.1, strings)
  mov rbx, [rbp-24]
  mov r14, [rbx+169]
  # [live values]: self.1:rbx:[rbp-24] literal.1:r15:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:rax $14.1:r14 
  .loc 2 1830 5
  # call(append_364, $14.1, string.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-33], rax
  call append_364
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] string.1:[rbp-33] 
  .loc 2 1831 5
  # return(string.1)
  mov rax, [rbp-33]
  jmp .LABEL__convert_string_57__end
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] string_item.2:[rbp-8] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] literal.1:[rbp-16] string_item.1:[rbp-8] 
  # [discarded value]: string_item.1
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_string_57__end:
  mov rsp, rbp
  pop rbp
  ret

convert_string_57__stack_frame_size: .word 48

  .loc 2 1834 8
  .text
generate_strings_58:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_strings_58__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_strings_58__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 2 1835 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 2 1835 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 2 1835 5
  # $3.1: @FILE = call(write_383, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_168[rip] # "  .section .rodata"
  call write_383
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 2 1835 5
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  .loc 2 1836 23
  # $5.1: @List = load_struct_member(self.1, strings)
  mov rax, [rbp-8]
  mov rbx, [rax+169]
  # [live values]: self.1:rax:[rbp-8] $5.1:rbx 
  .loc 2 1836 23
  # string_item.1: @List_Item = load_struct_member($5.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] string_item.1:r15 
  # jump(.LABEL__generate_strings_58__2)
  mov [rbp-16], r15
.LABEL__generate_strings_58__2:
  # string_item.2: @List_Item = phi(string_item.1, string_item.4)
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  .loc 2 1837 12
  # $7.1: bool = string_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:rax 
  # jump($7.1, .LABEL__generate_strings_58__3, .LABEL__generate_strings_58__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_strings_58__4
.LABEL__generate_strings_58__3:
  .loc 2 1838 22
  # string.1: @MC_String = load_struct_member(string_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx 
  .loc 2 1840 9
  # $10.1: @FILE = load_struct_member(self.1, output_file)
  mov r15, [rbp-8]
  mov r14, [r15+8]
  # [live values]: self.1:r15:[rbp-8] string_item.1:[rbp-16] string_item.2:rax:[rbp-16] $7.1:[rbp-17] string.1:rbx $10.1:r14 
  .loc 2 1840 9
  # $11.1: @FILE = call(end_line_386, $10.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call end_line_386
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1841 9
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $12.1:rbx 
  .loc 2 1841 9
  # $13.1: @FILE = call(write_383, $12.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_169[rip] # "  .align 8"
  call write_383
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $13.1:rax 
  .loc 2 1841 9
  # $14.1: @FILE = call(end_line_386, $13.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1842 9
  # $15.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $15.1:rbx 
  .loc 2 1842 9
  # $16.1: @FILE = call(write_string_label_59, $15.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $16.1:rax 
  .loc 2 1842 9
  # $17.1: @FILE = call(write_385, $16.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $17.1:rax 
  .loc 2 1842 9
  # $18.1: @FILE = call(end_line_386, $17.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1843 9
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $19.1:rbx 
  .loc 2 1843 9
  # $20.1: @FILE = call(write_383, $19.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $20.1:rax 
  .loc 2 1843 9
  # $21.1: @FILE = call(write_string_label_59, $20.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $21.1:rax 
  .loc 2 1843 9
  # $22.1: @FILE = call(write_383, $21.1, "__data")
  mov rdi, rax
  lea rsi, .LABEL__string_171[rip] # "__data"
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $22.1:rax 
  .loc 2 1843 9
  # $23.1: @FILE = call(end_line_386, $22.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1844 9
  # $24.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $24.1:rbx 
  .loc 2 1844 9
  # $25.1: @FILE = call(write_383, $24.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $25.1:rax 
  .loc 2 1844 50
  # $26.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $26.1:r15 
  .loc 2 1844 50
  # $27.1: @String = load_struct_member($26.1, value)
  mov r14, [r15+32]
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $27.1:r14 
  .loc 2 1844 50
  # $28.1: isize = load_struct_member($27.1, length)
  mov r15, [r14+16]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $28.1:r15 
  .loc 2 1844 50
  # $29.1: isize = $28.1 + 1
  mov r14, r15
  inc r14
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $25.1:rax $29.1:r14 
  .loc 2 1844 9
  # $30.1: @FILE = call(write_382, $25.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $29.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $30.1:rax 
  .loc 2 1844 9
  # $31.1: @FILE = call(end_line_386, $30.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1845 9
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $32.1:rbx 
  .loc 2 1845 9
  # $33.1: @FILE = call(write_383, $32.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $33.1:rax 
  .loc 2 1845 50
  # $34.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $34.1:r15 
  .loc 2 1845 50
  # $35.1: @String = load_struct_member($34.1, value)
  mov r14, [r15+32]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $35.1:r14 
  .loc 2 1845 50
  # $36.1: isize = load_struct_member($35.1, length)
  mov r15, [r14+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:rbx:[rbp-25] $33.1:rax $36.1:r15 
  .loc 2 1845 9
  # $37.1: @FILE = call(write_382, $33.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $36.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $37.1:rax 
  .loc 2 1845 9
  # $38.1: @FILE = call(end_line_386, $37.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] 
  .loc 2 1846 9
  # $39.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $39.1:rbx 
  .loc 2 1846 9
  # $40.1: @FILE = call(write_string_label_59, $39.1, string.1)
  mov rdi, rbx
  mov rsi, [rbp-25]
  call write_string_label_59
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $40.1:rax 
  .loc 2 1846 9
  # $41.1: @FILE = call(write_383, $40.1, "__data: .string ")
  mov rdi, rax
  lea rsi, .LABEL__string_172[rip] # "__data: .string "
  call write_383
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string.1:[rbp-25] $41.1:rax 
  .loc 2 1846 85
  # $42.1: @String_Token = load_struct_member(string.1, literal)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: string.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $42.1:r15 
  .loc 2 1846 85
  # $43.1: @String = load_struct_member($42.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $41.1:rax $43.1:rbx 
  .loc 2 1846 9
  # $44.1: @FILE = call(write_383, $41.1, $43.1)
  mov rdi, rax
  mov rsi, rbx
  call write_383
  # [discarded value]: $43.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] $44.1:rax 
  .loc 2 1846 9
  # $45.1: @FILE = call(end_line_386, $44.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  .loc 2 1848 23
  # string_item.4: @List_Item = load_struct_member(string_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:rbx:[rbp-16] 
  # jump(.LABEL__generate_strings_58__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_strings_58__2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] string_item.4:[rbp-16] 
  # [discarded value]: string_item.4
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
.LABEL__generate_strings_58__4:
  # return()
  jmp .LABEL__generate_strings_58__end
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] $7.1:[rbp-17] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] string_item.2:[rbp-16] 
  # [discarded value]: string_item.2
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] string_item.1:[rbp-16] 
  # [discarded value]: string_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_strings_58__end:
  mov rsp, rbp
  pop rbp
  ret

generate_strings_58__stack_frame_size: .word 32

  .loc 2 1852 8
  .text
write_string_label_59:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_string_label_59__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_string_label_59__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @MC_String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 2 1853 12
  # $1.1: @FILE = call(write_383, file.1, ".LABEL__string_")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_173[rip] # ".LABEL__string_"
  call write_383
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 2 1853 48
  # $2.1: isize = load_struct_member(string.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: string.1
  # [live values]: $1.1:rax $2.1:r15 
  .loc 2 1853 12
  # $3.1: @FILE = call(write_382, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 2 1853 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__write_string_label_59__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__write_string_label_59__end:
  mov rsp, rbp
  pop rbp
  ret

write_string_label_59__stack_frame_size: .word 16

  .loc 2 1856 8
  .text
generate_object_types_60:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_object_types_60__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_object_types_60__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # types.1: @List = load_variable(types)
  # [live values]: self.1:rdi types.1:rsi 
  .loc 2 1857 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi types.1:rsi $1.1:rax 
  .loc 2 1857 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  .loc 2 1857 5
  # $3.1: @FILE = call(write_383, $2.1, "  .section .rodata")
  mov rdi, rax
  lea rsi, .LABEL__string_168[rip] # "  .section .rodata"
  call write_383
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  .loc 2 1857 5
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  .loc 2 1858 21
  # type_item.1: @List_Item = load_struct_member(types.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [discarded value]: types.1
  # [live values]: self.1:[rbp-8] type_item.1:rbx 
  # jump(.LABEL__generate_object_types_60__2)
  mov [rbp-16], rbx
.LABEL__generate_object_types_60__2:
  # type_item.2: @List_Item = phi(type_item.1, type_item.5)
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  .loc 2 1859 12
  # $6.1: bool = type_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__generate_object_types_60__3, .LABEL__generate_object_types_60__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_object_types_60__4
.LABEL__generate_object_types_60__3:
  .loc 2 1860 20
  # type.1: @IR_Type = load_struct_member(type_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:rax:[rbp-16] $6.1:[rbp-17] type.1:rbx 
  .loc 2 1861 13
  # $9.1: bool = call(is_389, type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-25], rbx
  call is_389
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__generate_object_types_60__5, .LABEL__generate_object_types_60__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__generate_object_types_60__6
.LABEL__generate_object_types_60__5:
  .loc 2 1862 24
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-25]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax 
  .loc 2 1863 17
  # $11.1: bool = call(is_object_type_152, type.1)
  mov rdi, rax
  mov [rbp-34], rax
  call is_object_type_152
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__generate_object_types_60__7, .LABEL__generate_object_types_60__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__generate_object_types_60__6
.LABEL__generate_object_types_60__7:
  .loc 2 1864 17
  # $12.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $12.1:rbx 
  .loc 2 1864 17
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1865 17
  # $14.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $14.1:rbx 
  .loc 2 1865 17
  # $15.1: @FILE = call(write_383, $14.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_169[rip] # "  .align 8"
  call write_383
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $15.1:rax 
  .loc 2 1865 17
  # $16.1: @FILE = call(end_line_386, $15.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1866 17
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $17.1:rbx 
  .loc 2 1866 17
  # $18.1: @FILE = call(write_type_label_61, $17.1, type.1)
  mov rdi, rbx
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $18.1:rax 
  .loc 2 1866 17
  # $19.1: @FILE = call(write_385, $18.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $19.1:rax 
  .loc 2 1866 17
  # $20.1: @FILE = call(end_line_386, $19.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1867 17
  # $21.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $21.1:rbx 
  .loc 2 1867 17
  # $22.1: @FILE = call(write_383, $21.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_174[rip] # "  .quad .LABEL__"
  call write_383
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $22.1:rax 
  .loc 2 1867 17
  # $23.1: @FILE = call(write_type_label_61, $22.1, type.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $23.1:rax 
  .loc 2 1867 17
  # $24.1: @FILE = call(write_383, $23.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_175[rip] # "__object_type"
  call write_383
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $24.1:rax 
  .loc 2 1867 17
  # $25.1: @FILE = call(end_line_386, $24.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1868 17
  # $26.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $26.1:rbx 
  .loc 2 1868 17
  # $27.1: @FILE = call(write_383, $26.1, ".LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $27.1:rax 
  .loc 2 1868 17
  # $28.1: @FILE = call(write_type_label_61, $27.1, type.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_type_label_61
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $28.1:rax 
  .loc 2 1868 17
  # $29.1: @FILE = call(write_383, $28.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_175[rip] # "__object_type"
  call write_383
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $29.1:rax 
  .loc 2 1868 17
  # $30.1: @FILE = call(write_385, $29.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $30.1:rax 
  .loc 2 1868 17
  # $31.1: @FILE = call(end_line_386, $30.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1869 17
  # $32.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $32.1:rbx 
  .loc 2 1869 17
  # $33.1: @FILE = call(write_383, $32.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $33.1:rax 
  .loc 2 1869 17
  # $34.1: @FILE = call(write_382, $33.1, 0)
  mov rdi, rax
  xor rsi, rsi
  call write_382
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $34.1:rax 
  .loc 2 1869 17
  # $35.1: @FILE = call(end_line_386, $34.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $35.1
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1870 17
  # $36.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $36.1:rbx 
  .loc 2 1870 17
  # $37.1: @FILE = call(write_383, $36.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_174[rip] # "  .quad .LABEL__"
  call write_383
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $37.1:rax 
  .loc 2 1870 66
  # $38.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $37.1:rax $38.1:r15 
  .loc 2 1870 17
  # $39.1: @FILE = call(write_383, $37.1, $38.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $39.1:rax 
  .loc 2 1870 17
  # $40.1: @FILE = call(write_383, $39.1, "__object_type__name__data")
  mov rdi, rax
  lea rsi, .LABEL__string_176[rip] # "__object_type__name__data"
  call write_383
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $40.1:rax 
  .loc 2 1870 17
  # $41.1: @FILE = call(end_line_386, $40.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1871 17
  # $42.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $42.1:rbx 
  .loc 2 1871 17
  # $43.1: @FILE = call(write_383, $42.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $43.1:rax 
  .loc 2 1871 58
  # $44.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $44.1:r15 
  .loc 2 1871 58
  # $45.1: isize = load_struct_member($44.1, length)
  mov r14, [r15+16]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $45.1:r14 
  .loc 2 1871 58
  # $46.1: isize = $45.1 + 1
  mov r15, r14
  inc r15
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $43.1:rax $46.1:r15 
  .loc 2 1871 17
  # $47.1: @FILE = call(write_382, $43.1, $46.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $46.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $47.1:rax 
  .loc 2 1871 17
  # $48.1: @FILE = call(end_line_386, $47.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1872 17
  # $49.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $49.1:rbx 
  .loc 2 1872 17
  # $50.1: @FILE = call(write_383, $49.1, "  .quad ")
  mov rdi, rbx
  lea rsi, .LABEL__string_170[rip] # "  .quad "
  call write_383
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $50.1:rax 
  .loc 2 1872 58
  # $51.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $50.1:rax $51.1:r15 
  .loc 2 1872 58
  # $52.1: isize = load_struct_member($51.1, length)
  mov r14, [r15+16]
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $50.1:rax $52.1:r14 
  .loc 2 1872 17
  # $53.1: @FILE = call(write_382, $50.1, $52.1)
  mov rdi, rax
  mov rsi, r14
  call write_382
  # [discarded value]: $52.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $53.1:rax 
  .loc 2 1872 17
  # $54.1: @FILE = call(end_line_386, $53.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $54.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  .loc 2 1873 21
  # $55.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $55.1:rbx 
  .loc 2 1873 21
  # $56.1: bool = $55.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rax:[rbp-34] $11.1:[rbp-35] $56.1:r15 
  # jump($56.1, .LABEL__generate_object_types_60__9, .LABEL__generate_object_types_60__11)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__generate_object_types_60__11
.LABEL__generate_object_types_60__9:
  .loc 2 1874 21
  # $60.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $60.1:rbx 
  .loc 2 1874 21
  # $61.1: @FILE = call(write_383, $60.1, "  .quad .LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_174[rip] # "  .quad .LABEL__"
  call write_383
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax 
  .loc 2 1874 70
  # $62.1: @IR_Struct_Type = load_struct_member(type.1, base_type)
  mov rbx, [rbp-34]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax $62.1:r15 
  .loc 2 1874 70
  # $63.1: @String = load_struct_member($62.1, name)
  mov r14, [r15+8]
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $61.1:rax $63.1:r14 
  .loc 2 1874 21
  # $64.1: @FILE = call(write_383, $61.1, $63.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $63.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $64.1:rax 
  .loc 2 1874 21
  # $65.1: @FILE = call(write_383, $64.1, "__object_type")
  mov rdi, rax
  lea rsi, .LABEL__string_175[rip] # "__object_type"
  call write_383
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $65.1:rax 
  .loc 2 1874 21
  # $66.1: @FILE = call(end_line_386, $65.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $66.1
  # [discarded value]: $65.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__10)
.LABEL__generate_object_types_60__10:
  .loc 2 1878 17
  # $67.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $67.1:rbx 
  .loc 2 1878 17
  # $68.1: @FILE = call(write_383, $67.1, ".LABEL__")
  mov rdi, rbx
  lea rsi, .LABEL__string_31[rip] # ".LABEL__"
  call write_383
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $68.1:rax 
  .loc 2 1878 58
  # $69.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $68.1:rax $69.1:r15 
  .loc 2 1878 17
  # $70.1: @FILE = call(write_383, $68.1, $69.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $70.1:rax 
  .loc 2 1878 17
  # $71.1: @FILE = call(write_383, $70.1, "__object_type__name__data: .string \"")
  mov rdi, rax
  lea rsi, .LABEL__string_177[rip] # "__object_type__name__data: .string \""
  call write_383
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $71.1:rax 
  .loc 2 1878 122
  # $72.1: @String = load_struct_member(type.1, name)
  mov rbx, [rbp-34]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:rbx:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $71.1:rax $72.1:r15 
  .loc 2 1878 17
  # $73.1: @FILE = call(write_383, $71.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $72.1
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $73.1:rax 
  .loc 2 1878 17
  # $74.1: @FILE = call(write_385, $73.1, '"')
  mov rdi, rax
  mov sil, 34
  call write_385
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $74.1:rax 
  .loc 2 1878 17
  # $75.1: @FILE = call(end_line_386, $74.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $75.1
  # [discarded value]: $74.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__6)
.LABEL__generate_object_types_60__6:
  .loc 2 1881 21
  # type_item.5: @List_Item = load_struct_member(type_item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:rbx:[rbp-16] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_object_types_60__2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] type_item.5:[rbp-16] $56.1:[rbp-36] 
  # [discarded value]: type_item.5
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
.LABEL__generate_object_types_60__11:
  .loc 2 1876 21
  # $57.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $57.1:rbx 
  .loc 2 1876 21
  # $58.1: @FILE = call(write_383, $57.1, "  .quad 0")
  mov rdi, rbx
  lea rsi, .LABEL__string_178[rip] # "  .quad 0"
  call write_383
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] $58.1:rax 
  .loc 2 1876 21
  # $59.1: @FILE = call(end_line_386, $58.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # jump(.LABEL__generate_object_types_60__10)
  jmp .LABEL__generate_object_types_60__10
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] $56.1:[rbp-36] 
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] type.1:[rbp-34] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
.LABEL__generate_object_types_60__4:
  # return()
  jmp .LABEL__generate_object_types_60__end
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] type_item.2:[rbp-16] 
  # [discarded value]: type_item.2
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] type_item.1:[rbp-16] 
  # [discarded value]: type_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_object_types_60__end:
  mov rsp, rbp
  pop rbp
  ret

generate_object_types_60__stack_frame_size: .word 48

  .loc 2 1885 8
  .text
write_type_label_61:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_type_label_61__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_type_label_61__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  .loc 2 1886 23
  # $1.1: @String = load_struct_member(type.1, name)
  mov rax, [rsi+8]
  # [discarded value]: type.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 2 1886 12
  # $2.1: @FILE = call(write_383, file.1, $1.1)
  mov rsi, rax
  call write_383
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: $2.1:rax 
  .loc 2 1886 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_type_label_61__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_type_label_61__end:
  mov rsp, rbp
  pop rbp
  ret

write_type_label_61__stack_frame_size: .word 16

  .loc 2 1889 8
  .text
generate_global_variables_62:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR generate_global_variables_62__stack_frame_size[rip]
  sub rsp, rax
.LABEL__generate_global_variables_62__1:
  # self.1: @MC_Generator = load_variable(self)
  # [live values]: self.1:rdi 
  # variables.1: @List = load_variable(variables)
  # [live values]: self.1:rdi variables.1:rsi 
  .loc 2 1890 5
  # $1.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi variables.1:rsi $1.1:rax 
  .loc 2 1890 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] $2.1:rax 
  .loc 2 1890 5
  # $3.1: @FILE = call(write_383, $2.1, "  .bss")
  mov rdi, rax
  lea rsi, .LABEL__string_179[rip] # "  .bss"
  call write_383
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] $3.1:rax 
  .loc 2 1890 5
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] variables.1:[rbp-16] 
  .loc 2 1892 26
  # variables_item.1: @List_Item = load_struct_member(variables.1, last_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: variables.1
  # [live values]: self.1:[rbp-8] variables_item.1:rbx 
  # jump(.LABEL__generate_global_variables_62__2)
  mov [rbp-16], rbx
.LABEL__generate_global_variables_62__2:
  # variables_item.2: @List_Item = phi(variables_item.1, variables_item.5)
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] 
  .loc 2 1893 12
  # $6.1: bool = variables_item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:rax 
  # jump($6.1, .LABEL__generate_global_variables_62__3, .LABEL__generate_global_variables_62__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__generate_global_variables_62__4
.LABEL__generate_global_variables_62__3:
  .loc 2 1894 24
  # variable.1: @IR_Variable = load_struct_member(variables_item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:rax:[rbp-16] $6.1:[rbp-17] variable.1:rbx 
  .loc 2 1895 13
  # $9.1: bool = call(is_389, variable.1, IR_Global_Variable)
  mov rdi, rbx
  mov rsi, IR_Global_Variable[rip]
  mov [rbp-25], rbx
  call is_389
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $9.1:rax 
  .loc 2 1895 13
  # $10.1: bool = $9.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:rbx 
  # jump($10.1, .LABEL__generate_global_variables_62__5, .LABEL__generate_global_variables_62__6)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__generate_global_variables_62__6
.LABEL__generate_global_variables_62__5:
  .loc 2 1896 13
  # call(abort_35, self.1, "Invalid state")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_35
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] 
.LABEL__generate_global_variables_62__6:
  .loc 2 1898 24
  # variable.1: @IR_Global_Variable = variable.1
  mov rax, [rbp-25]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax 
  .loc 2 1899 13
  # $12.1: bool = load_struct_member(variable.1, is_external)
  mov bl, [rax+48]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax $12.1:rbx 
  .loc 2 1899 13
  # $13.1: bool = $12.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax $13.1:r15 
  # jump($13.1, .LABEL__generate_global_variables_62__7, .LABEL__generate_global_variables_62__8)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__generate_global_variables_62__8
.LABEL__generate_global_variables_62__7:
  .loc 2 1900 17
  # $14.1: @IR_Value = load_struct_member(variable.1, value)
  mov rax, [rbp-34]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rax:[rbp-34] $13.1:[rbp-35] $14.1:rbx 
  .loc 2 1900 17
  # $15.1: bool = call(is_389, $14.1, IR_Undefined_Value)
  mov rdi, rbx
  mov rsi, IR_Undefined_Value[rip]
  call is_389
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $15.1:rax 
  .loc 2 1900 17
  # $16.1: bool = $15.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:rbx 
  # jump($16.1, .LABEL__generate_global_variables_62__9, .LABEL__generate_global_variables_62__10)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__generate_global_variables_62__10
.LABEL__generate_global_variables_62__9:
  .loc 2 1901 17
  # call(abort_35, self.1, "Global variables must be declared as undefined for now")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_180[rip] # "Global variables must be declared as undefined for now"
  call abort_35
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
.LABEL__generate_global_variables_62__10:
  .loc 2 1903 13
  # $17.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $17.1:rbx 
  .loc 2 1903 13
  # $18.1: @FILE = call(end_line_386, $17.1)
  mov rdi, rbx
  call end_line_386
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1904 13
  # $19.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $19.1:rbx 
  .loc 2 1904 13
  # $20.1: @FILE = call(write_383, $19.1, "  .align 8")
  mov rdi, rbx
  lea rsi, .LABEL__string_169[rip] # "  .align 8"
  call write_383
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $20.1:rax 
  .loc 2 1904 13
  # $21.1: @FILE = call(end_line_386, $20.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1905 13
  # $22.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $22.1:rbx 
  .loc 2 1905 36
  # $23.1: @String = load_struct_member(variable.1, name)
  mov r15, [rbp-34]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:r15:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $22.1:rbx $23.1:r14 
  .loc 2 1905 13
  # $24.1: @FILE = call(write_383, $22.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call write_383
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $24.1:rax 
  .loc 2 1905 13
  # $25.1: @FILE = call(write_385, $24.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $25.1:rax 
  .loc 2 1905 13
  # $26.1: @FILE = call(end_line_386, $25.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  .loc 2 1906 13
  # $27.1: @FILE = load_struct_member(self.1, output_file)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $27.1:rbx 
  .loc 2 1906 13
  # $28.1: @FILE = call(write_383, $27.1, "  .skip ")
  mov rdi, rbx
  lea rsi, .LABEL__string_181[rip] # "  .skip "
  call write_383
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:rax 
  .loc 2 1906 73
  # $29.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-34]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:rbx:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:rax $29.1:r15 
  .loc 2 1906 54
  # $30.1: isize = call(get_type_size_56, self.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-44], rax
  call get_type_size_56
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $28.1:[rbp-44] $30.1:rax 
  .loc 2 1906 13
  # $31.1: @FILE = call(write_382, $28.1, $30.1)
  mov rdi, [rbp-44]
  mov rsi, rax
  call write_382
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] $31.1:rax 
  .loc 2 1906 13
  # $32.1: @FILE = call(end_line_386, $31.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # jump(.LABEL__generate_global_variables_62__8)
.LABEL__generate_global_variables_62__8:
  .loc 2 1908 26
  # variables_item.5: @List_Item = load_struct_member(variables_item.2, prev_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] variables_item.5:rbx:[rbp-16] 
  # jump(.LABEL__generate_global_variables_62__2)
  mov [rbp-16], rbx
  jmp .LABEL__generate_global_variables_62__2
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] variables_item.5:[rbp-16] 
  # [discarded value]: variables_item.5
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] $16.1:[rbp-36] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] $13.1:[rbp-35] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] variable.1:[rbp-34] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] variable.1:[rbp-25] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] 
.LABEL__generate_global_variables_62__4:
  # return()
  jmp .LABEL__generate_global_variables_62__end
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] variables_item.2:[rbp-16] 
  # [discarded value]: variables_item.2
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] variables_item.1:[rbp-16] 
  # [discarded value]: variables_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__generate_global_variables_62__end:
  mov rsp, rbp
  pop rbp
  ret

generate_global_variables_62__stack_frame_size: .word 48

  .loc 3 3 8
  .text
build_63:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_63__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_63__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 4 19
  # builder.1: @IR_Builder = call(create_ir_builder_65, compilation_unit.1)
  mov [rbp-8], rdi
  call create_ir_builder_65
  # [live values]: compilation_unit.1:[rbp-8] builder.1:rax 
  .loc 3 5 5
  # call(build_79, builder.1)
  mov rdi, rax
  mov [rbp-16], rax
  call build_79
  # [live values]: compilation_unit.1:[rbp-8] builder.1:[rbp-16] 
  .loc 3 7 19
  # $2.1: @List = load_struct_member(compilation_unit.1, sources)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [discarded value]: compilation_unit.1
  # [live values]: builder.1:[rbp-16] $2.1:rbx 
  .loc 3 8 27
  # $3.1: @List = load_struct_member(builder.1, named_functions)
  mov rax, [rbp-16]
  mov r15, [rax+24]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 
  .loc 3 9 23
  # $4.1: @List = load_struct_member(builder.1, types)
  mov r14, [rax+16]
  # [live values]: builder.1:rax:[rbp-16] $2.1:rbx $3.1:r15 $4.1:r14 
  .loc 3 10 28
  # $5.1: @IR_Builder_Context = load_struct_member(builder.1, context)
  mov r13, [rax]
  # [discarded value]: builder.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 $5.1:r13 
  .loc 3 10 28
  # $6.1: @List = load_struct_member($5.1, variables)
  mov rax, [r13+8]
  # [discarded value]: $5.1
  # [live values]: $2.1:rbx $3.1:r15 $4.1:r14 $6.1:rax 
  .loc 3 6 12
  # $7.1: @IR_Build = new IR_Build(sources = $2.1, named_functions = $3.1, named_types = $4.1, global_variables = $6.1)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], r14
  mov [rbp-32], r15
  mov rdi, 32
  call malloc
  #     .sources = $2.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .named_functions = $3.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  #     .named_types = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  #     .global_variables = $6.1
  mov r13, [rbp-8]
  mov QWORD PTR [rax+24], r13
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $7.1:rax 
  .loc 3 6 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__build_63__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__build_63__end:
  mov rsp, rbp
  pop rbp
  ret

build_63__stack_frame_size: .word 32

  .loc 3 21 8
  .text
dump_64:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_64__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_64__1:
  # build.1: @IR_Build = load_variable(build)
  # [live values]: build.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: build.1:rdi file.1:rsi 
  .loc 3 22 21
  # $1.1: @List = load_struct_member(build.1, named_functions)
  mov rax, [rdi+8]
  # [discarded value]: build.1
  # [live values]: file.1:rsi $1.1:rax 
  .loc 3 22 21
  # functions.1: @List_Iterator = call(create_iterator_375, $1.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call create_iterator_375
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] functions.1:rax 
  # jump(.LABEL__dump_64__2)
  mov [rbp-16], rax
.LABEL__dump_64__2:
  .loc 3 23 12
  # $3.1: bool = call(has_next_378, functions.1)
  mov rdi, [rbp-16]
  call has_next_378
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__dump_64__3, .LABEL__dump_64__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__dump_64__4
.LABEL__dump_64__3:
  .loc 3 24 24
  # function.1: @IR_Function = call(next_379, functions.1)
  mov rdi, [rbp-16]
  call next_379
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax 
  .loc 3 25 13
  # $6.1: bool = load_struct_member(function.1, is_external)
  mov bl, [rax+56]
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $6.1:rbx 
  .loc 3 25 13
  # $7.1: bool = $6.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:rax $7.1:r15 
  # jump($7.1, .LABEL__dump_64__5, .LABEL__dump_64__2)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__dump_64__2
.LABEL__dump_64__5:
  .loc 3 26 13
  # call(dump_174, function.1, file.1)
  mov rdi, [rbp-25]
  mov rsi, [rbp-8]
  call dump_174
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  .loc 3 27 13
  # $8.1: @FILE = call(end_line_386, file.1)
  mov rdi, [rbp-8]
  call end_line_386
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # jump(.LABEL__dump_64__2)
  jmp .LABEL__dump_64__2
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] function.1:[rbp-25] 
  # [discarded value]: function.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__dump_64__4:
  # return()
  jmp .LABEL__dump_64__end
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] functions.1:[rbp-16] 
  # [discarded value]: functions.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__dump_64__end:
  mov rsp, rbp
  pop rbp
  ret

dump_64__stack_frame_size: .word 32

  .loc 3 53 8
  .text
create_ir_builder_65:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_builder_65__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_builder_65__1:
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: compilation_unit.1:rdi 
  .loc 3 54 17
  # types.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] types.1:rax 
  .loc 3 55 18
  # $2.1: @IR_Any_Type = new IR_Any_Type(object_type = IR_Any_Type, name = "Any")
  mov [rbp-16], rax
  mov rdi, 16
  call malloc
  #     .object_type = IR_Any_Type
  mov rbx, IR_Any_Type[rip]
  mov [rax], rbx
  #     .name = "Any"
  lea rbx, .LABEL__string_182[rip] # "Any"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $2.1:rax 
  .loc 3 55 5
  # call(append_364, types.1, $2.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $2.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 56 18
  # $3.1: @IR_Boolean_Type = new IR_Boolean_Type(object_type = IR_Boolean_Type, name = "bool")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Boolean_Type
  mov rbx, IR_Boolean_Type[rip]
  mov [rax], rbx
  #     .name = "bool"
  lea rbx, .LABEL__string_183[rip] # "bool"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $3.1:rax 
  .loc 3 56 5
  # call(append_364, types.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $3.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 57 18
  # $4.1: @IR_Int_Type = new IR_Int_Type(object_type = IR_Int_Type, name = "isize")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int_Type
  mov rbx, IR_Int_Type[rip]
  mov [rax], rbx
  #     .name = "isize"
  lea rbx, .LABEL__string_184[rip] # "isize"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  .loc 3 57 5
  # call(append_364, types.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $4.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 58 18
  # $5.1: @IR_Int8_Type = new IR_Int8_Type(object_type = IR_Int8_Type, name = "i8")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int8_Type
  mov rbx, IR_Int8_Type[rip]
  mov [rax], rbx
  #     .name = "i8"
  lea rbx, .LABEL__string_185[rip] # "i8"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $5.1:rax 
  .loc 3 58 5
  # call(append_364, types.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $5.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 59 18
  # $6.1: @IR_Int16_Type = new IR_Int16_Type(object_type = IR_Int16_Type, name = "i16")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int16_Type
  mov rbx, IR_Int16_Type[rip]
  mov [rax], rbx
  #     .name = "i16"
  lea rbx, .LABEL__string_186[rip] # "i16"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $6.1:rax 
  .loc 3 59 5
  # call(append_364, types.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $6.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 60 18
  # $7.1: @IR_Int32_Type = new IR_Int32_Type(object_type = IR_Int32_Type, name = "i32")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int32_Type
  mov rbx, IR_Int32_Type[rip]
  mov [rax], rbx
  #     .name = "i32"
  lea rbx, .LABEL__string_187[rip] # "i32"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $7.1:rax 
  .loc 3 60 5
  # call(append_364, types.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $7.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 61 18
  # $8.1: @IR_Int64_Type = new IR_Int64_Type(object_type = IR_Int64_Type, name = "i64")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Int64_Type
  mov rbx, IR_Int64_Type[rip]
  mov [rax], rbx
  #     .name = "i64"
  lea rbx, .LABEL__string_188[rip] # "i64"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $8.1:rax 
  .loc 3 61 5
  # call(append_364, types.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $8.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 62 18
  # $9.1: @IR_Nothing_Type = new IR_Nothing_Type(object_type = IR_Nothing_Type, name = "Nothing")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Nothing_Type
  mov rbx, IR_Nothing_Type[rip]
  mov [rax], rbx
  #     .name = "Nothing"
  lea rbx, .LABEL__string_189[rip] # "Nothing"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $9.1:rax 
  .loc 3 62 5
  # call(append_364, types.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $9.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 63 18
  # $10.1: @IR_Null_Type = new IR_Null_Type(object_type = IR_Null_Type, name = "Null")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Null_Type
  mov rbx, IR_Null_Type[rip]
  mov [rax], rbx
  #     .name = "Null"
  lea rbx, .LABEL__string_190[rip] # "Null"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $10.1:rax 
  .loc 3 63 5
  # call(append_364, types.1, $10.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $10.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 64 18
  # $11.1: @IR_Undefined_Type = new IR_Undefined_Type(object_type = IR_Undefined_Type, name = "Undefined")
  mov rdi, 16
  call malloc
  #     .object_type = IR_Undefined_Type
  mov rbx, IR_Undefined_Type[rip]
  mov [rax], rbx
  #     .name = "Undefined"
  lea rbx, .LABEL__string_191[rip] # "Undefined"
  mov [rax+8], rbx
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $11.1:rax 
  .loc 3 64 5
  # call(append_364, types.1, $11.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call append_364
  # [discarded value]: $11.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] 
  .loc 3 44 23
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $12.1:rax 
  .loc 3 45 26
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $12.1:[rbp-24] $13.1:rax 
  .loc 3 66 19
  # $14.1: @IR_Builder_Context = new IR_Builder_Context(parent = null, variables = $12.1, named_values = $13.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .parent = null
  mov QWORD PTR [rax], 0
  #     .variables = $12.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .named_values = $13.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $14.1:rax 
  .loc 3 36 29
  # $15.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $14.1:[rbp-24] $15.1:rax 
  .loc 3 39 24
  # $16.1: @Counter = new Counter(value = 0)
  mov [rbp-32], rax
  mov rdi, 8
  call malloc
  #     .value = 0
  mov QWORD PTR [rax], 0
  # [live values]: compilation_unit.1:[rbp-8] types.1:[rbp-16] $14.1:[rbp-24] $15.1:[rbp-32] $16.1:rax 
  .loc 3 65 12
  # $17.1: @IR_Builder = new IR_Builder(context = $14.1, compilation_unit = compilation_unit.1, types = types.1, named_functions = $15.1, current_block = null, current_loop = null, counter = $16.1)
  mov [rbp-40], rax
  mov rdi, 56
  call malloc
  #     .context = $14.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .compilation_unit = compilation_unit.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+8], r15
  #     .types = types.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+16], r14
  #     .named_functions = $15.1
  mov r13, [rbp-32]
  mov QWORD PTR [rax+24], r13
  #     .current_block = null
  mov QWORD PTR [rax+32], 0
  #     .current_loop = null
  mov QWORD PTR [rax+40], 0
  #     .counter = $16.1
  mov r12, [rbp-40]
  mov QWORD PTR [rax+48], r12
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: types.1
  # [discarded value]: compilation_unit.1
  # [live values]: $17.1:rax 
  .loc 3 65 5
  # return($17.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_builder_65__end
  # [discarded value]: $17.1
  # [live values]: 
.LABEL__create_ir_builder_65__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_builder_65__stack_frame_size: .word 48

  .loc 3 72 8
  .text
get_named_type_66:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_type_66__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_type_66__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 73 22
  # $1.1: @List = load_struct_member(self.1, types)
  mov rax, [rdi+16]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  .loc 3 73 22
  # types_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: name.1:rsi types_item.1:rbx 
  # jump(.LABEL__get_named_type_66__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
.LABEL__get_named_type_66__2:
  # types_item.2: @List_Item = phi(types_item.1, types_item.5)
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] 
  .loc 3 74 12
  # $3.1: bool = types_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_type_66__3, .LABEL__get_named_type_66__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_type_66__4
.LABEL__get_named_type_66__3:
  .loc 3 75 20
  # type.1: @IR_Type = load_struct_member(types_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:rax:[rbp-8] $3.1:[rbp-17] type.1:rbx 
  .loc 3 76 25
  # $6.1: @String = load_struct_member(type.1, name)
  mov r15, [rbx+8]
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:rax:[rbp-8] $3.1:[rbp-17] type.1:rbx $6.1:r15 
  .loc 3 76 13
  # $7.1: bool = call(equals_392, name.1, $6.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-25], rbx
  call equals_392
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__get_named_type_66__5, .LABEL__get_named_type_66__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_type_66__6
.LABEL__get_named_type_66__5:
  .loc 3 77 13
  # return(type.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_type_66__end
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] $7.1:[rbp-26] 
.LABEL__get_named_type_66__6:
  .loc 3 79 22
  # types_item.5: @List_Item = load_struct_member(types_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] $7.1:[rbp-26] types_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_named_type_66__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_named_type_66__2
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] $7.1:[rbp-26] types_item.5:[rbp-8] 
  # [discarded value]: types_item.5
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__get_named_type_66__4:
  .loc 3 81 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_type_66__end
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] 
  # [discarded value]: types_item.2
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] types_item.1:[rbp-8] 
  # [discarded value]: types_item.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_type_66__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_type_66__stack_frame_size: .word 32

  .loc 3 84 8
  .text
get_struct_statement_67:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_statement_67__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_statement_67__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 85 32
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: name.1:rsi $1.1:rax 
  .loc 3 85 32
  # $2.1: @List = load_struct_member($1.1, types)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: name.1:rsi $2.1:rbx 
  .loc 3 85 32
  # type_statements_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov rax, [rbx]
  # [discarded value]: $2.1
  # [live values]: name.1:rsi type_statements_item.1:rax 
  # jump(.LABEL__get_struct_statement_67__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_struct_statement_67__2:
  # type_statements_item.2: @List_Item = phi(type_statements_item.1, type_statements_item.5)
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] 
  .loc 3 86 12
  # $4.1: bool = type_statements_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__get_struct_statement_67__3, .LABEL__get_struct_statement_67__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_struct_statement_67__4
.LABEL__get_struct_statement_67__3:
  .loc 3 87 30
  # type_statement.1: @AST_Statement = load_struct_member(type_statements_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:rax:[rbp-8] $4.1:[rbp-17] type_statement.1:rbx 
  .loc 3 88 13
  # $7.1: bool = call(is_389, type_statement.1, AST_Struct_Statement)
  mov rdi, rbx
  mov rsi, AST_Struct_Statement[rip]
  mov [rbp-25], rbx
  call is_389
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__get_struct_statement_67__5, .LABEL__get_struct_statement_67__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_struct_statement_67__6
.LABEL__get_struct_statement_67__5:
  .loc 3 89 34
  # type_statement.1: @AST_Struct_Statement = type_statement.1
  mov rax, [rbp-25]
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:rax 
  .loc 3 90 17
  # $9.1: @Identifier_Token = load_struct_member(type_statement.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:rax $9.1:rbx 
  .loc 3 90 17
  # $10.1: @String = load_struct_member($9.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:rax $10.1:r15 
  .loc 3 90 17
  # $11.1: bool = call(equals_392, $10.1, name.1)
  mov rdi, r15
  mov rsi, [rbp-16]
  mov [rbp-34], rax
  call equals_392
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__get_struct_statement_67__7, .LABEL__get_struct_statement_67__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__get_struct_statement_67__6
.LABEL__get_struct_statement_67__7:
  .loc 3 91 24
  # $12.1: @AST_Struct_Statement = type_statement.1
  mov rax, [rbp-34]
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:[rbp-35] $12.1:rax 
  .loc 3 91 17
  # return($12.1)
  mov [rbp-43], rax
  jmp .LABEL__get_struct_statement_67__end
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:[rbp-35] 
.LABEL__get_struct_statement_67__6:
  .loc 3 94 32
  # type_statements_item.5: @List_Item = load_struct_member(type_statements_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:[rbp-35] type_statements_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_struct_statement_67__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_struct_statement_67__2
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:[rbp-35] type_statements_item.5:[rbp-8] 
  # [discarded value]: type_statements_item.5
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] type_statement.1:[rbp-34] 
  # [discarded value]: type_statement.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] type_statement.1:[rbp-25] 
  # [discarded value]: type_statement.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] 
.LABEL__get_struct_statement_67__4:
  .loc 3 96 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_struct_statement_67__end
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] type_statements_item.2:[rbp-8] 
  # [discarded value]: type_statements_item.2
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] type_statements_item.1:[rbp-8] 
  # [discarded value]: type_statements_item.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_struct_statement_67__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_statement_67__stack_frame_size: .word 48

  .loc 3 99 8
  .text
add_variable_68:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_variable_68__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_variable_68__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 3 100 5
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 3 100 5
  # $2.1: @List = load_struct_member($1.1, variables)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: variable.1:rsi $2.1:rbx 
  .loc 3 100 5
  # call(prepend_365, $2.1, variable.1)
  mov rdi, rbx
  mov [rbp-8], rsi
  call prepend_365
  # [discarded value]: $2.1
  # [live values]: variable.1:[rbp-8] 
  .loc 3 101 5
  # return(variable.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_variable_68__end
  # [discarded value]: variable.1
  # [live values]: 
.LABEL__add_variable_68__end:
  mov rsp, rbp
  pop rbp
  ret

add_variable_68__stack_frame_size: .word 16

  .loc 3 104 8
  .text
get_variable_69:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_69__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_69__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  .loc 3 105 19
  # context.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: name.1:rsi context.1:rax 
  # jump(.LABEL__get_variable_69__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_variable_69__2:
  # context.2: @IR_Builder_Context = phi(context.1, context.4)
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] 
  .loc 3 107 25
  # $2.1: @List = load_struct_member(context.2, variables)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:rax:[rbp-8] $2.1:rbx 
  .loc 3 107 25
  # variables.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:rax 
  # jump(.LABEL__get_variable_69__4)
  mov [rbp-24], rax
.LABEL__get_variable_69__4:
  .loc 3 108 16
  # $4.1: bool = call(has_next_378, variables.1)
  mov rdi, [rbp-24]
  call has_next_378
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__get_variable_69__5, .LABEL__get_variable_69__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_variable_69__6
.LABEL__get_variable_69__5:
  .loc 3 109 28
  # variable.1: @IR_Variable = call(next_379, variables.1)
  mov rdi, [rbp-24]
  call next_379
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax 
  .loc 3 110 29
  # $7.1: @String = load_struct_member(variable.1, name)
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:rax $7.1:rbx 
  .loc 3 110 17
  # $8.1: bool = call(equals_392, name.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call equals_392
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_69__7, .LABEL__get_variable_69__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_variable_69__4
.LABEL__get_variable_69__7:
  .loc 3 111 17
  # return(variable.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_variable_69__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] variable.1:[rbp-33] 
  # [discarded value]: variable.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__get_variable_69__6:
  .loc 3 114 19
  # context.4: @IR_Builder_Context = load_struct_member(context.2, parent)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] 
  .loc 3 115 13
  # $10.1: bool = context.4 == null
  cmp rbx, 0
  sete al
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:rbx:[rbp-8] $10.1:rax 
  # jump($10.1, .LABEL__get_variable_69__10, .LABEL__get_variable_69__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-8], rbx
  jz .LABEL__get_variable_69__2
.LABEL__get_variable_69__10:
  .loc 3 116 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_variable_69__end
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] context.4:[rbp-8] 
  # [discarded value]: context.4
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] context.2:[rbp-8] variables.1:[rbp-24] 
  # [discarded value]: variables.1
  # [discarded value]: context.2
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] context.1:[rbp-8] 
  # [discarded value]: context.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_variable_69__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_69__stack_frame_size: .word 48

  .loc 3 121 8
  .text
get_variable_value_70:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_70__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_70__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 3 122 9
  # $1.1: bool = call(is_389, variable.1, IR_Global_Variable)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, IR_Global_Variable[rip]
  call is_389
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__get_variable_value_70__2, .LABEL__get_variable_value_70__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_variable_value_70__3
.LABEL__get_variable_value_70__2:
  .loc 3 123 52
  # $2.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] variable.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx 
  .loc 5 156 31
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-25] $3.1:rax 
  .loc 5 157 19
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:rax 
  .loc 3 123 16
  # $5.1: @IR_Global_Variable_Value = new IR_Global_Variable_Value(object_type = IR_Global_Variable_Value, type = $2.1, variable = variable.1, dump = anonymous_function_5_160.address, creator_instruction = null, user_instructions = $3.1, links = $4.1)
  mov [rbp-41], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Value
  mov rbx, IR_Global_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $2.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $3.1
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  #     .links = $4.1
  mov r14, [rbp-41]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_5_160.address
  lea r13, anonymous_function_5_160[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-16]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] variable.1:r13:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 3 123 9
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__get_variable_value_70__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__get_variable_value_70__3:
  .loc 3 125 37
  # $6.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] $6.1:rbx 
  .loc 3 125 37
  # current_block_instruction.1: @IR_Instruction = load_struct_member($6.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:r15 
  # jump(.LABEL__get_variable_value_70__5)
  mov [rbp-25], r15
.LABEL__get_variable_value_70__5:
  # current_block_instruction.2: @IR_Instruction = phi(current_block_instruction.1, current_block_instruction.7)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  .loc 3 126 12
  # $8.1: bool = current_block_instruction.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__get_variable_value_70__6, .LABEL__get_variable_value_70__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_variable_value_70__7
.LABEL__get_variable_value_70__6:
  .loc 3 127 13
  # $9.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $9.1:rbx 
  .loc 3 127 13
  # $10.1: bool = $9.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $10.1:r15 
  .loc 3 127 13
  # $11.1: bool = $10.1
  mov [rbp-27], r15b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:r15 
  # jump($11.1, .LABEL__get_variable_value_70__8, .LABEL__get_variable_value_70__9)
  test r15b, r15b
  mov [rbp-27], r15b
  jz .LABEL__get_variable_value_70__9
.LABEL__get_variable_value_70__8:
  .loc 3 127 63
  # $12.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $12.1:rbx 
  .loc 3 127 63
  # $13.1: @IR_Variable = load_struct_member($12.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $13.1:r15 
  .loc 3 127 63
  # $14.1: bool = $13.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $14.1:rbx 
  .loc 3 127 13
  # $11.2: bool = $14.1
  mov [rbp-28], bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:rbx:[rbp-27] 
  # jump(.LABEL__get_variable_value_70__9)
  mov [rbp-27], bl
.LABEL__get_variable_value_70__9:
  .loc 3 127 13
  # $11.3: bool = phi($11.1, $11.2)
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # jump($11.3, .LABEL__get_variable_value_70__10, .LABEL__get_variable_value_70__11)
  mov al, [rbp-27]
  test al, al
  jz .LABEL__get_variable_value_70__11
.LABEL__get_variable_value_70__10:
  .loc 3 128 20
  # $15.1: @IR_Variable_Value = load_struct_member(current_block_instruction.2, result_value)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:rax:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] $15.1:rbx 
  .loc 3 128 13
  # return($15.1)
  mov rax, rbx
  mov [rbp-35], rbx
  jmp .LABEL__get_variable_value_70__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
.LABEL__get_variable_value_70__11:
  .loc 3 130 37
  # current_block_instruction.7: @IR_Instruction = load_struct_member(current_block_instruction.2, prev_instruction)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:rbx:[rbp-25] 
  # jump(.LABEL__get_variable_value_70__5)
  mov [rbp-25], rbx
  jmp .LABEL__get_variable_value_70__5
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] current_block_instruction.7:[rbp-25] 
  # [discarded value]: current_block_instruction.7
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] $11.3:[rbp-27] 
  # [discarded value]: $11.3
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] $11.2:[rbp-27] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
.LABEL__get_variable_value_70__7:
  .loc 3 132 23
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:rbx 
  .loc 3 132 76
  # $18.1: @IR_Variable_Value = call(create_variable_value_71, self.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-34], rbx
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $18.1:rax 
  .loc 3 132 50
  # $19.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $17.1:[rbp-34] $19.1:rax 
  .loc 3 132 23
  # instruction.1: @IR_Instruction = call(prepend_167, $17.1, $19.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call prepend_167
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] instruction.1:rax 
  .loc 3 133 12
  # $21.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] $21.1:rbx 
  .loc 3 133 5
  # return($21.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_variable_value_70__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] current_block_instruction.2:[rbp-25] 
  # [discarded value]: current_block_instruction.2
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] current_block_instruction.1:[rbp-25] 
  # [discarded value]: current_block_instruction.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_variable_value_70__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_70__stack_frame_size: .word 48

  .loc 3 136 8
  .text
create_variable_value_71:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_variable_value_71__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_variable_value_71__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: variable.1:rsi 
  .loc 3 137 41
  # $1.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rsi+24]
  # [live values]: variable.1:rsi $1.1:rax 
  .loc 5 156 31
  # $2.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 157 19
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: variable.1:[rbp-16] $1.1:[rbp-8] $2.1:[rbp-24] $3.1:rax 
  .loc 3 137 12
  # $4.1: @IR_Variable_Value = new IR_Variable_Value(object_type = IR_Variable_Value, type = $1.1, variable = undefined, version = undefined, dump = anonymous_function_7_162.address, creator_instruction = null, user_instructions = $2.1, links = $3.1)
  mov [rbp-32], rax
  mov rdi, 64
  call malloc
  #     .object_type = IR_Variable_Value
  mov rbx, IR_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .links = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_7_162.address
  lea r13, anonymous_function_7_162[rip]
  mov [rax+40], r13
  #     .variable = undefined
  #     .version = undefined
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: variable.1:[rbp-16] $4.1:rax 
  .loc 3 137 12
  # $5.1: @IR_Variable_Value = call(init_163, $4.1, variable.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call init_163
  # [discarded value]: $4.1
  # [discarded value]: variable.1
  # [live values]: $5.1:rax 
  .loc 3 137 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__create_variable_value_71__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__create_variable_value_71__end:
  mov rsp, rbp
  pop rbp
  ret

create_variable_value_71__stack_frame_size: .word 32

  .loc 3 140 8
  .text
get_named_function_72:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_72__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_72__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @Identifier_Token = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 141 44
  # $1.1: @String = load_struct_member(name.1, lexeme)
  mov rax, [rsi+8]
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx $1.1:rax 
  .loc 3 141 20
  # function.1: @IR_Function = call(get_named_function_73, self.1, $1.1, argument_types.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdx
  call get_named_function_73
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax 
  .loc 3 142 9
  # $3.1: bool = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__get_named_function_72__2, .LABEL__get_named_function_72__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__get_named_function_72__3
.LABEL__get_named_function_72__2:
  .loc 3 143 23
  # $4.1: @String = call(clone_391, "Undefined function: ")
  lea rdi, .LABEL__string_192[rip] # "Undefined function: "
  call clone_391
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax 
  .loc 3 143 60
  # $5.1: @String = load_struct_member(name.1, lexeme)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: name.1:rbx:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $4.1:rax $5.1:r15 
  .loc 3 143 23
  # $6.1: @String = call(append_400, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] $6.1:rax 
  .loc 3 143 23
  # message.1: @String = call(append_400, $6.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # " :: ("
  call append_400
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:rax 
  .loc 3 144 30
  # argument_types.1: @List_Iterator = call(create_iterator_375, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-33], rax
  call create_iterator_375
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:rax 
  # jump(.LABEL__get_named_function_72__4)
  mov [rbp-41], rax
.LABEL__get_named_function_72__4:
  .loc 3 145 16
  # $9.1: bool = call(has_next_378, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_378
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:rax 
  # jump($9.1, .LABEL__get_named_function_72__5, .LABEL__get_named_function_72__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_72__6
.LABEL__get_named_function_72__5:
  .loc 3 146 33
  # argument_type.1: @IR_Type = call(next_379, argument_types.1)
  mov rdi, [rbp-41]
  call next_379
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] argument_type.1:rax 
  .loc 3 147 28
  # $12.1: @String = load_struct_member(argument_type.1, name)
  mov rbx, [rax+8]
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $12.1:rbx 
  .loc 3 147 13
  # $13.1: @String = call(append_400, message.1, $12.1)
  mov rdi, [rbp-33]
  mov rsi, rbx
  call append_400
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 148 17
  # $14.1: bool = call(has_next_378, argument_types.1)
  mov rdi, [rbp-41]
  call has_next_378
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:rax 
  # jump($14.1, .LABEL__get_named_function_72__7, .LABEL__get_named_function_72__4)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_72__4
.LABEL__get_named_function_72__7:
  .loc 3 149 17
  # $15.1: @String = call(append_400, message.1, ", ")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_40[rip] # ", "
  call append_400
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # jump(.LABEL__get_named_function_72__4)
  jmp .LABEL__get_named_function_72__4
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $14.1:[rbp-43] 
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__get_named_function_72__6:
  .loc 3 152 9
  # $16.1: @String = call(append_400, message.1, ")")
  mov rdi, [rbp-33]
  lea rsi, .LABEL__string_194[rip] # ")"
  call append_400
  # [discarded value]: $16.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  .loc 3 153 15
  # $17.1: @Source_Location = load_struct_member(name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:rax:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] $17.1:rbx 
  .loc 3 153 9
  # call(abort_360, $17.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-33]
  call abort_360
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] message.1:[rbp-33] argument_types.1:[rbp-41] 
  # [discarded value]: argument_types.1
  # [discarded value]: message.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_named_function_72__3:
  .loc 3 155 5
  # return(function.1)
  mov rax, [rbp-24]
  jmp .LABEL__get_named_function_72__end
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-8] argument_types.1:[rbp-16] function.1:[rbp-24] 
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_72__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_72__stack_frame_size: .word 48

  .loc 3 158 8
  .text
get_named_function_73:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_73__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_73__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # argument_types.1: @List = load_variable(argument_types)
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx 
  .loc 3 159 9
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi argument_types.1:rdx function.1:rax 
  .loc 3 160 27
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi argument_types.1:rdx function.1:rax $1.1:rbx 
  .loc 3 160 27
  # named_functions.1: @List_Iterator = call(create_iterator_375, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_375
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_73__2)
  mov [rbp-32], rax
.LABEL__get_named_function_73__2:
  # function.5: @IR_Function = phi(function.1, function.5, function.3)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 161 12
  # $3.1: bool = call(has_next_378, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_378
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_73__3, .LABEL__get_named_function_73__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_73__4
.LABEL__get_named_function_73__3:
  .loc 3 162 30
  # named_function.1: @IR_Function = call(next_379, named_functions.1)
  mov rdi, [rbp-32]
  call next_379
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 163 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 163 13
  # $7.1: bool = call(equals_392, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_392
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:rax 
  # jump($7.1, .LABEL__get_named_function_73__5, .LABEL__get_named_function_73__2)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_73__2
.LABEL__get_named_function_73__5:
  .loc 3 164 17
  # is_match.1: bool = true
  mov al, 1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:rax 
  .loc 3 165 34
  # argument_types.1: @List_Iterator = call(create_iterator_375, argument_types.1)
  mov rdi, [rbp-16]
  mov [rbp-43], al
  call create_iterator_375
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax 
  .loc 3 166 45
  # $9.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:rax $9.1:r15 
  .loc 3 166 45
  # named_function_parameters.1: @List_Iterator = call(create_iterator_375, $9.1)
  mov rdi, r15
  mov [rbp-51], rax
  call create_iterator_375
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_73__7)
  mov [rbp-59], rax
.LABEL__get_named_function_73__7:
  .loc 3 167 20
  # $12.1: bool = call(has_next_378, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_378
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_73__10, .LABEL__get_named_function_73__11)
  test al, al
  mov [rbp-60], al
  jz .LABEL__get_named_function_73__11
.LABEL__get_named_function_73__10:
  .loc 3 167 49
  # $12.2: bool = call(has_next_378, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_378
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:rax:[rbp-60] 
  # jump(.LABEL__get_named_function_73__11)
  mov [rbp-60], al
.LABEL__get_named_function_73__11:
  .loc 3 167 20
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($12.3, .LABEL__get_named_function_73__8, .LABEL__get_named_function_73__9)
  mov al, [rbp-60]
  test al, al
  jz .LABEL__get_named_function_73__9
.LABEL__get_named_function_73__8:
  .loc 3 168 37
  # argument_type.1: @IR_Type = call(next_379, argument_types.1)
  mov rdi, [rbp-51]
  call next_379
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 169 48
  # named_function_parameter.1: @IR_Function_Parameter = call(next_379, named_function_parameters.1)
  mov rdi, [rbp-59]
  mov [rbp-68], rax
  call next_379
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] named_function_parameter.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 170 21
  # $18.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] argument_type.1:[rbp-68] $18.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 170 21
  # $19.1: bool = call(accepts_75, $18.1, argument_type.1)
  mov rdi, rbx
  mov rsi, [rbp-68]
  call accepts_75
  # [discarded value]: $18.1
  # [discarded value]: argument_type.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $19.1:rax $12.2:[rbp-60] $12.3:[rbp-60] 
  .loc 3 170 21
  # $20.1: bool = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:rbx $12.2:[rbp-60] $12.3:[rbp-60] 
  # jump($20.1, .LABEL__get_named_function_73__12, .LABEL__get_named_function_73__7)
  test bl, bl
  mov [rbp-61], bl
  jz .LABEL__get_named_function_73__7
.LABEL__get_named_function_73__12:
  .loc 3 171 21
  # is_match.2: bool = false
  mov al, 0
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:rax:[rbp-43] 
  # jump(.LABEL__get_named_function_73__9)
  mov [rbp-43], al
.LABEL__get_named_function_73__9:
  # $21.1: bool = phi(is_match.2, is_match.1)
  mov al, [rbp-43]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:rax $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # jump($21.1, .LABEL__get_named_function_73__17, .LABEL__get_named_function_73__18)
  test al, al
  mov [rbp-62], al
  jz .LABEL__get_named_function_73__18
.LABEL__get_named_function_73__17:
  .loc 3 175 29
  # $22.1: bool = call(has_next_378, argument_types.1)
  mov rdi, [rbp-51]
  call has_next_378
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $22.1:rax 
  .loc 3 175 29
  # $23.1: bool = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $23.1:rbx 
  .loc 3 175 17
  # $21.2: bool = $23.1
  mov [rbp-63], bl
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:rbx:[rbp-62] 
  # jump(.LABEL__get_named_function_73__18)
  mov [rbp-62], bl
.LABEL__get_named_function_73__18:
  .loc 3 175 17
  # $24.1: bool = phi($21.1, $21.2)
  mov al, [rbp-62]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:rax 
  # jump($24.1, .LABEL__get_named_function_73__15, .LABEL__get_named_function_73__16)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_73__16
.LABEL__get_named_function_73__15:
  .loc 3 175 67
  # $25.1: bool = call(has_next_378, named_function_parameters.1)
  mov rdi, [rbp-59]
  call has_next_378
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $25.1:rax $21.2:[rbp-62] $24.1:[rbp-63] 
  .loc 3 175 67
  # $26.1: bool = $25.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $25.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $26.1:rbx $21.2:[rbp-62] $24.1:[rbp-63] 
  .loc 3 175 17
  # $24.2: bool = $26.1
  mov [rbp-64], bl
  # [discarded value]: $26.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:rbx:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump(.LABEL__get_named_function_73__16)
  mov [rbp-63], bl
.LABEL__get_named_function_73__16:
  .loc 3 175 17
  # $24.3: bool = phi($24.1, $24.2)
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # jump($24.3, .LABEL__get_named_function_73__19, .LABEL__get_named_function_73__2)
  mov al, [rbp-63]
  test al, al
  jz .LABEL__get_named_function_73__2
.LABEL__get_named_function_73__19:
  .loc 3 176 21
  # $27.1: bool = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:rax 
  # jump($27.1, .LABEL__get_named_function_73__21, .LABEL__get_named_function_73__22)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_73__22
.LABEL__get_named_function_73__21:
  .loc 3 177 21
  # call(abort_388, name.1)
  mov rdi, [rbp-24]
  call abort_388
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
.LABEL__get_named_function_73__22:
  .loc 3 179 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_73__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_73__2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] $27.1:[rbp-64] 
  # [discarded value]: $27.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $24.3:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $24.2:[rbp-63] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] $24.1:[rbp-63] 
  # [discarded value]: $24.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] $21.2:[rbp-62] 
  # [discarded value]: $21.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $21.1:[rbp-62] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: $21.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] is_match.2:[rbp-43] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $20.1:[rbp-61] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] $12.3:[rbp-60] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] $12.2:[rbp-60] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] $12.1:[rbp-60] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] is_match.1:[rbp-43] argument_types.1:[rbp-51] named_function_parameters.1:[rbp-59] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: argument_types.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $7.1:[rbp-42] 
  # [discarded value]: $7.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] 
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_73__4:
  .loc 3 183 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_73__end
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] argument_types.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: argument_types.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_73__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_73__stack_frame_size: .word 80

  .loc 3 186 8
  .text
get_named_function_74:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_function_74__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_function_74__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # function_type.1: @IR_Function_Type = load_variable(function_type)
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx 
  .loc 3 187 9
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi name.1:rsi function_type.1:rdx function.1:rax 
  .loc 3 188 27
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: name.1:rsi function_type.1:rdx function.1:rax $1.1:rbx 
  .loc 3 188 27
  # named_functions.1: @List_Iterator = call(create_iterator_375, $1.1)
  mov rdi, rbx
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_iterator_375
  # [discarded value]: $1.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:rax 
  # jump(.LABEL__get_named_function_74__2)
  mov [rbp-32], rax
.LABEL__get_named_function_74__2:
  # function.5: @IR_Function = phi(function.1, function.3, function.5)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  .loc 3 189 12
  # $3.1: bool = call(has_next_378, named_functions.1)
  mov rdi, [rbp-32]
  call has_next_378
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_named_function_74__3, .LABEL__get_named_function_74__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_named_function_74__4
.LABEL__get_named_function_74__3:
  .loc 3 190 30
  # named_function.1: @IR_Function = call(next_379, named_functions.1)
  mov rdi, [rbp-32]
  call next_379
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax 
  .loc 3 191 25
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rax+24]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax $6.1:rbx 
  .loc 3 191 13
  # $8.1: bool = call(equals_392, name.1, $6.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-41], rax
  call equals_392
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:rax 
  # jump($8.1, .LABEL__get_named_function_74__7, .LABEL__get_named_function_74__8)
  test al, al
  mov [rbp-42], al
  jz .LABEL__get_named_function_74__8
.LABEL__get_named_function_74__7:
  .loc 3 191 49
  # $9.1: @IR_Type = load_struct_member(named_function.1, return_type)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx 
  .loc 3 191 79
  # $10.1: @IR_Type = load_struct_member(function_type.1, return_type)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $9.1:rbx $10.1:r14 
  .loc 3 191 49
  # $11.1: bool = $9.1 == $10.1
  cmp rbx, r14
  sete r13b
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $11.1:r13 
  .loc 3 191 13
  # $8.2: bool = $11.1
  mov [rbp-43], r13b
  # [discarded value]: $11.1
  # [live values]: name.1:[rbp-24] function_type.1:r15:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $8.2:r13:[rbp-42] 
  # jump(.LABEL__get_named_function_74__8)
  mov [rbp-42], r13b
.LABEL__get_named_function_74__8:
  .loc 3 191 13
  # $12.1: bool = phi($8.1, $8.2)
  mov al, [rbp-42]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:rax 
  # jump($12.1, .LABEL__get_named_function_74__5, .LABEL__get_named_function_74__6)
  test al, al
  mov [rbp-43], al
  jz .LABEL__get_named_function_74__6
.LABEL__get_named_function_74__5:
  .loc 3 191 108
  # $13.1: @List = load_struct_member(named_function.1, parameters)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $13.1:rbx $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 191 108
  # $14.1: isize = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 191 142
  # $15.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r14, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $15.1:r14 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 191 142
  # $16.1: isize = load_struct_member($15.1, size)
  mov r13, [r14+16]
  # [discarded value]: $15.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $14.1:r15 $16.1:r13 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 191 108
  # $17.1: bool = $14.1 == $16.1
  cmp r15, r13
  sete r14b
  # [discarded value]: $16.1
  # [discarded value]: $14.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $17.1:r14 $8.2:[rbp-42] $12.1:[rbp-43] 
  .loc 3 191 13
  # $12.2: bool = $17.1
  mov [rbp-44], r14b
  # [discarded value]: $17.1
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rax:[rbp-41] $8.1:[rbp-42] $12.2:r14:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump(.LABEL__get_named_function_74__6)
  mov [rbp-43], r14b
.LABEL__get_named_function_74__6:
  .loc 3 191 13
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # jump($12.3, .LABEL__get_named_function_74__9, .LABEL__get_named_function_74__2)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__get_named_function_74__2
.LABEL__get_named_function_74__9:
  .loc 3 192 17
  # is_match.1: bool = true
  mov al, 1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax 
  .loc 3 193 44
  # $18.1: @List = load_struct_member(function_type.1, parameters)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: name.1:[rbp-24] function_type.1:rbx:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:rax $18.1:r15 
  .loc 3 193 44
  # function_type_parameters.1: @List_Iterator = call(create_iterator_375, $18.1)
  mov rdi, r15
  mov [rbp-44], al
  call create_iterator_375
  # [discarded value]: $18.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax 
  .loc 3 194 45
  # $20.1: @List = load_struct_member(named_function.1, parameters)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:rbx:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:rax $20.1:r15 
  .loc 3 194 45
  # named_function_parameters.1: @List_Iterator = call(create_iterator_375, $20.1)
  mov rdi, r15
  mov [rbp-52], rax
  call create_iterator_375
  # [discarded value]: $20.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:rax 
  # jump(.LABEL__get_named_function_74__11)
  mov [rbp-60], rax
.LABEL__get_named_function_74__11:
  .loc 3 195 20
  # $23.1: bool = call(has_next_378, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_378
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:rax 
  # jump($23.1, .LABEL__get_named_function_74__14, .LABEL__get_named_function_74__15)
  test al, al
  mov [rbp-61], al
  jz .LABEL__get_named_function_74__15
.LABEL__get_named_function_74__14:
  .loc 3 195 59
  # $23.2: bool = call(has_next_378, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_378
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:rax:[rbp-61] 
  # jump(.LABEL__get_named_function_74__15)
  mov [rbp-61], al
.LABEL__get_named_function_74__15:
  .loc 3 195 20
  # $23.3: bool = phi($23.1, $23.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($23.3, .LABEL__get_named_function_74__12, .LABEL__get_named_function_74__13)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__get_named_function_74__13
.LABEL__get_named_function_74__12:
  .loc 3 196 47
  # function_type_parameter.1: @IR_Function_Type_Parameter = call(next_379, function_type_parameters.1)
  mov rdi, [rbp-52]
  call next_379
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 197 48
  # named_function_parameter.1: @IR_Function_Parameter = call(next_379, named_function_parameters.1)
  mov rdi, [rbp-60]
  mov [rbp-69], rax
  call next_379
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] named_function_parameter.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 198 21
  # $29.1: @IR_Type = load_struct_member(named_function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: named_function_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] function_type_parameter.1:[rbp-69] $29.1:rbx $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 198 54
  # $30.1: @IR_Type = load_struct_member(function_type_parameter.1, type)
  mov rax, [rbp-69]
  mov r15, [rax+8]
  # [discarded value]: function_type_parameter.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $29.1:rbx $30.1:r15 $23.2:[rbp-61] $23.3:[rbp-61] 
  .loc 3 198 21
  # $31.1: bool = $29.1 != $30.1
  cmp rbx, r15
  setne al
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:rax $23.2:[rbp-61] $23.3:[rbp-61] 
  # jump($31.1, .LABEL__get_named_function_74__16, .LABEL__get_named_function_74__11)
  test al, al
  mov [rbp-62], al
  jz .LABEL__get_named_function_74__11
.LABEL__get_named_function_74__16:
  .loc 3 199 21
  # is_match.2: bool = false
  mov al, 0
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:rax:[rbp-44] 
  # jump(.LABEL__get_named_function_74__13)
  mov [rbp-44], al
.LABEL__get_named_function_74__13:
  # $32.1: bool = phi(is_match.2, is_match.1)
  mov al, [rbp-44]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:rax $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # jump($32.1, .LABEL__get_named_function_74__21, .LABEL__get_named_function_74__22)
  test al, al
  mov [rbp-63], al
  jz .LABEL__get_named_function_74__22
.LABEL__get_named_function_74__21:
  .loc 3 203 29
  # $33.1: bool = call(has_next_378, function_type_parameters.1)
  mov rdi, [rbp-52]
  call has_next_378
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $33.1:rax 
  .loc 3 203 29
  # $34.1: bool = $33.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $33.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $34.1:rbx 
  .loc 3 203 17
  # $32.2: bool = $34.1
  mov [rbp-64], bl
  # [discarded value]: $34.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:rbx:[rbp-63] 
  # jump(.LABEL__get_named_function_74__22)
  mov [rbp-63], bl
.LABEL__get_named_function_74__22:
  .loc 3 203 17
  # $35.1: bool = phi($32.1, $32.2)
  mov al, [rbp-63]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:[rbp-63] $35.1:rax 
  # jump($35.1, .LABEL__get_named_function_74__19, .LABEL__get_named_function_74__20)
  test al, al
  mov [rbp-64], al
  jz .LABEL__get_named_function_74__20
.LABEL__get_named_function_74__19:
  .loc 3 203 77
  # $36.1: bool = call(has_next_378, named_function_parameters.1)
  mov rdi, [rbp-60]
  call has_next_378
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $36.1:rax $32.2:[rbp-63] $35.1:[rbp-64] 
  .loc 3 203 77
  # $37.1: bool = $36.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $36.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $37.1:rbx $32.2:[rbp-63] $35.1:[rbp-64] 
  .loc 3 203 17
  # $35.2: bool = $37.1
  mov [rbp-65], bl
  # [discarded value]: $37.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:rbx:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] 
  # jump(.LABEL__get_named_function_74__20)
  mov [rbp-64], bl
.LABEL__get_named_function_74__20:
  .loc 3 203 17
  # $35.3: bool = phi($35.1, $35.2)
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] 
  # jump($35.3, .LABEL__get_named_function_74__23, .LABEL__get_named_function_74__2)
  mov al, [rbp-64]
  test al, al
  jz .LABEL__get_named_function_74__2
.LABEL__get_named_function_74__23:
  .loc 3 204 21
  # $38.1: bool = function.5 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] $38.1:rax 
  # jump($38.1, .LABEL__get_named_function_74__25, .LABEL__get_named_function_74__26)
  test al, al
  mov [rbp-65], al
  jz .LABEL__get_named_function_74__26
.LABEL__get_named_function_74__25:
  .loc 3 205 21
  # call(abort_388, name.1)
  mov rdi, [rbp-24]
  call abort_388
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] $38.1:[rbp-65] 
.LABEL__get_named_function_74__26:
  .loc 3 207 17
  # function.3: @IR_Function = named_function.1
  mov rax, [rbp-41]
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] $38.1:[rbp-65] function.3:rax:[rbp-8] 
  # jump(.LABEL__get_named_function_74__2)
  mov [rbp-8], rax
  jmp .LABEL__get_named_function_74__2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] $38.1:[rbp-65] function.3:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] $38.1:[rbp-65] 
  # [discarded value]: $38.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $35.3:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] 
  # [discarded value]: $35.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $35.2:[rbp-64] $32.2:[rbp-63] $35.1:[rbp-64] 
  # [discarded value]: $35.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:[rbp-63] $35.1:[rbp-64] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:[rbp-63] $35.1:[rbp-64] 
  # [discarded value]: $35.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:[rbp-63] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] $32.2:[rbp-63] 
  # [discarded value]: $32.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $32.1:[rbp-63] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: $32.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] is_match.2:[rbp-44] 
  # [discarded value]: is_match.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $31.1:[rbp-62] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $31.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] $23.3:[rbp-61] 
  # [discarded value]: $23.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] $23.2:[rbp-61] 
  # [discarded value]: $23.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] $23.1:[rbp-61] 
  # [discarded value]: $23.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] is_match.1:[rbp-44] function_type_parameters.1:[rbp-52] named_function_parameters.1:[rbp-60] 
  # [discarded value]: named_function_parameters.1
  # [discarded value]: function_type_parameters.1
  # [discarded value]: is_match.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $12.3:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.3
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $12.2:[rbp-43] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] $8.2:[rbp-42] 
  # [discarded value]: $8.2
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] named_function.1:[rbp-41] $8.1:[rbp-42] 
  # [discarded value]: $8.1
  # [discarded value]: named_function.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
.LABEL__get_named_function_74__4:
  .loc 3 211 5
  # return(function.5)
  mov rax, [rbp-8]
  jmp .LABEL__get_named_function_74__end
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] $3.1:[rbp-33] 
  # [discarded value]: $3.1
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] function.5:[rbp-8] 
  # [discarded value]: function.5
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [live values]: name.1:[rbp-24] function_type.1:[rbp-16] function.1:[rbp-8] named_functions.1:[rbp-32] 
  # [discarded value]: named_functions.1
  # [discarded value]: function.1
  # [discarded value]: function_type.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_function_74__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_function_74__stack_frame_size: .word 80

  .loc 3 214 8
  .text
accepts_75:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_75__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_75__1:
  # self.1: @IR_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @IR_Type = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 3 215 9
  # $1.1: bool = self.1 == other.1
  cmp rdi, rsi
  sete al
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 3 215 9
  # $2.1: bool = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $2.1:rax 
  # jump($2.1, .LABEL__accepts_75__3, .LABEL__accepts_75__2)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__accepts_75__2
.LABEL__accepts_75__3:
  .loc 3 215 9
  # $2.3: bool = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # jump($2.3, .LABEL__accepts_75__4, .LABEL__accepts_75__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__accepts_75__5
.LABEL__accepts_75__4:
  .loc 3 216 9
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
.LABEL__accepts_75__5:
  .loc 3 218 9
  # $4.1: bool = call(is_389, self.1, IR_Pointer_Type)
  mov rdi, [rbp-17]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__accepts_75__7, .LABEL__accepts_75__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_75__8
.LABEL__accepts_75__7:
  .loc 3 219 20
  # self.1: @IR_Pointer_Type = self.1
  mov rax, [rbp-17]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax 
  .loc 3 220 13
  # $6.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax $6.1:rbx 
  .loc 3 220 13
  # $7.1: bool = call(is_389, $6.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-26], rax
  call is_389
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__accepts_75__9, .LABEL__accepts_75__10)
  test al, al
  mov [rbp-27], al
  jz .LABEL__accepts_75__10
.LABEL__accepts_75__9:
  .loc 3 221 17
  # stop.1: bool = true
  mov al, 1
  # [discarded value]: stop.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # jump(.LABEL__accepts_75__10)
.LABEL__accepts_75__10:
  .loc 3 223 13
  # $8.1: bool = call(is_389, other.1, IR_Pointer_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  # jump($8.1, .LABEL__accepts_75__11, .LABEL__accepts_75__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__accepts_75__12
.LABEL__accepts_75__11:
  .loc 3 224 25
  # other.1: @IR_Pointer_Type = other.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax 
  .loc 3 225 17
  # $10.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rbx, [rbp-26]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 
  .loc 3 225 38
  # $11.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r14, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $10.1:r15 $11.1:r14 
  .loc 3 225 17
  # $12.1: bool = $10.1 == $11.1
  cmp r15, r14
  sete r13b
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rbx:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax $12.1:r13 
  # jump($12.1, .LABEL__accepts_75__13, .LABEL__accepts_75__14)
  test r13b, r13b
  mov [rbp-36], rax
  mov [rbp-37], r13b
  jz .LABEL__accepts_75__14
.LABEL__accepts_75__13:
  .loc 3 226 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
.LABEL__accepts_75__14:
  .loc 3 228 17
  # $13.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $13.1:rbx 
  .loc 3 228 17
  # $14.1: bool = call(is_389, $13.1, IR_Any_Type)
  mov rdi, rbx
  mov rsi, IR_Any_Type[rip]
  call is_389
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:rax 
  # jump($14.1, .LABEL__accepts_75__16, .LABEL__accepts_75__17)
  test al, al
  mov [rbp-38], al
  jz .LABEL__accepts_75__17
.LABEL__accepts_75__16:
  .loc 3 229 17
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
.LABEL__accepts_75__17:
  .loc 3 231 17
  # $15.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $15.1:rbx 
  .loc 3 231 17
  # $17.1: bool = call(is_389, $15.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:rax 
  # jump($17.1, .LABEL__accepts_75__19, .LABEL__accepts_75__20)
  test al, al
  mov [rbp-39], al
  jz .LABEL__accepts_75__20
.LABEL__accepts_75__19:
  .loc 3 231 57
  # $18.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov rax, [rbp-36]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:rax:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $18.1:rbx 
  .loc 3 231 57
  # $17.2: bool = call(is_389, $18.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:rax:[rbp-39] 
  # jump(.LABEL__accepts_75__20)
  mov [rbp-39], al
.LABEL__accepts_75__20:
  .loc 3 231 17
  # $17.3: bool = phi($17.1, $17.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # jump($17.3, .LABEL__accepts_75__21, .LABEL__accepts_75__22)
  mov al, [rbp-39]
  test al, al
  jz .LABEL__accepts_75__22
.LABEL__accepts_75__21:
  .loc 3 232 25
  # $21.1: @IR_Struct_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx 
  .loc 3 232 75
  # $23.1: @IR_Struct_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $21.1:rbx $23.1:r14 
  .loc 3 232 24
  # $24.1: bool = call(is_base_type_151, $21.1, $23.1)
  mov rdi, rbx
  mov rsi, r14
  call is_base_type_151
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $24.1:rax 
  .loc 3 232 17
  # return($24.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_75__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
.LABEL__accepts_75__22:
  .loc 3 234 20
  # $25.1: @IR_Type = load_struct_member(self.1, pointed_type)
  mov rax, [rbp-26]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx 
  .loc 3 234 46
  # $26.1: @IR_Type = load_struct_member(other.1, pointed_type)
  mov r15, [rbp-36]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:rax:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:r15:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $25.1:rbx $26.1:r14 
  .loc 3 234 20
  # $27.1: bool = call(accepts_75, $25.1, $26.1)
  mov rdi, rbx
  mov rsi, r14
  call accepts_75
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] $27.1:rax 
  .loc 3 234 13
  # return($27.1)
  mov [rbp-40], al
  jmp .LABEL__accepts_75__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] $17.3:[rbp-39] 
  # [discarded value]: $17.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] $17.2:[rbp-39] 
  # [discarded value]: $17.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] $17.1:[rbp-39] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] $14.1:[rbp-38] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] $12.1:[rbp-37] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] other.1:[rbp-36] 
  # [discarded value]: other.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
.LABEL__accepts_75__12:
  .loc 3 236 13
  # $28.1: bool = call(is_389, other.1, IR_Null_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:rax 
  # jump($28.1, .LABEL__accepts_75__25, .LABEL__accepts_75__26)
  test al, al
  mov [rbp-29], al
  jz .LABEL__accepts_75__26
.LABEL__accepts_75__25:
  .loc 3 237 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
.LABEL__accepts_75__26:
  .loc 3 239 9
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] $28.1:[rbp-29] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] $8.1:[rbp-28] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] self.1:[rbp-26] 
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
.LABEL__accepts_75__8:
  .loc 3 241 9
  # $29.1: bool = call(is_389, self.1, IR_Function_Type)
  mov rdi, [rbp-17]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:rax 
  # jump($29.1, .LABEL__accepts_75__29, .LABEL__accepts_75__30)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_75__30
.LABEL__accepts_75__29:
  .loc 3 242 13
  # $30.1: bool = call(is_389, other.1, IR_Null_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:rax 
  # jump($30.1, .LABEL__accepts_75__31, .LABEL__accepts_75__32)
  test al, al
  mov [rbp-20], al
  jz .LABEL__accepts_75__32
.LABEL__accepts_75__31:
  .loc 3 243 13
  # return(true)
  mov al, 1
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
.LABEL__accepts_75__32:
  .loc 3 245 13
  # $31.1: bool = call(is_389, other.1, IR_Function_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:rax 
  # jump($31.1, .LABEL__accepts_75__34, .LABEL__accepts_75__30)
  test al, al
  mov [rbp-21], al
  jz .LABEL__accepts_75__30
.LABEL__accepts_75__34:
  .loc 3 246 24
  # self.1: @IR_Function_Type = self.1
  mov rax, [rbp-17]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax 
  .loc 3 247 25
  # other.1: @IR_Function_Type = other.1
  mov rbx, [rbp-9]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax other.1:rbx 
  .loc 3 248 40
  # $34.1: @List = load_struct_member(self.1, parameters)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax other.1:rbx $34.1:r15 
  .loc 3 248 40
  # self_parameters_item.1: @List_Item = load_struct_member($34.1, first_item)
  mov r14, [r15]
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax other.1:rbx self_parameters_item.1:r14 
  .loc 3 249 41
  # $36.1: @List = load_struct_member(other.1, parameters)
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax other.1:rbx self_parameters_item.1:r14 $36.1:r15 
  .loc 3 249 41
  # other_parameters_item.1: @List_Item = load_struct_member($36.1, first_item)
  mov r13, [r15]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax other.1:rbx self_parameters_item.1:r14 other_parameters_item.1:r13 
  # jump(.LABEL__accepts_75__36)
  mov [rbp-29], rax
  mov [rbp-37], rbx
  mov [rbp-45], r13
  mov [rbp-53], r14
.LABEL__accepts_75__36:
  # other_parameters_item.8: @List_Item = phi(other_parameters_item.1, other_parameters_item.5)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] 
  # self_parameters_item.2: @List_Item = phi(self_parameters_item.1, self_parameters_item.5)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] 
  .loc 3 250 20
  # $38.1: bool = self_parameters_item.2 != null
  cmp QWORD PTR [rbp-53], 0
  setne al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $38.1:rax 
  .loc 3 250 20
  # $39.1: bool = $38.1
  mov [rbp-54], al
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:rax 
  # jump($39.1, .LABEL__accepts_75__39, .LABEL__accepts_75__40)
  test al, al
  mov [rbp-54], al
  jz .LABEL__accepts_75__40
.LABEL__accepts_75__39:
  .loc 3 250 52
  # $40.1: bool = other_parameters_item.8 != null
  cmp QWORD PTR [rbp-45], 0
  setne al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $40.1:rax 
  .loc 3 250 20
  # $39.2: bool = $40.1
  mov [rbp-55], al
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:rax:[rbp-54] 
  # jump(.LABEL__accepts_75__40)
  mov [rbp-54], al
.LABEL__accepts_75__40:
  .loc 3 250 20
  # $39.3: bool = phi($39.1, $39.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:[rbp-54] $39.3:[rbp-54] 
  # jump($39.3, .LABEL__accepts_75__37, .LABEL__accepts_75__38)
  mov al, [rbp-54]
  test al, al
  jz .LABEL__accepts_75__38
.LABEL__accepts_75__37:
  .loc 3 251 38
  # self_parameter.1: @IR_Function_Type_Parameter = load_struct_member(self_parameters_item.2, data)
  mov rax, [rbp-53]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:rax:[rbp-53] $39.1:[rbp-54] self_parameter.1:rbx $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 252 39
  # other_parameter.1: @IR_Function_Type_Parameter = load_struct_member(other_parameters_item.8, data)
  mov r15, [rbp-45]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:r15:[rbp-45] self_parameters_item.2:rax:[rbp-53] $39.1:[rbp-54] self_parameter.1:rbx other_parameter.1:r14 $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 253 21
  # $45.1: @IR_Type = load_struct_member(self_parameter.1, type)
  mov r13, [rbx+8]
  # [discarded value]: self_parameter.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:r15:[rbp-45] self_parameters_item.2:rax:[rbp-53] $39.1:[rbp-54] other_parameter.1:r14 $45.1:r13 $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 253 49
  # $46.1: @IR_Type = load_struct_member(other_parameter.1, type)
  mov rbx, [r14+8]
  # [discarded value]: other_parameter.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:r15:[rbp-45] self_parameters_item.2:rax:[rbp-53] $39.1:[rbp-54] $45.1:r13 $46.1:rbx $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 253 21
  # $47.1: bool = call(accepts_75, $45.1, $46.1)
  mov rdi, r13
  mov rsi, rbx
  call accepts_75
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $47.1:rax $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 253 21
  # $48.1: bool = $47.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:rbx $39.2:[rbp-54] $39.3:[rbp-54] 
  # jump($48.1, .LABEL__accepts_75__41, .LABEL__accepts_75__42)
  test bl, bl
  mov [rbp-55], bl
  jz .LABEL__accepts_75__42
.LABEL__accepts_75__41:
  .loc 3 254 21
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] 
.LABEL__accepts_75__42:
  .loc 3 256 40
  # self_parameters_item.5: @List_Item = load_struct_member(self_parameters_item.2, next_item)
  mov rax, [rbp-53]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] self_parameters_item.5:rbx:[rbp-53] 
  .loc 3 257 41
  # other_parameters_item.5: @List_Item = load_struct_member(other_parameters_item.8, next_item)
  mov rax, [rbp-45]
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] self_parameters_item.5:rbx:[rbp-53] other_parameters_item.5:r15:[rbp-45] 
  # jump(.LABEL__accepts_75__36)
  mov [rbp-53], rbx
  mov [rbp-45], r15
  jmp .LABEL__accepts_75__36
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] self_parameters_item.5:[rbp-53] other_parameters_item.5:[rbp-45] 
  # [discarded value]: other_parameters_item.5
  # [discarded value]: self_parameters_item.5
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $48.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:[rbp-54] $39.3:[rbp-54] 
.LABEL__accepts_75__38:
  .loc 3 259 17
  # $51.1: bool = self_parameters_item.2 != null
  cmp QWORD PTR [rbp-53], 0
  setne al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $51.1:rax $39.2:[rbp-54] $39.3:[rbp-54] 
  .loc 3 259 17
  # $52.1: bool = $51.1
  mov [rbp-55], al
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:rax $39.2:[rbp-54] $39.3:[rbp-54] 
  # jump($52.1, .LABEL__accepts_75__45, .LABEL__accepts_75__44)
  test al, al
  mov [rbp-55], al
  jz .LABEL__accepts_75__44
.LABEL__accepts_75__45:
  .loc 3 259 17
  # $52.3: bool = phi($52.1, $52.2)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] 
  # jump($52.3, .LABEL__accepts_75__46, .LABEL__accepts_75__47)
  mov al, [rbp-55]
  test al, al
  jz .LABEL__accepts_75__47
.LABEL__accepts_75__46:
  .loc 3 260 17
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] 
.LABEL__accepts_75__47:
  .loc 3 262 20
  # $54.1: @IR_Type = load_struct_member(self.1, return_type)
  mov rax, [rbp-29]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] $54.1:rbx 
  .loc 3 262 45
  # $55.1: @IR_Type = load_struct_member(other.1, return_type)
  mov r15, [rbp-37]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:rax:[rbp-29] other.1:r15:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] $54.1:rbx $55.1:r14 
  .loc 3 262 20
  # $56.1: bool = call(accepts_75, $54.1, $55.1)
  mov rdi, rbx
  mov rsi, r14
  call accepts_75
  # [discarded value]: $55.1
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] $56.1:rax 
  .loc 3 262 13
  # return($56.1)
  mov [rbp-56], al
  jmp .LABEL__accepts_75__end
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.3:[rbp-55] 
  # [discarded value]: $52.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] 
.LABEL__accepts_75__44:
  .loc 3 259 49
  # $53.1: bool = other_parameters_item.8 != null
  cmp QWORD PTR [rbp-45], 0
  setne al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $53.1:rax 
  .loc 3 259 17
  # $52.2: bool = $53.1
  mov [rbp-56], al
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.2:rax:[rbp-55] 
  # jump(.LABEL__accepts_75__45)
  mov [rbp-55], al
  jmp .LABEL__accepts_75__45
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] $52.2:[rbp-55] 
  # [discarded value]: $52.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $52.1:[rbp-55] $39.2:[rbp-54] $39.3:[rbp-54] 
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:[rbp-54] $39.3:[rbp-54] 
  # [discarded value]: $39.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:[rbp-54] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] $39.2:[rbp-54] 
  # [discarded value]: $39.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] other_parameters_item.8:[rbp-45] self_parameters_item.2:[rbp-53] $39.1:[rbp-54] 
  # [discarded value]: $39.1
  # [discarded value]: self_parameters_item.2
  # [discarded value]: other_parameters_item.8
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] self.1:[rbp-29] other.1:[rbp-37] self_parameters_item.1:[rbp-53] other_parameters_item.1:[rbp-45] 
  # [discarded value]: other_parameters_item.1
  # [discarded value]: self_parameters_item.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] 
.LABEL__accepts_75__30:
  .loc 3 265 5
  # return(false)
  mov al, 0
  jmp .LABEL__accepts_75__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] $31.1:[rbp-21] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] $30.1:[rbp-20] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] $29.1:[rbp-19] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.3:[rbp-1] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__accepts_75__2:
  .loc 3 215 26
  # $2.2: bool = call(is_389, other.1, IR_Undefined_Type)
  mov rdi, [rbp-9]
  mov rsi, IR_Undefined_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__accepts_75__3)
  mov [rbp-1], al
  jmp .LABEL__accepts_75__3
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__accepts_75__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_75__stack_frame_size: .word 64

  .loc 3 268 8
  .text
create_temp_variable_76:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_variable_76__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_variable_76__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 269 52
  # $1.1: @String = call(clone_391, "$")
  mov [rbp-8], rdi
  lea rdi, .LABEL__string_195[rip] # "$"
  mov [rbp-16], rsi
  call clone_391
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  .loc 3 269 70
  # $2.1: @Counter = load_struct_member(self.1, counter)
  mov rbx, [rbp-8]
  mov r15, [rbx+48]
  # [discarded value]: self.1
  # [live values]: type.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 3 269 70
  # $3.1: isize = call(next_146, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call next_146
  # [discarded value]: $2.1
  # [live values]: type.1:[rbp-16] $1.1:[rbp-24] $3.1:rax 
  .loc 3 269 52
  # $4.1: @String = call(append_399, $1.1, $3.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_399
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: type.1:[rbp-16] $4.1:rax 
  .loc 5 467 20
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: type.1:[rbp-16] $4.1:[rbp-24] $5.1:rax 
  .loc 3 269 12
  # $6.1: @IR_Variable = new IR_Variable(object_type = IR_Variable, location = null, name = $4.1, type = type.1, values = $5.1)
  mov [rbp-32], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Variable
  mov rbx, IR_Variable[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .name = $4.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .type = type.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .values = $5.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: type.1
  # [live values]: $6.1:rax 
  .loc 3 269 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_variable_76__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__create_temp_variable_76__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_variable_76__stack_frame_size: .word 32

  .loc 3 272 8
  .text
create_temp_value_77:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_temp_value_77__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_temp_value_77__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 273 39
  # $1.1: @IR_Variable = call(create_temp_variable_76, self.1, type.1)
  mov [rbp-8], rdi
  call create_temp_variable_76
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 3 273 12
  # $2.1: @IR_Variable_Value = call(create_variable_value_71, self.1, $1.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_variable_value_71
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 3 273 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_temp_value_77__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_temp_value_77__end:
  mov rsp, rbp
  pop rbp
  ret

create_temp_value_77__stack_frame_size: .word 16

  .loc 3 276 8
  .text
append_78:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_78__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_78__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi instruction.1:rsi location.1:rdx 
  .loc 3 277 5
  # store_struct_member(instruction.1, location, location.1)
  mov QWORD PTR [rsi+8], rdx
  # [discarded value]: location.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 3 278 5
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: instruction.1:rsi $1.1:rax 
  .loc 3 278 5
  # $2.1: @IR_Instruction = call(append_168, $1.1, instruction.1)
  mov rdi, rax
  mov [rbp-8], rsi
  call append_168
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 3 279 12
  # $3.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rbx 
  .loc 3 279 5
  # return($3.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__append_78__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__append_78__end:
  mov rsp, rbp
  pop rbp
  ret

append_78__stack_frame_size: .word 16

  .loc 3 282 8
  .text
build_79:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_79__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_79__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 3 283 17
  # $1.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 283 17
  # $2.1: @List = load_struct_member($1.1, types)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 3 283 17
  # types.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] types.1:rax 
  # jump(.LABEL__build_79__2)
  mov [rbp-16], rax
.LABEL__build_79__2:
  .loc 3 284 12
  # $4.1: bool = call(has_next_378, types.1)
  mov rdi, [rbp-16]
  call has_next_378
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:rax 
  # jump($4.1, .LABEL__build_79__3, .LABEL__build_79__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__build_79__4
.LABEL__build_79__3:
  .loc 3 285 25
  # statement.1: @AST_Statement = call(next_379, types.1)
  mov rdi, [rbp-16]
  call next_379
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] statement.1:rax 
  .loc 3 286 9
  # $7.1: @IR_Type = call(convert_type_statement_80, self.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_type_statement_80
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # jump(.LABEL__build_79__2)
  jmp .LABEL__build_79__2
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__build_79__4:
  .loc 3 289 28
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $8.1:rbx 
  .loc 3 289 28
  # $9.1: @List = load_struct_member($8.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] $9.1:r15 
  .loc 3 289 28
  # global_variables.1: @List_Iterator = call(create_iterator_375, $9.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:rax 
  # jump(.LABEL__build_79__5)
  mov [rbp-25], rax
.LABEL__build_79__5:
  .loc 3 290 12
  # $11.1: bool = call(has_next_378, global_variables.1)
  mov rdi, [rbp-25]
  call has_next_378
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__build_79__6, .LABEL__build_79__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__build_79__7
.LABEL__build_79__6:
  .loc 3 291 34
  # variable_statement.1: @AST_Variable_Statement = call(next_379, global_variables.1)
  mov rdi, [rbp-25]
  call next_379
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] variable_statement.1:rax 
  .loc 3 292 9
  # call(convert_variable_statement_104, self.1, variable_statement.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call convert_variable_statement_104
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # jump(.LABEL__build_79__5)
  jmp .LABEL__build_79__5
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__build_79__7:
  .loc 3 295 21
  # $14.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $14.1:rbx 
  .loc 3 295 21
  # $15.1: @List = load_struct_member($14.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] $15.1:r15 
  .loc 3 295 21
  # functions.1: @List_Iterator = call(create_iterator_375, $15.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:rax 
  # jump(.LABEL__build_79__8)
  mov [rbp-34], rax
.LABEL__build_79__8:
  .loc 3 296 12
  # $17.1: bool = call(has_next_378, functions.1)
  mov rdi, [rbp-34]
  call has_next_378
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__build_79__9, .LABEL__build_79__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__build_79__10
.LABEL__build_79__9:
  .loc 3 297 34
  # function_statement.1: @AST_Function_Statement = call(next_379, functions.1)
  mov rdi, [rbp-34]
  call next_379
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] function_statement.1:rax 
  .loc 3 298 9
  # $20.1: @IR_Function = call(create_function_89, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_function_89
  # [discarded value]: $20.1
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__build_79__8)
  jmp .LABEL__build_79__8
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__build_79__10:
  .loc 3 301 21
  # $21.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $21.1:rbx 
  .loc 3 301 21
  # $22.1: @List = load_struct_member($21.1, functions)
  mov r15, [rbx+24]
  # [discarded value]: $21.1
  # [live values]: self.1:rax:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] $22.1:r15 
  .loc 3 301 21
  # functions.1: @List_Iterator = call(create_iterator_375, $22.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:rax 
  # jump(.LABEL__build_79__11)
  mov [rbp-43], rax
.LABEL__build_79__11:
  .loc 3 302 12
  # $24.1: bool = call(has_next_378, functions.1)
  mov rdi, [rbp-43]
  call has_next_378
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:rax 
  # jump($24.1, .LABEL__build_79__12, .LABEL__build_79__13)
  test al, al
  mov [rbp-44], al
  jz .LABEL__build_79__13
.LABEL__build_79__12:
  .loc 3 303 34
  # function_statement.1: @AST_Function_Statement = call(next_379, functions.1)
  mov rdi, [rbp-43]
  call next_379
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] function_statement.1:rax 
  .loc 3 304 9
  # call(build_function_90, self.1, function_statement.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call build_function_90
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # jump(.LABEL__build_79__11)
  jmp .LABEL__build_79__11
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
.LABEL__build_79__13:
  # return()
  jmp .LABEL__build_79__end
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] $24.1:[rbp-44] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] functions.1:[rbp-43] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] functions.1:[rbp-34] 
  # [discarded value]: functions.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] global_variables.1:[rbp-25] 
  # [discarded value]: global_variables.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] types.1:[rbp-16] 
  # [discarded value]: types.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_79__end:
  mov rsp, rbp
  pop rbp
  ret

build_79__stack_frame_size: .word 48

  .loc 3 308 8
  .text
convert_type_statement_80:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_statement_80__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_statement_80__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 309 9
  # $1.1: bool = call(is_389, statement.1, AST_Struct_Statement)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Struct_Statement[rip]
  call is_389
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_type_statement_80__2, .LABEL__convert_type_statement_80__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_type_statement_80__3
.LABEL__convert_type_statement_80__2:
  .loc 3 310 46
  # $2.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 310 16
  # $3.1: @IR_Struct_Type = call(convert_struct_statement_81, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_struct_statement_81
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 310 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_type_statement_80__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_type_statement_80__3:
  .loc 3 312 11
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx 
  .loc 3 312 31
  # $5.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] statement.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:rbx $5.1:r15 
  .loc 3 312 5
  # call(abort_145, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_type_statement_80__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_statement_80__stack_frame_size: .word 32

  .loc 3 315 8
  .text
convert_struct_statement_81:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_statement_81__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_statement_81__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_statement.1: @AST_Struct_Statement = load_variable(struct_statement)
  # [live values]: self.1:rdi struct_statement.1:rsi 
  .loc 3 316 23
  # $1.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi struct_statement.1:rsi $1.1:rax 
  .loc 3 316 23
  # struct_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi struct_statement.1:rsi struct_name.1:rbx 
  .loc 3 318 16
  # type.1: @IR_Type = call(get_named_type_66, self.1, struct_name.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax 
  .loc 3 319 9
  # $4.1: bool = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_struct_statement_81__2, .LABEL__convert_struct_statement_81__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_struct_statement_81__3
.LABEL__convert_struct_statement_81__2:
  .loc 3 320 13
  # $5.1: bool = call(is_389, type.1, IR_Struct_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:rax 
  # jump($5.1, .LABEL__convert_struct_statement_81__4, .LABEL__convert_struct_statement_81__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_struct_statement_81__5
.LABEL__convert_struct_statement_81__4:
  .loc 3 321 24
  # type.1: @IR_Struct_Type = type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:rax 
  .loc 3 322 17
  # $7.1: @AST_Struct_Statement = load_struct_member(type.1, statement)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:rax $7.1:rbx 
  .loc 3 322 17
  # $8.1: bool = $7.1 == struct_statement.1
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:rax $8.1:r15 
  # jump($8.1, .LABEL__convert_struct_statement_81__6, .LABEL__convert_struct_statement_81__5)
  test r15b, r15b
  mov [rbp-42], rax
  mov [rbp-43], r15b
  jz .LABEL__convert_struct_statement_81__5
.LABEL__convert_struct_statement_81__6:
  .loc 3 323 17
  # return(type.1)
  mov rax, [rbp-42]
  jmp .LABEL__convert_struct_statement_81__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] $8.1:[rbp-43] 
.LABEL__convert_struct_statement_81__5:
  .loc 3 326 15
  # $9.1: @Source_Location = load_struct_member(struct_statement.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] $8.1:[rbp-43] $9.1:rbx 
  .loc 3 326 42
  # $10.1: @String = call(clone_391, "Duplicate type declaration: ")
  lea rdi, .LABEL__string_196[rip] # "Duplicate type declaration: "
  mov [rbp-51], rbx
  call clone_391
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] $8.1:[rbp-43] $9.1:[rbp-51] $10.1:rax 
  .loc 3 326 42
  # $11.1: @String = call(append_400, $10.1, struct_name.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_400
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] $8.1:[rbp-43] $9.1:[rbp-51] $11.1:rax 
  .loc 3 326 9
  # call(abort_360, $9.1, $11.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_360
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] $8.1:[rbp-43] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] type.1:[rbp-42] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_struct_statement_81__3:
  .loc 5 92 21
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] $12.1:rax 
  .loc 3 329 16
  # type.1: @IR_Struct_Type = new IR_Struct_Type(object_type = IR_Struct_Type, name = struct_name.1, statement = struct_statement.1, base_type = null, members = $12.1)
  mov [rbp-41], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Struct_Type
  mov rbx, IR_Struct_Type[rip]
  mov [rax], rbx
  #     .name = struct_name.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .base_type = null
  mov QWORD PTR [rax+16], 0
  #     .members = $12.1
  mov r15, [rbp-41]
  mov QWORD PTR [rax+24], r15
  #     .statement = struct_statement.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] struct_statement.1:r14:[rbp-8] struct_name.1:rbx:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax 
  .loc 3 333 5
  # $14.1: @List = load_struct_member(self.1, types)
  mov r15, [rbp-24]
  mov r13, [r15+16]
  # [live values]: self.1:r15:[rbp-24] struct_statement.1:r14:[rbp-8] struct_name.1:rbx:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rax $14.1:r13 
  .loc 3 333 5
  # call(append_364, $14.1, type.1)
  mov rdi, r13
  mov rsi, rax
  mov [rbp-41], rax
  call append_364
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  .loc 3 335 9
  # $15.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $15.1:rbx 
  .loc 3 335 9
  # $16.1: bool = $15.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:r15 
  # jump($16.1, .LABEL__convert_struct_statement_81__9, .LABEL__convert_struct_statement_81__10)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__convert_struct_statement_81__10
.LABEL__convert_struct_statement_81__9:
  .loc 3 336 25
  # base_type.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:rbx 
  .loc 3 337 13
  # $18.1: bool = call(is_389, base_type.1, AST_Named_Type)
  mov rdi, rbx
  mov rsi, AST_Named_Type[rip]
  mov [rbp-50], rbx
  call is_389
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $18.1:rax 
  .loc 3 337 13
  # $19.1: bool = $18.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:rbx 
  # jump($19.1, .LABEL__convert_struct_statement_81__11, .LABEL__convert_struct_statement_81__12)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_struct_statement_81__12
.LABEL__convert_struct_statement_81__11:
  .loc 3 338 19
  # $20.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $20.1:rbx 
  .loc 3 338 19
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $21.1:r15 
  .loc 3 338 13
  # call(abort_360, $21.1, "Cannot be used as base type.")
  mov rdi, r15
  lea rsi, .LABEL__string_197[rip] # "Cannot be used as base type."
  call abort_360
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] 
.LABEL__convert_struct_statement_81__12:
  .loc 3 340 31
  # $22.1: @AST_Named_Type = base_type.1
  mov rax, [rbp-50]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $22.1:rax 
  .loc 3 340 30
  # $23.1: @Identifier_Token = load_struct_member($22.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $23.1:rbx 
  .loc 3 340 30
  # base_type_name.1: @String = load_struct_member($23.1, lexeme)
  mov rax, [rbx+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_type_name.1:rax 
  .loc 3 341 37
  # base_struct_statement.1: @AST_Struct_Statement = call(get_struct_statement_67, self.1, base_type_name.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call get_struct_statement_67
  # [discarded value]: base_type_name.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:rax 
  .loc 3 342 13
  # $26.1: bool = base_struct_statement.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:rax $26.1:rbx 
  # jump($26.1, .LABEL__convert_struct_statement_81__13, .LABEL__convert_struct_statement_81__14)
  test bl, bl
  mov [rbp-59], rax
  mov [rbp-60], bl
  jz .LABEL__convert_struct_statement_81__14
.LABEL__convert_struct_statement_81__13:
  .loc 3 343 19
  # $27.1: @AST_Type = load_struct_member(struct_statement.1, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] $27.1:rbx 
  .loc 3 343 19
  # $28.1: @Source_Location = load_struct_member($27.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] $28.1:r15 
  .loc 3 343 13
  # call(abort_360, $28.1, "Not a struct type.")
  mov rdi, r15
  lea rsi, .LABEL__string_198[rip] # "Not a struct type."
  call abort_360
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
.LABEL__convert_struct_statement_81__14:
  .loc 3 345 26
  # $29.1: @IR_Struct_Type = call(convert_struct_statement_81, self.1, base_struct_statement.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-59]
  call convert_struct_statement_81
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] $29.1:rax 
  .loc 3 345 9
  # store_struct_member(type.1, base_type, $29.1)
  mov rbx, [rbp-41]
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:rbx:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  # jump(.LABEL__convert_struct_statement_81__10)
.LABEL__convert_struct_statement_81__10:
  .loc 3 348 9
  # $30.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $30.1:rbx base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  .loc 3 348 9
  # $31.1: bool = $30.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:r15 base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  # jump($31.1, .LABEL__convert_struct_statement_81__15, .LABEL__convert_struct_statement_81__16)
  test r15b, r15b
  mov [rbp-61], r15b
  jz .LABEL__convert_struct_statement_81__16
.LABEL__convert_struct_statement_81__15:
  .loc 3 349 30
  # $32.1: @List = load_struct_member(struct_statement.1, members)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] $32.1:rbx 
  .loc 3 349 30
  # struct_members.1: @List_Iterator = call(create_iterator_375, $32.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:rax 
  # jump(.LABEL__convert_struct_statement_81__17)
  mov [rbp-69], rax
.LABEL__convert_struct_statement_81__17:
  .loc 3 350 16
  # $34.1: bool = call(has_next_378, struct_members.1)
  mov rdi, [rbp-69]
  call has_next_378
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:rax 
  # jump($34.1, .LABEL__convert_struct_statement_81__18, .LABEL__convert_struct_statement_81__16)
  test al, al
  mov [rbp-70], al
  jz .LABEL__convert_struct_statement_81__16
.LABEL__convert_struct_statement_81__18:
  .loc 3 351 33
  # struct_member.1: @AST_Struct_Member = call(next_379, struct_members.1)
  mov rdi, [rbp-69]
  call next_379
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] struct_member.1:rax 
  .loc 3 352 38
  # $37.1: @Identifier_Token = load_struct_member(struct_member.1, name)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] struct_member.1:rax $37.1:rbx 
  .loc 3 352 38
  # struct_member_name.1: @String = load_struct_member($37.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] struct_member.1:rax struct_member_name.1:r15 
  .loc 3 353 56
  # $39.1: @AST_Type = load_struct_member(struct_member.1, type)
  mov rbx, [rax+16]
  # [discarded value]: struct_member.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] struct_member_name.1:r15 $39.1:rbx 
  .loc 3 353 38
  # struct_member_type.1: @IR_Type = call(convert_type_82, self.1, $39.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  mov [rbp-78], r15
  call convert_type_82
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] struct_member_name.1:[rbp-78] struct_member_type.1:rax 
  .loc 3 354 13
  # $41.1: @IR_Struct_Type_Member = call(add_member_149, type.1, struct_member_name.1, struct_member_type.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-78]
  mov rdx, rax
  call add_member_149
  # [discarded value]: $41.1
  # [discarded value]: struct_member_type.1
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] 
  # jump(.LABEL__convert_struct_statement_81__17)
  jmp .LABEL__convert_struct_statement_81__17
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] 
.LABEL__convert_struct_statement_81__16:
  .loc 3 358 9
  # $42.1: bool = call(is_object_type_152, type.1)
  mov rdi, [rbp-41]
  call is_object_type_152
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:rax $34.1:[rbp-70] 
  # jump($42.1, .LABEL__convert_struct_statement_81__20, .LABEL__convert_struct_statement_81__21)
  test al, al
  mov [rbp-71], al
  jz .LABEL__convert_struct_statement_81__21
.LABEL__convert_struct_statement_81__20:
  .loc 3 361 28
  # $43.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $43.1:rbx 
  .loc 3 361 28
  # $44.1: @Source_Location = load_struct_member($43.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $44.1:r15 
  .loc 3 362 24
  # $45.1: @Identifier_Token = load_struct_member(struct_statement.1, name)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] struct_statement.1:rax:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $44.1:r15 $45.1:rbx 
  .loc 3 364 28
  # $46.1: @Identifier_Token = new Identifier_Token(object_type = Identifier_Token, lexeme = "Object_Type", location = null, next_token = null)
  mov [rbp-79], rbx
  mov [rbp-87], r15
  mov rdi, 32
  call malloc
  #     .object_type = Identifier_Token
  mov rbx, Identifier_Token[rip]
  mov [rax], rbx
  #     .lexeme = "Object_Type"
  lea rbx, .LABEL__string_199[rip] # "Object_Type"
  mov [rax+8], rbx
  #     .location = null
  mov QWORD PTR [rax+16], 0
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $44.1:[rbp-87] $45.1:[rbp-79] $46.1:rax 
  .loc 3 363 24
  # $47.1: @AST_Named_Type = new AST_Named_Type(object_type = AST_Named_Type, name = $46.1, location = null)
  mov [rbp-95], rax
  mov rdi, 24
  call malloc
  #     .object_type = AST_Named_Type
  mov rbx, AST_Named_Type[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .name = $46.1
  mov rbx, [rbp-95]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $44.1:[rbp-87] $45.1:[rbp-79] $47.1:rax 
  .loc 3 360 13
  # $48.1: @AST_Variable_Statement = new AST_Variable_Statement(object_type = AST_Variable_Statement, location = $44.1, name = $45.1, type = $47.1, is_external = true, convert = anonymous_function_55_310.address, value_expression = null)
  mov [rbp-95], rax
  mov rdi, 49
  call malloc
  #     .object_type = AST_Variable_Statement
  mov rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  #     .location = $44.1
  mov rbx, [rbp-87]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_55_310.address
  lea r15, anonymous_function_55_310[rip]
  mov [rax+16], r15
  #     .name = $45.1
  mov r15, [rbp-79]
  mov QWORD PTR [rax+24], r15
  #     .type = $47.1
  mov r14, [rbp-95]
  mov QWORD PTR [rax+32], r14
  #     .value_expression = null
  mov QWORD PTR [rax+40], 0
  #     .is_external = true
  mov BYTE PTR [rax+48], 1
  # [discarded value]: $47.1
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] $48.1:rax 
  .loc 3 359 9
  # call(convert_variable_statement_104, self.1, $48.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call convert_variable_statement_104
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] 
  # jump(.LABEL__convert_struct_statement_81__21)
.LABEL__convert_struct_statement_81__21:
  .loc 3 372 5
  # return(type.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_struct_statement_81__end
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $42.1:[rbp-71] $34.1:[rbp-70] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] $34.1:[rbp-70] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] struct_members.1:[rbp-69] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] $31.1:[rbp-61] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] $26.1:[rbp-60] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] base_struct_statement.1:[rbp-59] 
  # [discarded value]: base_struct_statement.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] $19.1:[rbp-51] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] base_type.1:[rbp-50] 
  # [discarded value]: base_type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] type.1:[rbp-41] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] struct_statement.1:[rbp-8] struct_name.1:[rbp-16] type.1:[rbp-32] 
  # [discarded value]: type.1
  # [discarded value]: struct_name.1
  # [discarded value]: struct_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_statement_81__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_statement_81__stack_frame_size: .word 96

  .loc 3 375 8
  .text
convert_type_82:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_type_82__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_type_82__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 376 9
  # $1.1: bool = call(is_389, type.1, AST_Array_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_type_82__2, .LABEL__convert_type_82__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_type_82__3
.LABEL__convert_type_82__2:
  .loc 3 377 40
  # $2.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 377 16
  # $3.1: @IR_Type = call(convert_array_type_83, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_array_type_83
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 377 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_type_82__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_type_82__3:
  .loc 3 379 9
  # $4.1: bool = call(is_389, type.1, AST_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_type_82__5, .LABEL__convert_type_82__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_type_82__6
.LABEL__convert_type_82__5:
  .loc 3 380 43
  # $5.1: @AST_Function_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 380 16
  # $6.1: @IR_Type = call(convert_function_type_86, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_function_type_86
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 380 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_type_82__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_type_82__6:
  .loc 3 382 9
  # $7.1: bool = call(is_389, type.1, AST_Named_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Named_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__convert_type_82__8, .LABEL__convert_type_82__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_type_82__9
.LABEL__convert_type_82__8:
  .loc 3 383 40
  # $8.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 383 16
  # $9.1: @IR_Type = call(convert_named_type_87, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_named_type_87
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 383 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__convert_type_82__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__convert_type_82__9:
  .loc 3 385 9
  # $10.1: bool = call(is_389, type.1, AST_Embedded_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Embedded_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__convert_type_82__11, .LABEL__convert_type_82__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__convert_type_82__12
.LABEL__convert_type_82__11:
  .loc 3 386 43
  # $11.1: @AST_Embedded_Type = type.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 386 16
  # $12.1: @IR_Type = call(convert_embedded_type_85, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_embedded_type_85
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 386 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__convert_type_82__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__convert_type_82__12:
  .loc 3 388 11
  # $13.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 388 26
  # $14.1: @Object_Type = load_struct_member(type.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 388 5
  # call(abort_145, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_type_82__end:
  mov rsp, rbp
  pop rbp
  ret

convert_type_82__stack_frame_size: .word 32

  .loc 3 391 8
  .text
convert_array_type_83:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_type_83__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_type_83__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Array_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 392 9
  # $1.1: bool = load_struct_member(type.1, is_checked)
  mov al, [rsi+32]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__convert_array_type_83__2, .LABEL__convert_array_type_83__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_array_type_83__3
.LABEL__convert_array_type_83__2:
  .loc 3 393 15
  # $2.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] type.1:rax:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  .loc 3 393 9
  # call(abort_360, $2.1, "Checked array types are not supported yet")
  mov rdi, rbx
  lea rsi, .LABEL__string_200[rip] # "Checked array types are not supported yet"
  call abort_360
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] type.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__convert_array_type_83__3:
  .loc 3 395 39
  # $3.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] type.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:rbx 
  .loc 3 395 21
  # item_type.1: @IR_Type = call(convert_type_82, self.1, $3.1)
  mov rdi, [rbp-17]
  mov rsi, rbx
  call convert_type_82
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] type.1:[rbp-9] $1.1:[rbp-1] item_type.1:rax 
  .loc 3 396 12
  # $5.1: @IR_Unchecked_Array_Type = call(create_ir_unchecked_array_type_84, self.1, item_type.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call create_ir_unchecked_array_type_84
  # [discarded value]: item_type.1
  # [live values]: self.1:[rbp-17] type.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  .loc 3 396 5
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_array_type_83__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] type.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] type.1:[rbp-9] 
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_array_type_83__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_type_83__stack_frame_size: .word 32

  .loc 3 399 8
  .text
create_ir_unchecked_array_type_84:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_unchecked_array_type_84__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_unchecked_array_type_84__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # item_type.1: @IR_Type = load_variable(item_type)
  # [live values]: self.1:rdi item_type.1:rsi 
  .loc 3 400 22
  # $1.1: @List = load_struct_member(self.1, types)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi item_type.1:rsi $1.1:rax 
  .loc 3 400 22
  # types_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi item_type.1:rsi types_item.1:rbx 
  # jump(.LABEL__create_ir_unchecked_array_type_84__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__create_ir_unchecked_array_type_84__2:
  # types_item.2: @List_Item = phi(types_item.1, types_item.5)
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] 
  .loc 3 401 12
  # $3.1: bool = types_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__create_ir_unchecked_array_type_84__3, .LABEL__create_ir_unchecked_array_type_84__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__create_ir_unchecked_array_type_84__4
.LABEL__create_ir_unchecked_array_type_84__3:
  .loc 3 402 20
  # type.1: @IR_Type = load_struct_member(types_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:rax:[rbp-8] $3.1:[rbp-25] type.1:rbx 
  .loc 3 403 13
  # $6.1: bool = call(is_389, type.1, IR_Unchecked_Array_Type)
  mov rdi, rbx
  mov rsi, IR_Unchecked_Array_Type[rip]
  mov [rbp-33], rbx
  call is_389
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__create_ir_unchecked_array_type_84__5, .LABEL__create_ir_unchecked_array_type_84__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__create_ir_unchecked_array_type_84__6
.LABEL__create_ir_unchecked_array_type_84__5:
  .loc 3 404 24
  # type.1: @IR_Unchecked_Array_Type = type.1
  mov rax, [rbp-33]
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:rax 
  .loc 3 405 17
  # $8.1: @IR_Type = load_struct_member(type.1, item_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:rax $8.1:rbx 
  .loc 3 405 17
  # $9.1: bool = $8.1 == item_type.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:rax $9.1:r15 
  # jump($9.1, .LABEL__create_ir_unchecked_array_type_84__7, .LABEL__create_ir_unchecked_array_type_84__6)
  test r15b, r15b
  mov [rbp-42], rax
  mov [rbp-43], r15b
  jz .LABEL__create_ir_unchecked_array_type_84__6
.LABEL__create_ir_unchecked_array_type_84__7:
  .loc 3 406 17
  # return(type.1)
  mov rax, [rbp-42]
  jmp .LABEL__create_ir_unchecked_array_type_84__end
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:[rbp-42] $9.1:[rbp-43] 
.LABEL__create_ir_unchecked_array_type_84__6:
  .loc 3 409 22
  # types_item.5: @List_Item = load_struct_member(types_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:[rbp-42] $9.1:[rbp-43] types_item.5:rbx:[rbp-8] 
  # jump(.LABEL__create_ir_unchecked_array_type_84__2)
  mov [rbp-8], rbx
  jmp .LABEL__create_ir_unchecked_array_type_84__2
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:[rbp-42] $9.1:[rbp-43] types_item.5:[rbp-8] 
  # [discarded value]: types_item.5
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:[rbp-42] $9.1:[rbp-43] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] type.1:[rbp-42] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] type.1:[rbp-33] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] 
.LABEL__create_ir_unchecked_array_type_84__4:
  .loc 3 413 16
  # $11.1: @String = call(clone_391, "[")
  lea rdi, .LABEL__string_201[rip] # "["
  call clone_391
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] $11.1:rax 
  .loc 3 413 34
  # $12.1: @String = load_struct_member(item_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] item_type.1:rbx:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] $11.1:rax $12.1:r15 
  .loc 3 413 16
  # $13.1: @String = call(append_400, $11.1, $12.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] $13.1:rax 
  .loc 3 413 16
  # $14.1: @String = call(append_400, $13.1, "; ?")
  mov rdi, rax
  lea rsi, .LABEL__string_202[rip] # "; ?"
  call append_400
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] $14.1:rax 
  .loc 3 413 16
  # $15.1: @String = call(append_400, $14.1, "]")
  mov rdi, rax
  lea rsi, .LABEL__string_203[rip] # "]"
  call append_400
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] $15.1:rax 
  .loc 3 412 22
  # array_type.1: @IR_Unchecked_Array_Type = new IR_Unchecked_Array_Type(object_type = IR_Unchecked_Array_Type, name = $15.1, item_type = item_type.1)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Unchecked_Array_Type
  mov rbx, IR_Unchecked_Array_Type[rip]
  mov [rax], rbx
  #     .name = $15.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  #     .item_type = item_type.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] item_type.1:r15:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] array_type.1:rax 
  .loc 3 417 5
  # $17.1: @List = load_struct_member(self.1, types)
  mov rbx, [rbp-24]
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-24] item_type.1:r15:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] array_type.1:rax $17.1:r14 
  .loc 3 417 5
  # call(append_364, $17.1, array_type.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-33], rax
  call append_364
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] array_type.1:[rbp-33] 
  .loc 3 419 5
  # return(array_type.1)
  mov rax, [rbp-33]
  jmp .LABEL__create_ir_unchecked_array_type_84__end
  # [discarded value]: array_type.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] types_item.2:[rbp-8] 
  # [discarded value]: types_item.2
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] item_type.1:[rbp-16] types_item.1:[rbp-8] 
  # [discarded value]: types_item.1
  # [discarded value]: item_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_ir_unchecked_array_type_84__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_unchecked_array_type_84__stack_frame_size: .word 48

  .loc 3 422 8
  .text
convert_embedded_type_85:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_embedded_type_85__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_embedded_type_85__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Embedded_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 423 9
  # $1.1: @AST_Type = load_struct_member(type.1, embedded_type)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  .loc 3 423 9
  # $2.1: bool = call(is_389, $1.1, AST_Named_Type)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Named_Type[rip]
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $2.1:rax 
  .loc 3 423 9
  # $3.1: bool = $2.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:rbx 
  # jump($3.1, .LABEL__convert_embedded_type_85__2, .LABEL__convert_embedded_type_85__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__convert_embedded_type_85__3
.LABEL__convert_embedded_type_85__2:
  .loc 3 424 15
  # $4.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 3 424 9
  # call(abort_360, $4.1, "Unsupported type")
  mov rdi, rbx
  lea rsi, .LABEL__string_204[rip] # "Unsupported type"
  call abort_360
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__convert_embedded_type_85__3:
  .loc 3 426 31
  # $6.1: @AST_Named_Type = load_struct_member(type.1, embedded_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $3.1:[rbp-17] $6.1:rbx 
  .loc 3 426 30
  # $7.1: @Identifier_Token = load_struct_member($6.1, name)
  mov r15, [rbx+16]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $3.1:[rbp-17] $7.1:r15 
  .loc 3 426 30
  # embedded_type_name.1: @String = load_struct_member($7.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:rbx 
  .loc 3 427 25
  # embedded_type.1: @IR_Type = call(get_named_type_66, self.1, embedded_type_name.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-25], rbx
  call get_named_type_66
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:rax 
  .loc 3 428 9
  # $10.1: bool = embedded_type.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__convert_embedded_type_85__4, .LABEL__convert_embedded_type_85__5)
  test bl, bl
  mov [rbp-33], rax
  mov [rbp-34], bl
  jz .LABEL__convert_embedded_type_85__5
.LABEL__convert_embedded_type_85__4:
  .loc 3 429 32
  # struct_statement.1: @AST_Struct_Statement = call(get_struct_statement_67, self.1, embedded_type_name.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-25]
  call get_struct_statement_67
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:rax 
  .loc 3 430 13
  # $12.1: bool = struct_statement.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_embedded_type_85__6, .LABEL__convert_embedded_type_85__5)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__convert_embedded_type_85__5
.LABEL__convert_embedded_type_85__6:
  .loc 3 431 29
  # embedded_type.2: @IR_Type = call(convert_struct_statement_81, self.1, struct_statement.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-42]
  call convert_struct_statement_81
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.2:rax:[rbp-33] 
  # jump(.LABEL__convert_embedded_type_85__5)
  mov [rbp-33], rax
.LABEL__convert_embedded_type_85__5:
  # embedded_type.3: @IR_Type = phi(embedded_type.1, embedded_type.2)
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] embedded_type.2:[rbp-33] 
  .loc 3 434 9
  # $14.1: bool = embedded_type.3 == null
  cmp QWORD PTR [rbp-33], 0
  sete al
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] $14.1:rax embedded_type.2:[rbp-33] 
  # jump($14.1, .LABEL__convert_embedded_type_85__8, .LABEL__convert_embedded_type_85__9)
  test al, al
  mov [rbp-44], al
  jz .LABEL__convert_embedded_type_85__9
.LABEL__convert_embedded_type_85__8:
  .loc 3 435 15
  # $15.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] type.1:rax:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] $14.1:[rbp-44] embedded_type.2:[rbp-33] $15.1:rbx 
  .loc 3 435 9
  # call(abort_360, $15.1, "Unsupported type")
  mov rdi, rbx
  lea rsi, .LABEL__string_204[rip] # "Unsupported type"
  call abort_360
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] $14.1:[rbp-44] embedded_type.2:[rbp-33] 
.LABEL__convert_embedded_type_85__9:
  .loc 3 437 5
  # return(embedded_type.3)
  mov rax, [rbp-33]
  jmp .LABEL__convert_embedded_type_85__end
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] $14.1:[rbp-44] embedded_type.2:[rbp-33] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.3:[rbp-33] embedded_type.2:[rbp-33] 
  # [discarded value]: embedded_type.3
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.2:[rbp-33] 
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] embedded_type.2:[rbp-33] 
  # [discarded value]: embedded_type.2
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] struct_statement.1:[rbp-42] 
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] embedded_type_name.1:[rbp-25] embedded_type.1:[rbp-33] 
  # [discarded value]: embedded_type.1
  # [discarded value]: embedded_type_name.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_embedded_type_85__end:
  mov rsp, rbp
  pop rbp
  ret

convert_embedded_type_85__stack_frame_size: .word 48

  .loc 3 440 8
  .text
convert_function_type_86:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_function_type_86__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_function_type_86__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Function_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 441 22
  # parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:rax 
  .loc 3 442 36
  # $2.1: @List = load_struct_member(type.1, parameters)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax $2.1:r15 
  .loc 3 442 36
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r14, [r15]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] type.1:rbx:[rbp-8] parameters.1:rax function_parameters_item.1:r14 
  # jump(.LABEL__convert_function_type_86__2)
  mov [rbp-24], rax
  mov [rbp-32], r14
.LABEL__convert_function_type_86__2:
  # function_parameters_item.2: @List_Item = phi(function_parameters_item.1, function_parameters_item.4)
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  .loc 3 443 12
  # $4.1: bool = function_parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__convert_function_type_86__3, .LABEL__convert_function_type_86__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_function_type_86__4
.LABEL__convert_function_type_86__3:
  .loc 3 444 34
  # function_parameter.1: @AST_Function_Parameter = load_struct_member(function_parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx 
  .loc 3 445 65
  # $7.1: @Identifier_Token = load_struct_member(function_parameter.1, name)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $7.1:r15 
  .loc 3 445 65
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] function_parameter.1:rbx $8.1:r14 
  .loc 3 445 122
  # $9.1: @AST_Type = load_struct_member(function_parameter.1, type)
  mov r15, [rbx+16]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:rax:[rbp-32] $4.1:[rbp-33] $8.1:r14 $9.1:r15 
  .loc 3 445 104
  # $10.1: @IR_Type = call(convert_type_82, self.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-41], r14
  call convert_type_82
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $8.1:[rbp-41] $10.1:rax 
  .loc 3 445 27
  # $11.1: @IR_Function_Type_Parameter = new IR_Function_Type_Parameter(name = $8.1, type = $10.1)
  mov [rbp-49], rax
  mov rdi, 16
  call malloc
  #     .name = $8.1
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  #     .type = $10.1
  mov r15, [rbp-49]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $11.1:rax 
  .loc 3 445 9
  # call(append_364, parameters.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_364
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  .loc 3 446 36
  # function_parameters_item.4: @List_Item = load_struct_member(function_parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:rbx:[rbp-32] 
  # jump(.LABEL__convert_function_type_86__2)
  mov [rbp-32], rbx
  jmp .LABEL__convert_function_type_86__2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] function_parameters_item.4:[rbp-32] 
  # [discarded value]: function_parameters_item.4
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_function_type_86__4:
  .loc 3 448 66
  # $13.1: @AST_Type = load_struct_member(type.1, return_type)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] type.1:rax:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $13.1:rbx 
  .loc 3 448 48
  # $14.1: @IR_Type = call(convert_type_82, self.1, $13.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call convert_type_82
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $14.1:rax 
  .loc 3 448 12
  # $15.1: @IR_Function_Type = call(create_ir_function_type_148, parameters.1, $14.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call create_ir_function_type_148
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] $15.1:rax 
  .loc 3 448 5
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__convert_function_type_86__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] function_parameters_item.2:[rbp-32] 
  # [discarded value]: function_parameters_item.2
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] type.1:[rbp-8] parameters.1:[rbp-24] function_parameters_item.1:[rbp-32] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: parameters.1
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_function_type_86__end:
  mov rsp, rbp
  pop rbp
  ret

convert_function_type_86__stack_frame_size: .word 64

  .loc 3 451 8
  .text
convert_named_type_87:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_named_type_87__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_named_type_87__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # type.1: @AST_Named_Type = load_variable(type)
  # [live values]: self.1:rdi type.1:rsi 
  .loc 3 452 21
  # $1.1: @Identifier_Token = load_struct_member(type.1, name)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi type.1:rsi $1.1:rax 
  .loc 3 452 21
  # type_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi type.1:rsi type_name.1:rbx 
  .loc 3 453 22
  # named_type.1: @IR_Type = call(get_named_type_66, self.1, type_name.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rbx
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:rax 
  .loc 3 454 9
  # $4.1: bool = named_type.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_named_type_87__2, .LABEL__convert_named_type_87__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_named_type_87__3
.LABEL__convert_named_type_87__2:
  .loc 3 455 32
  # struct_statement.1: @AST_Struct_Statement = call(get_struct_statement_67, self.1, type_name.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  call get_struct_statement_67
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:rax 
  .loc 3 456 13
  # $6.1: bool = struct_statement.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__convert_named_type_87__4, .LABEL__convert_named_type_87__6)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__convert_named_type_87__6
.LABEL__convert_named_type_87__4:
  .loc 3 457 26
  # named_type.2: @IR_Type = call(convert_struct_statement_81, self.1, struct_statement.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-41]
  call convert_struct_statement_81
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.2:rax:[rbp-32] 
  # jump(.LABEL__convert_named_type_87__3)
  mov [rbp-32], rax
.LABEL__convert_named_type_87__3:
  # named_type.3: @IR_Type = phi(named_type.1, named_type.2)
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] named_type.2:[rbp-32] 
  .loc 3 462 9
  # $13.1: bool = call(is_389, named_type.3, IR_Struct_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:rax named_type.2:[rbp-32] 
  # jump($13.1, .LABEL__convert_named_type_87__8, .LABEL__convert_named_type_87__7)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_named_type_87__7
.LABEL__convert_named_type_87__8:
  .loc 3 462 9
  # $13.3: bool = phi($13.1, $13.2)
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] 
  # jump($13.3, .LABEL__convert_named_type_87__9, .LABEL__convert_named_type_87__10)
  mov al, [rbp-43]
  test al, al
  jz .LABEL__convert_named_type_87__10
.LABEL__convert_named_type_87__9:
  .loc 3 463 22
  # named_type.6: @IR_Type = call(create_ir_pointer_type_88, self.1, named_type.3)
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call create_ir_pointer_type_88
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] named_type.6:rax:[rbp-32] 
  # jump(.LABEL__convert_named_type_87__10)
  mov [rbp-32], rax
.LABEL__convert_named_type_87__10:
  # named_type.7: @IR_Type = phi(named_type.6, named_type.3)
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] named_type.6:[rbp-32] named_type.7:[rbp-32] 
  .loc 3 465 5
  # return(named_type.7)
  mov rax, [rbp-32]
  jmp .LABEL__convert_named_type_87__end
  # [discarded value]: named_type.7
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] named_type.6:[rbp-32] 
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] named_type.6:[rbp-32] 
  # [discarded value]: named_type.6
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.3:[rbp-43] 
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] 
.LABEL__convert_named_type_87__7:
  .loc 3 462 42
  # $13.2: bool = call(is_389, named_type.3, IR_Any_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Any_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.2:rax:[rbp-43] 
  # jump(.LABEL__convert_named_type_87__8)
  mov [rbp-43], al
  jmp .LABEL__convert_named_type_87__8
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] $13.2:[rbp-43] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.3:[rbp-32] $13.1:[rbp-43] named_type.2:[rbp-32] 
  # [discarded value]: $13.1
  # [discarded value]: named_type.3
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.2:[rbp-32] 
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] named_type.2:[rbp-32] 
  # [discarded value]: named_type.2
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] 
.LABEL__convert_named_type_87__6:
  .loc 3 459 19
  # $7.1: @Identifier_Token = load_struct_member(type.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] type.1:rax:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] $7.1:rbx 
  .loc 3 459 19
  # $8.1: @Source_Location = load_struct_member($7.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] type.1:rax:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] $8.1:r15 
  .loc 3 459 39
  # $9.1: @String = call(clone_391, "Unknown type: ")
  lea rdi, .LABEL__string_205[rip] # "Unknown type: "
  mov [rbp-50], r15
  call clone_391
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] $8.1:[rbp-50] $9.1:rax 
  .loc 3 459 39
  # $10.1: @String = call(append_400, $9.1, type_name.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_400
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] $8.1:[rbp-50] $10.1:rax 
  .loc 3 459 13
  # call(abort_360, $8.1, $10.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_360
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] struct_statement.1:[rbp-41] 
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] type.1:[rbp-8] type_name.1:[rbp-16] named_type.1:[rbp-32] 
  # [discarded value]: named_type.1
  # [discarded value]: type_name.1
  # [discarded value]: type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_named_type_87__end:
  mov rsp, rbp
  pop rbp
  ret

convert_named_type_87__stack_frame_size: .word 64

  .loc 3 468 8
  .text
create_ir_pointer_type_88:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_pointer_type_88__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_pointer_type_88__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # pointed_type.1: @IR_Type = load_variable(pointed_type)
  # [live values]: self.1:rdi pointed_type.1:rsi 
  .loc 3 469 9
  # $1.1: bool = pointed_type.1 == null
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi pointed_type.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__create_ir_pointer_type_88__2, .LABEL__create_ir_pointer_type_88__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__create_ir_pointer_type_88__3
.LABEL__create_ir_pointer_type_88__2:
  .loc 3 470 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__create_ir_pointer_type_88__3:
  .loc 3 473 22
  # $2.1: @List = load_struct_member(self.1, types)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  .loc 3 473 22
  # types_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:r15 
  # jump(.LABEL__create_ir_pointer_type_88__4)
  mov [rbp-25], r15
.LABEL__create_ir_pointer_type_88__4:
  # types_item.2: @List_Item = phi(types_item.1, types_item.5)
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] 
  .loc 3 474 12
  # $4.1: bool = types_item.2 != null
  cmp QWORD PTR [rbp-25], 0
  setne al
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_pointer_type_88__5, .LABEL__create_ir_pointer_type_88__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__create_ir_pointer_type_88__6
.LABEL__create_ir_pointer_type_88__5:
  .loc 3 475 20
  # type.1: @IR_Type = load_struct_member(types_item.2, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:rax:[rbp-25] $4.1:[rbp-26] type.1:rbx 
  .loc 3 476 13
  # $7.1: bool = call(is_389, type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-34], rbx
  call is_389
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:rax 
  # jump($7.1, .LABEL__create_ir_pointer_type_88__7, .LABEL__create_ir_pointer_type_88__8)
  test al, al
  mov [rbp-35], al
  jz .LABEL__create_ir_pointer_type_88__8
.LABEL__create_ir_pointer_type_88__7:
  .loc 3 477 24
  # type.1: @IR_Pointer_Type = type.1
  mov rax, [rbp-34]
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:rax 
  .loc 3 478 17
  # $9.1: @IR_Type = load_struct_member(type.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:rax $9.1:rbx 
  .loc 3 478 17
  # $10.1: bool = $9.1 == pointed_type.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:rax $10.1:r15 
  # jump($10.1, .LABEL__create_ir_pointer_type_88__9, .LABEL__create_ir_pointer_type_88__8)
  test r15b, r15b
  mov [rbp-43], rax
  mov [rbp-44], r15b
  jz .LABEL__create_ir_pointer_type_88__8
.LABEL__create_ir_pointer_type_88__9:
  .loc 3 479 17
  # return(type.1)
  mov rax, [rbp-43]
  jmp .LABEL__create_ir_pointer_type_88__end
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:[rbp-43] $10.1:[rbp-44] 
.LABEL__create_ir_pointer_type_88__8:
  .loc 3 482 22
  # types_item.5: @List_Item = load_struct_member(types_item.2, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:[rbp-43] $10.1:[rbp-44] types_item.5:rbx:[rbp-25] 
  # jump(.LABEL__create_ir_pointer_type_88__4)
  mov [rbp-25], rbx
  jmp .LABEL__create_ir_pointer_type_88__4
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:[rbp-43] $10.1:[rbp-44] types_item.5:[rbp-25] 
  # [discarded value]: types_item.5
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:[rbp-43] $10.1:[rbp-44] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] type.1:[rbp-43] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] $7.1:[rbp-35] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] type.1:[rbp-34] 
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] 
.LABEL__create_ir_pointer_type_88__6:
  .loc 3 486 16
  # $12.1: @String = call(clone_391, "@")
  lea rdi, .LABEL__string_206[rip] # "@"
  call clone_391
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] $12.1:rax 
  .loc 3 486 34
  # $13.1: @String = load_struct_member(pointed_type.1, name)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] pointed_type.1:rbx:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] $12.1:rax $13.1:r15 
  .loc 3 486 16
  # $14.1: @String = call(append_400, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] $14.1:rax 
  .loc 3 485 24
  # pointer_type.1: @IR_Pointer_Type = new IR_Pointer_Type(object_type = IR_Pointer_Type, name = $14.1, pointed_type = pointed_type.1)
  mov [rbp-34], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Pointer_Type
  mov rbx, IR_Pointer_Type[rip]
  mov [rax], rbx
  #     .name = $14.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .pointed_type = pointed_type.1
  mov r15, [rbp-9]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] pointed_type.1:r15:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] pointer_type.1:rax 
  .loc 3 490 5
  # $16.1: @List = load_struct_member(self.1, types)
  mov rbx, [rbp-17]
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-17] pointed_type.1:r15:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] pointer_type.1:rax $16.1:r14 
  .loc 3 490 5
  # call(append_364, $16.1, pointer_type.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-34], rax
  call append_364
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] pointer_type.1:[rbp-34] 
  .loc 3 492 5
  # return(pointer_type.1)
  mov rax, [rbp-34]
  jmp .LABEL__create_ir_pointer_type_88__end
  # [discarded value]: pointer_type.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] types_item.2:[rbp-25] 
  # [discarded value]: types_item.2
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] types_item.1:[rbp-25] 
  # [discarded value]: types_item.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] pointed_type.1:[rbp-9] 
  # [discarded value]: pointed_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_ir_pointer_type_88__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_pointer_type_88__stack_frame_size: .word 48

  .loc 3 495 8
  .text
create_function_89:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_function_89__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_function_89__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 497 14
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 497 14
  # $2.1: isize = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  .loc 3 497 14
  # $3.1: isize = $2.1 + 1
  mov rax, rbx
  inc rax
  # [discarded value]: $2.1
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax 
  .loc 3 498 20
  # $4.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rbx, [rsi+8]
  # [live values]: self.1:rdi function_statement.1:rsi $3.1:rax $4.1:rbx 
  .loc 3 499 18
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax 
  .loc 3 500 16
  # $6.1: @Identifier_Token = load_struct_member(function_statement.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $6.1:r15 
  .loc 3 500 16
  # $7.1: @String = load_struct_member($6.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:rax $7.1:r14 
  .loc 3 501 22
  # $8.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-40], rax
  mov [rbp-48], r14
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax 
  .loc 3 502 41
  # $9.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $9.1:r15 
  .loc 3 502 41
  # $10.1: @AST_Type = load_struct_member($9.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:rax $10.1:r14 
  .loc 3 502 23
  # $11.1: @IR_Type = call(convert_type_82, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, r14
  mov [rbp-56], rax
  call convert_type_82
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax 
  .loc 3 503 23
  # $12.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rbx, [rbp-24]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $12.1:r15 
  .loc 3 503 23
  # $13.1: bool = $12.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] $3.1:[rbp-8] $4.1:[rbp-16] $5.1:[rbp-40] $7.1:[rbp-48] $8.1:[rbp-56] $11.1:rax $13.1:r14 
  .loc 3 496 20
  # function.1: @IR_Function = new IR_Function(object_type = IR_Function, id = $3.1, location = $4.1, blocks = $5.1, name = $7.1, parameters = $8.1, return_type = $11.1, is_external = $13.1, type = undefined)
  mov [rbp-64], rax
  mov [rbp-65], r14b
  mov rdi, 65
  call malloc
  #     .object_type = IR_Function
  mov rbx, IR_Function[rip]
  mov [rax], rbx
  #     .id = $3.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .location = $4.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .name = $7.1
  mov r14, [rbp-48]
  mov QWORD PTR [rax+24], r14
  #     .parameters = $8.1
  mov r13, [rbp-56]
  mov QWORD PTR [rax+32], r13
  #     .return_type = $11.1
  mov r12, [rbp-64]
  mov QWORD PTR [rax+40], r12
  #     .type = undefined
  #     .is_external = $13.1
  mov r11b, [rbp-65]
  mov BYTE PTR [rax+56], r11b
  #     .blocks = $5.1
  mov r10, [rbp-40]
  mov QWORD PTR [rax+57], r10
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax 
  .loc 3 507 22
  # $15.1: @AST_Function_Type = load_struct_member(function_statement.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $15.1:r15 
  .loc 3 507 22
  # $16.1: @List = load_struct_member($15.1, parameters)
  mov r14, [r15+16]
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] function_statement.1:rbx:[rbp-24] function.1:rax $16.1:r14 
  .loc 3 507 22
  # parameters.1: @List_Iterator = call(create_iterator_375, $16.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_iterator_375
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:rax 
  .loc 3 508 36
  # function_type_parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-48], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:rax 
  # jump(.LABEL__create_function_89__2)
  mov [rbp-56], rax
.LABEL__create_function_89__2:
  .loc 3 509 12
  # $19.1: bool = call(has_next_378, parameters.1)
  mov rdi, [rbp-48]
  call has_next_378
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:rax 
  # jump($19.1, .LABEL__create_function_89__3, .LABEL__create_function_89__4)
  test al, al
  mov [rbp-57], al
  jz .LABEL__create_function_89__4
.LABEL__create_function_89__3:
  .loc 3 510 25
  # parameter.1: @AST_Function_Parameter = call(next_379, parameters.1)
  mov rdi, [rbp-48]
  call next_379
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax 
  .loc 3 511 48
  # $22.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rax $22.1:rbx 
  .loc 3 511 30
  # parameter_type.1: @IR_Type = call(convert_type_82, self.1, $22.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov [rbp-65], rax
  call convert_type_82
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:[rbp-65] parameter_type.1:rax 
  .loc 3 512 30
  # $24.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rbx, [rbp-65]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rbx:[rbp-65] parameter_type.1:rax $24.1:r15 
  .loc 3 512 30
  # parameter_name.1: @String = load_struct_member($24.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter.1:rbx:[rbp-65] parameter_type.1:rax parameter_name.1:r14 
  .loc 3 513 71
  # $26.1: @Source_Location = load_struct_member(parameter.1, location)
  mov r15, [rbx]
  # [discarded value]: parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:rax parameter_name.1:r14 $26.1:r15 
  .loc 5 467 20
  # $27.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-65], rax
  mov [rbp-73], r14
  mov [rbp-81], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] $26.1:[rbp-81] $27.1:rax 
  .loc 3 513 34
  # function_parameter.1: @IR_Function_Parameter = new IR_Function_Parameter(object_type = IR_Function_Parameter, location = $26.1, name = parameter_name.1, type = parameter_type.1, values = $27.1)
  mov [rbp-89], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Function_Parameter
  mov rbx, IR_Function_Parameter[rip]
  mov [rax], rbx
  #     .location = $26.1
  mov rbx, [rbp-81]
  mov QWORD PTR [rax+8], rbx
  #     .name = parameter_name.1
  mov r15, [rbp-73]
  mov QWORD PTR [rax+16], r15
  #     .type = parameter_type.1
  mov r14, [rbp-65]
  mov QWORD PTR [rax+24], r14
  #     .values = $27.1
  mov r13, [rbp-89]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r14:[rbp-65] parameter_name.1:r15:[rbp-73] function_parameter.1:rax 
  .loc 3 514 9
  # $29.1: @List = load_struct_member(function.1, parameters)
  mov rbx, [rbp-40]
  mov r13, [rbx+32]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:r14:[rbp-65] parameter_name.1:r15:[rbp-73] function_parameter.1:rax $29.1:r13 
  .loc 3 514 9
  # call(append_364, $29.1, function_parameter.1)
  mov rdi, r13
  mov rsi, rax
  call append_364
  # [discarded value]: $29.1
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] parameter_type.1:[rbp-65] parameter_name.1:[rbp-73] 
  .loc 3 515 41
  # $30.1: @IR_Function_Type_Parameter = new IR_Function_Type_Parameter(name = parameter_name.1, type = parameter_type.1)
  mov rdi, 16
  call malloc
  #     .name = parameter_name.1
  mov rbx, [rbp-73]
  mov QWORD PTR [rax], rbx
  #     .type = parameter_type.1
  mov r15, [rbp-65]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: parameter_name.1
  # [discarded value]: parameter_type.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $30.1:rax 
  .loc 3 515 9
  # call(append_364, function_type_parameters.1, $30.1)
  mov rdi, [rbp-56]
  mov rsi, rax
  call append_364
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # jump(.LABEL__create_function_89__2)
  jmp .LABEL__create_function_89__2
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
.LABEL__create_function_89__4:
  .loc 3 518 5
  # store_struct_member(function_statement.1, ir_function, function.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+49], rbx
  # [live values]: self.1:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 519 5
  # $31.1: @List = load_struct_member(self.1, named_functions)
  mov r15, [rbp-32]
  mov r14, [r15+24]
  # [live values]: self.1:r15:[rbp-32] function_statement.1:rax:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $31.1:r14 
  .loc 3 519 5
  # call(append_364, $31.1, function.1)
  mov rdi, r14
  mov rsi, rbx
  call append_364
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 521 71
  # $32.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-40]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rax:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $32.1:rbx 
  .loc 3 521 21
  # $33.1: @IR_Function_Type = call(create_ir_function_type_148, function_type_parameters.1, $32.1)
  mov rdi, [rbp-56]
  mov rsi, rbx
  call create_ir_function_type_148
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] $33.1:rax 
  .loc 3 521 5
  # store_struct_member(function.1, type, $33.1)
  mov rbx, [rbp-40]
  mov QWORD PTR [rbx+48], rax
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:rbx:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  .loc 3 523 5
  # return(function.1)
  mov rax, rbx
  jmp .LABEL__create_function_89__end
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] $19.1:[rbp-57] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [live values]: self.1:[rbp-32] function_statement.1:[rbp-24] function.1:[rbp-40] parameters.1:[rbp-48] function_type_parameters.1:[rbp-56] 
  # [discarded value]: function_type_parameters.1
  # [discarded value]: parameters.1
  # [discarded value]: function.1
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__create_function_89__end:
  mov rsp, rbp
  pop rbp
  ret

create_function_89__stack_frame_size: .word 96

  .loc 3 526 8
  .text
build_function_90:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR build_function_90__stack_frame_size[rip]
  sub rsp, rax
.LABEL__build_function_90__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function_statement.1: @AST_Function_Statement = load_variable(function_statement)
  # [live values]: self.1:rdi function_statement.1:rsi 
  .loc 3 527 9
  # $1.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rsi+40]
  # [live values]: self.1:rdi function_statement.1:rsi $1.1:rax 
  .loc 3 527 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi function_statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__build_function_90__2, .LABEL__build_function_90__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__build_function_90__3
.LABEL__build_function_90__2:
  .loc 3 528 9
  # return()
  jmp .LABEL__build_function_90__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__build_function_90__3:
  .loc 3 531 20
  # function.1: @IR_Function = load_struct_member(function_statement.1, ir_function)
  mov rax, [rbp-9]
  mov rbx, [rax+49]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx 
  .loc 3 533 52
  # $4.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov r15, [rbp-17]
  mov r14, [r15]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:rbx $4.1:r14 
  .loc 3 44 23
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rbx
  mov [rbp-33], r14
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:rax 
  .loc 3 45 26
  # $6.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-41], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $4.1:[rbp-33] $5.1:[rbp-41] $6.1:rax 
  .loc 3 533 20
  # $7.1: @IR_Builder_Context = new IR_Builder_Context(parent = $4.1, variables = $5.1, named_values = $6.1)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  #     .parent = $4.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .variables = $5.1
  mov r15, [rbp-41]
  mov QWORD PTR [rax+8], r15
  #     .named_values = $6.1
  mov r14, [rbp-49]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $7.1:rax 
  .loc 3 533 5
  # store_struct_member(self.1, context, $7.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 534 5
  # $8.1: @Counter = load_struct_member(self.1, counter)
  mov rax, [rbx+48]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $8.1:rax 
  .loc 3 534 5
  # $9.1: @Counter = call(reset_147, $8.1)
  mov rdi, rax
  call reset_147
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 536 26
  # $10.1: @IR_Block = call(create_block_173, function.1)
  mov rdi, [rbp-25]
  call create_block_173
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] $10.1:rax 
  .loc 3 536 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] 
  .loc 3 538 31
  # $11.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-25]
  mov r15, [rax+32]
  # [live values]: self.1:rbx:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] $11.1:r15 
  .loc 3 538 31
  # function_parameters.1: @List_Iterator = call(create_iterator_375, $11.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:rax 
  # jump(.LABEL__build_function_90__5)
  mov [rbp-33], rax
.LABEL__build_function_90__5:
  .loc 3 539 12
  # $13.1: bool = call(has_next_378, function_parameters.1)
  mov rdi, [rbp-33]
  call has_next_378
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:rax 
  # jump($13.1, .LABEL__build_function_90__6, .LABEL__build_function_90__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__build_function_90__7
.LABEL__build_function_90__6:
  .loc 3 540 34
  # function_parameter.1: @IR_Function_Parameter = call(next_379, function_parameters.1)
  mov rdi, [rbp-33]
  call next_379
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:rax 
  .loc 3 541 9
  # $16.1: @IR_Variable = call(add_variable_68, self.1, function_parameter.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov [rbp-42], rax
  call add_variable_68
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] 
  .loc 3 542 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] function_parameter.1:[rbp-42] $17.1:rbx 
  .loc 3 542 71
  # $18.1: @IR_Variable_Value = call(create_variable_value_71, self.1, function_parameter.1)
  mov rdi, rax
  mov rsi, [rbp-42]
  mov [rbp-50], rbx
  call create_variable_value_71
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $18.1:rax 
  .loc 3 542 35
  # $19.1: @IR_Load_Variable_Instruction = call(create_ir_load_variable_instruction_212, $18.1)
  mov rdi, rax
  call create_ir_load_variable_instruction_212
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $17.1:[rbp-50] $19.1:rax 
  .loc 3 542 9
  # $20.1: @IR_Instruction = call(append_168, $17.1, $19.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call append_168
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # jump(.LABEL__build_function_90__5)
  jmp .LABEL__build_function_90__5
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__build_function_90__7:
  .loc 3 545 34
  # $21.1: @AST_Block_Statement = load_struct_member(function_statement.1, body)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $21.1:rbx 
  .loc 3 545 5
  # call(convert_block_statement_98, self.1, $21.1)
  mov rdi, [rbp-17]
  mov rsi, rbx
  call convert_block_statement_98
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  .loc 3 546 9
  # $22.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $22.1:rbx 
  .loc 3 546 9
  # $23.1: @IR_Instruction = load_struct_member($22.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $23.1:r15 
  .loc 3 546 9
  # $24.1: bool = $23.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $24.1:rbx 
  .loc 3 546 9
  # $25.1: bool = $24.1
  mov [rbp-35], bl
  # [discarded value]: $24.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:rbx 
  # jump($25.1, .LABEL__build_function_90__9, .LABEL__build_function_90__8)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__build_function_90__8
.LABEL__build_function_90__9:
  .loc 3 546 9
  # $25.3: bool = phi($25.1, $25.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # jump($25.3, .LABEL__build_function_90__10, .LABEL__build_function_90__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__build_function_90__11
.LABEL__build_function_90__10:
  .loc 3 547 13
  # $30.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $30.1:rbx 
  .loc 3 547 13
  # $31.1: @List = load_struct_member($30.1, predecessors)
  mov r15, [rbx+24]
  # [discarded value]: $30.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $31.1:r15 
  .loc 3 547 13
  # $32.1: isize = load_struct_member($31.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $32.1:rbx 
  .loc 3 547 13
  # $33.1: bool = $32.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $33.1:r15 
  .loc 3 547 13
  # $34.1: bool = $33.1
  mov [rbp-36], r15b
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:r15 
  # jump($34.1, .LABEL__build_function_90__12, .LABEL__build_function_90__13)
  test r15b, r15b
  mov [rbp-36], r15b
  jz .LABEL__build_function_90__13
.LABEL__build_function_90__12:
  .loc 3 547 58
  # $35.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $35.1:rbx 
  .loc 3 547 58
  # $36.1: isize = load_struct_member($35.1, id)
  mov r15, [rbx+8]
  # [discarded value]: $35.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $36.1:r15 
  .loc 3 547 58
  # $37.1: bool = $36.1 != 1
  cmp r15, 1
  setne bl
  # [discarded value]: $36.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $37.1:rbx 
  .loc 3 547 13
  # $34.2: bool = $37.1
  mov [rbp-37], bl
  # [discarded value]: $37.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:rbx:[rbp-36] 
  # jump(.LABEL__build_function_90__13)
  mov [rbp-36], bl
.LABEL__build_function_90__13:
  .loc 3 547 13
  # $34.3: bool = phi($34.1, $34.2)
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump($34.3, .LABEL__build_function_90__14, .LABEL__build_function_90__16)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__build_function_90__16
.LABEL__build_function_90__14:
  .loc 3 549 13
  # $43.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-25]
  mov rbx, [rax+57]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx 
  .loc 3 549 36
  # $44.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $43.1:rbx $44.1:r14 
  .loc 3 549 13
  # $45.1: @List = call(remove_366, $43.1, $44.1)
  mov rdi, rbx
  mov rsi, r14
  call remove_366
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $45.1:rax 
  .loc 3 549 13
  # $46.1: @List = call(prune_368, $45.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # jump(.LABEL__build_function_90__11)
.LABEL__build_function_90__11:
  .loc 3 556 5
  # store_struct_member(self.1, current_block, null)
  mov rax, [rbp-17]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 558 5
  # call(remove_redundant_blocks_91, self.1, function.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call remove_redundant_blocks_91
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 559 5
  # call(populate_phi_instructions_92, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call populate_phi_instructions_92
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 560 5
  # call(remove_trivial_phi_instructions_94, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_trivial_phi_instructions_94
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 561 5
  # call(remove_redundant_set_instructions_95, self.1, function.1)
  mov rdi, [rbp-17]
  mov rsi, [rbp-25]
  call remove_redundant_set_instructions_95
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 563 20
  # $47.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $47.1:rbx $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 563 20
  # $48.1: @IR_Builder_Context = load_struct_member($47.1, parent)
  mov r15, [rbx]
  # [discarded value]: $47.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $48.1:r15 $34.2:[rbp-36] $34.3:[rbp-36] 
  .loc 3 563 5
  # store_struct_member(self.1, context, $48.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $48.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # return()
  jmp .LABEL__build_function_90__end
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
.LABEL__build_function_90__16:
  .loc 3 550 20
  # $38.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:rax:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $38.1:rbx 
  .loc 3 550 20
  # $39.1: bool = call(is_389, $38.1, IR_Nothing_Type)
  mov rdi, rbx
  mov rsi, IR_Nothing_Type[rip]
  call is_389
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:rax 
  # jump($39.1, .LABEL__build_function_90__17, .LABEL__build_function_90__19)
  test al, al
  mov [rbp-37], al
  jz .LABEL__build_function_90__19
.LABEL__build_function_90__17:
  .loc 3 551 25
  # $41.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, null)
  xor rdi, rdi
  call create_ir_return_instruction_217
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $41.1:rax 
  .loc 3 551 13
  # $42.1: @IR_Variable_Value = call(append_78, self.1, $41.1, null)
  mov rdi, [rbp-17]
  mov rsi, rax
  xor rdx, rdx
  call append_78
  # [discarded value]: $42.1
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # jump(.LABEL__build_function_90__11)
  jmp .LABEL__build_function_90__11
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
.LABEL__build_function_90__19:
  .loc 3 553 19
  # $40.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] function_statement.1:rax:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] $40.1:rbx 
  .loc 3 553 13
  # call(abort_360, $40.1, "Missing return statement")
  mov rdi, rbx
  lea rsi, .LABEL__string_207[rip] # "Missing return statement"
  call abort_360
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] $39.1:[rbp-37] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] $34.3:[rbp-36] 
  # [discarded value]: $34.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] $34.2:[rbp-36] 
  # [discarded value]: $34.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] $34.1:[rbp-36] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.3:[rbp-35] 
  # [discarded value]: $25.3
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
.LABEL__build_function_90__8:
  .loc 3 546 56
  # $26.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $26.1:rbx 
  .loc 3 546 56
  # $27.1: @IR_Instruction = load_struct_member($26.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $26.1
  # [live values]: self.1:rax:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $27.1:r15 
  .loc 3 546 56
  # $28.1: bool = call(is_exit_instruction_177, $27.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $28.1:rax 
  .loc 3 546 56
  # $29.1: bool = $28.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $29.1:rbx 
  .loc 3 546 9
  # $25.2: bool = $29.1
  mov [rbp-36], bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:rbx:[rbp-35] 
  # jump(.LABEL__build_function_90__9)
  mov [rbp-35], bl
  jmp .LABEL__build_function_90__9
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] $25.2:[rbp-35] 
  # [discarded value]: $25.2
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] $25.1:[rbp-35] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] function.1:[rbp-25] function_parameters.1:[rbp-33] 
  # [discarded value]: function_parameters.1
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] function_statement.1:[rbp-9] 
  # [discarded value]: function_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__build_function_90__end:
  mov rsp, rbp
  pop rbp
  ret

build_function_90__stack_frame_size: .word 64

  .loc 3 566 8
  .text
remove_redundant_blocks_91:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_blocks_91__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_blocks_91__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_blocks_91__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_blocks_91__2:
  .loc 3 568 13
  # repeat.1: bool = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 570 22
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 570 22
  # $2.1: @List = call(prune_368, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_368
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 570 22
  # blocks.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov rdi, rax
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_blocks_91__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_blocks_91__4:
  .loc 3 572 16
  # $4.1: bool = call(has_next_378, blocks.1)
  mov rdi, [rbp-17]
  call has_next_378
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_blocks_91__5, .LABEL__remove_redundant_blocks_91__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_blocks_91__6
.LABEL__remove_redundant_blocks_91__5:
  .loc 3 573 25
  # block.1: @IR_Block = call(next_379, blocks.1)
  mov rdi, [rbp-17]
  call next_379
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax 
  .loc 3 574 17
  # $7.1: isize = load_struct_member(block.1, id)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $7.1:rbx 
  .loc 3 574 17
  # $8.1: bool = $7.1 != 1
  cmp rbx, 1
  setne r15b
  # [discarded value]: $7.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax $8.1:r15 
  # jump($8.1, .LABEL__remove_redundant_blocks_91__7, .LABEL__remove_redundant_blocks_91__4)
  test r15b, r15b
  mov [rbp-26], rax
  mov [rbp-27], r15b
  jz .LABEL__remove_redundant_blocks_91__4
.LABEL__remove_redundant_blocks_91__7:
  .loc 3 575 21
  # $9.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $9.1:rbx 
  .loc 3 575 21
  # $10.1: isize = load_struct_member($9.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $10.1:r15 
  .loc 3 575 21
  # $11.1: bool = $10.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:rbx 
  # jump($11.1, .LABEL__remove_redundant_blocks_91__9, .LABEL__remove_redundant_blocks_91__10)
  test bl, bl
  mov [rbp-28], bl
  jz .LABEL__remove_redundant_blocks_91__10
.LABEL__remove_redundant_blocks_91__9:
  .loc 3 577 25
  # $12.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $12.1:rbx 
  .loc 3 577 25
  # $13.1: bool = $12.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $12.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:r15 
  # jump($13.1, .LABEL__remove_redundant_blocks_91__11, .LABEL__remove_redundant_blocks_91__13)
  test r15b, r15b
  mov [rbp-29], r15b
  jz .LABEL__remove_redundant_blocks_91__13
.LABEL__remove_redundant_blocks_91__11:
  .loc 3 578 25
  # call(remove_current_377, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_377
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # jump(.LABEL__remove_redundant_blocks_91__10)
.LABEL__remove_redundant_blocks_91__10:
  .loc 3 590 21
  # $32.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx 
  .loc 3 590 48
  # $33.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $32.1:rbx $33.1:r15 
  .loc 3 590 21
  # $34.1: bool = $32.1 == $33.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $33.1
  # [discarded value]: $32.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $34.1:r14 
  .loc 3 590 21
  # $35.1: bool = $34.1
  mov [rbp-30], r14b
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:r14 
  # jump($35.1, .LABEL__remove_redundant_blocks_91__20, .LABEL__remove_redundant_blocks_91__21)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_91__21
.LABEL__remove_redundant_blocks_91__20:
  .loc 3 590 74
  # $36.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $36.1:rbx 
  .loc 3 590 74
  # $35.2: bool = call(is_389, $36.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_389
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_91__21)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_91__21:
  .loc 3 590 21
  # $35.3: bool = phi($35.1, $35.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # jump($35.3, .LABEL__remove_redundant_blocks_91__22, .LABEL__remove_redundant_blocks_91__4)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_91__4
.LABEL__remove_redundant_blocks_91__22:
  .loc 3 592 45
  # $38.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] $38.1:rbx 
  .loc 3 592 45
  # block_predecessor.1: @IR_Block = call(last_374, $38.1)
  mov rdi, rbx
  call last_374
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax 
  .loc 3 593 44
  # $42.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rbp-26]
  mov r15, [rbx+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax $42.1:r15 
  .loc 3 593 43
  # block_successor.1: @IR_Block = load_struct_member($42.1, block)
  mov r14, [r15+65]
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 
  .loc 3 594 25
  # $44.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov r15, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax block_successor.1:r14 $44.1:r15 
  .loc 3 594 25
  # $45.1: bool = call(is_389, $44.1, IR_Conditional_Jump_Instruction)
  mov rdi, r15
  mov rsi, IR_Conditional_Jump_Instruction[rip]
  mov [rbp-38], rax
  mov [rbp-46], r14
  call is_389
  # [discarded value]: $44.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:rax 
  # jump($45.1, .LABEL__remove_redundant_blocks_91__24, .LABEL__remove_redundant_blocks_91__25)
  test al, al
  mov [rbp-47], al
  jz .LABEL__remove_redundant_blocks_91__25
.LABEL__remove_redundant_blocks_91__24:
  .loc 3 595 25
  # $46.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $46.1:rbx 
  .loc 3 595 25
  # $47.1: @List = call(remove_366, $46.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_366
  # [discarded value]: $46.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $47.1:rax 
  .loc 3 595 25
  # $48.1: @List = call(prune_368, $47.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $48.1
  # [discarded value]: $47.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  .loc 3 596 61
  # block_predecessor_instruction.1: @IR_Conditional_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx 
  .loc 3 597 29
  # $51.1: @IR_Block = load_struct_member(block_predecessor_instruction.1, false_block)
  mov r15, [rbx+73]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $51.1:r15 
  .loc 3 597 29
  # $52.1: bool = $51.1 == block.1
  cmp r15, QWORD PTR [rbp-26]
  sete r14b
  # [discarded value]: $51.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rbx $52.1:r14 
  # jump($52.1, .LABEL__remove_redundant_blocks_91__26, .LABEL__remove_redundant_blocks_91__28)
  test r14b, r14b
  mov [rbp-55], rbx
  mov [rbp-56], r14b
  jz .LABEL__remove_redundant_blocks_91__28
.LABEL__remove_redundant_blocks_91__26:
  .loc 3 598 29
  # store_struct_member(block_predecessor_instruction.1, false_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+73], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_91__27)
.LABEL__remove_redundant_blocks_91__27:
  .loc 3 602 25
  # $53.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rax, [rbp-46]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rax:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $53.1:rbx 
  .loc 3 602 25
  # $54.1: @List = call(remove_366, $53.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_366
  # [discarded value]: $53.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $54.1:rax 
  .loc 3 602 25
  # $55.1: @List = call(prune_368, $54.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $54.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] $55.1:rax 
  .loc 3 602 25
  # call(append_364, $55.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_364
  # [discarded value]: $55.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  .loc 3 603 25
  # repeat.3: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_91__6)
  mov [rbp-9], al
.LABEL__remove_redundant_blocks_91__6:
  # repeat.5: bool = phi(repeat.2, repeat.3, repeat.4, repeat.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] repeat.5:[rbp-9] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  .loc 3 618 13
  # $66.1: bool = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:rax $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # jump($66.1, .LABEL__remove_redundant_blocks_91__3, .LABEL__remove_redundant_blocks_91__2)
  test al, al
  mov [rbp-57], al
  jz .LABEL__remove_redundant_blocks_91__2
.LABEL__remove_redundant_blocks_91__3:
  # return()
  jmp .LABEL__remove_redundant_blocks_91__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $66.1:[rbp-57] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: $66.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
.LABEL__remove_redundant_blocks_91__28:
  .loc 3 600 29
  # store_struct_member(block_predecessor_instruction.1, true_block, block_successor.1)
  mov rax, [rbp-55]
  mov rbx, [rbp-46]
  mov QWORD PTR [rax+65], rbx
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:rbx:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:rax:[rbp-55] $52.1:[rbp-56] 
  # jump(.LABEL__remove_redundant_blocks_91__27)
  jmp .LABEL__remove_redundant_blocks_91__27
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] $52.1:[rbp-56] 
  # [discarded value]: $52.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] block_predecessor_instruction.1:[rbp-55] 
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
.LABEL__remove_redundant_blocks_91__25:
  .loc 3 606 25
  # $56.1: @IR_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $56.1:rbx 
  .loc 3 606 25
  # $57.1: bool = call(is_389, $56.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_389
  # [discarded value]: $56.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:rax 
  # jump($57.1, .LABEL__remove_redundant_blocks_91__30, .LABEL__remove_redundant_blocks_91__4)
  test al, al
  mov [rbp-48], al
  jz .LABEL__remove_redundant_blocks_91__4
.LABEL__remove_redundant_blocks_91__30:
  .loc 3 607 25
  # $58.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-26]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $58.1:rbx 
  .loc 3 607 25
  # $59.1: @List = call(remove_366, $58.1, block_predecessor.1)
  mov rdi, rbx
  mov rsi, [rbp-38]
  call remove_366
  # [discarded value]: $58.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $59.1:rax 
  .loc 3 607 25
  # $60.1: @List = call(prune_368, $59.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 608 61
  # block_predecessor_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block_predecessor.1, last_instruction)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] block_predecessor_instruction.1:rbx 
  .loc 3 609 25
  # store_struct_member(block_predecessor_instruction.1, block, block_successor.1)
  mov r15, [rbp-46]
  mov QWORD PTR [rbx+65], r15
  # [discarded value]: block_predecessor_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 610 25
  # $63.1: @List = load_struct_member(block_successor.1, predecessors)
  mov rbx, [r15+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:rax:[rbp-38] block_successor.1:r15:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $63.1:rbx 
  .loc 3 610 25
  # $64.1: @List = call(remove_366, $63.1, block.1)
  mov rdi, rbx
  mov rsi, [rbp-26]
  call remove_366
  # [discarded value]: $63.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $64.1:rax 
  .loc 3 610 25
  # $65.1: @List = call(prune_368, $64.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $64.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] $65.1:rax 
  .loc 3 610 25
  # call(append_364, $65.1, block_predecessor.1)
  mov rdi, rax
  mov rsi, [rbp-38]
  call append_364
  # [discarded value]: $65.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  .loc 3 611 25
  # repeat.4: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_91__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_91__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] $57.1:[rbp-48] 
  # [discarded value]: $57.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] $45.1:[rbp-47] 
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] block_predecessor.1:[rbp-38] block_successor.1:[rbp-46] 
  # [discarded value]: block_successor.1
  # [discarded value]: block_predecessor.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] $35.3:[rbp-30] 
  # [discarded value]: $35.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] $35.2:[rbp-30] 
  # [discarded value]: $35.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $35.1:[rbp-30] 
  # [discarded value]: $35.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
.LABEL__remove_redundant_blocks_91__13:
  .loc 3 579 32
  # $14.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx 
  .loc 3 579 58
  # $15.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov r15, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $14.1:rbx $15.1:r15 
  .loc 3 579 32
  # $16.1: bool = $14.1 == $15.1
  cmp rbx, r15
  sete r14b
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $16.1:r14 
  .loc 3 579 32
  # $17.1: bool = $16.1
  mov [rbp-30], r14b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:r14 
  # jump($17.1, .LABEL__remove_redundant_blocks_91__14, .LABEL__remove_redundant_blocks_91__15)
  test r14b, r14b
  mov [rbp-30], r14b
  jz .LABEL__remove_redundant_blocks_91__15
.LABEL__remove_redundant_blocks_91__14:
  .loc 3 579 85
  # $18.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $18.1:rbx 
  .loc 3 579 85
  # $17.2: bool = call(is_389, $18.1, IR_Direct_Jump_Instruction)
  mov rdi, rbx
  mov rsi, IR_Direct_Jump_Instruction[rip]
  call is_389
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:rax:[rbp-30] 
  # jump(.LABEL__remove_redundant_blocks_91__15)
  mov [rbp-30], al
.LABEL__remove_redundant_blocks_91__15:
  .loc 3 579 32
  # $17.3: bool = phi($17.1, $17.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # jump($17.3, .LABEL__remove_redundant_blocks_91__16, .LABEL__remove_redundant_blocks_91__18)
  mov al, [rbp-30]
  test al, al
  jz .LABEL__remove_redundant_blocks_91__18
.LABEL__remove_redundant_blocks_91__16:
  .loc 3 580 49
  # block_instruction.1: @IR_Direct_Jump_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rbp-26]
  mov rbx, [rax+40]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx 
  .loc 3 581 25
  # $26.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov r15, [rbx+65]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $26.1:r15 
  .loc 3 581 25
  # $27.1: @List = load_struct_member($26.1, predecessors)
  mov r14, [r15+24]
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rax:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:rbx $27.1:r14 
  .loc 3 581 25
  # $28.1: @List = call(remove_366, $27.1, block.1)
  mov rdi, r14
  mov rsi, rax
  mov [rbp-38], rbx
  call remove_366
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] block_instruction.1:[rbp-38] 
  .loc 3 582 25
  # $29.1: @IR_Block = load_struct_member(block_instruction.1, block)
  mov rax, [rbp-38]
  mov rbx, [rax+65]
  # [discarded value]: block_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $29.1:rbx 
  .loc 3 582 25
  # $30.1: @List = load_struct_member($29.1, predecessors)
  mov rax, [rbx+24]
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $30.1:rax 
  .loc 3 582 25
  # $31.1: @List = call(prune_368, $30.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 583 25
  # call(remove_current_377, blocks.1)
  mov rdi, [rbp-17]
  call remove_current_377
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  .loc 3 584 25
  # repeat.2: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_blocks_91__6)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_blocks_91__6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
.LABEL__remove_redundant_blocks_91__18:
  .loc 3 587 31
  # $20.1: @Source_Location = load_struct_member(function.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: function.1:rax:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:rbx 
  .loc 3 587 50
  # $21.1: @String = call(clone_391, "Found non-empty unreachable block: block.")
  lea rdi, .LABEL__string_208[rip] # "Found non-empty unreachable block: block."
  mov [rbp-38], rbx
  call clone_391
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax 
  .loc 3 587 108
  # $22.1: isize = load_struct_member(block.1, id)
  mov rbx, [rbp-26]
  mov r15, [rbx+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:rbx:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $21.1:rax $22.1:r15 
  .loc 3 587 50
  # $23.1: @String = call(append_399, $21.1, $22.1)
  mov rdi, rax
  mov rsi, r15
  call append_399
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] $20.1:[rbp-38] $23.1:rax 
  .loc 3 587 25
  # call(abort_360, $20.1, $23.1)
  mov rdi, [rbp-38]
  mov rsi, rax
  call abort_360
  # [discarded value]: $23.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] $17.3:[rbp-30] 
  # [discarded value]: $17.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] $17.2:[rbp-30] 
  # [discarded value]: $17.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] $13.1:[rbp-29] 
  # [discarded value]: $13.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] $11.1:[rbp-28] 
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] $8.1:[rbp-27] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] block.1:[rbp-26] 
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_blocks_91__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_blocks_91__stack_frame_size: .word 64

  .loc 3 624 8
  .text
populate_phi_instructions_92:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR populate_phi_instructions_92__stack_frame_size[rip]
  sub rsp, rax
.LABEL__populate_phi_instructions_92__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: self.1:rdi function.1:rsi 
  .loc 3 625 18
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rsi+57]
  # [discarded value]: function.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 3 625 18
  # blocks.1: @List_Iterator = call(create_iterator_375, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_375
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] blocks.1:rax 
  # jump(.LABEL__populate_phi_instructions_92__2)
  mov [rbp-16], rax
.LABEL__populate_phi_instructions_92__2:
  .loc 3 626 12
  # $3.1: bool = call(has_next_378, blocks.1)
  mov rdi, [rbp-16]
  call has_next_378
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__populate_phi_instructions_92__3, .LABEL__populate_phi_instructions_92__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__populate_phi_instructions_92__4
.LABEL__populate_phi_instructions_92__3:
  .loc 3 627 21
  # block.1: @IR_Block = call(next_379, blocks.1)
  mov rdi, [rbp-16]
  call next_379
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax 
  .loc 3 628 33
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__populate_phi_instructions_92__5)
  mov [rbp-25], rax
  mov [rbp-33], rbx
.LABEL__populate_phi_instructions_92__5:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] 
  .loc 3 629 16
  # $7.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $7.1:rax 
  .loc 3 629 16
  # $8.1: bool = $7.1
  mov [rbp-34], al
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:rax 
  # jump($8.1, .LABEL__populate_phi_instructions_92__8, .LABEL__populate_phi_instructions_92__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__populate_phi_instructions_92__9
.LABEL__populate_phi_instructions_92__8:
  .loc 3 629 45
  # $8.2: bool = call(is_389, block_instruction.2, IR_Phi_Instruction)
  mov rdi, [rbp-33]
  mov rsi, IR_Phi_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:rax:[rbp-34] 
  # jump(.LABEL__populate_phi_instructions_92__9)
  mov [rbp-34], al
.LABEL__populate_phi_instructions_92__9:
  .loc 3 629 16
  # $8.3: bool = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($8.3, .LABEL__populate_phi_instructions_92__6, .LABEL__populate_phi_instructions_92__2)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__populate_phi_instructions_92__2
.LABEL__populate_phi_instructions_92__6:
  .loc 3 630 31
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-33]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 631 17
  # $11.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $11.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 631 17
  # $12.1: @IR_Values_Map_Entry = load_struct_member($11.1, first_entry)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $12.1:r15 $8.2:[rbp-34] $8.3:[rbp-34] 
  .loc 3 631 17
  # $13.1: bool = $12.1 == null
  cmp r15, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rax $13.1:rbx $8.2:[rbp-34] $8.3:[rbp-34] 
  # jump($13.1, .LABEL__populate_phi_instructions_92__10, .LABEL__populate_phi_instructions_92__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__populate_phi_instructions_92__11
.LABEL__populate_phi_instructions_92__10:
  .loc 3 632 42
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:rax:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] $14.1:rbx 
  .loc 3 632 42
  # block_predecessors.1: @List_Iterator = call(create_iterator_375, $14.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:rax 
  # jump(.LABEL__populate_phi_instructions_92__12)
  mov [rbp-51], rax
.LABEL__populate_phi_instructions_92__12:
  .loc 3 633 24
  # $16.1: bool = call(has_next_378, block_predecessors.1)
  mov rdi, [rbp-51]
  call has_next_378
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:rax 
  # jump($16.1, .LABEL__populate_phi_instructions_92__13, .LABEL__populate_phi_instructions_92__11)
  test al, al
  mov [rbp-52], al
  jz .LABEL__populate_phi_instructions_92__11
.LABEL__populate_phi_instructions_92__13:
  .loc 3 634 45
  # block_predecessor.1: @IR_Block = call(next_379, block_predecessors.1)
  mov rdi, [rbp-51]
  call next_379
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax 
  .loc 3 635 89
  # $19.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rbx, [rbp-42]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $19.1:r15 
  .loc 3 635 89
  # $20.1: @IR_Variable = load_struct_member($19.1, variable)
  mov r14, [r15+48]
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:rbx:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] block_predecessor.1:rax $20.1:r14 
  .loc 3 635 40
  # $21.1: @IR_Value = call(get_block_variable_value_93, self.1, block_predecessor.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r14
  call get_block_variable_value_93
  # [discarded value]: $20.1
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] $21.1:rax 
  .loc 3 635 21
  # call(append_247, instruction.1, $21.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_247
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_92__12)
  jmp .LABEL__populate_phi_instructions_92__12
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
.LABEL__populate_phi_instructions_92__11:
  .loc 3 638 33
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-33]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:rbx:[rbp-33] $16.1:[rbp-52] 
  # jump(.LABEL__populate_phi_instructions_92__5)
  mov [rbp-33], rbx
  jmp .LABEL__populate_phi_instructions_92__5
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] block_instruction.6:[rbp-33] $16.1:[rbp-52] 
  # [discarded value]: block_instruction.6
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] $16.1:[rbp-52] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] block_predecessors.1:[rbp-51] 
  # [discarded value]: block_predecessors.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $13.1:[rbp-43] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] instruction.1:[rbp-42] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] $8.3:[rbp-34] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] $8.2:[rbp-34] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] block_instruction.2:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] block.1:[rbp-25] block_instruction.1:[rbp-33] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__populate_phi_instructions_92__4:
  # return()
  jmp .LABEL__populate_phi_instructions_92__end
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] blocks.1:[rbp-16] 
  # [discarded value]: blocks.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__populate_phi_instructions_92__end:
  mov rsp, rbp
  pop rbp
  ret

populate_phi_instructions_92__stack_frame_size: .word 64

  .loc 3 643 8
  .text
get_block_variable_value_93:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_block_variable_value_93__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_block_variable_value_93__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx 
  .loc 3 644 29
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, last_instruction)
  mov rax, [rsi+40]
  # [live values]: self.1:rdi block.1:rsi variable.1:rdx block_instruction.1:rax 
  # jump(.LABEL__get_block_variable_value_93__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__get_block_variable_value_93__2:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.7)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  .loc 3 645 12
  # $2.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_block_variable_value_93__3, .LABEL__get_block_variable_value_93__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__get_block_variable_value_93__4
.LABEL__get_block_variable_value_93__3:
  .loc 3 646 13
  # $3.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 3 646 13
  # $4.1: bool = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:r15 
  .loc 3 646 13
  # $5.1: bool = $4.1
  mov [rbp-34], r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:r15 
  # jump($5.1, .LABEL__get_block_variable_value_93__5, .LABEL__get_block_variable_value_93__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__get_block_variable_value_93__6
.LABEL__get_block_variable_value_93__5:
  .loc 3 646 55
  # $6.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $6.1:rbx 
  .loc 3 646 55
  # $7.1: @IR_Variable = load_struct_member($6.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $7.1:r15 
  .loc 3 646 55
  # $8.1: bool = $7.1 == variable.1
  cmp r15, QWORD PTR [rbp-16]
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $8.1:rbx 
  .loc 3 646 13
  # $5.2: bool = $8.1
  mov [rbp-35], bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:rbx:[rbp-34] 
  # jump(.LABEL__get_block_variable_value_93__6)
  mov [rbp-34], bl
.LABEL__get_block_variable_value_93__6:
  .loc 3 646 13
  # $5.3: bool = phi($5.1, $5.2)
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # jump($5.3, .LABEL__get_block_variable_value_93__7, .LABEL__get_block_variable_value_93__8)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__get_block_variable_value_93__8
.LABEL__get_block_variable_value_93__7:
  .loc 3 647 20
  # $9.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:rax:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] $9.1:rbx 
  .loc 3 647 13
  # return($9.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__get_block_variable_value_93__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
.LABEL__get_block_variable_value_93__8:
  .loc 3 649 29
  # block_instruction.7: @IR_Instruction = load_struct_member(block_instruction.2, prev_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:rbx:[rbp-8] 
  # jump(.LABEL__get_block_variable_value_93__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_block_variable_value_93__2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] block_instruction.7:[rbp-8] 
  # [discarded value]: block_instruction.7
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] $5.3:[rbp-34] 
  # [discarded value]: $5.3
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] $5.2:[rbp-34] 
  # [discarded value]: $5.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__get_block_variable_value_93__4:
  .loc 3 651 9
  # $11.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $11.1:rbx 
  .loc 3 651 9
  # $12.1: isize = load_struct_member($11.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $12.1:r15 
  .loc 3 651 9
  # $13.1: bool = $12.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:rbx 
  # jump($13.1, .LABEL__get_block_variable_value_93__10, .LABEL__get_block_variable_value_93__11)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__get_block_variable_value_93__11
.LABEL__get_block_variable_value_93__10:
  .loc 3 652 46
  # $14.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $14.1:rbx 
  .loc 3 652 46
  # $16.1: @IR_Block = call(last_374, $14.1)
  mov rdi, rbx
  call last_374
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $16.1:rax 
  .loc 3 652 16
  # $17.1: @IR_Value = call(get_block_variable_value_93, self.1, $16.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_93
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $17.1:rax 
  .loc 3 652 9
  # return($17.1)
  mov [rbp-42], rax
  jmp .LABEL__get_block_variable_value_93__end
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
.LABEL__get_block_variable_value_93__11:
  .loc 3 654 49
  # $18.1: @IR_Variable_Value = call(create_variable_value_71, self.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-16]
  call create_variable_value_71
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] $18.1:rax 
  .loc 3 654 23
  # instruction.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $18.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax 
  .loc 3 655 5
  # $20.1: @IR_Instruction = call(prepend_167, block.1, instruction.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov [rbp-42], rax
  call prepend_167
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] 
  .loc 3 656 30
  # $21.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] block.1:rax:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] $21.1:rbx 
  .loc 3 656 30
  # block_predecessors.1: @List_Iterator = call(create_iterator_375, $21.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:rax 
  # jump(.LABEL__get_block_variable_value_93__13)
  mov [rbp-50], rax
.LABEL__get_block_variable_value_93__13:
  .loc 3 657 12
  # $23.1: bool = call(has_next_378, block_predecessors.1)
  mov rdi, [rbp-50]
  call has_next_378
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:rax 
  # jump($23.1, .LABEL__get_block_variable_value_93__14, .LABEL__get_block_variable_value_93__15)
  test al, al
  mov [rbp-51], al
  jz .LABEL__get_block_variable_value_93__15
.LABEL__get_block_variable_value_93__14:
  .loc 3 658 33
  # block_predecessor.1: @IR_Block = call(next_379, block_predecessors.1)
  mov rdi, [rbp-50]
  call next_379
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] block_predecessor.1:rax 
  .loc 3 659 28
  # $26.1: @IR_Value = call(get_block_variable_value_93, self.1, block_predecessor.1, variable.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, [rbp-16]
  call get_block_variable_value_93
  # [discarded value]: block_predecessor.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $26.1:rax 
  .loc 3 659 9
  # call(append_247, instruction.1, $26.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_247
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # jump(.LABEL__get_block_variable_value_93__13)
  jmp .LABEL__get_block_variable_value_93__13
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
.LABEL__get_block_variable_value_93__15:
  .loc 3 661 12
  # $27.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-42]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:rax:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] $27.1:rbx 
  .loc 3 661 5
  # return($27.1)
  mov rax, rbx
  mov [rbp-59], rbx
  jmp .LABEL__get_block_variable_value_93__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] $23.1:[rbp-51] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] instruction.1:[rbp-42] block_predecessors.1:[rbp-50] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: instruction.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] $13.1:[rbp-34] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] block_instruction.2:[rbp-8] 
  # [discarded value]: block_instruction.2
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] block.1:[rbp-24] variable.1:[rbp-16] block_instruction.1:[rbp-8] 
  # [discarded value]: block_instruction.1
  # [discarded value]: variable.1
  # [discarded value]: block.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_block_variable_value_93__end:
  mov rsp, rbp
  pop rbp
  ret

get_block_variable_value_93__stack_frame_size: .word 64

  .loc 3 664 8
  .text
remove_trivial_phi_instructions_94:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_trivial_phi_instructions_94__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_trivial_phi_instructions_94__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_trivial_phi_instructions_94__2)
  mov [rbp-8], rsi
.LABEL__remove_trivial_phi_instructions_94__2:
  .loc 3 666 13
  # repeat.1: bool = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 668 22
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 668 22
  # $2.1: @List = call(prune_368, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_368
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 668 22
  # blocks.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov rdi, rax
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  .loc 3 671 9
  # $4.1: @Any = call(next_379, blocks.1)
  mov rdi, rax
  mov [rbp-17], rax
  call next_379
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__4)
.LABEL__remove_trivial_phi_instructions_94__4:
  # repeat.4: bool = phi(repeat.1, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  .loc 3 673 16
  # $5.1: bool = call(has_next_378, blocks.1)
  mov rdi, [rbp-17]
  call has_next_378
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__remove_trivial_phi_instructions_94__5, .LABEL__remove_trivial_phi_instructions_94__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_trivial_phi_instructions_94__6
.LABEL__remove_trivial_phi_instructions_94__5:
  .loc 3 674 25
  # block.1: @IR_Block = call(next_379, blocks.1)
  mov rdi, [rbp-17]
  call next_379
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax 
  .loc 3 675 37
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_trivial_phi_instructions_94__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_trivial_phi_instructions_94__7:
  # repeat.6: bool = phi(repeat.4, repeat.7)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] 
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] 
  .loc 3 676 20
  # $9.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $9.1:rax 
  .loc 3 676 20
  # $10.1: bool = $9.1
  mov [rbp-35], al
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__remove_trivial_phi_instructions_94__10, .LABEL__remove_trivial_phi_instructions_94__11)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_trivial_phi_instructions_94__11
.LABEL__remove_trivial_phi_instructions_94__10:
  .loc 3 676 49
  # $10.2: bool = call(is_389, block_instruction.2, IR_Phi_Instruction)
  mov rdi, [rbp-34]
  mov rsi, IR_Phi_Instruction[rip]
  call is_389
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__11)
  mov [rbp-35], al
.LABEL__remove_trivial_phi_instructions_94__11:
  .loc 3 676 20
  # $10.3: bool = phi($10.1, $10.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__remove_trivial_phi_instructions_94__8, .LABEL__remove_trivial_phi_instructions_94__4)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_94__4
.LABEL__remove_trivial_phi_instructions_94__8:
  .loc 3 677 35
  # instruction.1: @IR_Phi_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 678 48
  # instruction_is_redundant.1: bool = call(is_redundant_248, instruction.1)
  mov rdi, rax
  mov [rbp-43], rax
  call is_redundant_248
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 679 21
  # $14.1: bool = instruction_is_redundant.1 == false
  cmp al, 0
  sete bl
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $14.1:rbx $10.2:[rbp-35] $10.3:[rbp-35] 
  .loc 3 679 21
  # $15.1: bool = $14.1
  mov [rbp-44], bl
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:rax $15.1:rbx $10.2:[rbp-35] $10.3:[rbp-35] 
  # jump($15.1, .LABEL__remove_trivial_phi_instructions_94__12, .LABEL__remove_trivial_phi_instructions_94__13)
  test bl, bl
  mov [rbp-44], al
  mov [rbp-45], bl
  jz .LABEL__remove_trivial_phi_instructions_94__13
.LABEL__remove_trivial_phi_instructions_94__12:
  .loc 3 679 58
  # $15.2: bool = call(is_trivial_249, instruction.1)
  mov rdi, [rbp-43]
  call is_trivial_249
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:rax:[rbp-45] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__13)
  mov [rbp-45], al
.LABEL__remove_trivial_phi_instructions_94__13:
  .loc 3 679 21
  # $15.3: bool = phi($15.1, $15.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  # jump($15.3, .LABEL__remove_trivial_phi_instructions_94__14, .LABEL__remove_trivial_phi_instructions_94__15)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_94__15
.LABEL__remove_trivial_phi_instructions_94__14:
  .loc 3 681 21
  # $17.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-43]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] $17.1:rbx 
  .loc 3 681 62
  # $18.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov r15, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] $17.1:rbx $18.1:r15 
  .loc 3 681 21
  # call(remove_values_183, $17.1, $18.1)
  mov rdi, rbx
  mov rsi, r15
  call remove_values_183
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  .loc 3 682 21
  # instruction_is_redundant.2: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:rax:[rbp-44] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__15)
  mov [rbp-44], al
.LABEL__remove_trivial_phi_instructions_94__15:
  # instruction_is_redundant.3: bool = phi(instruction_is_redundant.2, instruction_is_redundant.1)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] 
  # jump(instruction_is_redundant.3, .LABEL__remove_trivial_phi_instructions_94__16, .LABEL__remove_trivial_phi_instructions_94__17)
  mov al, [rbp-44]
  test al, al
  jz .LABEL__remove_trivial_phi_instructions_94__17
.LABEL__remove_trivial_phi_instructions_94__16:
  .loc 3 686 37
  # old_value.1: @IR_Variable_Value = load_struct_member(instruction.1, result_value)
  mov rax, [rbp-43]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx 
  .loc 3 687 37
  # $20.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov r15, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx $20.1:r15 
  .loc 3 687 37
  # $21.1: @IR_Values_Map_Entry = load_struct_member($20.1, first_entry)
  mov r14, [r15]
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx $21.1:r14 
  .loc 3 687 37
  # new_value.1: @IR_Value = load_struct_member($21.1, value)
  mov r15, [r14+8]
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx new_value.1:r15 
  .loc 3 688 45
  # $23.1: @List = load_struct_member(old_value.1, user_instructions)
  mov r14, [rbx+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:rax:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rbx new_value.1:r15 $23.1:r14 
  .loc 3 688 45
  # user_instructions.1: @List_Iterator = call(create_iterator_375, $23.1)
  mov rdi, r14
  mov [rbp-53], rbx
  mov [rbp-61], r15
  call create_iterator_375
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:rax 
  # jump(.LABEL__remove_trivial_phi_instructions_94__18)
  mov [rbp-69], rax
.LABEL__remove_trivial_phi_instructions_94__18:
  .loc 3 689 28
  # $25.1: bool = call(has_next_378, user_instructions.1)
  mov rdi, [rbp-69]
  call has_next_378
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:rax 
  # jump($25.1, .LABEL__remove_trivial_phi_instructions_94__19, .LABEL__remove_trivial_phi_instructions_94__20)
  test al, al
  mov [rbp-70], al
  jz .LABEL__remove_trivial_phi_instructions_94__20
.LABEL__remove_trivial_phi_instructions_94__19:
  .loc 3 690 48
  # user_instruction.1: @IR_Instruction = call(next_379, user_instructions.1)
  mov rdi, [rbp-69]
  call next_379
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] user_instruction.1:rax 
  .loc 3 691 25
  # call(replace_operand_value_179, user_instruction.1, old_value.1, new_value.1)
  mov rdi, rax
  mov rsi, [rbp-53]
  mov rdx, [rbp-61]
  call replace_operand_value_179
  # [discarded value]: user_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__18)
  jmp .LABEL__remove_trivial_phi_instructions_94__18
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
.LABEL__remove_trivial_phi_instructions_94__20:
  .loc 3 693 21
  # $28.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-61]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:rax:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $28.1:rbx 
  .loc 3 693 21
  # $29.1: @List = call(remove_all_367, $28.1, instruction.1)
  mov rdi, rbx
  mov rsi, [rbp-43]
  call remove_all_367
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $29.1:rax 
  .loc 3 693 21
  # $30.1: @List = call(prune_368, $29.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  .loc 3 694 48
  # $31.1: @List = load_struct_member(old_value.1, links)
  mov rax, [rbp-53]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rax:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] $31.1:rbx 
  .loc 3 694 48
  # old_value_links_item.1: @List_Item = load_struct_member($31.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:rax:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:r15 
  # jump(.LABEL__remove_trivial_phi_instructions_94__21)
  mov [rbp-78], r15
.LABEL__remove_trivial_phi_instructions_94__21:
  # old_value_links_item.2: @List_Item = phi(old_value_links_item.1, old_value_links_item.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] 
  .loc 3 695 28
  # $33.1: bool = old_value_links_item.2 != null
  cmp QWORD PTR [rbp-78], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:rax 
  # jump($33.1, .LABEL__remove_trivial_phi_instructions_94__22, .LABEL__remove_trivial_phi_instructions_94__23)
  test al, al
  mov [rbp-79], al
  jz .LABEL__remove_trivial_phi_instructions_94__23
.LABEL__remove_trivial_phi_instructions_94__22:
  .loc 3 696 46
  # old_value_link.1: @IR_Link = load_struct_member(old_value_links_item.2, data)
  mov rax, [rbp-78]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:rax:[rbp-78] $33.1:[rbp-79] old_value_link.1:rbx 
  .loc 3 697 29
  # $36.1: bool = call(is_389, old_value_link.1, IR_Required_By_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Required_By_Value_Link[rip]
  mov [rbp-87], rbx
  call is_389
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:rax 
  # jump($36.1, .LABEL__remove_trivial_phi_instructions_94__24, .LABEL__remove_trivial_phi_instructions_94__25)
  test al, al
  mov [rbp-88], al
  jz .LABEL__remove_trivial_phi_instructions_94__25
.LABEL__remove_trivial_phi_instructions_94__24:
  .loc 3 698 50
  # old_value_link.1: @IR_Required_By_Value_Link = old_value_link.1
  mov rax, [rbp-87]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax 
  .loc 3 699 29
  # $38.1: @IR_Requires_Value_Link = load_struct_member(old_value_link.1, back_link)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax $38.1:rbx 
  .loc 3 699 29
  # store_struct_member($38.1, value, new_value.1)
  mov r15, [rbp-61]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $38.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:r15:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax 
  .loc 3 700 29
  # $39.1: @List = load_struct_member(new_value.1, links)
  mov rbx, [r15+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:r15:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_link.1:rax $39.1:rbx 
  .loc 3 700 29
  # call(append_364, $39.1, old_value_link.1)
  mov rdi, rbx
  mov rsi, rax
  call append_364
  # [discarded value]: $39.1
  # [discarded value]: old_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__25)
.LABEL__remove_trivial_phi_instructions_94__25:
  .loc 3 702 48
  # old_value_links_item.5: @List_Item = load_struct_member(old_value_links_item.2, next_item)
  mov rax, [rbp-78]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_links_item.5:rbx:[rbp-78] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__21)
  mov [rbp-78], rbx
  jmp .LABEL__remove_trivial_phi_instructions_94__21
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] old_value_links_item.5:[rbp-78] 
  # [discarded value]: old_value_links_item.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] $36.1:[rbp-88] 
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] old_value_link.1:[rbp-87] 
  # [discarded value]: old_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
.LABEL__remove_trivial_phi_instructions_94__23:
  .loc 3 704 21
  # call(remove_171, block.1, instruction.1)
  mov rdi, [rbp-26]
  mov rsi, [rbp-43]
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
  .loc 3 705 21
  # repeat.2: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__17)
  mov [rbp-9], al
.LABEL__remove_trivial_phi_instructions_94__17:
  # repeat.7: bool = phi(repeat.2, repeat.6)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  .loc 3 707 37
  # block_instruction.6: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:rbx:[rbp-34] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # jump(.LABEL__remove_trivial_phi_instructions_94__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_trivial_phi_instructions_94__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] repeat.7:[rbp-9] block_instruction.6:[rbp-34] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [discarded value]: block_instruction.6
  # [discarded value]: repeat.7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] $33.1:[rbp-79] 
  # [discarded value]: $33.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] old_value_links_item.2:[rbp-78] 
  # [discarded value]: old_value_links_item.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] old_value_links_item.1:[rbp-78] 
  # [discarded value]: old_value_links_item.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] $25.1:[rbp-70] 
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] old_value.1:[rbp-53] new_value.1:[rbp-61] user_instructions.1:[rbp-69] 
  # [discarded value]: user_instructions.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] instruction_is_redundant.3:[rbp-44] 
  # [discarded value]: instruction_is_redundant.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] instruction_is_redundant.2:[rbp-44] 
  # [discarded value]: instruction_is_redundant.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] $15.3:[rbp-45] 
  # [discarded value]: $15.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] $15.2:[rbp-45] 
  # [discarded value]: $15.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] instruction.1:[rbp-43] instruction_is_redundant.1:[rbp-44] $15.1:[rbp-45] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $15.1
  # [discarded value]: instruction_is_redundant.1
  # [discarded value]: instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] repeat.6:[rbp-9] block_instruction.2:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: block_instruction.2
  # [discarded value]: repeat.6
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
.LABEL__remove_trivial_phi_instructions_94__6:
  .loc 3 711 13
  # $42.1: bool = repeat.4 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $42.1:rax 
  # jump($42.1, .LABEL__remove_trivial_phi_instructions_94__3, .LABEL__remove_trivial_phi_instructions_94__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_trivial_phi_instructions_94__2
.LABEL__remove_trivial_phi_instructions_94__3:
  # return()
  jmp .LABEL__remove_trivial_phi_instructions_94__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] $42.1:[rbp-19] 
  # [discarded value]: $42.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.4:[rbp-9] 
  # [discarded value]: repeat.4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_trivial_phi_instructions_94__end:
  mov rsp, rbp
  pop rbp
  ret

remove_trivial_phi_instructions_94__stack_frame_size: .word 96

  .loc 3 717 8
  .text
remove_redundant_set_instructions_95:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_redundant_set_instructions_95__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_redundant_set_instructions_95__1:
  # self.1: @IR_Builder = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rsi 
  # jump(.LABEL__remove_redundant_set_instructions_95__2)
  mov [rbp-8], rsi
.LABEL__remove_redundant_set_instructions_95__2:
  .loc 3 719 13
  # repeat.1: bool = false
  mov al, 0
  # [live values]: function.1:[rbp-8] repeat.1:rax 
  .loc 3 721 22
  # $1.1: @List = load_struct_member(function.1, blocks)
  mov rbx, [rbp-8]
  mov r15, [rbx+57]
  # [live values]: function.1:rbx:[rbp-8] repeat.1:rax $1.1:r15 
  .loc 3 721 22
  # $2.1: @List = call(prune_368, $1.1)
  mov rdi, r15
  mov [rbp-9], al
  call prune_368
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] $2.1:rax 
  .loc 3 721 22
  # blocks.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov rdi, rax
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:rax 
  # jump(.LABEL__remove_redundant_set_instructions_95__4)
  mov [rbp-17], rax
.LABEL__remove_redundant_set_instructions_95__4:
  # repeat.5: bool = phi(repeat.1, repeat.3, repeat.2, repeat.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  .loc 3 722 16
  # $4.1: bool = call(has_next_378, blocks.1)
  mov rdi, [rbp-17]
  call has_next_378
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:rax 
  # jump($4.1, .LABEL__remove_redundant_set_instructions_95__5, .LABEL__remove_redundant_set_instructions_95__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__remove_redundant_set_instructions_95__6
.LABEL__remove_redundant_set_instructions_95__5:
  .loc 3 723 25
  # block.1: @IR_Block = call(next_379, blocks.1)
  mov rdi, [rbp-17]
  call next_379
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax 
  .loc 3 725 37
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:rax block_instruction.1:rbx 
  # jump(.LABEL__remove_redundant_set_instructions_95__7)
  mov [rbp-26], rax
  mov [rbp-34], rbx
.LABEL__remove_redundant_set_instructions_95__7:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.11)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  .loc 3 726 20
  # $8.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:rax 
  # jump($8.1, .LABEL__remove_redundant_set_instructions_95__8, .LABEL__remove_redundant_set_instructions_95__4)
  test al, al
  mov [rbp-35], al
  jz .LABEL__remove_redundant_set_instructions_95__4
.LABEL__remove_redundant_set_instructions_95__8:
  .loc 3 727 21
  # $9.1: bool = call(is_389, block_instruction.2, IR_Set_Instruction)
  mov rdi, [rbp-34]
  mov rsi, IR_Set_Instruction[rip]
  call is_389
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:rax 
  # jump($9.1, .LABEL__remove_redundant_set_instructions_95__10, .LABEL__remove_redundant_set_instructions_95__11)
  test al, al
  mov [rbp-36], al
  jz .LABEL__remove_redundant_set_instructions_95__11
.LABEL__remove_redundant_set_instructions_95__10:
  .loc 3 728 34
  # $10.1: @IR_Set_Instruction = block_instruction.2
  mov rax, [rbp-34]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] $10.1:rax 
  .loc 3 728 33
  # value.1: @IR_Value = call(get_value_221, $10.1)
  mov rdi, rax
  call get_value_221
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax 
  .loc 3 729 25
  # $13.1: bool = call(is_389, value.1, IR_Undefined_Value)
  mov rdi, rax
  mov rsi, IR_Undefined_Value[rip]
  mov [rbp-44], rax
  call is_389
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__remove_redundant_set_instructions_95__12, .LABEL__remove_redundant_set_instructions_95__13)
  test al, al
  mov [rbp-45], al
  jz .LABEL__remove_redundant_set_instructions_95__13
.LABEL__remove_redundant_set_instructions_95__12:
  .loc 3 729 57
  # $14.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $14.1:rbx 
  .loc 3 729 57
  # $15.1: @List = load_struct_member($14.1, user_instructions)
  mov r15, [rbx+24]
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $15.1:r15 
  .loc 3 729 57
  # $16.1: isize = load_struct_member($15.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $16.1:rbx 
  .loc 3 729 57
  # $17.1: bool = $16.1 == 0
  cmp rbx, 0
  sete r15b
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $17.1:r15 
  .loc 3 729 25
  # $13.2: bool = $17.1
  mov [rbp-46], r15b
  # [discarded value]: $17.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:r15:[rbp-45] 
  # jump(.LABEL__remove_redundant_set_instructions_95__13)
  mov [rbp-45], r15b
.LABEL__remove_redundant_set_instructions_95__13:
  .loc 3 729 25
  # $13.3: bool = phi($13.1, $13.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # jump($13.3, .LABEL__remove_redundant_set_instructions_95__14, .LABEL__remove_redundant_set_instructions_95__15)
  mov al, [rbp-45]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_95__15
.LABEL__remove_redundant_set_instructions_95__14:
  .loc 3 730 25
  # call(remove_171, block.1, block_instruction.2)
  mov rdi, [rbp-26]
  mov rsi, [rbp-34]
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  .loc 3 731 25
  # repeat.2: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_95__4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_95__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] repeat.2:[rbp-9] 
  # [discarded value]: repeat.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
.LABEL__remove_redundant_set_instructions_95__15:
  .loc 3 734 25
  # $18.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-44]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $18.1:rbx 
  .loc 3 734 25
  # $19.1: isize = load_struct_member($18.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $19.1:r15 
  .loc 3 734 25
  # $20.1: bool = $19.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $20.1:rbx 
  .loc 3 734 25
  # $21.1: bool = $20.1
  mov [rbp-46], bl
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:rbx 
  # jump($21.1, .LABEL__remove_redundant_set_instructions_95__17, .LABEL__remove_redundant_set_instructions_95__18)
  test bl, bl
  mov [rbp-46], bl
  jz .LABEL__remove_redundant_set_instructions_95__18
.LABEL__remove_redundant_set_instructions_95__17:
  .loc 3 734 62
  # $22.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-44]
  mov rbx, [rax+24]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $22.1:rbx 
  .loc 3 734 62
  # $23.1: @List_Item = load_struct_member($22.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $23.1:r15 
  .loc 3 734 62
  # $25.1: @IR_Instruction = load_struct_member($23.1, data)
  mov rbx, [r15+16]
  # [discarded value]: $23.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $25.1:rbx 
  .loc 3 734 62
  # $26.1: bool = $25.1 == block_instruction.2
  cmp rbx, QWORD PTR [rbp-34]
  sete r15b
  # [discarded value]: $25.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $26.1:r15 
  .loc 3 734 25
  # $21.2: bool = $26.1
  mov [rbp-47], r15b
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:r15:[rbp-46] 
  # jump(.LABEL__remove_redundant_set_instructions_95__18)
  mov [rbp-46], r15b
.LABEL__remove_redundant_set_instructions_95__18:
  .loc 3 734 25
  # $21.3: bool = phi($21.1, $21.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] 
  # jump($21.3, .LABEL__remove_redundant_set_instructions_95__19, .LABEL__remove_redundant_set_instructions_95__11)
  mov al, [rbp-46]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_95__11
.LABEL__remove_redundant_set_instructions_95__19:
  .loc 3 735 57
  # value_creator_instruction.1: @IR_Instruction = load_struct_member(value.1, creator_instruction)
  mov rax, [rbp-44]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx 
  .loc 3 736 29
  # $28.1: bool = value_creator_instruction.1 != null
  cmp rbx, 0
  setne r15b
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx $28.1:r15 
  .loc 3 736 29
  # $29.1: bool = $28.1
  mov [rbp-47], r15b
  # [discarded value]: $28.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:rax:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rbx $29.1:r15 
  # jump($29.1, .LABEL__remove_redundant_set_instructions_95__21, .LABEL__remove_redundant_set_instructions_95__22)
  test r15b, r15b
  mov [rbp-54], rbx
  mov [rbp-55], r15b
  jz .LABEL__remove_redundant_set_instructions_95__22
.LABEL__remove_redundant_set_instructions_95__21:
  .loc 3 736 66
  # $30.1: @IR_Block = load_struct_member(value_creator_instruction.1, parent_block)
  mov rax, [rbp-54]
  mov rbx, [rax+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $30.1:rbx 
  .loc 3 736 66
  # $31.1: bool = $30.1 == block.1
  cmp rbx, QWORD PTR [rbp-26]
  sete r15b
  # [discarded value]: $30.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $31.1:r15 
  .loc 3 736 29
  # $29.2: bool = $31.1
  mov [rbp-56], r15b
  # [discarded value]: $31.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:r15:[rbp-55] 
  # jump(.LABEL__remove_redundant_set_instructions_95__22)
  mov [rbp-55], r15b
.LABEL__remove_redundant_set_instructions_95__22:
  .loc 3 736 29
  # $29.3: bool = phi($29.1, $29.2)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # jump($29.3, .LABEL__remove_redundant_set_instructions_95__23, .LABEL__remove_redundant_set_instructions_95__11)
  mov al, [rbp-55]
  test al, al
  jz .LABEL__remove_redundant_set_instructions_95__11
.LABEL__remove_redundant_set_instructions_95__23:
  .loc 3 737 51
  # redundant_value.1: @IR_Variable_Value = load_struct_member(value_creator_instruction.1, result_value)
  mov rax, [rbp-54]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] redundant_value.1:rbx 
  .loc 3 738 63
  # replacement_value.1: @IR_Value = load_struct_member(block_instruction.2, result_value)
  mov r15, [rbp-34]
  mov r14, [r15+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] redundant_value.1:rbx replacement_value.1:r14 
  .loc 3 739 62
  # $34.1: @List = load_struct_member(redundant_value.1, links)
  mov r13, [rbx+32]
  # [discarded value]: redundant_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r14 $34.1:r13 
  .loc 3 739 62
  # redundant_value_links_item.1: @List_Item = load_struct_member($34.1, first_item)
  mov rbx, [r13]
  # [discarded value]: $34.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:r15:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:rax:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r14 redundant_value_links_item.1:rbx 
  # jump(.LABEL__remove_redundant_set_instructions_95__25)
  mov [rbp-63], rbx
  mov [rbp-71], r14
.LABEL__remove_redundant_set_instructions_95__25:
  # redundant_value_links_item.2: @List_Item = phi(redundant_value_links_item.1, redundant_value_links_item.5)
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] 
  .loc 3 740 36
  # $36.1: bool = redundant_value_links_item.2 != null
  cmp QWORD PTR [rbp-63], 0
  setne al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:rax 
  # jump($36.1, .LABEL__remove_redundant_set_instructions_95__26, .LABEL__remove_redundant_set_instructions_95__27)
  test al, al
  mov [rbp-72], al
  jz .LABEL__remove_redundant_set_instructions_95__27
.LABEL__remove_redundant_set_instructions_95__26:
  .loc 3 741 60
  # redundant_value_link.1: @IR_Link = load_struct_member(redundant_value_links_item.2, data)
  mov rax, [rbp-63]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:rax:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:rbx 
  .loc 3 742 37
  # $39.1: bool = call(is_389, redundant_value_link.1, IR_Requires_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Requires_Value_Link[rip]
  mov [rbp-80], rbx
  call is_389
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:rax 
  # jump($39.1, .LABEL__remove_redundant_set_instructions_95__28, .LABEL__remove_redundant_set_instructions_95__29)
  test al, al
  mov [rbp-81], al
  jz .LABEL__remove_redundant_set_instructions_95__29
.LABEL__remove_redundant_set_instructions_95__28:
  .loc 3 743 64
  # redundant_value_link.1: @IR_Requires_Value_Link = redundant_value_link.1
  mov rax, [rbp-80]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax 
  .loc 3 744 37
  # $41.1: @IR_Required_By_Value_Link = load_struct_member(redundant_value_link.1, back_link)
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax $41.1:rbx 
  .loc 3 744 37
  # store_struct_member($41.1, value, replacement_value.1)
  mov r15, [rbp-71]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $41.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r15:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax 
  .loc 3 745 37
  # $42.1: @List = load_struct_member(replacement_value.1, links)
  mov rbx, [r15+32]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:r15:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_link.1:rax $42.1:rbx 
  .loc 3 745 37
  # call(append_364, $42.1, redundant_value_link.1)
  mov rdi, rbx
  mov rsi, rax
  call append_364
  # [discarded value]: $42.1
  # [discarded value]: redundant_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # jump(.LABEL__remove_redundant_set_instructions_95__29)
.LABEL__remove_redundant_set_instructions_95__29:
  .loc 3 747 62
  # redundant_value_links_item.5: @List_Item = load_struct_member(redundant_value_links_item.2, next_item)
  mov rax, [rbp-63]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_links_item.5:rbx:[rbp-63] 
  # jump(.LABEL__remove_redundant_set_instructions_95__25)
  mov [rbp-63], rbx
  jmp .LABEL__remove_redundant_set_instructions_95__25
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] redundant_value_links_item.5:[rbp-63] 
  # [discarded value]: redundant_value_links_item.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] $39.1:[rbp-81] 
  # [discarded value]: $39.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] redundant_value_link.1:[rbp-80] 
  # [discarded value]: redundant_value_link.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
.LABEL__remove_redundant_set_instructions_95__27:
  .loc 3 749 70
  # $44.1: @IR_Variable_Value = load_struct_member(block_instruction.2, result_value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] $44.1:rbx 
  .loc 3 749 29
  # store_struct_member(value_creator_instruction.1, result_value, $44.1)
  mov r15, [rbp-54]
  mov QWORD PTR [r15+16], rbx
  # [discarded value]: $44.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 750 29
  # $45.1: @IR_Variable_Value = load_struct_member(value_creator_instruction.1, result_value)
  mov rbx, [r15+16]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] $45.1:rbx 
  .loc 3 750 29
  # store_struct_member($45.1, creator_instruction, value_creator_instruction.1)
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $45.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:rax:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:r15:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 751 29
  # call(remove_171, block.1, block_instruction.2)
  mov rdi, [rbp-26]
  mov rsi, rax
  call remove_171
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  .loc 3 752 29
  # repeat.3: bool = true
  mov al, 1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] repeat.3:rax:[rbp-9] 
  # jump(.LABEL__remove_redundant_set_instructions_95__4)
  mov [rbp-9], al
  jmp .LABEL__remove_redundant_set_instructions_95__4
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] repeat.3:[rbp-9] 
  # [discarded value]: repeat.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] $36.1:[rbp-72] 
  # [discarded value]: $36.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] redundant_value_links_item.2:[rbp-63] 
  # [discarded value]: redundant_value_links_item.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] replacement_value.1:[rbp-71] redundant_value_links_item.1:[rbp-63] 
  # [discarded value]: redundant_value_links_item.1
  # [discarded value]: replacement_value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
.LABEL__remove_redundant_set_instructions_95__11:
  .loc 3 757 37
  # block_instruction.11: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] block_instruction.11:rbx:[rbp-34] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # jump(.LABEL__remove_redundant_set_instructions_95__7)
  mov [rbp-34], rbx
  jmp .LABEL__remove_redundant_set_instructions_95__7
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] block_instruction.11:[rbp-34] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # [discarded value]: block_instruction.11
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] $29.3:[rbp-55] 
  # [discarded value]: $29.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] $29.2:[rbp-55] 
  # [discarded value]: $29.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] value_creator_instruction.1:[rbp-54] $29.1:[rbp-55] 
  # [discarded value]: $29.1
  # [discarded value]: value_creator_instruction.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] $21.3:[rbp-46] 
  # [discarded value]: $21.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] $21.2:[rbp-46] 
  # [discarded value]: $21.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] $21.1:[rbp-46] 
  # [discarded value]: $21.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] $13.3:[rbp-45] 
  # [discarded value]: $13.3
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] $13.2:[rbp-45] 
  # [discarded value]: $13.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] value.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [discarded value]: value.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] $9.1:[rbp-36] 
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] $8.1:[rbp-35] 
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] block.1:[rbp-26] block_instruction.1:[rbp-34] 
  # [discarded value]: block_instruction.1
  # [discarded value]: block.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
.LABEL__remove_redundant_set_instructions_95__6:
  .loc 3 761 13
  # $47.1: bool = repeat.5 == false
  cmp BYTE PTR [rbp-9], 0
  sete al
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $47.1:rax 
  # jump($47.1, .LABEL__remove_redundant_set_instructions_95__3, .LABEL__remove_redundant_set_instructions_95__2)
  test al, al
  mov [rbp-19], al
  jz .LABEL__remove_redundant_set_instructions_95__2
.LABEL__remove_redundant_set_instructions_95__3:
  # return()
  jmp .LABEL__remove_redundant_set_instructions_95__end
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] $47.1:[rbp-19] 
  # [discarded value]: $47.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] repeat.5:[rbp-9] 
  # [discarded value]: repeat.5
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [live values]: function.1:[rbp-8] repeat.1:[rbp-9] blocks.1:[rbp-17] 
  # [discarded value]: blocks.1
  # [discarded value]: repeat.1
  # [live values]: function.1:[rbp-8] 
  # [live values]: function.1:[rbp-8] 
  # [discarded value]: function.1
  # [live values]: 
.LABEL__remove_redundant_set_instructions_95__end:
  mov rsp, rbp
  pop rbp
  ret

remove_redundant_set_instructions_95__stack_frame_size: .word 96

  .loc 3 767 8
  .text
convert_statement_96:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_statement_96__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_statement_96__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 768 9
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 768 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_statement_96__2, .LABEL__convert_statement_96__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_statement_96__3
.LABEL__convert_statement_96__2:
  .loc 3 769 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 769 41
  # $4.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r15 
  .loc 3 769 41
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx $4.1:r15 $5.1:r14 
  .loc 3 769 35
  # $6.1: @String = call(clone_391, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call clone_391
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $6.1:rax 
  .loc 3 769 35
  # $7.1: @String = call(append_400, $6.1, " requires a basic block.")
  mov rdi, rax
  lea rsi, .LABEL__string_209[rip] # " requires a basic block."
  call append_400
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:[rbp-25] $7.1:rax 
  .loc 3 769 9
  # call(abort_360, $3.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_360
  # [discarded value]: $7.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_statement_96__3:
  .loc 3 771 5
  # $8.1: func (statement: @AST_Statement, builder: @IR_Builder) -> Nothing = load_struct_member(statement.1, convert)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $8.1:rbx 
  .loc 3 771 5
  # call($8.1, statement.1, self.1)
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rax, rbx
  call rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_statement_96__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_statement_96__end:
  mov rsp, rbp
  pop rbp
  ret

convert_statement_96__stack_frame_size: .word 32

  .loc 3 774 8
  .text
convert_assignment_statement_97:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_assignment_statement_97__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_assignment_statement_97__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # assignment_statement.1: @AST_Assignment_Statement = load_variable(assignment_statement)
  # [live values]: self.1:rdi assignment_statement.1:rsi 
  .loc 3 775 9
  # $1.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi assignment_statement.1:rsi $1.1:rax 
  .loc 3 775 9
  # $2.1: bool = call(is_389, $1.1, AST_Array_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Array_Access_Expression[rip]
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_assignment_statement_97__2, .LABEL__convert_assignment_statement_97__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_assignment_statement_97__4
.LABEL__convert_assignment_statement_97__2:
  .loc 3 776 39
  # array_access_expression.1: @AST_Array_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx 
  .loc 3 777 62
  # $66.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_access_expression.1:rbx $66.1:r15 
  .loc 3 777 104
  # $67.1: @IR_Type = call(get_named_type_66, self.1, "isize")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_184[rip] # "isize"
  mov [rbp-25], rbx
  mov [rbp-33], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] $66.1:[rbp-33] $67.1:rax 
  .loc 3 777 38
  # array_item_index_value.1: @IR_Value = call(convert_expression_106, self.1, $66.1, $67.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $67.1
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_access_expression.1:[rbp-25] array_item_index_value.1:rax 
  .loc 3 778 61
  # $69.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [discarded value]: array_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:rax $69.1:r15 
  .loc 3 778 29
  # array_address.1: @IR_Value = call(convert_expression_address_107, self.1, $69.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-25], rax
  call convert_expression_address_107
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax 
  .loc 3 779 13
  # $71.1: @IR_Type = load_struct_member(array_address.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax $71.1:rbx 
  .loc 3 779 13
  # $72.1: bool = call(is_389, $71.1, IR_Unchecked_Array_Type)
  mov rdi, rbx
  mov rsi, IR_Unchecked_Array_Type[rip]
  mov [rbp-33], rax
  call is_389
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:rax 
  # jump($72.1, .LABEL__convert_assignment_statement_97__19, .LABEL__convert_assignment_statement_97__21)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_assignment_statement_97__21
.LABEL__convert_assignment_statement_97__19:
  .loc 3 780 36
  # $76.1: @IR_Unchecked_Array_Type = load_struct_member(array_address.1, type)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $72.1:[rbp-34] $76.1:rbx 
  .loc 3 780 35
  # array_item_type.1: @IR_Type = load_struct_member($76.1, item_type)
  mov r15, [rbx+16]
  # [discarded value]: $76.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $72.1:[rbp-34] array_item_type.1:r15 
  .loc 3 781 49
  # $78.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rbx, [rbp-16]
  mov r14, [rbx+40]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:rax:[rbp-33] $72.1:[rbp-34] array_item_type.1:r15 $78.1:r14 
  .loc 3 781 25
  # value.1: @IR_Value = call(convert_expression_106, self.1, $78.1, array_item_type.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov rdx, r15
  call convert_expression_106
  # [discarded value]: $78.1
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] value.1:rax 
  .loc 3 782 25
  # $80.1: @IR_Store_Array_Item_Instruction = call(create_ir_store_array_item_instruction_223, array_address.1, array_item_index_value.1, value.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-25]
  mov rdx, rax
  call create_ir_store_array_item_instruction_223
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] $80.1:rax 
  .loc 3 782 111
  # $81.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] $80.1:rax $81.1:r15 
  .loc 3 782 13
  # $82.1: @IR_Variable_Value = call(append_78, self.1, $80.1, $81.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [discarded value]: $80.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] 
  # jump(.LABEL__convert_assignment_statement_97__3)
.LABEL__convert_assignment_statement_97__3:
  # return()
  jmp .LABEL__convert_assignment_statement_97__end
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] 
.LABEL__convert_assignment_statement_97__21:
  .loc 3 784 19
  # $73.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] $73.1:rbx 
  .loc 3 784 50
  # $74.1: @String = call(clone_391, "Not an array value")
  lea rdi, .LABEL__string_210[rip] # "Not an array value"
  mov [rbp-42], rbx
  call clone_391
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] $73.1:[rbp-42] $74.1:rax 
  .loc 3 784 13
  # call(abort_360, $73.1, $74.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_360
  # [discarded value]: $74.1
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] $72.1:[rbp-34] 
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] array_item_index_value.1:[rbp-25] array_address.1:[rbp-33] 
  # [discarded value]: array_address.1
  # [discarded value]: array_item_index_value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_assignment_statement_97__4:
  .loc 3 786 16
  # $3.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 786 16
  # $4.1: bool = call(is_389, $3.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_assignment_statement_97__5, .LABEL__convert_assignment_statement_97__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_assignment_statement_97__7
.LABEL__convert_assignment_statement_97__5:
  .loc 3 787 40
  # member_access_expression.1: @AST_Member_Access_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx 
  .loc 3 788 68
  # $28.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx $28.1:r15 
  .loc 3 788 36
  # object_address_value.1: @IR_Value = call(convert_expression_address_107, self.1, $28.1)
  mov rdi, [rbp-8]
  mov rsi, r15
  mov [rbp-26], rbx
  call convert_expression_address_107
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax 
  .loc 3 789 13
  # $30.1: @IR_Type = load_struct_member(object_address_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax $30.1:rbx 
  .loc 3 789 13
  # $31.1: bool = call(is_389, $30.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-34], rax
  call is_389
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $31.1:rax 
  .loc 3 789 13
  # $32.1: bool = $31.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:rbx 
  # jump($32.1, .LABEL__convert_assignment_statement_97__13, .LABEL__convert_assignment_statement_97__14)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__convert_assignment_statement_97__14
.LABEL__convert_assignment_statement_97__13:
  .loc 3 790 19
  # $33.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:rbx 
  .loc 3 790 50
  # $34.1: @String = call(clone_391, "Not a pointer value")
  lea rdi, .LABEL__string_211[rip] # "Not a pointer value"
  mov [rbp-43], rbx
  call clone_391
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] $33.1:[rbp-43] $34.1:rax 
  .loc 3 790 13
  # call(abort_360, $33.1, $34.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_360
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
.LABEL__convert_assignment_statement_97__14:
  .loc 3 792 28
  # $36.1: @IR_Pointer_Type = load_struct_member(object_address_value.1, type)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] $36.1:rbx 
  .loc 3 792 27
  # object_type.1: @IR_Type = load_struct_member($36.1, pointed_type)
  mov r15, [rbx+16]
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:rax:[rbp-34] $32.1:[rbp-35] object_type.1:r15 
  .loc 3 793 13
  # $38.1: bool = call(is_389, object_type.1, IR_Struct_Type)
  mov rdi, r15
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-43], r15
  call is_389
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $38.1:rax 
  .loc 3 793 13
  # $39.1: bool = $38.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:rbx 
  # jump($39.1, .LABEL__convert_assignment_statement_97__15, .LABEL__convert_assignment_statement_97__16)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_97__16
.LABEL__convert_assignment_statement_97__15:
  .loc 3 794 19
  # $40.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] $40.1:rbx 
  .loc 3 794 56
  # $41.1: @String = load_struct_member(object_type.1, name)
  mov r15, [rbp-43]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:r15:[rbp-43] $39.1:[rbp-44] $40.1:rbx $41.1:r14 
  .loc 3 794 50
  # $42.1: @String = call(clone_391, $41.1)
  mov rdi, r14
  mov [rbp-52], rbx
  call clone_391
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] $40.1:[rbp-52] $42.1:rax 
  .loc 3 794 50
  # $43.1: @String = call(append_400, $42.1, " is not a struct type")
  mov rdi, rax
  lea rsi, .LABEL__string_212[rip] # " is not a struct type"
  call append_400
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] $40.1:[rbp-52] $43.1:rax 
  .loc 3 794 13
  # call(abort_360, $40.1, $43.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_360
  # [discarded value]: $43.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] 
.LABEL__convert_assignment_statement_97__16:
  .loc 3 796 28
  # struct_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-43]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:rax 
  .loc 3 797 57
  # $45.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:rax $45.1:r15 
  .loc 3 797 57
  # $46.1: @String = load_struct_member($45.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:rax $46.1:r14 
  .loc 3 797 34
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $46.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-52], rax
  call get_member_150
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 798 13
  # $48.1: bool = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:rax $48.1:rbx 
  # jump($48.1, .LABEL__convert_assignment_statement_97__17, .LABEL__convert_assignment_statement_97__18)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_assignment_statement_97__18
.LABEL__convert_assignment_statement_97__17:
  .loc 3 799 13
  # call(dump_struct_members_127, struct_type.1)
  mov rdi, [rbp-52]
  call dump_struct_members_127
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] 
  .loc 3 800 19
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $49.1:rbx 
  .loc 3 800 19
  # $50.1: @Source_Location = load_struct_member($49.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:r15 
  .loc 3 800 72
  # $51.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-43]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rax:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:rbx:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:r15 $51.1:r14 
  .loc 3 800 66
  # $52.1: @String = call(clone_391, $51.1)
  mov rdi, r14
  mov [rbp-69], r15
  call clone_391
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $52.1:rax 
  .loc 3 800 66
  # $53.1: @String = call(append_400, $52.1, " doesn't have a ")
  mov rdi, rax
  lea rsi, .LABEL__string_213[rip] # " doesn't have a "
  call append_400
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $53.1:rax 
  .loc 3 800 124
  # $54.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-26]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $53.1:rax $54.1:r15 
  .loc 3 800 124
  # $55.1: @String = load_struct_member($54.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:rbx:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $53.1:rax $55.1:r14 
  .loc 3 800 66
  # $56.1: @String = call(append_400, $53.1, $55.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $55.1
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $56.1:rax 
  .loc 3 800 66
  # $57.1: @String = call(append_400, $56.1, " member")
  mov rdi, rax
  lea rsi, .LABEL__string_214[rip] # " member"
  call append_400
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $50.1:[rbp-69] $57.1:rax 
  .loc 3 800 13
  # call(abort_360, $50.1, $57.1)
  mov rdi, [rbp-69]
  mov rsi, rax
  call abort_360
  # [discarded value]: $57.1
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] 
.LABEL__convert_assignment_statement_97__18:
  .loc 3 802 45
  # $58.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $58.1:rbx 
  .loc 3 802 84
  # $59.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-60]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:r15:[rbp-60] $48.1:[rbp-61] $58.1:rbx $59.1:r14 
  .loc 3 802 21
  # value.1: @IR_Value = call(convert_expression_106, self.1, $58.1, $59.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $59.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] value.1:rax 
  .loc 3 803 21
  # $61.1: @IR_Store_Struct_Member_Instruction = call(create_ir_store_struct_member_instruction_228, object_address_value.1, struct_type_member.1, value.1)
  mov rdi, [rbp-34]
  mov rsi, [rbp-60]
  mov rdx, rax
  call create_ir_store_struct_member_instruction_228
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $61.1:rax 
  .loc 3 803 113
  # $62.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] $61.1:rax $62.1:r15 
  .loc 3 803 9
  # $63.1: @IR_Variable_Value = call(append_78, self.1, $61.1, $62.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] 
  # jump(.LABEL__convert_assignment_statement_97__3)
  jmp .LABEL__convert_assignment_statement_97__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] $48.1:[rbp-61] 
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] struct_type.1:[rbp-52] struct_type_member.1:[rbp-60] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] $39.1:[rbp-44] 
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] object_type.1:[rbp-43] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] $32.1:[rbp-35] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] member_access_expression.1:[rbp-26] object_address_value.1:[rbp-34] 
  # [discarded value]: object_address_value.1
  # [discarded value]: member_access_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_assignment_statement_97__7:
  .loc 3 804 16
  # $5.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 3 804 16
  # $6.1: bool = call(is_389, $5.1, AST_Variable_Expression)
  mov rdi, rbx
  mov rsi, AST_Variable_Expression[rip]
  call is_389
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  # jump($6.1, .LABEL__convert_assignment_statement_97__8, .LABEL__convert_assignment_statement_97__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_assignment_statement_97__10
.LABEL__convert_assignment_statement_97__8:
  .loc 3 805 35
  # variable_expression.1: @AST_Variable_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx 
  .loc 3 806 29
  # $12.1: @Identifier_Token = load_struct_member(variable_expression.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx $12.1:r15 
  .loc 3 806 29
  # variable_name.1: @String = load_struct_member($12.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rbx variable_name.1:r14 
  .loc 3 807 24
  # variable.1: @IR_Variable = call(get_variable_69, self.1, variable_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  mov [rbp-35], r14
  call get_variable_69
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax 
  .loc 3 808 13
  # $15.1: bool = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:rax $15.1:rbx 
  # jump($15.1, .LABEL__convert_assignment_statement_97__11, .LABEL__convert_assignment_statement_97__12)
  test bl, bl
  mov [rbp-43], rax
  mov [rbp-44], bl
  jz .LABEL__convert_assignment_statement_97__12
.LABEL__convert_assignment_statement_97__11:
  .loc 3 809 19
  # $16.1: @Source_Location = load_struct_member(variable_expression.1, location)
  mov rax, [rbp-27]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:rax:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:rbx 
  .loc 3 809 49
  # $17.1: @String = call(clone_391, "Undeclared variable: ")
  lea rdi, .LABEL__string_215[rip] # "Undeclared variable: "
  mov [rbp-52], rbx
  call clone_391
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $17.1:rax 
  .loc 3 809 49
  # $18.1: @String = call(append_400, $17.1, variable_name.1)
  mov rdi, rax
  mov rsi, [rbp-35]
  call append_400
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $16.1:[rbp-52] $18.1:rax 
  .loc 3 809 13
  # call(abort_360, $16.1, $18.1)
  mov rdi, [rbp-52]
  mov rsi, rax
  call abort_360
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
.LABEL__convert_assignment_statement_97__12:
  .loc 3 811 45
  # $19.1: @AST_Expression = load_struct_member(assignment_statement.1, value_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $19.1:rbx 
  .loc 3 811 84
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  mov r15, [rbp-43]
  mov r14, [r15+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:r15:[rbp-43] $15.1:[rbp-44] $19.1:rbx $20.1:r14 
  .loc 3 811 21
  # value.1: @IR_Value = call(convert_expression_106, self.1, $19.1, $20.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:rax 
  .loc 3 812 47
  # $22.1: @IR_Variable_Value = call(create_variable_value_71, self.1, variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-43]
  mov [rbp-52], rax
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] value.1:[rbp-52] $22.1:rax 
  .loc 3 812 21
  # $23.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $22.1, value.1)
  mov rdi, rax
  mov rsi, [rbp-52]
  call create_ir_set_instruction_220
  # [discarded value]: $22.1
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax 
  .loc 3 812 93
  # $24.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rbx:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] $23.1:rax $24.1:r15 
  .loc 3 812 9
  # $25.1: @IR_Variable_Value = call(append_78, self.1, $23.1, $24.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # jump(.LABEL__convert_assignment_statement_97__3)
  jmp .LABEL__convert_assignment_statement_97__3
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] variable_expression.1:[rbp-27] variable_name.1:[rbp-35] variable.1:[rbp-43] 
  # [discarded value]: variable.1
  # [discarded value]: variable_name.1
  # [discarded value]: variable_expression.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
.LABEL__convert_assignment_statement_97__10:
  .loc 3 814 15
  # $7.1: @Source_Location = load_struct_member(assignment_statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx 
  .loc 3 814 46
  # $8.1: @AST_Expression = load_struct_member(assignment_statement.1, storage_expression)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $8.1:r15 
  .loc 3 814 46
  # $9.1: @Object_Type = load_struct_member($8.1, object_type)
  mov r14, [r15]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:rax:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] $7.1:rbx $9.1:r14 
  .loc 3 814 9
  # call(abort_145, $7.1, $9.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] $6.1:[rbp-19] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] assignment_statement.1:[rbp-16] 
  # [discarded value]: assignment_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_assignment_statement_97__end:
  mov rsp, rbp
  pop rbp
  ret

convert_assignment_statement_97__stack_frame_size: .word 80

  .loc 3 818 8
  .text
convert_block_statement_98:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_block_statement_98__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_block_statement_98__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 819 52
  # $1.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 819 81
  # $2.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rbx, [rdi]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $2.1:rbx 
  .loc 3 819 81
  # $3.1: @List = load_struct_member($2.1, named_values)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax $3.1:r15 
  .loc 3 44 23
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $1.1:[rbp-8] $3.1:[rbp-32] $4.1:rax 
  .loc 3 819 20
  # $5.1: @IR_Builder_Context = new IR_Builder_Context(parent = $1.1, named_values = $3.1, variables = $4.1)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  #     .parent = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .variables = $4.1
  mov r15, [rbp-40]
  mov QWORD PTR [rax+8], r15
  #     .named_values = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-16] $5.1:rax 
  .loc 3 819 5
  # store_struct_member(self.1, context, $5.1)
  mov rbx, [rbp-24]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $5.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-16] 
  .loc 3 820 28
  # $6.1: @List = load_struct_member(statement.1, statements)
  mov rax, [rbp-16]
  mov r15, [rax+24]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-24] $6.1:r15 
  .loc 3 820 28
  # block_statements.1: @List_Iterator = call(create_iterator_375, $6.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] block_statements.1:rax 
  # jump(.LABEL__convert_block_statement_98__2)
  mov [rbp-32], rax
.LABEL__convert_block_statement_98__2:
  .loc 3 821 12
  # $8.1: bool = call(has_next_378, block_statements.1)
  mov rdi, [rbp-32]
  call has_next_378
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_block_statement_98__3, .LABEL__convert_block_statement_98__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_block_statement_98__4
.LABEL__convert_block_statement_98__3:
  .loc 3 822 31
  # block_statement.1: @AST_Statement = call(next_379, block_statements.1)
  mov rdi, [rbp-32]
  call next_379
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] block_statement.1:rax 
  .loc 3 823 9
  # call(convert_statement_96, self.1, block_statement.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call convert_statement_96
  # [discarded value]: block_statement.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # jump(.LABEL__convert_block_statement_98__2)
  jmp .LABEL__convert_block_statement_98__2
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
.LABEL__convert_block_statement_98__4:
  .loc 3 825 20
  # $11.1: @IR_Builder_Context = load_struct_member(self.1, context)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $11.1:rbx 
  .loc 3 825 20
  # $12.1: @IR_Builder_Context = load_struct_member($11.1, parent)
  mov r15, [rbx]
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] $12.1:r15 
  .loc 3 825 5
  # store_struct_member(self.1, context, $12.1)
  mov QWORD PTR [rax], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # return()
  jmp .LABEL__convert_block_statement_98__end
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] block_statements.1:[rbp-32] 
  # [discarded value]: block_statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_block_statement_98__end:
  mov rsp, rbp
  pop rbp
  ret

convert_block_statement_98__stack_frame_size: .word 48

  .loc 3 828 8
  .text
convert_break_statement_99:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_break_statement_99__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_break_statement_99__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 829 9
  # $1.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 829 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_break_statement_99__2, .LABEL__convert_break_statement_99__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_break_statement_99__3
.LABEL__convert_break_statement_99__2:
  .loc 3 830 15
  # $3.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 3 830 9
  # call(abort_360, $3.1, "Break outside of a loop?")
  mov rdi, rbx
  lea rsi, .LABEL__string_216[rip] # "Break outside of a loop?"
  call abort_360
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_break_statement_99__3:
  .loc 3 832 5
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 3 832 36
  # $5.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 3 832 36
  # $6.1: @IR_Block = load_struct_member($5.1, end_block)
  mov r14, [r15+8]
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $4.1:rbx $6.1:r14 
  .loc 3 832 5
  # $7.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $4.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call append_jump_169
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  .loc 3 833 26
  # $8.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $8.1:rbx 
  .loc 3 833 26
  # $9.1: @IR_Function = load_struct_member($8.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $9.1:r15 
  .loc 3 833 26
  # $10.1: @IR_Block = call(create_block_173, $9.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $10.1:rax 
  .loc 3 833 5
  # store_struct_member(self.1, current_block, $10.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_break_statement_99__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_break_statement_99__end:
  mov rsp, rbp
  pop rbp
  ret

convert_break_statement_99__stack_frame_size: .word 32

  .loc 3 836 8
  .text
convert_expression_statement_100:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_statement_100__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_statement_100__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi statement.1:rsi expected_type.1:rdx 
  .loc 3 837 29
  # $1.1: @AST_Expression = load_struct_member(statement.1, expression)
  mov rax, [rsi+24]
  # [discarded value]: statement.1
  # [live values]: self.1:rdi expected_type.1:rdx $1.1:rax 
  .loc 3 837 5
  # $2.1: @IR_Value = call(convert_expression_106, self.1, $1.1, expected_type.1)
  mov rsi, rax
  call convert_expression_106
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: expected_type.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_expression_statement_100__end
  # [live values]: 
.LABEL__convert_expression_statement_100__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_statement_100__stack_frame_size: .word 0

  .loc 3 840 8
  .text
convert_if_statement_101:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_if_statement_101__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_if_statement_101__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_If_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 841 51
  # $1.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 841 83
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 841 27
  # condition_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:rax 
  .loc 3 842 22
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $4.1:r15 
  .loc 3 842 22
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:rax $5.1:r14 
  .loc 3 842 22
  # true_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax 
  .loc 3 843 21
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $7.1:r15 
  .loc 3 843 21
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rax $8.1:r14 
  .loc 3 843 21
  # end_block.1: @IR_Block = call(create_block_173, $8.1)
  mov rdi, r14
  mov [rbp-40], rax
  call create_block_173
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax 
  .loc 3 844 9
  # $10.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $10.1:r15 
  .loc 3 844 9
  # $11.1: bool = $10.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rax $11.1:r14 
  # jump($11.1, .LABEL__convert_if_statement_101__2, .LABEL__convert_if_statement_101__4)
  test r14b, r14b
  mov [rbp-48], rax
  mov [rbp-49], r14b
  jz .LABEL__convert_if_statement_101__4
.LABEL__convert_if_statement_101__2:
  .loc 3 845 27
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $14.1:rbx 
  .loc 3 845 27
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $15.1:r15 
  .loc 3 845 27
  # false_block.1: @IR_Block = call(create_block_173, $15.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax 
  .loc 3 846 9
  # $17.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-24]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:rax $17.1:r15 
  .loc 3 846 9
  # $18.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $17.1, condition_value.1, true_block.1, false_block.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, rax
  mov [rbp-57], rax
  call append_jump_170
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] false_block.1:[rbp-57] 
  .loc 3 847 9
  # store_struct_member(self.1, current_block, false_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-57]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: false_block.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 848 32
  # $19.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: self.1:rax:[rbp-24] statement.1:rbx:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $19.1:r15 
  .loc 3 848 9
  # call(convert_statement_96, self.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call convert_statement_96
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  .loc 3 849 13
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $20.1:rbx 
  .loc 3 849 13
  # $21.1: @IR_Instruction = load_struct_member($20.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $20.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $21.1:r15 
  .loc 3 849 13
  # $22.1: bool = call(is_exit_instruction_177, $21.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $22.1:rax 
  .loc 3 849 13
  # $23.1: bool = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:rbx 
  # jump($23.1, .LABEL__convert_if_statement_101__5, .LABEL__convert_if_statement_101__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_if_statement_101__3
.LABEL__convert_if_statement_101__5:
  .loc 3 850 13
  # $24.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $24.1:rbx 
  .loc 3 850 13
  # $25.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $24.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_169
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # jump(.LABEL__convert_if_statement_101__3)
.LABEL__convert_if_statement_101__3:
  .loc 3 855 5
  # store_struct_member(self.1, current_block, true_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 856 28
  # $26.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov r15, [rbp-8]
  mov r14, [r15+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:r15:[rbp-8] condition_value.1:[rbp-32] true_block.1:rbx:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $26.1:r14 
  .loc 3 856 5
  # call(convert_statement_96, self.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call convert_statement_96
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  .loc 3 857 9
  # $27.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $27.1:rbx 
  .loc 3 857 9
  # $28.1: @IR_Instruction = load_struct_member($27.1, last_instruction)
  mov r15, [rbx+40]
  # [discarded value]: $27.1
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $28.1:r15 
  .loc 3 857 9
  # $29.1: bool = call(is_exit_instruction_177, $28.1)
  mov rdi, r15
  call is_exit_instruction_177
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $29.1:rax 
  .loc 3 857 9
  # $30.1: bool = $29.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:rbx 
  # jump($30.1, .LABEL__convert_if_statement_101__7, .LABEL__convert_if_statement_101__8)
  test bl, bl
  mov [rbp-51], bl
  jz .LABEL__convert_if_statement_101__8
.LABEL__convert_if_statement_101__7:
  .loc 3 858 9
  # $31.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] $31.1:rbx 
  .loc 3 858 9
  # $32.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $31.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-48]
  call append_jump_169
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # jump(.LABEL__convert_if_statement_101__8)
.LABEL__convert_if_statement_101__8:
  .loc 3 860 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-48]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:rbx:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # return()
  jmp .LABEL__convert_if_statement_101__end
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] $30.1:[rbp-51] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $23.1:[rbp-50] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
.LABEL__convert_if_statement_101__4:
  .loc 3 853 9
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-24]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] $12.1:rbx 
  .loc 3 853 9
  # $13.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $12.1, condition_value.1, true_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  mov rdx, [rbp-40]
  mov rcx, [rbp-48]
  call append_jump_170
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # jump(.LABEL__convert_if_statement_101__3)
  jmp .LABEL__convert_if_statement_101__3
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] $11.1:[rbp-49] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] statement.1:[rbp-8] condition_value.1:[rbp-32] true_block.1:[rbp-40] end_block.1:[rbp-48] 
  # [discarded value]: end_block.1
  # [discarded value]: true_block.1
  # [discarded value]: condition_value.1
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_if_statement_101__end:
  mov rsp, rbp
  pop rbp
  ret

convert_if_statement_101__stack_frame_size: .word 64

  .loc 3 863 8
  .text
convert_loop_statement_102:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_loop_statement_102__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_loop_statement_102__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 864 22
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 864 22
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 864 22
  # loop_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:rax 
  .loc 3 865 21
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $4.1:r15 
  .loc 3 865 21
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:rax $5.1:r14 
  .loc 3 865 21
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax 
  .loc 3 866 5
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 866 5
  # $8.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $7.1, loop_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-32], rax
  call append_jump_169
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 867 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 868 46
  # $9.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov r15, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] loop_block.1:rbx:[rbp-24] end_block.1:[rbp-32] $9.1:r15 
  .loc 3 868 25
  # $10.1: @IR_Loop = new IR_Loop(parent = $9.1, end_block = end_block.1)
  mov [rbp-40], r15
  mov rdi, 16
  call malloc
  #     .parent = $9.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  #     .end_block = end_block.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] $10.1:rax 
  .loc 3 868 5
  # store_struct_member(self.1, current_loop, $10.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+40], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] 
  .loc 3 869 34
  # $11.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+24]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-8] loop_block.1:[rbp-24] end_block.1:r15:[rbp-32] $11.1:r14 
  .loc 3 869 5
  # call(convert_block_statement_98, self.1, $11.1)
  mov rdi, rbx
  mov rsi, r14
  call convert_block_statement_98
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] 
  .loc 3 870 5
  # $12.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] loop_block.1:[rbp-24] end_block.1:[rbp-32] $12.1:rbx 
  .loc 3 870 5
  # $13.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $12.1, loop_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_169
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: loop_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-32] 
  .loc 3 871 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 872 25
  # $14.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $14.1:rbx 
  .loc 3 872 25
  # $15.1: @IR_Loop = load_struct_member($14.1, parent)
  mov r15, [rbx]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-8] $15.1:r15 
  .loc 3 872 5
  # store_struct_member(self.1, current_loop, $15.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $15.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_loop_statement_102__end
  # [live values]: 
.LABEL__convert_loop_statement_102__end:
  mov rsp, rbp
  pop rbp
  ret

convert_loop_statement_102__stack_frame_size: .word 48

  .loc 3 875 8
  .text
convert_return_statement_103:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_return_statement_103__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_return_statement_103__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 876 9
  # $1.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 876 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__convert_return_statement_103__2, .LABEL__convert_return_statement_103__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__convert_return_statement_103__4
.LABEL__convert_return_statement_103__2:
  .loc 3 877 52
  # $6.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 3 877 80
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov r15, [rbp-17]
  mov r14, [r15+32]
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 3 877 80
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r13, [r14+16]
  # [discarded value]: $7.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $8.1:r13 
  .loc 3 877 80
  # $9.1: @IR_Type = load_struct_member($8.1, return_type)
  mov r14, [r13+40]
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] statement.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx $9.1:r14 
  .loc 3 877 28
  # return_value.1: @IR_Value = call(convert_expression_106, self.1, $6.1, $9.1)
  mov rdi, r15
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] return_value.1:rax 
  .loc 3 878 21
  # $11.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, return_value.1)
  mov rdi, rax
  call create_ir_return_instruction_217
  # [discarded value]: return_value.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $11.1:rax 
  .loc 3 878 65
  # $12.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $11.1:rax $12.1:r15 
  .loc 3 878 9
  # $13.1: @IR_Variable_Value = call(append_78, self.1, $11.1, $12.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_103__3)
.LABEL__convert_return_statement_103__3:
  .loc 3 882 26
  # $14.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $14.1:rbx 
  .loc 3 882 26
  # $15.1: @IR_Function = load_struct_member($14.1, function)
  mov r15, [rbx+16]
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $15.1:r15 
  .loc 3 882 26
  # $16.1: @IR_Block = call(create_block_173, $15.1)
  mov rdi, r15
  call create_block_173
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $16.1:rax 
  .loc 3 882 5
  # store_struct_member(self.1, current_block, $16.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $16.1
  # [live values]: self.1:rbx:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # return()
  jmp .LABEL__convert_return_statement_103__end
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__convert_return_statement_103__4:
  .loc 3 880 21
  # $3.1: @IR_Return_Instruction = call(create_ir_return_instruction_217, null)
  xor rdi, rdi
  call create_ir_return_instruction_217
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] $3.1:rax 
  .loc 3 880 57
  # $4.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] statement.1:rbx:[rbp-9] $2.1:[rbp-1] $3.1:rax $4.1:r15 
  .loc 3 880 9
  # $5.1: @IR_Variable_Value = call(append_78, self.1, $3.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__convert_return_statement_103__3)
  jmp .LABEL__convert_return_statement_103__3
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] statement.1:[rbp-9] 
  # [discarded value]: statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_return_statement_103__end:
  mov rsp, rbp
  pop rbp
  ret

convert_return_statement_103__stack_frame_size: .word 32

  .loc 3 885 8
  .text
convert_variable_statement_104:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_statement_104__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_statement_104__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # variable_statement.1: @AST_Variable_Statement = load_variable(variable_statement)
  # [live values]: self.1:rdi variable_statement.1:rsi 
  # is_global.1: bool = load_variable(is_global)
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx 
  .loc 3 886 25
  # $1.1: @Identifier_Token = load_struct_member(variable_statement.1, name)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx $1.1:rax 
  .loc 3 886 25
  # variable_name.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx 
  .loc 3 887 9
  # variable_type.1: @IR_Type = null
  xor rax, rax
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax 
  .loc 3 888 9
  # $3.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov r15, [rsi+32]
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax $3.1:r15 
  .loc 3 888 9
  # $4.1: bool = $3.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable_statement.1:rsi is_global.1:rdx variable_name.1:rbx variable_type.1:rax $4.1:r14 
  # jump($4.1, .LABEL__convert_variable_statement_104__2, .LABEL__convert_variable_statement_104__3)
  test r14b, r14b
  mov [rbp-8], rax
  mov [rbp-9], dl
  mov [rbp-17], rbx
  mov [rbp-25], rsi
  mov [rbp-33], rdi
  mov [rbp-34], r14b
  jz .LABEL__convert_variable_statement_104__3
.LABEL__convert_variable_statement_104__2:
  .loc 3 889 43
  # $5.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] $5.1:rbx 
  .loc 3 889 25
  # variable_type.2: @IR_Type = call(convert_type_82, self.1, $5.1)
  mov rdi, [rbp-33]
  mov rsi, rbx
  call convert_type_82
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:rax:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_104__3)
  mov [rbp-8], rax
.LABEL__convert_variable_statement_104__3:
  # variable_type.16: @IR_Type = phi(variable_type.1, variable_type.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] 
  .loc 3 891 9
  # variable_value.1: @IR_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax 
  .loc 3 892 9
  # $7.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax $7.1:r15 
  .loc 3 892 9
  # $8.1: bool = $7.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:rax $8.1:r14 
  # jump($8.1, .LABEL__convert_variable_statement_104__4, .LABEL__convert_variable_statement_104__5)
  test r14b, r14b
  mov [rbp-42], rax
  mov [rbp-43], r14b
  jz .LABEL__convert_variable_statement_104__5
.LABEL__convert_variable_statement_104__4:
  .loc 3 893 50
  # $9.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] $9.1:rbx 
  .loc 3 893 26
  # variable_value.2: @IR_Value = call(convert_expression_106, self.1, $9.1, variable_type.16)
  mov rdi, [rbp-33]
  mov rsi, rbx
  mov rdx, [rbp-8]
  call convert_expression_106
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:rax:[rbp-42] 
  # jump(.LABEL__convert_variable_statement_104__5)
  mov [rbp-42], rax
.LABEL__convert_variable_statement_104__5:
  # variable_value.14: @IR_Value = phi(variable_value.1, variable_value.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] 
  .loc 3 895 9
  # $11.1: bool = load_struct_member(variable_statement.1, is_external)
  mov rax, [rbp-25]
  mov bl, [rax+48]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $11.1:rbx 
  .loc 3 895 9
  # $12.1: bool = $11.1 == false
  cmp bl, 0
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:r15 
  # jump($12.1, .LABEL__convert_variable_statement_104__6, .LABEL__convert_variable_statement_104__7)
  test r15b, r15b
  mov [rbp-44], r15b
  jz .LABEL__convert_variable_statement_104__7
.LABEL__convert_variable_statement_104__6:
  .loc 3 896 13
  # $13.1: bool = variable_type.16 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__convert_variable_statement_104__8, .LABEL__convert_variable_statement_104__10)
  test al, al
  mov [rbp-45], al
  jz .LABEL__convert_variable_statement_104__10
.LABEL__convert_variable_statement_104__8:
  .loc 3 897 17
  # $21.1: bool = variable_value.14 != null
  cmp QWORD PTR [rbp-42], 0
  setne al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:rax 
  # jump($21.1, .LABEL__convert_variable_statement_104__15, .LABEL__convert_variable_statement_104__9)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_variable_statement_104__9
.LABEL__convert_variable_statement_104__15:
  .loc 3 898 43
  # $22.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $22.1:rbx 
  .loc 3 898 21
  # $23.1: bool = call(accepts_75, variable_type.16, $22.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call accepts_75
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $23.1:rax 
  .loc 3 898 21
  # $24.1: bool = $23.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:rbx 
  # jump($24.1, .LABEL__convert_variable_statement_104__17, .LABEL__convert_variable_statement_104__18)
  test bl, bl
  mov [rbp-47], bl
  jz .LABEL__convert_variable_statement_104__18
.LABEL__convert_variable_statement_104__17:
  .loc 3 899 27
  # $25.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $25.1:rbx 
  .loc 3 899 27
  # $26.1: @Source_Location = load_struct_member($25.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:r15 
  .loc 3 899 73
  # $27.1: @String = call(clone_391, "Cannot assign a '")
  lea rdi, .LABEL__string_217[rip] # "Cannot assign a '"
  mov [rbp-55], r15
  call clone_391
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax 
  .loc 3 899 107
  # $28.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rbx, [rbp-42]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rbx:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax $28.1:r15 
  .loc 3 899 107
  # $29.1: @String = load_struct_member($28.1, name)
  mov r14, [r15+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rbx:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $27.1:rax $29.1:r14 
  .loc 3 899 73
  # $30.1: @String = call(append_400, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $30.1:rax 
  .loc 3 899 73
  # $31.1: @String = call(append_400, $30.1, "' value to a '")
  mov rdi, rax
  lea rsi, .LABEL__string_218[rip] # "' value to a '"
  call append_400
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $31.1:rax 
  .loc 3 899 165
  # $32.1: @String = load_struct_member(variable_type.16, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:rbx:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $31.1:rax $32.1:r15 
  .loc 3 899 73
  # $33.1: @String = call(append_400, $31.1, $32.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $32.1
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $33.1:rax 
  .loc 3 899 73
  # $34.1: @String = call(append_400, $33.1, "' variable")
  mov rdi, rax
  lea rsi, .LABEL__string_219[rip] # "' variable"
  call append_400
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $26.1:[rbp-55] $34.1:rax 
  .loc 3 899 21
  # call(abort_360, $26.1, $34.1)
  mov rdi, [rbp-55]
  mov rsi, rax
  call abort_360
  # [discarded value]: $34.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] 
.LABEL__convert_variable_statement_104__18:
  .loc 3 901 38
  # $35.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $35.1:rbx 
  .loc 3 901 21
  # $36.1: bool = variable_type.16 == $35.1
  cmp QWORD PTR [rbp-8], rbx
  sete r15b
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:r15 
  # jump($36.1, .LABEL__convert_variable_statement_104__19, .LABEL__convert_variable_statement_104__9)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__convert_variable_statement_104__9
.LABEL__convert_variable_statement_104__19:
  .loc 3 902 34
  # $37.1: @AST_Type = load_struct_member(variable_statement.1, type)
  mov rax, [rbp-25]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $37.1:rbx 
  .loc 3 902 34
  # $38.1: @Source_Location = load_struct_member($37.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $38.1:r15 
  .loc 3 902 21
  # $39.1: @FILE = call(write_363, stderr, $38.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  call write_363
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $39.1:rax 
  .loc 3 902 21
  # $40.1: @FILE = call(write_383, $39.1, ": Redundant type declaration")
  mov rdi, rax
  lea rsi, .LABEL__string_220[rip] # ": Redundant type declaration"
  call write_383
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] $40.1:rax 
  .loc 3 902 21
  # $41.1: @FILE = call(end_line_386, $40.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $41.1
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # jump(.LABEL__convert_variable_statement_104__9)
.LABEL__convert_variable_statement_104__9:
  # variable_type.18: @IR_Type = phi(variable_type.5, variable_type.16)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $24.1:[rbp-47] $36.1:[rbp-48] 
  .loc 3 914 13
  # $42.1: bool = variable_value.14 == null
  cmp QWORD PTR [rbp-42], 0
  sete al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:rax $24.1:[rbp-47] $36.1:[rbp-48] 
  # jump($42.1, .LABEL__convert_variable_statement_104__21, .LABEL__convert_variable_statement_104__7)
  test al, al
  mov [rbp-49], al
  jz .LABEL__convert_variable_statement_104__7
.LABEL__convert_variable_statement_104__21:
  .loc 5 156 31
  # $43.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] $43.1:rax 
  .loc 5 157 19
  # $44.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-57], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] $43.1:[rbp-57] $44.1:rax 
  .loc 3 915 30
  # variable_value.11: @IR_Value = new IR_Undefined_Value(object_type = IR_Undefined_Value, type = variable_type.18, dump = anonymous_function_2_155.address, creator_instruction = null, user_instructions = $43.1, links = $44.1)
  mov [rbp-65], rax
  mov rdi, 48
  call malloc
  #     .object_type = IR_Undefined_Value
  mov rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  #     .type = variable_type.18
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $43.1
  mov r15, [rbp-57]
  mov QWORD PTR [rax+24], r15
  #     .links = $44.1
  mov r14, [rbp-65]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_2_155.address
  lea r13, anonymous_function_2_155[rip]
  mov [rax+40], r13
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:rbx:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:rax:[rbp-42] 
  # jump(.LABEL__convert_variable_statement_104__7)
  mov [rbp-42], rax
.LABEL__convert_variable_statement_104__7:
  # variable_value.17: @IR_Value = phi(variable_value.14, variable_value.11)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # variable_type.10: @IR_Type = phi(variable_type.18, variable_type.16)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  .loc 3 918 9
  # $47.1: bool = call(is_389, variable_type.10, IR_Any_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Any_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:rax $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # jump($47.1, .LABEL__convert_variable_statement_104__26, .LABEL__convert_variable_statement_104__25)
  test al, al
  mov [rbp-50], al
  jz .LABEL__convert_variable_statement_104__25
.LABEL__convert_variable_statement_104__26:
  .loc 3 918 9
  # $49.1: bool = phi($47.1, $47.2)
  mov al, [rbp-50]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:rax 
  # jump($49.1, .LABEL__convert_variable_statement_104__24, .LABEL__convert_variable_statement_104__23)
  test al, al
  mov [rbp-51], al
  jz .LABEL__convert_variable_statement_104__23
.LABEL__convert_variable_statement_104__24:
  .loc 3 918 9
  # $49.3: bool = phi($49.1, $49.2)
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # jump($49.3, .LABEL__convert_variable_statement_104__27, .LABEL__convert_variable_statement_104__28)
  mov al, [rbp-51]
  test al, al
  jz .LABEL__convert_variable_statement_104__28
.LABEL__convert_variable_statement_104__27:
  .loc 3 919 15
  # $51.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:rbx 
  .loc 3 919 44
  # $52.1: @String = call(clone_391, "Invalid variable type: ")
  lea rdi, .LABEL__string_221[rip] # "Invalid variable type: "
  mov [rbp-59], rbx
  call clone_391
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $52.1:rax 
  .loc 3 919 84
  # $53.1: @String = load_struct_member(variable_type.10, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:rbx:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $52.1:rax $53.1:r15 
  .loc 3 919 44
  # $54.1: @String = call(append_400, $52.1, $53.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $53.1
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $51.1:[rbp-59] $54.1:rax 
  .loc 3 919 9
  # call(abort_360, $51.1, $54.1)
  mov rdi, [rbp-59]
  mov rsi, rax
  call abort_360
  # [discarded value]: $54.1
  # [discarded value]: $51.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_104__28:
  # jump(is_global.1, .LABEL__convert_variable_statement_104__29, .LABEL__convert_variable_statement_104__31)
  mov al, [rbp-9]
  test al, al
  jz .LABEL__convert_variable_statement_104__31
.LABEL__convert_variable_statement_104__29:
  .loc 3 923 24
  # $63.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:rbx 
  .loc 3 927 27
  # $64.1: bool = load_struct_member(variable_statement.1, is_external)
  mov r15b, [rax+48]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:rbx $64.1:r15 
  .loc 5 467 20
  # $65.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-59], rbx
  mov [rbp-60], r15b
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $63.1:[rbp-59] $64.1:[rbp-60] $65.1:rax 
  .loc 3 922 24
  # variable.1: @IR_Global_Variable = new IR_Global_Variable(object_type = IR_Global_Variable, location = $63.1, name = variable_name.1, type = variable_type.10, value = variable_value.17, is_external = $64.1, values = $65.1)
  mov [rbp-68], rax
  mov rdi, 49
  call malloc
  #     .object_type = IR_Global_Variable
  mov rbx, IR_Global_Variable[rip]
  mov [rax], rbx
  #     .location = $63.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+8], rbx
  #     .name = variable_name.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  #     .type = variable_type.10
  mov r14, [rbp-8]
  mov QWORD PTR [rax+24], r14
  #     .values = $65.1
  mov r13, [rbp-68]
  mov QWORD PTR [rax+32], r13
  #     .value = variable_value.17
  mov r12, [rbp-42]
  mov QWORD PTR [rax+40], r12
  #     .is_external = $64.1
  mov r11b, [rbp-60]
  mov BYTE PTR [rax+48], r11b
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax 
  .loc 3 929 13
  # $67.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-33]
  mov r13, [rbx+32]
  # [live values]: self.1:rbx:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax $67.1:r13 
  .loc 3 929 13
  # $68.1: bool = $67.1 != null
  cmp r13, 0
  setne r11b
  # [discarded value]: $67.1
  # [live values]: self.1:rbx:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:r15:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:r12:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax $68.1:r11 
  # jump($68.1, .LABEL__convert_variable_statement_104__32, .LABEL__convert_variable_statement_104__33)
  test r11b, r11b
  mov [rbp-59], rax
  mov [rbp-60], r11b
  jz .LABEL__convert_variable_statement_104__33
.LABEL__convert_variable_statement_104__32:
  .loc 3 930 19
  # $69.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] $69.1:rbx 
  .loc 3 930 13
  # call(abort_360, $69.1, "Invalid state")
  mov rdi, rbx
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_360
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
.LABEL__convert_variable_statement_104__33:
  .loc 3 932 9
  # $70.1: @IR_Variable = call(add_variable_68, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-59]
  call add_variable_68
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # jump(.LABEL__convert_variable_statement_104__30)
.LABEL__convert_variable_statement_104__30:
  # return()
  jmp .LABEL__convert_variable_statement_104__end
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] $68.1:[rbp-60] 
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] 
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_104__31:
  .loc 3 934 51
  # $55.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $55.1:rbx 
  .loc 5 467 20
  # $56.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-59], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_name.1:[rbp-17] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $55.1:[rbp-59] $56.1:rax 
  .loc 3 934 24
  # variable.1: @IR_Variable = new IR_Variable(object_type = IR_Variable, location = $55.1, name = variable_name.1, type = variable_type.10, values = $56.1)
  mov [rbp-67], rax
  mov rdi, 40
  call malloc
  #     .object_type = IR_Variable
  mov rbx, IR_Variable[rip]
  mov [rax], rbx
  #     .location = $55.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax+8], rbx
  #     .name = variable_name.1
  mov r15, [rbp-17]
  mov QWORD PTR [rax+16], r15
  #     .type = variable_type.10
  mov r14, [rbp-8]
  mov QWORD PTR [rax+24], r14
  #     .values = $56.1
  mov r13, [rbp-67]
  mov QWORD PTR [rax+32], r13
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [discarded value]: variable_name.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:r14:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:rax 
  .loc 3 935 9
  # $58.1: @IR_Variable = call(add_variable_68, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov [rbp-59], rax
  call add_variable_68
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] variable.1:[rbp-59] 
  .loc 3 936 47
  # $59.1: @IR_Variable_Value = call(create_variable_value_71, self.1, variable.1)
  mov rdi, [rbp-33]
  mov rsi, [rbp-59]
  call create_variable_value_71
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $59.1:rax 
  .loc 3 936 21
  # $60.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $59.1, variable_value.17)
  mov rdi, rax
  mov rsi, [rbp-42]
  call create_ir_set_instruction_220
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $60.1:rax 
  .loc 3 936 102
  # $61.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rbx:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] $60.1:rax $61.1:r15 
  .loc 3 936 9
  # $62.1: @IR_Variable_Value = call(append_78, self.1, $60.1, $61.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $62.1
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # jump(.LABEL__convert_variable_statement_104__30)
  jmp .LABEL__convert_variable_statement_104__30
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.3:[rbp-51] $49.1:[rbp-51] 
  # [discarded value]: $49.3
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
.LABEL__convert_variable_statement_104__23:
  .loc 3 918 79
  # $49.2: bool = call(is_389, variable_type.10, IR_Undefined_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Undefined_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.2:rax:[rbp-51] $49.1:[rbp-51] 
  # jump(.LABEL__convert_variable_statement_104__24)
  mov [rbp-51], al
  jmp .LABEL__convert_variable_statement_104__24
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.2:[rbp-51] $49.1:[rbp-51] 
  # [discarded value]: $49.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $49.1:[rbp-51] 
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
.LABEL__convert_variable_statement_104__25:
  .loc 3 918 42
  # $47.2: bool = call(is_389, variable_type.10, IR_Nothing_Type)
  mov rdi, [rbp-8]
  mov rsi, IR_Nothing_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $47.2:rax:[rbp-50] 
  # jump(.LABEL__convert_variable_statement_104__26)
  mov [rbp-50], al
  jmp .LABEL__convert_variable_statement_104__26
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] $47.2:[rbp-50] 
  # [discarded value]: $47.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] variable_value.17:[rbp-42] variable_type.10:[rbp-8] $47.1:[rbp-50] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [discarded value]: $47.1
  # [discarded value]: variable_type.10
  # [discarded value]: variable_value.17
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] variable_value.11:[rbp-42] 
  # [discarded value]: variable_value.11
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $42.1:[rbp-49] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] variable_type.18:[rbp-8] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: variable_type.18
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] $36.1:[rbp-48] 
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] $24.1:[rbp-47] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $21.1:[rbp-46] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] 
.LABEL__convert_variable_statement_104__10:
  .loc 3 906 17
  # $14.1: bool = variable_value.14 == null
  cmp QWORD PTR [rbp-42], 0
  sete al
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:rax 
  # jump($14.1, .LABEL__convert_variable_statement_104__11, .LABEL__convert_variable_statement_104__12)
  test al, al
  mov [rbp-46], al
  jz .LABEL__convert_variable_statement_104__12
.LABEL__convert_variable_statement_104__11:
  .loc 3 907 23
  # $15.1: @Source_Location = load_struct_member(variable_statement.1, location)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $15.1:rbx 
  .loc 3 907 17
  # call(abort_360, $15.1, "Invalid state")
  mov rdi, rbx
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_360
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
.LABEL__convert_variable_statement_104__12:
  .loc 3 909 17
  # $16.1: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $16.1:rbx 
  .loc 3 909 17
  # $17.1: bool = call(is_389, $16.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:rax 
  # jump($17.1, .LABEL__convert_variable_statement_104__13, .LABEL__convert_variable_statement_104__14)
  test al, al
  mov [rbp-47], al
  jz .LABEL__convert_variable_statement_104__14
.LABEL__convert_variable_statement_104__13:
  .loc 3 910 23
  # $18.1: @AST_Expression = load_struct_member(variable_statement.1, value_expression)
  mov rax, [rbp-25]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] $18.1:rbx 
  .loc 3 910 23
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-33] variable_statement.1:rax:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] $19.1:r15 
  .loc 3 910 17
  # call(abort_360, $19.1, "Cannot infer type from null value")
  mov rdi, r15
  lea rsi, .LABEL__string_222[rip] # "Cannot infer type from null value"
  call abort_360
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] 
.LABEL__convert_variable_statement_104__14:
  .loc 3 912 29
  # variable_type.5: @IR_Type = load_struct_member(variable_value.14, type)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:rax:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] variable_type.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_variable_statement_104__9)
  mov [rbp-8], rbx
  jmp .LABEL__convert_variable_statement_104__9
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] variable_type.5:[rbp-8] 
  # [discarded value]: variable_type.5
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] $17.1:[rbp-47] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] $14.1:[rbp-46] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] $12.1:[rbp-44] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] variable_value.14:[rbp-42] 
  # [discarded value]: variable_value.14
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] variable_value.2:[rbp-42] 
  # [discarded value]: variable_value.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] $8.1:[rbp-43] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] variable_type.16:[rbp-8] variable_value.1:[rbp-42] 
  # [discarded value]: variable_value.1
  # [discarded value]: variable_type.16
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] 
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] variable_type.2:[rbp-8] 
  # [discarded value]: variable_type.2
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-33] variable_statement.1:[rbp-25] is_global.1:[rbp-9] variable_type.1:[rbp-8] 
  # [discarded value]: variable_type.1
  # [discarded value]: is_global.1
  # [discarded value]: variable_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_statement_104__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_statement_104__stack_frame_size: .word 80

  .loc 3 940 8
  .text
convert_while_statement_105:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_while_statement_105__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_while_statement_105__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # statement.1: @AST_While_Statement = load_variable(statement)
  # [live values]: self.1:rdi statement.1:rsi 
  .loc 3 941 27
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi statement.1:rsi $1.1:rax 
  .loc 3 941 27
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi statement.1:rsi $2.1:rbx 
  .loc 3 941 27
  # condition_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:rax 
  .loc 3 942 22
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $4.1:r15 
  .loc 3 942 22
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:rax $5.1:r14 
  .loc 3 942 22
  # loop_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax 
  .loc 3 943 21
  # $7.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $7.1:r15 
  .loc 3 943 21
  # $8.1: @IR_Function = load_struct_member($7.1, function)
  mov r14, [r15+16]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:rax $8.1:r14 
  .loc 3 943 21
  # end_block.1: @IR_Block = call(create_block_173, $8.1)
  mov rdi, r14
  mov [rbp-32], rax
  call create_block_173
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax 
  .loc 3 944 5
  # $10.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:rax $10.1:r15 
  .loc 3 944 5
  # $11.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $10.1, condition_block.1)
  mov rdi, r15
  mov rsi, [rbp-24]
  mov [rbp-40], rax
  call append_jump_169
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 945 5
  # store_struct_member(self.1, current_block, condition_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 946 51
  # $12.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov r15, [rbp-16]
  mov r14, [r15+24]
  # [live values]: self.1:rax:[rbp-8] statement.1:r15:[rbp-16] condition_block.1:rbx:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:r14 
  .loc 3 946 83
  # $13.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, rax
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-48], r14
  call get_named_type_66
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] $12.1:[rbp-48] $13.1:rax 
  .loc 3 946 27
  # condition_value.1: @IR_Value = call(convert_expression_106, self.1, $12.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax 
  .loc 3 947 5
  # $15.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] condition_value.1:rax $15.1:r15 
  .loc 3 947 5
  # $16.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $15.1, condition_value.1, loop_block.1, end_block.1)
  mov rdi, r15
  mov rsi, rax
  mov rdx, [rbp-32]
  mov rcx, [rbp-40]
  call append_jump_170
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] loop_block.1:[rbp-32] end_block.1:[rbp-40] 
  .loc 3 948 5
  # store_struct_member(self.1, current_block, loop_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: loop_block.1
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 949 46
  # $17.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:[rbp-40] $17.1:rbx 
  .loc 3 949 25
  # $18.1: @IR_Loop = new IR_Loop(parent = $17.1, end_block = end_block.1)
  mov [rbp-48], rbx
  mov rdi, 16
  call malloc
  #     .parent = $17.1
  mov rbx, [rbp-48]
  mov QWORD PTR [rax], rbx
  #     .end_block = end_block.1
  mov r15, [rbp-40]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] $18.1:rax 
  .loc 3 949 5
  # store_struct_member(self.1, current_loop, $18.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+40], rax
  # [discarded value]: $18.1
  # [live values]: self.1:rbx:[rbp-8] statement.1:[rbp-16] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] 
  .loc 3 950 34
  # $19.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rax, [rbp-16]
  mov r14, [rax+32]
  # [discarded value]: statement.1
  # [live values]: self.1:rbx:[rbp-8] condition_block.1:[rbp-24] end_block.1:r15:[rbp-40] $19.1:r14 
  .loc 3 950 5
  # call(convert_block_statement_98, self.1, $19.1)
  mov rdi, rbx
  mov rsi, r14
  call convert_block_statement_98
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] 
  .loc 3 951 5
  # $20.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] condition_block.1:[rbp-24] end_block.1:[rbp-40] $20.1:rbx 
  .loc 3 951 5
  # $21.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $20.1, condition_block.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call append_jump_169
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: condition_block.1
  # [live values]: self.1:[rbp-8] end_block.1:[rbp-40] 
  .loc 3 952 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] 
  .loc 3 953 25
  # $22.1: @IR_Loop = load_struct_member(self.1, current_loop)
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-8] $22.1:rbx 
  .loc 3 953 25
  # $23.1: @IR_Loop = load_struct_member($22.1, parent)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: self.1:rax:[rbp-8] $23.1:r15 
  .loc 3 953 5
  # store_struct_member(self.1, current_loop, $23.1)
  mov QWORD PTR [rax+40], r15
  # [discarded value]: $23.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__convert_while_statement_105__end
  # [live values]: 
.LABEL__convert_while_statement_105__end:
  mov rsp, rbp
  pop rbp
  ret

convert_while_statement_105__stack_frame_size: .word 48

  .loc 3 956 8
  .text
convert_expression_106:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_106__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_106__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 957 17
  # $1.1: func (expression: @AST_Expression, builder: @IR_Builder, expected_type: @IR_Type) -> @IR_Value = load_struct_member(expression.1, convert)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  .loc 3 957 17
  # value.1: @IR_Value = call($1.1, expression.1, self.1, expected_type.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call rax
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rax 
  .loc 3 958 9
  # $3.1: bool = expected_type.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne bl
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rax $3.1:rbx 
  .loc 3 958 9
  # $4.1: bool = $3.1
  mov [rbp-25], bl
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_expression_106__2, .LABEL__convert_expression_106__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_expression_106__3
.LABEL__convert_expression_106__2:
  .loc 3 958 56
  # $5.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rax:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 3 958 34
  # $6.1: bool = call(accepts_75, expected_type.1, $5.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call accepts_75
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  .loc 3 958 34
  # $7.1: bool = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $7.1:rbx 
  .loc 3 958 9
  # $4.2: bool = $7.1
  mov [rbp-34], bl
  # [discarded value]: $7.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:rbx:[rbp-33] 
  # jump(.LABEL__convert_expression_106__3)
  mov [rbp-33], bl
.LABEL__convert_expression_106__3:
  .loc 3 958 9
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # jump($4.3, .LABEL__convert_expression_106__4, .LABEL__convert_expression_106__5)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_expression_106__5
.LABEL__convert_expression_106__4:
  .loc 3 959 15
  # $8.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:rbx 
  .loc 3 959 36
  # $9.1: @String = call(clone_391, "Incompatible types: got ")
  lea rdi, .LABEL__string_223[rip] # "Incompatible types: got "
  mov [rbp-41], rbx
  call clone_391
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $9.1:rax 
  .loc 3 959 77
  # $10.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rbx:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $9.1:rax $10.1:r15 
  .loc 3 959 77
  # $11.1: @String = load_struct_member($10.1, name)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:rbx:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $9.1:rax $11.1:r14 
  .loc 3 959 36
  # $12.1: @String = call(append_400, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $12.1:rax 
  .loc 3 959 36
  # $13.1: @String = call(append_400, $12.1, " instead of ")
  mov rdi, rax
  lea rsi, .LABEL__string_224[rip] # " instead of "
  call append_400
  # [discarded value]: $12.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $13.1:rax 
  .loc 3 959 124
  # $14.1: @String = load_struct_member(expected_type.1, name)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: expression.1:[rbp-16] expected_type.1:rbx:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $13.1:rax $14.1:r15 
  .loc 3 959 36
  # $15.1: @String = call(append_400, $13.1, $14.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] $8.1:[rbp-41] $15.1:rax 
  .loc 3 959 9
  # call(abort_360, $8.1, $15.1)
  mov rdi, [rbp-41]
  mov rsi, rax
  call abort_360
  # [discarded value]: $15.1
  # [discarded value]: $8.1
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
.LABEL__convert_expression_106__5:
  .loc 3 961 5
  # return(value.1)
  mov rax, [rbp-32]
  jmp .LABEL__convert_expression_106__end
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] $4.3:[rbp-33] 
  # [discarded value]: $4.3
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] $4.2:[rbp-33] 
  # [discarded value]: $4.2
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: expression.1:[rbp-16] expected_type.1:[rbp-24] value.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [discarded value]: value.1
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_expression_106__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_106__stack_frame_size: .word 48

  .loc 3 964 8
  .text
convert_expression_address_107:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_expression_address_107__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_expression_address_107__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 965 9
  # $1.1: bool = call(is_389, expression.1, AST_Member_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__convert_expression_address_107__2, .LABEL__convert_expression_address_107__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_expression_address_107__3
.LABEL__convert_expression_address_107__2:
  .loc 3 966 62
  # $2.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 966 16
  # $3.1: @IR_Value = call(convert_member_access_expression_address_128, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_member_access_expression_address_128
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 966 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__convert_expression_address_107__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__convert_expression_address_107__3:
  .loc 3 968 9
  # $4.1: bool = call(is_389, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__convert_expression_address_107__5, .LABEL__convert_expression_address_107__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_expression_address_107__6
.LABEL__convert_expression_address_107__5:
  .loc 3 969 57
  # $5.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 969 16
  # $6.1: @IR_Value = call(convert_variable_expression_address_139, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call convert_variable_expression_address_139
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 969 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__convert_expression_address_107__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__convert_expression_address_107__6:
  .loc 3 971 11
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx 
  .loc 3 971 32
  # $8.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rbx $8.1:r15 
  .loc 3 971 5
  # call(abort_145, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_expression_address_107__end:
  mov rsp, rbp
  pop rbp
  ret

convert_expression_address_107__stack_frame_size: .word 32

  .loc 3 974 8
  .text
convert_add_expression_108:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_add_expression_108__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_add_expression_108__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 975 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 975 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 976 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 976 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 976 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_add_expression_108__2, .LABEL__convert_add_expression_108__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_add_expression_108__3
.LABEL__convert_add_expression_108__2:
  .loc 3 977 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 977 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 977 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_add_expression_108__3:
  .loc 3 979 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 979 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 979 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 980 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_add_expression_108__4, .LABEL__convert_add_expression_108__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_add_expression_108__5
.LABEL__convert_add_expression_108__4:
  .loc 3 980 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_add_expression_108__5)
  mov [rbp-34], al
.LABEL__convert_add_expression_108__5:
  .loc 3 980 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_add_expression_108__6, .LABEL__convert_add_expression_108__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_add_expression_108__7
.LABEL__convert_add_expression_108__6:
  .loc 3 981 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 981 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_add_expression_108__7:
  .loc 3 983 85
  # $15.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rbx 
  .loc 3 983 62
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 983 24
  # $18.1: @IR_Add_Instruction = new IR_Add_Instruction(object_type = IR_Add_Instruction, result_value = $16.1, dump = anonymous_function_25_234.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Add_Instruction
  mov rbx, IR_Add_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_25_234.address
  lea r14, anonymous_function_25_234[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 983 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 983 134
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 983 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 983 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_add_expression_108__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_add_expression_108__end:
  mov rsp, rbp
  pop rbp
  ret

convert_add_expression_108__stack_frame_size: .word 64

  .loc 3 986 8
  .text
convert_array_access_expression_109:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_array_access_expression_109__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_array_access_expression_109__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # array_access_expression.1: @AST_Array_Access_Expression = load_variable(array_access_expression)
  # [live values]: self.1:rdi array_access_expression.1:rsi 
  .loc 3 987 47
  # $1.1: @AST_Expression = load_struct_member(array_access_expression.1, index_expression)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi array_access_expression.1:rsi $1.1:rax 
  .loc 3 987 89
  # $2.1: @IR_Type = call(get_named_type_66, self.1, "isize")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_184[rip] # "isize"
  mov [rbp-16], rax
  mov [rbp-24], rdi
  call get_named_type_66
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 3 987 23
  # index_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, $2.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-16]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:rax 
  .loc 3 988 48
  # $4.1: @AST_Expression = load_struct_member(array_access_expression.1, array_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:rax $4.1:r15 
  .loc 3 988 24
  # object_value.1: @IR_Value = call(convert_expression_106, self.1, $4.1, null)
  mov rdi, [rbp-24]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-32], rax
  call convert_expression_106
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax 
  .loc 3 989 29
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:rax object_value_type.1:rbx 
  .loc 3 990 10
  # $7.1: bool = call(is_389, object_value_type.1, IR_Unchecked_Array_Type)
  mov rdi, rbx
  mov rsi, IR_Unchecked_Array_Type[rip]
  mov [rbp-40], rax
  mov [rbp-48], rbx
  call is_389
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:rax 
  # jump($7.1, .LABEL__convert_array_access_expression_109__2, .LABEL__convert_array_access_expression_109__3)
  test al, al
  mov [rbp-49], al
  jz .LABEL__convert_array_access_expression_109__3
.LABEL__convert_array_access_expression_109__2:
  .loc 3 991 33
  # object_value_type.1: @IR_Unchecked_Array_Type = object_value_type.1
  mov rax, [rbp-48]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] object_value_type.1:rax 
  .loc 3 992 89
  # $9.1: @IR_Type = load_struct_member(object_value_type.1, item_type)
  mov rbx, [rax+16]
  # [discarded value]: object_value_type.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $9.1:rbx 
  .loc 3 992 66
  # $10.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $9.1)
  mov rdi, [rbp-24]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $10.1:rax 
  .loc 3 992 28
  # $11.1: @IR_Load_Array_Item_Instruction = call(create_ir_load_array_item_instruction_202, $10.1, object_value.1, index_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov rdx, [rbp-32]
  call create_ir_load_array_item_instruction_202
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $11.1:rax 
  .loc 3 992 147
  # $12.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rbx:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $11.1:rax $12.1:r15 
  .loc 3 992 16
  # $13.1: @IR_Variable_Value = call(append_78, self.1, $11.1, $12.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $13.1:rax 
  .loc 3 992 9
  # return($13.1)
  mov [rbp-57], rax
  jmp .LABEL__convert_array_access_expression_109__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] 
.LABEL__convert_array_access_expression_109__3:
  .loc 3 994 11
  # $14.1: @Source_Location = load_struct_member(array_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:rax:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $14.1:rbx 
  .loc 3 994 45
  # $15.1: @String = call(clone_391, "Got ")
  lea rdi, .LABEL__string_227[rip] # "Got "
  mov [rbp-57], rbx
  call clone_391
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $14.1:[rbp-57] $15.1:rax 
  .loc 3 994 66
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-48]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:rbx:[rbp-48] $7.1:[rbp-49] $14.1:[rbp-57] $15.1:rax $16.1:r15 
  .loc 3 994 45
  # $17.1: @String = call(append_400, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $14.1:[rbp-57] $17.1:rax 
  .loc 3 994 45
  # $18.1: @String = call(append_400, $17.1, " value instead of an array")
  mov rdi, rax
  lea rsi, .LABEL__string_228[rip] # " value instead of an array"
  call append_400
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] $14.1:[rbp-57] $18.1:rax 
  .loc 3 994 5
  # call(abort_360, $14.1, $18.1)
  mov rdi, [rbp-57]
  mov rsi, rax
  call abort_360
  # [discarded value]: $18.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] $7.1:[rbp-49] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] array_access_expression.1:[rbp-8] index_value.1:[rbp-32] object_value.1:[rbp-40] object_value_type.1:[rbp-48] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: index_value.1
  # [discarded value]: array_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_array_access_expression_109__end:
  mov rsp, rbp
  pop rbp
  ret

convert_array_access_expression_109__stack_frame_size: .word 64

  .loc 3 997 8
  .text
convert_call_expression_110:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_expression_110__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_expression_110__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  .loc 3 998 9
  # $1.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi call_expression.1:rsi $1.1:rax 
  .loc 3 998 9
  # $2.1: bool = call(is_389, $1.1, AST_Atomic_Expression)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Atomic_Expression[rip]
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__convert_call_expression_110__2, .LABEL__convert_call_expression_110__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__convert_call_expression_110__3
.LABEL__convert_call_expression_110__2:
  .loc 3 999 52
  # $3.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $3.1:rbx 
  .loc 3 999 28
  # callee_value.1: @IR_Value = call(convert_expression_106, self.1, $3.1, null)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  call convert_expression_106
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax 
  .loc 3 1000 13
  # $5.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rax $5.1:rbx 
  .loc 3 1000 13
  # $6.1: bool = call(is_389, $5.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  mov [rbp-25], rax
  call is_389
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $6.1:rax 
  .loc 3 1000 13
  # $7.1: bool = $6.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:rbx 
  # jump($7.1, .LABEL__convert_call_expression_110__4, .LABEL__convert_call_expression_110__5)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__convert_call_expression_110__5
.LABEL__convert_call_expression_110__4:
  .loc 3 1001 19
  # $8.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:rbx 
  .loc 3 1001 45
  # $9.1: @String = call(clone_391, "Values of type ")
  lea rdi, .LABEL__string_229[rip] # "Values of type "
  mov [rbp-34], rbx
  call clone_391
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax 
  .loc 3 1001 77
  # $10.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $10.1:r15 
  .loc 3 1001 77
  # $11.1: @String = load_struct_member($10.1, name)
  mov r14, [r15+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:rbx:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $9.1:rax $11.1:r14 
  .loc 3 1001 45
  # $12.1: @String = call(append_400, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $11.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $12.1:rax 
  .loc 3 1001 45
  # $13.1: @String = call(append_400, $12.1, " are not callable")
  mov rdi, rax
  lea rsi, .LABEL__string_230[rip] # " are not callable"
  call append_400
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $8.1:[rbp-34] $13.1:rax 
  .loc 3 1001 13
  # call(abort_360, $8.1, $13.1)
  mov rdi, [rbp-34]
  mov rsi, rax
  call abort_360
  # [discarded value]: $13.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
.LABEL__convert_call_expression_110__5:
  .loc 3 1003 16
  # $14.1: @IR_Value = call(convert_dynamic_call_expression_112, self.1, call_expression.1, callee_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-25]
  xor rcx, rcx
  call convert_dynamic_call_expression_112
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] $14.1:rax 
  .loc 3 1003 9
  # return($14.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_call_expression_110__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] $7.1:[rbp-26] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] callee_value.1:[rbp-25] 
  # [discarded value]: callee_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__convert_call_expression_110__3:
  .loc 3 1005 9
  # $15.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $15.1:rbx 
  .loc 3 1005 9
  # $16.1: bool = call(is_389, $15.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__convert_call_expression_110__7, .LABEL__convert_call_expression_110__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__convert_call_expression_110__8
.LABEL__convert_call_expression_110__7:
  .loc 3 1006 33
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx 
  .loc 3 1007 52
  # $19.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rbx $19.1:r15 
  .loc 3 1007 28
  # callee_value.1: @IR_Value = call(convert_expression_106, self.1, $19.1, null)
  mov rdi, [rbp-8]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-26], rbx
  call convert_expression_106
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax 
  .loc 3 1008 33
  # callee_value_type.1: @IR_Type = load_struct_member(callee_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:rax callee_value_type.1:rbx 
  .loc 3 1009 13
  # $22.1: bool = call(is_389, callee_value_type.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-34], rax
  mov [rbp-42], rbx
  call is_389
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:rax 
  # jump($22.1, .LABEL__convert_call_expression_110__9, .LABEL__convert_call_expression_110__10)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_call_expression_110__10
.LABEL__convert_call_expression_110__9:
  .loc 3 1010 37
  # callee_value_type.1: @IR_Pointer_Type = callee_value_type.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax 
  .loc 3 1011 17
  # $24.1: @IR_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax $24.1:rbx 
  .loc 3 1011 17
  # $25.1: bool = call(is_389, $24.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-51], rax
  call is_389
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:rax 
  # jump($25.1, .LABEL__convert_call_expression_110__11, .LABEL__convert_call_expression_110__10)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_call_expression_110__10
.LABEL__convert_call_expression_110__11:
  .loc 3 1012 43
  # $27.1: @IR_Struct_Type = load_struct_member(callee_value_type.1, pointed_type)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx 
  .loc 3 1012 104
  # $28.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov r15, [rbp-26]
  mov r14, [r15+32]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $28.1:r14 
  .loc 3 1012 104
  # $29.1: @String = load_struct_member($28.1, lexeme)
  mov r13, [r14+8]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:r15:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:rax:[rbp-51] $25.1:[rbp-52] $27.1:rbx $29.1:r13 
  .loc 3 1012 42
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r13
  call get_member_150
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax 
  .loc 3 1013 21
  # $31.1: bool = struct_type_member.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax $31.1:rbx 
  .loc 3 1013 21
  # $32.1: bool = $31.1
  mov [rbp-53], bl
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax $32.1:rbx 
  # jump($32.1, .LABEL__convert_call_expression_110__13, .LABEL__convert_call_expression_110__14)
  test bl, bl
  mov [rbp-60], rax
  mov [rbp-61], bl
  jz .LABEL__convert_call_expression_110__14
.LABEL__convert_call_expression_110__13:
  .loc 3 1013 51
  # $33.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $33.1:rbx 
  .loc 3 1013 51
  # $32.2: bool = call(is_389, $33.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:rax:[rbp-61] 
  # jump(.LABEL__convert_call_expression_110__14)
  mov [rbp-61], al
.LABEL__convert_call_expression_110__14:
  .loc 3 1013 21
  # $32.3: bool = phi($32.1, $32.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # jump($32.3, .LABEL__convert_call_expression_110__15, .LABEL__convert_call_expression_110__10)
  mov al, [rbp-61]
  test al, al
  jz .LABEL__convert_call_expression_110__10
.LABEL__convert_call_expression_110__15:
  .loc 3 1014 123
  # $35.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-60]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:rax:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $35.1:rbx 
  .loc 3 1014 100
  # $36.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $36.1:rax 
  .loc 3 1014 59
  # $37.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $36.1, callee_value.1, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-34]
  mov rdx, [rbp-60]
  mov cl, 0
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax 
  .loc 3 1014 191
  # $38.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rbx:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $37.1:rax $38.1:r15 
  .loc 3 1014 47
  # call_function_value.1: @IR_Variable_Value = call(append_78, self.1, $37.1, $38.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] call_function_value.1:rax 
  .loc 3 1015 28
  # $40.1: @IR_Value = call(convert_dynamic_call_expression_112, self.1, call_expression.1, call_function_value.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  mov rcx, [rbp-34]
  call convert_dynamic_call_expression_112
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] $40.1:rax 
  .loc 3 1015 21
  # return($40.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_110__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
.LABEL__convert_call_expression_110__10:
  .loc 3 1019 69
  # $41.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-26]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:rax:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $41.1:rbx struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 1019 16
  # $42.1: @IR_Value = call(convert_direct_call_expression_111, self.1, call_expression.1, $41.1, callee_value.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  mov rcx, [rbp-34]
  call convert_direct_call_expression_111
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] $42.1:rax struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  .loc 3 1019 9
  # return($42.1)
  mov [rbp-69], rax
  jmp .LABEL__convert_call_expression_110__end
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] $32.3:[rbp-61] 
  # [discarded value]: $32.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] $32.2:[rbp-61] 
  # [discarded value]: $32.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] struct_type_member.1:[rbp-60] $32.1:[rbp-61] 
  # [discarded value]: $32.1
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] $25.1:[rbp-52] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] callee_value_type.1:[rbp-51] 
  # [discarded value]: callee_value_type.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] $22.1:[rbp-43] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] callee_expression.1:[rbp-26] callee_value.1:[rbp-34] callee_value_type.1:[rbp-42] 
  # [discarded value]: callee_value_type.1
  # [discarded value]: callee_value.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__convert_call_expression_110__8:
  .loc 3 1021 9
  # $43.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $43.1:rbx 
  .loc 3 1021 9
  # $44.1: bool = call(is_389, $43.1, AST_Variable_Expression)
  mov rdi, rbx
  mov rsi, AST_Variable_Expression[rip]
  call is_389
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:rax 
  # jump($44.1, .LABEL__convert_call_expression_110__19, .LABEL__convert_call_expression_110__20)
  test al, al
  mov [rbp-19], al
  jz .LABEL__convert_call_expression_110__20
.LABEL__convert_call_expression_110__19:
  .loc 3 1022 33
  # callee_expression.1: @AST_Variable_Expression = load_struct_member(call_expression.1, callee_expression)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx 
  .loc 3 1023 42
  # $47.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $47.1:r15 
  .loc 3 1023 42
  # $48.1: @String = load_struct_member($47.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rbx $48.1:r14 
  .loc 3 1023 24
  # variable.1: @IR_Variable = call(get_variable_69, self.1, $48.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-27], rbx
  call get_variable_69
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax 
  .loc 3 1024 13
  # $50.1: bool = variable.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax $50.1:rbx 
  .loc 3 1024 13
  # $51.1: bool = $50.1
  mov [rbp-28], bl
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax $51.1:rbx 
  # jump($51.1, .LABEL__convert_call_expression_110__21, .LABEL__convert_call_expression_110__22)
  test bl, bl
  mov [rbp-35], rax
  mov [rbp-36], bl
  jz .LABEL__convert_call_expression_110__22
.LABEL__convert_call_expression_110__21:
  .loc 3 1024 33
  # $52.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-35]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:rax:[rbp-35] $51.1:[rbp-36] $52.1:rbx 
  .loc 3 1024 33
  # $51.2: bool = call(is_389, $52.1, IR_Function_Type)
  mov rdi, rbx
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:rax:[rbp-36] 
  # jump(.LABEL__convert_call_expression_110__22)
  mov [rbp-36], al
.LABEL__convert_call_expression_110__22:
  .loc 3 1024 13
  # $51.3: bool = phi($51.1, $51.2)
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # jump($51.3, .LABEL__convert_call_expression_110__23, .LABEL__convert_call_expression_110__24)
  mov al, [rbp-36]
  test al, al
  jz .LABEL__convert_call_expression_110__24
.LABEL__convert_call_expression_110__23:
  .loc 3 1025 39
  # call_function_value.1: @IR_Value = call(convert_expression_106, self.1, callee_expression.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-27]
  xor rdx, rdx
  call convert_expression_106
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] call_function_value.1:rax 
  .loc 3 1026 20
  # $55.1: @IR_Value = call(convert_dynamic_call_expression_112, self.1, call_expression.1, call_function_value.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rax
  xor rcx, rcx
  call convert_dynamic_call_expression_112
  # [discarded value]: call_function_value.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $55.1:rax 
  .loc 3 1026 13
  # return($55.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_110__end
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
.LABEL__convert_call_expression_110__24:
  .loc 3 1028 69
  # $56.1: @Identifier_Token = load_struct_member(callee_expression.1, name)
  mov rax, [rbp-27]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:rax:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $56.1:rbx 
  .loc 3 1028 16
  # $57.1: @IR_Value = call(convert_direct_call_expression_111, self.1, call_expression.1, $56.1, null)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, rbx
  xor rcx, rcx
  call convert_direct_call_expression_111
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] $57.1:rax 
  .loc 3 1028 9
  # return($57.1)
  mov [rbp-44], rax
  jmp .LABEL__convert_call_expression_110__end
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] $51.3:[rbp-36] 
  # [discarded value]: $51.3
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] $51.2:[rbp-36] 
  # [discarded value]: $51.2
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] callee_expression.1:[rbp-27] variable.1:[rbp-35] $51.1:[rbp-36] 
  # [discarded value]: $51.1
  # [discarded value]: variable.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
.LABEL__convert_call_expression_110__20:
  .loc 3 1030 11
  # $58.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx 
  .loc 3 1030 37
  # $59.1: @AST_Expression = load_struct_member(call_expression.1, callee_expression)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $59.1:r15 
  .loc 3 1030 37
  # $60.1: @Object_Type = load_struct_member($59.1, object_type)
  mov r14, [r15]
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-8] call_expression.1:rax:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] $58.1:rbx $60.1:r14 
  .loc 3 1030 5
  # call(abort_145, $58.1, $60.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] $44.1:[rbp-19] 
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] call_expression.1:[rbp-16] 
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_expression_110__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_expression_110__stack_frame_size: .word 80

  .loc 3 1033 8
  .text
convert_direct_call_expression_111:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_direct_call_expression_111__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_direct_call_expression_111__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # callee_name.1: @Identifier_Token = load_variable(callee_name)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx 
  .loc 3 1034 36
  # $1.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rax, [rdx+8]
  # [live values]: self.1:rdi call_expression.1:rsi callee_name.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 1034 16
  # type.1: @IR_Type = call(get_named_type_66, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call get_named_type_66
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax 
  .loc 3 1035 9
  # $3.1: bool = type.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax $3.1:rbx 
  .loc 3 1035 9
  # $4.1: bool = $3.1
  mov [rbp-33], bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_direct_call_expression_111__2, .LABEL__convert_direct_call_expression_111__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_direct_call_expression_111__3
.LABEL__convert_direct_call_expression_111__2:
  .loc 3 1035 25
  # $4.2: bool = call(is_389, type.1, IR_Struct_Type)
  mov rdi, [rbp-40]
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:rax:[rbp-41] 
  # jump(.LABEL__convert_direct_call_expression_111__3)
  mov [rbp-41], al
.LABEL__convert_direct_call_expression_111__3:
  .loc 3 1035 9
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # jump($4.3, .LABEL__convert_direct_call_expression_111__4, .LABEL__convert_direct_call_expression_111__5)
  mov al, [rbp-41]
  test al, al
  jz .LABEL__convert_direct_call_expression_111__5
.LABEL__convert_direct_call_expression_111__4:
  .loc 3 1036 13
  # $6.1: bool = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:rax 
  # jump($6.1, .LABEL__convert_direct_call_expression_111__6, .LABEL__convert_direct_call_expression_111__7)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_direct_call_expression_111__7
.LABEL__convert_direct_call_expression_111__6:
  .loc 3 1037 19
  # $7.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $7.1:rbx 
  .loc 3 1037 13
  # call(abort_360, $7.1, "Invalid type literal syntax")
  mov rdi, rbx
  lea rsi, .LABEL__string_231[rip] # "Invalid type literal syntax"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
.LABEL__convert_direct_call_expression_111__7:
  .loc 3 1039 72
  # $8.1: @IR_Struct_Type = type.1
  mov rax, [rbp-40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $8.1:rax 
  .loc 3 1039 16
  # $9.1: @IR_Struct_Literal_Value = call(convert_struct_literal_expression_133, self.1, call_expression.1, $8.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-8]
  mov rdx, rax
  call convert_struct_literal_expression_133
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] $9.1:rax 
  .loc 3 1039 9
  # return($9.1)
  mov [rbp-50], rax
  jmp .LABEL__convert_direct_call_expression_111__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $6.1:[rbp-42] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
.LABEL__convert_direct_call_expression_111__5:
  .loc 3 1042 54
  # $10.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] $10.1:rbx 
  .loc 3 1042 26
  # call_arguments.1: @List = call(convert_call_arguments_114, self.1, $10.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call convert_call_arguments_114
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax 
  .loc 3 1043 9
  # $12.1: bool = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_direct_call_expression_111__9, .LABEL__convert_direct_call_expression_111__10)
  test bl, bl
  mov [rbp-49], rax
  mov [rbp-50], bl
  jz .LABEL__convert_direct_call_expression_111__10
.LABEL__convert_direct_call_expression_111__9:
  .loc 3 1044 32
  # $13.1: @IR_Call_Argument = new IR_Call_Argument(value = first_argument.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = first_argument.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:rbx:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] $13.1:rax 
  .loc 3 1044 9
  # call(prepend_365, call_arguments.1, $13.1)
  mov rdi, [rbp-49]
  mov rsi, rax
  call prepend_365
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # jump(.LABEL__convert_direct_call_expression_111__10)
.LABEL__convert_direct_call_expression_111__10:
  .loc 3 1047 9
  # call_function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax 
  .loc 3 1048 32
  # $14.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rbp-32]
  mov r15, [rbx+24]
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax $14.1:r15 
  .loc 3 1048 32
  # named_functions_item.1: @List_Item = load_struct_member($14.1, first_item)
  mov r14, [r15]
  # [discarded value]: $14.1
  # [live values]: self.1:rbx:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:rax named_functions_item.1:r14 
  # jump(.LABEL__convert_direct_call_expression_111__11)
  mov [rbp-58], rax
  mov [rbp-66], r14
.LABEL__convert_direct_call_expression_111__11:
  # call_function.8: @IR_Function = phi(call_function.1, call_function.9)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] 
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  .loc 3 1049 12
  # $16.1: bool = named_functions_item.2 != null
  cmp QWORD PTR [rbp-66], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:rax 
  # jump($16.1, .LABEL__convert_direct_call_expression_111__12, .LABEL__convert_direct_call_expression_111__13)
  test al, al
  mov [rbp-67], al
  jz .LABEL__convert_direct_call_expression_111__13
.LABEL__convert_direct_call_expression_111__12:
  .loc 3 1050 30
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-66]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx 
  .loc 3 1051 13
  # $19.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 
  .loc 3 1051 40
  # $20.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:rax:[rbp-66] $16.1:[rbp-67] named_function.1:rbx $19.1:r15 $20.1:r13 
  .loc 3 1051 13
  # $21.1: bool = call(equals_392, $19.1, $20.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-75], rbx
  call equals_392
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:rax 
  # jump($21.1, .LABEL__convert_direct_call_expression_111__14, .LABEL__convert_direct_call_expression_111__15)
  test al, al
  mov [rbp-76], al
  jz .LABEL__convert_direct_call_expression_111__15
.LABEL__convert_direct_call_expression_111__14:
  .loc 3 1052 17
  # $22.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rax, [rbp-75]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:rax:[rbp-75] $21.1:[rbp-76] $22.1:rbx 
  .loc 3 1052 17
  # $23.1: bool = call(accepts_113, $22.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-49]
  call accepts_113
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:rax 
  # jump($23.1, .LABEL__convert_direct_call_expression_111__16, .LABEL__convert_direct_call_expression_111__15)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_111__15
.LABEL__convert_direct_call_expression_111__16:
  .loc 3 1053 21
  # $24.1: bool = call_function.8 != null
  cmp QWORD PTR [rbp-58], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:rax 
  # jump($24.1, .LABEL__convert_direct_call_expression_111__18, .LABEL__convert_direct_call_expression_111__19)
  test al, al
  mov [rbp-78], al
  jz .LABEL__convert_direct_call_expression_111__19
.LABEL__convert_direct_call_expression_111__18:
  .loc 3 1054 27
  # $25.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] $25.1:rbx 
  .loc 3 1054 21
  # call(abort_360, $25.1, "Found at least two matching functions")
  mov rdi, rbx
  lea rsi, .LABEL__string_232[rip] # "Found at least two matching functions"
  call abort_360
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
.LABEL__convert_direct_call_expression_111__19:
  .loc 3 1056 17
  # call_function.3: @IR_Function = named_function.1
  mov rax, [rbp-75]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:rax:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_111__15)
  mov [rbp-58], rax
.LABEL__convert_direct_call_expression_111__15:
  # call_function.9: @IR_Function = phi(call_function.8, call_function.3)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] $24.1:[rbp-78] call_function.3:[rbp-58] 
  .loc 3 1059 32
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-66]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:rbx:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # jump(.LABEL__convert_direct_call_expression_111__11)
  mov [rbp-66], rbx
  jmp .LABEL__convert_direct_call_expression_111__11
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] call_function.9:[rbp-58] named_functions_item.5:[rbp-66] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: named_functions_item.5
  # [discarded value]: call_function.9
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] call_function.3:[rbp-58] 
  # [discarded value]: call_function.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] $24.1:[rbp-78] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] $23.1:[rbp-77] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] $21.1:[rbp-76] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] named_function.1:[rbp-75] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
.LABEL__convert_direct_call_expression_111__13:
  .loc 3 1061 9
  # $27.1: bool = call_function.8 == null
  cmp QWORD PTR [rbp-58], 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:rax 
  # jump($27.1, .LABEL__convert_direct_call_expression_111__20, .LABEL__convert_direct_call_expression_111__21)
  test al, al
  mov [rbp-68], al
  jz .LABEL__convert_direct_call_expression_111__21
.LABEL__convert_direct_call_expression_111__20:
  .loc 3 1062 36
  # $28.1: @List = load_struct_member(self.1, named_functions)
  mov rax, [rbp-32]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] $28.1:rbx 
  .loc 3 1062 36
  # named_functions_item.1: @List_Item = load_struct_member($28.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $28.1
  # [live values]: self.1:rax:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:r15 
  # jump(.LABEL__convert_direct_call_expression_111__22)
  mov [rbp-76], r15
.LABEL__convert_direct_call_expression_111__22:
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  .loc 3 1063 16
  # $30.1: bool = named_functions_item.2 != null
  cmp QWORD PTR [rbp-76], 0
  setne al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:rax 
  # jump($30.1, .LABEL__convert_direct_call_expression_111__23, .LABEL__convert_direct_call_expression_111__24)
  test al, al
  mov [rbp-77], al
  jz .LABEL__convert_direct_call_expression_111__24
.LABEL__convert_direct_call_expression_111__23:
  .loc 3 1064 34
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-76]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx 
  .loc 3 1065 17
  # $33.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 
  .loc 3 1065 44
  # $34.1: @String = load_struct_member(callee_name.1, lexeme)
  mov r14, [rbp-24]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:r14:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:rax:[rbp-76] $30.1:[rbp-77] named_function.1:rbx $33.1:r15 $34.1:r13 
  .loc 3 1065 17
  # $35.1: bool = call(equals_392, $33.1, $34.1)
  mov rdi, r15
  mov rsi, r13
  mov [rbp-85], rbx
  call equals_392
  # [discarded value]: $34.1
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:rax 
  # jump($35.1, .LABEL__convert_direct_call_expression_111__25, .LABEL__convert_direct_call_expression_111__26)
  test al, al
  mov [rbp-86], al
  jz .LABEL__convert_direct_call_expression_111__26
.LABEL__convert_direct_call_expression_111__25:
  .loc 3 1066 17
  # $36.1: @FILE = call(end_line_386, stderr)
  mov rdi, stderr[rip]
  call end_line_386
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $36.1:rax 
  .loc 3 1066 41
  # $37.1: @Source_Location = load_struct_member(named_function.1, location)
  mov rbx, [rbp-85]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $36.1:rax $37.1:r15 
  .loc 3 1066 17
  # $38.1: @FILE = call(write_363, $36.1, $37.1)
  mov rdi, rax
  mov rsi, r15
  call write_363
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $38.1:rax 
  .loc 3 1066 17
  # $39.1: @FILE = call(write_383, $38.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $39.1:rax 
  .loc 3 1066 84
  # $40.1: @String = load_struct_member(named_function.1, name)
  mov rbx, [rbp-85]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $39.1:rax $40.1:r15 
  .loc 3 1066 17
  # $41.1: @FILE = call(write_383, $39.1, $40.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $40.1
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $41.1:rax 
  .loc 3 1066 17
  # $42.1: @FILE = call(write_383, $41.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_92[rip] # " = "
  call write_383
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $42.1:rax 
  .loc 3 1066 124
  # $43.1: @IR_Function_Type = load_struct_member(named_function.1, type)
  mov rbx, [rbp-85]
  mov r15, [rbx+48]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $43.1:r15 
  .loc 3 1066 124
  # $44.1: @String = load_struct_member($43.1, name)
  mov r14, [r15+8]
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:rbx:[rbp-85] $35.1:[rbp-86] $42.1:rax $44.1:r14 
  .loc 3 1066 17
  # $45.1: @FILE = call(write_383, $42.1, $44.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $44.1
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] $45.1:rax 
  .loc 3 1066 17
  # $46.1: @FILE = call(end_line_386, $45.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # jump(.LABEL__convert_direct_call_expression_111__26)
.LABEL__convert_direct_call_expression_111__26:
  .loc 3 1068 36
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-76]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:rbx:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_111__22)
  mov [rbp-76], rbx
  jmp .LABEL__convert_direct_call_expression_111__22
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] named_functions_item.5:[rbp-76] 
  # [discarded value]: named_functions_item.5
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] $35.1:[rbp-86] 
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] named_function.1:[rbp-85] 
  # [discarded value]: named_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
.LABEL__convert_direct_call_expression_111__24:
  .loc 3 1070 23
  # $48.1: @String = call(clone_391, "Found no matching function: ")
  lea rdi, .LABEL__string_233[rip] # "Found no matching function: "
  call clone_391
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax 
  .loc 3 1070 68
  # $49.1: @String = load_struct_member(callee_name.1, lexeme)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:rbx:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $48.1:rax $49.1:r15 
  .loc 3 1070 23
  # $50.1: @String = call(append_400, $48.1, $49.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $49.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] $50.1:rax 
  .loc 3 1070 23
  # message.1: @String = call(append_400, $50.1, " = func (")
  mov rdi, rax
  lea rsi, .LABEL__string_234[rip] # " = func ("
  call append_400
  # [discarded value]: $50.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax 
  .loc 3 1071 35
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rbx, [rbp-49]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 
  .loc 3 1072 13
  # $53.1: bool = call_arguments_item.1 != null
  cmp r15, 0
  setne r14b
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:rbx:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:rax call_arguments_item.1:r15 $53.1:r14 
  # jump($53.1, .LABEL__convert_direct_call_expression_111__29, .LABEL__convert_direct_call_expression_111__28)
  test r14b, r14b
  mov [rbp-85], rax
  mov [rbp-86], r14b
  mov [rbp-94], r15
  jz .LABEL__convert_direct_call_expression_111__28
.LABEL__convert_direct_call_expression_111__29:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.4, call_arguments_item.1)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] 
  .loc 3 1074 37
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-94]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx 
  .loc 3 1075 21
  # $56.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $56.1:r15 
  .loc 3 1075 21
  # $57.1: bool = $56.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:rax:[rbp-94] call_argument.1:rbx $57.1:r14 
  # jump($57.1, .LABEL__convert_direct_call_expression_111__31, .LABEL__convert_direct_call_expression_111__32)
  test r14b, r14b
  mov [rbp-102], rbx
  mov [rbp-103], r14b
  jz .LABEL__convert_direct_call_expression_111__32
.LABEL__convert_direct_call_expression_111__31:
  .loc 3 1076 36
  # $58.1: @String = load_struct_member(call_argument.1, name)
  mov rax, [rbp-102]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $58.1:rbx 
  .loc 3 1076 21
  # $59.1: @String = call(append_400, message.1, $58.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_400
  # [discarded value]: $58.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] $59.1:rax 
  .loc 3 1076 21
  # $60.1: @String = call(append_400, $59.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call append_400
  # [discarded value]: $60.1
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # jump(.LABEL__convert_direct_call_expression_111__32)
.LABEL__convert_direct_call_expression_111__32:
  .loc 3 1078 32
  # $61.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rax, [rbp-102]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $61.1:rbx 
  .loc 3 1078 32
  # $62.1: @IR_Type = load_struct_member($61.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $62.1:r15 
  .loc 3 1078 32
  # $63.1: @String = load_struct_member($62.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:rax:[rbp-102] $57.1:[rbp-103] $63.1:rbx 
  .loc 3 1078 17
  # $64.1: @String = call(append_400, message.1, $63.1)
  mov rdi, [rbp-85]
  mov rsi, rbx
  call append_400
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  .loc 3 1079 39
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-94]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] 
  .loc 3 1080 21
  # $66.1: bool = call_arguments_item.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:rbx:[rbp-94] $66.1:rax 
  # jump($66.1, .LABEL__convert_direct_call_expression_111__28, .LABEL__convert_direct_call_expression_111__34)
  test al, al
  mov [rbp-104], al
  mov [rbp-94], rbx
  jz .LABEL__convert_direct_call_expression_111__34
.LABEL__convert_direct_call_expression_111__28:
  .loc 3 1086 9
  # $68.1: @String = call(append_400, message.1, ") -> Any")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_235[rip] # ") -> Any"
  call append_400
  # [discarded value]: $68.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1087 15
  # $69.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] $69.1:rbx call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  .loc 3 1087 9
  # call(abort_360, $69.1, message.1)
  mov rdi, rbx
  mov rsi, [rbp-85]
  call abort_360
  # [discarded value]: $69.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
.LABEL__convert_direct_call_expression_111__34:
  .loc 3 1083 17
  # $67.1: @String = call(append_400, message.1, ", ")
  mov rdi, [rbp-85]
  lea rsi, .LABEL__string_40[rip] # ", "
  call append_400
  # [discarded value]: $67.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # jump(.LABEL__convert_direct_call_expression_111__29)
  jmp .LABEL__convert_direct_call_expression_111__29
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] $66.1:[rbp-104] 
  # [discarded value]: $66.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] call_arguments_item.4:[rbp-94] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] $57.1:[rbp-103] 
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] call_arguments_item.2:[rbp-94] call_argument.1:[rbp-102] 
  # [discarded value]: call_argument.1
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] $53.1:[rbp-86] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] message.1:[rbp-85] call_arguments_item.1:[rbp-94] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] $30.1:[rbp-77] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] named_functions_item.2:[rbp-76] 
  # [discarded value]: named_functions_item.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] named_functions_item.1:[rbp-76] 
  # [discarded value]: named_functions_item.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
.LABEL__convert_direct_call_expression_111__21:
  .loc 3 1090 9
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax 
  .loc 3 1091 9
  # $70.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rbx, [rbp-58]
  mov r15, [rbx+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rbx:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:rax $70.1:r15 
  .loc 3 1091 9
  # $71.1: bool = call(is_389, $70.1, IR_Nothing_Type)
  mov rdi, r15
  mov rsi, IR_Nothing_Type[rip]
  mov [rbp-76], rax
  call is_389
  # [discarded value]: $70.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $71.1:rax 
  .loc 3 1091 9
  # $72.1: bool = $71.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $71.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:rbx 
  # jump($72.1, .LABEL__convert_direct_call_expression_111__36, .LABEL__convert_direct_call_expression_111__37)
  test bl, bl
  mov [rbp-77], bl
  jz .LABEL__convert_direct_call_expression_111__37
.LABEL__convert_direct_call_expression_111__36:
  .loc 3 1092 47
  # $73.1: @IR_Type = load_struct_member(call_function.8, return_type)
  mov rax, [rbp-58]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:rax:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] $73.1:rbx 
  .loc 3 1092 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_77, self.1, $73.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $73.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:rax:[rbp-76] 
  # jump(.LABEL__convert_direct_call_expression_111__37)
  mov [rbp-76], rax
.LABEL__convert_direct_call_expression_111__37:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] result_value.3:[rbp-76] 
  .loc 3 1094 24
  # $75.1: @IR_Call_Instruction = call(create_ir_direct_call_instruction_191, result_value.3, call_arguments.1, call_function.8)
  mov rdi, [rbp-76]
  mov rsi, [rbp-49]
  mov rdx, [rbp-58]
  call create_ir_direct_call_instruction_191
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax 
  .loc 3 1094 104
  # $76.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $75.1:rax $76.1:r15 
  .loc 3 1094 12
  # $77.1: @IR_Variable_Value = call(append_78, self.1, $75.1, $76.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $76.1
  # [discarded value]: $75.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] $77.1:rax 
  .loc 3 1094 5
  # return($77.1)
  mov [rbp-85], rax
  jmp .LABEL__convert_direct_call_expression_111__end
  # [discarded value]: $77.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] result_value.2:[rbp-76] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] $72.1:[rbp-77] 
  # [discarded value]: $72.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] result_value.1:[rbp-76] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] $27.1:[rbp-68] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] $16.1:[rbp-67] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] call_function.8:[rbp-58] named_functions_item.2:[rbp-66] 
  # [discarded value]: named_functions_item.2
  # [discarded value]: call_function.8
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] call_function.1:[rbp-58] named_functions_item.1:[rbp-66] 
  # [discarded value]: named_functions_item.1
  # [discarded value]: call_function.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] $12.1:[rbp-50] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] call_arguments.1:[rbp-49] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] $4.3:[rbp-41] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] $4.2:[rbp-41] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] callee_name.1:[rbp-24] first_argument.1:[rbp-16] type.1:[rbp-40] $4.1:[rbp-41] 
  # [discarded value]: $4.1
  # [discarded value]: type.1
  # [discarded value]: first_argument.1
  # [discarded value]: callee_name.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_direct_call_expression_111__end:
  mov rsp, rbp
  pop rbp
  ret

convert_direct_call_expression_111__stack_frame_size: .word 112

  .loc 3 1097 8
  .text
convert_dynamic_call_expression_112:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_dynamic_call_expression_112__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_dynamic_call_expression_112__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # call_expression.1: @AST_Call_Expression = load_variable(call_expression)
  # [live values]: self.1:rdi call_expression.1:rsi 
  # call_function.1: @IR_Value = load_variable(call_function)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx 
  # first_argument.1: @IR_Value = load_variable(first_argument)
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx 
  .loc 3 1098 54
  # $1.1: @List = load_struct_member(call_expression.1, arguments)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi call_expression.1:rsi call_function.1:rdx first_argument.1:rcx $1.1:rax 
  .loc 3 1098 26
  # call_arguments.1: @List = call(convert_call_arguments_114, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rcx
  mov [rbp-24], rdx
  mov [rbp-32], rdi
  call convert_call_arguments_114
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax 
  .loc 3 1099 9
  # $3.1: bool = first_argument.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] first_argument.1:[rbp-16] call_arguments.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__convert_dynamic_call_expression_112__2, .LABEL__convert_dynamic_call_expression_112__3)
  test bl, bl
  mov [rbp-40], rax
  mov [rbp-41], bl
  jz .LABEL__convert_dynamic_call_expression_112__3
.LABEL__convert_dynamic_call_expression_112__2:
  .loc 3 1100 32
  # $4.1: @IR_Call_Argument = new IR_Call_Argument(value = first_argument.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = first_argument.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: first_argument.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] $4.1:rax 
  .loc 3 1100 9
  # call(prepend_365, call_arguments.1, $4.1)
  mov rdi, [rbp-40]
  mov rsi, rax
  call prepend_365
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # jump(.LABEL__convert_dynamic_call_expression_112__3)
.LABEL__convert_dynamic_call_expression_112__3:
  .loc 3 1102 30
  # call_function_type.1: @IR_Function_Type = load_struct_member(call_function.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:rax:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx 
  .loc 3 1103 9
  # $7.1: bool = call(accepts_113, call_function_type.1, call_arguments.1)
  mov rdi, rbx
  mov rsi, [rbp-40]
  mov [rbp-49], rbx
  call accepts_113
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $7.1:rax 
  .loc 3 1103 9
  # $8.1: bool = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:rbx 
  # jump($8.1, .LABEL__convert_dynamic_call_expression_112__4, .LABEL__convert_dynamic_call_expression_112__5)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__convert_dynamic_call_expression_112__5
.LABEL__convert_dynamic_call_expression_112__4:
  .loc 3 1104 15
  # $9.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rax:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] $9.1:rbx 
  .loc 3 1104 9
  # call(abort_360, $9.1, "Unsupported arguments")
  mov rdi, rbx
  lea rsi, .LABEL__string_236[rip] # "Unsupported arguments"
  call abort_360
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
.LABEL__convert_dynamic_call_expression_112__5:
  .loc 3 1106 9
  # result_value.1: @IR_Variable_Value = null
  xor rax, rax
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:rax 
  .loc 3 1107 9
  # $10.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rbx, [rbp-49]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rbx:[rbp-49] $8.1:[rbp-50] result_value.1:rax $10.1:r15 
  .loc 3 1107 9
  # $11.1: bool = call(is_389, $10.1, IR_Nothing_Type)
  mov rdi, r15
  mov rsi, IR_Nothing_Type[rip]
  mov [rbp-58], rax
  call is_389
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $11.1:rax 
  .loc 3 1107 9
  # $12.1: bool = $11.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:rbx 
  # jump($12.1, .LABEL__convert_dynamic_call_expression_112__6, .LABEL__convert_dynamic_call_expression_112__7)
  test bl, bl
  mov [rbp-59], bl
  jz .LABEL__convert_dynamic_call_expression_112__7
.LABEL__convert_dynamic_call_expression_112__6:
  .loc 3 1108 47
  # $13.1: @IR_Type = load_struct_member(call_function_type.1, return_type)
  mov rax, [rbp-49]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:rax:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] $13.1:rbx 
  .loc 3 1108 24
  # result_value.2: @IR_Variable_Value = call(create_temp_value_77, self.1, $13.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:rax:[rbp-58] 
  # jump(.LABEL__convert_dynamic_call_expression_112__7)
  mov [rbp-58], rax
.LABEL__convert_dynamic_call_expression_112__7:
  # result_value.3: @IR_Variable_Value = phi(result_value.1, result_value.2)
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] 
  .loc 3 1110 89
  # $15.1: @IR_Variable_Value = call_function.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] result_value.3:[rbp-58] $15.1:rax 
  .loc 3 1110 24
  # $16.1: @IR_Call_Instruction = call(create_ir_dynamic_call_instruction_193, result_value.3, call_arguments.1, $15.1)
  mov rdi, [rbp-58]
  mov rsi, [rbp-40]
  mov rdx, rax
  call create_ir_dynamic_call_instruction_193
  # [discarded value]: $15.1
  # [discarded value]: result_value.3
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax 
  .loc 3 1110 126
  # $17.1: @Source_Location = load_struct_member(call_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] call_expression.1:rbx:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $16.1:rax $17.1:r15 
  .loc 3 1110 12
  # $18.1: @IR_Variable_Value = call(append_78, self.1, $16.1, $17.1)
  mov rdi, [rbp-32]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] $18.1:rax 
  .loc 3 1110 5
  # return($18.1)
  mov [rbp-67], rax
  jmp .LABEL__convert_dynamic_call_expression_112__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] result_value.2:[rbp-58] 
  # [discarded value]: result_value.2
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] $12.1:[rbp-59] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] result_value.1:[rbp-58] 
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] call_function_type.1:[rbp-49] 
  # [discarded value]: call_function_type.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] $3.1:[rbp-41] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] call_expression.1:[rbp-8] call_function.1:[rbp-24] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [discarded value]: call_function.1
  # [discarded value]: call_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_dynamic_call_expression_112__end:
  mov rsp, rbp
  pop rbp
  ret

convert_dynamic_call_expression_112__stack_frame_size: .word 80

  .loc 3 1113 8
  .text
accepts_113:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR accepts_113__stack_frame_size[rip]
  sub rsp, rax
.LABEL__accepts_113__1:
  # self.1: @IR_Function_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 3 1114 31
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  .loc 3 1115 36
  # $2.1: @List = load_struct_member(self.1, parameters)
  mov rbx, [rdi+16]
  # [discarded value]: self.1
  # [live values]: call_arguments_item.1:rax $2.1:rbx 
  .loc 3 1115 36
  # function_parameters_item.1: @List_Item = load_struct_member($2.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $2.1
  # [live values]: call_arguments_item.1:rax function_parameters_item.1:r15 
  # jump(.LABEL__accepts_113__2)
  mov [rbp-8], rax
  mov [rbp-16], r15
.LABEL__accepts_113__2:
  # function_parameters_item.9: @List_Item = phi(function_parameters_item.1, function_parameters_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] 
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] 
  .loc 3 1116 12
  # $4.1: bool = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $4.1:rax 
  .loc 3 1116 12
  # $5.1: bool = $4.1
  mov [rbp-17], al
  # [discarded value]: $4.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:rax 
  # jump($5.1, .LABEL__accepts_113__7, .LABEL__accepts_113__8)
  test al, al
  mov [rbp-17], al
  jz .LABEL__accepts_113__8
.LABEL__accepts_113__7:
  .loc 3 1116 43
  # $6.1: bool = function_parameters_item.9 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $6.1:rax 
  .loc 3 1116 12
  # $5.2: bool = $6.1
  mov [rbp-18], al
  # [discarded value]: $6.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:rax:[rbp-17] 
  # jump(.LABEL__accepts_113__8)
  mov [rbp-17], al
.LABEL__accepts_113__8:
  .loc 3 1116 12
  # $7.1: bool = phi($5.1, $5.2)
  mov al, [rbp-17]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:rax 
  # jump($7.1, .LABEL__accepts_113__5, .LABEL__accepts_113__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__accepts_113__6
.LABEL__accepts_113__5:
  .loc 3 1116 80
  # $9.1: @IR_Function_Type_Parameter = load_struct_member(function_parameters_item.9, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $9.1:rbx $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1116 79
  # $10.1: @IR_Type = load_struct_member($9.1, type)
  mov r15, [rbx+8]
  # [discarded value]: $9.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $10.1:r15 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1116 155
  # $12.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rbx, [rbp-8]
  mov r14, [rbx+16]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $12.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1116 154
  # $13.1: @IR_Value = load_struct_member($12.1, value)
  mov r13, [r14+8]
  # [discarded value]: $12.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $13.1:r13 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1116 154
  # $14.1: @IR_Type = load_struct_member($13.1, type)
  mov r14, [r13+8]
  # [discarded value]: $13.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:rax:[rbp-16] call_arguments_item.2:rbx:[rbp-8] $5.1:[rbp-17] $10.1:r15 $14.1:r14 $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1116 79
  # $7.2: bool = call(accepts_75, $10.1, $14.1)
  mov rdi, r15
  mov rsi, r14
  call accepts_75
  # [discarded value]: $14.1
  # [discarded value]: $10.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:rax:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_113__6)
  mov [rbp-18], al
.LABEL__accepts_113__6:
  .loc 3 1116 12
  # $7.3: bool = phi($7.1, $7.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($7.3, .LABEL__accepts_113__3, .LABEL__accepts_113__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__accepts_113__4
.LABEL__accepts_113__3:
  .loc 3 1117 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1118 36
  # function_parameters_item.5: @List_Item = load_struct_member(function_parameters_item.9, next_item)
  mov rax, [rbp-16]
  mov r15, [rax+8]
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:rbx:[rbp-8] function_parameters_item.5:r15:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump(.LABEL__accepts_113__2)
  mov [rbp-8], rbx
  mov [rbp-16], r15
  jmp .LABEL__accepts_113__2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] call_arguments_item.5:[rbp-8] function_parameters_item.5:[rbp-16] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: function_parameters_item.5
  # [discarded value]: call_arguments_item.5
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
.LABEL__accepts_113__4:
  .loc 3 1120 12
  # $18.1: bool = call_arguments_item.2 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $18.1:rax $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  .loc 3 1120 12
  # $19.1: bool = $18.1
  mov [rbp-19], al
  # [discarded value]: $18.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:rax $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # jump($19.1, .LABEL__accepts_113__9, .LABEL__accepts_113__10)
  test al, al
  mov [rbp-19], al
  jz .LABEL__accepts_113__10
.LABEL__accepts_113__9:
  .loc 3 1120 43
  # $20.1: bool = function_parameters_item.9 == null
  cmp QWORD PTR [rbp-16], 0
  sete al
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $20.1:rax 
  .loc 3 1120 12
  # $19.2: bool = $20.1
  mov [rbp-20], al
  # [discarded value]: $20.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:rax:[rbp-19] 
  # jump(.LABEL__accepts_113__10)
  mov [rbp-19], al
.LABEL__accepts_113__10:
  .loc 3 1120 12
  # $19.3: bool = phi($19.1, $19.2)
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] $19.3:[rbp-19] 
  .loc 3 1120 5
  # return($19.3)
  mov al, [rbp-19]
  jmp .LABEL__accepts_113__end
  # [discarded value]: $19.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] $19.2:[rbp-19] 
  # [discarded value]: $19.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $19.1:[rbp-19] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $19.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $7.3:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.3
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $7.2:[rbp-18] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] $5.2:[rbp-17] 
  # [discarded value]: $5.2
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] function_parameters_item.9:[rbp-16] call_arguments_item.2:[rbp-8] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [discarded value]: call_arguments_item.2
  # [discarded value]: function_parameters_item.9
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [live values]: call_arguments_item.1:[rbp-8] function_parameters_item.1:[rbp-16] 
  # [discarded value]: function_parameters_item.1
  # [discarded value]: call_arguments_item.1
  # [live values]: 
.LABEL__accepts_113__end:
  mov rsp, rbp
  pop rbp
  ret

accepts_113__stack_frame_size: .word 32

  .loc 3 1123 8
  .text
convert_call_arguments_114:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_call_arguments_114__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_call_arguments_114__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # ast_call_arguments.1: @List = load_variable(ast_call_arguments)
  # [live values]: self.1:rdi ast_call_arguments.1:rsi 
  .loc 3 1124 9
  # has_named_arguments.1: bool = false
  mov al, 0
  # [live values]: self.1:rdi ast_call_arguments.1:rsi has_named_arguments.1:rax 
  .loc 3 1125 26
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-17] ast_call_arguments.1:[rbp-9] has_named_arguments.1:[rbp-1] call_arguments.1:rax 
  .loc 3 1126 35
  # ast_call_arguments_item.1: @List_Item = load_struct_member(ast_call_arguments.1, first_item)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [discarded value]: ast_call_arguments.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:rax ast_call_arguments_item.1:r15 
  # jump(.LABEL__convert_call_arguments_114__2)
  mov [rbp-25], rax
  mov [rbp-33], r15
.LABEL__convert_call_arguments_114__2:
  # has_named_arguments.4: bool = phi(has_named_arguments.1, has_named_arguments.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] 
  # ast_call_arguments_item.2: @List_Item = phi(ast_call_arguments_item.1, ast_call_arguments_item.5)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  .loc 3 1127 12
  # $3.1: bool = ast_call_arguments_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:rax 
  # jump($3.1, .LABEL__convert_call_arguments_114__3, .LABEL__convert_call_arguments_114__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_call_arguments_114__4
.LABEL__convert_call_arguments_114__3:
  .loc 3 1128 29
  # call_argument.1: @AST_Call_Argument = load_struct_member(ast_call_arguments_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx 
  .loc 3 1129 59
  # $6.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:rax:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx $6.1:r15 
  .loc 3 1129 35
  # call_argument_value.1: @IR_Value = call(convert_expression_106, self.1, $6.1, null)
  mov rdi, [rbp-17]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-42], rbx
  call convert_expression_106
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:rax 
  .loc 3 1130 13
  # $8.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $8.1:r15 
  .loc 3 1130 13
  # $9.1: bool = $8.1 != null
  cmp r15, 0
  setne r14b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rbx:[rbp-42] call_argument_value.1:rax $9.1:r14 
  # jump($9.1, .LABEL__convert_call_arguments_114__5, .LABEL__convert_call_arguments_114__7)
  test r14b, r14b
  mov [rbp-50], rax
  mov [rbp-51], r14b
  jz .LABEL__convert_call_arguments_114__7
.LABEL__convert_call_arguments_114__5:
  .loc 3 1131 63
  # $13.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov rax, [rbp-42]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $13.1:rbx 
  .loc 3 1131 63
  # $14.1: @String = load_struct_member($13.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $14.1:r15 
  .loc 3 1131 35
  # $15.1: @IR_Call_Argument = new IR_Call_Argument(name = $14.1, value = call_argument_value.1)
  mov [rbp-59], r15
  mov rdi, 16
  call malloc
  #     .name = $14.1
  mov rbx, [rbp-59]
  mov QWORD PTR [rax], rbx
  #     .value = call_argument_value.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:r15:[rbp-50] $9.1:[rbp-51] $15.1:rax 
  .loc 3 1131 13
  # call(append_364, call_arguments.1, $15.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_364
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
  .loc 3 1132 13
  # has_named_arguments.3: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:rax:[rbp-1] 
  # jump(.LABEL__convert_call_arguments_114__6)
  mov [rbp-1], al
.LABEL__convert_call_arguments_114__6:
  # has_named_arguments.5: bool = phi(has_named_arguments.3, has_named_arguments.4)
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] 
  .loc 3 1139 35
  # ast_call_arguments_item.5: @List_Item = load_struct_member(ast_call_arguments_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:rbx:[rbp-33] 
  # jump(.LABEL__convert_call_arguments_114__2)
  mov [rbp-33], rbx
  jmp .LABEL__convert_call_arguments_114__2
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] has_named_arguments.5:[rbp-1] ast_call_arguments_item.5:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.5
  # [discarded value]: has_named_arguments.5
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] has_named_arguments.3:[rbp-1] 
  # [discarded value]: has_named_arguments.3
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_114__7:
  # jump(has_named_arguments.4, .LABEL__convert_call_arguments_114__8, .LABEL__convert_call_arguments_114__9)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__convert_call_arguments_114__9
.LABEL__convert_call_arguments_114__8:
  .loc 3 1135 23
  # $10.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $10.1:rbx 
  .loc 3 1135 23
  # $11.1: @Source_Location = load_struct_member($10.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:rax:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] $11.1:r15 
  .loc 3 1135 17
  # call(abort_360, $11.1, "Positional arguments cannot be added after named ones")
  mov rdi, r15
  lea rsi, .LABEL__string_237[rip] # "Positional arguments cannot be added after named ones"
  call abort_360
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] call_argument_value.1:[rbp-50] $9.1:[rbp-51] 
.LABEL__convert_call_arguments_114__9:
  .loc 3 1137 35
  # $12.1: @IR_Call_Argument = new IR_Call_Argument(value = call_argument_value.1, name = null)
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value = call_argument_value.1
  mov rbx, [rbp-50]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: call_argument_value.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] $12.1:rax 
  .loc 3 1137 13
  # call(append_364, call_arguments.1, $12.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call append_364
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # jump(.LABEL__convert_call_arguments_114__6)
  jmp .LABEL__convert_call_arguments_114__6
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] $9.1:[rbp-51] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] call_argument.1:[rbp-42] 
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
.LABEL__convert_call_arguments_114__4:
  .loc 3 1141 5
  # return(call_arguments.1)
  mov rax, [rbp-25]
  jmp .LABEL__convert_call_arguments_114__end
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] $3.1:[rbp-34] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] has_named_arguments.4:[rbp-1] ast_call_arguments_item.2:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.2
  # [discarded value]: has_named_arguments.4
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] has_named_arguments.1:[rbp-1] call_arguments.1:[rbp-25] ast_call_arguments_item.1:[rbp-33] 
  # [discarded value]: ast_call_arguments_item.1
  # [discarded value]: call_arguments.1
  # [discarded value]: has_named_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_call_arguments_114__end:
  mov rsp, rbp
  pop rbp
  ret

convert_call_arguments_114__stack_frame_size: .word 64

  .loc 3 1144 8
  .text
convert_cast_expression_115:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_cast_expression_115__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_cast_expression_115__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # cast_expression.1: @AST_Cast_Expression = load_variable(cast_expression)
  # [live values]: self.1:rdi cast_expression.1:rsi 
  .loc 3 1145 41
  # $1.1: @AST_Expression = load_struct_member(cast_expression.1, value_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi cast_expression.1:rsi $1.1:rax 
  .loc 3 1145 17
  # value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax 
  .loc 3 1146 65
  # $3.1: @AST_Type = load_struct_member(cast_expression.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:rax $3.1:r15 
  .loc 3 1146 47
  # $4.1: @IR_Type = call(convert_type_82, self.1, $3.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-24], rax
  call convert_type_82
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  .loc 3 1146 24
  # result_value.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $4.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax 
  .loc 3 1147 9
  # $6.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:rax $6.1:r15 
  .loc 3 1147 9
  # $8.1: bool = call(is_389, $6.1, IR_Pointer_Type)
  mov rdi, r15
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-32], rax
  call is_389
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:rax 
  # jump($8.1, .LABEL__convert_cast_expression_115__2, .LABEL__convert_cast_expression_115__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_cast_expression_115__3
.LABEL__convert_cast_expression_115__2:
  .loc 3 1147 44
  # $9.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  .loc 3 1147 44
  # $11.1: bool = call(is_389, $9.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:rax 
  # jump($11.1, .LABEL__convert_cast_expression_115__5, .LABEL__convert_cast_expression_115__4)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_cast_expression_115__4
.LABEL__convert_cast_expression_115__5:
  .loc 3 1147 44
  # $8.2: bool = phi($11.1, $11.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.2:rax:[rbp-33] 
  # jump(.LABEL__convert_cast_expression_115__3)
  mov [rbp-33], al
.LABEL__convert_cast_expression_115__3:
  .loc 3 1147 9
  # $8.3: bool = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # jump($8.3, .LABEL__convert_cast_expression_115__6, .LABEL__convert_cast_expression_115__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_cast_expression_115__7
.LABEL__convert_cast_expression_115__6:
  .loc 3 1148 28
  # $14.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_set_instruction_220
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $14.1:rax 
  .loc 3 1148 76
  # $15.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $14.1:rax $15.1:r15 
  .loc 3 1148 16
  # $16.1: @IR_Variable_Value = call(append_78, self.1, $14.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $16.1:rax 
  .loc 3 1148 9
  # return($16.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_cast_expression_115__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
.LABEL__convert_cast_expression_115__7:
  .loc 3 1150 9
  # $17.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rax:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $17.1:rbx 
  .loc 3 1150 9
  # $19.1: bool = call(is_389, $17.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  call is_389
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:rax 
  # jump($19.1, .LABEL__convert_cast_expression_115__9, .LABEL__convert_cast_expression_115__10)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_cast_expression_115__10
.LABEL__convert_cast_expression_115__9:
  .loc 3 1150 43
  # $20.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $20.1:rbx 
  .loc 3 1150 43
  # $19.2: bool = call(is_389, $20.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  call is_389
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:rax:[rbp-35] 
  # jump(.LABEL__convert_cast_expression_115__10)
  mov [rbp-35], al
.LABEL__convert_cast_expression_115__10:
  .loc 3 1150 9
  # $19.3: bool = phi($19.1, $19.2)
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] 
  # jump($19.3, .LABEL__convert_cast_expression_115__11, .LABEL__convert_cast_expression_115__12)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_cast_expression_115__12
.LABEL__convert_cast_expression_115__11:
  .loc 3 1151 28
  # $22.1: @IR_Cast_Instruction = call(create_ir_cast_instruction_196, result_value.1, value.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  call create_ir_cast_instruction_196
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $22.1:rax 
  .loc 3 1151 77
  # $23.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rbx:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $22.1:rax $23.1:r15 
  .loc 3 1151 16
  # $24.1: @IR_Variable_Value = call(append_78, self.1, $22.1, $23.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $24.1:rax 
  .loc 3 1151 9
  # return($24.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_cast_expression_115__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] 
.LABEL__convert_cast_expression_115__12:
  .loc 3 1153 11
  # $25.1: @Source_Location = load_struct_member(cast_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:rax:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:rbx 
  .loc 3 1153 37
  # $26.1: @String = call(clone_391, "Cannot cast ")
  lea rdi, .LABEL__string_44[rip] # "Cannot cast "
  mov [rbp-43], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $26.1:rax 
  .loc 3 1153 66
  # $27.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $26.1:rax $27.1:r15 
  .loc 3 1153 66
  # $28.1: @String = load_struct_member($27.1, name)
  mov r14, [r15+8]
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:rbx:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $26.1:rax $28.1:r14 
  .loc 3 1153 37
  # $29.1: @String = call(append_400, $26.1, $28.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $28.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $29.1:rax 
  .loc 3 1153 37
  # $30.1: @String = call(append_400, $29.1, " to ")
  mov rdi, rax
  lea rsi, .LABEL__string_45[rip] # " to "
  call append_400
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $30.1:rax 
  .loc 3 1153 105
  # $31.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $30.1:rax $31.1:r15 
  .loc 3 1153 105
  # $32.1: @String = load_struct_member($31.1, name)
  mov r14, [r15+8]
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rbx:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $30.1:rax $32.1:r14 
  .loc 3 1153 37
  # $33.1: @String = call(append_400, $30.1, $32.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $32.1
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] $25.1:[rbp-43] $33.1:rax 
  .loc 3 1153 5
  # call(abort_360, $25.1, $33.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_360
  # [discarded value]: $33.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] $19.3:[rbp-35] 
  # [discarded value]: $19.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] $19.2:[rbp-35] 
  # [discarded value]: $19.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] 
.LABEL__convert_cast_expression_115__4:
  .loc 3 1147 85
  # $12.1: @IR_Type = load_struct_member(result_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:rax:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $12.1:rbx 
  .loc 3 1147 85
  # $11.2: bool = call(is_389, $12.1, IR_Unchecked_Array_Type)
  mov rdi, rbx
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $11.2:rax:[rbp-34] 
  # jump(.LABEL__convert_cast_expression_115__5)
  mov [rbp-34], al
  jmp .LABEL__convert_cast_expression_115__5
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] $11.2:[rbp-34] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] $11.1:[rbp-34] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] cast_expression.1:[rbp-8] value.1:[rbp-24] result_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [discarded value]: result_value.1
  # [discarded value]: value.1
  # [discarded value]: cast_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_cast_expression_115__end:
  mov rsp, rbp
  pop rbp
  ret

convert_cast_expression_115__stack_frame_size: .word 48

  .loc 3 1156 8
  .text
convert_divide_expression_116:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_divide_expression_116__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_divide_expression_116__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1157 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1157 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1158 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1158 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1158 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_divide_expression_116__2, .LABEL__convert_divide_expression_116__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_divide_expression_116__3
.LABEL__convert_divide_expression_116__2:
  .loc 3 1159 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1159 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1159 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_divide_expression_116__3:
  .loc 3 1161 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1161 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1161 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1162 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_divide_expression_116__4, .LABEL__convert_divide_expression_116__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_divide_expression_116__5
.LABEL__convert_divide_expression_116__4:
  .loc 3 1162 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_divide_expression_116__5)
  mov [rbp-34], al
.LABEL__convert_divide_expression_116__5:
  .loc 3 1162 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_divide_expression_116__6, .LABEL__convert_divide_expression_116__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_divide_expression_116__7
.LABEL__convert_divide_expression_116__6:
  .loc 3 1163 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1163 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_divide_expression_116__7:
  .loc 3 1165 88
  # $15.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rbx 
  .loc 3 1165 65
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1165 24
  # $18.1: @IR_Divide_Instruction = new IR_Divide_Instruction(object_type = IR_Divide_Instruction, result_value = $16.1, dump = anonymous_function_26_235.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Divide_Instruction
  mov rbx, IR_Divide_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_26_235.address
  lea r14, anonymous_function_26_235[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1165 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1165 137
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1165 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1165 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_divide_expression_116__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_divide_expression_116__end:
  mov rsp, rbp
  pop rbp
  ret

convert_divide_expression_116__stack_frame_size: .word 64

  .loc 3 1168 8
  .text
convert_equals_expression_117:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_equals_expression_117__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_equals_expression_117__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1169 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1169 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1170 47
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1170 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_106
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1171 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1171 28
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1171 9
  # $7.1: bool = $5.1 != $6.1
  cmp r15, r14
  setne r13b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $7.1:r13 
  .loc 3 1171 9
  # $8.1: bool = $7.1
  mov [rbp-25], r13b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $8.1:r13 
  # jump($8.1, .LABEL__convert_equals_expression_117__2, .LABEL__convert_equals_expression_117__3)
  test r13b, r13b
  mov [rbp-32], rax
  mov [rbp-33], r13b
  jz .LABEL__convert_equals_expression_117__3
.LABEL__convert_equals_expression_117__2:
  .loc 3 1171 49
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  .loc 3 1171 49
  # $10.1: bool = call(is_389, $9.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $10.1:rax 
  .loc 3 1171 49
  # $11.1: bool = $10.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $11.1:rbx 
  .loc 3 1171 49
  # $12.1: bool = $11.1
  mov [rbp-34], bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:rbx 
  # jump($12.1, .LABEL__convert_equals_expression_117__5, .LABEL__convert_equals_expression_117__4)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__convert_equals_expression_117__4
.LABEL__convert_equals_expression_117__5:
  .loc 3 1171 49
  # $8.2: bool = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:rax:[rbp-33] 
  # jump(.LABEL__convert_equals_expression_117__3)
  mov [rbp-33], al
.LABEL__convert_equals_expression_117__3:
  .loc 3 1171 9
  # $8.3: bool = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # jump($8.3, .LABEL__convert_equals_expression_117__6, .LABEL__convert_equals_expression_117__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_equals_expression_117__7
.LABEL__convert_equals_expression_117__6:
  .loc 3 1172 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $16.1:rbx 
  .loc 3 1172 9
  # call(abort_360, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_238[rip] # "Operands are not the same type"
  call abort_360
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
.LABEL__convert_equals_expression_117__7:
  .loc 3 1174 9
  # $18.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_equals_expression_117__8, .LABEL__convert_equals_expression_117__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_equals_expression_117__9
.LABEL__convert_equals_expression_117__8:
  .loc 3 1174 45
  # $18.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_equals_expression_117__9)
  mov [rbp-35], al
.LABEL__convert_equals_expression_117__9:
  .loc 3 1174 9
  # $18.3: bool = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_equals_expression_117__10, .LABEL__convert_equals_expression_117__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_equals_expression_117__11
.LABEL__convert_equals_expression_117__10:
  .loc 3 1175 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1175 9
  # call(abort_360, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_equals_expression_117__11:
  .loc 3 1177 99
  # $21.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1177 76
  # $22.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 484 37
  # $23.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-43], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  .loc 3 1177 24
  # $24.1: @IR_Equals_Comparison_Instruction = new IR_Equals_Comparison_Instruction(object_type = IR_Equals_Comparison_Instruction, result_value = $22.1, dump = anonymous_function_27_236.address, location = null, operand_values = $23.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-51], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Equals_Comparison_Instruction
  mov rbx, IR_Equals_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $22.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $23.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_27_236.address
  lea r14, anonymous_function_27_236[rip]
  mov [rax+57], r14
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $24.1:rax 
  .loc 3 1177 24
  # $25.1: @IR_Binary_Instruction = call(init_231, $24.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_231
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1177 160
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax $26.1:r15 
  .loc 3 1177 12
  # $27.1: @IR_Variable_Value = call(append_78, self.1, $25.1, $26.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $27.1:rax 
  .loc 3 1177 5
  # return($27.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_equals_expression_117__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
.LABEL__convert_equals_expression_117__4:
  .loc 3 1171 97
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  .loc 3 1171 97
  # $14.1: bool = call(is_389, $13.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1171 97
  # $15.1: bool = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $15.1:rbx 
  .loc 3 1171 49
  # $12.2: bool = $15.1
  mov [rbp-35], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_equals_expression_117__5)
  mov [rbp-34], bl
  jmp .LABEL__convert_equals_expression_117__5
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_equals_expression_117__end:
  mov rsp, rbp
  pop rbp
  ret

convert_equals_expression_117__stack_frame_size: .word 64

  .loc 3 1180 8
  .text
convert_function_expression_118:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_function_expression_118__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_function_expression_118__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Function_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1181 9
  # function.1: @IR_Function = null
  xor rax, rax
  # [live values]: self.1:rdi expression.1:rsi function.1:rax 
  .loc 3 1182 32
  # $1.1: @List = load_struct_member(self.1, named_functions)
  mov rbx, [rdi+24]
  # [discarded value]: self.1
  # [live values]: expression.1:rsi function.1:rax $1.1:rbx 
  .loc 3 1182 32
  # named_functions_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $1.1
  # [live values]: expression.1:rsi function.1:rax named_functions_item.1:r15 
  # jump(.LABEL__convert_function_expression_118__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], r15
.LABEL__convert_function_expression_118__2:
  # named_functions_item.2: @List_Item = phi(named_functions_item.1, named_functions_item.5)
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] 
  .loc 3 1183 12
  # $3.1: bool = named_functions_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__convert_function_expression_118__3, .LABEL__convert_function_expression_118__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_function_expression_118__4
.LABEL__convert_function_expression_118__3:
  .loc 3 1184 30
  # named_function.1: @IR_Function = load_struct_member(named_functions_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx 
  .loc 3 1185 13
  # $6.1: @String = load_struct_member(named_function.1, name)
  mov r15, [rbx+24]
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx $6.1:r15 
  .loc 3 1185 36
  # $7.1: @AST_Function_Statement = load_struct_member(expression.1, function_statement)
  mov r14, [rbp-16]
  mov r13, [r14+24]
  # [live values]: expression.1:r14:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx $6.1:r15 $7.1:r13 
  .loc 3 1185 36
  # $8.1: @Identifier_Token = load_struct_member($7.1, name)
  mov r12, [r13+24]
  # [discarded value]: $7.1
  # [live values]: expression.1:r14:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx $6.1:r15 $8.1:r12 
  .loc 3 1185 36
  # $9.1: @String = load_struct_member($8.1, lexeme)
  mov r13, [r12+8]
  # [discarded value]: $8.1
  # [live values]: expression.1:r14:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx $6.1:r15 $9.1:r13 
  .loc 3 1185 13
  # $10.1: bool = $6.1 == $9.1
  cmp r15, r13
  sete r12b
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: expression.1:r14:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:rax:[rbp-24] $3.1:[rbp-25] named_function.1:rbx $10.1:r12 
  # jump($10.1, .LABEL__convert_function_expression_118__5, .LABEL__convert_function_expression_118__6)
  test r12b, r12b
  mov [rbp-33], rbx
  mov [rbp-34], r12b
  jz .LABEL__convert_function_expression_118__6
.LABEL__convert_function_expression_118__5:
  .loc 3 1186 13
  # function.2: @IR_Function = named_function.1
  mov rax, [rbp-33]
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.2:rax:[rbp-8] 
  # jump(.LABEL__convert_function_expression_118__4)
  mov [rbp-8], rax
.LABEL__convert_function_expression_118__4:
  # function.3: @IR_Function = phi(function.2, function.1)
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] function.2:[rbp-8] 
  .loc 3 1191 9
  # $12.1: bool = function.3 == null
  cmp QWORD PTR [rbp-8], 0
  sete al
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] $12.1:rax function.2:[rbp-8] 
  # jump($12.1, .LABEL__convert_function_expression_118__8, .LABEL__convert_function_expression_118__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_function_expression_118__9
.LABEL__convert_function_expression_118__8:
  .loc 3 1192 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] 
.LABEL__convert_function_expression_118__9:
  .loc 3 1194 49
  # $13.1: @IR_Function_Type = load_struct_member(function.3, type)
  mov rax, [rbp-8]
  mov rbx, [rax+48]
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:rax:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] $13.1:rbx 
  .loc 5 156 31
  # $14.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-43], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] $13.1:[rbp-43] $14.1:rax 
  .loc 5 157 19
  # $15.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-51], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] $13.1:[rbp-43] $14.1:[rbp-51] $15.1:rax 
  .loc 3 1194 12
  # $16.1: @IR_Function_Address_Value = new IR_Function_Address_Value(object_type = IR_Function_Address_Value, type = $13.1, function = function.3, dump = anonymous_function_9_165.address, creator_instruction = null, user_instructions = $14.1, links = $15.1)
  mov [rbp-59], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Function_Address_Value
  mov rbx, IR_Function_Address_Value[rip]
  mov [rax], rbx
  #     .type = $13.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $14.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .links = $15.1
  mov r14, [rbp-59]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_9_165.address
  lea r13, anonymous_function_9_165[rip]
  mov [rax+40], r13
  #     .function = function.3
  mov r13, [rbp-8]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:r13:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] $16.1:rax 
  .loc 3 1194 5
  # return($16.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_function_expression_118__end
  # [discarded value]: $16.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] $12.1:[rbp-35] function.2:[rbp-8] 
  # [discarded value]: $12.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.3:[rbp-8] function.2:[rbp-8] 
  # [discarded value]: function.3
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.2:[rbp-8] 
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] function.2:[rbp-8] 
  # [discarded value]: function.2
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] 
.LABEL__convert_function_expression_118__6:
  .loc 3 1189 32
  # named_functions_item.5: @List_Item = load_struct_member(named_functions_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] named_functions_item.5:rbx:[rbp-24] 
  # jump(.LABEL__convert_function_expression_118__2)
  mov [rbp-24], rbx
  jmp .LABEL__convert_function_expression_118__2
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] named_functions_item.5:[rbp-24] 
  # [discarded value]: named_functions_item.5
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] named_function.1:[rbp-33] 
  # [discarded value]: named_function.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] named_functions_item.2:[rbp-24] 
  # [discarded value]: named_functions_item.2
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] 
  # [live values]: expression.1:[rbp-16] function.1:[rbp-8] named_functions_item.1:[rbp-24] 
  # [discarded value]: named_functions_item.1
  # [discarded value]: function.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__convert_function_expression_118__end:
  mov rsp, rbp
  pop rbp
  ret

convert_function_expression_118__stack_frame_size: .word 64

  .loc 3 1197 8
  .text
convert_greater_than_expression_119:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_expression_119__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_expression_119__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1198 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1198 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1199 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1199 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1199 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_greater_than_expression_119__2, .LABEL__convert_greater_than_expression_119__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_greater_than_expression_119__3
.LABEL__convert_greater_than_expression_119__2:
  .loc 3 1200 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1200 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1200 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_greater_than_expression_119__3:
  .loc 3 1202 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1202 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1202 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1203 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_greater_than_expression_119__4, .LABEL__convert_greater_than_expression_119__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_greater_than_expression_119__5
.LABEL__convert_greater_than_expression_119__4:
  .loc 3 1203 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_greater_than_expression_119__5)
  mov [rbp-34], al
.LABEL__convert_greater_than_expression_119__5:
  .loc 3 1203 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_greater_than_expression_119__6, .LABEL__convert_greater_than_expression_119__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_greater_than_expression_119__7
.LABEL__convert_greater_than_expression_119__6:
  .loc 3 1204 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1204 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_greater_than_expression_119__7:
  .loc 3 1206 100
  # $15.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rax 
  .loc 3 1206 77
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1206 24
  # $18.1: @IR_Greater_Comparison_Instruction = new IR_Greater_Comparison_Instruction(object_type = IR_Greater_Comparison_Instruction, result_value = $16.1, dump = anonymous_function_28_237.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Greater_Comparison_Instruction
  mov rbx, IR_Greater_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_28_237.address
  lea r14, anonymous_function_28_237[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1206 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1206 161
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1206 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1206 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_greater_than_expression_119__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_expression_119__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_expression_119__stack_frame_size: .word 64

  .loc 3 1209 8
  .text
convert_greater_than_or_equals_expression_120:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_greater_than_or_equals_expression_120__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_greater_than_or_equals_expression_120__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1210 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1210 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1211 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1211 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1211 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_greater_than_or_equals_expression_120__2, .LABEL__convert_greater_than_or_equals_expression_120__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_greater_than_or_equals_expression_120__3
.LABEL__convert_greater_than_or_equals_expression_120__2:
  .loc 3 1212 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1212 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1212 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_greater_than_or_equals_expression_120__3:
  .loc 3 1214 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1214 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1214 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1215 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_greater_than_or_equals_expression_120__4, .LABEL__convert_greater_than_or_equals_expression_120__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_greater_than_or_equals_expression_120__5
.LABEL__convert_greater_than_or_equals_expression_120__4:
  .loc 3 1215 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_greater_than_or_equals_expression_120__5)
  mov [rbp-34], al
.LABEL__convert_greater_than_or_equals_expression_120__5:
  .loc 3 1215 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_greater_than_or_equals_expression_120__6, .LABEL__convert_greater_than_or_equals_expression_120__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_greater_than_or_equals_expression_120__7
.LABEL__convert_greater_than_or_equals_expression_120__6:
  .loc 3 1216 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1216 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_greater_than_or_equals_expression_120__7:
  .loc 3 1218 109
  # $15.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rax 
  .loc 3 1218 86
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1218 24
  # $18.1: @IR_Greater_Or_Equal_Comparison_Instruction = new IR_Greater_Or_Equal_Comparison_Instruction(object_type = IR_Greater_Or_Equal_Comparison_Instruction, result_value = $16.1, dump = anonymous_function_29_238.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Greater_Or_Equal_Comparison_Instruction
  mov rbx, IR_Greater_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_29_238.address
  lea r14, anonymous_function_29_238[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1218 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1218 170
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1218 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1218 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_greater_than_or_equals_expression_120__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_greater_than_or_equals_expression_120__end:
  mov rsp, rbp
  pop rbp
  ret

convert_greater_than_or_equals_expression_120__stack_frame_size: .word 64

  .loc 3 1221 8
  .text
convert_less_than_expression_121:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_expression_121__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_expression_121__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1222 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1222 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1223 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1223 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1223 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_less_than_expression_121__2, .LABEL__convert_less_than_expression_121__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_less_than_expression_121__3
.LABEL__convert_less_than_expression_121__2:
  .loc 3 1224 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1224 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1224 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_less_than_expression_121__3:
  .loc 3 1226 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1226 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1226 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1227 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_less_than_expression_121__4, .LABEL__convert_less_than_expression_121__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_less_than_expression_121__5
.LABEL__convert_less_than_expression_121__4:
  .loc 3 1227 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_less_than_expression_121__5)
  mov [rbp-34], al
.LABEL__convert_less_than_expression_121__5:
  .loc 3 1227 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_less_than_expression_121__6, .LABEL__convert_less_than_expression_121__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_less_than_expression_121__7
.LABEL__convert_less_than_expression_121__6:
  .loc 3 1228 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1228 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_less_than_expression_121__7:
  .loc 3 1230 97
  # $15.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rax 
  .loc 3 1230 74
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1230 24
  # $18.1: @IR_Less_Comparison_Instruction = new IR_Less_Comparison_Instruction(object_type = IR_Less_Comparison_Instruction, result_value = $16.1, dump = anonymous_function_30_239.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Less_Comparison_Instruction
  mov rbx, IR_Less_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_30_239.address
  lea r14, anonymous_function_30_239[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1230 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1230 158
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1230 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1230 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_less_than_expression_121__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_expression_121__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_expression_121__stack_frame_size: .word 64

  .loc 3 1233 8
  .text
convert_less_than_or_equals_expression_122:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_less_than_or_equals_expression_122__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_less_than_or_equals_expression_122__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1234 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1234 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1235 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1235 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1235 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_less_than_or_equals_expression_122__2, .LABEL__convert_less_than_or_equals_expression_122__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_less_than_or_equals_expression_122__3
.LABEL__convert_less_than_or_equals_expression_122__2:
  .loc 3 1236 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1236 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1236 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_less_than_or_equals_expression_122__3:
  .loc 3 1238 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1238 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1238 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1239 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_less_than_or_equals_expression_122__4, .LABEL__convert_less_than_or_equals_expression_122__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_less_than_or_equals_expression_122__5
.LABEL__convert_less_than_or_equals_expression_122__4:
  .loc 3 1239 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_less_than_or_equals_expression_122__5)
  mov [rbp-34], al
.LABEL__convert_less_than_or_equals_expression_122__5:
  .loc 3 1239 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_less_than_or_equals_expression_122__6, .LABEL__convert_less_than_or_equals_expression_122__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_less_than_or_equals_expression_122__7
.LABEL__convert_less_than_or_equals_expression_122__6:
  .loc 3 1240 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1240 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_less_than_or_equals_expression_122__7:
  .loc 3 1242 106
  # $15.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rax 
  .loc 3 1242 83
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1242 24
  # $18.1: @IR_Less_Or_Equal_Comparison_Instruction = new IR_Less_Or_Equal_Comparison_Instruction(object_type = IR_Less_Or_Equal_Comparison_Instruction, result_value = $16.1, dump = anonymous_function_31_240.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Less_Or_Equal_Comparison_Instruction
  mov rbx, IR_Less_Or_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_31_240.address
  lea r14, anonymous_function_31_240[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1242 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1242 167
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1242 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1242 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_less_than_or_equals_expression_122__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_less_than_or_equals_expression_122__end:
  mov rsp, rbp
  pop rbp
  ret

convert_less_than_or_equals_expression_122__stack_frame_size: .word 64

  .loc 3 1245 8
  .text
convert_literal_expression_123:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_literal_expression_123__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_literal_expression_123__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 1246 9
  # $1.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  .loc 3 1246 9
  # $2.1: bool = call(is_389, $1.1, Boolean_Token)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, Boolean_Token[rip]
  mov [rbp-24], rdx
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__convert_literal_expression_123__2, .LABEL__convert_literal_expression_123__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_literal_expression_123__3
.LABEL__convert_literal_expression_123__2:
  .loc 3 1247 45
  # $3.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 3 1247 84
  # $4.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $3.1:rax $4.1:r15 
  .loc 5 156 31
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-33], rax
  mov [rbp-41], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:[rbp-41] $5.1:rax 
  .loc 5 157 19
  # $6.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:[rbp-41] $5.1:[rbp-49] $6.1:rax 
  .loc 3 1247 16
  # $7.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $3.1, literal = $4.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $5.1, links = $6.1)
  mov [rbp-57], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $3.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $5.1
  mov r15, [rbp-49]
  mov QWORD PTR [rax+24], r15
  #     .links = $6.1
  mov r14, [rbp-57]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $4.1
  mov r13, [rbp-41]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $7.1:rax 
  .loc 3 1247 9
  # return($7.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__convert_literal_expression_123__3:
  .loc 3 1249 9
  # $8.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $8.1:rbx 
  .loc 3 1249 9
  # $9.1: bool = call(is_389, $8.1, Character_Token)
  mov rdi, rbx
  mov rsi, Character_Token[rip]
  call is_389
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__convert_literal_expression_123__5, .LABEL__convert_literal_expression_123__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_literal_expression_123__6
.LABEL__convert_literal_expression_123__5:
  .loc 3 1250 45
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "i8")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_185[rip] # "i8"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $10.1:rax 
  .loc 3 1250 82
  # $11.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $10.1:rax $11.1:r15 
  .loc 5 156 31
  # $12.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-34], rax
  mov [rbp-42], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $10.1:[rbp-34] $11.1:[rbp-42] $12.1:rax 
  .loc 5 157 19
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-50], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $10.1:[rbp-34] $11.1:[rbp-42] $12.1:[rbp-50] $13.1:rax 
  .loc 3 1250 16
  # $14.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $10.1, literal = $11.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $12.1, links = $13.1)
  mov [rbp-58], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $10.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $12.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .links = $13.1
  mov r14, [rbp-58]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $11.1
  mov r13, [rbp-42]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $14.1:rax 
  .loc 3 1250 9
  # return($14.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] 
.LABEL__convert_literal_expression_123__6:
  .loc 3 1252 9
  # $15.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $15.1:rbx 
  .loc 3 1252 9
  # $16.1: bool = call(is_389, $15.1, Integer_Token)
  mov rdi, rbx
  mov rsi, Integer_Token[rip]
  call is_389
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:rax 
  # jump($16.1, .LABEL__convert_literal_expression_123__8, .LABEL__convert_literal_expression_123__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__convert_literal_expression_123__9
.LABEL__convert_literal_expression_123__8:
  .loc 3 1253 13
  # $17.1: bool = expected_type.1 == null
  cmp QWORD PTR [rbp-24], 0
  sete al
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $17.1:rax 
  .loc 3 1253 13
  # $18.1: bool = $17.1
  mov [rbp-28], al
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:rax 
  # jump($18.1, .LABEL__convert_literal_expression_123__11, .LABEL__convert_literal_expression_123__10)
  test al, al
  mov [rbp-28], al
  jz .LABEL__convert_literal_expression_123__10
.LABEL__convert_literal_expression_123__11:
  .loc 3 1253 13
  # $18.3: bool = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] 
  # jump($18.3, .LABEL__convert_literal_expression_123__12, .LABEL__convert_literal_expression_123__13)
  mov al, [rbp-28]
  test al, al
  jz .LABEL__convert_literal_expression_123__13
.LABEL__convert_literal_expression_123__12:
  .loc 3 1254 29
  # expected_type.4: @IR_Type = call(get_named_type_66, self.1, "isize")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_184[rip] # "isize"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:rax:[rbp-24] 
  # jump(.LABEL__convert_literal_expression_123__13)
  mov [rbp-24], rax
.LABEL__convert_literal_expression_123__13:
  # expected_type.5: @IR_Type = phi(expected_type.4, expected_type.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] expected_type.5:[rbp-24] 
  .loc 3 1256 70
  # $22.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] expected_type.5:[rbp-24] $22.1:rbx 
  .loc 5 156 31
  # $23.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-36], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] expected_type.5:[rbp-24] $22.1:[rbp-36] $23.1:rax 
  .loc 5 157 19
  # $24.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-44], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] expected_type.5:[rbp-24] $22.1:[rbp-36] $23.1:[rbp-44] $24.1:rax 
  .loc 3 1256 16
  # $25.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = expected_type.5, literal = $22.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $23.1, links = $24.1)
  mov [rbp-52], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = expected_type.5
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $23.1
  mov r15, [rbp-44]
  mov QWORD PTR [rax+24], r15
  #     .links = $24.1
  mov r14, [rbp-52]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $22.1
  mov r13, [rbp-36]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: expected_type.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] $25.1:rax 
  .loc 3 1256 9
  # return($25.1)
  mov [rbp-36], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] expected_type.4:[rbp-24] 
  # [discarded value]: expected_type.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.3:[rbp-28] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] 
.LABEL__convert_literal_expression_123__10:
  .loc 3 1253 38
  # $19.1: bool = call(is_389, expected_type.1, IR_Integer_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Integer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $19.1:rax 
  .loc 3 1253 38
  # $20.1: bool = $19.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $20.1:rbx 
  .loc 3 1253 13
  # $18.2: bool = $20.1
  mov [rbp-29], bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.2:rbx:[rbp-28] 
  # jump(.LABEL__convert_literal_expression_123__11)
  mov [rbp-28], bl
  jmp .LABEL__convert_literal_expression_123__11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] $18.2:[rbp-28] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $18.1:[rbp-28] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] 
.LABEL__convert_literal_expression_123__9:
  .loc 3 1258 9
  # $26.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $26.1:rbx 
  .loc 3 1258 9
  # $27.1: bool = call(is_389, $26.1, Null_Token)
  mov rdi, rbx
  mov rsi, Null_Token[rip]
  call is_389
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:rax 
  # jump($27.1, .LABEL__convert_literal_expression_123__15, .LABEL__convert_literal_expression_123__16)
  test al, al
  mov [rbp-28], al
  jz .LABEL__convert_literal_expression_123__16
.LABEL__convert_literal_expression_123__15:
  .loc 3 1259 45
  # $28.1: @IR_Type = call(get_named_type_66, self.1, "Null")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_190[rip] # "Null"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $28.1:rax 
  .loc 3 1259 84
  # $29.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $28.1:rax $29.1:r15 
  .loc 5 156 31
  # $30.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-36], rax
  mov [rbp-44], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $28.1:[rbp-36] $29.1:[rbp-44] $30.1:rax 
  .loc 5 157 19
  # $31.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-52], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $28.1:[rbp-36] $29.1:[rbp-44] $30.1:[rbp-52] $31.1:rax 
  .loc 3 1259 16
  # $32.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $28.1, literal = $29.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $30.1, links = $31.1)
  mov [rbp-60], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $28.1
  mov rbx, [rbp-36]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $30.1
  mov r15, [rbp-52]
  mov QWORD PTR [rax+24], r15
  #     .links = $31.1
  mov r14, [rbp-60]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $29.1
  mov r13, [rbp-44]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $32.1:rax 
  .loc 3 1259 9
  # return($32.1)
  mov [rbp-36], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] 
.LABEL__convert_literal_expression_123__16:
  .loc 3 1261 9
  # $33.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $33.1:rbx 
  .loc 3 1261 9
  # $34.1: bool = call(is_389, $33.1, String_Token)
  mov rdi, rbx
  mov rsi, String_Token[rip]
  call is_389
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:rax 
  # jump($34.1, .LABEL__convert_literal_expression_123__18, .LABEL__convert_literal_expression_123__19)
  test al, al
  mov [rbp-29], al
  jz .LABEL__convert_literal_expression_123__19
.LABEL__convert_literal_expression_123__18:
  .loc 3 1262 73
  # $35.1: @IR_Type = call(get_named_type_66, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_239[rip] # "String"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $35.1:rax 
  .loc 3 1262 45
  # $36.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, $35.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_ir_pointer_type_88
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $36.1:rax 
  .loc 3 1262 115
  # $37.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $36.1:rax $37.1:r15 
  .loc 5 156 31
  # $38.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-37], rax
  mov [rbp-45], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $36.1:[rbp-37] $37.1:[rbp-45] $38.1:rax 
  .loc 5 157 19
  # $39.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-53], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $36.1:[rbp-37] $37.1:[rbp-45] $38.1:[rbp-53] $39.1:rax 
  .loc 3 1262 16
  # $40.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $36.1, literal = $37.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $38.1, links = $39.1)
  mov [rbp-61], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $36.1
  mov rbx, [rbp-37]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $38.1
  mov r15, [rbp-53]
  mov QWORD PTR [rax+24], r15
  #     .links = $39.1
  mov r14, [rbp-61]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $37.1
  mov r13, [rbp-45]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $40.1:rax 
  .loc 3 1262 9
  # return($40.1)
  mov [rbp-37], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] 
.LABEL__convert_literal_expression_123__19:
  .loc 3 1264 9
  # $41.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $41.1:rbx 
  .loc 3 1264 9
  # $42.1: bool = call(is_389, $41.1, Undefined_Token)
  mov rdi, rbx
  mov rsi, Undefined_Token[rip]
  call is_389
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:rax 
  # jump($42.1, .LABEL__convert_literal_expression_123__21, .LABEL__convert_literal_expression_123__22)
  test al, al
  mov [rbp-30], al
  jz .LABEL__convert_literal_expression_123__22
.LABEL__convert_literal_expression_123__21:
  .loc 3 1265 46
  # $43.1: @IR_Type = call(get_named_type_66, self.1, "Undefined")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_191[rip] # "Undefined"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $43.1:rax 
  .loc 5 156 31
  # $44.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-38], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $43.1:[rbp-38] $44.1:rax 
  .loc 5 157 19
  # $45.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-46], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $43.1:[rbp-38] $44.1:[rbp-46] $45.1:rax 
  .loc 3 1265 16
  # $46.1: @IR_Undefined_Value = new IR_Undefined_Value(object_type = IR_Undefined_Value, type = $43.1, dump = anonymous_function_2_155.address, creator_instruction = null, user_instructions = $44.1, links = $45.1)
  mov [rbp-54], rax
  mov rdi, 48
  call malloc
  #     .object_type = IR_Undefined_Value
  mov rbx, IR_Undefined_Value[rip]
  mov [rax], rbx
  #     .type = $43.1
  mov rbx, [rbp-38]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $44.1
  mov r15, [rbp-46]
  mov QWORD PTR [rax+24], r15
  #     .links = $45.1
  mov r14, [rbp-54]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_2_155.address
  lea r13, anonymous_function_2_155[rip]
  mov [rax+40], r13
  # [discarded value]: $45.1
  # [discarded value]: $44.1
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $46.1:rax 
  .loc 3 1265 9
  # return($46.1)
  mov [rbp-38], rax
  jmp .LABEL__convert_literal_expression_123__end
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] 
.LABEL__convert_literal_expression_123__22:
  .loc 3 1267 11
  # $47.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $47.1:rbx 
  .loc 3 1267 32
  # $48.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $47.1:rbx $48.1:r15 
  .loc 3 1267 32
  # $49.1: @Object_Type = load_struct_member($48.1, object_type)
  mov r14, [r15]
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] $47.1:rbx $49.1:r14 
  .loc 3 1267 5
  # call(abort_145, $47.1, $49.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $49.1
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] $42.1:[rbp-30] 
  # [discarded value]: $42.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] $34.1:[rbp-29] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] $27.1:[rbp-28] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] $16.1:[rbp-27] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expected_type.1:[rbp-24] 
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_literal_expression_123__end:
  mov rsp, rbp
  pop rbp
  ret

convert_literal_expression_123__stack_frame_size: .word 64

  .loc 3 1270 8
  .text
convert_logic_and_expression_124:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_and_expression_124__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_and_expression_124__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1271 22
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1271 22
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1271 22
  # next_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1272 21
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1272 21
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1272 21
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1273 46
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1273 74
  # $8.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1273 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1274 53
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-40], rax
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1274 27
  # result_variable.1: @IR_Variable = call(create_temp_variable_76, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_76
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1275 29
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1276 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_220
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1276 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1276 5
  # $15.1: @IR_Variable_Value = call(append_78, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1277 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1277 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $16.1, result_value_left.1, next_block.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-24]
  mov rcx, [rbp-32]
  call append_jump_170
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1278 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1279 47
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1279 76
  # $19.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, rax
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-56], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1279 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1280 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1280 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_220
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1280 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1280 5
  # $24.1: @IR_Variable_Value = call(append_78, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1281 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1281 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_169
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1282 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1283 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_71
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1283 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1283 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1283 12
  # $30.1: @IR_Variable_Value = call(append_78, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1283 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_and_expression_124__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_and_expression_124__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_and_expression_124__stack_frame_size: .word 64

  .loc 3 1286 8
  .text
convert_logic_or_expression_125:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_logic_or_expression_125__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_logic_or_expression_125__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1287 22
  # $1.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1287 22
  # $2.1: @IR_Function = load_struct_member($1.1, function)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1287 22
  # next_block.1: @IR_Block = call(create_block_173, $2.1)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  call create_block_173
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:rax 
  .loc 3 1288 21
  # $4.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $4.1:r15 
  .loc 3 1288 21
  # $5.1: @IR_Function = load_struct_member($4.1, function)
  mov r14, [r15+16]
  # [discarded value]: $4.1
  # [live values]: self.1:rbx:[rbp-8] expression.1:[rbp-16] next_block.1:rax $5.1:r14 
  .loc 3 1288 21
  # end_block.1: @IR_Block = call(create_block_173, $5.1)
  mov rdi, r14
  mov [rbp-24], rax
  call create_block_173
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:rax 
  .loc 3 1289 46
  # $7.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:rax $7.1:r15 
  .loc 3 1289 74
  # $8.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-32], rax
  mov [rbp-40], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] $7.1:[rbp-40] $8.1:rax 
  .loc 3 1289 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $7.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-40]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:rax 
  .loc 3 1290 53
  # $10.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-40], rax
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] $10.1:rax 
  .loc 3 1290 27
  # result_variable.1: @IR_Variable = call(create_temp_variable_76, self.1, $10.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_variable_76
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:rax 
  .loc 3 1291 29
  # result_value_left.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-48], rax
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] left_value.1:[rbp-40] result_variable.1:[rbp-48] result_value_left.1:rax 
  .loc 3 1292 17
  # $13.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, result_value_left.1, left_value.1)
  mov rdi, rax
  mov rsi, [rbp-40]
  mov [rbp-56], rax
  call create_ir_set_instruction_220
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax 
  .loc 3 1292 75
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $13.1:rax $14.1:r15 
  .loc 3 1292 5
  # $15.1: @IR_Variable_Value = call(append_78, self.1, $13.1, $14.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] 
  .loc 3 1293 5
  # $16.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] result_value_left.1:[rbp-56] $16.1:rbx 
  .loc 3 1293 5
  # $17.1: @IR_Conditional_Jump_Instruction = call(append_jump_170, $16.1, result_value_left.1, end_block.1, next_block.1)
  mov rdi, rbx
  mov rsi, [rbp-56]
  mov rdx, [rbp-32]
  mov rcx, [rbp-24]
  call append_jump_170
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: result_value_left.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] next_block.1:[rbp-24] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1294 5
  # store_struct_member(self.1, current_block, next_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: next_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1295 47
  # $18.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-16]
  mov r15, [rbx+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:r15 
  .loc 3 1295 76
  # $19.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, rax
  lea rsi, .LABEL__string_183[rip] # "bool"
  mov [rbp-56], r15
  call get_named_type_66
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $18.1:[rbp-56] $19.1:rax 
  .loc 3 1295 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $18.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-56]
  mov rdx, rax
  call convert_expression_106
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:rax 
  .loc 3 1296 43
  # $21.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-48]
  mov [rbp-56], rax
  call create_variable_value_71
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] right_value.1:[rbp-56] $21.1:rax 
  .loc 3 1296 17
  # $22.1: @IR_Set_Instruction = call(create_ir_set_instruction_220, $21.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-56]
  call create_ir_set_instruction_220
  # [discarded value]: $21.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax 
  .loc 3 1296 102
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $22.1:rax $23.1:r15 
  .loc 3 1296 5
  # $24.1: @IR_Variable_Value = call(append_78, self.1, $22.1, $23.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1297 5
  # $25.1: @IR_Block = load_struct_member(self.1, current_block)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] $25.1:rbx 
  .loc 3 1297 5
  # $26.1: @IR_Direct_Jump_Instruction = call(append_jump_169, $25.1, end_block.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_jump_169
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] end_block.1:[rbp-32] result_variable.1:[rbp-48] 
  .loc 3 1298 5
  # store_struct_member(self.1, current_block, end_block.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+32], rbx
  # [discarded value]: end_block.1
  # [live values]: self.1:rax:[rbp-8] expression.1:[rbp-16] result_variable.1:[rbp-48] 
  .loc 3 1299 50
  # $27.1: @IR_Variable_Value = call(create_variable_value_71, self.1, result_variable.1)
  mov rdi, rax
  mov rsi, [rbp-48]
  call create_variable_value_71
  # [discarded value]: result_variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $27.1:rax 
  .loc 3 1299 24
  # $28.1: @IR_Phi_Instruction = call(create_ir_phi_instruction_246, $27.1)
  mov rdi, rax
  call create_ir_phi_instruction_246
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $28.1:rax 
  .loc 3 1299 96
  # $29.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $28.1:rax $29.1:r15 
  .loc 3 1299 12
  # $30.1: @IR_Variable_Value = call(append_78, self.1, $28.1, $29.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: self.1
  # [live values]: $30.1:rax 
  .loc 3 1299 5
  # return($30.1)
  mov [rbp-8], rax
  jmp .LABEL__convert_logic_or_expression_125__end
  # [discarded value]: $30.1
  # [live values]: 
.LABEL__convert_logic_or_expression_125__end:
  mov rsp, rbp
  pop rbp
  ret

convert_logic_or_expression_125__stack_frame_size: .word 64

  .loc 3 1302 8
  .text
convert_member_access_expression_126:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_126__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_126__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1303 48
  # $1.1: @AST_Expression = load_struct_member(member_access_expression.1, object_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi member_access_expression.1:rsi $1.1:rax 
  .loc 3 1303 24
  # object_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax 
  .loc 3 1304 29
  # object_value_type.1: @IR_Type = load_struct_member(object_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rax object_value_type.1:rbx 
  .loc 3 1306 9
  # $4.1: bool = call(is_389, object_value_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-24], rax
  mov [rbp-32], rbx
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__convert_member_access_expression_126__2, .LABEL__convert_member_access_expression_126__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__convert_member_access_expression_126__4
.LABEL__convert_member_access_expression_126__2:
  .loc 3 1307 13
  # $19.1: bool = call(is_389, object_value.1, IR_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:rax 
  # jump($19.1, .LABEL__convert_member_access_expression_126__10, .LABEL__convert_member_access_expression_126__12)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_member_access_expression_126__12
.LABEL__convert_member_access_expression_126__10:
  .loc 3 1308 27
  # struct_type.4: @IR_Struct_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:rax 
  .loc 3 1311 44
  # $34.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, struct_type.4)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-42], rax
  call create_ir_pointer_type_88
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $34.1:rax 
  .loc 3 1311 21
  # $35.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $34.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $35.1:rax 
  .loc 3 1312 21
  # $36.1: @IR_Variable_Value = object_value.1
  mov rbx, [rbp-24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $35.1:rax $36.1:rbx 
  .loc 3 1310 17
  # $37.1: @IR_Load_Variable_Address_Instruction = call(create_ir_load_variable_address_instruction_209, $35.1, $36.1)
  mov rdi, rax
  mov rsi, rbx
  call create_ir_load_variable_address_instruction_209
  # [discarded value]: $36.1
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $37.1:rax 
  .loc 3 1314 17
  # $38.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] $37.1:rax $38.1:r15 
  .loc 3 1309 28
  # object_value.8: @IR_Value = call(append_78, self.1, $37.1, $38.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:rax:[rbp-24] 
  # jump(.LABEL__convert_member_access_expression_126__3)
  mov [rbp-24], rax
.LABEL__convert_member_access_expression_126__3:
  # object_value.11: @IR_Value = phi(object_value.1, object_value.8, object_value.6)
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # struct_type.5: @IR_Struct_Type = phi(struct_type.2, struct_type.4, struct_type.3)
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1334 53
  # $40.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] $40.1:rbx struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1334 53
  # $41.1: @String = load_struct_member($40.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] $41.1:r15 struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1334 30
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.5, $41.1)
  mov rdi, [rbp-42]
  mov rsi, r15
  call get_member_150
  # [discarded value]: $41.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1335 9
  # $43.1: bool = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax $43.1:rbx struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # jump($43.1, .LABEL__convert_member_access_expression_126__16, .LABEL__convert_member_access_expression_126__17)
  test bl, bl
  mov [rbp-50], rax
  mov [rbp-51], bl
  jz .LABEL__convert_member_access_expression_126__17
.LABEL__convert_member_access_expression_126__16:
  .loc 3 1336 9
  # call(dump_struct_members_127, struct_type.5)
  mov rdi, [rbp-42]
  call dump_struct_members_127
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  .loc 3 1337 15
  # $44.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $44.1:rbx 
  .loc 3 1337 15
  # $45.1: @Source_Location = load_struct_member($44.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $44.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:r15 
  .loc 3 1337 68
  # $46.1: @String = load_struct_member(struct_type.5, name)
  mov rbx, [rbp-42]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:rbx:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:r15 $46.1:r14 
  .loc 3 1337 62
  # $47.1: @String = call(clone_391, $46.1)
  mov rdi, r14
  mov [rbp-59], r15
  call clone_391
  # [discarded value]: $46.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $47.1:rax 
  .loc 3 1337 62
  # $48.1: @String = call(append_400, $47.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # " has no such member: "
  call append_400
  # [discarded value]: $47.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax 
  .loc 3 1337 125
  # $49.1: @Identifier_Token = load_struct_member(member_access_expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax $49.1:r15 
  .loc 3 1337 125
  # $50.1: @String = load_struct_member($49.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $49.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $48.1:rax $50.1:r14 
  .loc 3 1337 62
  # $51.1: @String = call(append_400, $48.1, $50.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $50.1
  # [discarded value]: $48.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $45.1:[rbp-59] $51.1:rax 
  .loc 3 1337 9
  # call(abort_360, $45.1, $51.1)
  mov rdi, [rbp-59]
  mov rsi, rax
  call abort_360
  # [discarded value]: $51.1
  # [discarded value]: $45.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
.LABEL__convert_member_access_expression_126__17:
  .loc 3 1339 9
  # $52.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $52.1:rbx 
  .loc 3 1339 9
  # $53.1: bool = call(is_389, $52.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $52.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:rax 
  # jump($53.1, .LABEL__convert_member_access_expression_126__18, .LABEL__convert_member_access_expression_126__19)
  test al, al
  mov [rbp-52], al
  jz .LABEL__convert_member_access_expression_126__19
.LABEL__convert_member_access_expression_126__18:
  .loc 3 1340 120
  # $54.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $54.1:rbx 
  .loc 3 1340 92
  # $55.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, $54.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_ir_pointer_type_88
  # [discarded value]: $54.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $55.1:rax 
  .loc 3 1340 69
  # $56.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $55.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $55.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $56.1:rax 
  .loc 3 1340 28
  # $57.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $56.1, object_value.11, struct_type_member.1, true)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-50]
  mov cl, 1
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $56.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $57.1:rax 
  .loc 3 1340 188
  # $58.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $57.1:rax $58.1:r15 
  .loc 3 1340 16
  # $59.1: @IR_Variable_Value = call(append_78, self.1, $57.1, $58.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $58.1
  # [discarded value]: $57.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $59.1:rax 
  .loc 3 1340 9
  # return($59.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_member_access_expression_126__end
  # [discarded value]: $59.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] 
.LABEL__convert_member_access_expression_126__19:
  .loc 3 1342 88
  # $60.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:rax:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $60.1:rbx 
  .loc 3 1342 65
  # $61.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $60.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $60.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $61.1:rax 
  .loc 3 1342 24
  # $62.1: @IR_Load_Struct_Member_Instruction = call(create_ir_load_struct_member_instruction_206, $61.1, object_value.11, struct_type_member.1, false)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-50]
  mov cl, 0
  call create_ir_load_struct_member_instruction_206
  # [discarded value]: $61.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $62.1:rax 
  .loc 3 1342 156
  # $63.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rbx:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $62.1:rax $63.1:r15 
  .loc 3 1342 12
  # $64.1: @IR_Variable_Value = call(append_78, self.1, $62.1, $63.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $63.1
  # [discarded value]: $62.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] $64.1:rax 
  .loc 3 1342 5
  # return($64.1)
  mov [rbp-60], rax
  jmp .LABEL__convert_member_access_expression_126__end
  # [discarded value]: $64.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] $53.1:[rbp-52] 
  # [discarded value]: $53.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] $43.1:[rbp-51] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: $43.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] object_value.11:[rbp-24] struct_type.5:[rbp-42] struct_type_member.1:[rbp-50] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: struct_type_member.1
  # [discarded value]: struct_type.5
  # [discarded value]: object_value.11
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] struct_type.4:[rbp-42] object_value.8:[rbp-24] 
  # [discarded value]: object_value.8
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] 
.LABEL__convert_member_access_expression_126__12:
  .loc 3 1316 20
  # $20.1: bool = call(is_389, object_value.1, IR_Global_Variable_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:rax 
  # jump($20.1, .LABEL__convert_member_access_expression_126__13, .LABEL__convert_member_access_expression_126__15)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_member_access_expression_126__15
.LABEL__convert_member_access_expression_126__13:
  .loc 3 1317 27
  # struct_type.3: @IR_Struct_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:rax:[rbp-42] 
  .loc 3 1319 24
  # $27.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, struct_type.3)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov [rbp-42], rax
  call create_ir_pointer_type_88
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax 
  .loc 3 1320 29
  # $28.1: @IR_Global_Variable_Value = object_value.1
  mov rbx, [rbp-24]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax $28.1:rbx 
  .loc 3 1320 28
  # $29.1: @IR_Variable = load_struct_member($28.1, variable)
  mov r15, [rbx+48]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:rax $29.1:r15 
  .loc 5 156 31
  # $30.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-51], rax
  mov [rbp-59], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:[rbp-51] $29.1:[rbp-59] $30.1:rax 
  .loc 5 157 19
  # $31.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-67], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] $27.1:[rbp-51] $29.1:[rbp-59] $30.1:[rbp-67] $31.1:rax 
  .loc 3 1318 28
  # object_value.6: @IR_Value = new IR_Global_Variable_Address_Value(object_type = IR_Global_Variable_Address_Value, type = $27.1, variable = $29.1, dump = anonymous_function_6_161.address, creator_instruction = null, user_instructions = $30.1, links = $31.1)
  mov [rbp-75], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Address_Value
  mov rbx, IR_Global_Variable_Address_Value[rip]
  mov [rax], rbx
  #     .type = $27.1
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $30.1
  mov r15, [rbp-67]
  mov QWORD PTR [rax+24], r15
  #     .links = $31.1
  mov r14, [rbp-75]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_6_161.address
  lea r13, anonymous_function_6_161[rip]
  mov [rax+40], r13
  #     .variable = $29.1
  mov r13, [rbp-59]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $31.1
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] object_value.6:rax:[rbp-24] 
  # jump(.LABEL__convert_member_access_expression_126__3)
  mov [rbp-24], rax
  jmp .LABEL__convert_member_access_expression_126__3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] struct_type.3:[rbp-42] object_value.6:[rbp-24] 
  # [discarded value]: object_value.6
  # [discarded value]: struct_type.3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] 
.LABEL__convert_member_access_expression_126__15:
  .loc 3 1323 19
  # $21.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:rbx 
  .loc 3 1323 54
  # $22.1: @String = call(clone_391, "Unuspported value type: ")
  lea rdi, .LABEL__string_241[rip] # "Unuspported value type: "
  mov [rbp-51], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax 
  .loc 3 1323 95
  # $23.1: @Object_Type = load_struct_member(object_value.1, object_type)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rbx:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax $23.1:r15 
  .loc 3 1323 95
  # $24.1: @String = load_struct_member_address($23.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:rbx:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $22.1:rax $23.1:r15 $24.1:r14 
  .loc 3 1323 54
  # $25.1: @String = call(append_400, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $24.1
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] $21.1:[rbp-51] $25.1:rax 
  .loc 3 1323 13
  # call(abort_360, $21.1, $25.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_360
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] $20.1:[rbp-43] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $19.1:[rbp-34] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_member_access_expression_126__4:
  .loc 3 1325 16
  # $5.1: bool = call(is_389, object_value_type.1, IR_Pointer_Type)
  mov rdi, [rbp-32]
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:rax 
  # jump($5.1, .LABEL__convert_member_access_expression_126__5, .LABEL__convert_member_access_expression_126__7)
  test al, al
  mov [rbp-43], al
  jz .LABEL__convert_member_access_expression_126__7
.LABEL__convert_member_access_expression_126__5:
  .loc 3 1326 29
  # $10.1: @IR_Pointer_Type = object_value_type.1
  mov rax, [rbp-32]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $10.1:rax 
  .loc 3 1326 28
  # pointed_type.1: @IR_Type = load_struct_member($10.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:rbx 
  .loc 3 1327 13
  # $12.1: bool = call(is_389, pointed_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-51], rbx
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $12.1:rax 
  .loc 3 1327 13
  # $13.1: bool = $12.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:rbx 
  # jump($13.1, .LABEL__convert_member_access_expression_126__8, .LABEL__convert_member_access_expression_126__9)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__convert_member_access_expression_126__9
.LABEL__convert_member_access_expression_126__8:
  .loc 3 1328 19
  # $14.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:rbx 
  .loc 3 1328 54
  # $15.1: @String = call(clone_391, "Not a IR_Struct_Type pointer value: ")
  lea rdi, .LABEL__string_242[rip] # "Not a IR_Struct_Type pointer value: "
  mov [rbp-60], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $15.1:rax 
  .loc 3 1328 107
  # $16.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $15.1:rax $16.1:r15 
  .loc 3 1328 54
  # $17.1: @String = call(append_400, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] $14.1:[rbp-60] $17.1:rax 
  .loc 3 1328 13
  # call(abort_360, $14.1, $17.1)
  mov rdi, [rbp-60]
  mov rsi, rax
  call abort_360
  # [discarded value]: $17.1
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] 
.LABEL__convert_member_access_expression_126__9:
  .loc 3 1330 23
  # struct_type.2: @IR_Struct_Type = pointed_type.1
  mov rax, [rbp-51]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] struct_type.2:rax:[rbp-42] 
  # jump(.LABEL__convert_member_access_expression_126__3)
  mov [rbp-42], rax
  jmp .LABEL__convert_member_access_expression_126__3
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] struct_type.2:[rbp-42] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] $13.1:[rbp-52] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] pointed_type.1:[rbp-51] 
  # [discarded value]: pointed_type.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] 
.LABEL__convert_member_access_expression_126__7:
  .loc 3 1332 15
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:rbx 
  .loc 3 1332 50
  # $7.1: @String = call(clone_391, "Not an IR_Pointer_Type value: ")
  lea rdi, .LABEL__string_243[rip] # "Not an IR_Pointer_Type value: "
  mov [rbp-51], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $7.1:rax 
  .loc 3 1332 97
  # $8.1: @String = load_struct_member(object_value_type.1, name)
  mov rbx, [rbp-32]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:rbx:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $7.1:rax $8.1:r15 
  .loc 3 1332 50
  # $9.1: @String = call(append_400, $7.1, $8.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] $6.1:[rbp-51] $9.1:rax 
  .loc 3 1332 9
  # call(abort_360, $6.1, $9.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_360
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] $5.1:[rbp-43] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] object_value.1:[rbp-24] object_value_type.1:[rbp-32] 
  # [discarded value]: object_value_type.1
  # [discarded value]: object_value.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_126__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_126__stack_frame_size: .word 80

  .loc 3 1345 8
  .text
dump_struct_members_127:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_struct_members_127__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_struct_members_127__1:
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: struct_type.1:rdi 
  .loc 3 1346 5
  # $1.1: @FILE = call(end_line_386, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] 
  # jump(.LABEL__dump_struct_members_127__2)
.LABEL__dump_struct_members_127__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.6)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 3 1347 12
  # $2.1: bool = struct_type.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__dump_struct_members_127__3, .LABEL__dump_struct_members_127__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__dump_struct_members_127__4
.LABEL__dump_struct_members_127__3:
  .loc 3 1348 40
  # $3.1: @AST_Struct_Statement = load_struct_member(struct_type.2, statement)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $3.1:rbx 
  .loc 3 1348 40
  # $4.1: @List = load_struct_member($3.1, members)
  mov r15, [rbx+40]
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] $4.1:r15 
  .loc 3 1348 40
  # struct_type_members_item.1: @List_Item = load_struct_member($4.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:rbx 
  # jump(.LABEL__dump_struct_members_127__5)
  mov [rbp-17], rbx
.LABEL__dump_struct_members_127__5:
  # struct_type_members_item.2: @List_Item = phi(struct_type_members_item.1, struct_type_members_item.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  .loc 3 1349 16
  # $6.1: bool = struct_type_members_item.2 != null
  cmp QWORD PTR [rbp-17], 0
  setne al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:rax 
  # jump($6.1, .LABEL__dump_struct_members_127__6, .LABEL__dump_struct_members_127__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__dump_struct_members_127__7
.LABEL__dump_struct_members_127__6:
  .loc 3 1350 38
  # struct_type_member.1: @AST_Struct_Member = load_struct_member(struct_type_members_item.2, data)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx 
  .loc 3 1351 43
  # $9.1: @Identifier_Token = load_struct_member(struct_type_member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx $9.1:r15 
  .loc 3 1351 43
  # struct_type_member_name.1: @String = load_struct_member($9.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:rax:[rbp-17] $6.1:[rbp-18] struct_type_member.1:rbx struct_type_member_name.1:r14 
  .loc 3 1352 43
  # $11.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.2, struct_type_member_name.1)
  mov rdi, [rbp-8]
  mov rsi, r14
  mov [rbp-26], rbx
  mov [rbp-34], r14
  call get_member_150
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] $11.1:rax 
  .loc 3 1352 43
  # struct_type_member_type.1: @IR_Type = load_struct_member($11.1, type)
  mov rbx, [rax+16]
  # [discarded value]: $11.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member.1:[rbp-26] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx 
  .loc 3 1353 26
  # $13.1: @Source_Location = load_struct_member(struct_type_member.1, location)
  mov rax, [rbp-26]
  mov r15, [rax]
  # [discarded value]: struct_type_member.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:rbx $13.1:r15 
  .loc 3 1353 13
  # $14.1: @FILE = call(write_363, stderr, $13.1)
  mov rdi, stderr[rip]
  mov rsi, r15
  mov [rbp-42], rbx
  call write_363
  # [discarded value]: $13.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $14.1:rax 
  .loc 3 1353 13
  # $15.1: @FILE = call(write_383, $14.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $14.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax 
  .loc 3 1353 73
  # $16.1: @String = load_struct_member(struct_type.2, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rbx:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $15.1:rax $16.1:r15 
  .loc 3 1353 13
  # $17.1: @FILE = call(write_383, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $17.1:rax 
  .loc 3 1353 13
  # $18.1: @FILE = call(write_385, $17.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $17.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_name.1:[rbp-34] struct_type_member_type.1:[rbp-42] $18.1:rax 
  .loc 3 1353 13
  # $19.1: @FILE = call(write_383, $18.1, struct_type_member_name.1)
  mov rdi, rax
  mov rsi, [rbp-34]
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: struct_type_member_name.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $19.1:rax 
  .loc 3 1353 13
  # $20.1: @FILE = call(write_383, $19.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $19.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_member_type.1:[rbp-42] $20.1:rax 
  .loc 3 1353 151
  # $21.1: @String = load_struct_member(struct_type_member_type.1, name)
  mov rbx, [rbp-42]
  mov r15, [rbx+8]
  # [discarded value]: struct_type_member_type.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $20.1:rax $21.1:r15 
  .loc 3 1353 13
  # $22.1: @FILE = call(write_383, $20.1, $21.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] $22.1:rax 
  .loc 3 1353 13
  # $23.1: @FILE = call(end_line_386, $22.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  .loc 3 1354 40
  # struct_type_members_item.4: @List_Item = load_struct_member(struct_type_members_item.2, next_item)
  mov rax, [rbp-17]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:rbx:[rbp-17] 
  # jump(.LABEL__dump_struct_members_127__5)
  mov [rbp-17], rbx
  jmp .LABEL__dump_struct_members_127__5
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type_members_item.4:[rbp-17] 
  # [discarded value]: struct_type_members_item.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
.LABEL__dump_struct_members_127__7:
  .loc 3 1356 23
  # struct_type.6: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:rbx:[rbp-8] 
  # jump(.LABEL__dump_struct_members_127__2)
  mov [rbp-8], rbx
  jmp .LABEL__dump_struct_members_127__2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] struct_type.6:[rbp-8] 
  # [discarded value]: struct_type.6
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] struct_type_members_item.2:[rbp-17] 
  # [discarded value]: struct_type_members_item.2
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type_members_item.1:[rbp-17] 
  # [discarded value]: struct_type_members_item.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__dump_struct_members_127__4:
  # return()
  jmp .LABEL__dump_struct_members_127__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__dump_struct_members_127__end:
  mov rsp, rbp
  pop rbp
  ret

dump_struct_members_127__stack_frame_size: .word 48

  .loc 3 1360 8
  .text
convert_member_access_expression_address_128:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_member_access_expression_address_128__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_member_access_expression_address_128__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # member_access_expression.1: @AST_Member_Access_Expression = load_variable(member_access_expression)
  # [live values]: self.1:rdi member_access_expression.1:rsi 
  .loc 3 1361 23
  # result_type.1: @IR_Type = call(deduce_expression_type_140, self.1, member_access_expression.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call deduce_expression_type_140
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:rax 
  .loc 3 1362 9
  # $2.1: bool = call(is_389, result_type.1, IR_Pointer_Type)
  mov rdi, rax
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:rax 
  # jump($2.1, .LABEL__convert_member_access_expression_address_128__2, .LABEL__convert_member_access_expression_address_128__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_member_access_expression_address_128__3
.LABEL__convert_member_access_expression_address_128__2:
  .loc 3 1363 16
  # $3.1: @IR_Value = call(convert_member_access_expression_126, self.1, member_access_expression.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_126
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  .loc 3 1363 9
  # return($3.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_member_access_expression_address_128__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__convert_member_access_expression_address_128__3:
  .loc 3 1365 9
  # $4.1: bool = call(is_389, result_type.1, IR_Unchecked_Array_Type)
  mov rdi, [rbp-24]
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:rax 
  # jump($4.1, .LABEL__convert_member_access_expression_address_128__5, .LABEL__convert_member_access_expression_address_128__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_member_access_expression_address_128__6
.LABEL__convert_member_access_expression_address_128__5:
  .loc 3 1366 16
  # $5.1: @IR_Value = call(convert_member_access_expression_126, self.1, member_access_expression.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call convert_member_access_expression_126
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 3 1366 9
  # return($5.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_member_access_expression_address_128__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__convert_member_access_expression_address_128__6:
  .loc 3 1368 11
  # $6.1: @Source_Location = load_struct_member(member_access_expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:[rbp-26] $6.1:rbx 
  .loc 3 1368 46
  # $7.1: @Object_Type = load_struct_member(result_type.1, object_type)
  mov r15, [rbp-24]
  mov r14, [r15]
  # [live values]: self.1:[rbp-16] member_access_expression.1:rax:[rbp-8] result_type.1:r15:[rbp-24] $2.1:[rbp-25] $4.1:[rbp-26] $6.1:rbx $7.1:r14 
  .loc 3 1368 5
  # call(abort_145, $6.1, $7.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] member_access_expression.1:[rbp-8] result_type.1:[rbp-24] 
  # [discarded value]: result_type.1
  # [discarded value]: member_access_expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_member_access_expression_address_128__end:
  mov rsp, rbp
  pop rbp
  ret

convert_member_access_expression_address_128__stack_frame_size: .word 48

  .loc 3 1371 8
  .text
convert_modulo_expression_129:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_modulo_expression_129__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_modulo_expression_129__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1372 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1372 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1373 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1373 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1373 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_modulo_expression_129__2, .LABEL__convert_modulo_expression_129__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_modulo_expression_129__3
.LABEL__convert_modulo_expression_129__2:
  .loc 3 1374 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1374 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1374 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_modulo_expression_129__3:
  .loc 3 1376 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1376 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1376 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1377 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_modulo_expression_129__4, .LABEL__convert_modulo_expression_129__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_modulo_expression_129__5
.LABEL__convert_modulo_expression_129__4:
  .loc 3 1377 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_modulo_expression_129__5)
  mov [rbp-34], al
.LABEL__convert_modulo_expression_129__5:
  .loc 3 1377 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_modulo_expression_129__6, .LABEL__convert_modulo_expression_129__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_modulo_expression_129__7
.LABEL__convert_modulo_expression_129__6:
  .loc 3 1378 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1378 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_modulo_expression_129__7:
  .loc 3 1380 88
  # $15.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rbx 
  .loc 3 1380 65
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1380 24
  # $18.1: @IR_Modulo_Instruction = new IR_Modulo_Instruction(object_type = IR_Modulo_Instruction, result_value = $16.1, dump = anonymous_function_32_241.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Modulo_Instruction
  mov rbx, IR_Modulo_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_32_241.address
  lea r14, anonymous_function_32_241[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1380 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1380 137
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1380 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1380 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_modulo_expression_129__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_modulo_expression_129__end:
  mov rsp, rbp
  pop rbp
  ret

convert_modulo_expression_129__stack_frame_size: .word 64

  .loc 3 1383 8
  .text
convert_multiply_expression_130:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_multiply_expression_130__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_multiply_expression_130__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1384 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1384 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1385 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1385 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1385 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_multiply_expression_130__2, .LABEL__convert_multiply_expression_130__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_multiply_expression_130__3
.LABEL__convert_multiply_expression_130__2:
  .loc 3 1386 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1386 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1386 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_multiply_expression_130__3:
  .loc 3 1388 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1388 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1388 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1389 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_multiply_expression_130__4, .LABEL__convert_multiply_expression_130__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_multiply_expression_130__5
.LABEL__convert_multiply_expression_130__4:
  .loc 3 1389 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_multiply_expression_130__5)
  mov [rbp-34], al
.LABEL__convert_multiply_expression_130__5:
  .loc 3 1389 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_multiply_expression_130__6, .LABEL__convert_multiply_expression_130__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_multiply_expression_130__7
.LABEL__convert_multiply_expression_130__6:
  .loc 3 1390 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1390 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_multiply_expression_130__7:
  .loc 3 1392 90
  # $15.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rbx 
  .loc 3 1392 67
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1392 24
  # $18.1: @IR_Multiply_Instruction = new IR_Multiply_Instruction(object_type = IR_Multiply_Instruction, result_value = $16.1, dump = anonymous_function_33_242.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Multiply_Instruction
  mov rbx, IR_Multiply_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_33_242.address
  lea r14, anonymous_function_33_242[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1392 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1392 139
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1392 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1392 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_multiply_expression_130__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_multiply_expression_130__end:
  mov rsp, rbp
  pop rbp
  ret

convert_multiply_expression_130__stack_frame_size: .word 64

  .loc 3 1395 8
  .text
convert_negate_expression_131:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_negate_expression_131__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_negate_expression_131__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Negate_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1396 41
  # $1.1: @AST_Expression = load_struct_member(expression.1, expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1396 17
  # value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:rax 
  .loc 3 1397 9
  # $3.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:rax $3.1:rbx 
  .loc 3 1397 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $4.1:rax 
  .loc 3 1397 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_negate_expression_131__2, .LABEL__convert_negate_expression_131__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_negate_expression_131__3
.LABEL__convert_negate_expression_131__2:
  .loc 3 1398 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1398 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1398 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_negate_expression_131__3:
  .loc 3 1401 76
  # $8.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:rax:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1401 53
  # $9.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $9.1:rax 
  .loc 5 484 37
  # $10.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-33], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $9.1:[rbp-33] $10.1:rax 
  .loc 3 1401 9
  # $11.1: @IR_Substract_Instruction = new IR_Substract_Instruction(object_type = IR_Substract_Instruction, result_value = $9.1, dump = anonymous_function_35_244.address, location = null, operand_values = $10.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-41], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Substract_Instruction
  mov rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $9.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $10.1
  mov r15, [rbp-41]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_35_244.address
  lea r14, anonymous_function_35_244[rip]
  mov [rax+57], r14
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $11.1:rax 
  .loc 3 1403 24
  # $12.1: @IR_Type = load_struct_member(value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:rbx:[rbp-24] $5.1:[rbp-25] $11.1:rax $12.1:r15 
  .loc 3 1404 69
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov r14, [rbp-8]
  mov r13, [r14+8]
  # [live values]: self.1:[rbp-16] expression.1:r14:[rbp-8] value.1:rbx:[rbp-24] $5.1:[rbp-25] $11.1:rax $12.1:r15 $13.1:r13 
  .loc 3 1404 27
  # $14.1: @Integer_Token = new Integer_Token(object_type = Integer_Token, lexeme = "", location = $13.1, value = 0, next_token = null)
  mov [rbp-33], rax
  mov [rbp-41], r13
  mov [rbp-49], r15
  mov rdi, 40
  call malloc
  #     .object_type = Integer_Token
  mov rbx, Integer_Token[rip]
  mov [rax], rbx
  #     .lexeme = ""
  lea rbx, .LABEL__string_244[rip] # ""
  mov [rax+8], rbx
  #     .location = $13.1
  mov rbx, [rbp-41]
  mov QWORD PTR [rax+16], rbx
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = 0
  mov QWORD PTR [rax+32], 0
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $11.1:[rbp-33] $12.1:[rbp-49] $14.1:rax 
  .loc 5 156 31
  # $15.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-57], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $11.1:[rbp-33] $12.1:[rbp-49] $14.1:[rbp-57] $15.1:rax 
  .loc 5 157 19
  # $16.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-65], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $11.1:[rbp-33] $12.1:[rbp-49] $14.1:[rbp-57] $15.1:[rbp-65] $16.1:rax 
  .loc 3 1402 13
  # $17.1: @IR_Constant_Value = new IR_Constant_Value(object_type = IR_Constant_Value, type = $12.1, literal = $14.1, dump = anonymous_function_3_156.address, creator_instruction = null, user_instructions = $15.1, links = $16.1)
  mov [rbp-73], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Constant_Value
  mov rbx, IR_Constant_Value[rip]
  mov [rax], rbx
  #     .type = $12.1
  mov rbx, [rbp-49]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $15.1
  mov r15, [rbp-65]
  mov QWORD PTR [rax+24], r15
  #     .links = $16.1
  mov r14, [rbp-73]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_3_156.address
  lea r13, anonymous_function_3_156[rip]
  mov [rax+40], r13
  #     .literal = $14.1
  mov r13, [rbp-57]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $11.1:[rbp-33] $17.1:rax 
  .loc 3 1401 9
  # $18.1: @IR_Binary_Instruction = call(init_231, $11.1, $17.1, value.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov rdx, [rbp-24]
  call init_231
  # [discarded value]: $17.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $18.1:rax 
  .loc 3 1408 9
  # $19.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $18.1:rax $19.1:r15 
  .loc 3 1400 12
  # $20.1: @IR_Variable_Value = call(append_78, self.1, $18.1, $19.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] $20.1:rax 
  .loc 3 1400 5
  # return($20.1)
  mov [rbp-33], rax
  jmp .LABEL__convert_negate_expression_131__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] value.1:[rbp-24] 
  # [discarded value]: value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_negate_expression_131__end:
  mov rsp, rbp
  pop rbp
  ret

convert_negate_expression_131__stack_frame_size: .word 80

  .loc 3 1412 8
  .text
convert_new_expression_132:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_new_expression_132__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_new_expression_132__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_New_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1413 9
  # $1.1: @AST_Type = load_struct_member(expression.1, type)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1413 9
  # $2.1: bool = call(is_389, $1.1, AST_Named_Type)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, AST_Named_Type[rip]
  call is_389
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  .loc 3 1413 9
  # $3.1: bool = $2.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rbx 
  # jump($3.1, .LABEL__convert_new_expression_132__2, .LABEL__convert_new_expression_132__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__convert_new_expression_132__3
.LABEL__convert_new_expression_132__2:
  .loc 3 1414 15
  # $4.1: @AST_Type = load_struct_member(expression.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 3 1414 15
  # $5.1: @Source_Location = load_struct_member($4.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $5.1:r15 
  .loc 3 1414 9
  # call(abort_360, $5.1, "Unuspported type")
  mov rdi, r15
  lea rsi, .LABEL__string_245[rip] # "Unuspported type"
  call abort_360
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__convert_new_expression_132__3:
  .loc 3 1416 22
  # $7.1: @AST_Named_Type = load_struct_member(expression.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $7.1:rbx 
  .loc 3 1416 21
  # $8.1: @Identifier_Token = load_struct_member($7.1, name)
  mov r15, [rbx+16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $8.1:r15 
  .loc 3 1416 21
  # type_name.1: @String = load_struct_member($8.1, lexeme)
  mov rbx, [r15+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] type_name.1:rbx 
  .loc 3 1417 28
  # struct_statement.1: @AST_Struct_Statement = call(get_struct_statement_67, self.1, type_name.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-25], rbx
  call get_struct_statement_67
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:rax 
  .loc 3 1418 9
  # $11.1: bool = struct_statement.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:rax $11.1:rbx 
  # jump($11.1, .LABEL__convert_new_expression_132__4, .LABEL__convert_new_expression_132__5)
  test bl, bl
  mov [rbp-33], rax
  mov [rbp-34], bl
  jz .LABEL__convert_new_expression_132__5
.LABEL__convert_new_expression_132__4:
  .loc 3 1419 15
  # $12.1: @AST_Type = load_struct_member(expression.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $12.1:rbx 
  .loc 3 1419 15
  # $13.1: @Source_Location = load_struct_member($12.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $13.1:r15 
  .loc 3 1419 41
  # $14.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  mov [rbp-42], r15
  call clone_391
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $13.1:[rbp-42] $14.1:rax 
  .loc 3 1419 41
  # $15.1: @String = call(append_400, $14.1, type_name.1)
  mov rdi, rax
  mov rsi, [rbp-25]
  call append_400
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $13.1:[rbp-42] $15.1:rax 
  .loc 3 1419 9
  # call(abort_360, $13.1, $15.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_360
  # [discarded value]: $15.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] 
.LABEL__convert_new_expression_132__5:
  .loc 3 1421 16
  # type.1: @IR_Struct_Type = call(convert_struct_statement_81, self.1, struct_statement.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  call convert_struct_statement_81
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] type.1:rax 
  .loc 3 1422 26
  # init_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: init_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] type.1:[rbp-42] 
  .loc 3 1423 22
  # init_value.1: @IR_Struct_Literal_Value = call(convert_struct_literal_expression_133, self.1, expression.1, type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-42]
  call convert_struct_literal_expression_133
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] type.1:[rbp-42] init_value.1:rax 
  .loc 3 1424 85
  # $19.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-42]
  mov [rbp-50], rax
  call create_ir_pointer_type_88
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] type.1:[rbp-42] init_value.1:[rbp-50] $19.1:rax 
  .loc 3 1424 62
  # $20.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $19.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] type.1:[rbp-42] init_value.1:[rbp-50] $20.1:rax 
  .loc 3 1424 36
  # $21.1: @IR_New_Instruction = call(create_ir_new_instruction_214, $20.1, type.1, init_value.1)
  mov rdi, rax
  mov rsi, [rbp-42]
  mov rdx, [rbp-50]
  call create_ir_new_instruction_214
  # [discarded value]: $20.1
  # [discarded value]: init_value.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $21.1:rax 
  .loc 3 1424 140
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] $21.1:rax $22.1:r15 
  .loc 3 1424 24
  # result_value.1: @IR_Variable_Value = call(append_78, self.1, $21.1, $22.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] result_value.1:rax 
  .loc 3 1425 5
  # return(result_value.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_new_expression_132__end
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] $11.1:[rbp-34] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] type_name.1:[rbp-25] struct_statement.1:[rbp-33] 
  # [discarded value]: struct_statement.1
  # [discarded value]: type_name.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_new_expression_132__end:
  mov rsp, rbp
  pop rbp
  ret

convert_new_expression_132__stack_frame_size: .word 64

  .loc 3 1428 8
  .text
convert_struct_literal_expression_133:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_literal_expression_133__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_literal_expression_133__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi expression.1:rsi struct_type.1:rdx 
  .loc 3 1430 9
  # $1.1: bool = call(is_389, expression.1, AST_Call_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Call_Expression[rip]
  mov [rbp-24], rdx
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__convert_struct_literal_expression_133__2, .LABEL__convert_struct_literal_expression_133__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__convert_struct_literal_expression_133__4
.LABEL__convert_struct_literal_expression_133__2:
  .loc 3 1431 27
  # $10.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $10.1:rax 
  .loc 3 1431 26
  # call_arguments.3: @List = load_struct_member($10.1, arguments)
  mov rbx, [rax+32]
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:rbx 
  # jump(.LABEL__convert_struct_literal_expression_133__3)
  mov [rbp-33], rbx
.LABEL__convert_struct_literal_expression_133__3:
  # call_arguments.5: @List = phi(call_arguments.3, call_arguments.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] 
  .loc 3 1437 91
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:rbx 
  .loc 5 156 31
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-41], rbx
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:[rbp-41] $13.1:rax 
  .loc 5 157 19
  # $14.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-49], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] $12.1:[rbp-41] $13.1:[rbp-49] $14.1:rax 
  .loc 3 1437 32
  # struct_literal_value.1: @IR_Struct_Literal_Value = new IR_Struct_Literal_Value(object_type = IR_Struct_Literal_Value, type = struct_type.1, location = $12.1, dump = anonymous_function_4_157.address, creator_instruction = null, user_instructions = $13.1, links = $14.1)
  mov [rbp-57], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Struct_Literal_Value
  mov rbx, IR_Struct_Literal_Value[rip]
  mov [rax], rbx
  #     .type = struct_type.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $13.1
  mov r15, [rbp-49]
  mov QWORD PTR [rax+24], r15
  #     .links = $14.1
  mov r14, [rbp-57]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_4_157.address
  lea r13, anonymous_function_4_157[rip]
  mov [rax+40], r13
  #     .location = $12.1
  mov r13, [rbp-41]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:rbx:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:rax 
  .loc 3 1438 9
  # $16.1: bool = call(is_object_type_152, struct_type.1)
  mov rdi, rbx
  mov [rbp-41], rax
  call is_object_type_152
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:rax 
  # jump($16.1, .LABEL__convert_struct_literal_expression_133__8, .LABEL__convert_struct_literal_expression_133__9)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_struct_literal_expression_133__9
.LABEL__convert_struct_literal_expression_133__8:
  .loc 3 1439 42
  # $17.1: @String = load_struct_member(struct_type.1, name)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:rax:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] $17.1:rbx 
  .loc 3 1439 24
  # variable.1: @IR_Variable = call(get_variable_69, self.1, $17.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call get_variable_69
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:rax 
  .loc 3 1440 34
  # object_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, "object_type")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_246[rip] # "object_type"
  mov [rbp-50], rax
  call get_member_150
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:rax 
  .loc 3 1441 103
  # $20.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-50]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:rbx:[rbp-50] object_type_member.1:rax $20.1:r15 
  .loc 5 156 31
  # $21.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-58], rax
  mov [rbp-66], r15
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:[rbp-58] $20.1:[rbp-66] $21.1:rax 
  .loc 5 157 19
  # $22.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-74], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] variable.1:[rbp-50] object_type_member.1:[rbp-58] $20.1:[rbp-66] $21.1:[rbp-74] $22.1:rax 
  .loc 3 1441 67
  # $23.1: @IR_Global_Variable_Value = new IR_Global_Variable_Value(object_type = IR_Global_Variable_Value, type = $20.1, variable = variable.1, dump = anonymous_function_5_160.address, creator_instruction = null, user_instructions = $21.1, links = $22.1)
  mov [rbp-82], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Value
  mov rbx, IR_Global_Variable_Value[rip]
  mov [rax], rbx
  #     .type = $20.1
  mov rbx, [rbp-66]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $21.1
  mov r15, [rbp-74]
  mov QWORD PTR [rax+24], r15
  #     .links = $22.1
  mov r14, [rbp-82]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_5_160.address
  lea r13, anonymous_function_5_160[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-50]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: variable.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] object_type_member.1:[rbp-58] $23.1:rax 
  .loc 3 1441 9
  # call(set_member_value_159, struct_literal_value.1, object_type_member.1, $23.1)
  mov rdi, [rbp-41]
  mov rsi, [rbp-58]
  mov rdx, rax
  call set_member_value_159
  # [discarded value]: $23.1
  # [discarded value]: object_type_member.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # jump(.LABEL__convert_struct_literal_expression_133__9)
.LABEL__convert_struct_literal_expression_133__9:
  .loc 3 1443 5
  # call(convert_struct_literal_value_134, self.1, struct_literal_value.1, call_arguments.5, struct_type.1, struct_type.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-41]
  mov rdx, [rbp-33]
  mov rcx, [rbp-24]
  mov r8, [rbp-24]
  call convert_struct_literal_value_134
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  .loc 3 1444 5
  # return(struct_literal_value.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_struct_literal_expression_133__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] $16.1:[rbp-42] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] call_arguments.5:[rbp-33] struct_literal_value.1:[rbp-41] 
  # [discarded value]: struct_literal_value.1
  # [discarded value]: call_arguments.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] call_arguments.3:[rbp-33] 
  # [discarded value]: call_arguments.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__convert_struct_literal_expression_133__4:
  .loc 3 1432 16
  # $2.1: bool = call(is_389, expression.1, AST_New_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_New_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:rax 
  # jump($2.1, .LABEL__convert_struct_literal_expression_133__5, .LABEL__convert_struct_literal_expression_133__7)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_struct_literal_expression_133__7
.LABEL__convert_struct_literal_expression_133__5:
  .loc 3 1433 27
  # $8.1: @AST_New_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $8.1:rax 
  .loc 3 1433 26
  # call_arguments.2: @List = load_struct_member($8.1, init_arguments)
  mov rbx, [rax+32]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] call_arguments.2:rbx:[rbp-33] 
  # jump(.LABEL__convert_struct_literal_expression_133__3)
  mov [rbp-33], rbx
  jmp .LABEL__convert_struct_literal_expression_133__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] call_arguments.2:[rbp-33] 
  # [discarded value]: call_arguments.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
.LABEL__convert_struct_literal_expression_133__7:
  .loc 3 1435 15
  # $3.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:rbx 
  .loc 3 1435 36
  # $4.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  mov [rbp-42], rbx
  call clone_391
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax 
  .loc 3 1435 71
  # $5.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax $5.1:r15 
  .loc 3 1435 71
  # $6.1: @String = load_struct_member_address($5.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $4.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1435 36
  # $7.1: @String = call(append_400, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] $3.1:[rbp-42] $7.1:rax 
  .loc 3 1435 9
  # call(abort_360, $3.1, $7.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call abort_360
  # [discarded value]: $7.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] $2.1:[rbp-34] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] struct_type.1:[rbp-24] 
  # [discarded value]: struct_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_literal_expression_133__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_literal_expression_133__stack_frame_size: .word 96

  .loc 3 1447 8
  .text
convert_struct_literal_value_134:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_struct_literal_value_134__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_struct_literal_value_134__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_literal_value.1: @IR_Struct_Literal_Value = load_variable(struct_literal_value)
  # [live values]: self.1:rdi struct_literal_value.1:rsi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx 
  # struct_type.1: @IR_Struct_Type = load_variable(struct_type)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx struct_type.1:rcx 
  # base_type.1: @IR_Struct_Type = load_variable(base_type)
  # [live values]: self.1:rdi struct_literal_value.1:rsi call_arguments.1:rdx struct_type.1:rcx base_type.1:r8 
  .loc 3 1448 31
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rdx]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi struct_literal_value.1:rsi struct_type.1:rcx base_type.1:r8 call_arguments_item.1:rax 
  # jump(.LABEL__convert_struct_literal_value_134__2)
  mov [rbp-8], rax
  mov [rbp-16], rcx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov [rbp-40], r8
.LABEL__convert_struct_literal_value_134__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.5)
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 3 1449 12
  # $2.1: bool = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__convert_struct_literal_value_134__3, .LABEL__convert_struct_literal_value_134__4)
  test al, al
  mov [rbp-41], al
  jz .LABEL__convert_struct_literal_value_134__4
.LABEL__convert_struct_literal_value_134__3:
  .loc 3 1450 29
  # call_argument.1: @AST_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx 
  .loc 3 1451 34
  # call_argument_name.1: @Identifier_Token = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx call_argument_name.1:r15 
  .loc 3 1452 13
  # $6.1: bool = call_argument_name.1 == null
  cmp r15, 0
  sete r14b
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-41] call_argument.1:rbx call_argument_name.1:r15 $6.1:r14 
  # jump($6.1, .LABEL__convert_struct_literal_value_134__5, .LABEL__convert_struct_literal_value_134__6)
  test r14b, r14b
  mov [rbp-49], rbx
  mov [rbp-50], r14b
  mov [rbp-58], r15
  jz .LABEL__convert_struct_literal_value_134__6
.LABEL__convert_struct_literal_value_134__5:
  .loc 3 1453 19
  # $7.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] $7.1:rbx 
  .loc 3 1453 19
  # $8.1: @Source_Location = load_struct_member($7.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] $8.1:r15 
  .loc 3 1453 13
  # call(abort_360, $8.1, "Struct init argument without name")
  mov rdi, r15
  lea rsi, .LABEL__string_247[rip] # "Struct init argument without name"
  call abort_360
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] 
.LABEL__convert_struct_literal_value_134__6:
  .loc 3 1455 57
  # $9.1: @String = load_struct_member(call_argument_name.1, lexeme)
  mov rax, [rbp-58]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] $9.1:rbx 
  .loc 3 1455 34
  # struct_type_member.1: @IR_Struct_Type_Member = call(get_member_150, struct_type.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call get_member_150
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:rax 
  .loc 3 1456 13
  # $11.1: bool = struct_type_member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:rax $11.1:rbx 
  # jump($11.1, .LABEL__convert_struct_literal_value_134__7, .LABEL__convert_struct_literal_value_134__8)
  test bl, bl
  mov [rbp-66], rax
  mov [rbp-67], bl
  jz .LABEL__convert_struct_literal_value_134__8
.LABEL__convert_struct_literal_value_134__7:
  .loc 3 1457 19
  # $12.1: @Source_Location = load_struct_member(call_argument_name.1, location)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:rbx 
  .loc 3 1457 54
  # $13.1: @String = load_struct_member(struct_type.1, name)
  mov r15, [rbp-16]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:r15:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rax:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:rbx $13.1:r14 
  .loc 3 1457 48
  # $14.1: @String = call(clone_391, $13.1)
  mov rdi, r14
  mov [rbp-75], rbx
  call clone_391
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $14.1:rax 
  .loc 3 1457 48
  # $15.1: @String = call(append_400, $14.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # " has no such member: "
  call append_400
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $15.1:rax 
  .loc 3 1457 111
  # $16.1: @String = load_struct_member(call_argument_name.1, lexeme)
  mov rbx, [rbp-58]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:rbx:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $15.1:rax $16.1:r15 
  .loc 3 1457 48
  # $17.1: @String = call(append_400, $15.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $12.1:[rbp-75] $17.1:rax 
  .loc 3 1457 13
  # call(abort_360, $12.1, $17.1)
  mov rdi, [rbp-75]
  mov rsi, rax
  call abort_360
  # [discarded value]: $17.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] 
.LABEL__convert_struct_literal_value_134__8:
  .loc 3 1459 13
  # $18.1: @IR_Value = call(get_member_value_158, struct_literal_value.1, struct_type_member.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-66]
  call get_member_value_158
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $18.1:rax 
  .loc 3 1459 13
  # $19.1: bool = $18.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:rbx 
  # jump($19.1, .LABEL__convert_struct_literal_value_134__9, .LABEL__convert_struct_literal_value_134__10)
  test bl, bl
  mov [rbp-68], bl
  jz .LABEL__convert_struct_literal_value_134__10
.LABEL__convert_struct_literal_value_134__9:
  .loc 3 1460 95
  # $20.1: @AST_Expression = load_struct_member(call_argument.1, value_expression)
  mov rax, [rbp-49]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $20.1:rbx 
  .loc 3 1460 127
  # $21.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-66]
  mov r14, [r15+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:rax:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:r15:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $20.1:rbx $21.1:r14 
  .loc 3 1460 71
  # $22.1: @IR_Value = call(convert_expression_106, self.1, $20.1, $21.1)
  mov rdi, [rbp-32]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] $22.1:rax 
  .loc 3 1460 13
  # call(set_member_value_159, struct_literal_value.1, struct_type_member.1, $22.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-66]
  mov rdx, rax
  call set_member_value_159
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # jump(.LABEL__convert_struct_literal_value_134__10)
.LABEL__convert_struct_literal_value_134__10:
  .loc 3 1462 31
  # call_arguments_item.5: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] call_arguments_item.5:rbx:[rbp-8] 
  # jump(.LABEL__convert_struct_literal_value_134__2)
  mov [rbp-8], rbx
  jmp .LABEL__convert_struct_literal_value_134__2
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] call_arguments_item.5:[rbp-8] 
  # [discarded value]: call_arguments_item.5
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] $19.1:[rbp-68] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] $11.1:[rbp-67] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] struct_type_member.1:[rbp-66] 
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] $6.1:[rbp-50] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] call_argument.1:[rbp-49] call_argument_name.1:[rbp-58] 
  # [discarded value]: call_argument_name.1
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
.LABEL__convert_struct_literal_value_134__4:
  .loc 3 1464 9
  # $24.1: bool = base_type.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:rax 
  # jump($24.1, .LABEL__convert_struct_literal_value_134__11, .LABEL__convert_struct_literal_value_134__12)
  test al, al
  mov [rbp-42], al
  jz .LABEL__convert_struct_literal_value_134__12
.LABEL__convert_struct_literal_value_134__11:
  .loc 3 1465 65
  # $25.1: @AST_Struct_Statement = load_struct_member(base_type.1, statement)
  mov rax, [rbp-40]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $25.1:rbx 
  .loc 3 1465 65
  # $26.1: @List = load_struct_member($25.1, init_arguments)
  mov r15, [rbx+48]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $26.1:r15 
  .loc 3 1465 114
  # $27.1: @IR_Struct_Type = load_struct_member(base_type.1, base_type)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:rax:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] $26.1:r15 $27.1:rbx 
  .loc 3 1465 9
  # call(convert_struct_literal_value_134, self.1, struct_literal_value.1, $26.1, struct_type.1, $27.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-24]
  mov rdx, r15
  mov rcx, [rbp-16]
  mov r8, rbx
  call convert_struct_literal_value_134
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # jump(.LABEL__convert_struct_literal_value_134__12)
.LABEL__convert_struct_literal_value_134__12:
  # return()
  jmp .LABEL__convert_struct_literal_value_134__end
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] $24.1:[rbp-42] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-41] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] struct_literal_value.1:[rbp-24] struct_type.1:[rbp-16] base_type.1:[rbp-40] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: base_type.1
  # [discarded value]: struct_type.1
  # [discarded value]: struct_literal_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_struct_literal_value_134__end:
  mov rsp, rbp
  pop rbp
  ret

convert_struct_literal_value_134__stack_frame_size: .word 80

  .loc 3 1469 8
  .text
get_named_argument_135:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_named_argument_135__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_named_argument_135__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: list.1:rdi name.1:rsi 
  .loc 3 1470 21
  # list_item.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: name.1:rsi list_item.1:rax 
  # jump(.LABEL__get_named_argument_135__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_named_argument_135__2:
  # list_item.2: @List_Item = phi(list_item.1, list_item.5)
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  .loc 3 1471 12
  # $2.1: bool = list_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_named_argument_135__3, .LABEL__get_named_argument_135__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_named_argument_135__4
.LABEL__get_named_argument_135__3:
  .loc 3 1472 29
  # call_argument.1: @IR_Call_Argument = load_struct_member(list_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 3 1473 25
  # $5.1: @String = load_struct_member(call_argument.1, name)
  mov r15, [rbx]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r15 
  .loc 3 1473 13
  # $6.1: bool = call(equals_392, name.1, $5.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-25], rbx
  call equals_392
  # [discarded value]: $5.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  # jump($6.1, .LABEL__get_named_argument_135__5, .LABEL__get_named_argument_135__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_named_argument_135__6
.LABEL__get_named_argument_135__5:
  .loc 3 1474 13
  # return(call_argument.1)
  mov rax, [rbp-25]
  jmp .LABEL__get_named_argument_135__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
.LABEL__get_named_argument_135__6:
  .loc 3 1476 21
  # list_item.5: @List_Item = load_struct_member(list_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_named_argument_135__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_named_argument_135__2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] list_item.5:[rbp-8] 
  # [discarded value]: list_item.5
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] 
  # [discarded value]: call_argument.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_named_argument_135__4:
  .loc 3 1478 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_named_argument_135__end
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] list_item.2:[rbp-8] 
  # [discarded value]: list_item.2
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [live values]: name.1:[rbp-16] list_item.1:[rbp-8] 
  # [discarded value]: list_item.1
  # [discarded value]: name.1
  # [live values]: 
.LABEL__get_named_argument_135__end:
  mov rsp, rbp
  pop rbp
  ret

get_named_argument_135__stack_frame_size: .word 32

  .loc 3 1481 8
  .text
convert_not_equals_expression_136:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_not_equals_expression_136__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_not_equals_expression_136__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1482 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1482 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1483 47
  # $3.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:rax $3.1:r15 
  .loc 3 1483 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $3.1, null)
  mov rdi, [rbp-16]
  mov rsi, r15
  xor rdx, rdx
  mov [rbp-24], rax
  call convert_expression_106
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax 
  .loc 3 1484 9
  # $5.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 
  .loc 3 1484 28
  # $6.1: @IR_Type = load_struct_member(right_value.1, type)
  mov r14, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $5.1:r15 $6.1:r14 
  .loc 3 1484 9
  # $7.1: bool = $5.1 != $6.1
  cmp r15, r14
  setne r13b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $7.1:r13 
  .loc 3 1484 9
  # $8.1: bool = $7.1
  mov [rbp-25], r13b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rbx:[rbp-24] right_value.1:rax $8.1:r13 
  # jump($8.1, .LABEL__convert_not_equals_expression_136__2, .LABEL__convert_not_equals_expression_136__3)
  test r13b, r13b
  mov [rbp-32], rax
  mov [rbp-33], r13b
  jz .LABEL__convert_not_equals_expression_136__3
.LABEL__convert_not_equals_expression_136__2:
  .loc 3 1484 49
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $9.1:rbx 
  .loc 3 1484 49
  # $10.1: bool = call(is_389, $9.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $10.1:rax 
  .loc 3 1484 49
  # $11.1: bool = $10.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $11.1:rbx 
  .loc 3 1484 49
  # $12.1: bool = $11.1
  mov [rbp-34], bl
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:rbx 
  # jump($12.1, .LABEL__convert_not_equals_expression_136__5, .LABEL__convert_not_equals_expression_136__4)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__convert_not_equals_expression_136__4
.LABEL__convert_not_equals_expression_136__5:
  .loc 3 1484 49
  # $8.2: bool = phi($12.1, $12.2)
  mov al, [rbp-34]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:rax:[rbp-33] 
  # jump(.LABEL__convert_not_equals_expression_136__3)
  mov [rbp-33], al
.LABEL__convert_not_equals_expression_136__3:
  .loc 3 1484 9
  # $8.3: bool = phi($8.1, $8.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # jump($8.3, .LABEL__convert_not_equals_expression_136__6, .LABEL__convert_not_equals_expression_136__7)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__convert_not_equals_expression_136__7
.LABEL__convert_not_equals_expression_136__6:
  .loc 3 1485 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $16.1:rbx 
  .loc 3 1485 9
  # call(abort_360, $16.1, "Operands are not the same type")
  mov rdi, rbx
  lea rsi, .LABEL__string_238[rip] # "Operands are not the same type"
  call abort_360
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
.LABEL__convert_not_equals_expression_136__7:
  .loc 3 1487 9
  # $18.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:rax 
  # jump($18.1, .LABEL__convert_not_equals_expression_136__8, .LABEL__convert_not_equals_expression_136__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__convert_not_equals_expression_136__9
.LABEL__convert_not_equals_expression_136__8:
  .loc 3 1487 45
  # $18.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-32]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:rax:[rbp-35] 
  # jump(.LABEL__convert_not_equals_expression_136__9)
  mov [rbp-35], al
.LABEL__convert_not_equals_expression_136__9:
  .loc 3 1487 9
  # $18.3: bool = phi($18.1, $18.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # jump($18.3, .LABEL__convert_not_equals_expression_136__10, .LABEL__convert_not_equals_expression_136__11)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__convert_not_equals_expression_136__11
.LABEL__convert_not_equals_expression_136__10:
  .loc 3 1488 15
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $20.1:rbx 
  .loc 3 1488 9
  # call(abort_360, $20.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
.LABEL__convert_not_equals_expression_136__11:
  .loc 3 1490 102
  # $21.1: @IR_Type = call(get_named_type_66, self.1, "bool")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_183[rip] # "bool"
  call get_named_type_66
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $21.1:rax 
  .loc 3 1490 79
  # $22.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $21.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call create_temp_value_77
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:rax 
  .loc 5 484 37
  # $23.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-43], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $22.1:[rbp-43] $23.1:rax 
  .loc 3 1490 24
  # $24.1: @IR_Not_Equal_Comparison_Instruction = new IR_Not_Equal_Comparison_Instruction(object_type = IR_Not_Equal_Comparison_Instruction, result_value = $22.1, dump = anonymous_function_34_243.address, location = null, operand_values = $23.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-51], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Not_Equal_Comparison_Instruction
  mov rbx, IR_Not_Equal_Comparison_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $22.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $23.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_34_243.address
  lea r14, anonymous_function_34_243[rip]
  mov [rax+57], r14
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $24.1:rax 
  .loc 3 1490 24
  # $25.1: @IR_Binary_Instruction = call(init_231, $24.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-32]
  call init_231
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax 
  .loc 3 1490 163
  # $26.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $25.1:rax $26.1:r15 
  .loc 3 1490 12
  # $27.1: @IR_Variable_Value = call(append_78, self.1, $25.1, $26.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $26.1
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] $27.1:rax 
  .loc 3 1490 5
  # return($27.1)
  mov [rbp-43], rax
  jmp .LABEL__convert_not_equals_expression_136__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] $18.3:[rbp-35] 
  # [discarded value]: $18.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] $18.2:[rbp-35] 
  # [discarded value]: $18.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] $18.1:[rbp-35] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.3:[rbp-33] $8.2:[rbp-33] 
  # [discarded value]: $8.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $8.2:[rbp-33] 
  # [discarded value]: $8.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
.LABEL__convert_not_equals_expression_136__4:
  .loc 3 1484 97
  # $13.1: @IR_Type = load_struct_member(right_value.1, type)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:rax:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $13.1:rbx 
  .loc 3 1484 97
  # $14.1: bool = call(is_389, $13.1, IR_Null_Type)
  mov rdi, rbx
  mov rsi, IR_Null_Type[rip]
  call is_389
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $14.1:rax 
  .loc 3 1484 97
  # $15.1: bool = $14.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $15.1:rbx 
  .loc 3 1484 49
  # $12.2: bool = $15.1
  mov [rbp-35], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $12.2:rbx:[rbp-34] 
  # jump(.LABEL__convert_not_equals_expression_136__5)
  mov [rbp-34], bl
  jmp .LABEL__convert_not_equals_expression_136__5
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] right_value.1:[rbp-32] $8.1:[rbp-33] 
  # [discarded value]: $8.1
  # [discarded value]: right_value.1
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_not_equals_expression_136__end:
  mov rsp, rbp
  pop rbp
  ret

convert_not_equals_expression_136__stack_frame_size: .word 64

  .loc 3 1493 8
  .text
convert_substract_expression_137:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_substract_expression_137__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_substract_expression_137__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1494 46
  # $1.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1494 22
  # left_value.1: @IR_Value = call(convert_expression_106, self.1, $1.1, null)
  mov [rbp-8], rsi
  mov rsi, rax
  xor rdx, rdx
  mov [rbp-16], rdi
  call convert_expression_106
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax 
  .loc 3 1495 9
  # $3.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax $3.1:rbx 
  .loc 3 1495 9
  # $4.1: bool = call(is_389, $3.1, IR_Integer_Type)
  mov rdi, rbx
  mov rsi, IR_Integer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $4.1:rax 
  .loc 3 1495 9
  # $5.1: bool = $4.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:rbx 
  # jump($5.1, .LABEL__convert_substract_expression_137__2, .LABEL__convert_substract_expression_137__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__convert_substract_expression_137__3
.LABEL__convert_substract_expression_137__2:
  .loc 3 1496 15
  # $6.1: @AST_Expression = load_struct_member(expression.1, left_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 3 1496 15
  # $7.1: @Source_Location = load_struct_member($6.1, location)
  mov r15, [rbx+8]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $7.1:r15 
  .loc 3 1496 9
  # call(abort_360, $7.1, "Not an integer value")
  mov rdi, r15
  lea rsi, .LABEL__string_225[rip] # "Not an integer value"
  call abort_360
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__convert_substract_expression_137__3:
  .loc 3 1498 47
  # $8.1: @AST_Expression = load_struct_member(expression.1, right_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] $8.1:rbx 
  .loc 3 1498 76
  # $9.1: @IR_Type = load_struct_member(left_value.1, type)
  mov r15, [rbp-24]
  mov r14, [r15+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:r15:[rbp-24] $5.1:[rbp-25] $8.1:rbx $9.1:r14 
  .loc 3 1498 23
  # right_value.1: @IR_Value = call(convert_expression_106, self.1, $8.1, $9.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov rdx, r14
  call convert_expression_106
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:rax 
  .loc 3 1499 9
  # $12.1: bool = call(is_389, left_value.1, IR_Constant_Value)
  mov rdi, [rbp-24]
  mov rsi, IR_Constant_Value[rip]
  mov [rbp-33], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:rax 
  # jump($12.1, .LABEL__convert_substract_expression_137__4, .LABEL__convert_substract_expression_137__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_substract_expression_137__5
.LABEL__convert_substract_expression_137__4:
  .loc 3 1499 45
  # $12.2: bool = call(is_389, right_value.1, IR_Constant_Value)
  mov rdi, [rbp-33]
  mov rsi, IR_Constant_Value[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:rax:[rbp-34] 
  # jump(.LABEL__convert_substract_expression_137__5)
  mov [rbp-34], al
.LABEL__convert_substract_expression_137__5:
  .loc 3 1499 9
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # jump($12.3, .LABEL__convert_substract_expression_137__6, .LABEL__convert_substract_expression_137__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_substract_expression_137__7
.LABEL__convert_substract_expression_137__6:
  .loc 3 1500 15
  # $14.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $14.1:rbx 
  .loc 3 1500 9
  # call(abort_360, $14.1, "TODO: Evaluate constant expression")
  mov rdi, rbx
  lea rsi, .LABEL__string_226[rip] # "TODO: Evaluate constant expression"
  call abort_360
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
.LABEL__convert_substract_expression_137__7:
  .loc 3 1502 91
  # $15.1: @IR_Type = load_struct_member(left_value.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:rax:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $15.1:rbx 
  .loc 3 1502 68
  # $16.1: @IR_Variable_Value = call(create_temp_value_77, self.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_temp_value_77
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:rax 
  .loc 5 484 37
  # $17.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-42], rax
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $16.1:[rbp-42] $17.1:rax 
  .loc 3 1502 24
  # $18.1: @IR_Substract_Instruction = new IR_Substract_Instruction(object_type = IR_Substract_Instruction, result_value = $16.1, dump = anonymous_function_35_244.address, location = null, operand_values = $17.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-50], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Substract_Instruction
  mov rbx, IR_Substract_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = $16.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $17.1
  mov r15, [rbp-50]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_35_244.address
  lea r14, anonymous_function_35_244[rip]
  mov [rax+57], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $18.1:rax 
  .loc 3 1502 24
  # $19.1: @IR_Binary_Instruction = call(init_231, $18.1, left_value.1, right_value.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  mov rdx, [rbp-33]
  call init_231
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax 
  .loc 3 1502 140
  # $20.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $19.1:rax $20.1:r15 
  .loc 3 1502 12
  # $21.1: @IR_Variable_Value = call(append_78, self.1, $19.1, $20.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call append_78
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] $21.1:rax 
  .loc 3 1502 5
  # return($21.1)
  mov [rbp-42], rax
  jmp .LABEL__convert_substract_expression_137__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] $12.3:[rbp-34] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] $12.2:[rbp-34] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] right_value.1:[rbp-33] $12.1:[rbp-34] 
  # [discarded value]: $12.1
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] left_value.1:[rbp-24] 
  # [discarded value]: left_value.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_substract_expression_137__end:
  mov rsp, rbp
  pop rbp
  ret

convert_substract_expression_137__stack_frame_size: .word 64

  .loc 3 1505 8
  .text
convert_variable_expression_138:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_138__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_138__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx 
  .loc 3 1506 38
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $1.1:rax 
  .loc 3 1506 38
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi expected_type.1:rdx $2.1:rbx 
  .loc 3 1506 20
  # variable.1: @IR_Variable = call(get_variable_69, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call get_variable_69
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax 
  .loc 3 1507 9
  # $4.1: bool = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_138__2, .LABEL__convert_variable_expression_138__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__convert_variable_expression_138__3
.LABEL__convert_variable_expression_138__2:
  .loc 3 1508 13
  # $5.1: bool = expected_type.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $5.1:rax 
  .loc 3 1508 13
  # $6.1: bool = $5.1
  mov [rbp-34], al
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:rax 
  # jump($6.1, .LABEL__convert_variable_expression_138__4, .LABEL__convert_variable_expression_138__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__convert_variable_expression_138__5
.LABEL__convert_variable_expression_138__4:
  .loc 3 1508 38
  # $6.2: bool = call(is_389, expected_type.1, IR_Function_Type)
  mov rdi, [rbp-16]
  mov rsi, IR_Function_Type[rip]
  call is_389
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:rax:[rbp-34] 
  # jump(.LABEL__convert_variable_expression_138__5)
  mov [rbp-34], al
.LABEL__convert_variable_expression_138__5:
  .loc 3 1508 13
  # $6.3: bool = phi($6.1, $6.2)
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # jump($6.3, .LABEL__convert_variable_expression_138__6, .LABEL__convert_variable_expression_138__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__convert_variable_expression_138__7
.LABEL__convert_variable_expression_138__6:
  .loc 3 1509 52
  # $8.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $8.1:rbx 
  .loc 3 1509 52
  # $9.1: @String = load_struct_member($8.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 
  .loc 3 1509 76
  # $10.1: @IR_Function_Type = expected_type.1
  mov rbx, [rbp-16]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $9.1:r15 $10.1:rbx 
  .loc 3 1509 28
  # function.1: @IR_Function = call(get_named_function_74, self.1, $9.1, $10.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov rdx, rbx
  call get_named_function_74
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax 
  .loc 3 1510 17
  # $12.1: bool = function.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:rax $12.1:rbx 
  # jump($12.1, .LABEL__convert_variable_expression_138__8, .LABEL__convert_variable_expression_138__7)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__convert_variable_expression_138__7
.LABEL__convert_variable_expression_138__8:
  .loc 5 156 31
  # $13.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $13.1:rax 
  .loc 5 157 19
  # $14.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-51], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] function.1:[rbp-42] $12.1:[rbp-43] $13.1:[rbp-51] $14.1:rax 
  .loc 3 1511 24
  # $15.1: @IR_Function_Address_Value = new IR_Function_Address_Value(object_type = IR_Function_Address_Value, type = expected_type.1, function = function.1, dump = anonymous_function_9_165.address, creator_instruction = null, user_instructions = $13.1, links = $14.1)
  mov [rbp-59], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Function_Address_Value
  mov rbx, IR_Function_Address_Value[rip]
  mov [rax], rbx
  #     .type = expected_type.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $13.1
  mov r15, [rbp-51]
  mov QWORD PTR [rax+24], r15
  #     .links = $14.1
  mov r14, [rbp-59]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_9_165.address
  lea r13, anonymous_function_9_165[rip]
  mov [rax+40], r13
  #     .function = function.1
  mov r13, [rbp-42]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:rbx:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $15.1:rax 
  .loc 3 1511 17
  # return($15.1)
  mov [rbp-51], rax
  jmp .LABEL__convert_variable_expression_138__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] 
.LABEL__convert_variable_expression_138__7:
  .loc 3 1514 15
  # $16.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:rbx 
  .loc 3 1514 36
  # $17.1: @String = call(clone_391, "Undeclared variable: ")
  lea rdi, .LABEL__string_215[rip] # "Undeclared variable: "
  mov [rbp-51], rbx
  call clone_391
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax 
  .loc 3 1514 74
  # $18.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax $18.1:r15 
  .loc 3 1514 74
  # $19.1: @String = load_struct_member($18.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $17.1:rax $19.1:r14 
  .loc 3 1514 36
  # $20.1: @String = call(append_400, $17.1, $19.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $19.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] $16.1:[rbp-51] $20.1:rax 
  .loc 3 1514 9
  # call(abort_360, $16.1, $20.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_360
  # [discarded value]: $20.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] $12.1:[rbp-43] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] $6.3:[rbp-34] 
  # [discarded value]: $6.3
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] $6.2:[rbp-34] 
  # [discarded value]: $6.2
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] $6.1:[rbp-34] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__convert_variable_expression_138__3:
  .loc 3 1516 17
  # value.1: @IR_Value = call(get_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-32]
  call get_variable_value_70
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax 
  .loc 3 1517 9
  # $22.1: bool = value.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:rax $22.1:rbx 
  # jump($22.1, .LABEL__convert_variable_expression_138__11, .LABEL__convert_variable_expression_138__12)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__convert_variable_expression_138__12
.LABEL__convert_variable_expression_138__11:
  .loc 3 1518 15
  # $23.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] expression.1:rax:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:rbx 
  .loc 3 1518 36
  # $24.1: @String = call(clone_391, "Undeclared variable value: ")
  lea rdi, .LABEL__string_248[rip] # "Undeclared variable value: "
  mov [rbp-50], rbx
  call clone_391
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax 
  .loc 3 1518 80
  # $25.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax $25.1:r15 
  .loc 3 1518 80
  # $26.1: @String = load_struct_member($25.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] expression.1:rbx:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $24.1:rax $26.1:r14 
  .loc 3 1518 36
  # $27.1: @String = call(append_400, $24.1, $26.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $26.1
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] $23.1:[rbp-50] $27.1:rax 
  .loc 3 1518 9
  # call(abort_360, $23.1, $27.1)
  mov rdi, [rbp-50]
  mov rsi, rax
  call abort_360
  # [discarded value]: $27.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] 
.LABEL__convert_variable_expression_138__12:
  .loc 3 1520 5
  # return(value.1)
  mov rax, [rbp-41]
  jmp .LABEL__convert_variable_expression_138__end
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] $22.1:[rbp-42] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] value.1:[rbp-41] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] expression.1:[rbp-8] expected_type.1:[rbp-16] variable.1:[rbp-32] 
  # [discarded value]: variable.1
  # [discarded value]: expected_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_138__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_138__stack_frame_size: .word 64

  .loc 3 1523 8
  .text
convert_variable_expression_address_139:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR convert_variable_expression_address_139__stack_frame_size[rip]
  sub rsp, rax
.LABEL__convert_variable_expression_address_139__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1524 38
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1524 38
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1524 20
  # variable.1: @IR_Variable = call(get_variable_69, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdi
  call get_variable_69
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax 
  .loc 3 1525 9
  # $4.1: bool = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__convert_variable_expression_address_139__2, .LABEL__convert_variable_expression_address_139__3)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__convert_variable_expression_address_139__3
.LABEL__convert_variable_expression_address_139__2:
  .loc 3 1526 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 1526 36
  # $6.1: @String = call(clone_391, "Undeclared variable: ")
  lea rdi, .LABEL__string_215[rip] # "Undeclared variable: "
  mov [rbp-33], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax 
  .loc 3 1526 74
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $7.1:r15 
  .loc 3 1526 74
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $6.1:rax $8.1:r14 
  .loc 3 1526 36
  # $9.1: @String = call(append_400, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $5.1:[rbp-33] $9.1:rax 
  .loc 3 1526 9
  # call(abort_360, $5.1, $9.1)
  mov rdi, [rbp-33]
  mov rsi, rax
  call abort_360
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__convert_variable_expression_address_139__3:
  .loc 3 1528 9
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $10.1:rbx 
  .loc 3 1528 9
  # $11.1: bool = call(is_389, $10.1, IR_Pointer_Type)
  mov rdi, rbx
  mov rsi, IR_Pointer_Type[rip]
  call is_389
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__convert_variable_expression_address_139__4, .LABEL__convert_variable_expression_address_139__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__convert_variable_expression_address_139__5
.LABEL__convert_variable_expression_address_139__4:
  .loc 3 1529 16
  # $12.1: @IR_Value = call(get_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_70
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 3 1529 9
  # return($12.1)
  mov [rbp-34], rax
  jmp .LABEL__convert_variable_expression_address_139__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__convert_variable_expression_address_139__5:
  .loc 3 1531 9
  # $13.1: bool = call(is_389, variable.1, IR_Global_Variable)
  mov rdi, [rbp-24]
  mov rsi, IR_Global_Variable[rip]
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:rax 
  # jump($13.1, .LABEL__convert_variable_expression_address_139__7, .LABEL__convert_variable_expression_address_139__8)
  test al, al
  mov [rbp-27], al
  jz .LABEL__convert_variable_expression_address_139__8
.LABEL__convert_variable_expression_address_139__7:
  .loc 3 1532 88
  # $14.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $14.1:rbx 
  .loc 3 1532 60
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, $14.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_ir_pointer_type_88
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:rax 
  .loc 5 156 31
  # $16.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-35], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:[rbp-35] $16.1:rax 
  .loc 5 157 19
  # $17.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-43], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $15.1:[rbp-35] $16.1:[rbp-43] $17.1:rax 
  .loc 3 1532 16
  # $18.1: @IR_Global_Variable_Address_Value = new IR_Global_Variable_Address_Value(object_type = IR_Global_Variable_Address_Value, type = $15.1, variable = variable.1, dump = anonymous_function_6_161.address, creator_instruction = null, user_instructions = $16.1, links = $17.1)
  mov [rbp-51], rax
  mov rdi, 56
  call malloc
  #     .object_type = IR_Global_Variable_Address_Value
  mov rbx, IR_Global_Variable_Address_Value[rip]
  mov [rax], rbx
  #     .type = $15.1
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+8], rbx
  #     .creator_instruction = null
  mov QWORD PTR [rax+16], 0
  #     .user_instructions = $16.1
  mov r15, [rbp-43]
  mov QWORD PTR [rax+24], r15
  #     .links = $17.1
  mov r14, [rbp-51]
  mov QWORD PTR [rax+32], r14
  #     .dump = anonymous_function_6_161.address
  lea r13, anonymous_function_6_161[rip]
  mov [rax+40], r13
  #     .variable = variable.1
  mov r13, [rbp-24]
  mov QWORD PTR [rax+48], r13
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:r13:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $18.1:rax 
  .loc 3 1532 9
  # return($18.1)
  mov [rbp-35], rax
  jmp .LABEL__convert_variable_expression_address_139__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] 
.LABEL__convert_variable_expression_address_139__8:
  .loc 3 1534 9
  # $19.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rax:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $19.1:rbx 
  .loc 3 1534 9
  # $20.1: bool = call(is_389, $19.1, IR_Unchecked_Array_Type)
  mov rdi, rbx
  mov rsi, IR_Unchecked_Array_Type[rip]
  call is_389
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:rax 
  # jump($20.1, .LABEL__convert_variable_expression_address_139__10, .LABEL__convert_variable_expression_address_139__11)
  test al, al
  mov [rbp-28], al
  jz .LABEL__convert_variable_expression_address_139__11
.LABEL__convert_variable_expression_address_139__10:
  .loc 3 1535 16
  # $21.1: @IR_Value = call(get_variable_value_70, self.1, variable.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call get_variable_value_70
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $21.1:rax 
  .loc 3 1535 9
  # return($21.1)
  mov [rbp-36], rax
  jmp .LABEL__convert_variable_expression_address_139__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] 
.LABEL__convert_variable_expression_address_139__11:
  .loc 3 1537 11
  # $22.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $22.1:rbx 
  .loc 3 1537 32
  # $23.1: @String = call(clone_391, "Variable type without address: ")
  lea rdi, .LABEL__string_249[rip] # "Variable type without address: "
  mov [rbp-36], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $22.1:[rbp-36] $23.1:rax 
  .loc 3 1537 80
  # $24.1: @IR_Type = load_struct_member(variable.1, type)
  mov rbx, [rbp-24]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $22.1:[rbp-36] $23.1:rax $24.1:r15 
  .loc 3 1537 80
  # $25.1: @String = load_struct_member($24.1, name)
  mov r14, [r15+8]
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:rbx:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $22.1:[rbp-36] $23.1:rax $25.1:r14 
  .loc 3 1537 32
  # $26.1: @String = call(append_400, $23.1, $25.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $25.1
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] $22.1:[rbp-36] $26.1:rax 
  .loc 3 1537 5
  # call(abort_360, $22.1, $26.1)
  mov rdi, [rbp-36]
  mov rsi, rax
  call abort_360
  # [discarded value]: $26.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] $20.1:[rbp-28] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] $13.1:[rbp-27] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] variable.1:[rbp-24] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__convert_variable_expression_address_139__end:
  mov rsp, rbp
  pop rbp
  ret

convert_variable_expression_address_139__stack_frame_size: .word 64

  .loc 3 1540 8
  .text
deduce_expression_type_140:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_expression_type_140__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_expression_type_140__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1541 9
  # $1.1: bool = call(is_389, expression.1, AST_Call_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Call_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__deduce_expression_type_140__2, .LABEL__deduce_expression_type_140__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_expression_type_140__3
.LABEL__deduce_expression_type_140__2:
  .loc 3 1542 49
  # $2.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 3 1542 16
  # $3.1: @IR_Type = call(deduce_call_expression_type_141, self.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_call_expression_type_141
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rax 
  .loc 3 1542 9
  # return($3.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_expression_type_140__end
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__deduce_expression_type_140__3:
  .loc 3 1544 9
  # $4.1: bool = call(is_389, expression.1, AST_Literal_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Literal_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  # jump($4.1, .LABEL__deduce_expression_type_140__5, .LABEL__deduce_expression_type_140__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__deduce_expression_type_140__6
.LABEL__deduce_expression_type_140__5:
  .loc 3 1545 52
  # $5.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $5.1:rax 
  .loc 3 1545 16
  # $6.1: @IR_Type = call(deduce_literal_expression_type_142, self.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_literal_expression_type_142
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $6.1:rax 
  .loc 3 1545 9
  # return($6.1)
  mov [rbp-26], rax
  jmp .LABEL__deduce_expression_type_140__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__deduce_expression_type_140__6:
  .loc 3 1547 9
  # $7.1: bool = call(is_389, expression.1, AST_Member_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__deduce_expression_type_140__8, .LABEL__deduce_expression_type_140__9)
  test al, al
  mov [rbp-19], al
  jz .LABEL__deduce_expression_type_140__9
.LABEL__deduce_expression_type_140__8:
  .loc 3 1548 58
  # $8.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $8.1:rax 
  .loc 3 1548 16
  # $9.1: @IR_Type = call(deduce_member_access_expression_type_143, self.1, $8.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_member_access_expression_type_143
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $9.1:rax 
  .loc 3 1548 9
  # return($9.1)
  mov [rbp-27], rax
  jmp .LABEL__deduce_expression_type_140__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__deduce_expression_type_140__9:
  .loc 3 1550 9
  # $10.1: bool = call(is_389, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_389
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:rax 
  # jump($10.1, .LABEL__deduce_expression_type_140__11, .LABEL__deduce_expression_type_140__12)
  test al, al
  mov [rbp-20], al
  jz .LABEL__deduce_expression_type_140__12
.LABEL__deduce_expression_type_140__11:
  .loc 3 1551 53
  # $11.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $11.1:rax 
  .loc 3 1551 16
  # $12.1: @IR_Type = call(deduce_variable_expression_type_144, self.1, $11.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call deduce_variable_expression_type_144
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $12.1:rax 
  .loc 3 1551 9
  # return($12.1)
  mov [rbp-28], rax
  jmp .LABEL__deduce_expression_type_140__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
.LABEL__deduce_expression_type_140__12:
  .loc 3 1553 11
  # $13.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx 
  .loc 3 1553 32
  # $14.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] $13.1:rbx $14.1:r15 
  .loc 3 1553 5
  # call(abort_145, $13.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] $10.1:[rbp-20] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_expression_type_140__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_expression_type_140__stack_frame_size: .word 32

  .loc 3 1556 8
  .text
deduce_call_expression_type_141:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_call_expression_type_141__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_call_expression_type_141__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1557 26
  # argument_types.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:rax 
  .loc 3 1558 21
  # $2.1: @List = load_struct_member(expression.1, arguments)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] argument_types.1:rax $2.1:r15 
  .loc 3 1558 21
  # arguments.1: @List_Iterator = call(create_iterator_375, $2.1)
  mov rdi, r15
  mov [rbp-24], rax
  call create_iterator_375
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:rax 
  # jump(.LABEL__deduce_call_expression_type_141__2)
  mov [rbp-32], rax
.LABEL__deduce_call_expression_type_141__2:
  .loc 3 1559 12
  # $4.1: bool = call(has_next_378, arguments.1)
  mov rdi, [rbp-32]
  call has_next_378
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__deduce_call_expression_type_141__3, .LABEL__deduce_call_expression_type_141__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__deduce_call_expression_type_141__4
.LABEL__deduce_call_expression_type_141__3:
  .loc 3 1560 24
  # argument.1: @AST_Expression = call(next_379, arguments.1)
  mov rdi, [rbp-32]
  call next_379
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument.1:rax 
  .loc 3 1561 29
  # argument_type.1: @IR_Type = call(deduce_expression_type_140, self.1, argument.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  call deduce_expression_type_140
  # [discarded value]: argument.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] argument_type.1:rax 
  .loc 3 1562 9
  # call(append_364, argument_types.1, argument_type.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_364
  # [discarded value]: argument_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__deduce_call_expression_type_141__2)
  jmp .LABEL__deduce_call_expression_type_141__2
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__deduce_call_expression_type_141__4:
  .loc 3 1564 9
  # $8.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $8.1:rbx 
  .loc 3 1564 9
  # $9.1: bool = call(is_389, $8.1, AST_Member_Access_Expression)
  mov rdi, rbx
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:rax 
  # jump($9.1, .LABEL__deduce_call_expression_type_141__5, .LABEL__deduce_call_expression_type_141__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__deduce_call_expression_type_141__6
.LABEL__deduce_call_expression_type_141__5:
  .loc 3 1565 33
  # callee_expression.1: @AST_Member_Access_Expression = load_struct_member(expression.1, callee_expression)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx 
  .loc 3 1566 55
  # $12.1: @AST_Expression = load_struct_member(callee_expression.1, object_expression)
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx $12.1:r15 
  .loc 3 1566 27
  # object_type.1: @IR_Type = call(deduce_expression_type_140, self.1, $12.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov [rbp-42], rbx
  call deduce_expression_type_140
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:rax 
  .loc 3 1567 13
  # $14.1: bool = call(is_389, object_type.1, IR_Struct_Type)
  mov rdi, rax
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-50], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:rax 
  # jump($14.1, .LABEL__deduce_call_expression_type_141__7, .LABEL__deduce_call_expression_type_141__9)
  test al, al
  mov [rbp-51], al
  jz .LABEL__deduce_call_expression_type_141__9
.LABEL__deduce_call_expression_type_141__7:
  .loc 3 1568 36
  # $15.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, object_type.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-50]
  call create_ir_pointer_type_88
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $15.1:rax 
  .loc 3 1568 13
  # call(prepend_365, argument_types.1, $15.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call prepend_365
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_141__8)
.LABEL__deduce_call_expression_type_141__8:
  .loc 3 1572 48
  # $16.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $16.1:rbx 
  .loc 3 1572 48
  # $17.1: @String = load_struct_member($16.1, lexeme)
  mov r15, [rbx+8]
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] $17.1:r15 
  .loc 3 1572 24
  # function.1: @IR_Function = call(get_named_function_73, self.1, $17.1, argument_types.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  mov rdx, [rbp-24]
  call get_named_function_73
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax 
  .loc 3 1573 13
  # $19.1: bool = function.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax $19.1:rbx 
  # jump($19.1, .LABEL__deduce_call_expression_type_141__10, .LABEL__deduce_call_expression_type_141__11)
  test bl, bl
  mov [rbp-59], rax
  mov [rbp-60], bl
  jz .LABEL__deduce_call_expression_type_141__11
.LABEL__deduce_call_expression_type_141__10:
  .loc 3 1574 19
  # $20.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $20.1:rbx 
  .loc 3 1574 19
  # $21.1: @Source_Location = load_struct_member($20.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rax:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:r15 
  .loc 3 1574 59
  # $22.1: @String = call(clone_391, "Unknown function: ")
  lea rdi, .LABEL__string_250[rip] # "Unknown function: "
  mov [rbp-68], r15
  call clone_391
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax 
  .loc 3 1574 94
  # $23.1: @Identifier_Token = load_struct_member(callee_expression.1, member_name)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $23.1:r15 
  .loc 3 1574 94
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:rbx:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $22.1:rax $24.1:r14 
  .loc 3 1574 59
  # $25.1: @String = call(append_400, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] $21.1:[rbp-68] $25.1:rax 
  .loc 3 1574 13
  # call(abort_360, $21.1, $25.1)
  mov rdi, [rbp-68]
  mov rsi, rax
  call abort_360
  # [discarded value]: $25.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
.LABEL__deduce_call_expression_type_141__11:
  .loc 3 1576 16
  # $26.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rax, [rbp-59]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:rax:[rbp-59] $19.1:[rbp-60] $26.1:rbx 
  .loc 3 1576 9
  # return($26.1)
  mov rax, rbx
  mov [rbp-68], rbx
  jmp .LABEL__deduce_call_expression_type_141__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] $19.1:[rbp-60] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] function.1:[rbp-59] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
.LABEL__deduce_call_expression_type_141__9:
  .loc 3 1570 13
  # call(prepend_365, argument_types.1, object_type.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-50]
  call prepend_365
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # jump(.LABEL__deduce_call_expression_type_141__8)
  jmp .LABEL__deduce_call_expression_type_141__8
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] $14.1:[rbp-51] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] callee_expression.1:[rbp-42] object_type.1:[rbp-50] 
  # [discarded value]: object_type.1
  # [discarded value]: callee_expression.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
.LABEL__deduce_call_expression_type_141__6:
  .loc 3 1578 11
  # $27.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx 
  .loc 3 1578 32
  # $28.1: @AST_Expression = load_struct_member(expression.1, callee_expression)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $28.1:r15 
  .loc 3 1578 32
  # $29.1: @Object_Type = load_struct_member($28.1, object_type)
  mov r14, [r15]
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] $27.1:rbx $29.1:r14 
  .loc 3 1578 5
  # call(abort_145, $27.1, $29.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $29.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] $9.1:[rbp-34] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] argument_types.1:[rbp-24] arguments.1:[rbp-32] 
  # [discarded value]: arguments.1
  # [discarded value]: argument_types.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_call_expression_type_141__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_call_expression_type_141__stack_frame_size: .word 80

  .loc 3 1581 8
  .text
deduce_literal_expression_type_142:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_literal_expression_type_142__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_literal_expression_type_142__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1582 19
  # literal.1: @Literal_Token = load_struct_member(expression.1, literal)
  mov rax, [rsi+24]
  # [discarded value]: expression.1
  # [live values]: self.1:rdi literal.1:rax 
  .loc 3 1583 9
  # $2.1: bool = call(is_389, literal.1, String_Token)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, String_Token[rip]
  mov [rbp-16], rax
  call is_389
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__deduce_literal_expression_type_142__2, .LABEL__deduce_literal_expression_type_142__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__deduce_literal_expression_type_142__3
.LABEL__deduce_literal_expression_type_142__2:
  .loc 3 1584 44
  # $3.1: @IR_Type = call(get_named_type_66, self.1, "String")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_239[rip] # "String"
  call get_named_type_66
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $3.1:rax 
  .loc 3 1584 16
  # $4.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call create_ir_pointer_type_88
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] $4.1:rax 
  .loc 3 1584 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__deduce_literal_expression_type_142__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__deduce_literal_expression_type_142__3:
  .loc 3 1586 11
  # $5.1: @Source_Location = load_struct_member(literal.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx 
  .loc 3 1586 29
  # $6.1: @Object_Type = load_struct_member(literal.1, object_type)
  mov r15, [rax]
  # [live values]: self.1:[rbp-8] literal.1:rax:[rbp-16] $2.1:[rbp-17] $5.1:rbx $6.1:r15 
  .loc 3 1586 5
  # call(abort_145, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r15
  call abort_145
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] literal.1:[rbp-16] 
  # [discarded value]: literal.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_literal_expression_type_142__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_literal_expression_type_142__stack_frame_size: .word 32

  .loc 3 1589 8
  .text
deduce_member_access_expression_type_143:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_member_access_expression_type_143__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_member_access_expression_type_143__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1590 51
  # $1.1: @AST_Expression = load_struct_member(expression.1, object_expression)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1590 23
  # object_type.1: @IR_Type = call(deduce_expression_type_140, self.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  mov [rbp-16], rdi
  call deduce_expression_type_140
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:rax 
  .loc 3 1591 9
  # $3.1: bool = call(is_389, object_type.1, IR_Pointer_Type)
  mov rdi, rax
  mov rsi, IR_Pointer_Type[rip]
  mov [rbp-24], rax
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $3.1:rax 
  .loc 3 1591 9
  # $4.1: bool = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:rbx 
  # jump($4.1, .LABEL__deduce_member_access_expression_type_143__2, .LABEL__deduce_member_access_expression_type_143__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__deduce_member_access_expression_type_143__3
.LABEL__deduce_member_access_expression_type_143__2:
  .loc 3 1592 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] $5.1:rbx 
  .loc 3 1592 36
  # $6.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-24]
  mov r14, [r15]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:r15:[rbp-24] $4.1:[rbp-25] $5.1:rbx $6.1:r14 
  .loc 3 1592 9
  # call(abort_145, $5.1, $6.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] 
.LABEL__deduce_member_access_expression_type_143__3:
  .loc 3 1594 24
  # $7.1: @IR_Pointer_Type = object_type.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] $7.1:rax 
  .loc 3 1594 23
  # object_type.1: @IR_Type = load_struct_member($7.1, pointed_type)
  mov rbx, [rax+16]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:rbx 
  .loc 3 1595 9
  # $9.1: bool = call(is_389, object_type.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  mov [rbp-33], rbx
  call is_389
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $9.1:rax 
  .loc 3 1595 9
  # $10.1: bool = $9.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:rbx 
  # jump($10.1, .LABEL__deduce_member_access_expression_type_143__4, .LABEL__deduce_member_access_expression_type_143__5)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__deduce_member_access_expression_type_143__5
.LABEL__deduce_member_access_expression_type_143__4:
  .loc 3 1596 15
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] $11.1:rbx 
  .loc 3 1596 36
  # $12.1: @Object_Type = load_struct_member(object_type.1, object_type)
  mov r15, [rbp-33]
  mov r14, [r15]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:r15:[rbp-33] $10.1:[rbp-34] $11.1:rbx $12.1:r14 
  .loc 3 1596 9
  # call(abort_145, $11.1, $12.1)
  mov rdi, rbx
  mov rsi, r14
  call abort_145
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] 
.LABEL__deduce_member_access_expression_type_143__5:
  .loc 3 1598 23
  # object_type.1: @IR_Struct_Type = object_type.1
  mov rax, [rbp-33]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:rax 
  .loc 3 1599 41
  # $14.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:rax $14.1:r15 
  .loc 3 1599 41
  # $15.1: @String = load_struct_member($14.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:rax $15.1:r14 
  .loc 3 1599 18
  # member.1: @IR_Struct_Type_Member = call(get_member_150, object_type.1, $15.1)
  mov rdi, rax
  mov rsi, r14
  mov [rbp-42], rax
  call get_member_150
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:rax 
  .loc 3 1600 9
  # $17.1: bool = member.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__deduce_member_access_expression_type_143__6, .LABEL__deduce_member_access_expression_type_143__7)
  test bl, bl
  mov [rbp-50], rax
  mov [rbp-51], bl
  jz .LABEL__deduce_member_access_expression_type_143__7
.LABEL__deduce_member_access_expression_type_143__6:
  .loc 3 1601 15
  # $18.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $18.1:rbx 
  .loc 3 1601 15
  # $19.1: @Source_Location = load_struct_member($18.1, location)
  mov r15, [rbx+16]
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:r15 
  .loc 3 1601 54
  # $20.1: @String = load_struct_member(object_type.1, name)
  mov rbx, [rbp-42]
  mov r14, [rbx+8]
  # [live values]: self.1:[rbp-16] expression.1:rax:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:rbx:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:r15 $20.1:r14 
  .loc 3 1601 48
  # $21.1: @String = call(clone_391, $20.1)
  mov rdi, r14
  mov [rbp-59], r15
  call clone_391
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:[rbp-59] $21.1:rax 
  .loc 3 1601 48
  # $22.1: @String = call(append_400, $21.1, " has no such member: ")
  mov rdi, rax
  lea rsi, .LABEL__string_240[rip] # " has no such member: "
  call append_400
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:[rbp-59] $22.1:rax 
  .loc 3 1601 111
  # $23.1: @Identifier_Token = load_struct_member(expression.1, member_name)
  mov rbx, [rbp-8]
  mov r15, [rbx+32]
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:[rbp-59] $22.1:rax $23.1:r15 
  .loc 3 1601 111
  # $24.1: @String = load_struct_member($23.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] expression.1:rbx:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:[rbp-59] $22.1:rax $24.1:r14 
  .loc 3 1601 48
  # $25.1: @String = call(append_400, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $19.1:[rbp-59] $25.1:rax 
  .loc 3 1601 9
  # call(abort_360, $19.1, $25.1)
  mov rdi, [rbp-59]
  mov rsi, rax
  call abort_360
  # [discarded value]: $25.1
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] 
.LABEL__deduce_member_access_expression_type_143__7:
  .loc 3 1603 9
  # $26.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:rax:[rbp-50] $17.1:[rbp-51] $26.1:rbx 
  .loc 3 1603 9
  # $27.1: bool = call(is_389, $26.1, IR_Struct_Type)
  mov rdi, rbx
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $27.1:rax 
  # jump($27.1, .LABEL__deduce_member_access_expression_type_143__8, .LABEL__deduce_member_access_expression_type_143__9)
  test al, al
  mov [rbp-52], al
  jz .LABEL__deduce_member_access_expression_type_143__9
.LABEL__deduce_member_access_expression_type_143__8:
  .loc 3 1604 44
  # $28.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:rax:[rbp-50] $17.1:[rbp-51] $27.1:[rbp-52] $28.1:rbx 
  .loc 3 1604 16
  # $29.1: @IR_Pointer_Type = call(create_ir_pointer_type_88, self.1, $28.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  call create_ir_pointer_type_88
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $27.1:[rbp-52] $29.1:rax 
  .loc 3 1604 9
  # return($29.1)
  mov [rbp-60], rax
  jmp .LABEL__deduce_member_access_expression_type_143__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $27.1:[rbp-52] 
.LABEL__deduce_member_access_expression_type_143__9:
  .loc 3 1606 12
  # $30.1: @IR_Type = load_struct_member(member.1, type)
  mov rax, [rbp-50]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:rax:[rbp-50] $17.1:[rbp-51] $27.1:[rbp-52] $30.1:rbx 
  .loc 3 1606 5
  # return($30.1)
  mov rax, rbx
  mov [rbp-60], rbx
  jmp .LABEL__deduce_member_access_expression_type_143__end
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] $27.1:[rbp-52] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] $17.1:[rbp-51] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] object_type.1:[rbp-42] member.1:[rbp-50] 
  # [discarded value]: member.1
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] object_type.1:[rbp-33] 
  # [discarded value]: object_type.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] expression.1:[rbp-8] object_type.1:[rbp-24] 
  # [discarded value]: object_type.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__deduce_member_access_expression_type_143__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_member_access_expression_type_143__stack_frame_size: .word 64

  .loc 3 1609 8
  .text
deduce_variable_expression_type_144:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR deduce_variable_expression_type_144__stack_frame_size[rip]
  sub rsp, rax
.LABEL__deduce_variable_expression_type_144__1:
  # self.1: @IR_Builder = load_variable(self)
  # [live values]: self.1:rdi 
  # expression.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: self.1:rdi expression.1:rsi 
  .loc 3 1610 38
  # $1.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi expression.1:rsi $1.1:rax 
  .loc 3 1610 38
  # $2.1: @String = load_struct_member($1.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expression.1:rsi $2.1:rbx 
  .loc 3 1610 20
  # variable.1: @IR_Variable = call(get_variable_69, self.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  call get_variable_69
  # [discarded value]: $2.1
  # [discarded value]: self.1
  # [live values]: expression.1:[rbp-8] variable.1:rax 
  .loc 3 1611 9
  # $4.1: bool = variable.1 == null
  cmp rax, 0
  sete bl
  # [live values]: expression.1:[rbp-8] variable.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__deduce_variable_expression_type_144__2, .LABEL__deduce_variable_expression_type_144__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__deduce_variable_expression_type_144__3
.LABEL__deduce_variable_expression_type_144__2:
  .loc 3 1612 15
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: expression.1:rax:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:rbx 
  .loc 3 1612 36
  # $6.1: @String = call(clone_391, "Unknown variable: ")
  lea rdi, .LABEL__string_251[rip] # "Unknown variable: "
  mov [rbp-25], rbx
  call clone_391
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 3 1612 71
  # $7.1: @Identifier_Token = load_struct_member(expression.1, name)
  mov rbx, [rbp-8]
  mov r15, [rbx+24]
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $7.1:r15 
  .loc 3 1612 71
  # $8.1: @String = load_struct_member($7.1, lexeme)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: expression.1:rbx:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $6.1:rax $8.1:r14 
  .loc 3 1612 36
  # $9.1: @String = call(append_400, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] $5.1:[rbp-25] $9.1:rax 
  .loc 3 1612 9
  # call(abort_360, $5.1, $9.1)
  mov rdi, [rbp-25]
  mov rsi, rax
  call abort_360
  # [discarded value]: $9.1
  # [discarded value]: $5.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__deduce_variable_expression_type_144__3:
  .loc 3 1614 12
  # $10.1: @IR_Type = load_struct_member(variable.1, type)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: expression.1:[rbp-8] variable.1:rax:[rbp-16] $4.1:[rbp-17] $10.1:rbx 
  .loc 3 1614 5
  # return($10.1)
  mov rax, rbx
  mov [rbp-25], rbx
  jmp .LABEL__deduce_variable_expression_type_144__end
  # [discarded value]: $10.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: expression.1:[rbp-8] variable.1:[rbp-16] 
  # [discarded value]: variable.1
  # [discarded value]: expression.1
  # [live values]: 
.LABEL__deduce_variable_expression_type_144__end:
  mov rsp, rbp
  pop rbp
  ret

deduce_variable_expression_type_144__stack_frame_size: .word 32

  .loc 1 50 8
  .text
abort_145:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_145__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_145__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # unexpected_type.1: @Object_Type = load_variable(unexpected_type)
  # [live values]: location.1:rdi unexpected_type.1:rsi 
  .loc 1 51 5
  # $1.1: @FILE = call(end_line_386, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_386
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $1.1:rax 
  .loc 1 51 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: location.1:[rbp-8] unexpected_type.1:[rbp-16] $2.1:rax 
  .loc 1 51 5
  # $3.1: @FILE = call(write_363, $2.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_363
  # [discarded value]: $2.1
  # [discarded value]: location.1
  # [live values]: unexpected_type.1:[rbp-16] $3.1:rax 
  .loc 1 51 5
  # $4.1: @FILE = call(write_383, $3.1, ": Unexpected type: ")
  mov rdi, rax
  lea rsi, .LABEL__string_252[rip] # ": Unexpected type: "
  call write_383
  # [discarded value]: $3.1
  # [live values]: unexpected_type.1:[rbp-16] $4.1:rax 
  .loc 1 51 85
  # $5.1: @String = load_struct_member_address(unexpected_type.1, name)
  mov rbx, [rbp-16]
  mov r15, rbx
  add r15, 8
  # [live values]: unexpected_type.1:rbx:[rbp-16] $4.1:rax $5.1:r15 
  .loc 1 51 5
  # $6.1: @FILE = call(write_383, $4.1, $5.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: unexpected_type.1
  # [live values]: $6.1:rax 
  .loc 1 51 5
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: 
  .loc 1 52 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_145__end:
  mov rsp, rbp
  pop rbp
  ret

abort_145__stack_frame_size: .word 16

  .loc 4 7 8
  .text
next_146:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_146__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_146__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 8 18
  # $1.1: isize = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 4 8 18
  # $2.1: isize = $1.1 + 1
  mov rbx, rax
  inc rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 4 8 5
  # store_struct_member(self.1, value, $2.1)
  mov QWORD PTR [rdi], rbx
  # [discarded value]: $2.1
  # [live values]: self.1:rdi 
  .loc 4 9 12
  # $3.1: isize = load_struct_member(self.1, value)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 4 9 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__next_146__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__next_146__end:
  mov rsp, rbp
  pop rbp
  ret

next_146__stack_frame_size: .word 16

  .loc 4 12 8
  .text
reset_147:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR reset_147__stack_frame_size[rip]
  sub rsp, rax
.LABEL__reset_147__1:
  # self.1: @Counter = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 4 13 5
  # store_struct_member(self.1, value, 0)
  mov QWORD PTR [rdi], 0
  # [live values]: self.1:rdi 
  .loc 4 14 5
  # return(self.1)
  mov rax, rdi
  mov [rbp-8], rdi
  jmp .LABEL__reset_147__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__reset_147__end:
  mov rsp, rbp
  pop rbp
  ret

reset_147__stack_frame_size: .word 16

  .loc 5 73 8
  .text
create_ir_function_type_148:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_function_type_148__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_function_type_148__1:
  # parameters.1: @List = load_variable(parameters)
  # [live values]: parameters.1:rdi 
  # return_type.1: @IR_Type = load_variable(return_type)
  # [live values]: parameters.1:rdi return_type.1:rsi 
  .loc 14 4 21
  # $2.1: [i8; ?] = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  mov [rbp-16], rsi
  call malloc
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $2.1:rax 
  .loc 5 74 21
  # $3.1: @String = new String(data = $2.1, data_size = 16, length = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .data = $2.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $2.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] $3.1:rax 
  .loc 5 74 21
  # type_name.1: @String = call(append_400, $3.1, "func (")
  mov rdi, rax
  lea rsi, .LABEL__string_253[rip] # "func ("
  call append_400
  # [discarded value]: $3.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:rax 
  .loc 5 75 27
  # parameters_item.1: @List_Item = load_struct_member(parameters.1, first_item)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: parameters.1:rbx:[rbp-8] return_type.1:[rbp-16] type_name.1:rax parameters_item.1:r15 
  # jump(.LABEL__create_ir_function_type_148__2)
  mov [rbp-24], rax
  mov [rbp-32], r15
.LABEL__create_ir_function_type_148__2:
  # parameters_item.2: @List_Item = phi(parameters_item.1, parameters_item.4)
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  .loc 5 76 12
  # $6.1: bool = parameters_item.2 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:rax 
  # jump($6.1, .LABEL__create_ir_function_type_148__3, .LABEL__create_ir_function_type_148__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_function_type_148__4
.LABEL__create_ir_function_type_148__3:
  .loc 5 77 25
  # parameter.1: @IR_Function_Type_Parameter = load_struct_member(parameters_item.2, data)
  mov rax, [rbp-32]
  mov rbx, [rax+16]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx 
  .loc 5 78 26
  # $9.1: @String = load_struct_member(parameter.1, name)
  mov r15, [rbx]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:rax:[rbp-32] $6.1:[rbp-33] parameter.1:rbx $9.1:r15 
  .loc 5 78 9
  # $10.1: @String = call(append_400, type_name.1, $9.1)
  mov rdi, [rbp-24]
  mov rsi, r15
  mov [rbp-41], rbx
  call append_400
  # [discarded value]: $9.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $10.1:rax 
  .loc 5 78 9
  # $11.1: @String = call(append_400, $10.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call append_400
  # [discarded value]: $10.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameter.1:[rbp-41] $11.1:rax 
  .loc 5 78 62
  # $12.1: @IR_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-41]
  mov r15, [rbx+8]
  # [discarded value]: parameter.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $12.1:r15 
  .loc 5 78 62
  # $13.1: @String = load_struct_member($12.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $12.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $11.1:rax $13.1:rbx 
  .loc 5 78 9
  # $14.1: @String = call(append_400, $11.1, $13.1)
  mov rdi, rax
  mov rsi, rbx
  call append_400
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 79 27
  # parameters_item.4: @List_Item = load_struct_member(parameters_item.2, next_item)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] 
  .loc 5 80 13
  # $16.1: bool = parameters_item.4 != null
  cmp rbx, 0
  setne al
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:rbx:[rbp-32] $16.1:rax 
  # jump($16.1, .LABEL__create_ir_function_type_148__5, .LABEL__create_ir_function_type_148__2)
  test al, al
  mov [rbp-34], al
  mov [rbp-32], rbx
  jz .LABEL__create_ir_function_type_148__2
.LABEL__create_ir_function_type_148__5:
  .loc 5 81 13
  # $17.1: @String = call(append_400, type_name.1, ", ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_40[rip] # ", "
  call append_400
  # [discarded value]: $17.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # jump(.LABEL__create_ir_function_type_148__2)
  jmp .LABEL__create_ir_function_type_148__2
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] $16.1:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] parameters_item.4:[rbp-32] 
  # [discarded value]: parameters_item.4
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
.LABEL__create_ir_function_type_148__4:
  .loc 5 84 5
  # $18.1: @String = call(append_400, type_name.1, ") -> ")
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_254[rip] # ") -> "
  call append_400
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax 
  .loc 5 84 38
  # $19.1: @String = load_struct_member(return_type.1, name)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: parameters.1:[rbp-8] return_type.1:rbx:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $18.1:rax $19.1:r15 
  .loc 5 84 5
  # $20.1: @String = call(append_400, $18.1, $19.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [live values]: parameters.1:[rbp-8] return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  .loc 5 86 12
  # $21.1: @IR_Function_Type = new IR_Function_Type(object_type = IR_Function_Type, name = type_name.1, parameters = parameters.1, return_type = return_type.1)
  mov rdi, 32
  call malloc
  #     .object_type = IR_Function_Type
  mov rbx, IR_Function_Type[rip]
  mov [rax], rbx
  #     .name = type_name.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .parameters = parameters.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .return_type = return_type.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: parameters.1
  # [live values]: return_type.1:r14:[rbp-16] type_name.1:rbx:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] $21.1:rax 
  .loc 5 86 5
  # return($21.1)
  mov [rbp-41], rax
  jmp .LABEL__create_ir_function_type_148__end
  # [discarded value]: $21.1
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] parameters_item.2:[rbp-32] 
  # [discarded value]: parameters_item.2
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [live values]: return_type.1:[rbp-16] type_name.1:[rbp-24] parameters_item.1:[rbp-32] 
  # [discarded value]: parameters_item.1
  # [discarded value]: type_name.1
  # [discarded value]: return_type.1
  # [live values]: 
.LABEL__create_ir_function_type_148__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_function_type_148__stack_frame_size: .word 48

  .loc 5 102 8
  .text
add_member_149:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_member_149__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_member_149__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: self.1:rdi name.1:rsi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: self.1:rdi name.1:rsi type.1:rdx 
  .loc 5 103 18
  # member.1: @IR_Struct_Type_Member = new IR_Struct_Type_Member(struct_type = self.1, name = name.1, type = type.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 24
  call malloc
  #     .struct_type = self.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .name = name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .type = type.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: type.1
  # [discarded value]: name.1
  # [live values]: self.1:rbx:[rbp-24] member.1:rax 
  .loc 5 104 5
  # $2.1: @List = load_struct_member(self.1, members)
  mov r15, [rbx+24]
  # [discarded value]: self.1
  # [live values]: member.1:rax $2.1:r15 
  .loc 5 104 5
  # call(append_364, $2.1, member.1)
  mov rdi, r15
  mov rsi, rax
  mov [rbp-8], rax
  call append_364
  # [discarded value]: $2.1
  # [live values]: member.1:[rbp-8] 
  .loc 5 105 5
  # return(member.1)
  mov rax, [rbp-8]
  jmp .LABEL__add_member_149__end
  # [discarded value]: member.1
  # [live values]: 
.LABEL__add_member_149__end:
  mov rsp, rbp
  pop rbp
  ret

add_member_149__stack_frame_size: .word 32

  .loc 5 108 8
  .text
get_member_150:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_150__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_150__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # name.1: @String = load_variable(name)
  # [live values]: struct_type.1:rdi name.1:rsi 
  # jump(.LABEL__get_member_150__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__get_member_150__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] 
  .loc 5 111 28
  # $1.1: @List = load_struct_member(struct_type.2, members)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] $1.1:rbx 
  .loc 5 111 28
  # members_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:rax:[rbp-16] members_item.1:r15 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], r15
.LABEL__get_member_150__4:
  # members_item.2: @List_Item = phi(members_item.1, members_item.5)
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  .loc 5 112 16
  # $3.1: bool = members_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__get_member_150__5, .LABEL__get_member_150__6)
  test al, al
  mov [rbp-25], al
  jz .LABEL__get_member_150__6
.LABEL__get_member_150__5:
  .loc 5 113 26
  # member.1: @IR_Struct_Type_Member = load_struct_member(members_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx 
  .loc 5 114 17
  # $6.1: @String = load_struct_member(member.1, name)
  mov r15, [rbx+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:rax:[rbp-24] $3.1:[rbp-25] member.1:rbx $6.1:r15 
  .loc 5 114 17
  # $7.1: bool = call(equals_392, $6.1, name.1)
  mov rdi, r15
  mov rsi, [rbp-8]
  mov [rbp-33], rbx
  call equals_392
  # [discarded value]: $6.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:rax 
  # jump($7.1, .LABEL__get_member_150__7, .LABEL__get_member_150__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__get_member_150__8
.LABEL__get_member_150__7:
  .loc 5 115 17
  # return(member.1)
  mov rax, [rbp-33]
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
.LABEL__get_member_150__8:
  .loc 5 117 28
  # members_item.5: @List_Item = load_struct_member(members_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:rbx:[rbp-24] 
  # jump(.LABEL__get_member_150__4)
  mov [rbp-24], rbx
  jmp .LABEL__get_member_150__4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] members_item.5:[rbp-24] 
  # [discarded value]: members_item.5
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] member.1:[rbp-33] 
  # [discarded value]: member.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
.LABEL__get_member_150__6:
  .loc 5 119 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] 
  .loc 5 120 13
  # $10.1: bool = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:rbx:[rbp-16] $10.1:rax 
  # jump($10.1, .LABEL__get_member_150__10, .LABEL__get_member_150__2)
  test al, al
  mov [rbp-26], al
  mov [rbp-16], rbx
  jz .LABEL__get_member_150__2
.LABEL__get_member_150__10:
  .loc 5 121 13
  # return(null)
  xor rax, rax
  jmp .LABEL__get_member_150__end
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] $10.1:[rbp-26] 
  # [discarded value]: $10.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] struct_type.4:[rbp-16] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] members_item.2:[rbp-24] 
  # [discarded value]: members_item.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] struct_type.2:[rbp-16] members_item.1:[rbp-24] 
  # [discarded value]: members_item.1
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-16] name.1:[rbp-8] 
  # [discarded value]: name.1
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__get_member_150__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_150__stack_frame_size: .word 48

  .loc 5 126 8
  .text
is_base_type_151:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_base_type_151__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_base_type_151__1:
  # self.1: @IR_Struct_Type = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type.1: @IR_Struct_Type = load_variable(other)
  # [live values]: self.1:rdi struct_type.1:rsi 
  # jump(.LABEL__is_base_type_151__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__is_base_type_151__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 129 21
  # $1.1: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 129 13
  # $2.1: bool = self.1 == $1.1
  cmp QWORD PTR [rbp-16], rbx
  sete r15b
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__is_base_type_151__4, .LABEL__is_base_type_151__5)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__is_base_type_151__5
.LABEL__is_base_type_151__4:
  .loc 5 130 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_base_type_151__5:
  .loc 5 132 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] 
  .loc 5 133 13
  # $4.1: bool = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_base_type_151__7, .LABEL__is_base_type_151__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_base_type_151__2
.LABEL__is_base_type_151__7:
  .loc 5 134 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_base_type_151__end
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_base_type_151__end:
  mov rsp, rbp
  pop rbp
  ret

is_base_type_151__stack_frame_size: .word 32

  .loc 5 139 8
  .text
is_object_type_152:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_object_type_152__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_object_type_152__1:
  # struct_type.1: @IR_Struct_Type = load_variable(self)
  # [live values]: struct_type.1:rdi 
  # jump(.LABEL__is_object_type_152__2)
  mov [rbp-8], rdi
.LABEL__is_object_type_152__2:
  # struct_type.2: @IR_Struct_Type = phi(struct_type.1, struct_type.4)
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  .loc 5 142 13
  # $1.1: @String = load_struct_member(struct_type.2, name)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:rax:[rbp-8] $1.1:rbx 
  .loc 5 142 13
  # $2.1: bool = call(equals_392, $1.1, "Object")
  mov rdi, rbx
  lea rsi, .LABEL__string_255[rip] # "Object"
  call equals_392
  # [discarded value]: $1.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__is_object_type_152__4, .LABEL__is_object_type_152__5)
  test al, al
  mov [rbp-9], al
  jz .LABEL__is_object_type_152__5
.LABEL__is_object_type_152__4:
  .loc 5 143 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
.LABEL__is_object_type_152__5:
  .loc 5 145 23
  # struct_type.4: @IR_Struct_Type = load_struct_member(struct_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] 
  .loc 5 146 13
  # $4.1: bool = struct_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_object_type_152__7, .LABEL__is_object_type_152__2)
  test al, al
  mov [rbp-10], al
  mov [rbp-8], rbx
  jz .LABEL__is_object_type_152__2
.LABEL__is_object_type_152__7:
  .loc 5 147 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_object_type_152__end
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] struct_type.4:[rbp-8] 
  # [discarded value]: struct_type.4
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [live values]: struct_type.1:[rbp-8] struct_type.2:[rbp-8] 
  # [discarded value]: struct_type.2
  # [live values]: struct_type.1:[rbp-8] 
  # [live values]: struct_type.1:[rbp-8] 
  # [discarded value]: struct_type.1
  # [live values]: 
.LABEL__is_object_type_152__end:
  mov rsp, rbp
  pop rbp
  ret

is_object_type_152__stack_frame_size: .word 16

  .loc 5 158 56
  .text
anonymous_function_1_153:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_1_153__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_1_153__1:
  # value.1: @IR_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 159 9
  # $1.1: @FILE = call(flush_387, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_387
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] 
  .loc 5 160 15
  # $2.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  call clone_391
  # [live values]: value.1:[rbp-8] $2.1:rax 
  .loc 5 160 50
  # $3.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: value.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 160 50
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [live values]: $2.1:rax $3.1:r15 $4.1:rbx 
  .loc 5 160 15
  # $5.1: @String = call(append_400, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_400
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 160 9
  # call(abort_388, $5.1)
  mov rdi, rax
  call abort_388
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__anonymous_function_1_153__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_1_153__stack_frame_size: .word 16

  .loc 5 164 8
  .text
write_154:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_154__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_154__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: file.1:rdi value.1:rsi 
  # $1.1: bool = load_variable(check_users)
  # [live values]: file.1:rdi value.1:rsi $1.1:rdx 
  # jump($1.1, .LABEL__write_154__2, .LABEL__write_154__3)
  test dl, dl
  mov [rbp-1], dl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_154__3
.LABEL__write_154__2:
  .loc 5 165 24
  # $2.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $2.1:rbx 
  .loc 5 165 24
  # $3.1: isize = load_struct_member($2.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:r15 
  .loc 5 165 24
  # $4.1: bool = $3.1 == 0
  cmp r15, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $4.1:rbx 
  .loc 5 165 9
  # $1.2: bool = $4.1
  mov [rbp-18], bl
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:rbx:[rbp-1] 
  # jump(.LABEL__write_154__3)
  mov [rbp-1], bl
.LABEL__write_154__3:
  .loc 5 165 9
  # $1.3: bool = phi($1.1, $1.2)
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # jump($1.3, .LABEL__write_154__4, .LABEL__write_154__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__write_154__5
.LABEL__write_154__4:
  .loc 5 166 9
  # $5.1: @FILE = call(flush_387, file.1)
  mov rdi, [rbp-17]
  call flush_387
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  .loc 5 167 13
  # $6.1: bool = call(is_389, value.1, IR_Variable_Value)
  mov rdi, [rbp-9]
  mov rsi, IR_Variable_Value[rip]
  call is_389
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:rax 
  # jump($6.1, .LABEL__write_154__6, .LABEL__write_154__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_154__7
.LABEL__write_154__6:
  .loc 5 168 25
  # value.1: @IR_Variable_Value = value.1
  mov rax, [rbp-9]
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] value.1:rax 
  .loc 5 169 33
  # value_version.1: isize = load_struct_member(value.1, version)
  mov rbx, [rax+56]
  # [discarded value]: value_version.1
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__7)
.LABEL__write_154__7:
  .loc 5 171 9
  # $9.1: @FILE = call(write_383, stderr, "Found ")
  mov rdi, stderr[rip]
  lea rsi, .LABEL__string_256[rip] # "Found "
  call write_383
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax 
  .loc 5 171 38
  # $10.1: @Object_Type = load_struct_member(value.1, object_type)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $10.1:r15 
  .loc 5 171 38
  # $11.1: @String = load_struct_member_address($10.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-17] value.1:rbx:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $9.1:rax $10.1:r15 $11.1:r14 
  .loc 5 171 9
  # $12.1: @FILE = call(write_383, $9.1, $11.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $12.1:rax 
  .loc 5 171 9
  # $13.1: @FILE = call(write_383, $12.1, " without user instructions: ")
  mov rdi, rax
  lea rsi, .LABEL__string_257[rip] # " without user instructions: "
  call write_383
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  .loc 5 172 9
  # $14.1: func (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $14.1:rbx 
  .loc 5 172 9
  # $15.1: @FILE = call($14.1, value.1, stderr)
  mov rdi, rax
  mov rsi, stderr[rip]
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  .loc 5 173 9
  # $16.1: @FILE = call(end_line_386, stderr)
  mov rdi, stderr[rip]
  call end_line_386
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # jump(.LABEL__write_154__5)
.LABEL__write_154__5:
  .loc 5 175 12
  # $17.1: func (value: @IR_Value, file: @FILE) -> @FILE = load_struct_member(value.1, dump)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-17] value.1:rax:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $17.1:rbx 
  .loc 5 175 12
  # $18.1: @FILE = call($17.1, value.1, file.1)
  mov rdi, rax
  mov rsi, [rbp-17]
  mov rax, rbx
  call rax
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] $18.1:rax 
  .loc 5 175 5
  # return($18.1)
  mov [rbp-26], rax
  jmp .LABEL__write_154__end
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] $1.3:[rbp-1] 
  # [discarded value]: $1.3
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] $1.2:[rbp-1] 
  # [discarded value]: $1.2
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [live values]: file.1:[rbp-17] value.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [discarded value]: value.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_154__end:
  mov rsp, rbp
  pop rbp
  ret

write_154__stack_frame_size: .word 32

  .loc 5 196 16
  .text
anonymous_function_2_155:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_2_155__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_2_155__1:
  # value.1: @IR_Value = load_variable(value)
  # [discarded value]: value.1
  # [live values]: 
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rsi 
  .loc 5 197 20
  # $1.1: @FILE = call(write_383, file.1, "undefined")
  mov rdi, rsi
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_258[rip] # "undefined"
  call write_383
  # [discarded value]: file.1
  # [live values]: $1.1:rax 
  .loc 5 197 13
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_2_155__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_2_155__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_2_155__stack_frame_size: .word 16

  .loc 5 204 16
  .text
anonymous_function_3_156:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_3_156__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_3_156__1:
  # $1.1: @IR_Constant_Value = load_variable(value)
  # [live values]: $1.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: $1.1:rdi file.1:rsi 
  .loc 5 205 31
  # $2.1: @Literal_Token = load_struct_member($1.1, literal)
  mov rax, [rdi+48]
  # [discarded value]: $1.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 205 31
  # $3.1: @String = load_struct_member($2.1, lexeme)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 205 20
  # $4.1: @FILE = call(write_383, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 205 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_3_156__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_3_156__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_3_156__stack_frame_size: .word 16

  .loc 5 213 16
  .text
anonymous_function_4_157:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_4_157__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_4_157__1:
  # value.1: @IR_Struct_Literal_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 215 24
  # $2.1: @IR_Type = load_struct_member(value.1, type)
  mov rax, [rdi+8]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 215 24
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+8]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 215 13
  # $4.1: @FILE = call(write_383, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_383
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] $4.1:rax 
  .loc 5 215 13
  # $5.1: @FILE = call(write_385, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 216 36
  # $6.1: @List = load_struct_member(value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: value.1
  # [live values]: file.1:[rbp-16] $6.1:rbx 
  .loc 5 216 36
  # value_links_item.1: @List_Item = load_struct_member($6.1, first_item)
  mov rax, [rbx]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-16] value_links_item.1:rax 
  .loc 5 217 17
  # is_first_value_link.1: bool = true
  mov bl, 1
  # [live values]: file.1:[rbp-16] value_links_item.1:rax is_first_value_link.1:rbx 
  # jump(.LABEL__anonymous_function_4_157__2)
  mov [rbp-24], rax
  mov [rbp-25], bl
.LABEL__anonymous_function_4_157__2:
  # is_first_value_link.4: bool = phi(is_first_value_link.1, is_first_value_link.5)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] 
  # value_links_item.2: @List_Item = phi(value_links_item.1, value_links_item.5)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] 
  .loc 5 218 20
  # $8.1: bool = value_links_item.2 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:rax 
  # jump($8.1, .LABEL__anonymous_function_4_157__3, .LABEL__anonymous_function_4_157__4)
  test al, al
  mov [rbp-26], al
  jz .LABEL__anonymous_function_4_157__4
.LABEL__anonymous_function_4_157__3:
  .loc 5 219 34
  # value_link.1: @IR_Link = load_struct_member(value_links_item.2, data)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:rax:[rbp-24] $8.1:[rbp-26] value_link.1:rbx 
  .loc 5 220 21
  # $11.1: bool = call(is_389, value_link.1, IR_Struct_Literal_Member_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rbp-34], rbx
  call is_389
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:rax 
  # jump($11.1, .LABEL__anonymous_function_4_157__5, .LABEL__anonymous_function_4_157__6)
  test al, al
  mov [rbp-35], al
  jz .LABEL__anonymous_function_4_157__6
.LABEL__anonymous_function_4_157__5:
  .loc 5 221 38
  # value_link.1: @IR_Struct_Literal_Member_Value_Link = value_link.1
  mov rax, [rbp-34]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax 
  # jump(is_first_value_link.4, .LABEL__anonymous_function_4_157__7, .LABEL__anonymous_function_4_157__9)
  mov bl, [rbp-25]
  test bl, bl
  mov [rbp-43], rax
  jz .LABEL__anonymous_function_4_157__9
.LABEL__anonymous_function_4_157__7:
  .loc 5 223 25
  # is_first_value_link.3: bool = false
  mov al, 0
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:rax:[rbp-25] 
  # jump(.LABEL__anonymous_function_4_157__8)
  mov [rbp-25], al
.LABEL__anonymous_function_4_157__8:
  # is_first_value_link.6: bool = phi(is_first_value_link.3, is_first_value_link.4)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  .loc 5 227 32
  # $14.1: @IR_Struct_Type_Member = load_struct_member(value_link.1, struct_type_member)
  mov rax, [rbp-43]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $14.1:rbx 
  .loc 5 227 32
  # $15.1: @String = load_struct_member($14.1, name)
  mov r15, [rbx+8]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rax:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $15.1:r15 
  .loc 5 227 21
  # $16.1: @FILE = call(write_383, file.1, $15.1)
  mov rdi, [rbp-16]
  mov rsi, r15
  call write_383
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $16.1:rax 
  .loc 5 227 21
  # $17.1: @FILE = call(write_383, $16.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_92[rip] # " = "
  call write_383
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $17.1:rax 
  .loc 5 227 87
  # $18.1: @IR_Value = load_struct_member(value_link.1, value)
  mov rbx, [rbp-43]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:rbx:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] $17.1:rax $18.1:r15 
  .loc 5 227 21
  # $19.1: @FILE = call(write_154, $17.1, $18.1, false)
  mov rdi, rax
  mov rsi, r15
  mov dl, 0
  call write_154
  # [discarded value]: $19.1
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # jump(.LABEL__anonymous_function_4_157__6)
.LABEL__anonymous_function_4_157__6:
  # is_first_value_link.5: bool = phi(is_first_value_link.4, is_first_value_link.6)
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  .loc 5 229 36
  # value_links_item.5: @List_Item = load_struct_member(value_links_item.2, next_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] value_links_item.5:rbx:[rbp-24] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # jump(.LABEL__anonymous_function_4_157__2)
  mov [rbp-24], rbx
  jmp .LABEL__anonymous_function_4_157__2
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.5:[rbp-25] value_links_item.5:[rbp-24] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [discarded value]: value_links_item.5
  # [discarded value]: is_first_value_link.5
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] is_first_value_link.6:[rbp-25] 
  # [discarded value]: is_first_value_link.6
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] is_first_value_link.3:[rbp-25] 
  # [discarded value]: is_first_value_link.3
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
.LABEL__anonymous_function_4_157__9:
  .loc 5 225 25
  # $13.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # jump(.LABEL__anonymous_function_4_157__8)
  jmp .LABEL__anonymous_function_4_157__8
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] value_link.1:[rbp-43] 
  # [discarded value]: value_link.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] $11.1:[rbp-35] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] value_link.1:[rbp-34] 
  # [discarded value]: value_link.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] 
.LABEL__anonymous_function_4_157__4:
  .loc 5 231 20
  # $21.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_385
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] $21.1:rax 
  .loc 5 231 13
  # return($21.1)
  mov [rbp-34], rax
  jmp .LABEL__anonymous_function_4_157__end
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] $8.1:[rbp-26] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] is_first_value_link.4:[rbp-25] value_links_item.2:[rbp-24] 
  # [discarded value]: value_links_item.2
  # [discarded value]: is_first_value_link.4
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] 
  # [live values]: file.1:[rbp-16] value_links_item.1:[rbp-24] is_first_value_link.1:[rbp-25] 
  # [discarded value]: is_first_value_link.1
  # [discarded value]: value_links_item.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__anonymous_function_4_157__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_4_157__stack_frame_size: .word 48

  .loc 5 242 8
  .text
get_member_value_158:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_member_value_158__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_member_value_158__1:
  # self.1: @IR_Struct_Literal_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  .loc 5 243 22
  # $1.1: @List = load_struct_member(self.1, links)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: struct_type_member.1:rsi $1.1:rax 
  .loc 5 243 22
  # links_item.1: @List_Item = load_struct_member($1.1, first_item)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: struct_type_member.1:rsi links_item.1:rbx 
  # jump(.LABEL__get_member_value_158__2)
  mov [rbp-8], rbx
  mov [rbp-16], rsi
.LABEL__get_member_value_158__2:
  # links_item.2: @List_Item = phi(links_item.1, links_item.5)
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] 
  .loc 5 244 12
  # $3.1: bool = links_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__get_member_value_158__3, .LABEL__get_member_value_158__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_member_value_158__4
.LABEL__get_member_value_158__3:
  .loc 5 245 20
  # link.1: @IR_Link = load_struct_member(links_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:rax:[rbp-8] $3.1:[rbp-17] link.1:rbx 
  .loc 5 246 13
  # $6.1: bool = call(is_389, link.1, IR_Struct_Literal_Member_Value_Link)
  mov rdi, rbx
  mov rsi, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rbp-25], rbx
  call is_389
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:rax 
  # jump($6.1, .LABEL__get_member_value_158__5, .LABEL__get_member_value_158__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_member_value_158__6
.LABEL__get_member_value_158__5:
  .loc 5 247 24
  # link.1: @IR_Struct_Literal_Member_Value_Link = link.1
  mov rax, [rbp-25]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax 
  .loc 5 248 17
  # $8.1: @IR_Struct_Type_Member = load_struct_member(link.1, struct_type_member)
  mov rbx, [rax+24]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax $8.1:rbx 
  .loc 5 248 17
  # $9.1: bool = $8.1 == struct_type_member.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $8.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax $9.1:r15 
  # jump($9.1, .LABEL__get_member_value_158__7, .LABEL__get_member_value_158__6)
  test r15b, r15b
  mov [rbp-34], rax
  mov [rbp-35], r15b
  jz .LABEL__get_member_value_158__6
.LABEL__get_member_value_158__7:
  .loc 5 249 24
  # $10.1: @IR_Value = load_struct_member(link.1, value)
  mov rax, [rbp-34]
  mov rbx, [rax+16]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:rax:[rbp-34] $9.1:[rbp-35] $10.1:rbx 
  .loc 5 249 17
  # return($10.1)
  mov rax, rbx
  mov [rbp-43], rbx
  jmp .LABEL__get_member_value_158__end
  # [discarded value]: $10.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] 
.LABEL__get_member_value_158__6:
  .loc 5 252 22
  # links_item.5: @List_Item = load_struct_member(links_item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] links_item.5:rbx:[rbp-8] 
  # jump(.LABEL__get_member_value_158__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_member_value_158__2
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] links_item.5:[rbp-8] 
  # [discarded value]: links_item.5
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] $9.1:[rbp-35] 
  # [discarded value]: $9.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] link.1:[rbp-34] 
  # [discarded value]: link.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] link.1:[rbp-25] 
  # [discarded value]: link.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] 
.LABEL__get_member_value_158__4:
  .loc 5 254 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_member_value_158__end
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] links_item.2:[rbp-8] 
  # [discarded value]: links_item.2
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] 
  # [live values]: struct_type_member.1:[rbp-16] links_item.1:[rbp-8] 
  # [discarded value]: links_item.1
  # [discarded value]: struct_type_member.1
  # [live values]: 
.LABEL__get_member_value_158__end:
  mov rsp, rbp
  pop rbp
  ret

get_member_value_158__stack_frame_size: .word 48

  .loc 5 257 8
  .text
set_member_value_159:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR set_member_value_159__stack_frame_size[rip]
  sub rsp, rax
.LABEL__set_member_value_159__1:
  # self.1: @IR_Struct_Literal_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: self.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi struct_type_member.1:rsi value.1:rdx 
  .loc 5 258 29
  # member_value_link.1: @IR_Struct_Literal_Member_Value_Link = new IR_Struct_Literal_Member_Value_Link(object_type = IR_Struct_Literal_Member_Value_Link, value = value.1, struct_type_member = struct_type_member.1, back_link = undefined)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 32
  call malloc
  #     .object_type = IR_Struct_Literal_Member_Value_Link
  mov rbx, IR_Struct_Literal_Member_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  #     .struct_type_member = struct_type_member.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: struct_type_member.1
  # [live values]: self.1:[rbp-24] value.1:rbx:[rbp-8] member_value_link.1:rax 
  .loc 5 259 35
  # $2.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = self.1, back_link = member_value_link.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = member_value_link.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .value = self.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  # [live values]: self.1:r15:[rbp-24] value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] $2.1:rax 
  .loc 5 259 5
  # store_struct_member(member_value_link.1, back_link, $2.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $2.1
  # [live values]: self.1:r15:[rbp-24] value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] 
  .loc 5 260 5
  # $3.1: @List = load_struct_member(self.1, links)
  mov rax, [r15+32]
  # [discarded value]: self.1
  # [live values]: value.1:[rbp-8] member_value_link.1:rbx:[rbp-32] $3.1:rax 
  .loc 5 260 5
  # call(append_364, $3.1, member_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_364
  # [discarded value]: $3.1
  # [live values]: value.1:[rbp-8] member_value_link.1:[rbp-32] 
  .loc 5 261 5
  # $4.1: @List = load_struct_member(value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: value.1
  # [live values]: member_value_link.1:[rbp-32] $4.1:rbx 
  .loc 5 261 24
  # $5.1: @IR_Required_By_Value_Link = load_struct_member(member_value_link.1, back_link)
  mov rax, [rbp-32]
  mov r15, [rax+8]
  # [discarded value]: member_value_link.1
  # [live values]: $4.1:rbx $5.1:r15 
  .loc 5 261 5
  # call(append_364, $4.1, $5.1)
  mov rdi, rbx
  mov rsi, r15
  call append_364
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: 
  # return()
  jmp .LABEL__set_member_value_159__end
  # [live values]: 
.LABEL__set_member_value_159__end:
  mov rsp, rbp
  pop rbp
  ret

set_member_value_159__stack_frame_size: .word 32

  .loc 5 266 16
  .text
anonymous_function_5_160:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_5_160__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_5_160__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 268 31
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 268 31
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 268 20
  # $4.1: @FILE = call(write_383, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 268 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_5_160__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_5_160__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_5_160__stack_frame_size: .word 16

  .loc 5 276 16
  .text
anonymous_function_6_161:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_6_161__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_6_161__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 278 31
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 278 31
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: file.1:rsi $3.1:rbx 
  .loc 5 278 20
  # $4.1: @FILE = call(write_383, file.1, $3.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rbx
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: $4.1:rax 
  .loc 5 278 20
  # $5.1: @FILE = call(write_383, $4.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_259[rip] # ".address"
  call write_383
  # [discarded value]: $4.1
  # [live values]: $5.1:rax 
  .loc 5 278 13
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_6_161__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__anonymous_function_6_161__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_6_161__stack_frame_size: .word 16

  .loc 5 286 16
  .text
anonymous_function_7_162:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_7_162__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_7_162__1:
  # value.1: @IR_Variable_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 288 31
  # $2.1: @IR_Variable = load_struct_member(value.1, variable)
  mov rax, [rdi+48]
  # [live values]: value.1:rdi file.1:rsi $2.1:rax 
  .loc 5 288 31
  # $3.1: @String = load_struct_member($2.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: value.1:rdi file.1:rsi $3.1:rbx 
  .loc 5 288 20
  # $4.1: @FILE = call(write_383, file.1, $3.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: file.1
  # [live values]: value.1:[rbp-8] $4.1:rax 
  .loc 5 288 20
  # $5.1: @FILE = call(write_385, $4.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $4.1
  # [live values]: value.1:[rbp-8] $5.1:rax 
  .loc 5 288 69
  # $6.1: isize = load_struct_member(value.1, version)
  mov rbx, [rbp-8]
  mov r15, [rbx+56]
  # [discarded value]: value.1
  # [live values]: $5.1:rax $6.1:r15 
  .loc 5 288 20
  # $7.1: @FILE = call(write_382, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: $7.1:rax 
  .loc 5 288 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_7_162__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_7_162__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_7_162__stack_frame_size: .word 16

  .loc 5 295 8
  .text
init_163:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_163__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_163__1:
  # self.1: @IR_Variable_Value = load_variable(self)
  # [live values]: self.1:rdi 
  # variable.1: @IR_Variable = load_variable(variable)
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 296 5
  # store_struct_member(self.1, variable, variable.1)
  mov QWORD PTR [rdi+48], rsi
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 297 20
  # $1.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi variable.1:rsi $1.1:rax 
  .loc 5 297 20
  # $2.1: isize = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi variable.1:rsi $2.1:rbx 
  .loc 5 297 20
  # $3.1: isize = $2.1 + 1
  mov rax, rbx
  inc rax
  # [discarded value]: $2.1
  # [live values]: self.1:rdi variable.1:rsi $3.1:rax 
  .loc 5 297 5
  # store_struct_member(self.1, version, $3.1)
  mov QWORD PTR [rdi+56], rax
  # [discarded value]: $3.1
  # [live values]: self.1:rdi variable.1:rsi 
  .loc 5 298 5
  # $4.1: @List = load_struct_member(variable.1, values)
  mov rax, [rsi+32]
  # [discarded value]: variable.1
  # [live values]: self.1:rdi $4.1:rax 
  .loc 5 298 5
  # call(append_364, $4.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, [rbp-8]
  call append_364
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] 
  .loc 5 299 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__init_163__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_163__end:
  mov rsp, rbp
  pop rbp
  ret

init_163__stack_frame_size: .word 16

  .loc 5 304 16
  .text
anonymous_function_8_164:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_8_164__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_8_164__1:
  # value.1: @IR_Variable_Address_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 306 31
  # $2.1: @IR_Variable_Value = load_struct_member(value.1, variable_value)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 306 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 306 20
  # $4.1: @FILE = call(write_383, $3.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_259[rip] # ".address"
  call write_383
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 306 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_8_164__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_8_164__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_8_164__stack_frame_size: .word 16

  .loc 5 314 16
  .text
anonymous_function_9_165:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_9_165__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_9_165__1:
  # value.1: @IR_Function_Address_Value = load_variable(value)
  # [live values]: value.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: value.1:rdi file.1:rsi 
  .loc 5 316 46
  # $2.1: @IR_Function = load_struct_member(value.1, function)
  mov rax, [rdi+48]
  # [discarded value]: value.1
  # [live values]: file.1:rsi $2.1:rax 
  .loc 5 316 20
  # $3.1: @FILE = call(write_function_label_4, file.1, $2.1)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, rax
  call write_function_label_4
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 316 20
  # $4.1: @FILE = call(write_383, $3.1, ".address")
  mov rdi, rax
  lea rsi, .LABEL__string_259[rip] # ".address"
  call write_383
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 316 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_9_165__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_9_165__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_9_165__stack_frame_size: .word 16

  .loc 5 333 8
  .text
has_instructions_166:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_instructions_166__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_instructions_166__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 334 12
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 334 12
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 5 334 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_instructions_166__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_instructions_166__end:
  mov rsp, rbp
  pop rbp
  ret

has_instructions_166__stack_frame_size: .word 16

  .loc 5 337 8
  .text
prepend_167:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_167__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_167__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 338 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 339 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rsi+40], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 340 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 340 5
  # store_struct_member(instruction.1, next_instruction, $1.1)
  mov QWORD PTR [rsi+48], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 341 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 341 9
  # $3.1: bool = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__prepend_167__2, .LABEL__prepend_167__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__prepend_167__4
.LABEL__prepend_167__2:
  .loc 5 342 9
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_167__3)
.LABEL__prepend_167__3:
  .loc 5 346 5
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 347 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__prepend_167__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__prepend_167__4:
  .loc 5 344 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 344 9
  # store_struct_member($4.1, prev_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__prepend_167__3)
  jmp .LABEL__prepend_167__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_167__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_167__stack_frame_size: .word 32

  .loc 5 350 8
  .text
append_168:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_168__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_168__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 351 5
  # store_struct_member(instruction.1, parent_block, self.1)
  mov QWORD PTR [rsi+32], rdi
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 352 36
  # $1.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 352 5
  # store_struct_member(instruction.1, prev_instruction, $1.1)
  mov QWORD PTR [rsi+40], rax
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 353 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rsi+48], 0
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 354 9
  # $2.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rdi+40]
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rax 
  .loc 5 354 9
  # $3.1: bool = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi instruction.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__append_168__2, .LABEL__append_168__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_168__4
.LABEL__append_168__2:
  .loc 5 355 9
  # store_struct_member(self.1, first_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+32], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_168__3)
.LABEL__append_168__3:
  .loc 5 359 5
  # store_struct_member(self.1, last_instruction, instruction.1)
  mov rax, [rbp-17]
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+40], rbx
  # [live values]: self.1:rax:[rbp-17] instruction.1:rbx:[rbp-9] $3.1:[rbp-1] 
  .loc 5 360 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__append_168__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__append_168__4:
  .loc 5 357 9
  # $4.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 5 357 9
  # store_struct_member($4.1, next_instruction, instruction.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:r15:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__append_168__3)
  jmp .LABEL__append_168__3
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_168__end:
  mov rsp, rbp
  pop rbp
  ret

append_168__stack_frame_size: .word 32

  .loc 5 363 8
  .text
append_jump_169:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_169__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_169__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # block.1: @IR_Block = load_variable(block)
  # [live values]: self.1:rdi block.1:rsi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-16] block.1:[rbp-8] $1.1:rax 
  .loc 5 364 23
  # instruction.1: @IR_Direct_Jump_Instruction = new IR_Direct_Jump_Instruction(object_type = IR_Direct_Jump_Instruction, result_value = null, block = block.1, dump = anonymous_function_15_200.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Direct_Jump_Instruction
  mov rbx, IR_Direct_Jump_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_15_200.address
  lea r15, anonymous_function_15_200[rip]
  mov [rax+57], r15
  #     .block = block.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] block.1:r15:[rbp-8] instruction.1:rax 
  .loc 5 365 5
  # $3.1: @List = load_struct_member(block.1, predecessors)
  mov rbx, [r15+24]
  # [discarded value]: block.1
  # [live values]: self.1:[rbp-16] instruction.1:rax $3.1:rbx 
  .loc 5 365 5
  # call(append_364, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov [rbp-24], rax
  call append_364
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 366 5
  # $4.1: @IR_Instruction = call(append_168, self.1, instruction.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call append_168
  # [discarded value]: $4.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 367 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__append_jump_169__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_169__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_169__stack_frame_size: .word 32

  .loc 5 370 8
  .text
append_jump_170:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_jump_170__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_jump_170__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # condition_value.1: @IR_Value = load_variable(condition_value)
  # [live values]: self.1:rdi condition_value.1:rsi 
  # true_block.1: @IR_Block = load_variable(true_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx 
  # false_block.1: @IR_Block = load_variable(false_block)
  # [live values]: self.1:rdi condition_value.1:rsi true_block.1:rdx false_block.1:rcx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rcx
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:[rbp-16] false_block.1:[rbp-8] $1.1:rax 
  .loc 5 371 23
  # instruction.1: @IR_Conditional_Jump_Instruction = new IR_Conditional_Jump_Instruction(object_type = IR_Conditional_Jump_Instruction, result_value = null, true_block = true_block.1, false_block = false_block.1, dump = anonymous_function_14_198.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-40], rax
  mov rdi, 81
  call malloc
  #     .object_type = IR_Conditional_Jump_Instruction
  mov rbx, IR_Conditional_Jump_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_14_198.address
  lea r15, anonymous_function_14_198[rip]
  mov [rax+57], r15
  #     .true_block = true_block.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+65], r15
  #     .false_block = false_block.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+73], r14
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] condition_value.1:[rbp-24] true_block.1:r15:[rbp-16] false_block.1:r14:[rbp-8] instruction.1:rax 
  .loc 5 372 5
  # call(set_operand_value_178, instruction.1, "condition", condition_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "condition"
  mov rdx, [rbp-24]
  mov [rbp-40], rax
  call set_operand_value_178
  # [discarded value]: condition_value.1
  # [live values]: self.1:[rbp-32] true_block.1:[rbp-16] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  .loc 5 373 5
  # $3.1: @List = load_struct_member(true_block.1, predecessors)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: true_block.1
  # [live values]: self.1:[rbp-32] false_block.1:[rbp-8] instruction.1:[rbp-40] $3.1:rbx 
  .loc 5 373 5
  # call(append_364, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_364
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] false_block.1:[rbp-8] instruction.1:[rbp-40] 
  .loc 5 374 5
  # $4.1: @List = load_struct_member(false_block.1, predecessors)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [discarded value]: false_block.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] $4.1:rbx 
  .loc 5 374 5
  # call(append_364, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-32]
  call append_364
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] instruction.1:[rbp-40] 
  .loc 5 375 5
  # $5.1: @IR_Instruction = call(append_168, self.1, instruction.1)
  mov rdi, [rbp-32]
  mov rsi, [rbp-40]
  call append_168
  # [discarded value]: $5.1
  # [discarded value]: self.1
  # [live values]: instruction.1:[rbp-40] 
  .loc 5 376 5
  # return(instruction.1)
  mov rax, [rbp-40]
  jmp .LABEL__append_jump_170__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__append_jump_170__end:
  mov rsp, rbp
  pop rbp
  ret

append_jump_170__stack_frame_size: .word 48

  .loc 5 379 8
  .text
remove_171:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_171__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_171__1:
  # self.1: @IR_Block = load_variable(self)
  # [live values]: self.1:rdi 
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: self.1:rdi instruction.1:rsi 
  .loc 5 380 9
  # $1.1: @IR_Block = load_struct_member(instruction.1, parent_block)
  mov rax, [rsi+32]
  # [live values]: self.1:rdi instruction.1:rsi $1.1:rax 
  .loc 5 380 9
  # $2.1: bool = $1.1 != self.1
  cmp rax, rdi
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi instruction.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__remove_171__2, .LABEL__remove_171__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__remove_171__3
.LABEL__remove_171__2:
  .loc 5 381 9
  # call(abort_388, "Tried to remove instruction belonging to another block")
  lea rdi, .LABEL__string_261[rip] # "Tried to remove instruction belonging to another block"
  call abort_388
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_171__3:
  .loc 5 383 9
  # $3.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 5 383 9
  # $4.1: bool = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  # jump($4.1, .LABEL__remove_171__4, .LABEL__remove_171__5)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__remove_171__5
.LABEL__remove_171__4:
  .loc 5 384 9
  # $5.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx 
  .loc 5 384 57
  # $6.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov r15, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $5.1:rbx $6.1:r15 
  .loc 5 384 9
  # store_struct_member($5.1, next_instruction, $6.1)
  mov QWORD PTR [rbx+48], r15
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # jump(.LABEL__remove_171__5)
.LABEL__remove_171__5:
  .loc 5 386 9
  # $7.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $7.1:rbx 
  .loc 5 386 9
  # $8.1: bool = $7.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__remove_171__6, .LABEL__remove_171__7)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__remove_171__7
.LABEL__remove_171__6:
  .loc 5 387 9
  # $9.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx 
  .loc 5 387 57
  # $10.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov r15, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $9.1:rbx $10.1:r15 
  .loc 5 387 9
  # store_struct_member($9.1, prev_instruction, $10.1)
  mov QWORD PTR [rbx+40], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # jump(.LABEL__remove_171__7)
.LABEL__remove_171__7:
  .loc 5 389 9
  # $11.1: @IR_Instruction = load_struct_member(self.1, first_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $11.1:rbx 
  .loc 5 389 9
  # $12.1: bool = $11.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:r15 
  # jump($12.1, .LABEL__remove_171__8, .LABEL__remove_171__9)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__remove_171__9
.LABEL__remove_171__8:
  .loc 5 390 34
  # $13.1: @IR_Instruction = load_struct_member(instruction.1, next_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+48]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $13.1:rbx 
  .loc 5 390 9
  # store_struct_member(self.1, first_instruction, $13.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+32], rbx
  # [discarded value]: $13.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # jump(.LABEL__remove_171__9)
.LABEL__remove_171__9:
  .loc 5 392 9
  # $14.1: @IR_Instruction = load_struct_member(self.1, last_instruction)
  mov rax, [rbp-17]
  mov rbx, [rax+40]
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $14.1:rbx 
  .loc 5 392 9
  # $15.1: bool = $14.1 == instruction.1
  cmp rbx, QWORD PTR [rbp-9]
  sete r15b
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:r15 
  # jump($15.1, .LABEL__remove_171__10, .LABEL__remove_171__11)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__remove_171__11
.LABEL__remove_171__10:
  .loc 5 393 33
  # $16.1: @IR_Instruction = load_struct_member(instruction.1, prev_instruction)
  mov rax, [rbp-9]
  mov rbx, [rax+40]
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] $16.1:rbx 
  .loc 5 393 9
  # store_struct_member(self.1, last_instruction, $16.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+40], rbx
  # [discarded value]: $16.1
  # [live values]: self.1:r15:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # jump(.LABEL__remove_171__11)
.LABEL__remove_171__11:
  .loc 5 395 5
  # store_struct_member(instruction.1, parent_block, null)
  mov rax, [rbp-9]
  mov QWORD PTR [rax+32], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 396 5
  # store_struct_member(instruction.1, prev_instruction, null)
  mov QWORD PTR [rax+40], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  .loc 5 397 5
  # store_struct_member(instruction.1, next_instruction, null)
  mov QWORD PTR [rax+48], 0
  # [live values]: self.1:[rbp-17] instruction.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # return()
  jmp .LABEL__remove_171__end
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] $15.1:[rbp-21] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] $12.1:[rbp-20] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] instruction.1:[rbp-9] 
  # [discarded value]: instruction.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_171__end:
  mov rsp, rbp
  pop rbp
  ret

remove_171__stack_frame_size: .word 32

  .loc 5 400 8
  .text
dump_172:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_172__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_172__1:
  # block.1: @IR_Block = load_variable(block)
  # [live values]: block.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: block.1:rdi file.1:rsi 
  .loc 5 401 5
  # $1.1: @FILE = call(write_383, file.1, "block.")
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  lea rsi, .LABEL__string_262[rip] # "block."
  call write_383
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 401 32
  # $2.1: isize = load_struct_member(block.1, id)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: block.1:rbx:[rbp-8] file.1:[rbp-16] $1.1:rax $2.1:r15 
  .loc 5 401 5
  # $3.1: @FILE = call(write_382, $1.1, $2.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 402 30
  # $4.1: @List = load_struct_member(block.1, predecessors)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] $4.1:rbx 
  .loc 5 402 30
  # block_predecessors.1: @List_Iterator = call(create_iterator_375, $4.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $4.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:rax 
  .loc 5 403 9
  # $6.1: bool = call(has_next_378, block_predecessors.1)
  mov rdi, rax
  mov [rbp-24], rax
  call has_next_378
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:rax 
  # jump($6.1, .LABEL__dump_172__2, .LABEL__dump_172__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_172__3
.LABEL__dump_172__2:
  .loc 5 404 9
  # $7.1: @FILE = call(write_385, file.1, '(')
  mov rdi, [rbp-16]
  mov sil, 40
  call write_385
  # [discarded value]: $7.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # jump(.LABEL__dump_172__4)
.LABEL__dump_172__4:
  .loc 5 406 37
  # block_predecessor.1: @IR_Block = call(next_379, block_predecessors.1)
  mov rdi, [rbp-24]
  call next_379
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:rax 
  .loc 5 407 13
  # $10.1: @FILE = call(write_383, file.1, "block.")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_262[rip] # "block."
  mov [rbp-33], rax
  call write_383
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_predecessor.1:[rbp-33] $10.1:rax 
  .loc 5 407 40
  # $11.1: isize = load_struct_member(block_predecessor.1, id)
  mov rbx, [rbp-33]
  mov r15, [rbx+8]
  # [discarded value]: block_predecessor.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 407 13
  # $12.1: @FILE = call(write_382, $10.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  .loc 5 408 17
  # $13.1: bool = call(has_next_378, block_predecessors.1)
  mov rdi, [rbp-24]
  call has_next_378
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:rax 
  # jump($13.1, .LABEL__dump_172__6, .LABEL__dump_172__5)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_172__5
.LABEL__dump_172__6:
  .loc 5 409 17
  # $14.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $14.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__4)
  jmp .LABEL__dump_172__4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
.LABEL__dump_172__5:
  .loc 5 414 9
  # $15.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-16]
  mov sil, 41
  call write_385
  # [discarded value]: $15.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__3)
.LABEL__dump_172__3:
  .loc 5 416 5
  # $16.1: @FILE = call(write_385, file.1, ':')
  mov rdi, [rbp-16]
  mov sil, 58
  call write_385
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $16.1:rax $13.1:[rbp-26] 
  .loc 5 416 5
  # $17.1: @FILE = call(end_line_386, $16.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  .loc 5 417 29
  # block_instruction.1: @IR_Instruction = load_struct_member(block.1, first_instruction)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: block.1:rax:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:rbx $13.1:[rbp-26] 
  # jump(.LABEL__dump_172__10)
  mov [rbp-34], rbx
.LABEL__dump_172__10:
  # block_instruction.2: @IR_Instruction = phi(block_instruction.1, block_instruction.4)
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  .loc 5 418 12
  # $19.1: bool = block_instruction.2 != null
  cmp QWORD PTR [rbp-34], 0
  setne al
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:rax 
  # jump($19.1, .LABEL__dump_172__11, .LABEL__dump_172__12)
  test al, al
  mov [rbp-35], al
  jz .LABEL__dump_172__12
.LABEL__dump_172__11:
  .loc 5 419 9
  # $20.1: func (self: @IR_Instruction, file: @FILE, prefix: @String) -> @FILE = load_struct_member(block_instruction.2, dump)
  mov rax, [rbp-34]
  mov rbx, [rax+57]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:rax:[rbp-34] $19.1:[rbp-35] $20.1:rbx 
  .loc 5 419 9
  # $21.1: @FILE = call($20.1, block_instruction.2, file.1, "   ")
  mov rdi, rax
  mov rsi, [rbp-16]
  lea rdx, .LABEL__string_263[rip] # "   "
  mov rax, rbx
  call rax
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  .loc 5 420 29
  # block_instruction.4: @IR_Instruction = load_struct_member(block_instruction.2, next_instruction)
  mov rax, [rbp-34]
  mov rbx, [rax+48]
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:rbx:[rbp-34] 
  # jump(.LABEL__dump_172__10)
  mov [rbp-34], rbx
  jmp .LABEL__dump_172__10
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] block_instruction.4:[rbp-34] 
  # [discarded value]: block_instruction.4
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
.LABEL__dump_172__12:
  .loc 5 422 5
  # return(file.1)
  mov rax, [rbp-16]
  jmp .LABEL__dump_172__end
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] $19.1:[rbp-35] 
  # [discarded value]: $19.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] block_instruction.2:[rbp-34] 
  # [discarded value]: block_instruction.2
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] block_instruction.1:[rbp-34] $13.1:[rbp-26] 
  # [discarded value]: block_instruction.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] $13.1:[rbp-26] 
  # [discarded value]: $13.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] file.1:[rbp-16] block_predecessors.1:[rbp-24] 
  # [discarded value]: block_predecessors.1
  # [discarded value]: file.1
  # [discarded value]: block.1
  # [live values]: 
.LABEL__dump_172__end:
  mov rsp, rbp
  pop rbp
  ret

dump_172__stack_frame_size: .word 48

  .loc 5 437 8
  .text
create_block_173:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_block_173__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_block_173__1:
  # self.1: @IR_Function = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 438 35
  # $1.1: @List = load_struct_member(self.1, blocks)
  mov rax, [rdi+57]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 438 35
  # $2.1: isize = load_struct_member($1.1, size)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 5 438 35
  # $3.1: isize = $2.1 + 1
  mov rax, rbx
  inc rax
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  .loc 5 326 26
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] $3.1:[rbp-8] $4.1:rax 
  .loc 5 438 17
  # block.1: @IR_Block = new IR_Block(object_type = IR_Block, id = $3.1, function = self.1, predecessors = $4.1, first_instruction = null, last_instruction = null, is_being_generated = false, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 50
  call malloc
  #     .object_type = IR_Block
  mov rbx, IR_Block[rip]
  mov [rax], rbx
  #     .id = $3.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .function = self.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .predecessors = $4.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+24], r14
  #     .first_instruction = null
  mov QWORD PTR [rax+32], 0
  #     .last_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .is_being_generated = false
  mov BYTE PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+49], 0
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:r15:[rbp-16] block.1:rax 
  .loc 5 439 5
  # $6.1: @List = load_struct_member(self.1, blocks)
  mov rbx, [r15+57]
  # [discarded value]: self.1
  # [live values]: block.1:rax $6.1:rbx 
  .loc 5 439 5
  # call(append_364, $6.1, block.1)
  mov rdi, rbx
  mov rsi, rax
  mov [rbp-8], rax
  call append_364
  # [discarded value]: $6.1
  # [live values]: block.1:[rbp-8] 
  .loc 5 440 5
  # return(block.1)
  mov rax, [rbp-8]
  jmp .LABEL__create_block_173__end
  # [discarded value]: block.1
  # [live values]: 
.LABEL__create_block_173__end:
  mov rsp, rbp
  pop rbp
  ret

create_block_173__stack_frame_size: .word 32

  .loc 5 443 8
  .text
dump_174:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_174__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_174__1:
  # function.1: @IR_Function = load_variable(function)
  # [live values]: function.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: function.1:rdi file.1:rsi 
  .loc 5 444 5
  # $1.1: @FILE = call(write_function_label_4, file.1, function.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call write_function_label_4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] $1.1:rax 
  .loc 5 444 5
  # $2.1: @FILE = call(write_383, $1.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # " :: ("
  call write_383
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 445 31
  # $3.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] $3.1:rbx 
  .loc 5 445 31
  # function_parameters.1: @List_Iterator = call(create_iterator_375, $3.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $3.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:rax 
  # jump(.LABEL__dump_174__2)
  mov [rbp-24], rax
.LABEL__dump_174__2:
  .loc 5 446 12
  # $5.1: bool = call(has_next_378, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_378
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__dump_174__3, .LABEL__dump_174__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__dump_174__4
.LABEL__dump_174__3:
  .loc 5 447 34
  # function_parameter.1: @IR_Function_Parameter = call(next_379, function_parameters.1)
  mov rdi, [rbp-24]
  call next_379
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax 
  .loc 5 448 20
  # $8.1: @String = load_struct_member(function_parameter.1, name)
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:rax $8.1:rbx 
  .loc 5 448 9
  # $9.1: @FILE = call(write_383, file.1, $8.1)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_383
  # [discarded value]: $8.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $9.1:rax 
  .loc 5 448 9
  # $10.1: @FILE = call(write_383, $9.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $9.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] function_parameter.1:[rbp-33] $10.1:rax 
  .loc 5 448 63
  # $11.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rbp-33]
  mov r15, [rbx+24]
  # [discarded value]: function_parameter.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $11.1:r15 
  .loc 5 448 63
  # $12.1: @String = load_struct_member($11.1, name)
  mov rbx, [r15+8]
  # [discarded value]: $11.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $10.1:rax $12.1:rbx 
  .loc 5 448 9
  # $13.1: @FILE = call(write_383, $10.1, $12.1)
  mov rdi, rax
  mov rsi, rbx
  call write_383
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 449 13
  # $14.1: bool = call(has_next_378, function_parameters.1)
  mov rdi, [rbp-24]
  call has_next_378
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:rax 
  # jump($14.1, .LABEL__dump_174__5, .LABEL__dump_174__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__dump_174__2
.LABEL__dump_174__5:
  .loc 5 450 13
  # $15.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $15.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # jump(.LABEL__dump_174__2)
  jmp .LABEL__dump_174__2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $14.1:[rbp-26] 
  # [discarded value]: $14.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__dump_174__4:
  .loc 5 453 5
  # $16.1: @FILE = call(write_383, file.1, ") -> ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_254[rip] # ") -> "
  call write_383
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax 
  .loc 5 453 31
  # $17.1: @IR_Type = load_struct_member(function.1, return_type)
  mov rbx, [rbp-8]
  mov r15, [rbx+40]
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $17.1:r15 
  .loc 5 453 31
  # $18.1: @String = load_struct_member($17.1, name)
  mov r14, [r15+8]
  # [discarded value]: $17.1
  # [live values]: function.1:rbx:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $16.1:rax $18.1:r14 
  .loc 5 453 5
  # $19.1: @FILE = call(write_383, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $19.1:rax 
  .loc 5 453 5
  # $20.1: @FILE = call(write_383, $19.1, " {")
  mov rdi, rax
  lea rsi, .LABEL__string_264[rip] # " {"
  call write_383
  # [discarded value]: $19.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $20.1:rax 
  .loc 5 453 5
  # $21.1: @FILE = call(end_line_386, $20.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 454 22
  # $22.1: @List = load_struct_member(function.1, blocks)
  mov rax, [rbp-8]
  mov rbx, [rax+57]
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] $22.1:rbx 
  .loc 5 454 22
  # block_item.1: @List_Item = load_struct_member($22.1, first_item)
  mov r15, [rbx]
  # [discarded value]: $22.1
  # [live values]: function.1:rax:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:r15 
  # jump(.LABEL__dump_174__7)
  mov [rbp-33], r15
.LABEL__dump_174__7:
  # block_item.2: @List_Item = phi(block_item.1, block_item.4)
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  .loc 5 455 12
  # $24.1: bool = block_item.2 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:rax 
  # jump($24.1, .LABEL__dump_174__8, .LABEL__dump_174__9)
  test al, al
  mov [rbp-34], al
  jz .LABEL__dump_174__9
.LABEL__dump_174__8:
  .loc 5 456 10
  # $26.1: @IR_Block = load_struct_member(block_item.2, data)
  mov rax, [rbp-33]
  mov rbx, [rax+16]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:rax:[rbp-33] $24.1:[rbp-34] $26.1:rbx 
  .loc 5 456 9
  # $27.1: @FILE = call(dump_172, $26.1, file.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call dump_172
  # [discarded value]: $27.1
  # [discarded value]: $26.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  .loc 5 457 22
  # block_item.4: @List_Item = load_struct_member(block_item.2, next_item)
  mov rax, [rbp-33]
  mov rbx, [rax+8]
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:rbx:[rbp-33] 
  # jump(.LABEL__dump_174__7)
  mov [rbp-33], rbx
  jmp .LABEL__dump_174__7
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] block_item.4:[rbp-33] 
  # [discarded value]: block_item.4
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
.LABEL__dump_174__9:
  .loc 5 459 5
  # $29.1: @FILE = call(write_385, file.1, '}')
  mov rdi, [rbp-16]
  mov sil, 125
  call write_385
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] $29.1:rax 
  .loc 5 459 5
  # $30.1: @FILE = call(end_line_386, $29.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $30.1
  # [discarded value]: $29.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # return()
  jmp .LABEL__dump_174__end
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] $24.1:[rbp-34] 
  # [discarded value]: $24.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] block_item.2:[rbp-33] 
  # [discarded value]: block_item.2
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] block_item.1:[rbp-33] 
  # [discarded value]: block_item.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [live values]: function.1:[rbp-8] file.1:[rbp-16] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: file.1
  # [discarded value]: function.1
  # [live values]: 
.LABEL__dump_174__end:
  mov rsp, rbp
  pop rbp
  ret

dump_174__stack_frame_size: .word 48

  .loc 5 489 77
  .text
anonymous_function_10_175:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_10_175__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_10_175__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [discarded value]: prefix.1
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 490 9
  # $1.1: @FILE = call(flush_387, file.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  call flush_387
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-8] 
  .loc 5 491 15
  # $2.1: @String = call(clone_391, "Unsupported type: ")
  lea rdi, .LABEL__string_76[rip] # "Unsupported type: "
  call clone_391
  # [live values]: instruction.1:[rbp-8] $2.1:rax 
  .loc 5 491 50
  # $3.1: @Object_Type = load_struct_member(instruction.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:r15 
  .loc 5 491 50
  # $4.1: @String = load_struct_member_address($3.1, name)
  mov rbx, r15
  add rbx, 8
  # [live values]: $2.1:rax $3.1:r15 $4.1:rbx 
  .loc 5 491 15
  # $5.1: @String = call(append_400, $2.1, $4.1)
  mov rdi, rax
  mov rsi, rbx
  call append_400
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: $5.1:rax 
  .loc 5 491 9
  # call(abort_388, $5.1)
  mov rdi, rax
  call abort_388
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__anonymous_function_10_175__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_10_175__stack_frame_size: .word 16

  .loc 5 495 8
  .text
dump_ir_instruction_result_176:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_instruction_result_176__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_instruction_result_176__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: self.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: self.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 496 5
  # $1.1: @FILE = call(write_383, file.1, prefix.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rdx
  call write_383
  # [discarded value]: $1.1
  # [discarded value]: prefix.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  .loc 5 497 9
  # $2.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $2.1:rbx 
  .loc 5 497 9
  # $3.1: bool = $2.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $2.1
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:r15 
  # jump($3.1, .LABEL__dump_ir_instruction_result_176__2, .LABEL__dump_ir_instruction_result_176__3)
  test r15b, r15b
  mov [rbp-17], r15b
  jz .LABEL__dump_ir_instruction_result_176__3
.LABEL__dump_ir_instruction_result_176__2:
  .loc 5 498 20
  # $4.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $4.1:rbx 
  .loc 5 498 9
  # $5.1: @FILE = call(write_154, file.1, $4.1, false)
  mov rdi, [rbp-16]
  mov rsi, rbx
  mov dl, 0
  call write_154
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 498 9
  # $6.1: @FILE = call(write_383, $5.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 498 64
  # $7.1: @IR_Variable_Value = load_struct_member(self.1, result_value)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 498 64
  # $8.1: @IR_Type = load_struct_member($7.1, type)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $8.1:r14 
  .loc 5 498 64
  # $9.1: @String = load_struct_member($8.1, name)
  mov r15, [r14+8]
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $6.1:rax $9.1:r15 
  .loc 5 498 9
  # $10.1: @FILE = call(write_383, $6.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_383
  # [discarded value]: $9.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] $10.1:rax 
  .loc 5 498 9
  # $11.1: @FILE = call(write_383, $10.1, " = ")
  mov rdi, rax
  lea rsi, .LABEL__string_92[rip] # " = "
  call write_383
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__dump_ir_instruction_result_176__3)
.LABEL__dump_ir_instruction_result_176__3:
  # return()
  jmp .LABEL__dump_ir_instruction_result_176__end
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file.1:[rbp-16] 
  # [discarded value]: file.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__dump_ir_instruction_result_176__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_instruction_result_176__stack_frame_size: .word 32

  .loc 5 502 8
  .text
is_exit_instruction_177:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_exit_instruction_177__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_exit_instruction_177__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 503 9
  # $1.1: bool = self.1 == null
  cmp rdi, 0
  sete al
  # [live values]: self.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__is_exit_instruction_177__2, .LABEL__is_exit_instruction_177__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__is_exit_instruction_177__3
.LABEL__is_exit_instruction_177__2:
  .loc 5 504 9
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__is_exit_instruction_177__3:
  .loc 5 506 9
  # $3.1: bool = call(is_389, self.1, IR_Jump_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Jump_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:rax 
  # jump($3.1, .LABEL__is_exit_instruction_177__6, .LABEL__is_exit_instruction_177__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__is_exit_instruction_177__5
.LABEL__is_exit_instruction_177__6:
  .loc 5 506 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # jump($3.3, .LABEL__is_exit_instruction_177__7, .LABEL__is_exit_instruction_177__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__is_exit_instruction_177__8
.LABEL__is_exit_instruction_177__7:
  .loc 5 507 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
.LABEL__is_exit_instruction_177__8:
  .loc 5 509 9
  # $5.1: bool = call(is_389, self.1, IR_Direct_Call_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Direct_Call_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:rax 
  # jump($5.1, .LABEL__is_exit_instruction_177__10, .LABEL__is_exit_instruction_177__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__10:
  .loc 5 510 20
  # self.1: @IR_Direct_Call_Instruction = self.1
  mov rax, [rbp-9]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] self.1:rax 
  .loc 5 511 24
  # function.1: @IR_Function = load_struct_member(self.1, function)
  mov rbx, [rax+73]
  # [discarded value]: self.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx 
  .loc 5 512 13
  # $8.1: @String = load_struct_member(function.1, name)
  mov rax, [rbx+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rbx $8.1:rax 
  .loc 5 512 13
  # $9.1: bool = call(equals_392, $8.1, "abort")
  mov rdi, rax
  lea rsi, .LABEL__string_265[rip] # "abort"
  mov [rbp-19], rbx
  call equals_392
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:rax 
  # jump($9.1, .LABEL__is_exit_instruction_177__12, .LABEL__is_exit_instruction_177__13)
  test al, al
  mov [rbp-20], al
  jz .LABEL__is_exit_instruction_177__13
.LABEL__is_exit_instruction_177__12:
  .loc 5 513 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
.LABEL__is_exit_instruction_177__13:
  .loc 5 515 13
  # $10.1: @String = load_struct_member(function.1, name)
  mov rax, [rbp-19]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 5 515 13
  # $12.1: bool = call(equals_392, $10.1, "exit")
  mov rdi, rbx
  lea rsi, .LABEL__string_266[rip] # "exit"
  call equals_392
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:rax 
  # jump($12.1, .LABEL__is_exit_instruction_177__15, .LABEL__is_exit_instruction_177__16)
  test al, al
  mov [rbp-21], al
  jz .LABEL__is_exit_instruction_177__16
.LABEL__is_exit_instruction_177__15:
  .loc 5 515 45
  # $13.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $13.1:rbx 
  .loc 5 515 45
  # $14.1: isize = load_struct_member($13.1, size)
  mov r15, [rbx+16]
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $14.1:r15 
  .loc 5 515 45
  # $15.1: bool = $14.1 == 1
  cmp r15, 1
  sete bl
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $15.1:rbx 
  .loc 5 515 13
  # $12.2: bool = $15.1
  mov [rbp-22], bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:rbx:[rbp-21] 
  # jump(.LABEL__is_exit_instruction_177__16)
  mov [rbp-21], bl
.LABEL__is_exit_instruction_177__16:
  .loc 5 515 13
  # $12.3: bool = phi($12.1, $12.2)
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # jump($12.3, .LABEL__is_exit_instruction_177__17, .LABEL__is_exit_instruction_177__11)
  mov al, [rbp-21]
  test al, al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__17:
  .loc 5 516 38
  # $16.1: @List = load_struct_member(function.1, parameters)
  mov rax, [rbp-19]
  mov rbx, [rax+32]
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:rax:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $16.1:rbx 
  .loc 5 516 38
  # function_parameter.1: @IR_Function_Parameter = call(get_372, $16.1, 0)
  mov rdi, rbx
  xor rsi, rsi
  call get_372
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] function_parameter.1:rax 
  .loc 5 517 17
  # $19.1: @IR_Type = load_struct_member(function_parameter.1, type)
  mov rbx, [rax+24]
  # [discarded value]: function_parameter.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $19.1:rbx 
  .loc 5 517 17
  # $20.1: bool = call(is_389, $19.1, IR_Int_Type)
  mov rdi, rbx
  mov rsi, IR_Int_Type[rip]
  call is_389
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:rax 
  # jump($20.1, .LABEL__is_exit_instruction_177__19, .LABEL__is_exit_instruction_177__11)
  test al, al
  mov [rbp-22], al
  jz .LABEL__is_exit_instruction_177__11
.LABEL__is_exit_instruction_177__19:
  .loc 5 518 17
  # return(true)
  mov al, 1
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
.LABEL__is_exit_instruction_177__11:
  .loc 5 522 5
  # return(false)
  mov al, 0
  jmp .LABEL__is_exit_instruction_177__end
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] $20.1:[rbp-22] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] $12.3:[rbp-21] 
  # [discarded value]: $12.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] $12.2:[rbp-21] 
  # [discarded value]: $12.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] $12.1:[rbp-21] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] function.1:[rbp-19] 
  # [discarded value]: function.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:[rbp-11] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.3:[rbp-10] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
.LABEL__is_exit_instruction_177__5:
  .loc 5 506 41
  # $3.2: bool = call(is_389, self.1, IR_Return_Instruction)
  mov rdi, [rbp-9]
  mov rsi, IR_Return_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:rax:[rbp-10] 
  # jump(.LABEL__is_exit_instruction_177__6)
  mov [rbp-10], al
  jmp .LABEL__is_exit_instruction_177__6
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] $3.2:[rbp-10] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] $3.1:[rbp-10] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_exit_instruction_177__end:
  mov rsp, rbp
  pop rbp
  ret

is_exit_instruction_177__stack_frame_size: .word 32

  .loc 5 525 8
  .text
set_operand_value_178:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR set_operand_value_178__stack_frame_size[rip]
  sub rsp, rax
.LABEL__set_operand_value_178__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 5 526 5
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx $1.1:rax 
  .loc 5 526 5
  # $2.1: @IR_Value = call(put_181, $1.1, key.1, value.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rdx
  call put_181
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [discarded value]: key.1
  # [live values]: self.1:[rbp-8] value.1:[rbp-16] 
  .loc 5 527 5
  # $3.1: @List = load_struct_member(value.1, user_instructions)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $3.1:rbx 
  .loc 5 527 5
  # call(append_364, $3.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_364
  # [discarded value]: $3.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__set_operand_value_178__end
  # [live values]: 
.LABEL__set_operand_value_178__end:
  mov rsp, rbp
  pop rbp
  ret

set_operand_value_178__stack_frame_size: .word 16

  .loc 5 530 8
  .text
replace_operand_value_179:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_operand_value_179__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_operand_value_179__1:
  # self.1: @IR_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 5 531 5
  # $1.1: @List = load_struct_member(old_value.1, user_instructions)
  mov rax, [rsi+24]
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx $1.1:rax 
  .loc 5 531 5
  # $2.1: @List = call(remove_366, $1.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov [rbp-24], rdx
  call remove_366
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $2.1:rax 
  .loc 5 531 5
  # $3.1: @List = call(prune_368, $2.1)
  mov rdi, rax
  call prune_368
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  .loc 5 532 5
  # $4.1: @List = load_struct_member(new_value.1, user_instructions)
  mov rax, [rbp-24]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:rax:[rbp-24] $4.1:rbx 
  .loc 5 532 5
  # call(append_364, $4.1, self.1)
  mov rdi, rbx
  mov rsi, [rbp-8]
  call append_364
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  .loc 5 533 9
  # $5.1: bool = call(is_389, self.1, IR_Phi_Instruction)
  mov rdi, [rbp-8]
  mov rsi, IR_Phi_Instruction[rip]
  call is_389
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:rax 
  # jump($5.1, .LABEL__replace_operand_value_179__2, .LABEL__replace_operand_value_179__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_operand_value_179__4
.LABEL__replace_operand_value_179__2:
  .loc 5 534 9
  # $7.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $7.1:rbx 
  .loc 5 534 9
  # $8.1: @IR_Value = call(remove_182, $7.1, old_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  call remove_182
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  .loc 5 535 9
  # $9.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $9.1:rbx 
  .loc 5 535 9
  # $10.1: @IR_Value = call(put_181, $9.1, new_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  mov rdx, [rbp-24]
  call put_181
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_179__3)
.LABEL__replace_operand_value_179__3:
  # return()
  jmp .LABEL__replace_operand_value_179__end
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
.LABEL__replace_operand_value_179__4:
  .loc 5 537 9
  # $6.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] $6.1:rbx 
  .loc 5 537 9
  # call(replace_values_185, $6.1, old_value.1, new_value.1)
  mov rdi, rbx
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call replace_values_185
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # jump(.LABEL__replace_operand_value_179__3)
  jmp .LABEL__replace_operand_value_179__3
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] $5.1:[rbp-25] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] old_value.1:[rbp-16] new_value.1:[rbp-24] 
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__replace_operand_value_179__end:
  mov rsp, rbp
  pop rbp
  ret

replace_operand_value_179__stack_frame_size: .word 32

  .loc 6 13 8
  .text
get_180:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_180__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_180__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 14 17
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: key.1:rsi entry.1:rax 
  # jump(.LABEL__get_180__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__get_180__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 15 12
  # $2.1: bool = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__get_180__3, .LABEL__get_180__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__get_180__4
.LABEL__get_180__3:
  .loc 6 16 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 6 16 13
  # $4.1: bool = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__get_180__5, .LABEL__get_180__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__get_180__6
.LABEL__get_180__5:
  .loc 6 17 20
  # $5.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] $5.1:rbx 
  .loc 6 17 13
  # return($5.1)
  mov rax, rbx
  mov [rbp-26], rbx
  jmp .LABEL__get_180__end
  # [discarded value]: $5.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__get_180__6:
  .loc 6 19 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__get_180__2)
  mov [rbp-8], rbx
  jmp .LABEL__get_180__2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__get_180__4:
  .loc 6 21 5
  # return(null)
  xor rax, rax
  jmp .LABEL__get_180__end
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [live values]: 
.LABEL__get_180__end:
  mov rsp, rbp
  pop rbp
  ret

get_180__stack_frame_size: .word 32

  .loc 6 24 8
  .text
put_181:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR put_181__stack_frame_size[rip]
  sub rsp, rax
.LABEL__put_181__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi key.1:rsi value.1:rdx 
  .loc 6 25 17
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi value.1:rdx entry.1:rax 
  # jump(.LABEL__put_181__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__put_181__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 26 12
  # $2.1: bool = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__put_181__3, .LABEL__put_181__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__put_181__4
.LABEL__put_181__3:
  .loc 6 27 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $3.1:rbx 
  .loc 6 27 13
  # $4.1: bool = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:r15 
  # jump($4.1, .LABEL__put_181__5, .LABEL__put_181__6)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__put_181__6
.LABEL__put_181__5:
  .loc 6 28 29
  # old_value.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 29 13
  # store_struct_member(entry.2, value, value.1)
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] old_value.1:rbx 
  .loc 6 30 13
  # return(old_value.1)
  mov rax, rbx
  mov [rbp-42], rbx
  jmp .LABEL__put_181__end
  # [discarded value]: old_value.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
.LABEL__put_181__6:
  .loc 6 32 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__put_181__2)
  mov [rbp-8], rbx
  jmp .LABEL__put_181__2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
.LABEL__put_181__4:
  .loc 6 34 76
  # $7.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] $7.1:rbx 
  .loc 6 34 13
  # entry.7: @IR_Values_Map_Entry = new IR_Values_Map_Entry(key = key.1, value = value.1, prev_entry = $7.1, next_entry = null)
  mov [rbp-41], rbx
  mov rdi, 32
  call malloc
  #     .key = key.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax], rbx
  #     .value = value.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .prev_entry = $7.1
  mov r14, [rbp-41]
  mov QWORD PTR [rax+16], r14
  #     .next_entry = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] 
  .loc 6 35 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov r14, [rbp-32]
  mov r13, [r14+8]
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $9.1:r13 
  .loc 6 35 9
  # $10.1: bool = $9.1 == null
  cmp r13, 0
  sete r12b
  # [discarded value]: $9.1
  # [live values]: self.1:r14:[rbp-32] key.1:rbx:[rbp-24] value.1:r15:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rax:[rbp-8] $10.1:r12 
  # jump($10.1, .LABEL__put_181__8, .LABEL__put_181__10)
  test r12b, r12b
  mov [rbp-8], rax
  mov [rbp-34], r12b
  jz .LABEL__put_181__10
.LABEL__put_181__8:
  .loc 6 36 9
  # store_struct_member(self.1, first_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_181__9)
.LABEL__put_181__9:
  .loc 6 40 5
  # store_struct_member(self.1, last_entry, entry.7)
  mov rax, [rbp-32]
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:rbx:[rbp-8] $10.1:[rbp-34] 
  .loc 6 41 5
  # return(null)
  xor rax, rax
  jmp .LABEL__put_181__end
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
.LABEL__put_181__10:
  .loc 6 38 9
  # $11.1: @IR_Values_Map_Entry = load_struct_member(self.1, last_entry)
  mov rax, [rbp-32]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] $11.1:rbx 
  .loc 6 38 9
  # store_struct_member($11.1, next_entry, entry.7)
  mov r15, [rbp-8]
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:r15:[rbp-8] $10.1:[rbp-34] 
  # jump(.LABEL__put_181__9)
  jmp .LABEL__put_181__9
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] $10.1:[rbp-34] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] entry.7:[rbp-8] 
  # [discarded value]: entry.7
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] key.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__put_181__end:
  mov rsp, rbp
  pop rbp
  ret

put_181__stack_frame_size: .word 48

  .loc 6 44 8
  .text
remove_182:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_182__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_182__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # key.1: @Any = load_variable(key)
  # [live values]: self.1:rdi key.1:rsi 
  .loc 6 45 17
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi key.1:rsi entry.1:rax 
  # jump(.LABEL__remove_182__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_182__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 46 12
  # $2.1: bool = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_182__3, .LABEL__remove_182__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_182__4
.LABEL__remove_182__3:
  .loc 6 47 13
  # $3.1: @Any = load_struct_member(entry.2, key)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 47 13
  # $4.1: bool = $3.1 == key.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_182__5, .LABEL__remove_182__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_182__6
.LABEL__remove_182__5:
  .loc 6 48 20
  # $5.1: @IR_Values_Map_Entry = call(unlink_184, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_184
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 6 48 20
  # $6.1: @IR_Value = load_struct_member($5.1, value)
  mov rbx, [rax+8]
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] $6.1:rbx 
  .loc 6 48 13
  # return($6.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__remove_182__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_182__6:
  .loc 6 50 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_182__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_182__2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_182__4:
  .loc 6 52 5
  # return(null)
  xor rax, rax
  jmp .LABEL__remove_182__end
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] key.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: key.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_182__end:
  mov rsp, rbp
  pop rbp
  ret

remove_182__stack_frame_size: .word 48

  .loc 6 55 8
  .text
remove_values_183:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_values_183__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_values_183__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 6 56 17
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [live values]: self.1:rdi value.1:rsi entry.1:rax 
  # jump(.LABEL__remove_values_183__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_values_183__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 57 12
  # $2.1: bool = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_values_183__3, .LABEL__remove_values_183__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_values_183__4
.LABEL__remove_values_183__3:
  .loc 6 58 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 58 13
  # $4.1: bool = $3.1 == value.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_values_183__5, .LABEL__remove_values_183__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_values_183__6
.LABEL__remove_values_183__5:
  .loc 6 59 13
  # $5.1: @IR_Values_Map_Entry = call(unlink_184, self.1, entry.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  call unlink_184
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_values_183__6)
.LABEL__remove_values_183__6:
  .loc 6 61 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_values_183__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_values_183__2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_values_183__4:
  # return()
  jmp .LABEL__remove_values_183__end
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_values_183__end:
  mov rsp, rbp
  pop rbp
  ret

remove_values_183__stack_frame_size: .word 32

  .loc 6 65 8
  .text
unlink_184:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR unlink_184__stack_frame_size[rip]
  sub rsp, rax
.LABEL__unlink_184__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # entry.1: @IR_Values_Map_Entry = load_variable(entry)
  # [live values]: self.1:rdi entry.1:rsi 
  .loc 6 66 9
  # $1.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rsi+16]
  # [live values]: self.1:rdi entry.1:rsi $1.1:rax 
  .loc 6 66 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi entry.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__unlink_184__2, .LABEL__unlink_184__4)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__unlink_184__4
.LABEL__unlink_184__2:
  .loc 6 67 9
  # $4.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 6 67 39
  # $5.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx $5.1:r15 
  .loc 6 67 9
  # store_struct_member($4.1, next_entry, $5.1)
  mov QWORD PTR [rbx+24], r15
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_184__3)
.LABEL__unlink_184__3:
  .loc 6 71 9
  # $6.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 6 71 9
  # $7.1: bool = $6.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  # jump($7.1, .LABEL__unlink_184__5, .LABEL__unlink_184__7)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__unlink_184__7
.LABEL__unlink_184__5:
  .loc 6 72 9
  # $9.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx 
  .loc 6 72 39
  # $10.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov r15, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $9.1:rbx $10.1:r15 
  .loc 6 72 9
  # store_struct_member($9.1, prev_entry, $10.1)
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_184__6)
.LABEL__unlink_184__6:
  .loc 6 76 5
  # return(entry.1)
  mov rax, [rbp-9]
  jmp .LABEL__unlink_184__end
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
.LABEL__unlink_184__7:
  .loc 6 74 27
  # $8.1: @IR_Values_Map_Entry = load_struct_member(entry.1, prev_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] $8.1:rbx 
  .loc 6 74 9
  # store_struct_member(self.1, last_entry, $8.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # jump(.LABEL__unlink_184__6)
  jmp .LABEL__unlink_184__6
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] $7.1:[rbp-18] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__unlink_184__4:
  .loc 6 69 28
  # $3.1: @IR_Values_Map_Entry = load_struct_member(entry.1, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 6 69 9
  # store_struct_member(self.1, first_entry, $3.1)
  mov r15, [rbp-17]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:r15:[rbp-17] entry.1:rax:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__unlink_184__3)
  jmp .LABEL__unlink_184__3
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] entry.1:[rbp-9] 
  # [discarded value]: entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__unlink_184__end:
  mov rsp, rbp
  pop rbp
  ret

unlink_184__stack_frame_size: .word 32

  .loc 6 79 8
  .text
replace_values_185:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_values_185__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_values_185__1:
  # self.1: @IR_Values_Map = load_variable(self)
  # [live values]: self.1:rdi 
  # old_value.1: @IR_Value = load_variable(old_value)
  # [live values]: self.1:rdi old_value.1:rsi 
  # new_value.1: @IR_Value = load_variable(new_value)
  # [live values]: self.1:rdi old_value.1:rsi new_value.1:rdx 
  .loc 6 80 17
  # entry.1: @IR_Values_Map_Entry = load_struct_member(self.1, first_entry)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: old_value.1:rsi new_value.1:rdx entry.1:rax 
  # jump(.LABEL__replace_values_185__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_values_185__2:
  # entry.2: @IR_Values_Map_Entry = phi(entry.1, entry.6)
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  .loc 6 81 12
  # $2.1: bool = entry.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_values_185__3, .LABEL__replace_values_185__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_values_185__4
.LABEL__replace_values_185__3:
  .loc 6 82 13
  # $3.1: @IR_Value = load_struct_member(entry.2, value)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 6 82 13
  # $4.1: bool = $3.1 == old_value.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_values_185__5, .LABEL__replace_values_185__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_values_185__6
.LABEL__replace_values_185__5:
  .loc 6 83 13
  # store_struct_member(entry.2, value, new_value.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  # [live values]: old_value.1:[rbp-24] new_value.1:rbx:[rbp-16] entry.1:[rbp-8] entry.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_values_185__6)
.LABEL__replace_values_185__6:
  .loc 6 85 17
  # entry.6: @IR_Values_Map_Entry = load_struct_member(entry.2, next_entry)
  mov rax, [rbp-8]
  mov rbx, [rax+24]
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_values_185__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_values_185__2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] entry.6:[rbp-8] 
  # [discarded value]: entry.6
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_values_185__4:
  # return()
  jmp .LABEL__replace_values_185__end
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] entry.2:[rbp-8] 
  # [discarded value]: entry.2
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [live values]: old_value.1:[rbp-24] new_value.1:[rbp-16] entry.1:[rbp-8] 
  # [discarded value]: entry.1
  # [discarded value]: new_value.1
  # [discarded value]: old_value.1
  # [live values]: 
.LABEL__replace_values_185__end:
  mov rsp, rbp
  pop rbp
  ret

replace_values_185__stack_frame_size: .word 32

  .loc 5 548 8
  .text
dump_ir_call_instruction_arguments_186:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR dump_ir_call_instruction_arguments_186__stack_frame_size[rip]
  sub rsp, rax
.LABEL__dump_ir_call_instruction_arguments_186__1:
  # instruction.1: @IR_Call_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  .loc 5 549 9
  # call_argument_index.1: isize = 0
  xor rax, rax
  # [live values]: instruction.1:rdi file.1:rsi call_argument_index.1:rax 
  # jump(.LABEL__dump_ir_call_instruction_arguments_186__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__dump_ir_call_instruction_arguments_186__2:
  # call_argument_index.2: isize = phi(call_argument_index.1, call_argument_index.4)
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  .loc 5 550 34
  # $1.1: isize = load_struct_member(instruction.1, arguments_size)
  mov rax, [rbp-24]
  mov rbx, [rax+65]
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $1.1:rbx 
  .loc 5 550 12
  # $2.1: bool = call_argument_index.2 < $1.1
  cmp QWORD PTR [rbp-8], rbx
  setl r15b
  # [discarded value]: $1.1
  # [live values]: instruction.1:rax:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:r15 
  # jump($2.1, .LABEL__dump_ir_call_instruction_arguments_186__3, .LABEL__dump_ir_call_instruction_arguments_186__4)
  test r15b, r15b
  mov [rbp-25], r15b
  jz .LABEL__dump_ir_call_instruction_arguments_186__4
.LABEL__dump_ir_call_instruction_arguments_186__3:
  .loc 5 551 9
  # $3.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 5 551 32
  # $4.1: @IR_Value = call(get_argument_value_188, instruction.1, call_argument_index.2)
  mov rdi, [rbp-24]
  mov rsi, [rbp-8]
  mov [rbp-33], rax
  call get_argument_value_188
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $3.1:[rbp-33] $4.1:rax 
  .loc 5 551 9
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  .loc 5 552 31
  # $6.1: isize = call_argument_index.2 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] $6.1:rax 
  .loc 5 552 9
  # call_argument_index.4: isize = $6.1
  mov [rbp-33], rax
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:rax:[rbp-8] 
  # jump(.LABEL__dump_ir_call_instruction_arguments_186__2)
  mov [rbp-8], rax
  jmp .LABEL__dump_ir_call_instruction_arguments_186__2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] call_argument_index.4:[rbp-8] 
  # [discarded value]: call_argument_index.4
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__dump_ir_call_instruction_arguments_186__4:
  # return()
  jmp .LABEL__dump_ir_call_instruction_arguments_186__end
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] call_argument_index.2:[rbp-8] 
  # [discarded value]: call_argument_index.2
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [live values]: instruction.1:[rbp-24] file.1:[rbp-16] call_argument_index.1:[rbp-8] 
  # [discarded value]: call_argument_index.1
  # [discarded value]: file.1
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__dump_ir_call_instruction_arguments_186__end:
  mov rsp, rbp
  pop rbp
  ret

dump_ir_call_instruction_arguments_186__stack_frame_size: .word 48

  .loc 5 561 8
  .text
add_arguments_187:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR add_arguments_187__stack_frame_size[rip]
  sub rsp, rax
.LABEL__add_arguments_187__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 5 562 31
  # call_arguments_item.1: @List_Item = load_struct_member(call_arguments.1, first_item)
  mov rax, [rsi]
  # [discarded value]: call_arguments.1
  # [live values]: self.1:rdi call_arguments_item.1:rax 
  # jump(.LABEL__add_arguments_187__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__add_arguments_187__2:
  # call_arguments_item.2: @List_Item = phi(call_arguments_item.1, call_arguments_item.4)
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  .loc 5 563 12
  # $2.1: bool = call_arguments_item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__add_arguments_187__3, .LABEL__add_arguments_187__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__add_arguments_187__4
.LABEL__add_arguments_187__3:
  .loc 5 564 29
  # call_argument.1: @IR_Call_Argument = load_struct_member(call_arguments_item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx 
  .loc 5 565 49
  # $5.1: isize = load_struct_member(self.1, arguments_size)
  mov r15, [rbp-16]
  mov r14, [r15+65]
  # [live values]: self.1:r15:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:rax:[rbp-8] $2.1:[rbp-17] call_argument.1:rbx $5.1:r14 
  .loc 5 565 32
  # $6.1: @String = call(get_argument_key_189, $5.1)
  mov rdi, r14
  mov [rbp-25], rbx
  call get_argument_key_189
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_argument.1:[rbp-25] $6.1:rax 
  .loc 5 565 71
  # $7.1: @IR_Value = load_struct_member(call_argument.1, value)
  mov rbx, [rbp-25]
  mov r15, [rbx+8]
  # [discarded value]: call_argument.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $6.1:rax $7.1:r15 
  .loc 5 565 9
  # call(set_operand_value_178, self.1, $6.1, $7.1)
  mov rdi, [rbp-16]
  mov rsi, rax
  mov rdx, r15
  call set_operand_value_178
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 566 31
  # $8.1: isize = load_struct_member(self.1, arguments_size)
  mov rax, [rbp-16]
  mov rbx, [rax+65]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $8.1:rbx 
  .loc 5 566 31
  # $9.1: isize = $8.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] $9.1:r15 
  .loc 5 566 9
  # store_struct_member(self.1, arguments_size, $9.1)
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  .loc 5 567 31
  # call_arguments_item.4: @List_Item = load_struct_member(call_arguments_item.2, next_item)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rax:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:r15:[rbp-8] 
  # jump(.LABEL__add_arguments_187__2)
  mov [rbp-8], r15
  jmp .LABEL__add_arguments_187__2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] call_arguments_item.4:[rbp-8] 
  # [discarded value]: call_arguments_item.4
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__add_arguments_187__4:
  .loc 5 569 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__add_arguments_187__end
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] call_arguments_item.2:[rbp-8] 
  # [discarded value]: call_arguments_item.2
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] call_arguments_item.1:[rbp-8] 
  # [discarded value]: call_arguments_item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__add_arguments_187__end:
  mov rsp, rbp
  pop rbp
  ret

add_arguments_187__stack_frame_size: .word 32

  .loc 5 572 8
  .text
get_argument_value_188:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_value_188__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_value_188__1:
  # self.1: @IR_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: isize = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 5 573 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: index.1:rsi $1.1:rax 
  .loc 5 573 36
  # $2.1: @String = call(get_argument_key_189, index.1)
  mov rdi, rsi
  mov [rbp-8], rax
  call get_argument_key_189
  # [discarded value]: index.1
  # [live values]: $1.1:[rbp-8] $2.1:rax 
  .loc 5 573 12
  # $3.1: @IR_Value = call(get_180, $1.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call get_180
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 573 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_argument_value_188__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_argument_value_188__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_value_188__stack_frame_size: .word 16

  .loc 5 576 8
  .text
get_argument_key_189:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_argument_key_189__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_argument_key_189__1:
  # index.1: isize = load_variable(index)
  # [live values]: index.1:rdi 
  .loc 5 577 9
  # $1.1: bool = index.1 == 0
  cmp rdi, 0
  sete al
  # [live values]: index.1:rdi $1.1:rax 
  # jump($1.1, .LABEL__get_argument_key_189__2, .LABEL__get_argument_key_189__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__get_argument_key_189__4
.LABEL__get_argument_key_189__2:
  .loc 5 578 9
  # return("argument-0-value")
  lea rax, .LABEL__string_267[rip] # "argument-0-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__get_argument_key_189__4:
  .loc 5 579 16
  # $2.1: bool = index.1 == 1
  cmp QWORD PTR [rbp-9], 1
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__get_argument_key_189__5, .LABEL__get_argument_key_189__7)
  test al, al
  mov [rbp-10], al
  jz .LABEL__get_argument_key_189__7
.LABEL__get_argument_key_189__5:
  .loc 5 580 9
  # return("argument-1-value")
  lea rax, .LABEL__string_268[rip] # "argument-1-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
.LABEL__get_argument_key_189__7:
  .loc 5 581 16
  # $3.1: bool = index.1 == 2
  cmp QWORD PTR [rbp-9], 2
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:rax 
  # jump($3.1, .LABEL__get_argument_key_189__8, .LABEL__get_argument_key_189__10)
  test al, al
  mov [rbp-11], al
  jz .LABEL__get_argument_key_189__10
.LABEL__get_argument_key_189__8:
  .loc 5 582 9
  # return("argument-2-value")
  lea rax, .LABEL__string_269[rip] # "argument-2-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
.LABEL__get_argument_key_189__10:
  .loc 5 583 16
  # $4.1: bool = index.1 == 3
  cmp QWORD PTR [rbp-9], 3
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:rax 
  # jump($4.1, .LABEL__get_argument_key_189__11, .LABEL__get_argument_key_189__13)
  test al, al
  mov [rbp-12], al
  jz .LABEL__get_argument_key_189__13
.LABEL__get_argument_key_189__11:
  .loc 5 584 9
  # return("argument-3-value")
  lea rax, .LABEL__string_270[rip] # "argument-3-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
.LABEL__get_argument_key_189__13:
  .loc 5 585 16
  # $5.1: bool = index.1 == 4
  cmp QWORD PTR [rbp-9], 4
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:rax 
  # jump($5.1, .LABEL__get_argument_key_189__14, .LABEL__get_argument_key_189__16)
  test al, al
  mov [rbp-13], al
  jz .LABEL__get_argument_key_189__16
.LABEL__get_argument_key_189__14:
  .loc 5 586 9
  # return("argument-4-value")
  lea rax, .LABEL__string_271[rip] # "argument-4-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
.LABEL__get_argument_key_189__16:
  .loc 5 587 16
  # $6.1: bool = index.1 == 5
  cmp QWORD PTR [rbp-9], 5
  sete al
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:rax 
  # jump($6.1, .LABEL__get_argument_key_189__17, .LABEL__get_argument_key_189__3)
  test al, al
  mov [rbp-14], al
  jz .LABEL__get_argument_key_189__3
.LABEL__get_argument_key_189__17:
  .loc 5 588 9
  # return("argument-5-value")
  lea rax, .LABEL__string_272[rip] # "argument-5-value"
  jmp .LABEL__get_argument_key_189__end
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
.LABEL__get_argument_key_189__3:
  .loc 5 590 11
  # $7.1: @String = call(clone_391, "Missing argument index: ")
  lea rdi, .LABEL__string_273[rip] # "Missing argument index: "
  call clone_391
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $7.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 590 11
  # $8.1: @String = call(append_399, $7.1, index.1)
  mov rdi, rax
  mov rsi, [rbp-9]
  call append_399
  # [discarded value]: $7.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $8.1:rax $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  .loc 5 590 5
  # call(abort_388, $8.1)
  mov rdi, rax
  call abort_388
  # [discarded value]: $8.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] $6.1:[rbp-14] 
  # [discarded value]: $6.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] $5.1:[rbp-13] 
  # [discarded value]: $5.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] $4.1:[rbp-12] 
  # [discarded value]: $4.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] $3.1:[rbp-11] 
  # [discarded value]: $3.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] $2.1:[rbp-10] 
  # [discarded value]: $2.1
  # [live values]: index.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: index.1:[rbp-9] 
  # [discarded value]: index.1
  # [live values]: 
.LABEL__get_argument_key_189__end:
  mov rsp, rbp
  pop rbp
  ret

get_argument_key_189__stack_frame_size: .word 16

  .loc 5 595 16
  .text
anonymous_function_11_190:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_11_190__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_11_190__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 596 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 597 31
  # instruction.1: @IR_Direct_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 598 13
  # $2.1: @FILE = call(write_383, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_274[rip] # "call"
  mov [rbp-16], rax
  call write_383
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 598 13
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rax 
  .loc 5 598 64
  # $4.1: @IR_Function = load_struct_member(instruction.1, function)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $3.1:rax $4.1:r15 
  .loc 5 598 13
  # $5.1: @FILE = call(write_function_label_4, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_function_label_4
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 599 13
  # call(dump_ir_call_instruction_arguments_186, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_186
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 600 20
  # $6.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_385
  # [discarded value]: file.1
  # [live values]: $6.1:rax 
  .loc 5 600 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 600 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_11_190__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_11_190__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_11_190__stack_frame_size: .word 16

  .loc 5 606 8
  .text
create_ir_direct_call_instruction_191:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_direct_call_instruction_191__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_direct_call_instruction_191__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function.1: @IR_Function = load_variable(function)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function.1:[rbp-8] $1.1:rax 
  .loc 5 607 23
  # instruction.1: @IR_Direct_Call_Instruction = new IR_Direct_Call_Instruction(object_type = IR_Direct_Call_Instruction, result_value = result_value.1, function = function.1, dump = anonymous_function_11_190.address, arguments_size = 0, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 81
  call malloc
  #     .object_type = IR_Direct_Call_Instruction
  mov rbx, IR_Direct_Call_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_11_190.address
  lea r14, anonymous_function_11_190[rip]
  mov [rax+57], r14
  #     .arguments_size = 0
  mov QWORD PTR [rax+65], 0
  #     .function = function.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+73], r14
  # [discarded value]: $1.1
  # [discarded value]: function.1
  # [live values]: result_value.1:rbx:[rbp-24] call_arguments.1:[rbp-16] instruction.1:rax 
  .loc 5 608 5
  # $3.1: @IR_Call_Instruction = call(add_arguments_187, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-32], rax
  call add_arguments_187
  # [discarded value]: $3.1
  # [discarded value]: call_arguments.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 609 9
  # $4.1: bool = result_value.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_direct_call_instruction_191__2, .LABEL__create_ir_direct_call_instruction_191__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_direct_call_instruction_191__3
.LABEL__create_ir_direct_call_instruction_191__2:
  .loc 5 610 9
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-24] instruction.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__create_ir_direct_call_instruction_191__3)
.LABEL__create_ir_direct_call_instruction_191__3:
  .loc 5 612 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_direct_call_instruction_191__end
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  # [discarded value]: instruction.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_direct_call_instruction_191__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_direct_call_instruction_191__stack_frame_size: .word 48

  .loc 5 617 16
  .text
anonymous_function_12_192:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_12_192__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_12_192__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 618 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 619 31
  # instruction.1: @IR_Dynamic_Call_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 620 36
  # function_address.1: @IR_Variable_Value = call(get_function_address_194, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_function_address_194
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rax 
  .loc 5 621 13
  # $3.1: @FILE = call(write_383, file.1, "call")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_274[rip] # "call"
  mov [rbp-24], rax
  call write_383
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $3.1:rax 
  .loc 5 621 13
  # $4.1: @FILE = call(write_385, $3.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $4.1:rax 
  .loc 5 621 49
  # $5.1: @IR_Variable = load_struct_member(function_address.1, variable)
  mov rbx, [rbp-24]
  mov r15, [rbx+48]
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $5.1:r15 
  .loc 5 621 49
  # $6.1: @String = load_struct_member($5.1, name)
  mov r14, [r15+16]
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:rbx:[rbp-24] $4.1:rax $6.1:r14 
  .loc 5 621 13
  # $7.1: @FILE = call(write_383, $4.1, $6.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $6.1
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $7.1:rax 
  .loc 5 621 13
  # $8.1: @FILE = call(write_385, $7.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] function_address.1:[rbp-24] $8.1:rax 
  .loc 5 621 98
  # $9.1: isize = load_struct_member(function_address.1, version)
  mov rbx, [rbp-24]
  mov r15, [rbx+56]
  # [discarded value]: function_address.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $8.1:rax $9.1:r15 
  .loc 5 621 13
  # $10.1: @FILE = call(write_382, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 622 13
  # call(dump_ir_call_instruction_arguments_186, instruction.1, file.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call dump_ir_call_instruction_arguments_186
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] 
  .loc 5 623 20
  # $11.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_385
  # [discarded value]: file.1
  # [live values]: $11.1:rax 
  .loc 5 623 20
  # $12.1: @FILE = call(end_line_386, $11.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 623 13
  # return($12.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_12_192__end
  # [discarded value]: $12.1
  # [live values]: 
.LABEL__anonymous_function_12_192__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_12_192__stack_frame_size: .word 32

  .loc 5 628 8
  .text
create_ir_dynamic_call_instruction_193:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_dynamic_call_instruction_193__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_dynamic_call_instruction_193__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: result_value.1:rdi call_arguments.1:rsi 
  # function_address.1: @IR_Variable_Value = load_variable(function_address)
  # [live values]: result_value.1:rdi call_arguments.1:rsi function_address.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] $1.1:rax 
  .loc 5 629 23
  # instruction.1: @IR_Dynamic_Call_Instruction = new IR_Dynamic_Call_Instruction(object_type = IR_Dynamic_Call_Instruction, result_value = result_value.1, dump = anonymous_function_12_192.address, arguments_size = 0, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Dynamic_Call_Instruction
  mov rbx, IR_Dynamic_Call_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_12_192.address
  lea r14, anonymous_function_12_192[rip]
  mov [rax+57], r14
  #     .arguments_size = 0
  mov QWORD PTR [rax+65], 0
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-24] call_arguments.1:[rbp-16] function_address.1:[rbp-8] instruction.1:rax 
  .loc 5 630 5
  # $3.1: @IR_Call_Instruction = call(add_arguments_187, instruction.1, call_arguments.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  mov [rbp-32], rax
  call add_arguments_187
  # [discarded value]: $3.1
  # [discarded value]: call_arguments.1
  # [live values]: result_value.1:[rbp-24] function_address.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 631 5
  # call(set_operand_value_178, instruction.1, "function_address", function_address.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_275[rip] # "function_address"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: function_address.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 632 9
  # $4.1: bool = result_value.1 != null
  cmp QWORD PTR [rbp-24], 0
  setne al
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_dynamic_call_instruction_193__2, .LABEL__create_ir_dynamic_call_instruction_193__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__create_ir_dynamic_call_instruction_193__3
.LABEL__create_ir_dynamic_call_instruction_193__2:
  .loc 5 633 9
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-24] instruction.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__create_ir_dynamic_call_instruction_193__3)
.LABEL__create_ir_dynamic_call_instruction_193__3:
  .loc 5 635 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_dynamic_call_instruction_193__end
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  # [discarded value]: instruction.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_dynamic_call_instruction_193__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_dynamic_call_instruction_193__stack_frame_size: .word 48

  .loc 5 638 8
  .text
get_function_address_194:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_function_address_194__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_function_address_194__1:
  # self.1: @IR_Dynamic_Call_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 639 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 639 12
  # $3.1: @IR_Variable_Value = call(get_180, $1.1, "function_address")
  mov rdi, rax
  lea rsi, .LABEL__string_275[rip] # "function_address"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 639 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_function_address_194__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_function_address_194__end:
  mov rsp, rbp
  pop rbp
  ret

get_function_address_194__stack_frame_size: .word 16

  .loc 5 644 16
  .text
anonymous_function_13_195:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_13_195__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_13_195__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 645 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 646 31
  # instruction.1: @IR_Cast_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 647 20
  # $2.1: @FILE = call(write_383, file.1, "cast")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_276[rip] # "cast"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 647 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 647 56
  # $4.1: @IR_Value = call(get_value_197, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_197
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 647 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 647 20
  # $6.1: @FILE = call(write_385, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 647 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 647 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_13_195__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_13_195__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_13_195__stack_frame_size: .word 32

  .loc 5 652 8
  .text
create_ir_cast_instruction_196:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_cast_instruction_196__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_cast_instruction_196__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 653 23
  # instruction.1: @IR_Cast_Instruction = new IR_Cast_Instruction(object_type = IR_Cast_Instruction, result_value = result_value.1, dump = anonymous_function_13_195.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Cast_Instruction
  mov rbx, IR_Cast_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_13_195.address
  lea r14, anonymous_function_13_195[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 654 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: result_value.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 655 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-24] 
  .loc 5 656 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_cast_instruction_196__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_cast_instruction_196__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_cast_instruction_196__stack_frame_size: .word 32

  .loc 5 659 8
  .text
get_value_197:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_197__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_197__1:
  # self.1: @IR_Cast_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 660 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 660 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 660 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_197__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_197__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_197__stack_frame_size: .word 16

  .loc 5 669 16
  .text
anonymous_function_14_198:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_14_198__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_14_198__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 670 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 671 31
  # instruction.1: @IR_Conditional_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 672 20
  # $2.1: @FILE = call(write_383, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_278[rip] # "jump"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 672 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 672 56
  # $4.1: @IR_Value = call(get_condition_value_199, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_condition_value_199
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 672 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 672 20
  # $6.1: @FILE = call(write_383, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 672 127
  # $7.1: @IR_Block = load_struct_member(instruction.1, true_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 672 20
  # $8.1: @FILE = call(write_block_label_8, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 672 20
  # $9.1: @FILE = call(write_383, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 672 181
  # $10.1: @IR_Block = load_struct_member(instruction.1, false_block)
  mov rbx, [rbp-16]
  mov r15, [rbx+73]
  # [discarded value]: instruction.1
  # [live values]: $9.1:rax $10.1:r15 
  .loc 5 672 20
  # $11.1: @FILE = call(write_block_label_8, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 672 20
  # $12.1: @FILE = call(write_385, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 672 20
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 672 13
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_14_198__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__anonymous_function_14_198__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_14_198__stack_frame_size: .word 32

  .loc 5 679 8
  .text
get_condition_value_199:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_condition_value_199__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_condition_value_199__1:
  # self.1: @IR_Conditional_Jump_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 680 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 680 12
  # $2.1: @IR_Value = call(get_180, $1.1, "condition")
  mov rdi, rax
  lea rsi, .LABEL__string_260[rip] # "condition"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 680 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_condition_value_199__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_condition_value_199__end:
  mov rsp, rbp
  pop rbp
  ret

get_condition_value_199__stack_frame_size: .word 16

  .loc 5 685 16
  .text
anonymous_function_15_200:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_15_200__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_15_200__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 686 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 687 31
  # instruction.1: @IR_Direct_Jump_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 688 20
  # $2.1: @FILE = call(write_383, file.1, "jump")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_278[rip] # "jump"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 688 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 688 68
  # $4.1: @IR_Block = load_struct_member(instruction.1, block)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [discarded value]: instruction.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 5 688 20
  # $5.1: @FILE = call(write_block_label_8, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_block_label_8
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 688 20
  # $6.1: @FILE = call(write_385, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 688 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 688 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_15_200__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_15_200__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_15_200__stack_frame_size: .word 16

  .loc 5 696 16
  .text
anonymous_function_16_201:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_16_201__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_16_201__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 697 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 698 31
  # instruction.1: @IR_Load_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 699 20
  # $2.1: @FILE = call(write_383, file.1, "load_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_279[rip] # "load_array_item"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 699 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 699 67
  # $4.1: @IR_Value = call(get_array_value_203, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_203
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 699 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 699 20
  # $6.1: @FILE = call(write_383, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 699 122
  # $7.1: @IR_Value = call(get_index_value_204, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_204
  # [discarded value]: instruction.1
  # [live values]: $6.1:[rbp-24] $7.1:rax 
  .loc 5 699 20
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: $8.1:rax 
  .loc 5 699 20
  # $9.1: @FILE = call(write_385, $8.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $8.1
  # [live values]: $9.1:rax 
  .loc 5 699 20
  # $10.1: @FILE = call(end_line_386, $9.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $9.1
  # [live values]: $10.1:rax 
  .loc 5 699 13
  # return($10.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_16_201__end
  # [discarded value]: $10.1
  # [live values]: 
.LABEL__anonymous_function_16_201__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_16_201__stack_frame_size: .word 32

  .loc 5 704 8
  .text
create_ir_load_array_item_instruction_202:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_array_item_instruction_202__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_array_item_instruction_202__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: result_value.1:rdi array_value.1:rsi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: result_value.1:rdi array_value.1:rsi index_value.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] $1.1:rax 
  .loc 5 705 23
  # instruction.1: @IR_Load_Array_Item_Instruction = new IR_Load_Array_Item_Instruction(object_type = IR_Load_Array_Item_Instruction, result_value = result_value.1, dump = anonymous_function_16_201.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Load_Array_Item_Instruction
  mov rbx, IR_Load_Array_Item_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_16_201.address
  lea r14, anonymous_function_16_201[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-24] array_value.1:[rbp-16] index_value.1:[rbp-8] instruction.1:rax 
  .loc 5 706 5
  # call(set_operand_value_178, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # "array_value"
  mov rdx, [rbp-16]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: array_value.1
  # [live values]: result_value.1:[rbp-24] index_value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 707 5
  # call(set_operand_value_178, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_281[rip] # "index_value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: index_value.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 708 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-32] 
  .loc 5 709 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_load_array_item_instruction_202__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_array_item_instruction_202__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_array_item_instruction_202__stack_frame_size: .word 32

  .loc 5 712 8
  .text
get_array_value_203:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_203__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_203__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 713 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 713 12
  # $2.1: @IR_Value = call(get_180, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # "array_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 713 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_203__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_203__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_203__stack_frame_size: .word 16

  .loc 5 716 8
  .text
get_index_value_204:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_204__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_204__1:
  # self.1: @IR_Load_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 717 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 717 12
  # $2.1: @IR_Value = call(get_180, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # "index_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 717 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_204__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_204__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_204__stack_frame_size: .word 16

  .loc 5 722 16
  .text
anonymous_function_17_205:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_17_205__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_17_205__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 723 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 724 31
  # instruction.1: @IR_Load_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 725 17
  # $2.1: bool = load_struct_member(instruction.1, load_address)
  mov bl, [rax+73]
  # [live values]: file.1:[rbp-8] instruction.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__anonymous_function_17_205__2, .LABEL__anonymous_function_17_205__4)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__anonymous_function_17_205__4
.LABEL__anonymous_function_17_205__2:
  .loc 5 726 17
  # $4.1: @FILE = call(write_383, file.1, "load_struct_member_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_282[rip] # "load_struct_member_address"
  call write_383
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__anonymous_function_17_205__3)
.LABEL__anonymous_function_17_205__3:
  .loc 5 730 20
  # $5.1: @FILE = call(write_385, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_385
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:rax 
  .loc 5 730 42
  # $6.1: @IR_Value = call(get_struct_pointer_value_207, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_struct_pointer_value_207
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $5.1:[rbp-25] $6.1:rax 
  .loc 5 730 20
  # $7.1: @FILE = call(write_154, $5.1, $6.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $7.1:rax 
  .loc 5 730 20
  # $8.1: @FILE = call(write_383, $7.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $8.1:rax 
  .loc 5 730 106
  # $9.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $9.1:r15 
  .loc 5 730 106
  # $10.1: @String = load_struct_member($9.1, name)
  mov r14, [r15+8]
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:rbx:[rbp-16] $2.1:[rbp-17] $8.1:rax $10.1:r14 
  .loc 5 730 20
  # $11.1: @FILE = call(write_383, $8.1, $10.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $10.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $11.1:rax 
  .loc 5 730 20
  # $12.1: @FILE = call(write_385, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $12.1:rax 
  .loc 5 730 20
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] $13.1:rax 
  .loc 5 730 13
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__anonymous_function_17_205__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__anonymous_function_17_205__4:
  .loc 5 728 17
  # $3.1: @FILE = call(write_383, file.1, "load_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_283[rip] # "load_struct_member"
  call write_383
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # jump(.LABEL__anonymous_function_17_205__3)
  jmp .LABEL__anonymous_function_17_205__3
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__anonymous_function_17_205__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_17_205__stack_frame_size: .word 32

  .loc 5 737 8
  .text
create_ir_load_struct_member_instruction_206:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_struct_member_instruction_206__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_struct_member_instruction_206__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx 
  # load_address.1: bool = load_variable(load_address)
  # [live values]: result_value.1:rdi struct_pointer_value.1:rsi struct_type_member.1:rdx load_address.1:rcx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-1], cl
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] load_address.1:[rbp-1] $1.1:rax 
  .loc 5 738 23
  # instruction.1: @IR_Load_Struct_Member_Instruction = new IR_Load_Struct_Member_Instruction(object_type = IR_Load_Struct_Member_Instruction, result_value = result_value.1, struct_type_member = struct_type_member.1, load_address = load_address.1, dump = anonymous_function_17_205.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-33], rax
  mov rdi, 74
  call malloc
  #     .object_type = IR_Load_Struct_Member_Instruction
  mov rbx, IR_Load_Struct_Member_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-33]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_17_205.address
  lea r14, anonymous_function_17_205[rip]
  mov [rax+57], r14
  #     .struct_type_member = struct_type_member.1
  mov r14, [rbp-9]
  mov QWORD PTR [rax+65], r14
  #     .load_address = load_address.1
  mov r13b, [rbp-1]
  mov BYTE PTR [rax+73], r13b
  # [discarded value]: $1.1
  # [discarded value]: load_address.1
  # [live values]: result_value.1:rbx:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:r14:[rbp-9] instruction.1:rax 
  .loc 5 739 5
  # call(set_operand_value_178, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # "struct_pointer_value"
  mov rdx, [rbp-17]
  mov [rbp-33], rax
  call set_operand_value_178
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] instruction.1:[rbp-33] 
  .loc 5 740 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-25]
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-25] struct_pointer_value.1:[rbp-17] struct_type_member.1:[rbp-9] instruction.1:rbx:[rbp-33] 
  .loc 5 742 9
  # $3.1: @IR_Type = load_struct_member(struct_type_member.1, type)
  mov r15, [rbp-9]
  mov r14, [r15+16]
  # [discarded value]: struct_type_member.1
  # [live values]: result_value.1:rax:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:rbx:[rbp-33] $3.1:r14 
  .loc 5 742 9
  # $4.1: bool = call(is_389, $3.1, IR_Struct_Type)
  mov rdi, r14
  mov rsi, IR_Struct_Type[rip]
  call is_389
  # [discarded value]: $3.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:rax 
  # jump($4.1, .LABEL__create_ir_load_struct_member_instruction_206__2, .LABEL__create_ir_load_struct_member_instruction_206__3)
  test al, al
  mov [rbp-34], al
  jz .LABEL__create_ir_load_struct_member_instruction_206__3
.LABEL__create_ir_load_struct_member_instruction_206__2:
  .loc 5 743 33
  # result_value_link.1: @IR_Requires_Value_Link = new IR_Requires_Value_Link(object_type = IR_Requires_Value_Link, value = struct_pointer_value.1, back_link = undefined)
  mov rdi, 24
  call malloc
  #     .object_type = IR_Requires_Value_Link
  mov rbx, IR_Requires_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = struct_pointer_value.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rbx:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rax 
  .loc 5 744 39
  # $6.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = result_value.1, back_link = result_value_link.1)
  mov [rbp-42], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = result_value_link.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  #     .value = result_value.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+16], r15
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] $6.1:rax 
  .loc 5 744 9
  # store_struct_member(result_value_link.1, back_link, $6.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $6.1
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] 
  .loc 5 745 9
  # $7.1: @List = load_struct_member(result_value.1, links)
  mov rax, [r15+32]
  # [live values]: result_value.1:r15:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:rbx:[rbp-42] $7.1:rax 
  .loc 5 745 9
  # call(append_364, $7.1, result_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_364
  # [discarded value]: $7.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:[rbp-42] 
  .loc 5 746 9
  # $8.1: @List = load_struct_member(struct_pointer_value.1, links)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rax:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] result_value_link.1:[rbp-42] $8.1:rbx 
  .loc 5 746 43
  # $9.1: @IR_Required_By_Value_Link = load_struct_member(result_value_link.1, back_link)
  mov r15, [rbp-42]
  mov r14, [r15+8]
  # [discarded value]: result_value_link.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:rax:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] $8.1:rbx $9.1:r14 
  .loc 5 746 9
  # call(append_364, $8.1, $9.1)
  mov rdi, rbx
  mov rsi, r14
  call append_364
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # jump(.LABEL__create_ir_load_struct_member_instruction_206__3)
.LABEL__create_ir_load_struct_member_instruction_206__3:
  .loc 5 749 5
  # return(instruction.1)
  mov rax, [rbp-33]
  jmp .LABEL__create_ir_load_struct_member_instruction_206__end
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] $4.1:[rbp-34] 
  # [discarded value]: $4.1
  # [live values]: result_value.1:[rbp-25] struct_pointer_value.1:[rbp-17] instruction.1:[rbp-33] 
  # [discarded value]: instruction.1
  # [discarded value]: struct_pointer_value.1
  # [discarded value]: result_value.1
  # [live values]: 
.LABEL__create_ir_load_struct_member_instruction_206__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_struct_member_instruction_206__stack_frame_size: .word 48

  .loc 5 752 8
  .text
get_struct_pointer_value_207:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_207__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_207__1:
  # self.1: @IR_Load_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 753 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 753 12
  # $2.1: @IR_Value = call(get_180, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # "struct_pointer_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 753 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_207__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_207__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_207__stack_frame_size: .word 16

  .loc 5 758 16
  .text
anonymous_function_18_208:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_18_208__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_18_208__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 759 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 760 31
  # instruction.1: @IR_Load_Variable_Address_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 761 20
  # $2.1: @FILE = call(write_383, file.1, "load_variable_address")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_285[rip] # "load_variable_address"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 761 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 761 73
  # $4.1: @IR_Variable_Value = call(get_variable_value_210, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_variable_value_210
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 761 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 761 20
  # $6.1: @FILE = call(write_385, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 761 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 761 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_18_208__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_18_208__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_18_208__stack_frame_size: .word 32

  .loc 5 766 8
  .text
create_ir_load_variable_address_instruction_209:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_address_instruction_209__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_address_instruction_209__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # variable_value.1: @IR_Variable_Value = load_variable(variable_value)
  # [live values]: result_value.1:rdi variable_value.1:rsi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] variable_value.1:[rbp-8] $1.1:rax 
  .loc 5 767 23
  # instruction.1: @IR_Load_Variable_Address_Instruction = new IR_Load_Variable_Address_Instruction(object_type = IR_Load_Variable_Address_Instruction, result_value = result_value.1, dump = anonymous_function_18_208.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Load_Variable_Address_Instruction
  mov rbx, IR_Load_Variable_Address_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_18_208.address
  lea r14, anonymous_function_18_208[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] variable_value.1:[rbp-8] instruction.1:rax 
  .loc 5 768 5
  # call(set_operand_value_178, instruction.1, "variable_value", variable_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_286[rip] # "variable_value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [live values]: result_value.1:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] 
  .loc 5 769 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:rax:[rbp-16] variable_value.1:[rbp-8] instruction.1:rbx:[rbp-24] 
  .loc 5 771 29
  # result_value_link.1: @IR_Requires_Value_Link = new IR_Requires_Value_Link(object_type = IR_Requires_Value_Link, value = variable_value.1, back_link = undefined)
  mov rdi, 24
  call malloc
  #     .object_type = IR_Requires_Value_Link
  mov rbx, IR_Requires_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = undefined
  #     .value = variable_value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  # [live values]: result_value.1:[rbp-16] variable_value.1:rbx:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rax 
  .loc 5 772 35
  # $4.1: @IR_Required_By_Value_Link = new IR_Required_By_Value_Link(object_type = IR_Required_By_Value_Link, value = result_value.1, back_link = result_value_link.1)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .object_type = IR_Required_By_Value_Link
  mov rbx, IR_Required_By_Value_Link[rip]
  mov [rax], rbx
  #     .back_link = result_value_link.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  #     .value = result_value.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  # [live values]: result_value.1:r15:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] $4.1:rax 
  .loc 5 772 5
  # store_struct_member(result_value_link.1, back_link, $4.1)
  mov QWORD PTR [rbx+8], rax
  # [discarded value]: $4.1
  # [live values]: result_value.1:r15:[rbp-16] variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] 
  .loc 5 773 5
  # $5.1: @List = load_struct_member(result_value.1, links)
  mov rax, [r15+32]
  # [discarded value]: result_value.1
  # [live values]: variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:rbx:[rbp-32] $5.1:rax 
  .loc 5 773 5
  # call(append_364, $5.1, result_value_link.1)
  mov rdi, rax
  mov rsi, rbx
  call append_364
  # [discarded value]: $5.1
  # [live values]: variable_value.1:[rbp-8] instruction.1:[rbp-24] result_value_link.1:[rbp-32] 
  .loc 5 774 5
  # $6.1: @List = load_struct_member(variable_value.1, links)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [discarded value]: variable_value.1
  # [live values]: instruction.1:[rbp-24] result_value_link.1:[rbp-32] $6.1:rbx 
  .loc 5 774 33
  # $7.1: @IR_Required_By_Value_Link = load_struct_member(result_value_link.1, back_link)
  mov rax, [rbp-32]
  mov r15, [rax+8]
  # [discarded value]: result_value_link.1
  # [live values]: instruction.1:[rbp-24] $6.1:rbx $7.1:r15 
  .loc 5 774 5
  # call(append_364, $6.1, $7.1)
  mov rdi, rbx
  mov rsi, r15
  call append_364
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-24] 
  .loc 5 776 5
  # return(instruction.1)
  mov rax, [rbp-24]
  jmp .LABEL__create_ir_load_variable_address_instruction_209__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_address_instruction_209__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_address_instruction_209__stack_frame_size: .word 32

  .loc 5 779 8
  .text
get_variable_value_210:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_variable_value_210__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_variable_value_210__1:
  # self.1: @IR_Load_Variable_Address_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 780 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 780 12
  # $3.1: @IR_Variable_Value = call(get_180, $1.1, "variable_value")
  mov rdi, rax
  lea rsi, .LABEL__string_286[rip] # "variable_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $3.1:rax 
  .loc 5 780 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__get_variable_value_210__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__get_variable_value_210__end:
  mov rsp, rbp
  pop rbp
  ret

get_variable_value_210__stack_frame_size: .word 16

  .loc 5 785 16
  .text
anonymous_function_19_211:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_19_211__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_19_211__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 786 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 787 20
  # $1.1: @FILE = call(write_383, file.1, "load_variable")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_287[rip] # "load_variable"
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $1.1:rax 
  .loc 5 787 20
  # $2.1: @FILE = call(write_385, $1.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $1.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 787 66
  # $3.1: @IR_Load_Variable_Instruction = instruction.1
  mov rbx, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: $2.1:rax $3.1:rbx 
  .loc 5 787 65
  # $4.1: @IR_Variable = load_struct_member($3.1, variable)
  mov r15, [rbx+65]
  # [discarded value]: $3.1
  # [live values]: $2.1:rax $4.1:r15 
  .loc 5 787 65
  # $5.1: @String = load_struct_member($4.1, name)
  mov rbx, [r15+16]
  # [discarded value]: $4.1
  # [live values]: $2.1:rax $5.1:rbx 
  .loc 5 787 20
  # $6.1: @FILE = call(write_383, $2.1, $5.1)
  mov rdi, rax
  mov rsi, rbx
  call write_383
  # [discarded value]: $5.1
  # [discarded value]: $2.1
  # [live values]: $6.1:rax 
  .loc 5 787 20
  # $7.1: @FILE = call(write_385, $6.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 787 20
  # $8.1: @FILE = call(end_line_386, $7.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $7.1
  # [live values]: $8.1:rax 
  .loc 5 787 13
  # return($8.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_19_211__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__anonymous_function_19_211__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_19_211__stack_frame_size: .word 16

  .loc 5 793 8
  .text
create_ir_load_variable_instruction_212:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_load_variable_instruction_212__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_load_variable_instruction_212__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 794 96
  # $1.1: @IR_Variable = load_struct_member(result_value.1, variable)
  mov rax, [rdi+48]
  # [live values]: result_value.1:rdi $1.1:rax 
  .loc 5 484 37
  # $2.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rax
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] $1.1:[rbp-8] $2.1:rax 
  .loc 5 794 23
  # instruction.1: @IR_Load_Variable_Instruction = new IR_Load_Variable_Instruction(object_type = IR_Load_Variable_Instruction, result_value = result_value.1, variable = $1.1, dump = anonymous_function_19_211.address, location = null, operand_values = $2.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Load_Variable_Instruction
  mov rbx, IR_Load_Variable_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_19_211.address
  lea r14, anonymous_function_19_211[rip]
  mov [rax+57], r14
  #     .variable = $1.1
  mov r14, [rbp-8]
  mov QWORD PTR [rax+65], r14
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] instruction.1:rax 
  .loc 5 795 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rax 
  .loc 5 796 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_load_variable_instruction_212__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_load_variable_instruction_212__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_load_variable_instruction_212__stack_frame_size: .word 32

  .loc 5 801 16
  .text
anonymous_function_20_213:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_20_213__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_20_213__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 802 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 803 31
  # instruction.1: @IR_New_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 804 20
  # $2.1: @FILE = call(write_383, file.1, "new")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_288[rip] # "new"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 804 20
  # $3.1: @FILE = call(write_385, $2.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 804 55
  # $4.1: @IR_Value = call(get_init_value_215, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_init_value_215
  # [discarded value]: instruction.1
  # [live values]: $3.1:[rbp-24] $4.1:rax 
  .loc 5 804 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 5 804 20
  # $6.1: @FILE = call(end_line_386, $5.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $5.1
  # [live values]: $6.1:rax 
  .loc 5 804 13
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_20_213__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__anonymous_function_20_213__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_20_213__stack_frame_size: .word 32

  .loc 5 810 8
  .text
create_ir_new_instruction_214:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_new_instruction_214__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_new_instruction_214__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # type.1: @IR_Type = load_variable(type)
  # [live values]: result_value.1:rdi type.1:rsi 
  # init_value.1: @IR_Value = load_variable(init_value)
  # [live values]: result_value.1:rdi type.1:rsi init_value.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-24] type.1:[rbp-16] init_value.1:[rbp-8] $1.1:rax 
  .loc 5 811 23
  # instruction.1: @IR_New_Instruction = new IR_New_Instruction(object_type = IR_New_Instruction, result_value = result_value.1, type = type.1, dump = anonymous_function_20_213.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_New_Instruction
  mov rbx, IR_New_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_20_213.address
  lea r14, anonymous_function_20_213[rip]
  mov [rax+57], r14
  #     .type = type.1
  mov r14, [rbp-16]
  mov QWORD PTR [rax+65], r14
  # [discarded value]: $1.1
  # [discarded value]: type.1
  # [live values]: result_value.1:rbx:[rbp-24] init_value.1:[rbp-8] instruction.1:rax 
  .loc 5 812 5
  # call(set_operand_value_178, instruction.1, "init_value", init_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_289[rip] # "init_value"
  mov rdx, [rbp-8]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: init_value.1
  # [live values]: result_value.1:[rbp-24] instruction.1:[rbp-32] 
  .loc 5 813 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-32] 
  .loc 5 814 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_new_instruction_214__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_new_instruction_214__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_new_instruction_214__stack_frame_size: .word 32

  .loc 5 817 8
  .text
get_init_value_215:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_init_value_215__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_init_value_215__1:
  # self.1: @IR_New_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 818 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 818 12
  # $2.1: @IR_Value = call(get_180, $1.1, "init_value")
  mov rdi, rax
  lea rsi, .LABEL__string_289[rip] # "init_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 818 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_init_value_215__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_init_value_215__end:
  mov rsp, rbp
  pop rbp
  ret

get_init_value_215__stack_frame_size: .word 16

  .loc 5 823 16
  .text
anonymous_function_21_216:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_21_216__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_21_216__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 824 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 825 31
  # instruction.1: @IR_Return_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 826 17
  # $2.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_return_value_218
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 826 17
  # $3.1: bool = $2.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:rbx 
  # jump($3.1, .LABEL__anonymous_function_21_216__2, .LABEL__anonymous_function_21_216__3)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__anonymous_function_21_216__3
.LABEL__anonymous_function_21_216__2:
  .loc 5 827 24
  # $4.1: @FILE = call(write_383, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_290[rip] # "return"
  call write_383
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $4.1:rax 
  .loc 5 827 24
  # $5.1: @FILE = call(write_385, $4.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $5.1:rax 
  .loc 5 827 24
  # $6.1: @FILE = call(write_385, $5.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $6.1:rax 
  .loc 5 827 24
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $7.1:rax 
  .loc 5 827 17
  # return($7.1)
  mov [rbp-25], rax
  jmp .LABEL__anonymous_function_21_216__end
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__anonymous_function_21_216__3:
  .loc 5 829 20
  # $8.1: @FILE = call(write_383, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_290[rip] # "return"
  call write_383
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 5 829 20
  # $9.1: @FILE = call(write_385, $8.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:rax 
  .loc 5 829 58
  # $10.1: @IR_Value = call(get_return_value_218, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-25], rax
  call get_return_value_218
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $9.1:[rbp-25] $10.1:rax 
  .loc 5 829 20
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-25]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $11.1:rax 
  .loc 5 829 20
  # $12.1: @FILE = call(write_385, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $12.1:rax 
  .loc 5 829 20
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] $13.1:rax 
  .loc 5 829 13
  # return($13.1)
  mov [rbp-25], rax
  jmp .LABEL__anonymous_function_21_216__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__anonymous_function_21_216__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_21_216__stack_frame_size: .word 32

  .loc 5 834 8
  .text
create_ir_return_instruction_217:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_return_instruction_217__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_return_instruction_217__1:
  # return_value.1: @IR_Value = load_variable(return_value)
  # [live values]: return_value.1:rdi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: return_value.1:[rbp-8] $1.1:rax 
  .loc 5 835 23
  # instruction.1: @IR_Return_Instruction = new IR_Return_Instruction(object_type = IR_Return_Instruction, result_value = null, dump = anonymous_function_21_216.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-16], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Return_Instruction
  mov rbx, IR_Return_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_21_216.address
  lea r15, anonymous_function_21_216[rip]
  mov [rax+57], r15
  # [discarded value]: $1.1
  # [live values]: return_value.1:[rbp-8] instruction.1:rax 
  .loc 5 836 9
  # $3.1: bool = return_value.1 != null
  cmp QWORD PTR [rbp-8], 0
  setne bl
  # [live values]: return_value.1:[rbp-8] instruction.1:rax $3.1:rbx 
  # jump($3.1, .LABEL__create_ir_return_instruction_217__2, .LABEL__create_ir_return_instruction_217__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__create_ir_return_instruction_217__3
.LABEL__create_ir_return_instruction_217__2:
  .loc 5 837 9
  # call(set_operand_value_178, instruction.1, "return_value", return_value.1)
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_291[rip] # "return_value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__create_ir_return_instruction_217__3)
.LABEL__create_ir_return_instruction_217__3:
  .loc 5 839 5
  # return(instruction.1)
  mov rax, [rbp-16]
  jmp .LABEL__create_ir_return_instruction_217__end
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: return_value.1:[rbp-8] instruction.1:[rbp-16] 
  # [discarded value]: instruction.1
  # [discarded value]: return_value.1
  # [live values]: 
.LABEL__create_ir_return_instruction_217__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_return_instruction_217__stack_frame_size: .word 32

  .loc 5 842 8
  .text
get_return_value_218:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_return_value_218__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_return_value_218__1:
  # self.1: @IR_Return_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 843 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 843 12
  # $2.1: @IR_Value = call(get_180, $1.1, "return_value")
  mov rdi, rax
  lea rsi, .LABEL__string_291[rip] # "return_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 843 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_return_value_218__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_return_value_218__end:
  mov rsp, rbp
  pop rbp
  ret

get_return_value_218__stack_frame_size: .word 16

  .loc 5 848 16
  .text
anonymous_function_22_219:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_22_219__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_22_219__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 849 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 850 31
  # instruction.1: @IR_Set_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 851 31
  # $2.1: @IR_Value = call(get_value_221, instruction.1)
  mov rdi, rax
  call get_value_221
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $2.1:rax 
  .loc 5 851 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: $3.1:rax 
  .loc 5 851 20
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $3.1
  # [live values]: $4.1:rax 
  .loc 5 851 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_22_219__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_22_219__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_22_219__stack_frame_size: .word 16

  .loc 5 856 8
  .text
create_ir_set_instruction_220:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_set_instruction_220__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_set_instruction_220__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: result_value.1:rdi value.1:rsi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 857 23
  # instruction.1: @IR_Set_Instruction = new IR_Set_Instruction(object_type = IR_Set_Instruction, result_value = result_value.1, dump = anonymous_function_22_219.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-24], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Set_Instruction
  mov rbx, IR_Set_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_22_219.address
  lea r14, anonymous_function_22_219[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 858 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  mov rdx, [rbp-8]
  mov [rbp-24], rax
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: result_value.1:[rbp-16] instruction.1:[rbp-24] 
  .loc 5 859 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov rax, [rbp-16]
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rbx:[rbp-24] 
  .loc 5 860 5
  # return(instruction.1)
  mov rax, rbx
  jmp .LABEL__create_ir_set_instruction_220__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_set_instruction_220__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_set_instruction_220__stack_frame_size: .word 32

  .loc 5 863 8
  .text
get_value_221:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_221__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_221__1:
  # self.1: @IR_Set_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 864 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 864 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 864 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_221__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_221__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_221__stack_frame_size: .word 16

  .loc 5 869 16
  .text
anonymous_function_23_222:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_23_222__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_23_222__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 870 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 871 31
  # instruction.1: @IR_Store_Array_Item_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 872 20
  # $2.1: @FILE = call(write_383, file.1, "store_array_item")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_292[rip] # "store_array_item"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 872 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 872 68
  # $4.1: @IR_Value = call(get_array_value_224, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_array_value_224
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 872 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 872 20
  # $6.1: @FILE = call(write_383, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 872 123
  # $7.1: @IR_Value = call(get_index_value_225, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_index_value_225
  # [live values]: instruction.1:[rbp-16] $6.1:[rbp-24] $7.1:rax 
  .loc 5 872 20
  # $8.1: @FILE = call(write_154, $6.1, $7.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $8.1:rax 
  .loc 5 872 20
  # $9.1: @FILE = call(write_383, $8.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $8.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 872 178
  # $10.1: @IR_Value = call(get_value_226, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_226
  # [discarded value]: instruction.1
  # [live values]: $9.1:[rbp-24] $10.1:rax 
  .loc 5 872 20
  # $11.1: @FILE = call(write_154, $9.1, $10.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: $11.1:rax 
  .loc 5 872 20
  # $12.1: @FILE = call(write_385, $11.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $11.1
  # [live values]: $12.1:rax 
  .loc 5 872 20
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 872 13
  # return($13.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_23_222__end
  # [discarded value]: $13.1
  # [live values]: 
.LABEL__anonymous_function_23_222__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_23_222__stack_frame_size: .word 32

  .loc 5 877 8
  .text
create_ir_store_array_item_instruction_223:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_array_item_instruction_223__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_array_item_instruction_223__1:
  # array_value.1: @IR_Value = load_variable(array_value)
  # [live values]: array_value.1:rdi 
  # index_value.1: @IR_Value = load_variable(index_value)
  # [live values]: array_value.1:rdi index_value.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: array_value.1:rdi index_value.1:rsi value.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 878 23
  # instruction.1: @IR_Store_Array_Item_Instruction = new IR_Store_Array_Item_Instruction(object_type = IR_Store_Array_Item_Instruction, result_value = null, dump = anonymous_function_23_222.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Store_Array_Item_Instruction
  mov rbx, IR_Store_Array_Item_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_23_222.address
  lea r15, anonymous_function_23_222[rip]
  mov [rax+57], r15
  # [discarded value]: $1.1
  # [live values]: array_value.1:[rbp-24] index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:rax 
  .loc 5 879 5
  # call(set_operand_value_178, instruction.1, "array_value", array_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # "array_value"
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: array_value.1
  # [live values]: index_value.1:[rbp-16] value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 880 5
  # call(set_operand_value_178, instruction.1, "index_value", index_value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_281[rip] # "index_value"
  mov rdx, [rbp-16]
  call set_operand_value_178
  # [discarded value]: index_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 881 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_277[rip] # "value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 882 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_array_item_instruction_223__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_array_item_instruction_223__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_array_item_instruction_223__stack_frame_size: .word 32

  .loc 5 885 8
  .text
get_array_value_224:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_array_value_224__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_array_value_224__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 886 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 886 12
  # $2.1: @IR_Value = call(get_180, $1.1, "array_value")
  mov rdi, rax
  lea rsi, .LABEL__string_280[rip] # "array_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 886 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_array_value_224__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_array_value_224__end:
  mov rsp, rbp
  pop rbp
  ret

get_array_value_224__stack_frame_size: .word 16

  .loc 5 889 8
  .text
get_index_value_225:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_index_value_225__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_index_value_225__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 890 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 890 12
  # $2.1: @IR_Value = call(get_180, $1.1, "index_value")
  mov rdi, rax
  lea rsi, .LABEL__string_281[rip] # "index_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 890 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_index_value_225__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_index_value_225__end:
  mov rsp, rbp
  pop rbp
  ret

get_index_value_225__stack_frame_size: .word 16

  .loc 5 893 8
  .text
get_value_226:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_226__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_226__1:
  # self.1: @IR_Store_Array_Item_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 894 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 894 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 894 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_226__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_226__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_226__stack_frame_size: .word 16

  .loc 5 899 16
  .text
anonymous_function_24_227:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_24_227__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_24_227__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 900 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 901 31
  # instruction.1: @IR_Store_Struct_Member_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 902 20
  # $2.1: @FILE = call(write_383, file.1, "store_struct_member")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_293[rip] # "store_struct_member"
  mov [rbp-16], rax
  call write_383
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $2.1:rax 
  .loc 5 902 20
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $2.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 902 71
  # $4.1: @IR_Value = call(get_struct_pointer_value_229, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_struct_pointer_value_229
  # [live values]: instruction.1:[rbp-16] $3.1:[rbp-24] $4.1:rax 
  .loc 5 902 20
  # $5.1: @FILE = call(write_154, $3.1, $4.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $5.1:rax 
  .loc 5 902 20
  # $6.1: @FILE = call(write_383, $5.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $5.1
  # [live values]: instruction.1:[rbp-16] $6.1:rax 
  .loc 5 902 135
  # $7.1: @IR_Struct_Type_Member = load_struct_member(instruction.1, struct_type_member)
  mov rbx, [rbp-16]
  mov r15, [rbx+65]
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $7.1:r15 
  .loc 5 902 135
  # $8.1: @String = load_struct_member($7.1, name)
  mov r14, [r15+8]
  # [discarded value]: $7.1
  # [live values]: instruction.1:rbx:[rbp-16] $6.1:rax $8.1:r14 
  .loc 5 902 20
  # $9.1: @FILE = call(write_383, $6.1, $8.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $8.1
  # [discarded value]: $6.1
  # [live values]: instruction.1:[rbp-16] $9.1:rax 
  .loc 5 902 20
  # $10.1: @FILE = call(write_383, $9.1, ", ")
  mov rdi, rax
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $9.1
  # [live values]: instruction.1:[rbp-16] $10.1:rax 
  .loc 5 902 190
  # $11.1: @IR_Value = call(get_value_230, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_value_230
  # [discarded value]: instruction.1
  # [live values]: $10.1:[rbp-24] $11.1:rax 
  .loc 5 902 20
  # $12.1: @FILE = call(write_154, $10.1, $11.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: $12.1:rax 
  .loc 5 902 20
  # $13.1: @FILE = call(write_385, $12.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $12.1
  # [live values]: $13.1:rax 
  .loc 5 902 20
  # $14.1: @FILE = call(end_line_386, $13.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $13.1
  # [live values]: $14.1:rax 
  .loc 5 902 13
  # return($14.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_24_227__end
  # [discarded value]: $14.1
  # [live values]: 
.LABEL__anonymous_function_24_227__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_24_227__stack_frame_size: .word 32

  .loc 5 908 8
  .text
create_ir_store_struct_member_instruction_228:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_store_struct_member_instruction_228__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_store_struct_member_instruction_228__1:
  # struct_pointer_value.1: @IR_Value = load_variable(struct_pointer_value)
  # [live values]: struct_pointer_value.1:rdi 
  # struct_type_member.1: @IR_Struct_Type_Member = load_variable(struct_type_member)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: struct_pointer_value.1:rdi struct_type_member.1:rsi value.1:rdx 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: struct_pointer_value.1:[rbp-24] struct_type_member.1:[rbp-16] value.1:[rbp-8] $1.1:rax 
  .loc 5 909 23
  # instruction.1: @IR_Store_Struct_Member_Instruction = new IR_Store_Struct_Member_Instruction(object_type = IR_Store_Struct_Member_Instruction, result_value = null, struct_type_member = struct_type_member.1, dump = anonymous_function_24_227.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-32], rax
  mov rdi, 73
  call malloc
  #     .object_type = IR_Store_Struct_Member_Instruction
  mov rbx, IR_Store_Struct_Member_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = null
  mov QWORD PTR [rax+16], 0
  #     .operand_values = $1.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+24], rbx
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_24_227.address
  lea r15, anonymous_function_24_227[rip]
  mov [rax+57], r15
  #     .struct_type_member = struct_type_member.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+65], r15
  # [discarded value]: $1.1
  # [discarded value]: struct_type_member.1
  # [live values]: struct_pointer_value.1:[rbp-24] value.1:[rbp-8] instruction.1:rax 
  .loc 5 910 5
  # call(set_operand_value_178, instruction.1, "struct_pointer_value", struct_pointer_value.1)
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # "struct_pointer_value"
  mov rdx, [rbp-24]
  mov [rbp-32], rax
  call set_operand_value_178
  # [discarded value]: struct_pointer_value.1
  # [live values]: value.1:[rbp-8] instruction.1:[rbp-32] 
  .loc 5 911 5
  # call(set_operand_value_178, instruction.1, "value", value.1)
  mov rdi, [rbp-32]
  lea rsi, .LABEL__string_277[rip] # "value"
  mov rdx, [rbp-8]
  call set_operand_value_178
  # [discarded value]: value.1
  # [live values]: instruction.1:[rbp-32] 
  .loc 5 912 5
  # return(instruction.1)
  mov rax, [rbp-32]
  jmp .LABEL__create_ir_store_struct_member_instruction_228__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_store_struct_member_instruction_228__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_store_struct_member_instruction_228__stack_frame_size: .word 32

  .loc 5 915 8
  .text
get_struct_pointer_value_229:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_struct_pointer_value_229__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_struct_pointer_value_229__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 916 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 916 12
  # $2.1: @IR_Value = call(get_180, $1.1, "struct_pointer_value")
  mov rdi, rax
  lea rsi, .LABEL__string_284[rip] # "struct_pointer_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 916 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_struct_pointer_value_229__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_struct_pointer_value_229__end:
  mov rsp, rbp
  pop rbp
  ret

get_struct_pointer_value_229__stack_frame_size: .word 16

  .loc 5 919 8
  .text
get_value_230:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_value_230__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_value_230__1:
  # self.1: @IR_Store_Struct_Member_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 920 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 920 12
  # $2.1: @IR_Value = call(get_180, $1.1, "value")
  mov rdi, rax
  lea rsi, .LABEL__string_277[rip] # "value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 920 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_value_230__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_value_230__end:
  mov rsp, rbp
  pop rbp
  ret

get_value_230__stack_frame_size: .word 16

  .loc 5 927 8
  .text
init_231:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_231__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_231__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # left_value.1: @IR_Value = load_variable(left_value)
  # [live values]: self.1:rdi left_value.1:rsi 
  # right_value.1: @IR_Value = load_variable(right_value)
  # [live values]: self.1:rdi left_value.1:rsi right_value.1:rdx 
  .loc 5 928 5
  # call(set_operand_value_178, self.1, "left_value", left_value.1)
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_294[rip] # "left_value"
  mov [rbp-16], rdx
  mov rdx, [rbp-8]
  mov [rbp-24], rdi
  call set_operand_value_178
  # [discarded value]: left_value.1
  # [live values]: self.1:[rbp-24] right_value.1:[rbp-16] 
  .loc 5 929 5
  # call(set_operand_value_178, self.1, "right_value", right_value.1)
  mov rdi, [rbp-24]
  lea rsi, .LABEL__string_295[rip] # "right_value"
  mov rdx, [rbp-16]
  call set_operand_value_178
  # [discarded value]: right_value.1
  # [live values]: self.1:[rbp-24] 
  .loc 5 930 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__init_231__end
  # [discarded value]: self.1
  # [live values]: 
.LABEL__init_231__end:
  mov rsp, rbp
  pop rbp
  ret

init_231__stack_frame_size: .word 32

  .loc 5 933 8
  .text
get_left_value_232:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_left_value_232__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_left_value_232__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 934 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 934 12
  # $2.1: @IR_Value = call(get_180, $1.1, "left_value")
  mov rdi, rax
  lea rsi, .LABEL__string_294[rip] # "left_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 934 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_left_value_232__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_left_value_232__end:
  mov rsp, rbp
  pop rbp
  ret

get_left_value_232__stack_frame_size: .word 16

  .loc 5 937 8
  .text
get_right_value_233:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_right_value_233__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_right_value_233__1:
  # self.1: @IR_Binary_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 938 12
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 938 12
  # $2.1: @IR_Value = call(get_180, $1.1, "right_value")
  mov rdi, rax
  lea rsi, .LABEL__string_295[rip] # "right_value"
  call get_180
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 5 938 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__get_right_value_233__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__get_right_value_233__end:
  mov rsp, rbp
  pop rbp
  ret

get_right_value_233__stack_frame_size: .word 16

  .loc 5 943 16
  .text
anonymous_function_25_234:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_25_234__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_25_234__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 944 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 945 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 946 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 946 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 946 20
  # $4.1: @FILE = call(write_383, $3.1, " + ")
  mov rdi, rax
  lea rsi, .LABEL__string_296[rip] # " + "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 946 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 946 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 946 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 946 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_25_234__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_25_234__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_25_234__stack_frame_size: .word 32

  .loc 5 957 16
  .text
anonymous_function_26_235:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_26_235__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_26_235__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 958 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 959 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 960 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 960 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 960 20
  # $4.1: @FILE = call(write_383, $3.1, " / ")
  mov rdi, rax
  lea rsi, .LABEL__string_297[rip] # " / "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 960 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 960 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 960 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 960 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_26_235__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_26_235__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_26_235__stack_frame_size: .word 32

  .loc 5 967 16
  .text
anonymous_function_27_236:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_27_236__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_27_236__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 968 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 969 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 970 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 970 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 970 20
  # $4.1: @FILE = call(write_383, $3.1, " == ")
  mov rdi, rax
  lea rsi, .LABEL__string_298[rip] # " == "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 970 87
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 970 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 970 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 970 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_27_236__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_27_236__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_27_236__stack_frame_size: .word 32

  .loc 5 977 16
  .text
anonymous_function_28_237:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_28_237__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_28_237__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 978 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 979 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 980 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 980 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 980 20
  # $4.1: @FILE = call(write_383, $3.1, " > ")
  mov rdi, rax
  lea rsi, .LABEL__string_299[rip] # " > "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 980 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 980 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 980 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 980 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_28_237__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_28_237__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_28_237__stack_frame_size: .word 32

  .loc 5 987 16
  .text
anonymous_function_29_238:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_29_238__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_29_238__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 988 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 989 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 990 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 990 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 990 20
  # $4.1: @FILE = call(write_383, $3.1, " >= ")
  mov rdi, rax
  lea rsi, .LABEL__string_300[rip] # " >= "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 990 87
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 990 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 990 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 990 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_29_238__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_29_238__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_29_238__stack_frame_size: .word 32

  .loc 5 997 16
  .text
anonymous_function_30_239:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_30_239__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_30_239__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 998 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 999 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1000 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1000 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1000 20
  # $4.1: @FILE = call(write_383, $3.1, " < ")
  mov rdi, rax
  lea rsi, .LABEL__string_301[rip] # " < "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1000 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1000 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1000 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1000 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_30_239__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_30_239__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_30_239__stack_frame_size: .word 32

  .loc 5 1007 16
  .text
anonymous_function_31_240:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_31_240__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_31_240__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1008 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1009 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1010 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1010 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1010 20
  # $4.1: @FILE = call(write_383, $3.1, " <= ")
  mov rdi, rax
  lea rsi, .LABEL__string_302[rip] # " <= "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1010 87
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1010 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1010 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1010 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_31_240__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_31_240__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_31_240__stack_frame_size: .word 32

  .loc 5 1017 16
  .text
anonymous_function_32_241:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_32_241__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_32_241__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1018 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1019 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1020 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1020 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1020 20
  # $4.1: @FILE = call(write_383, $3.1, " // ")
  mov rdi, rax
  lea rsi, .LABEL__string_303[rip] # " // "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1020 87
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1020 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1020 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1020 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_32_241__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_32_241__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_32_241__stack_frame_size: .word 32

  .loc 5 1027 16
  .text
anonymous_function_33_242:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_33_242__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_33_242__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1028 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1029 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1030 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1030 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1030 20
  # $4.1: @FILE = call(write_383, $3.1, " * ")
  mov rdi, rax
  lea rsi, .LABEL__string_304[rip] # " * "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1030 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1030 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1030 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1030 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_33_242__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_33_242__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_33_242__stack_frame_size: .word 32

  .loc 5 1037 16
  .text
anonymous_function_34_243:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_34_243__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_34_243__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1038 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1039 31
  # instruction.1: @IR_Binary_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1040 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, rax
  mov [rbp-16], rax
  call get_left_value_232
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1040 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1040 20
  # $4.1: @FILE = call(write_383, $3.1, " != ")
  mov rdi, rax
  lea rsi, .LABEL__string_305[rip] # " != "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1040 87
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1040 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1040 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1040 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_34_243__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_34_243__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_34_243__stack_frame_size: .word 32

  .loc 5 1047 16
  .text
anonymous_function_35_244:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_35_244__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_35_244__1:
  # instruction.1: @IR_Binary_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1049 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1050 31
  # $2.1: @IR_Value = call(get_left_value_232, instruction.1)
  mov rdi, [rbp-16]
  call get_left_value_232
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] $2.1:rax 
  .loc 5 1050 20
  # $3.1: @FILE = call(write_154, file.1, $2.1, true)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $2.1
  # [discarded value]: file.1
  # [live values]: instruction.1:[rbp-16] $3.1:rax 
  .loc 5 1050 20
  # $4.1: @FILE = call(write_383, $3.1, " - ")
  mov rdi, rax
  lea rsi, .LABEL__string_306[rip] # " - "
  call write_383
  # [discarded value]: $3.1
  # [live values]: instruction.1:[rbp-16] $4.1:rax 
  .loc 5 1050 86
  # $5.1: @IR_Value = call(get_right_value_233, instruction.1)
  mov rdi, [rbp-16]
  mov [rbp-24], rax
  call get_right_value_233
  # [discarded value]: instruction.1
  # [live values]: $4.1:[rbp-24] $5.1:rax 
  .loc 5 1050 20
  # $6.1: @FILE = call(write_154, $4.1, $5.1, true)
  mov rdi, [rbp-24]
  mov rsi, rax
  mov dl, 1
  call write_154
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: $6.1:rax 
  .loc 5 1050 20
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $6.1
  # [live values]: $7.1:rax 
  .loc 5 1050 13
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_35_244__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__anonymous_function_35_244__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_35_244__stack_frame_size: .word 32

  .loc 5 1057 16
  .text
anonymous_function_36_245:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_36_245__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_36_245__1:
  # instruction.1: @IR_Instruction = load_variable(instruction)
  # [live values]: instruction.1:rdi 
  # file.1: @FILE = load_variable(file)
  # [live values]: instruction.1:rdi file.1:rsi 
  # prefix.1: @String = load_variable(prefix)
  # [live values]: instruction.1:rdi file.1:rsi prefix.1:rdx 
  .loc 5 1058 13
  # call(dump_ir_instruction_result_176, instruction.1, file.1, prefix.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call dump_ir_instruction_result_176
  # [discarded value]: prefix.1
  # [live values]: instruction.1:[rbp-16] file.1:[rbp-8] 
  .loc 5 1059 31
  # instruction.1: @IR_Phi_Instruction = instruction.1
  mov rax, [rbp-16]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] instruction.1:rax 
  .loc 5 1060 13
  # $2.1: @FILE = call(write_383, file.1, "phi")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_307[rip] # "phi"
  mov [rbp-16], rax
  call write_383
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] $2.1:rax 
  .loc 5 1060 13
  # $3.1: @FILE = call(write_385, $2.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] instruction.1:[rbp-16] 
  .loc 5 1061 40
  # $4.1: @IR_Values_Map = load_struct_member(instruction.1, operand_values)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: instruction.1
  # [live values]: file.1:[rbp-8] $4.1:rbx 
  .loc 5 1061 40
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($4.1, first_entry)
  mov rax, [rbx]
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax 
  .loc 5 1062 17
  # $6.1: bool = operand_values_entry.1 != null
  cmp rax, 0
  setne bl
  # [live values]: file.1:[rbp-8] operand_values_entry.1:rax $6.1:rbx 
  # jump($6.1, .LABEL__anonymous_function_36_245__4, .LABEL__anonymous_function_36_245__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__anonymous_function_36_245__3
.LABEL__anonymous_function_36_245__4:
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.1)
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 1064 32
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:rax:[rbp-16] $7.1:rbx 
  .loc 5 1064 21
  # $8.1: @FILE = call(write_154, file.1, $7.1, true)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov dl, 1
  call write_154
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.2:[rbp-16] 
  .loc 5 1065 44
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-16]
  mov rbx, [rax+24]
  # [discarded value]: operand_values_entry.2
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] operand_values_entry.3:rbx:[rbp-16] 
  .loc 5 1066 25
  # $10.1: bool = operand_values_entry.3 == null
  cmp rbx, 0
  sete al
  mov [rbp-16], rbx
  # [discarded value]: operand_values_entry.3
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__anonymous_function_36_245__3, .LABEL__anonymous_function_36_245__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__anonymous_function_36_245__7
.LABEL__anonymous_function_36_245__3:
  .loc 5 1072 20
  # $12.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_385
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $12.1:rax $10.1:[rbp-18] 
  .loc 5 1072 20
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $13.1:rax $10.1:[rbp-18] 
  .loc 5 1072 13
  # return($13.1)
  mov [rbp-26], rax
  jmp .LABEL__anonymous_function_36_245__end
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
.LABEL__anonymous_function_36_245__7:
  .loc 5 1069 21
  # $11.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # jump(.LABEL__anonymous_function_36_245__4)
  jmp .LABEL__anonymous_function_36_245__4
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] $6.1:[rbp-17] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] operand_values_entry.1:[rbp-16] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__anonymous_function_36_245__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_36_245__stack_frame_size: .word 32

  .loc 5 1077 8
  .text
create_ir_phi_instruction_246:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_ir_phi_instruction_246__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_ir_phi_instruction_246__1:
  # result_value.1: @IR_Variable_Value = load_variable(result_value)
  # [live values]: result_value.1:rdi 
  .loc 5 484 37
  # $1.1: @IR_Values_Map = new IR_Values_Map(first_entry = null, last_entry = null)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  #     .first_entry = null
  mov QWORD PTR [rax], 0
  #     .last_entry = null
  mov QWORD PTR [rax+8], 0
  # [live values]: result_value.1:[rbp-8] $1.1:rax 
  .loc 5 1078 23
  # instruction.1: @IR_Phi_Instruction = new IR_Phi_Instruction(object_type = IR_Phi_Instruction, result_value = result_value.1, dump = anonymous_function_36_245.address, location = null, operand_values = $1.1, parent_block = undefined, prev_instruction = null, next_instruction = null, is_generated = false)
  mov [rbp-16], rax
  mov rdi, 65
  call malloc
  #     .object_type = IR_Phi_Instruction
  mov rbx, IR_Phi_Instruction[rip]
  mov [rax], rbx
  #     .location = null
  mov QWORD PTR [rax+8], 0
  #     .result_value = result_value.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+16], rbx
  #     .operand_values = $1.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .parent_block = undefined
  #     .prev_instruction = null
  mov QWORD PTR [rax+40], 0
  #     .next_instruction = null
  mov QWORD PTR [rax+48], 0
  #     .is_generated = false
  mov BYTE PTR [rax+56], 0
  #     .dump = anonymous_function_36_245.address
  lea r14, anonymous_function_36_245[rip]
  mov [rax+57], r14
  # [discarded value]: $1.1
  # [live values]: result_value.1:rbx:[rbp-8] instruction.1:rax 
  .loc 5 1079 5
  # store_struct_member(result_value.1, creator_instruction, instruction.1)
  mov QWORD PTR [rbx+16], rax
  # [discarded value]: result_value.1
  # [live values]: instruction.1:rax 
  .loc 5 1080 5
  # return(instruction.1)
  mov [rbp-8], rax
  jmp .LABEL__create_ir_phi_instruction_246__end
  # [discarded value]: instruction.1
  # [live values]: 
.LABEL__create_ir_phi_instruction_246__end:
  mov rsp, rbp
  pop rbp
  ret

create_ir_phi_instruction_246__stack_frame_size: .word 16

  .loc 5 1083 8
  .text
append_247:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_247__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_247__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  # value.1: @IR_Value = load_variable(value)
  # [live values]: self.1:rdi value.1:rsi 
  .loc 5 1084 5
  # call(set_operand_value_178, self.1, value.1, value.1)
  mov rdx, rsi
  call set_operand_value_178
  # [discarded value]: value.1
  # [discarded value]: self.1
  # [live values]: 
  # return()
  jmp .LABEL__append_247__end
  # [live values]: 
.LABEL__append_247__end:
  mov rsp, rbp
  pop rbp
  ret

append_247__stack_frame_size: .word 0

  .loc 5 1087 8
  .text
is_redundant_248:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_redundant_248__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_redundant_248__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 1091 32
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 5 1091 32
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: operand_values_entry.1:rbx 
  .loc 5 1092 9
  # $3.1: bool = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_redundant_248__2, .LABEL__is_redundant_248__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  jz .LABEL__is_redundant_248__3
.LABEL__is_redundant_248__2:
  .loc 5 1093 9
  # call(abort)
  call abort
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_redundant_248__3:
  .loc 5 1095 23
  # other_value.1: @IR_Value = load_struct_member(operand_values_entry.1, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:rax:[rbp-9] $3.1:[rbp-1] other_value.1:rbx 
  .loc 5 1096 28
  # operand_values_entry.3: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.1, next_entry)
  mov r15, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:rbx operand_values_entry.3:r15:[rbp-9] 
  # jump(.LABEL__is_redundant_248__4)
  mov [rbp-17], rbx
  mov [rbp-9], r15
.LABEL__is_redundant_248__4:
  # operand_values_entry.4: @IR_Values_Map_Entry = phi(operand_values_entry.3, operand_values_entry.7)
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  .loc 5 1097 12
  # $6.1: bool = operand_values_entry.4 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__is_redundant_248__5, .LABEL__is_redundant_248__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__is_redundant_248__6
.LABEL__is_redundant_248__5:
  .loc 5 1098 13
  # $7.1: @IR_Value = load_struct_member(operand_values_entry.4, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $7.1:rbx 
  .loc 5 1098 13
  # $8.1: bool = $7.1 != other_value.1
  cmp rbx, QWORD PTR [rbp-17]
  setne r15b
  # [discarded value]: $7.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:rax:[rbp-9] $6.1:[rbp-18] $8.1:r15 
  # jump($8.1, .LABEL__is_redundant_248__7, .LABEL__is_redundant_248__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__is_redundant_248__8
.LABEL__is_redundant_248__7:
  .loc 5 1099 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_redundant_248__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
.LABEL__is_redundant_248__8:
  .loc 5 1101 32
  # operand_values_entry.7: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.4, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:rbx:[rbp-9] 
  # jump(.LABEL__is_redundant_248__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_redundant_248__4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] operand_values_entry.7:[rbp-9] 
  # [discarded value]: operand_values_entry.7
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] $8.1:[rbp-19] 
  # [discarded value]: $8.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
.LABEL__is_redundant_248__6:
  .loc 5 1103 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_redundant_248__end
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] $6.1:[rbp-18] 
  # [discarded value]: $6.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] operand_values_entry.4:[rbp-9] 
  # [discarded value]: operand_values_entry.4
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] other_value.1:[rbp-17] operand_values_entry.3:[rbp-9] 
  # [discarded value]: operand_values_entry.3
  # [discarded value]: other_value.1
  # [live values]: operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [live values]: 
.LABEL__is_redundant_248__end:
  mov rsp, rbp
  pop rbp
  ret

is_redundant_248__stack_frame_size: .word 32

  .loc 5 1106 8
  .text
is_trivial_249:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_trivial_249__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_trivial_249__1:
  # self.1: @IR_Phi_Instruction = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 5 1111 32
  # $1.1: @IR_Values_Map = load_struct_member(self.1, operand_values)
  mov rax, [rdi+24]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 5 1111 32
  # operand_values_entry.1: @IR_Values_Map_Entry = load_struct_member($1.1, first_entry)
  mov rbx, [rax]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi operand_values_entry.1:rbx 
  .loc 5 1112 9
  # $3.1: bool = operand_values_entry.1 == null
  cmp rbx, 0
  sete al
  # [live values]: self.1:rdi operand_values_entry.1:rbx $3.1:rax 
  # jump($3.1, .LABEL__is_trivial_249__2, .LABEL__is_trivial_249__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rbx
  mov [rbp-17], rdi
  jz .LABEL__is_trivial_249__3
.LABEL__is_trivial_249__2:
  .loc 5 1113 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__is_trivial_249__3:
  .loc 5 1115 34
  # result_value.1: @IR_Value = load_struct_member(self.1, result_value)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx 
  .loc 5 1116 9
  # other_value.1: @IR_Value = null
  xor r15, r15
  # [live values]: self.1:rax:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:rbx other_value.1:r15 
  # jump(.LABEL__is_trivial_249__4)
  mov [rbp-25], rbx
  mov [rbp-33], r15
.LABEL__is_trivial_249__4:
  # other_value.5: @IR_Value = phi(other_value.1, other_value.6)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] 
  # operand_values_entry.2: @IR_Values_Map_Entry = phi(operand_values_entry.1, operand_values_entry.5)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  .loc 5 1117 12
  # $5.1: bool = operand_values_entry.2 != null
  cmp QWORD PTR [rbp-9], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:rax 
  # jump($5.1, .LABEL__is_trivial_249__5, .LABEL__is_trivial_249__6)
  test al, al
  mov [rbp-34], al
  jz .LABEL__is_trivial_249__6
.LABEL__is_trivial_249__5:
  .loc 5 1118 21
  # value.1: @IR_Value = load_struct_member(operand_values_entry.2, value)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx 
  .loc 5 1119 13
  # $7.1: bool = value.1 != result_value.1
  cmp rbx, QWORD PTR [rbp-25]
  setne r15b
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:rax:[rbp-9] $5.1:[rbp-34] value.1:rbx $7.1:r15 
  # jump($7.1, .LABEL__is_trivial_249__7, .LABEL__is_trivial_249__8)
  test r15b, r15b
  mov [rbp-42], rbx
  mov [rbp-43], r15b
  jz .LABEL__is_trivial_249__8
.LABEL__is_trivial_249__7:
  .loc 5 1120 17
  # $8.1: bool = value.1 != other_value.5
  mov rax, [rbp-42]
  cmp rax, QWORD PTR [rbp-33]
  setne bl
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:rax:[rbp-42] $7.1:[rbp-43] $8.1:rbx 
  # jump($8.1, .LABEL__is_trivial_249__9, .LABEL__is_trivial_249__8)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__is_trivial_249__8
.LABEL__is_trivial_249__9:
  .loc 5 1121 21
  # $9.1: bool = other_value.5 != null
  cmp QWORD PTR [rbp-33], 0
  setne al
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:rax 
  # jump($9.1, .LABEL__is_trivial_249__11, .LABEL__is_trivial_249__12)
  test al, al
  mov [rbp-45], al
  jz .LABEL__is_trivial_249__12
.LABEL__is_trivial_249__11:
  .loc 5 1122 21
  # return(false)
  mov al, 0
  jmp .LABEL__is_trivial_249__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
.LABEL__is_trivial_249__12:
  .loc 5 1124 17
  # other_value.4: @IR_Value = value.1
  mov rax, [rbp-42]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:rax:[rbp-33] 
  # jump(.LABEL__is_trivial_249__8)
  mov [rbp-33], rax
.LABEL__is_trivial_249__8:
  # other_value.6: @IR_Value = phi(other_value.5, other_value.4)
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] $9.1:[rbp-45] other_value.4:[rbp-33] 
  .loc 5 1127 32
  # operand_values_entry.5: @IR_Values_Map_Entry = load_struct_member(operand_values_entry.2, next_entry)
  mov rax, [rbp-9]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:rbx:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # jump(.LABEL__is_trivial_249__4)
  mov [rbp-9], rbx
  jmp .LABEL__is_trivial_249__4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] other_value.6:[rbp-33] operand_values_entry.5:[rbp-9] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: operand_values_entry.5
  # [discarded value]: other_value.6
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] other_value.4:[rbp-33] 
  # [discarded value]: other_value.4
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] $9.1:[rbp-45] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] $8.1:[rbp-44] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] $7.1:[rbp-43] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] value.1:[rbp-42] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
.LABEL__is_trivial_249__6:
  .loc 5 1129 5
  # return(true)
  mov al, 1
  jmp .LABEL__is_trivial_249__end
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] other_value.5:[rbp-33] operand_values_entry.2:[rbp-9] 
  # [discarded value]: operand_values_entry.2
  # [discarded value]: other_value.5
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] result_value.1:[rbp-25] other_value.1:[rbp-33] 
  # [discarded value]: other_value.1
  # [discarded value]: result_value.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] operand_values_entry.1:[rbp-9] 
  # [discarded value]: operand_values_entry.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__is_trivial_249__end:
  mov rsp, rbp
  pop rbp
  ret

is_trivial_249__stack_frame_size: .word 48

  .loc 7 10 8
  .text
parse_250:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_250__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_250__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 8 4 21
  # $1.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:rax 
  .loc 8 5 19
  # $2.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:rax 
  .loc 8 6 30
  # $3.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-24], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:rax 
  .loc 8 7 23
  # $4.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-32], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:rax 
  .loc 8 8 24
  # $5.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-40], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: file_path.1:[rbp-8] $1.1:[rbp-16] $2.1:[rbp-24] $3.1:[rbp-32] $4.1:[rbp-40] $5.1:rax 
  .loc 7 5 42
  # $6.1: @Compilation_Unit = new Compilation_Unit(sources = $1.1, types = $2.1, global_variables = $3.1, functions = $4.1, statements = $5.1)
  mov [rbp-48], rax
  mov rdi, 40
  call malloc
  #     .sources = $1.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .types = $2.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+8], r15
  #     .global_variables = $3.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+16], r14
  #     .functions = $4.1
  mov r13, [rbp-40]
  mov QWORD PTR [rax+24], r13
  #     .statements = $5.1
  mov r12, [rbp-48]
  mov QWORD PTR [rax+32], r12
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] $6.1:rax 
  .loc 7 11 18
  # parser.1: @Parser = new Parser(scanner = null, compilation_unit = $6.1, current_alignment = 0, anonymous_functions_counter = Counter(value = 0))
  mov [rbp-16], rax
  mov rdi, 32
  call malloc
  #     .scanner = null
  mov QWORD PTR [rax], 0
  #     .compilation_unit = $6.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .current_alignment = 0
  mov QWORD PTR [rax+16], 0
  #     .anonymous_functions_counter = Counter(value = 0)
  #     .value = 0
  mov QWORD PTR [rax+24], 0
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-8] parser.1:rax 
  .loc 7 12 5
  # call(parse_251, parser.1, file_path.1, null)
  mov rdi, rax
  mov rsi, [rbp-8]
  xor rdx, rdx
  mov [rbp-16], rax
  call parse_251
  # [discarded value]: file_path.1
  # [live values]: parser.1:[rbp-16] 
  .loc 7 13 12
  # $8.1: @Compilation_Unit = load_struct_member(parser.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [discarded value]: parser.1
  # [live values]: $8.1:rbx 
  .loc 7 13 5
  # return($8.1)
  mov rax, rbx
  mov [rbp-8], rbx
  jmp .LABEL__parse_250__end
  # [discarded value]: $8.1
  # [live values]: 
.LABEL__parse_250__end:
  mov rsp, rbp
  pop rbp
  ret

parse_250__stack_frame_size: .word 48

  .loc 7 16 8
  .text
parse_251:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_251__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_251__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # file_path.1: @String = load_variable(file_path)
  # [live values]: self.1:rdi file_path.1:rsi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi file_path.1:rsi location.1:rdx 
  .loc 7 17 18
  # source.1: @Source = call(create_source_362, file_path.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  call create_source_362
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax 
  .loc 7 18 9
  # $2.1: bool = source.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_251__2, .LABEL__parse_251__3)
  test bl, bl
  mov [rbp-32], rax
  mov [rbp-33], bl
  jz .LABEL__parse_251__3
.LABEL__parse_251__2:
  .loc 7 19 23
  # $3.1: @String = call(clone_391, "Failed to open file: ")
  lea rdi, .LABEL__string_308[rip] # "Failed to open file: "
  call clone_391
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $3.1:rax 
  .loc 7 19 23
  # message.1: @String = call(append_400, $3.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-24]
  call append_400
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax 
  .loc 7 20 13
  # $5.1: bool = location.1 != null
  cmp QWORD PTR [rbp-16], 0
  setne bl
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:rax $5.1:rbx 
  # jump($5.1, .LABEL__parse_251__4, .LABEL__parse_251__5)
  test bl, bl
  mov [rbp-41], rax
  mov [rbp-42], bl
  jz .LABEL__parse_251__5
.LABEL__parse_251__4:
  .loc 7 21 13
  # call(abort_360, location.1, message.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-41]
  call abort_360
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
.LABEL__parse_251__5:
  .loc 7 23 9
  # call(abort_388, message.1)
  mov rdi, [rbp-41]
  call abort_388
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] $5.1:[rbp-42] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] message.1:[rbp-41] 
  # [discarded value]: message.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
.LABEL__parse_251__3:
  .loc 7 26 5
  # $6.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $6.1:rbx 
  .loc 7 26 5
  # $7.1: @List = load_struct_member($6.1, sources)
  mov r15, [rbx]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $7.1:r15 
  .loc 7 26 5
  # call(append_364, $7.1, source.1)
  mov rdi, r15
  mov rsi, [rbp-32]
  call append_364
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  .loc 7 27 17
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $8.1:rbx 
  .loc 7 27 17
  # $9.1: @List = load_struct_member($8.1, sources)
  mov r15, [rbx]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $9.1:r15 
  .loc 7 27 17
  # $10.1: isize = load_struct_member($9.1, size)
  mov rbx, [r15+16]
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] $10.1:rbx 
  .loc 7 27 5
  # store_struct_member(source.1, id, $10.1)
  mov r15, [rbp-32]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] 
  .loc 7 29 25
  # other_scanner.1: @Scanner = load_struct_member(self.1, scanner)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:r15:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx 
  .loc 7 30 20
  # $12.1: @Scanner = call(create_scanner_342, source.1)
  mov rdi, r15
  mov [rbp-41], rbx
  call create_scanner_342
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $12.1:rax 
  .loc 7 30 5
  # store_struct_member(self.1, scanner, $12.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 31 27
  # $13.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $13.1:rax 
  .loc 7 31 27
  # $14.1: @List = load_struct_member($13.1, statements)
  mov r15, [rax+32]
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $14.1:r15 
  .loc 7 31 5
  # call(parse_statements_252, self.1, $14.1)
  mov rdi, rbx
  mov rsi, r15
  call parse_statements_252
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] 
  .loc 7 33 17
  # $15.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] $15.1:rbx 
  .loc 7 33 17
  # token.1: @Token = load_struct_member($15.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:r15 
  .loc 7 34 9
  # $17.1: bool = call(is_389, token.1, End_Of_File_Token)
  mov rdi, r15
  mov rsi, End_Of_File_Token[rip]
  mov [rbp-49], r15
  call is_389
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $17.1:rax 
  .loc 7 34 9
  # $18.1: bool = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:rbx 
  # jump($18.1, .LABEL__parse_251__6, .LABEL__parse_251__7)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__parse_251__7
.LABEL__parse_251__6:
  .loc 7 35 21
  # $19.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] $19.1:rbx 
  .loc 7 35 21
  # $20.1: @Token = load_struct_member($19.1, current_token)
  mov r15, [rbx+32]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] $20.1:r15 
  .loc 7 35 9
  # call(abort_301, self.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call abort_301
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] 
.LABEL__parse_251__7:
  .loc 7 37 17
  # token.1: @End_Of_File_Token = token.1
  mov rax, [rbp-49]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax 
  .loc 7 38 9
  # $22.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $22.1:rbx 
  .loc 7 38 9
  # $23.1: isize = load_struct_member($22.1, column)
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $23.1:r15 
  .loc 7 38 9
  # $24.1: bool = $23.1 != 1
  cmp r15, 1
  setne bl
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax $24.1:rbx 
  # jump($24.1, .LABEL__parse_251__8, .LABEL__parse_251__9)
  test bl, bl
  mov [rbp-58], rax
  mov [rbp-59], bl
  jz .LABEL__parse_251__9
.LABEL__parse_251__8:
  .loc 7 39 22
  # $25.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-58]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:rax:[rbp-58] $24.1:[rbp-59] $25.1:rbx 
  .loc 7 39 9
  # $26.1: @FILE = call(write_363, stderr, $25.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] $26.1:rax 
  .loc 7 39 9
  # $27.1: @FILE = call(write_383, $26.1, ": File doesn't end with a new line")
  mov rdi, rax
  lea rsi, .LABEL__string_309[rip] # ": File doesn't end with a new line"
  call write_383
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] $27.1:rax 
  .loc 7 39 9
  # $28.1: @FILE = call(end_line_386, $27.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # jump(.LABEL__parse_251__9)
.LABEL__parse_251__9:
  .loc 7 42 5
  # store_struct_member(self.1, scanner, other_scanner.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-41]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:rbx:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # return()
  jmp .LABEL__parse_251__end
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] $24.1:[rbp-59] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] token.1:[rbp-58] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] other_scanner.1:[rbp-41] token.1:[rbp-49] 
  # [discarded value]: token.1
  # [discarded value]: other_scanner.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] file_path.1:[rbp-24] location.1:[rbp-16] source.1:[rbp-32] 
  # [discarded value]: source.1
  # [discarded value]: location.1
  # [discarded value]: file_path.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_251__end:
  mov rsp, rbp
  pop rbp
  ret

parse_251__stack_frame_size: .word 64

  .loc 7 47 8
  .text
parse_statements_252:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statements_252__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statements_252__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # statements.1: @List = load_variable(statements)
  # [live values]: self.1:rdi statements.1:rsi 
  # jump(.LABEL__parse_statements_252__2)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
.LABEL__parse_statements_252__2:
  .loc 7 49 25
  # statement.1: @AST_Statement = call(parse_statement_254, self.1)
  mov rdi, [rbp-16]
  call parse_statement_254
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax 
  .loc 7 50 13
  # $2.1: bool = statement.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_statements_252__3, .LABEL__parse_statements_252__5)
  test bl, bl
  mov [rbp-24], rax
  mov [rbp-25], bl
  jz .LABEL__parse_statements_252__5
.LABEL__parse_statements_252__3:
  # return()
  jmp .LABEL__parse_statements_252__end
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
.LABEL__parse_statements_252__5:
  .loc 7 53 9
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  .loc 7 54 13
  # $3.1: bool = call(is_389, statement.1, AST_Include_Statement)
  mov rdi, [rbp-24]
  mov rsi, AST_Include_Statement[rip]
  call is_389
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__parse_statements_252__7, .LABEL__parse_statements_252__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_statements_252__9
.LABEL__parse_statements_252__7:
  .loc 7 55 29
  # statement.1: @AST_Include_Statement = statement.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax 
  .loc 7 57 39
  # $5.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx 
  .loc 7 57 78
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $6.1:r15 
  .loc 7 57 78
  # $7.1: @Source = load_struct_member($6.1, source)
  mov r14, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $7.1:r14 
  .loc 7 57 78
  # $8.1: @String = load_struct_member($7.1, file_path)
  mov r15, [r14+8]
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax $5.1:rbx $8.1:r15 
  .loc 7 57 39
  # statement_file_path.1: @String = call(make_relative_path_253, $5.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  mov [rbp-34], rax
  call make_relative_path_253
  # [discarded value]: $8.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax 
  .loc 7 58 17
  # $10.1: bool = statement_file_path.1 == null
  cmp rax, 0
  sete bl
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__parse_statements_252__10, .LABEL__parse_statements_252__11)
  test bl, bl
  mov [rbp-42], rax
  mov [rbp-43], bl
  jz .LABEL__parse_statements_252__11
.LABEL__parse_statements_252__10:
  .loc 7 59 23
  # $11.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:rbx 
  .loc 7 59 43
  # $12.1: @String = call(clone_391, "Unsupported file path: ")
  lea rdi, .LABEL__string_310[rip] # "Unsupported file path: "
  mov [rbp-51], rbx
  call clone_391
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax 
  .loc 7 59 83
  # $13.1: @String = load_struct_member(statement.1, file_path)
  mov rbx, [rbp-34]
  mov r15, [rbx+24]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rbx:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $12.1:rax $13.1:r15 
  .loc 7 59 43
  # $14.1: @String = call(append_400, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call append_400
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $11.1:[rbp-51] $14.1:rax 
  .loc 7 59 17
  # call(abort_360, $11.1, $14.1)
  mov rdi, [rbp-51]
  mov rsi, rax
  call abort_360
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
.LABEL__parse_statements_252__11:
  .loc 7 62 49
  # $15.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $15.1:rbx 
  .loc 7 62 49
  # $16.1: @List = load_struct_member($15.1, sources)
  mov r15, [rbx]
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] $16.1:r15 
  .loc 7 62 49
  # compilation_unit_sources_item.1: @List_Item = load_struct_member($16.1, first_item)
  mov rbx, [r15]
  # [discarded value]: $16.1
  # [live values]: self.1:rax:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:rbx 
  # jump(.LABEL__parse_statements_252__12)
  mov [rbp-51], rbx
.LABEL__parse_statements_252__12:
  # compilation_unit_sources_item.2: @List_Item = phi(compilation_unit_sources_item.1, compilation_unit_sources_item.5)
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  .loc 7 63 20
  # $18.1: bool = compilation_unit_sources_item.2 != null
  cmp QWORD PTR [rbp-51], 0
  setne al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:rax 
  # jump($18.1, .LABEL__parse_statements_252__13, .LABEL__parse_statements_252__14)
  test al, al
  mov [rbp-52], al
  jz .LABEL__parse_statements_252__14
.LABEL__parse_statements_252__13:
  .loc 7 64 22
  # $20.1: @Source = load_struct_member(compilation_unit_sources_item.2, data)
  mov rax, [rbp-51]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $20.1:rbx 
  .loc 7 64 21
  # $21.1: @String = load_struct_member($20.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:rax:[rbp-51] $18.1:[rbp-52] $21.1:r15 
  .loc 7 64 21
  # $22.1: bool = call(equals_392, $21.1, statement_file_path.1)
  mov rdi, r15
  mov rsi, [rbp-42]
  call equals_392
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:rax 
  # jump($22.1, .LABEL__parse_statements_252__14, .LABEL__parse_statements_252__16)
  test al, al
  mov [rbp-53], al
  jz .LABEL__parse_statements_252__16
.LABEL__parse_statements_252__14:
  .loc 7 70 17
  # $24.1: bool = compilation_unit_sources_item.2 == null
  cmp QWORD PTR [rbp-51], 0
  sete al
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:rax 
  # jump($24.1, .LABEL__parse_statements_252__18, .LABEL__parse_statements_252__2)
  test al, al
  mov [rbp-54], al
  jz .LABEL__parse_statements_252__2
.LABEL__parse_statements_252__18:
  .loc 7 71 49
  # $25.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-34]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:rax:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] $25.1:rbx 
  .loc 7 71 17
  # call(parse_251, self.1, statement_file_path.1, $25.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-42]
  mov rdx, rbx
  call parse_251
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # jump(.LABEL__parse_statements_252__2)
  jmp .LABEL__parse_statements_252__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] $24.1:[rbp-54] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
.LABEL__parse_statements_252__16:
  .loc 7 67 49
  # compilation_unit_sources_item.5: @List_Item = load_struct_member(compilation_unit_sources_item.2, next_item)
  mov rax, [rbp-51]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:rbx:[rbp-51] 
  # jump(.LABEL__parse_statements_252__12)
  mov [rbp-51], rbx
  jmp .LABEL__parse_statements_252__12
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] compilation_unit_sources_item.5:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.5
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] $22.1:[rbp-53] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] $18.1:[rbp-52] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] compilation_unit_sources_item.2:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] compilation_unit_sources_item.1:[rbp-51] 
  # [discarded value]: compilation_unit_sources_item.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] $10.1:[rbp-43] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] statement.1:[rbp-34] statement_file_path.1:[rbp-42] 
  # [discarded value]: statement_file_path.1
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
.LABEL__parse_statements_252__9:
  .loc 7 74 13
  # call(append_364, statements.1, statement.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-24]
  call append_364
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # jump(.LABEL__parse_statements_252__2)
  jmp .LABEL__parse_statements_252__2
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] statement.1:[rbp-24] 
  # [discarded value]: statement.1
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] statements.1:[rbp-8] 
  # [discarded value]: statements.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statements_252__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statements_252__stack_frame_size: .word 64

  .loc 7 79 8
  .text
make_relative_path_253:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR make_relative_path_253__stack_frame_size[rip]
  sub rsp, rax
.LABEL__make_relative_path_253__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  # base_file_path.1: @String = load_variable(base_file_path)
  # [live values]: file_path.1:rdi base_file_path.1:rsi 
  .loc 7 80 9
  # $1.1: bool = call(starts_with_394, file_path.1, "./")
  mov [rbp-8], rsi
  lea rsi, .LABEL__string_311[rip] # "./"
  mov [rbp-16], rdi
  call starts_with_394
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__make_relative_path_253__2, .LABEL__make_relative_path_253__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__make_relative_path_253__3
.LABEL__make_relative_path_253__2:
  .loc 7 81 29
  # $2.1: @String = call(clone_391, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_391
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 81 29
  # $3.1: @String = call(append_400, $2.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_400
  # [discarded value]: $2.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:rax 
  .loc 7 81 76
  # $4.1: isize = call(last_index_of_396, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-25], rax
  call last_index_of_396
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $4.1:rax 
  .loc 7 81 76
  # $5.1: isize = $4.1 + 1
  mov rbx, rax
  inc rbx
  # [discarded value]: $4.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx 
  .loc 7 81 115
  # $6.1: isize = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $6.1:r15 
  .loc 7 81 115
  # $7.1: isize = $6.1 + 2
  mov r14, r15
  add r14, 2
  # [discarded value]: $6.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-25] $5.1:rbx $7.1:r14 
  .loc 7 81 29
  # relative_path.1: @String = call(remove_401, $3.1, $5.1, $7.1)
  mov rdi, [rbp-25]
  mov rsi, rbx
  mov rdx, r14
  call remove_401
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [discarded value]: $3.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] relative_path.1:rax 
  .loc 7 82 9
  # return(relative_path.1)
  mov [rbp-25], rax
  jmp .LABEL__make_relative_path_253__end
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__make_relative_path_253__3:
  .loc 7 84 9
  # $9.1: bool = call(starts_with_394, file_path.1, "../")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_312[rip] # "../"
  call starts_with_394
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:rax 
  # jump($9.1, .LABEL__make_relative_path_253__5, .LABEL__make_relative_path_253__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__make_relative_path_253__6
.LABEL__make_relative_path_253__5:
  .loc 7 85 29
  # $10.1: @String = call(clone_391, base_file_path.1)
  mov rdi, [rbp-8]
  call clone_391
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $10.1:rax 
  .loc 7 85 29
  # $11.1: @String = call(append_400, $10.1, file_path.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call append_400
  # [discarded value]: $10.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:rax 
  .loc 7 85 76
  # $12.1: isize = call(last_index_of_396, base_file_path.1, '/')
  mov rdi, [rbp-8]
  mov sil, 47
  mov [rbp-26], rax
  call last_index_of_396
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $12.1:rax 
  .loc 7 85 76
  # $13.1: isize = $12.1 + 1
  mov rbx, rax
  inc rbx
  # [discarded value]: $12.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx 
  .loc 7 85 115
  # $14.1: isize = load_struct_member(base_file_path.1, length)
  mov rax, [rbp-8]
  mov r15, [rax+16]
  # [live values]: file_path.1:[rbp-16] base_file_path.1:rax:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:[rbp-26] $13.1:rbx $14.1:r15 
  .loc 7 85 29
  # relative_path.1: @String = call(remove_401, $11.1, $13.1, $14.1)
  mov rdi, [rbp-26]
  mov rsi, rbx
  mov rdx, r15
  call remove_401
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:rax 
  # jump(.LABEL__make_relative_path_253__7)
  mov [rbp-26], rax
.LABEL__make_relative_path_253__7:
  .loc 7 87 25
  # index.1: isize = call(index_of_393, relative_path.1, "/../")
  mov rdi, [rbp-26]
  lea rsi, .LABEL__string_313[rip] # "/../"
  call index_of_393
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax 
  .loc 7 88 17
  # $17.1: bool = index.1 <= 0
  cmp rax, 0
  setle bl
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:rax $17.1:rbx 
  # jump($17.1, .LABEL__make_relative_path_253__8, .LABEL__make_relative_path_253__10)
  test bl, bl
  mov [rbp-34], rax
  mov [rbp-35], bl
  jz .LABEL__make_relative_path_253__10
.LABEL__make_relative_path_253__8:
  .loc 7 93 9
  # return(relative_path.1)
  mov rax, [rbp-26]
  jmp .LABEL__make_relative_path_253__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__make_relative_path_253__10:
  .loc 7 91 67
  # $18.1: isize = index.1 - 1
  mov rax, [rbp-34]
  dec rax
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $18.1:rax 
  .loc 7 91 34
  # $19.1: isize = call(last_index_of_397, relative_path.1, '/', $18.1)
  mov rdi, [rbp-26]
  mov sil, 47
  mov rdx, rax
  call last_index_of_397
  # [discarded value]: $18.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax 
  .loc 7 91 79
  # $20.1: isize = index.1 + 3
  mov rbx, [rbp-34]
  add rbx, 3
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] $19.1:rax $20.1:rbx 
  .loc 7 91 13
  # $21.1: @String = call(remove_401, relative_path.1, $19.1, $20.1)
  mov rdi, [rbp-26]
  mov rsi, rax
  mov rdx, rbx
  call remove_401
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [discarded value]: $19.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__make_relative_path_253__7)
  jmp .LABEL__make_relative_path_253__7
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] relative_path.1:[rbp-26] 
  # [discarded value]: relative_path.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__make_relative_path_253__6:
  .loc 7 95 5
  # return(file_path.1)
  mov rax, [rbp-16]
  jmp .LABEL__make_relative_path_253__end
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-16] base_file_path.1:[rbp-8] 
  # [discarded value]: base_file_path.1
  # [discarded value]: file_path.1
  # [live values]: 
.LABEL__make_relative_path_253__end:
  mov rsp, rbp
  pop rbp
  ret

make_relative_path_253__stack_frame_size: .word 48

  .loc 7 107 8
  .text
parse_statement_254:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_statement_254__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_statement_254__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # jump(.LABEL__parse_statement_254__2)
  mov [rbp-8], rdi
.LABEL__parse_statement_254__2:
  .loc 7 108 12
  # $1.1: bool = call(consume_empty_line_281, self.1)
  mov rdi, [rbp-8]
  call consume_empty_line_281
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_statement_254__2, .LABEL__parse_statement_254__4)
  test al, al
  mov [rbp-9], al
  jnz .LABEL__parse_statement_254__2
.LABEL__parse_statement_254__4:
  .loc 7 111 9
  # $3.1: bool = call(matches_288, self.1, optional_space, required_close_brace)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_close_brace[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:rax 
  # jump($3.1, .LABEL__parse_statement_254__6, .LABEL__parse_statement_254__5)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_statement_254__5
.LABEL__parse_statement_254__6:
  .loc 7 111 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] 
  # jump($3.3, .LABEL__parse_statement_254__7, .LABEL__parse_statement_254__8)
  mov al, [rbp-10]
  test al, al
  jz .LABEL__parse_statement_254__8
.LABEL__parse_statement_254__7:
  .loc 7 112 9
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_254__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] 
.LABEL__parse_statement_254__8:
  .loc 7 115 24
  # $5.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $5.1:rbx 
  .loc 7 115 24
  # $6.1: isize = $5.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $6.1:r15 
  .loc 7 115 5
  # call(consume_space_282, self.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] 
  .loc 7 117 9
  # $7.1: bool = call(matches_287, self.1, required_define)
  mov rdi, [rbp-8]
  mov rsi, required_define[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:rax 
  # jump($7.1, .LABEL__parse_statement_254__10, .LABEL__parse_statement_254__11)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_statement_254__11
.LABEL__parse_statement_254__10:
  .loc 7 118 16
  # $8.1: @AST_Statement = call(parse_define_256, self.1)
  mov rdi, [rbp-8]
  call parse_define_256
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $8.1:rax 
  .loc 7 118 9
  # return($8.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] 
.LABEL__parse_statement_254__11:
  .loc 7 120 9
  # $9.1: bool = call(matches_287, self.1, required_let)
  mov rdi, [rbp-8]
  mov rsi, required_let[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:rax 
  # jump($9.1, .LABEL__parse_statement_254__13, .LABEL__parse_statement_254__14)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_statement_254__14
.LABEL__parse_statement_254__13:
  .loc 7 121 16
  # $10.1: @AST_Variable_Statement = call(parse_let_262, self.1)
  mov rdi, [rbp-8]
  call parse_let_262
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $10.1:rax 
  .loc 7 121 9
  # return($10.1)
  mov [rbp-20], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] 
.LABEL__parse_statement_254__14:
  .loc 7 123 9
  # $11.1: bool = call(matches_287, self.1, required_if)
  mov rdi, [rbp-8]
  mov rsi, required_if[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:rax 
  # jump($11.1, .LABEL__parse_statement_254__16, .LABEL__parse_statement_254__17)
  test al, al
  mov [rbp-13], al
  jz .LABEL__parse_statement_254__17
.LABEL__parse_statement_254__16:
  .loc 7 124 16
  # $12.1: @AST_Statement = call(parse_if_263, self.1)
  mov rdi, [rbp-8]
  call parse_if_263
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $12.1:rax 
  .loc 7 124 9
  # return($12.1)
  mov [rbp-21], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] 
.LABEL__parse_statement_254__17:
  .loc 7 126 9
  # $13.1: bool = call(matches_287, self.1, required_return)
  mov rdi, [rbp-8]
  mov rsi, required_return[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:rax 
  # jump($13.1, .LABEL__parse_statement_254__19, .LABEL__parse_statement_254__20)
  test al, al
  mov [rbp-14], al
  jz .LABEL__parse_statement_254__20
.LABEL__parse_statement_254__19:
  .loc 7 127 21
  # token.1: @Token = call(consume_283, self.1, required_return)
  mov rdi, [rbp-8]
  mov rsi, required_return[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:rax 
  .loc 7 128 13
  # value_expression.1: @AST_Expression = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:rax value_expression.1:rbx 
  .loc 7 129 13
  # $15.1: bool = call(matches_end_of_line_286, self.1)
  mov rdi, [rbp-8]
  mov [rbp-22], rax
  mov [rbp-30], rbx
  call matches_end_of_line_286
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $15.1:rax 
  .loc 7 129 13
  # $16.1: bool = $15.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:rbx 
  # jump($16.1, .LABEL__parse_statement_254__21, .LABEL__parse_statement_254__22)
  test bl, bl
  mov [rbp-31], bl
  jz .LABEL__parse_statement_254__22
.LABEL__parse_statement_254__21:
  .loc 7 130 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] 
  .loc 7 131 32
  # value_expression.2: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:rax:[rbp-30] 
  # jump(.LABEL__parse_statement_254__22)
  mov [rbp-30], rax
.LABEL__parse_statement_254__22:
  # value_expression.3: @AST_Expression = phi(value_expression.1, value_expression.2)
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:[rbp-30] value_expression.3:[rbp-30] 
  .loc 7 133 52
  # $18.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-22]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:rax:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:[rbp-30] value_expression.3:[rbp-30] $18.1:rbx 
  .loc 7 133 16
  # $19.1: @AST_Return_Statement = new AST_Return_Statement(object_type = AST_Return_Statement, location = $18.1, value_expression = value_expression.3, convert = anonymous_function_54_309.address)
  mov [rbp-39], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Return_Statement
  mov rbx, AST_Return_Statement[rip]
  mov [rax], rbx
  #     .location = $18.1
  mov rbx, [rbp-39]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_54_309.address
  lea r15, anonymous_function_54_309[rip]
  mov [rax+16], r15
  #     .value_expression = value_expression.3
  mov r15, [rbp-30]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $18.1
  # [discarded value]: value_expression.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:[rbp-30] $19.1:rax 
  .loc 7 133 9
  # return($19.1)
  mov [rbp-39], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:[rbp-30] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] value_expression.2:[rbp-30] 
  # [discarded value]: value_expression.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] $16.1:[rbp-31] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] token.1:[rbp-22] value_expression.1:[rbp-30] 
  # [discarded value]: value_expression.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] 
.LABEL__parse_statement_254__20:
  .loc 7 135 9
  # $20.1: bool = call(matches_287, self.1, required_loop)
  mov rdi, [rbp-8]
  mov rsi, required_loop[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:rax 
  # jump($20.1, .LABEL__parse_statement_254__24, .LABEL__parse_statement_254__25)
  test al, al
  mov [rbp-15], al
  jz .LABEL__parse_statement_254__25
.LABEL__parse_statement_254__24:
  .loc 7 136 16
  # $21.1: @AST_Statement = call(parse_loop_264, self.1)
  mov rdi, [rbp-8]
  call parse_loop_264
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $21.1:rax 
  .loc 7 136 9
  # return($21.1)
  mov [rbp-23], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] 
.LABEL__parse_statement_254__25:
  .loc 7 138 9
  # $22.1: bool = call(matches_287, self.1, required_while)
  mov rdi, [rbp-8]
  mov rsi, required_while[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:rax 
  # jump($22.1, .LABEL__parse_statement_254__27, .LABEL__parse_statement_254__28)
  test al, al
  mov [rbp-16], al
  jz .LABEL__parse_statement_254__28
.LABEL__parse_statement_254__27:
  .loc 7 139 16
  # $23.1: @AST_Statement = call(parse_while_265, self.1)
  mov rdi, [rbp-8]
  call parse_while_265
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $23.1:rax 
  .loc 7 139 9
  # return($23.1)
  mov [rbp-24], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] 
.LABEL__parse_statement_254__28:
  .loc 7 141 9
  # $24.1: bool = call(matches_287, self.1, required_break)
  mov rdi, [rbp-8]
  mov rsi, required_break[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:rax 
  # jump($24.1, .LABEL__parse_statement_254__30, .LABEL__parse_statement_254__31)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_statement_254__31
.LABEL__parse_statement_254__30:
  .loc 7 142 21
  # token.1: @Token = call(consume_283, self.1, required_break)
  mov rdi, [rbp-8]
  mov rsi, required_break[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] token.1:rax 
  .loc 7 143 51
  # $26.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $26.1:rbx 
  .loc 7 143 16
  # $27.1: @AST_Break_Statement = new AST_Break_Statement(object_type = AST_Break_Statement, location = $26.1, convert = anonymous_function_53_308.address)
  mov [rbp-25], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Break_Statement
  mov rbx, AST_Break_Statement[rip]
  mov [rax], rbx
  #     .location = $26.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_53_308.address
  lea r15, anonymous_function_53_308[rip]
  mov [rax+16], r15
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $27.1:rax 
  .loc 7 143 9
  # return($27.1)
  mov [rbp-25], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] 
.LABEL__parse_statement_254__31:
  .loc 7 145 9
  # $28.1: bool = call(matches_287, self.1, required_include)
  mov rdi, [rbp-8]
  mov rsi, required_include[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:rax 
  # jump($28.1, .LABEL__parse_statement_254__33, .LABEL__parse_statement_254__34)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_statement_254__34
.LABEL__parse_statement_254__33:
  .loc 7 146 16
  # $29.1: @AST_Include_Statement = call(parse_include_255, self.1)
  mov rdi, [rbp-8]
  call parse_include_255
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] $29.1:rax 
  .loc 7 146 9
  # return($29.1)
  mov [rbp-26], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] 
.LABEL__parse_statement_254__34:
  .loc 7 149 22
  # expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:rax 
  .loc 7 151 9
  # $31.1: bool = call(matches_289, self.1, optional_space, optional_comment, required_end_of_line)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, optional_comment[rip]
  mov rcx, required_end_of_line[rip]
  mov [rbp-26], rax
  call matches_289
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:rax 
  # jump($31.1, .LABEL__parse_statement_254__36, .LABEL__parse_statement_254__37)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_statement_254__37
.LABEL__parse_statement_254__36:
  .loc 7 152 56
  # $32.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-26]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:rax:[rbp-26] $31.1:[rbp-27] $32.1:rbx 
  .loc 7 152 16
  # $33.1: @AST_Expression_Statement = new AST_Expression_Statement(object_type = AST_Expression_Statement, location = $32.1, expression = expression.1, convert = anonymous_function_49_304.address)
  mov [rbp-35], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Expression_Statement
  mov rbx, AST_Expression_Statement[rip]
  mov [rax], rbx
  #     .location = $32.1
  mov rbx, [rbp-35]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_49_304.address
  lea r15, anonymous_function_49_304[rip]
  mov [rax+16], r15
  #     .expression = expression.1
  mov r15, [rbp-26]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:r15:[rbp-26] $31.1:[rbp-27] $33.1:rax 
  .loc 7 152 9
  # return($33.1)
  mov [rbp-35], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] 
.LABEL__parse_statement_254__37:
  .loc 7 155 9
  # $34.1: bool = call(matches_288, self.1, optional_space, required_equals)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_equals[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:rax 
  # jump($34.1, .LABEL__parse_statement_254__39, .LABEL__parse_statement_254__40)
  test al, al
  mov [rbp-28], al
  jz .LABEL__parse_statement_254__40
.LABEL__parse_statement_254__39:
  .loc 7 156 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] 
  .loc 7 157 24
  # operator.1: @Other_Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] operator.1:rax 
  .loc 7 158 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-36], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] operator.1:[rbp-36] 
  .loc 7 159 56
  # $37.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-26]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:rax:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] operator.1:[rbp-36] $37.1:rbx 
  .loc 7 159 150
  # $38.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  mov [rbp-44], rbx
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] operator.1:[rbp-36] $37.1:[rbp-44] $38.1:rax 
  .loc 7 159 16
  # $39.1: @AST_Assignment_Statement = new AST_Assignment_Statement(object_type = AST_Assignment_Statement, location = $37.1, storage_expression = expression.1, operator = operator.1, value_expression = $38.1, convert = anonymous_function_56_311.address)
  mov [rbp-52], rax
  mov rdi, 48
  call malloc
  #     .object_type = AST_Assignment_Statement
  mov rbx, AST_Assignment_Statement[rip]
  mov [rax], rbx
  #     .location = $37.1
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_56_311.address
  lea r15, anonymous_function_56_311[rip]
  mov [rax+16], r15
  #     .storage_expression = expression.1
  mov r15, [rbp-26]
  mov QWORD PTR [rax+24], r15
  #     .operator = operator.1
  mov r14, [rbp-36]
  mov QWORD PTR [rax+32], r14
  #     .value_expression = $38.1
  mov r13, [rbp-52]
  mov QWORD PTR [rax+40], r13
  # [discarded value]: $38.1
  # [discarded value]: $37.1
  # [discarded value]: operator.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:r15:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] $39.1:rax 
  .loc 7 159 9
  # return($39.1)
  mov [rbp-36], rax
  jmp .LABEL__parse_statement_254__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] 
.LABEL__parse_statement_254__40:
  .loc 7 162 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_statement_254__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] $34.1:[rbp-28] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] $31.1:[rbp-27] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] expression.1:[rbp-26] 
  # [discarded value]: expression.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] $28.1:[rbp-18] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] $24.1:[rbp-17] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] $22.1:[rbp-16] 
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] $20.1:[rbp-15] 
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] $13.1:[rbp-14] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] $11.1:[rbp-13] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] $9.1:[rbp-12] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] $7.1:[rbp-11] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.3:[rbp-10] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] 
.LABEL__parse_statement_254__5:
  .loc 7 111 63
  # $3.2: bool = call(matches_287, self.1, required_end_of_file)
  mov rdi, [rbp-8]
  mov rsi, required_end_of_file[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.2:rax:[rbp-10] 
  # jump(.LABEL__parse_statement_254__6)
  mov [rbp-10], al
  jmp .LABEL__parse_statement_254__6
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] $3.2:[rbp-10] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:[rbp-10] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_statement_254__end:
  mov rsp, rbp
  pop rbp
  ret

parse_statement_254__stack_frame_size: .word 64

  .loc 7 167 8
  .text
parse_include_255:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_include_255__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_include_255__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 168 20
  # $1.1: @Token = call(consume_283, self.1, required_include)
  mov rsi, required_include[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 168 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 169 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 170 22
  # $4.1: @String_Token = call(consume_283, self.1, required_string_literal)
  mov rdi, [rbp-8]
  mov rsi, required_string_literal[rip]
  call consume_283
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] $4.1:rax 
  .loc 7 170 21
  # file_path.1: @String = load_struct_member($4.1, value)
  mov rbx, [rax+32]
  # [discarded value]: $4.1
  # [live values]: location.1:[rbp-16] file_path.1:rbx 
  .loc 7 171 12
  # $6.1: @AST_Include_Statement = new AST_Include_Statement(object_type = AST_Include_Statement, location = location.1, file_path = file_path.1, convert = anonymous_function_47_302.address)
  mov [rbp-24], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Include_Statement
  mov rbx, AST_Include_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_47_302.address
  lea r15, anonymous_function_47_302[rip]
  mov [rax+16], r15
  #     .file_path = file_path.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: file_path.1
  # [discarded value]: location.1
  # [live values]: $6.1:rax 
  .loc 7 171 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_include_255__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__parse_include_255__end:
  mov rsp, rbp
  pop rbp
  ret

parse_include_255__stack_frame_size: .word 32

  .loc 7 176 8
  .text
parse_define_256:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_define_256__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_define_256__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 177 5
  # $1.1: @Token = call(consume_283, self.1, required_define)
  mov rsi, required_define[rip]
  mov [rbp-8], rdi
  call consume_283
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  .loc 7 178 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] 
  .loc 7 179 16
  # name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] name.1:rax 
  .loc 7 180 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  .loc 7 181 5
  # $4.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  .loc 7 182 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  .loc 7 183 9
  # $5.1: bool = call(matches_289, self.1, required_unknown, optional_space, required_struct)
  mov rdi, [rbp-8]
  mov rsi, required_unknown[rip]
  mov rdx, optional_space[rip]
  mov rcx, required_struct[rip]
  call matches_289
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:rax 
  # jump($5.1, .LABEL__parse_define_256__2, .LABEL__parse_define_256__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_define_256__3
.LABEL__parse_define_256__2:
  .loc 7 184 9
  # $6.1: @Token = call(consume_283, self.1, required_unknown)
  mov rdi, [rbp-8]
  mov rsi, required_unknown[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] 
  .loc 7 185 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] 
  .loc 7 186 9
  # $7.1: @Token = call(consume_283, self.1, required_struct)
  mov rdi, [rbp-8]
  mov rsi, required_struct[rip]
  call consume_283
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] 
  .loc 7 187 66
  # $8.1: @Source_Location = load_struct_member(name.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] name.1:rax:[rbp-16] $5.1:[rbp-17] $8.1:rbx 
  .loc 7 187 30
  # type_statement.1: @AST_Struct_Statement = new AST_Struct_Statement(object_type = AST_Struct_Statement, location = $8.1, name = name.1, base_type = null, members = null, init_arguments = null, convert = anonymous_function_47_302.address)
  mov [rbp-25], rbx
  mov rdi, 56
  call malloc
  #     .object_type = AST_Struct_Statement
  mov rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  #     .location = $8.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_47_302.address
  lea r15, anonymous_function_47_302[rip]
  mov [rax+16], r15
  #     .name = name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .base_type = null
  mov QWORD PTR [rax+32], 0
  #     .members = null
  mov QWORD PTR [rax+40], 0
  #     .init_arguments = null
  mov QWORD PTR [rax+48], 0
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] name.1:r15:[rbp-16] $5.1:[rbp-17] type_statement.1:rax 
  .loc 7 188 9
  # $10.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] name.1:r15:[rbp-16] $5.1:[rbp-17] type_statement.1:rax $10.1:r14 
  .loc 7 188 9
  # $11.1: @List = load_struct_member($10.1, types)
  mov r13, [r14+8]
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-8] name.1:r15:[rbp-16] $5.1:[rbp-17] type_statement.1:rax $11.1:r13 
  .loc 7 188 9
  # call(append_364, $11.1, type_statement.1)
  mov rdi, r13
  mov rsi, rax
  mov [rbp-25], rax
  call append_364
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] type_statement.1:[rbp-25] 
  .loc 7 189 9
  # return(type_statement.1)
  mov rax, [rbp-25]
  jmp .LABEL__parse_define_256__end
  # [discarded value]: type_statement.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] 
.LABEL__parse_define_256__3:
  .loc 7 191 9
  # $12.1: bool = call(matches_287, self.1, required_struct)
  mov rdi, [rbp-8]
  mov rsi, required_struct[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] $12.1:rax 
  # jump($12.1, .LABEL__parse_define_256__5, .LABEL__parse_define_256__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_define_256__6
.LABEL__parse_define_256__5:
  .loc 7 192 16
  # $13.1: @AST_Struct_Statement = call(parse_struct_257, self.1, name.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  call parse_struct_257
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] $12.1:[rbp-18] $13.1:rax 
  .loc 7 192 9
  # return($13.1)
  mov [rbp-26], rax
  jmp .LABEL__parse_define_256__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] $12.1:[rbp-18] 
.LABEL__parse_define_256__6:
  .loc 7 194 12
  # $14.1: @AST_Function_Statement = call(parse_function_258, self.1, name.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  call parse_function_258
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] $12.1:[rbp-18] $14.1:rax 
  .loc 7 194 5
  # return($14.1)
  mov [rbp-26], rax
  jmp .LABEL__parse_define_256__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] $12.1:[rbp-18] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] $5.1:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] name.1:[rbp-16] 
  # [discarded value]: name.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_define_256__end:
  mov rsp, rbp
  pop rbp
  ret

parse_define_256__stack_frame_size: .word 32

  .loc 7 199 8
  .text
parse_struct_257:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_struct_257__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_struct_257__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # struct_name.1: @Identifier_Token = load_variable(struct_name)
  # [live values]: self.1:rdi struct_name.1:rsi 
  .loc 7 200 33
  # struct_init_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:rax 
  .loc 7 201 5
  # $2.1: @Token = call(consume_283, self.1, required_struct)
  mov rdi, [rbp-16]
  mov rsi, required_struct[rip]
  mov [rbp-24], rax
  call consume_283
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] 
  .loc 7 202 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] 
  .loc 7 203 5
  # $3.1: @Token = call(consume_283, self.1, required_open_brace)
  mov rdi, [rbp-16]
  mov rsi, required_open_brace[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] 
  .loc 7 204 5
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] 
  .loc 7 205 30
  # $4.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] $4.1:rbx 
  .loc 7 205 30
  # $5.1: isize = $4.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] $5.1:r15 
  .loc 7 205 5
  # store_struct_member(self.1, current_alignment, $5.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] 
  .loc 7 206 9
  # base_type.1: @AST_Type = null
  xor rbx, rbx
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:rbx 
  .loc 7 207 9
  # $6.1: bool = call(matches_288, self.1, optional_space, required_extends)
  mov rdi, rax
  mov rsi, optional_space[rip]
  mov rdx, required_extends[rip]
  mov [rbp-32], rbx
  call matches_288
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:rax 
  # jump($6.1, .LABEL__parse_struct_257__2, .LABEL__parse_struct_257__3)
  test al, al
  mov [rbp-33], al
  jz .LABEL__parse_struct_257__3
.LABEL__parse_struct_257__2:
  .loc 7 208 28
  # $7.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] $7.1:rbx 
  .loc 7 208 28
  # $8.1: isize = $7.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] $8.1:r15 
  .loc 7 208 9
  # call(consume_space_282, self.1, $8.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] 
  .loc 7 209 9
  # $9.1: @Token = call(consume_283, self.1, required_extends)
  mov rdi, [rbp-16]
  mov rsi, required_extends[rip]
  call consume_283
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] 
  .loc 7 210 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] 
  .loc 7 211 21
  # base_type.2: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-16]
  call parse_type_266
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:rax:[rbp-32] 
  .loc 7 212 13
  # $11.1: bool = call(matches_288, self.1, optional_space, required_open_paren)
  mov rdi, [rbp-16]
  mov rsi, optional_space[rip]
  mov rdx, required_open_paren[rip]
  mov [rbp-32], rax
  call matches_288
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:rax 
  # jump($11.1, .LABEL__parse_struct_257__4, .LABEL__parse_struct_257__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__parse_struct_257__5
.LABEL__parse_struct_257__4:
  .loc 7 213 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  .loc 7 214 13
  # $12.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-16]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  .loc 7 215 13
  # call(parse_call_arguments_277, self.1, struct_init_arguments.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-24]
  call parse_call_arguments_277
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  .loc 7 216 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  .loc 7 217 13
  # $13.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-16]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  # jump(.LABEL__parse_struct_257__5)
.LABEL__parse_struct_257__5:
  .loc 7 219 9
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  # jump(.LABEL__parse_struct_257__3)
.LABEL__parse_struct_257__3:
  # base_type.5: @AST_Type = phi(base_type.1, base_type.2)
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] 
  .loc 7 221 26
  # struct_members.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:rax 
  # jump(.LABEL__parse_struct_257__6)
  mov [rbp-42], rax
.LABEL__parse_struct_257__6:
  .loc 7 222 12
  # $15.1: bool = call(matches_288, self.1, optional_space, required_close_brace)
  mov rdi, [rbp-16]
  mov rsi, optional_space[rip]
  mov rdx, required_close_brace[rip]
  call matches_288
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $15.1:rax 
  .loc 7 222 12
  # $16.1: bool = $15.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:rbx 
  # jump($16.1, .LABEL__parse_struct_257__7, .LABEL__parse_struct_257__8)
  test bl, bl
  mov [rbp-43], bl
  jz .LABEL__parse_struct_257__8
.LABEL__parse_struct_257__7:
  .loc 7 223 13
  # $17.1: bool = call(consume_empty_line_281, self.1)
  mov rdi, [rbp-16]
  call consume_empty_line_281
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $17.1:rax 
  .loc 7 223 13
  # $18.1: bool = $17.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:rbx 
  # jump($18.1, .LABEL__parse_struct_257__9, .LABEL__parse_struct_257__6)
  test bl, bl
  mov [rbp-44], bl
  jz .LABEL__parse_struct_257__6
.LABEL__parse_struct_257__9:
  .loc 7 224 32
  # $19.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] $19.1:rbx 
  .loc 7 224 32
  # $20.1: isize = $19.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] $20.1:r15 
  .loc 7 224 13
  # call(consume_space_282, self.1, $20.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] 
  .loc 7 225 38
  # struct_member_name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-16]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:rax 
  .loc 7 226 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  mov [rbp-52], rax
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] 
  .loc 7 227 13
  # $23.1: @Token = call(consume_283, self.1, required_colon)
  mov rdi, [rbp-16]
  mov rsi, required_colon[rip]
  call consume_283
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] 
  .loc 7 228 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] 
  .loc 7 229 44
  # struct_member_value_type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-16]
  call parse_type_266
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:rax 
  .loc 7 230 17
  # $25.1: bool = call(matches_288, self.1, optional_space, required_equals)
  mov rdi, [rbp-16]
  mov rsi, optional_space[rip]
  mov rdx, required_equals[rip]
  mov [rbp-60], rax
  call matches_288
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:rax 
  # jump($25.1, .LABEL__parse_struct_257__11, .LABEL__parse_struct_257__12)
  test al, al
  mov [rbp-61], al
  jz .LABEL__parse_struct_257__12
.LABEL__parse_struct_257__11:
  .loc 7 231 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] 
  .loc 7 232 17
  # $26.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-16]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] 
  .loc 7 233 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] 
  .loc 7 234 40
  # value_expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-16]
  call parse_expression_267
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] value_expression.1:rax 
  .loc 7 235 46
  # $28.1: @AST_Call_Argument = new AST_Call_Argument(name = struct_member_name.1, value_expression = value_expression.1)
  mov [rbp-69], rax
  mov rdi, 16
  call malloc
  #     .name = struct_member_name.1
  mov rbx, [rbp-52]
  mov QWORD PTR [rax], rbx
  #     .value_expression = value_expression.1
  mov r15, [rbp-69]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value_expression.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:rbx:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] $28.1:rax 
  .loc 7 235 17
  # call(append_364, struct_init_arguments.1, $28.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_364
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] 
  # jump(.LABEL__parse_struct_257__12)
.LABEL__parse_struct_257__12:
  .loc 7 237 13
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] 
  .loc 7 238 68
  # $29.1: @Source_Location = load_struct_member(struct_member_name.1, location)
  mov rax, [rbp-52]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:rax:[rbp-52] struct_member_value_type.1:[rbp-60] $25.1:[rbp-61] $29.1:rbx 
  .loc 7 238 35
  # $30.1: @AST_Struct_Member = new AST_Struct_Member(location = $29.1, name = struct_member_name.1, type = struct_member_value_type.1)
  mov [rbp-69], rbx
  mov rdi, 24
  call malloc
  #     .location = $29.1
  mov rbx, [rbp-69]
  mov QWORD PTR [rax], rbx
  #     .name = struct_member_name.1
  mov r15, [rbp-52]
  mov QWORD PTR [rax+8], r15
  #     .type = struct_member_value_type.1
  mov r14, [rbp-60]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $29.1
  # [discarded value]: struct_member_value_type.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:r15:[rbp-52] $25.1:[rbp-61] $30.1:rax 
  .loc 7 238 13
  # call(append_364, struct_members.1, $30.1)
  mov rdi, [rbp-42]
  mov rsi, rax
  call append_364
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] $25.1:[rbp-61] 
  # jump(.LABEL__parse_struct_257__6)
  jmp .LABEL__parse_struct_257__6
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] $25.1:[rbp-61] 
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] $25.1:[rbp-61] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] struct_member_name.1:[rbp-52] 
  # [discarded value]: struct_member_name.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $18.1:[rbp-44] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] 
.LABEL__parse_struct_257__8:
  .loc 7 241 30
  # $31.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $31.1:rbx 
  .loc 7 241 30
  # $32.1: isize = $31.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $31.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $32.1:r15 
  .loc 7 241 5
  # store_struct_member(self.1, current_alignment, $32.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $32.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] 
  .loc 7 242 24
  # $33.1: isize = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $33.1:rbx 
  .loc 7 242 24
  # $34.1: isize = $33.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $33.1
  # [live values]: self.1:rax:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $34.1:r15 
  .loc 7 242 5
  # call(consume_space_282, self.1, $34.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] 
  .loc 7 243 5
  # $35.1: @Token = call(consume_283, self.1, required_close_brace)
  mov rdi, [rbp-16]
  mov rsi, required_close_brace[rip]
  call consume_283
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] 
  .loc 7 244 64
  # $36.1: @Source_Location = load_struct_member(struct_name.1, location)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] struct_name.1:rax:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] base_type.5:[rbp-32] struct_members.1:[rbp-42] $16.1:[rbp-43] $36.1:rbx 
  .loc 7 244 28
  # struct_statement.1: @AST_Struct_Statement = new AST_Struct_Statement(object_type = AST_Struct_Statement, location = $36.1, name = struct_name.1, base_type = base_type.5, members = struct_members.1, init_arguments = struct_init_arguments.1, convert = anonymous_function_47_302.address)
  mov [rbp-51], rbx
  mov rdi, 56
  call malloc
  #     .object_type = AST_Struct_Statement
  mov rbx, AST_Struct_Statement[rip]
  mov [rax], rbx
  #     .location = $36.1
  mov rbx, [rbp-51]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_47_302.address
  lea r15, anonymous_function_47_302[rip]
  mov [rax+16], r15
  #     .name = struct_name.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+24], r15
  #     .base_type = base_type.5
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .members = struct_members.1
  mov r13, [rbp-42]
  mov QWORD PTR [rax+40], r13
  #     .init_arguments = struct_init_arguments.1
  mov r12, [rbp-24]
  mov QWORD PTR [rax+48], r12
  # [discarded value]: $36.1
  # [discarded value]: base_type.5
  # [live values]: self.1:[rbp-16] struct_name.1:r15:[rbp-8] struct_init_arguments.1:r12:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:r13:[rbp-42] $16.1:[rbp-43] struct_statement.1:rax 
  .loc 7 245 5
  # $38.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rbx, [rbp-16]
  mov r14, [rbx+8]
  # [live values]: self.1:rbx:[rbp-16] struct_name.1:r15:[rbp-8] struct_init_arguments.1:r12:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:r13:[rbp-42] $16.1:[rbp-43] struct_statement.1:rax $38.1:r14 
  .loc 7 245 5
  # $39.1: @List = load_struct_member($38.1, types)
  mov r11, [r14+8]
  # [discarded value]: $38.1
  # [live values]: self.1:rbx:[rbp-16] struct_name.1:r15:[rbp-8] struct_init_arguments.1:r12:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:r13:[rbp-42] $16.1:[rbp-43] struct_statement.1:rax $39.1:r11 
  .loc 7 245 5
  # call(append_364, $39.1, struct_statement.1)
  mov rdi, r11
  mov rsi, rax
  mov [rbp-51], rax
  call append_364
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:[rbp-42] $16.1:[rbp-43] struct_statement.1:[rbp-51] 
  .loc 7 246 5
  # return(struct_statement.1)
  mov rax, [rbp-51]
  jmp .LABEL__parse_struct_257__end
  # [discarded value]: struct_statement.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:[rbp-42] $16.1:[rbp-43] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:[rbp-42] 
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] struct_members.1:[rbp-42] 
  # [discarded value]: struct_members.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] $11.1:[rbp-34] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] base_type.2:[rbp-32] 
  # [discarded value]: base_type.2
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] $6.1:[rbp-33] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] struct_name.1:[rbp-8] struct_init_arguments.1:[rbp-24] base_type.1:[rbp-32] 
  # [discarded value]: base_type.1
  # [discarded value]: struct_init_arguments.1
  # [discarded value]: struct_name.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_struct_257__end:
  mov rsp, rbp
  pop rbp
  ret

parse_struct_257__stack_frame_size: .word 80

  .loc 7 251 8
  .text
parse_function_258:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_258__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_258__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # function_name.1: @Identifier_Token = load_variable(function_name)
  # [live values]: self.1:rdi function_name.1:rsi 
  .loc 7 252 33
  # function_is_anonymous.1: bool = call(is_389, function_name.1, Generated_Identifier_Token)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, Generated_Identifier_Token[rip]
  call is_389
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:rax 
  .loc 7 253 25
  # function_type.1: @AST_Function_Type = call(parse_function_type_259, self.1)
  mov rdi, [rbp-8]
  mov [rbp-17], al
  call parse_function_type_259
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:rax 
  .loc 7 255 9
  # $3.1: bool = call(matches_288, self.1, optional_space, required_open_brace)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_open_brace[rip]
  mov [rbp-25], rax
  call matches_288
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__parse_function_258__2, .LABEL__parse_function_258__4)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_function_258__4
.LABEL__parse_function_258__2:
  .loc 7 256 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:[rbp-25] $3.1:[rbp-26] 
  .loc 7 257 25
  # function_body.3: @AST_Block_Statement = call(parse_block_261, self.1)
  mov rdi, [rbp-8]
  call parse_block_261
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:[rbp-25] $3.1:[rbp-26] function_body.3:rax 
  # jump(.LABEL__parse_function_258__3)
  mov [rbp-34], rax
.LABEL__parse_function_258__3:
  # function_body.4: @AST_Block_Statement = phi(function_body.2, function_body.3)
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:[rbp-25] $3.1:[rbp-26] function_body.3:[rbp-34] function_body.4:[rbp-34] 
  .loc 7 264 68
  # $6.1: @Source_Location = load_struct_member(function_name.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] function_name.1:rax:[rbp-16] function_is_anonymous.1:[rbp-17] function_type.1:[rbp-25] $3.1:[rbp-26] function_body.3:[rbp-34] function_body.4:[rbp-34] $6.1:rbx 
  .loc 7 264 30
  # function_statement.1: @AST_Function_Statement = new AST_Function_Statement(object_type = AST_Function_Statement, location = $6.1, name = function_name.1, type = function_type.1, body = function_body.4, is_anonymous = function_is_anonymous.1, ir_function = null, convert = anonymous_function_47_302.address)
  mov [rbp-42], rbx
  mov rdi, 57
  call malloc
  #     .object_type = AST_Function_Statement
  mov rbx, AST_Function_Statement[rip]
  mov [rax], rbx
  #     .location = $6.1
  mov rbx, [rbp-42]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_47_302.address
  lea r15, anonymous_function_47_302[rip]
  mov [rax+16], r15
  #     .name = function_name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .type = function_type.1
  mov r14, [rbp-25]
  mov QWORD PTR [rax+32], r14
  #     .body = function_body.4
  mov r13, [rbp-34]
  mov QWORD PTR [rax+40], r13
  #     .is_anonymous = function_is_anonymous.1
  mov r12b, [rbp-17]
  mov BYTE PTR [rax+48], r12b
  #     .ir_function = null
  mov QWORD PTR [rax+49], 0
  # [discarded value]: $6.1
  # [discarded value]: function_body.4
  # [discarded value]: function_type.1
  # [live values]: self.1:[rbp-8] function_name.1:r15:[rbp-16] function_is_anonymous.1:r12:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] function_statement.1:rax 
  .loc 7 265 5
  # $8.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rbx, [rbp-8]
  mov r14, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] function_name.1:r15:[rbp-16] function_is_anonymous.1:r12:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] function_statement.1:rax $8.1:r14 
  .loc 7 265 5
  # $9.1: @List = load_struct_member($8.1, functions)
  mov r13, [r14+24]
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-8] function_name.1:r15:[rbp-16] function_is_anonymous.1:r12:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] function_statement.1:rax $9.1:r13 
  .loc 7 265 5
  # call(append_364, $9.1, function_statement.1)
  mov rdi, r13
  mov rsi, rax
  mov [rbp-42], rax
  call append_364
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] function_statement.1:[rbp-42] 
  .loc 7 266 5
  # return(function_statement.1)
  mov rax, [rbp-42]
  jmp .LABEL__parse_function_258__end
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] 
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] function_body.3:[rbp-34] 
  # [discarded value]: function_body.3
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] 
.LABEL__parse_function_258__4:
  # jump(function_is_anonymous.1, .LABEL__parse_function_258__5, .LABEL__parse_function_258__6)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_function_258__6
.LABEL__parse_function_258__5:
  .loc 7 260 19
  # $4.1: @Source_Location = load_struct_member(function_name.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] function_name.1:rax:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] $4.1:rbx 
  .loc 7 260 13
  # call(abort_360, $4.1, "Anonymous function without body")
  mov rdi, rbx
  lea rsi, .LABEL__string_314[rip] # "Anonymous function without body"
  call abort_360
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] 
.LABEL__parse_function_258__6:
  .loc 7 262 9
  # function_body.2: @AST_Block_Statement = null
  xor rax, rax
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] function_body.2:rax:[rbp-34] 
  # jump(.LABEL__parse_function_258__3)
  mov [rbp-34], rax
  jmp .LABEL__parse_function_258__3
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] function_body.2:[rbp-34] 
  # [discarded value]: function_body.2
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] 
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] function_name.1:[rbp-16] function_is_anonymous.1:[rbp-17] 
  # [discarded value]: function_is_anonymous.1
  # [discarded value]: function_name.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_258__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_258__stack_frame_size: .word 48

  .loc 7 271 8
  .text
parse_function_type_259:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_type_259__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_type_259__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 272 20
  # $1.1: @Token = call(consume_283, self.1, required_func)
  mov rsi, required_func[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 272 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 273 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 274 5
  # $3.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 275 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 276 31
  # function_parameters.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:rax 
  .loc 7 277 9
  # $5.1: bool = call(matches_287, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  mov [rbp-24], rax
  call matches_287
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $5.1:rax 
  .loc 7 277 9
  # $6.1: bool = $5.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:rbx 
  # jump($6.1, .LABEL__parse_function_type_259__2, .LABEL__parse_function_type_259__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__parse_function_type_259__3
.LABEL__parse_function_type_259__2:
  .loc 7 278 36
  # $7.1: @AST_Function_Parameter = call(parse_function_parameter_260, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_260
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $7.1:rax 
  .loc 7 278 9
  # call(append_364, function_parameters.1, $7.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_364
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] 
  # jump(.LABEL__parse_function_type_259__4)
.LABEL__parse_function_type_259__4:
  .loc 7 279 16
  # $8.1: bool = call(matches_288, self.1, optional_space, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_close_paren[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $8.1:rax 
  .loc 7 279 16
  # $9.1: bool = $8.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:rbx 
  # jump($9.1, .LABEL__parse_function_type_259__5, .LABEL__parse_function_type_259__3)
  test bl, bl
  mov [rbp-26], bl
  jz .LABEL__parse_function_type_259__3
.LABEL__parse_function_type_259__5:
  .loc 7 280 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 281 13
  # $10.1: @Token = call(consume_283, self.1, required_comma)
  mov rdi, [rbp-8]
  mov rsi, required_comma[rip]
  call consume_283
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 282 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 283 40
  # $11.1: @AST_Function_Parameter = call(parse_function_parameter_260, self.1)
  mov rdi, [rbp-8]
  call parse_function_parameter_260
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] $11.1:rax 
  .loc 7 283 13
  # call(append_364, function_parameters.1, $11.1)
  mov rdi, [rbp-24]
  mov rsi, rax
  call append_364
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # jump(.LABEL__parse_function_type_259__4)
  jmp .LABEL__parse_function_type_259__4
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
.LABEL__parse_function_type_259__3:
  .loc 7 286 5
  # $12.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 287 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 288 5
  # $13.1: @Token = call(consume_284, self.1, required_hyphen, required_greater_than)
  mov rdi, [rbp-8]
  mov rsi, required_hyphen[rip]
  mov rdx, required_greater_than[rip]
  call consume_284
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 289 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  .loc 7 290 32
  # function_return_type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-8]
  call parse_type_266
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] function_parameters.1:[rbp-24] $6.1:[rbp-25] function_return_type.1:rax $9.1:[rbp-26] 
  .loc 7 291 12
  # $15.1: @AST_Function_Type = new AST_Function_Type(object_type = AST_Function_Type, location = location.1, parameters = function_parameters.1, return_type = function_return_type.1)
  mov [rbp-34], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Function_Type
  mov rbx, AST_Function_Type[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .parameters = function_parameters.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .return_type = function_return_type.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+24], r14
  # [discarded value]: function_return_type.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] function_parameters.1:r15:[rbp-24] $6.1:[rbp-25] $15.1:rax $9.1:[rbp-26] 
  .loc 7 291 5
  # return($15.1)
  mov [rbp-34], rax
  jmp .LABEL__parse_function_type_259__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $6.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $6.1:[rbp-25] 
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] function_parameters.1:[rbp-24] 
  # [discarded value]: function_parameters.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_function_type_259__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_type_259__stack_frame_size: .word 48

  .loc 7 296 8
  .text
parse_function_parameter_260:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_function_parameter_260__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_function_parameter_260__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 297 26
  # parameter_name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rsi, required_identifier[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] parameter_name.1:rax 
  .loc 7 298 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-16], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 299 5
  # $3.1: @Token = call(consume_283, self.1, required_colon)
  mov rdi, [rbp-8]
  mov rsi, required_colon[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 300 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] parameter_name.1:[rbp-16] 
  .loc 7 301 26
  # parameter_type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-8]
  call parse_type_266
  # [discarded value]: self.1
  # [live values]: parameter_name.1:[rbp-16] parameter_type.1:rax 
  .loc 7 302 50
  # $5.1: @Source_Location = load_struct_member(parameter_name.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+16]
  # [live values]: parameter_name.1:rbx:[rbp-16] parameter_type.1:rax $5.1:r15 
  .loc 7 302 12
  # $6.1: @AST_Function_Parameter = new AST_Function_Parameter(location = $5.1, name = parameter_name.1, type = parameter_type.1)
  mov [rbp-24], rax
  mov [rbp-32], r15
  mov rdi, 24
  call malloc
  #     .location = $5.1
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  #     .name = parameter_name.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+8], r15
  #     .type = parameter_type.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $5.1
  # [discarded value]: parameter_type.1
  # [discarded value]: parameter_name.1
  # [live values]: $6.1:rax 
  .loc 7 302 5
  # return($6.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_function_parameter_260__end
  # [discarded value]: $6.1
  # [live values]: 
.LABEL__parse_function_parameter_260__end:
  mov rsp, rbp
  pop rbp
  ret

parse_function_parameter_260__stack_frame_size: .word 32

  .loc 7 307 8
  .text
parse_block_261:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_block_261__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_block_261__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 308 20
  # $1.1: @Token = call(consume_283, self.1, required_open_brace)
  mov rsi, required_open_brace[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 308 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 309 5
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-8]
  mov [rbp-16], rbx
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 310 30
  # $3.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $3.1:rbx 
  .loc 7 310 30
  # $4.1: isize = $3.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] $4.1:r15 
  .loc 7 310 5
  # store_struct_member(self.1, current_alignment, $4.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] 
  .loc 7 311 22
  # statements.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:rax 
  .loc 7 312 5
  # call(parse_statements_252, self.1, statements.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  mov [rbp-24], rax
  call parse_statements_252
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 313 30
  # $6.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $6.1:rbx 
  .loc 7 313 30
  # $7.1: isize = $6.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $7.1:r15 
  .loc 7 313 5
  # store_struct_member(self.1, current_alignment, $7.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 314 24
  # $8.1: isize = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $8.1:rbx 
  .loc 7 314 24
  # $9.1: isize = $8.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] $9.1:r15 
  .loc 7 314 5
  # call(consume_space_282, self.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 315 5
  # $10.1: @Token = call(consume_283, self.1, required_close_brace)
  mov rdi, [rbp-8]
  mov rsi, required_close_brace[rip]
  call consume_283
  # [discarded value]: $10.1
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] statements.1:[rbp-24] 
  .loc 7 316 12
  # $11.1: @AST_Block_Statement = new AST_Block_Statement(object_type = AST_Block_Statement, location = location.1, statements = statements.1, convert = anonymous_function_48_303.address)
  mov rdi, 32
  call malloc
  #     .object_type = AST_Block_Statement
  mov rbx, AST_Block_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_48_303.address
  lea r15, anonymous_function_48_303[rip]
  mov [rax+16], r15
  #     .statements = statements.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: statements.1
  # [discarded value]: location.1
  # [live values]: $11.1:rax 
  .loc 7 316 5
  # return($11.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_block_261__end
  # [discarded value]: $11.1
  # [live values]: 
.LABEL__parse_block_261__end:
  mov rsp, rbp
  pop rbp
  ret

parse_block_261__stack_frame_size: .word 32

  .loc 7 321 8
  .text
parse_let_262:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_let_262__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_let_262__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 322 20
  # $1.1: @Token = call(consume_283, self.1, required_let)
  mov rsi, required_let[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 322 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 323 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 324 25
  # variable_name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:rax 
  .loc 7 325 9
  # variable_value_type.1: @AST_Type = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx 
  .loc 7 326 9
  # variable_value_expression.1: @AST_Expression = null
  xor r15, r15
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx variable_value_expression.1:r15 
  .loc 7 327 30
  # $5.1: isize = load_struct_member(self.1, current_alignment)
  mov r14, [rbp-8]
  mov r13, [r14+16]
  # [live values]: self.1:r14:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx variable_value_expression.1:r15 $5.1:r13 
  .loc 7 327 30
  # $6.1: bool = $5.1 == 0
  cmp r13, 0
  sete r12b
  # [discarded value]: $5.1
  # [live values]: self.1:r14:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx variable_value_expression.1:r15 $6.1:r12 
  .loc 7 327 9
  # variable_is_global.1: bool = $6.1
  mov [rbp-17], r12b
  # [discarded value]: $6.1
  # [live values]: self.1:r14:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx variable_value_expression.1:r15 variable_is_global.1:r12 
  .loc 7 328 9
  # variable_is_external.1: bool = false
  mov r13b, 0
  # [live values]: self.1:r14:[rbp-8] location.1:[rbp-16] variable_name.1:rax variable_value_type.1:rbx variable_value_expression.1:r15 variable_is_global.1:r12 variable_is_external.1:r13 
  .loc 7 329 9
  # $7.1: bool = call(matches_288, self.1, optional_space, required_colon)
  mov rdi, r14
  mov rsi, optional_space[rip]
  mov rdx, required_colon[rip]
  mov [rbp-24], rax
  mov [rbp-32], rbx
  mov [rbp-33], r12b
  mov [rbp-34], r13b
  mov [rbp-42], r15
  call matches_288
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:rax 
  # jump($7.1, .LABEL__parse_let_262__2, .LABEL__parse_let_262__3)
  test al, al
  mov [rbp-43], al
  jz .LABEL__parse_let_262__3
.LABEL__parse_let_262__2:
  .loc 7 330 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] 
  .loc 7 331 9
  # $8.1: @Token = call(consume_283, self.1, required_colon)
  mov rdi, [rbp-8]
  mov rsi, required_colon[rip]
  call consume_283
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] 
  .loc 7 332 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] 
  .loc 7 333 31
  # variable_value_type.2: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-8]
  call parse_type_266
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:rax:[rbp-32] 
  # jump(.LABEL__parse_let_262__3)
  mov [rbp-32], rax
.LABEL__parse_let_262__3:
  # variable_value_type.5: @AST_Type = phi(variable_value_type.1, variable_value_type.2)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] 
  .loc 7 335 9
  # $10.1: bool = call(matches_288, self.1, optional_space, required_equals)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_equals[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:rax 
  # jump($10.1, .LABEL__parse_let_262__4, .LABEL__parse_let_262__5)
  test al, al
  mov [rbp-44], al
  jz .LABEL__parse_let_262__5
.LABEL__parse_let_262__4:
  .loc 7 336 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] 
  .loc 7 337 9
  # $11.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] 
  .loc 7 338 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] 
  .loc 7 339 13
  # $12.1: bool = call(matches_287, self.1, required_external)
  mov rdi, [rbp-8]
  mov rsi, required_external[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:rax 
  # jump($12.1, .LABEL__parse_let_262__6, .LABEL__parse_let_262__8)
  test al, al
  mov [rbp-45], al
  jz .LABEL__parse_let_262__8
.LABEL__parse_let_262__6:
  .loc 7 340 13
  # $14.1: @Token = call(consume_283, self.1, required_external)
  mov rdi, [rbp-8]
  mov rsi, required_external[rip]
  call consume_283
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] 
  .loc 7 341 17
  # $15.1: bool = variable_is_global.1 == false
  cmp BYTE PTR [rbp-33], 0
  sete al
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:rax 
  # jump($15.1, .LABEL__parse_let_262__9, .LABEL__parse_let_262__10)
  test al, al
  mov [rbp-46], al
  jz .LABEL__parse_let_262__10
.LABEL__parse_let_262__9:
  .loc 7 342 17
  # call(abort_360, location.1, "Only global variables can have an external value")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_315[rip] # "Only global variables can have an external value"
  call abort_360
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] 
.LABEL__parse_let_262__10:
  .loc 7 344 17
  # $16.1: bool = variable_value_type.5 == null
  cmp QWORD PTR [rbp-32], 0
  sete al
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:rax 
  # jump($16.1, .LABEL__parse_let_262__11, .LABEL__parse_let_262__12)
  test al, al
  mov [rbp-47], al
  jz .LABEL__parse_let_262__12
.LABEL__parse_let_262__11:
  .loc 7 345 17
  # call(abort_360, location.1, "External variables require a type")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_316[rip] # "External variables require a type"
  call abort_360
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:[rbp-47] 
.LABEL__parse_let_262__12:
  .loc 7 347 13
  # variable_is_external.2: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:rax:[rbp-34] 
  # jump(.LABEL__parse_let_262__5)
  mov [rbp-34], al
.LABEL__parse_let_262__5:
  # variable_is_external.3: bool = phi(variable_is_external.2, variable_is_external.1)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_is_external.3:[rbp-34] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # variable_value_expression.3: @AST_Expression = phi(variable_value_expression.2, variable_value_expression.1)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_is_external.3:[rbp-34] variable_value_expression.3:[rbp-42] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  .loc 7 352 68
  # $17.1: @Source_Location = load_struct_member(variable_name.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:rax:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_is_external.3:[rbp-34] variable_value_expression.3:[rbp-42] $17.1:rbx $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  .loc 7 352 30
  # variable_statement.1: @AST_Variable_Statement = new AST_Variable_Statement(object_type = AST_Variable_Statement, location = $17.1, name = variable_name.1, type = variable_value_type.5, value_expression = variable_value_expression.3, is_external = variable_is_external.3, convert = anonymous_function_55_310.address)
  mov [rbp-55], rbx
  mov rdi, 49
  call malloc
  #     .object_type = AST_Variable_Statement
  mov rbx, AST_Variable_Statement[rip]
  mov [rax], rbx
  #     .location = $17.1
  mov rbx, [rbp-55]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_55_310.address
  lea r15, anonymous_function_55_310[rip]
  mov [rax+16], r15
  #     .name = variable_name.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .type = variable_value_type.5
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .value_expression = variable_value_expression.3
  mov r13, [rbp-42]
  mov QWORD PTR [rax+40], r13
  #     .is_external = variable_is_external.3
  mov r12b, [rbp-34]
  mov BYTE PTR [rax+48], r12b
  # [discarded value]: $17.1
  # [discarded value]: variable_value_expression.3
  # [discarded value]: variable_is_external.3
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:r15:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:r14:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:rax $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # jump(variable_is_global.1, .LABEL__parse_let_262__13, .LABEL__parse_let_262__14)
  mov bl, [rbp-33]
  test bl, bl
  mov [rbp-55], rax
  jz .LABEL__parse_let_262__14
.LABEL__parse_let_262__13:
  .loc 7 354 9
  # $19.1: @Compilation_Unit = load_struct_member(self.1, compilation_unit)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] $19.1:rbx 
  .loc 7 354 9
  # $20.1: @List = load_struct_member($19.1, global_variables)
  mov r15, [rbx+16]
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] $20.1:r15 
  .loc 7 354 9
  # call(append_364, $20.1, variable_statement.1)
  mov rdi, r15
  mov rsi, [rbp-55]
  call append_364
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # jump(.LABEL__parse_let_262__14)
.LABEL__parse_let_262__14:
  .loc 7 356 5
  # return(variable_statement.1)
  mov rax, [rbp-55]
  jmp .LABEL__parse_let_262__end
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_statement.1:[rbp-55] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # [discarded value]: variable_statement.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:[rbp-47] variable_is_external.2:[rbp-34] 
  # [discarded value]: variable_is_external.2
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] $16.1:[rbp-47] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] $15.1:[rbp-46] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] 
.LABEL__parse_let_262__8:
  .loc 7 349 41
  # variable_value_expression.2: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_value_expression.2:rax:[rbp-42] 
  # jump(.LABEL__parse_let_262__5)
  mov [rbp-42], rax
  jmp .LABEL__parse_let_262__5
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] variable_value_expression.2:[rbp-42] 
  # [discarded value]: variable_value_expression.2
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] $12.1:[rbp-45] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] $10.1:[rbp-44] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] variable_value_type.5:[rbp-32] 
  # [discarded value]: variable_value_type.5
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] 
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] variable_value_type.2:[rbp-32] 
  # [discarded value]: variable_value_type.2
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] $7.1:[rbp-43] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] variable_name.1:[rbp-24] variable_value_type.1:[rbp-32] variable_value_expression.1:[rbp-42] variable_is_global.1:[rbp-33] variable_is_external.1:[rbp-34] 
  # [discarded value]: variable_is_external.1
  # [discarded value]: variable_is_global.1
  # [discarded value]: variable_value_expression.1
  # [discarded value]: variable_value_type.1
  # [discarded value]: variable_name.1
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_let_262__end:
  mov rsp, rbp
  pop rbp
  ret

parse_let_262__stack_frame_size: .word 64

  .loc 7 361 8
  .text
parse_if_263:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_if_263__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_if_263__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 362 20
  # $1.1: @Token = call(consume_283, self.1, required_if)
  mov rsi, required_if[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 362 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 363 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 364 5
  # $3.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 365 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 366 32
  # condition_expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 367 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 368 5
  # $5.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 369 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 370 26
  # true_statement.1: @AST_Block_Statement = call(parse_block_261, self.1)
  mov rdi, [rbp-8]
  call parse_block_261
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax 
  .loc 7 371 9
  # false_statement.1: @AST_Statement = null
  xor rbx, rbx
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:rax false_statement.1:rbx 
  .loc 7 372 9
  # $7.1: bool = call(matches_288, self.1, optional_space, required_else)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_else[rip]
  mov [rbp-32], rax
  mov [rbp-40], rbx
  call matches_288
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:rax 
  # jump($7.1, .LABEL__parse_if_263__2, .LABEL__parse_if_263__3)
  test al, al
  mov [rbp-41], al
  jz .LABEL__parse_if_263__3
.LABEL__parse_if_263__2:
  .loc 7 373 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] 
  .loc 7 374 9
  # $8.1: @Token = call(consume_283, self.1, required_else)
  mov rdi, [rbp-8]
  mov rsi, required_else[rip]
  call consume_283
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] 
  .loc 7 375 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] 
  .loc 7 376 13
  # $9.1: bool = call(matches_287, self.1, required_if)
  mov rdi, [rbp-8]
  mov rsi, required_if[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:rax 
  # jump($9.1, .LABEL__parse_if_263__4, .LABEL__parse_if_263__6)
  test al, al
  mov [rbp-42], al
  jz .LABEL__parse_if_263__6
.LABEL__parse_if_263__4:
  .loc 7 377 31
  # false_statement.3: @AST_Statement = call(parse_if_263, self.1)
  mov rdi, [rbp-8]
  call parse_if_263
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.3:rax:[rbp-40] 
  # jump(.LABEL__parse_if_263__3)
  mov [rbp-40], rax
.LABEL__parse_if_263__3:
  # false_statement.4: @AST_Statement = phi(false_statement.1, false_statement.3, false_statement.2)
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] true_statement.1:[rbp-32] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.4:[rbp-40] false_statement.3:[rbp-40] 
  .loc 7 382 12
  # $12.1: @AST_If_Statement = new AST_If_Statement(object_type = AST_If_Statement, location = location.1, condition_expression = condition_expression.1, true_statement = true_statement.1, false_statement = false_statement.4, convert = anonymous_function_50_305.address)
  mov rdi, 48
  call malloc
  #     .object_type = AST_If_Statement
  mov rbx, AST_If_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_50_305.address
  lea r15, anonymous_function_50_305[rip]
  mov [rax+16], r15
  #     .condition_expression = condition_expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .true_statement = true_statement.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  #     .false_statement = false_statement.4
  mov r13, [rbp-40]
  mov QWORD PTR [rax+40], r13
  # [discarded value]: false_statement.4
  # [discarded value]: true_statement.1
  # [discarded value]: condition_expression.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] $12.1:rax false_statement.3:[rbp-40] 
  .loc 7 382 5
  # return($12.1)
  mov [rbp-50], rax
  jmp .LABEL__parse_if_263__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.3:[rbp-40] 
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.3:[rbp-40] 
  # [discarded value]: false_statement.3
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] 
.LABEL__parse_if_263__6:
  .loc 7 379 31
  # false_statement.2: @AST_Statement = call(parse_block_261, self.1)
  mov rdi, [rbp-8]
  call parse_block_261
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.2:rax:[rbp-40] 
  # jump(.LABEL__parse_if_263__3)
  mov [rbp-40], rax
  jmp .LABEL__parse_if_263__3
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] false_statement.2:[rbp-40] 
  # [discarded value]: false_statement.2
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] $9.1:[rbp-42] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] $7.1:[rbp-41] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] false_statement.1:[rbp-40] 
  # [discarded value]: false_statement.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_if_263__end:
  mov rsp, rbp
  pop rbp
  ret

parse_if_263__stack_frame_size: .word 64

  .loc 7 387 8
  .text
parse_loop_264:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_loop_264__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_loop_264__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 388 20
  # $1.1: @Token = call(consume_283, self.1, required_loop)
  mov rsi, required_loop[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 388 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 389 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 390 22
  # loop_block.1: @AST_Block_Statement = call(parse_block_261, self.1)
  mov rdi, [rbp-8]
  call parse_block_261
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] loop_block.1:rax 
  .loc 7 391 12
  # $4.1: @AST_Loop_Statement = new AST_Loop_Statement(object_type = AST_Loop_Statement, location = location.1, block = loop_block.1, convert = anonymous_function_51_306.address)
  mov [rbp-24], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Loop_Statement
  mov rbx, AST_Loop_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_51_306.address
  lea r15, anonymous_function_51_306[rip]
  mov [rax+16], r15
  #     .block = loop_block.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: loop_block.1
  # [discarded value]: location.1
  # [live values]: $4.1:rax 
  .loc 7 391 5
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_loop_264__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__parse_loop_264__end:
  mov rsp, rbp
  pop rbp
  ret

parse_loop_264__stack_frame_size: .word 32

  .loc 7 396 8
  .text
parse_while_265:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_while_265__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_while_265__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 397 20
  # $1.1: @Token = call(consume_283, self.1, required_while)
  mov rsi, required_while[rip]
  mov [rbp-8], rdi
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 7 397 20
  # location.1: @Source_Location = load_struct_member($1.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] location.1:rbx 
  .loc 7 398 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-16], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 399 5
  # $3.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 400 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] 
  .loc 7 401 32
  # condition_expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:rax 
  .loc 7 402 5
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-24], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 403 5
  # $5.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 404 5
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] location.1:[rbp-16] condition_expression.1:[rbp-24] 
  .loc 7 405 22
  # loop_block.1: @AST_Block_Statement = call(parse_block_261, self.1)
  mov rdi, [rbp-8]
  call parse_block_261
  # [discarded value]: self.1
  # [live values]: location.1:[rbp-16] condition_expression.1:[rbp-24] loop_block.1:rax 
  .loc 7 406 12
  # $7.1: @AST_While_Statement = new AST_While_Statement(object_type = AST_While_Statement, location = location.1, condition_expression = condition_expression.1, block = loop_block.1, convert = anonymous_function_52_307.address)
  mov [rbp-32], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_While_Statement
  mov rbx, AST_While_Statement[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_52_307.address
  lea r15, anonymous_function_52_307[rip]
  mov [rax+16], r15
  #     .condition_expression = condition_expression.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+24], r15
  #     .block = loop_block.1
  mov r14, [rbp-32]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: loop_block.1
  # [discarded value]: condition_expression.1
  # [discarded value]: location.1
  # [live values]: $7.1:rax 
  .loc 7 406 5
  # return($7.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_while_265__end
  # [discarded value]: $7.1
  # [live values]: 
.LABEL__parse_while_265__end:
  mov rsp, rbp
  pop rbp
  ret

parse_while_265__stack_frame_size: .word 32

  .loc 7 411 8
  .text
parse_type_266:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_type_266__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_type_266__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 412 9
  # is_embedded_type.1: bool = false
  mov al, 0
  # [live values]: self.1:rdi is_embedded_type.1:rax 
  .loc 7 413 9
  # location.1: @Source_Location = null
  xor rbx, rbx
  # [live values]: self.1:rdi is_embedded_type.1:rax location.1:rbx 
  .loc 7 414 9
  # $1.1: bool = call(matches_287, self.1, required_exclamation_mark)
  mov rsi, required_exclamation_mark[rip]
  mov [rbp-1], al
  mov [rbp-9], rbx
  mov [rbp-17], rdi
  call matches_287
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:rax 
  # jump($1.1, .LABEL__parse_type_266__2, .LABEL__parse_type_266__3)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_type_266__3
.LABEL__parse_type_266__2:
  .loc 7 415 20
  # $2.1: @Token = call(consume_283, self.1, required_exclamation_mark)
  mov rdi, [rbp-17]
  mov rsi, required_exclamation_mark[rip]
  call consume_283
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] $2.1:rax 
  .loc 7 415 20
  # location.2: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:rbx:[rbp-9] 
  .loc 7 416 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-17]
  xor rsi, rsi
  mov [rbp-9], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] 
  .loc 7 417 9
  # is_embedded_type.2: bool = true
  mov al, 1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:rax:[rbp-1] 
  # jump(.LABEL__parse_type_266__3)
  mov [rbp-1], al
.LABEL__parse_type_266__3:
  # location.6: @Source_Location = phi(location.1, location.2)
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] 
  # is_embedded_type.5: bool = phi(is_embedded_type.1, is_embedded_type.2)
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] 
  .loc 7 420 9
  # $4.1: bool = call(matches_287, self.1, required_open_bracket)
  mov rdi, [rbp-17]
  mov rsi, required_open_bracket[rip]
  call matches_287
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__parse_type_266__4, .LABEL__parse_type_266__6)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_type_266__6
.LABEL__parse_type_266__4:
  .loc 7 421 21
  # token.1: @Token = call(consume_283, self.1, required_open_bracket)
  mov rdi, [rbp-17]
  mov rsi, required_open_bracket[rip]
  call consume_283
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:rax 
  .loc 7 422 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-17]
  xor rsi, rsi
  mov [rbp-27], rax
  call consume_space_282
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] 
  .loc 7 423 31
  # array_item_type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-17]
  call parse_type_266
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:rax 
  .loc 7 424 13
  # array_is_checked.1: bool = true
  mov bl, 1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:rax array_is_checked.1:rbx 
  .loc 7 425 13
  # array_size_expression.1: @AST_Expression = null
  xor r15, r15
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:rax array_is_checked.1:rbx array_size_expression.1:r15 
  .loc 7 426 13
  # $13.1: bool = call(matches_288, self.1, optional_space, required_column)
  mov rdi, [rbp-17]
  mov rsi, optional_space[rip]
  mov rdx, required_column[rip]
  mov [rbp-35], rax
  mov [rbp-36], bl
  mov [rbp-44], r15
  call matches_288
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:rax 
  # jump($13.1, .LABEL__parse_type_266__10, .LABEL__parse_type_266__11)
  test al, al
  mov [rbp-45], al
  jz .LABEL__parse_type_266__11
.LABEL__parse_type_266__10:
  .loc 7 427 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-17]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] 
  .loc 7 428 13
  # $14.1: @Token = call(consume_283, self.1, required_column)
  mov rdi, [rbp-17]
  mov rsi, required_column[rip]
  call consume_283
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] 
  .loc 7 429 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-17]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] 
  .loc 7 430 17
  # $15.1: bool = call(matches_287, self.1, required_question_mark)
  mov rdi, [rbp-17]
  mov rsi, required_question_mark[rip]
  call matches_287
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:rax 
  # jump($15.1, .LABEL__parse_type_266__12, .LABEL__parse_type_266__14)
  test al, al
  mov [rbp-46], al
  jz .LABEL__parse_type_266__14
.LABEL__parse_type_266__12:
  .loc 7 431 17
  # $17.1: @Token = call(consume_283, self.1, required_question_mark)
  mov rdi, [rbp-17]
  mov rsi, required_question_mark[rip]
  call consume_283
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] 
  .loc 7 432 17
  # array_is_checked.2: bool = false
  mov al, 0
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_is_checked.2:rax:[rbp-36] 
  # jump(.LABEL__parse_type_266__11)
  mov [rbp-36], al
.LABEL__parse_type_266__11:
  # array_size_expression.3: @AST_Expression = phi(array_size_expression.1, array_size_expression.2)
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.3:[rbp-44] array_is_checked.2:[rbp-36] 
  # array_is_checked.3: bool = phi(array_is_checked.1, array_is_checked.2)
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.3:[rbp-44] array_is_checked.3:[rbp-36] array_is_checked.2:[rbp-36] 
  .loc 7 437 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-17]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.3:[rbp-44] array_is_checked.3:[rbp-36] array_is_checked.2:[rbp-36] 
  .loc 7 438 9
  # $18.1: @Token = call(consume_283, self.1, required_close_bracket)
  mov rdi, [rbp-17]
  mov rsi, required_close_bracket[rip]
  call consume_283
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.3:[rbp-44] array_is_checked.3:[rbp-36] array_is_checked.2:[rbp-36] 
  .loc 7 439 46
  # $19.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-27]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:rax:[rbp-27] array_item_type.1:[rbp-35] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.3:[rbp-44] array_is_checked.3:[rbp-36] $19.1:rbx array_is_checked.2:[rbp-36] 
  .loc 7 439 16
  # type.4: @AST_Type = new AST_Array_Type(object_type = AST_Array_Type, location = $19.1, item_type = array_item_type.1, is_checked = array_is_checked.3, size_expression = array_size_expression.3)
  mov [rbp-54], rbx
  mov rdi, 33
  call malloc
  #     .object_type = AST_Array_Type
  mov rbx, AST_Array_Type[rip]
  mov [rax], rbx
  #     .location = $19.1
  mov rbx, [rbp-54]
  mov QWORD PTR [rax+8], rbx
  #     .item_type = array_item_type.1
  mov r15, [rbp-35]
  mov QWORD PTR [rax+16], r15
  #     .size_expression = array_size_expression.3
  mov r14, [rbp-44]
  mov QWORD PTR [rax+24], r14
  #     .is_checked = array_is_checked.3
  mov r13b, [rbp-36]
  mov BYTE PTR [rax+32], r13b
  # [discarded value]: $19.1
  # [discarded value]: array_is_checked.3
  # [discarded value]: array_size_expression.3
  # [discarded value]: array_item_type.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] type.4:rax array_is_checked.2:[rbp-36] 
  # jump(.LABEL__parse_type_266__5)
  mov [rbp-54], rax
.LABEL__parse_type_266__5:
  # type.7: @AST_Type = phi(type.4, type.3, type.2)
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] location.6:[rbp-9] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] type.7:[rbp-54] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
  # jump(is_embedded_type.5, .LABEL__parse_type_266__15, .LABEL__parse_type_266__16)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__parse_type_266__16
.LABEL__parse_type_266__15:
  .loc 7 447 16
  # $21.1: @AST_Embedded_Type = new AST_Embedded_Type(object_type = AST_Embedded_Type, location = location.6, embedded_type = type.7)
  mov rdi, 24
  call malloc
  #     .object_type = AST_Embedded_Type
  mov rbx, AST_Embedded_Type[rip]
  mov [rax], rbx
  #     .location = location.6
  mov rbx, [rbp-9]
  mov QWORD PTR [rax+8], rbx
  #     .embedded_type = type.7
  mov r15, [rbp-54]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: location.6
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] type.7:r15:[rbp-54] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] $21.1:rax 
  .loc 7 447 9
  # return($21.1)
  mov [rbp-62], rax
  jmp .LABEL__parse_type_266__end
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] type.7:[rbp-54] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
.LABEL__parse_type_266__16:
  .loc 7 449 5
  # return(type.7)
  mov rax, [rbp-54]
  jmp .LABEL__parse_type_266__end
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] type.7:[rbp-54] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] type.7:[rbp-54] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
  # [discarded value]: type.7
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] type.4:[rbp-54] array_is_checked.2:[rbp-36] 
  # [discarded value]: type.4
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_is_checked.2:[rbp-36] 
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_is_checked.2:[rbp-36] 
  # [discarded value]: array_is_checked.2
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] 
.LABEL__parse_type_266__14:
  .loc 7 434 41
  # array_size_expression.2: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-17]
  call parse_expression_267
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.2:rax:[rbp-44] 
  # jump(.LABEL__parse_type_266__11)
  mov [rbp-44], rax
  jmp .LABEL__parse_type_266__11
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] array_size_expression.2:[rbp-44] 
  # [discarded value]: array_size_expression.2
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] $15.1:[rbp-46] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] $13.1:[rbp-45] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] token.1:[rbp-27] array_is_checked.1:[rbp-36] array_size_expression.1:[rbp-44] 
  # [discarded value]: array_size_expression.1
  # [discarded value]: array_is_checked.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] 
.LABEL__parse_type_266__6:
  .loc 7 440 16
  # $5.1: bool = call(matches_287, self.1, required_func)
  mov rdi, [rbp-17]
  mov rsi, required_func[rip]
  call matches_287
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:rax 
  # jump($5.1, .LABEL__parse_type_266__7, .LABEL__parse_type_266__9)
  test al, al
  mov [rbp-55], al
  jz .LABEL__parse_type_266__9
.LABEL__parse_type_266__7:
  .loc 7 441 16
  # type.3: @AST_Type = call(parse_function_type_259, self.1)
  mov rdi, [rbp-17]
  call parse_function_type_259
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type.3:rax:[rbp-54] 
  # jump(.LABEL__parse_type_266__5)
  mov [rbp-54], rax
  jmp .LABEL__parse_type_266__5
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type.3:[rbp-54] 
  # [discarded value]: type.3
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] 
.LABEL__parse_type_266__9:
  .loc 7 443 25
  # type_name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-17]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type_name.1:rax 
  .loc 7 444 46
  # $8.1: @Source_Location = load_struct_member(type_name.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type_name.1:rax $8.1:rbx 
  .loc 7 444 16
  # type.2: @AST_Type = new AST_Named_Type(object_type = AST_Named_Type, location = $8.1, name = type_name.1)
  mov [rbp-63], rax
  mov [rbp-71], rbx
  mov rdi, 24
  call malloc
  #     .object_type = AST_Named_Type
  mov rbx, AST_Named_Type[rip]
  mov [rax], rbx
  #     .location = $8.1
  mov rbx, [rbp-71]
  mov QWORD PTR [rax+8], rbx
  #     .name = type_name.1
  mov r15, [rbp-63]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $8.1
  # [discarded value]: type_name.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type.2:rax:[rbp-54] 
  # jump(.LABEL__parse_type_266__5)
  mov [rbp-54], rax
  jmp .LABEL__parse_type_266__5
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] type.2:[rbp-54] 
  # [discarded value]: type.2
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] $5.1:[rbp-55] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] $4.1:[rbp-19] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] is_embedded_type.5:[rbp-1] 
  # [discarded value]: is_embedded_type.5
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] 
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] location.2:[rbp-9] is_embedded_type.2:[rbp-1] 
  # [discarded value]: is_embedded_type.2
  # [discarded value]: location.2
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] $1.1:[rbp-18] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] is_embedded_type.1:[rbp-1] location.1:[rbp-9] 
  # [discarded value]: location.1
  # [discarded value]: is_embedded_type.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_type_266__end:
  mov rsp, rbp
  pop rbp
  ret

parse_type_266__stack_frame_size: .word 80

  .loc 7 452 8
  .text
parse_expression_267:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_expression_267__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_expression_267__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 453 12
  # $1.1: @AST_Expression = call(parse_logic_or_expression_268, self.1)
  call parse_logic_or_expression_268
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 453 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__parse_expression_267__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__parse_expression_267__end:
  mov rsp, rbp
  pop rbp
  ret

parse_expression_267__stack_frame_size: .word 16

  .loc 7 458 8
  .text
parse_logic_or_expression_268:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_or_expression_268__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_or_expression_268__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 459 22
  # expression.1: @AST_Expression = call(parse_logic_and_expression_269, self.1)
  mov [rbp-8], rdi
  call parse_logic_and_expression_269
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_or_expression_268__2)
  mov [rbp-16], rax
.LABEL__parse_logic_or_expression_268__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 460 12
  # $2.1: bool = call(matches_289, self.1, optional_space, required_vertical_bar, required_vertical_bar)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_vertical_bar[rip]
  mov rcx, required_vertical_bar[rip]
  call matches_289
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__parse_logic_or_expression_268__3, .LABEL__parse_logic_or_expression_268__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_or_expression_268__4
.LABEL__parse_logic_or_expression_268__3:
  .loc 7 461 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 462 9
  # $3.1: @Token = call(consume_284, self.1, required_vertical_bar, required_vertical_bar)
  mov rdi, [rbp-8]
  mov rsi, required_vertical_bar[rip]
  mov rdx, required_vertical_bar[rip]
  call consume_284
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 463 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 464 61
  # $4.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $2.1:[rbp-17] $4.1:rbx 
  .loc 7 464 131
  # $5.1: @AST_Expression = call(parse_logic_and_expression_269, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_logic_and_expression_269
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-25] $5.1:rax 
  .loc 7 464 22
  # expression.3: @AST_Expression = new AST_Logic_Or_Expression(object_type = AST_Logic_Or_Expression, location = $4.1, left_expression = expression.5, right_expression = $5.1, convert = anonymous_function_69_324.address)
  mov [rbp-33], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Logic_Or_Expression
  mov rbx, AST_Logic_Or_Expression[rip]
  mov [rax], rbx
  #     .location = $4.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_69_324.address
  lea r15, anonymous_function_69_324[rip]
  mov [rax+16], r15
  #     .left_expression = expression.5
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $5.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:r15:[rbp-16] $2.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_or_expression_268__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_or_expression_268__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
.LABEL__parse_logic_or_expression_268__4:
  .loc 7 466 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_or_expression_268__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_or_expression_268__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_or_expression_268__stack_frame_size: .word 48

  .loc 7 471 8
  .text
parse_logic_and_expression_269:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_logic_and_expression_269__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_logic_and_expression_269__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 472 22
  # expression.1: @AST_Expression = call(parse_equality_expression_270, self.1)
  mov [rbp-8], rdi
  call parse_equality_expression_270
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_logic_and_expression_269__2)
  mov [rbp-16], rax
.LABEL__parse_logic_and_expression_269__2:
  # expression.5: @AST_Expression = phi(expression.1, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  .loc 7 473 12
  # $2.1: bool = call(matches_289, self.1, optional_space, required_ampersand, required_ampersand)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_ampersand[rip]
  mov rcx, required_ampersand[rip]
  call matches_289
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__parse_logic_and_expression_269__3, .LABEL__parse_logic_and_expression_269__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_logic_and_expression_269__4
.LABEL__parse_logic_and_expression_269__3:
  .loc 7 474 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 475 9
  # $3.1: @Token = call(consume_284, self.1, required_ampersand, required_ampersand)
  mov rdi, [rbp-8]
  mov rsi, required_ampersand[rip]
  mov rdx, required_ampersand[rip]
  call consume_284
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 476 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  .loc 7 477 62
  # $4.1: @Source_Location = load_struct_member(expression.5, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:rax:[rbp-16] $2.1:[rbp-17] $4.1:rbx 
  .loc 7 477 132
  # $5.1: @AST_Expression = call(parse_equality_expression_270, self.1)
  mov rdi, [rbp-8]
  mov [rbp-25], rbx
  call parse_equality_expression_270
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] $4.1:[rbp-25] $5.1:rax 
  .loc 7 477 22
  # expression.3: @AST_Expression = new AST_Logic_And_Expression(object_type = AST_Logic_And_Expression, location = $4.1, left_expression = expression.5, right_expression = $5.1, convert = anonymous_function_68_323.address)
  mov [rbp-33], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Logic_And_Expression
  mov rbx, AST_Logic_And_Expression[rip]
  mov [rax], rbx
  #     .location = $4.1
  mov rbx, [rbp-25]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_68_323.address
  lea r15, anonymous_function_68_323[rip]
  mov [rax+16], r15
  #     .left_expression = expression.5
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $5.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:r15:[rbp-16] $2.1:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_logic_and_expression_269__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_logic_and_expression_269__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
.LABEL__parse_logic_and_expression_269__4:
  .loc 7 479 5
  # return(expression.5)
  mov rax, [rbp-16]
  jmp .LABEL__parse_logic_and_expression_269__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_logic_and_expression_269__end:
  mov rsp, rbp
  pop rbp
  ret

parse_logic_and_expression_269__stack_frame_size: .word 48

  .loc 7 484 8
  .text
parse_equality_expression_270:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_equality_expression_270__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_equality_expression_270__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 485 22
  # expression.1: @AST_Expression = call(parse_comparison_expression_271, self.1)
  mov [rbp-8], rdi
  call parse_comparison_expression_271
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 486 9
  # $3.1: bool = call(matches_289, self.1, optional_space, required_equals, required_equals)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_equals[rip]
  mov rcx, required_equals[rip]
  mov [rbp-16], rax
  call matches_289
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__parse_equality_expression_270__3, .LABEL__parse_equality_expression_270__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_equality_expression_270__2
.LABEL__parse_equality_expression_270__3:
  .loc 7 486 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__parse_equality_expression_270__4, .LABEL__parse_equality_expression_270__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_equality_expression_270__5
.LABEL__parse_equality_expression_270__4:
  .loc 7 487 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  .loc 7 488 13
  # $5.1: bool = call(matches_287, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:rax 
  # jump($5.1, .LABEL__parse_equality_expression_270__6, .LABEL__parse_equality_expression_270__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_equality_expression_270__8
.LABEL__parse_equality_expression_270__6:
  .loc 7 489 13
  # $10.1: @Token = call(consume_284, self.1, required_equals, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  mov rdx, required_equals[rip]
  call consume_284
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 490 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 491 63
  # $11.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $11.1:rbx 
  .loc 7 491 133
  # $12.1: @AST_Expression = call(parse_comparison_expression_271, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_271
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $11.1:[rbp-26] $12.1:rax 
  .loc 7 491 26
  # expression.5: @AST_Expression = new AST_Equals_Expression(object_type = AST_Equals_Expression, location = $11.1, left_expression = expression.1, right_expression = $12.1, convert = anonymous_function_63_318.address)
  mov [rbp-34], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Equals_Expression
  mov rbx, AST_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $11.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_63_318.address
  lea r15, anonymous_function_63_318[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $12.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_270__5)
  mov [rbp-16], rax
.LABEL__parse_equality_expression_270__5:
  # expression.6: @AST_Expression = phi(expression.5, expression.3, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.6:[rbp-16] expression.5:[rbp-16] 
  .loc 7 498 5
  # return(expression.6)
  mov rax, [rbp-16]
  jmp .LABEL__parse_equality_expression_270__end
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.5:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
.LABEL__parse_equality_expression_270__8:
  .loc 7 493 13
  # $6.1: @Token = call(consume_284, self.1, required_exclamation_mark, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_exclamation_mark[rip]
  mov rdx, required_equals[rip]
  call consume_284
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 494 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 495 67
  # $7.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:rbx 
  .loc 7 495 137
  # $8.1: @AST_Expression = call(parse_comparison_expression_271, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_comparison_expression_271
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-26] $8.1:rax 
  .loc 7 495 26
  # expression.3: @AST_Expression = new AST_Not_Equals_Expression(object_type = AST_Not_Equals_Expression, location = $7.1, left_expression = expression.1, right_expression = $8.1, convert = anonymous_function_72_327.address)
  mov [rbp-34], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Not_Equals_Expression
  mov rbx, AST_Not_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $7.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_72_327.address
  lea r15, anonymous_function_72_327[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $8.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_equality_expression_270__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_equality_expression_270__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__parse_equality_expression_270__2:
  .loc 7 486 75
  # $3.2: bool = call(matches_289, self.1, optional_space, required_exclamation_mark, required_equals)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_exclamation_mark[rip]
  mov rcx, required_equals[rip]
  call matches_289
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.2:rax:[rbp-17] 
  # jump(.LABEL__parse_equality_expression_270__3)
  mov [rbp-17], al
  jmp .LABEL__parse_equality_expression_270__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_equality_expression_270__end:
  mov rsp, rbp
  pop rbp
  ret

parse_equality_expression_270__stack_frame_size: .word 48

  .loc 7 503 8
  .text
parse_comparison_expression_271:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_comparison_expression_271__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_comparison_expression_271__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 504 22
  # expression.1: @AST_Expression = call(parse_addition_expression_272, self.1)
  mov [rbp-8], rdi
  call parse_addition_expression_272
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 505 9
  # $3.1: bool = call(matches_288, self.1, optional_space, required_less_than)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_less_than[rip]
  mov [rbp-16], rax
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__parse_comparison_expression_271__3, .LABEL__parse_comparison_expression_271__2)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_comparison_expression_271__2
.LABEL__parse_comparison_expression_271__3:
  .loc 7 505 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__parse_comparison_expression_271__4, .LABEL__parse_comparison_expression_271__5)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_comparison_expression_271__5
.LABEL__parse_comparison_expression_271__4:
  .loc 7 506 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  .loc 7 507 13
  # $5.1: bool = call(matches_287, self.1, required_less_than)
  mov rdi, [rbp-8]
  mov rsi, required_less_than[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:rax 
  # jump($5.1, .LABEL__parse_comparison_expression_271__6, .LABEL__parse_comparison_expression_271__8)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_comparison_expression_271__8
.LABEL__parse_comparison_expression_271__6:
  .loc 7 508 13
  # $15.1: @Token = call(consume_283, self.1, required_less_than)
  mov rdi, [rbp-8]
  mov rsi, required_less_than[rip]
  call consume_283
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 509 17
  # $16.1: bool = call(matches_287, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:rax 
  # jump($16.1, .LABEL__parse_comparison_expression_271__12, .LABEL__parse_comparison_expression_271__14)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_271__14
.LABEL__parse_comparison_expression_271__12:
  .loc 7 510 17
  # $20.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] 
  .loc 7 511 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] 
  .loc 7 512 80
  # $21.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] $21.1:rbx 
  .loc 7 512 150
  # $22.1: @AST_Expression = call(parse_addition_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] $21.1:[rbp-27] $22.1:rax 
  .loc 7 512 30
  # expression.9: @AST_Expression = new AST_Less_Than_Or_Equals_Expression(object_type = AST_Less_Than_Or_Equals_Expression, location = $21.1, left_expression = expression.1, right_expression = $22.1, convert = anonymous_function_67_322.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Less_Than_Or_Equals_Expression
  mov rbx, AST_Less_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $21.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_67_322.address
  lea r15, anonymous_function_67_322[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $22.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $22.1
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] expression.9:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_271__5)
  mov [rbp-16], rax
.LABEL__parse_comparison_expression_271__5:
  # expression.10: @AST_Expression = phi(expression.5, expression.3, expression.9, expression.7, expression.1)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] expression.10:[rbp-16] $16.1:[rbp-19] expression.9:[rbp-16] 
  .loc 7 529 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_comparison_expression_271__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] expression.9:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] 
.LABEL__parse_comparison_expression_271__14:
  .loc 7 514 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] 
  .loc 7 515 70
  # $17.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] $17.1:rbx 
  .loc 7 515 140
  # $18.1: @AST_Expression = call(parse_addition_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] $17.1:[rbp-27] $18.1:rax 
  .loc 7 515 30
  # expression.7: @AST_Expression = new AST_Less_Than_Expression(object_type = AST_Less_Than_Expression, location = $17.1, left_expression = expression.1, right_expression = $18.1, convert = anonymous_function_66_321.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Less_Than_Expression
  mov rbx, AST_Less_Than_Expression[rip]
  mov [rax], rbx
  #     .location = $17.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_66_321.address
  lea r15, anonymous_function_66_321[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $18.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $18.1
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_271__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_271__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $16.1:[rbp-19] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
.LABEL__parse_comparison_expression_271__8:
  .loc 7 518 13
  # $6.1: @Token = call(consume_283, self.1, required_greater_than)
  mov rdi, [rbp-8]
  mov rsi, required_greater_than[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  .loc 7 519 17
  # $7.1: bool = call(matches_287, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:rax 
  # jump($7.1, .LABEL__parse_comparison_expression_271__9, .LABEL__parse_comparison_expression_271__11)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_comparison_expression_271__11
.LABEL__parse_comparison_expression_271__9:
  .loc 7 520 17
  # $11.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] 
  .loc 7 521 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] 
  .loc 7 522 83
  # $12.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] $12.1:rbx 
  .loc 7 522 153
  # $13.1: @AST_Expression = call(parse_addition_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] $12.1:[rbp-27] $13.1:rax 
  .loc 7 522 30
  # expression.5: @AST_Expression = new AST_Greater_Than_Or_Equals_Expression(object_type = AST_Greater_Than_Or_Equals_Expression, location = $12.1, left_expression = expression.1, right_expression = $13.1, convert = anonymous_function_65_320.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Greater_Than_Or_Equals_Expression
  mov rbx, AST_Greater_Than_Or_Equals_Expression[rip]
  mov [rax], rbx
  #     .location = $12.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_65_320.address
  lea r15, anonymous_function_65_320[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $13.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_271__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_271__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] 
.LABEL__parse_comparison_expression_271__11:
  .loc 7 524 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] 
  .loc 7 525 73
  # $8.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:rax:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] $8.1:rbx 
  .loc 7 525 143
  # $9.1: @AST_Expression = call(parse_addition_expression_272, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_addition_expression_272
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] $8.1:[rbp-27] $9.1:rax 
  .loc 7 525 30
  # expression.3: @AST_Expression = new AST_Greater_Than_Expression(object_type = AST_Greater_Than_Expression, location = $8.1, left_expression = expression.1, right_expression = $9.1, convert = anonymous_function_64_319.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Greater_Than_Expression
  mov rbx, AST_Greater_Than_Expression[rip]
  mov [rax], rbx
  #     .location = $8.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_64_319.address
  lea r15, anonymous_function_64_319[rip]
  mov [rax+16], r15
  #     .left_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $9.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_comparison_expression_271__5)
  mov [rbp-16], rax
  jmp .LABEL__parse_comparison_expression_271__5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] $7.1:[rbp-19] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__parse_comparison_expression_271__2:
  .loc 7 505 61
  # $3.2: bool = call(matches_288, self.1, optional_space, required_greater_than)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_greater_than[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.2:rax:[rbp-17] 
  # jump(.LABEL__parse_comparison_expression_271__3)
  mov [rbp-17], al
  jmp .LABEL__parse_comparison_expression_271__3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_comparison_expression_271__end:
  mov rsp, rbp
  pop rbp
  ret

parse_comparison_expression_271__stack_frame_size: .word 48

  .loc 7 534 8
  .text
parse_addition_expression_272:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_addition_expression_272__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_addition_expression_272__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 535 22
  # expression.1: @AST_Expression = call(parse_multiplication_expression_273, self.1)
  mov [rbp-8], rdi
  call parse_multiplication_expression_273
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_addition_expression_272__2)
  mov [rbp-16], rax
.LABEL__parse_addition_expression_272__2:
  # expression.8: @AST_Expression = phi(expression.1, expression.5, expression.3)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] 
  .loc 7 536 12
  # $3.1: bool = call(matches_288, self.1, optional_space, required_plus)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_plus[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__parse_addition_expression_272__6, .LABEL__parse_addition_expression_272__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_addition_expression_272__5
.LABEL__parse_addition_expression_272__6:
  .loc 7 536 12
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__parse_addition_expression_272__3, .LABEL__parse_addition_expression_272__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_addition_expression_272__4
.LABEL__parse_addition_expression_272__3:
  .loc 7 537 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  .loc 7 539 13
  # $5.1: bool = call(matches_287, self.1, required_plus)
  mov rdi, [rbp-8]
  mov rsi, required_plus[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:rax $3.3:[rbp-17] 
  # jump($5.1, .LABEL__parse_addition_expression_272__7, .LABEL__parse_addition_expression_272__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_addition_expression_272__9
.LABEL__parse_addition_expression_272__7:
  .loc 7 540 13
  # $10.1: @Token = call(consume_283, self.1, required_plus)
  mov rdi, [rbp-8]
  mov rsi, required_plus[rip]
  call consume_283
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 541 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 542 60
  # $11.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:rbx 
  .loc 7 542 130
  # $12.1: @AST_Expression = call(parse_multiplication_expression_273, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_273
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-26] $12.1:rax 
  .loc 7 542 26
  # expression.5: @AST_Expression = new AST_Add_Expression(object_type = AST_Add_Expression, location = $11.1, left_expression = expression.8, right_expression = $12.1, convert = anonymous_function_61_316.address)
  mov [rbp-34], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Add_Expression
  mov rbx, AST_Add_Expression[rip]
  mov [rax], rbx
  #     .location = $11.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_61_316.address
  lea r15, anonymous_function_61_316[rip]
  mov [rax+16], r15
  #     .left_expression = expression.8
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $12.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:r15:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_272__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_272__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
.LABEL__parse_addition_expression_272__9:
  .loc 7 544 13
  # $6.1: @Token = call(consume_283, self.1, required_hyphen)
  mov rdi, [rbp-8]
  mov rsi, required_hyphen[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 545 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 546 66
  # $7.1: @Source_Location = load_struct_member(expression.8, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:rax:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $7.1:rbx 
  .loc 7 546 136
  # $8.1: @AST_Expression = call(parse_multiplication_expression_273, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_multiplication_expression_273
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $7.1:[rbp-26] $8.1:rax 
  .loc 7 546 26
  # expression.3: @AST_Expression = new AST_Substract_Expression(object_type = AST_Substract_Expression, location = $7.1, left_expression = expression.8, right_expression = $8.1, convert = anonymous_function_73_328.address)
  mov [rbp-34], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Substract_Expression
  mov rbx, AST_Substract_Expression[rip]
  mov [rax], rbx
  #     .location = $7.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_73_328.address
  lea r15, anonymous_function_73_328[rip]
  mov [rax+16], r15
  #     .left_expression = expression.8
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $8.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:r15:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_addition_expression_272__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_addition_expression_272__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
.LABEL__parse_addition_expression_272__4:
  .loc 7 549 5
  # return(expression.8)
  mov rax, [rbp-16]
  jmp .LABEL__parse_addition_expression_272__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] 
.LABEL__parse_addition_expression_272__5:
  .loc 7 536 59
  # $3.2: bool = call(matches_288, self.1, optional_space, required_hyphen)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_hyphen[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.2:rax:[rbp-17] 
  # jump(.LABEL__parse_addition_expression_272__6)
  mov [rbp-17], al
  jmp .LABEL__parse_addition_expression_272__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.8:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_addition_expression_272__end:
  mov rsp, rbp
  pop rbp
  ret

parse_addition_expression_272__stack_frame_size: .word 48

  .loc 7 554 8
  .text
parse_multiplication_expression_273:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_multiplication_expression_273__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_multiplication_expression_273__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 555 22
  # expression.1: @AST_Expression = call(parse_unary_expression_274, self.1)
  mov [rbp-8], rdi
  call parse_unary_expression_274
  # [live values]: self.1:[rbp-8] expression.1:rax 
  # jump(.LABEL__parse_multiplication_expression_273__2)
  mov [rbp-16], rax
.LABEL__parse_multiplication_expression_273__2:
  # expression.10: @AST_Expression = phi(expression.1, expression.3, expression.7, expression.5)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] 
  .loc 7 556 12
  # $3.1: bool = call(matches_288, self.1, optional_space, required_asterisk)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_asterisk[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__parse_multiplication_expression_273__6, .LABEL__parse_multiplication_expression_273__5)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_multiplication_expression_273__5
.LABEL__parse_multiplication_expression_273__6:
  .loc 7 556 12
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # jump($3.3, .LABEL__parse_multiplication_expression_273__3, .LABEL__parse_multiplication_expression_273__4)
  mov al, [rbp-17]
  test al, al
  jz .LABEL__parse_multiplication_expression_273__4
.LABEL__parse_multiplication_expression_273__3:
  .loc 7 557 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  .loc 7 558 13
  # $5.1: bool = call(matches_287, self.1, required_slash)
  mov rdi, [rbp-8]
  mov rsi, required_slash[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:rax $3.3:[rbp-17] 
  # jump($5.1, .LABEL__parse_multiplication_expression_273__7, .LABEL__parse_multiplication_expression_273__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_multiplication_expression_273__9
.LABEL__parse_multiplication_expression_273__7:
  .loc 7 559 13
  # $10.1: @Token = call(consume_283, self.1, required_slash)
  mov rdi, [rbp-8]
  mov rsi, required_slash[rip]
  call consume_283
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 560 17
  # $11.1: bool = call(matches_287, self.1, required_slash)
  mov rdi, [rbp-8]
  mov rsi, required_slash[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:rax 
  # jump($11.1, .LABEL__parse_multiplication_expression_273__10, .LABEL__parse_multiplication_expression_273__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__parse_multiplication_expression_273__12
.LABEL__parse_multiplication_expression_273__10:
  .loc 7 561 17
  # $15.1: @Token = call(consume_283, self.1, required_slash)
  mov rdi, [rbp-8]
  mov rsi, required_slash[rip]
  call consume_283
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] 
  .loc 7 562 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] 
  .loc 7 563 67
  # $16.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] $16.1:rbx 
  .loc 7 563 137
  # $17.1: @AST_Expression = call(parse_unary_expression_274, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_274
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] $16.1:[rbp-27] $17.1:rax 
  .loc 7 563 30
  # expression.7: @AST_Expression = new AST_Modulo_Expression(object_type = AST_Modulo_Expression, location = $16.1, left_expression = expression.10, right_expression = $17.1, convert = anonymous_function_70_325.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Modulo_Expression
  mov rbx, AST_Modulo_Expression[rip]
  mov [rax], rbx
  #     .location = $16.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_70_325.address
  lea r15, anonymous_function_70_325[rip]
  mov [rax+16], r15
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $17.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] expression.7:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_273__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_273__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] expression.7:[rbp-16] 
  # [discarded value]: expression.7
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] 
.LABEL__parse_multiplication_expression_273__12:
  .loc 7 565 17
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] 
  .loc 7 566 67
  # $12.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] $12.1:rbx 
  .loc 7 566 137
  # $13.1: @AST_Expression = call(parse_unary_expression_274, self.1)
  mov rdi, [rbp-8]
  mov [rbp-27], rbx
  call parse_unary_expression_274
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] $12.1:[rbp-27] $13.1:rax 
  .loc 7 566 30
  # expression.5: @AST_Expression = new AST_Divide_Expression(object_type = AST_Divide_Expression, location = $12.1, left_expression = expression.10, right_expression = $13.1, convert = anonymous_function_62_317.address)
  mov [rbp-35], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Divide_Expression
  mov rbx, AST_Divide_Expression[rip]
  mov [rax], rbx
  #     .location = $12.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_62_317.address
  lea r15, anonymous_function_62_317[rip]
  mov [rax+16], r15
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $13.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] expression.5:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_273__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_273__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] expression.5:[rbp-16] 
  # [discarded value]: expression.5
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $11.1:[rbp-19] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
.LABEL__parse_multiplication_expression_273__9:
  .loc 7 569 13
  # $6.1: @Token = call(consume_283, self.1, required_asterisk)
  mov rdi, [rbp-8]
  mov rsi, required_asterisk[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 570 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  .loc 7 571 65
  # $7.1: @Source_Location = load_struct_member(expression.10, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:rax:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $7.1:rbx 
  .loc 7 571 135
  # $8.1: @AST_Expression = call(parse_unary_expression_274, self.1)
  mov rdi, [rbp-8]
  mov [rbp-26], rbx
  call parse_unary_expression_274
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] $7.1:[rbp-26] $8.1:rax 
  .loc 7 571 26
  # expression.3: @AST_Expression = new AST_Multiply_Expression(object_type = AST_Multiply_Expression, location = $7.1, left_expression = expression.10, right_expression = $8.1, convert = anonymous_function_71_326.address)
  mov [rbp-34], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Multiply_Expression
  mov rbx, AST_Multiply_Expression[rip]
  mov [rax], rbx
  #     .location = $7.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_71_326.address
  lea r15, anonymous_function_71_326[rip]
  mov [rax+16], r15
  #     .left_expression = expression.10
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .right_expression = $8.1
  mov r14, [rbp-34]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:r15:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.3:rax:[rbp-16] 
  # jump(.LABEL__parse_multiplication_expression_273__2)
  mov [rbp-16], rax
  jmp .LABEL__parse_multiplication_expression_273__2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] expression.3:[rbp-16] 
  # [discarded value]: expression.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $5.1:[rbp-18] $3.3:[rbp-17] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
.LABEL__parse_multiplication_expression_273__4:
  .loc 7 574 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_multiplication_expression_273__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.3:[rbp-17] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] 
.LABEL__parse_multiplication_expression_273__5:
  .loc 7 556 63
  # $3.2: bool = call(matches_288, self.1, optional_space, required_slash)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_slash[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.2:rax:[rbp-17] 
  # jump(.LABEL__parse_multiplication_expression_273__6)
  mov [rbp-17], al
  jmp .LABEL__parse_multiplication_expression_273__6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] $3.2:[rbp-17] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] expression.10:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_multiplication_expression_273__end:
  mov rsp, rbp
  pop rbp
  ret

parse_multiplication_expression_273__stack_frame_size: .word 48

  .loc 7 579 8
  .text
parse_unary_expression_274:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_unary_expression_274__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_unary_expression_274__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 580 9
  # $1.1: bool = call(matches_287, self.1, required_hyphen)
  mov rsi, required_hyphen[rip]
  mov [rbp-8], rdi
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_unary_expression_274__2, .LABEL__parse_unary_expression_274__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_unary_expression_274__3
.LABEL__parse_unary_expression_274__2:
  .loc 7 581 24
  # $2.1: @Token = call(consume_283, self.1, required_hyphen)
  mov rdi, [rbp-8]
  mov rsi, required_hyphen[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:rax 
  .loc 7 581 24
  # location.1: @Source_Location = load_struct_member($2.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] location.1:rbx 
  .loc 7 582 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-17], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] location.1:[rbp-17] 
  .loc 7 583 76
  # $4.1: @AST_Expression = call(parse_cast_expression_275, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] location.1:[rbp-17] $4.1:rax 
  .loc 7 583 16
  # $5.1: @AST_Negate_Expression = new AST_Negate_Expression(object_type = AST_Negate_Expression, location = location.1, expression = $4.1, convert = anonymous_function_74_329.address)
  mov [rbp-25], rax
  mov rdi, 32
  call malloc
  #     .object_type = AST_Negate_Expression
  mov rbx, AST_Negate_Expression[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_74_329.address
  lea r15, anonymous_function_74_329[rip]
  mov [rax+16], r15
  #     .expression = $4.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $4.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $5.1:rax 
  .loc 7 583 9
  # return($5.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_274__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
.LABEL__parse_unary_expression_274__3:
  .loc 7 585 12
  # $6.1: @AST_Expression = call(parse_cast_expression_275, self.1)
  mov rdi, [rbp-8]
  call parse_cast_expression_275
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $6.1:rax 
  .loc 7 585 5
  # return($6.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_unary_expression_274__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_unary_expression_274__end:
  mov rsp, rbp
  pop rbp
  ret

parse_unary_expression_274__stack_frame_size: .word 32

  .loc 7 590 8
  .text
parse_cast_expression_275:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_cast_expression_275__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_cast_expression_275__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 591 22
  # expression.1: @AST_Expression = call(parse_access_expression_276, self.1)
  mov [rbp-8], rdi
  call parse_access_expression_276
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 592 9
  # $2.1: bool = call(matches_288, self.1, optional_space, required_as)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_as[rip]
  mov [rbp-16], rax
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__parse_cast_expression_275__2, .LABEL__parse_cast_expression_275__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_cast_expression_275__3
.LABEL__parse_cast_expression_275__2:
  .loc 7 593 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  .loc 7 594 9
  # $3.1: @Token = call(consume_283, self.1, required_as)
  mov rdi, [rbp-8]
  mov rsi, required_as[rip]
  call consume_283
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  .loc 7 595 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  .loc 7 596 20
  # type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-8]
  call parse_type_266
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] type.1:rax 
  .loc 7 597 51
  # $5.1: @Source_Location = load_struct_member(expression.1, location)
  mov rbx, [rbp-16]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-8] expression.1:rbx:[rbp-16] $2.1:[rbp-17] type.1:rax $5.1:r15 
  .loc 7 597 16
  # $6.1: @AST_Cast_Expression = new AST_Cast_Expression(object_type = AST_Cast_Expression, location = $5.1, value_expression = expression.1, type = type.1, convert = anonymous_function_75_330.address)
  mov [rbp-25], rax
  mov [rbp-33], r15
  mov rdi, 40
  call malloc
  #     .object_type = AST_Cast_Expression
  mov rbx, AST_Cast_Expression[rip]
  mov [rax], rbx
  #     .location = $5.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_75_330.address
  lea r15, anonymous_function_75_330[rip]
  mov [rax+16], r15
  #     .value_expression = expression.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .type = type.1
  mov r14, [rbp-25]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $5.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] expression.1:r15:[rbp-16] $2.1:[rbp-17] $6.1:rax 
  .loc 7 597 9
  # return($6.1)
  mov [rbp-25], rax
  jmp .LABEL__parse_cast_expression_275__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
.LABEL__parse_cast_expression_275__3:
  .loc 7 599 5
  # return(expression.1)
  mov rax, [rbp-16]
  jmp .LABEL__parse_cast_expression_275__end
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_cast_expression_275__end:
  mov rsp, rbp
  pop rbp
  ret

parse_cast_expression_275__stack_frame_size: .word 48

  .loc 7 604 8
  .text
parse_access_expression_276:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_access_expression_276__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_access_expression_276__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 605 22
  # expression.1: @AST_Expression = call(parse_primary_expression_279, self.1)
  mov [rbp-8], rdi
  call parse_primary_expression_279
  # [live values]: self.1:[rbp-8] expression.1:rax 
  .loc 7 606 9
  # $2.1: bool = expression.1 != null
  cmp rax, 0
  setne bl
  # [live values]: self.1:[rbp-8] expression.1:rax $2.1:rbx 
  # jump($2.1, .LABEL__parse_access_expression_276__4, .LABEL__parse_access_expression_276__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__parse_access_expression_276__3
.LABEL__parse_access_expression_276__4:
  # expression.2: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] 
  .loc 7 608 17
  # old_expression.1: @AST_Expression = expression.2
  mov rax, [rbp-16]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:rax 
  .loc 7 609 17
  # $3.1: bool = call(matches_288, self.1, optional_space, required_dot)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_dot[rip]
  mov [rbp-25], rax
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:rax 
  # jump($3.1, .LABEL__parse_access_expression_276__6, .LABEL__parse_access_expression_276__7)
  test al, al
  mov [rbp-26], al
  jz .LABEL__parse_access_expression_276__7
.LABEL__parse_access_expression_276__6:
  .loc 7 610 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] 
  .loc 7 611 17
  # $4.1: @Token = call(consume_283, self.1, required_dot)
  mov rdi, [rbp-8]
  mov rsi, required_dot[rip]
  call consume_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] 
  .loc 7 612 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] 
  .loc 7 613 74
  # $5.1: @Source_Location = load_struct_member(expression.2, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:rax:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] $5.1:rbx 
  .loc 7 613 141
  # $7.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  mov [rbp-34], rbx
  call consume_283
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] $5.1:[rbp-34] $7.1:rax 
  .loc 7 613 30
  # expression.4: @AST_Expression = new AST_Member_Access_Expression(object_type = AST_Member_Access_Expression, location = $5.1, object_expression = expression.2, member_name = $7.1, convert = anonymous_function_79_334.address)
  mov [rbp-42], rax
  mov rdi, 40
  call malloc
  #     .object_type = AST_Member_Access_Expression
  mov rbx, AST_Member_Access_Expression[rip]
  mov [rax], rbx
  #     .location = $5.1
  mov rbx, [rbp-34]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_79_334.address
  lea r15, anonymous_function_79_334[rip]
  mov [rax+16], r15
  #     .object_expression = expression.2
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .member_name = $7.1
  mov r14, [rbp-42]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:r15:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_276__7)
  mov [rbp-16], rax
.LABEL__parse_access_expression_276__7:
  # expression.11: @AST_Expression = phi(expression.2, expression.4)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  .loc 7 615 17
  # $9.1: bool = call(matches_288, self.1, optional_space, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_open_paren[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:rax 
  # jump($9.1, .LABEL__parse_access_expression_276__8, .LABEL__parse_access_expression_276__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__parse_access_expression_276__9
.LABEL__parse_access_expression_276__8:
  .loc 7 616 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] 
  .loc 7 617 17
  # $10.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] 
  .loc 7 618 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] 
  .loc 7 619 38
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:rax 
  .loc 7 620 21
  # $12.1: bool = call(matches_288, self.1, optional_space, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_close_paren[rip]
  mov [rbp-35], rax
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $12.1:rax 
  .loc 7 620 21
  # $13.1: bool = $12.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:rbx 
  # jump($13.1, .LABEL__parse_access_expression_276__10, .LABEL__parse_access_expression_276__11)
  test bl, bl
  mov [rbp-36], bl
  jz .LABEL__parse_access_expression_276__11
.LABEL__parse_access_expression_276__10:
  .loc 7 621 21
  # call(parse_call_arguments_277, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-35]
  call parse_call_arguments_277
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] 
  # jump(.LABEL__parse_access_expression_276__11)
.LABEL__parse_access_expression_276__11:
  .loc 7 623 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] 
  .loc 7 624 17
  # $14.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] 
  .loc 7 625 65
  # $15.1: @Source_Location = load_struct_member(expression.11, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:rax:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] $15.1:rbx 
  .loc 7 625 30
  # expression.6: @AST_Expression = new AST_Call_Expression(object_type = AST_Call_Expression, location = $15.1, callee_expression = expression.11, arguments = call_arguments.1, convert = anonymous_function_78_333.address)
  mov [rbp-44], rbx
  mov rdi, 40
  call malloc
  #     .object_type = AST_Call_Expression
  mov rbx, AST_Call_Expression[rip]
  mov [rax], rbx
  #     .location = $15.1
  mov rbx, [rbp-44]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_78_333.address
  lea r15, anonymous_function_78_333[rip]
  mov [rax+16], r15
  #     .callee_expression = expression.11
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .arguments = call_arguments.1
  mov r14, [rbp-35]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:r15:[rbp-16] $9.1:[rbp-27] call_arguments.1:r14:[rbp-35] $13.1:[rbp-36] expression.6:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_276__9)
  mov [rbp-16], rax
.LABEL__parse_access_expression_276__9:
  # expression.12: @AST_Expression = phi(expression.11, expression.6)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  .loc 7 627 17
  # $17.1: bool = call(matches_288, self.1, optional_space, required_open_bracket)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_open_bracket[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:rax expression.6:[rbp-16] 
  # jump($17.1, .LABEL__parse_access_expression_276__12, .LABEL__parse_access_expression_276__13)
  test al, al
  mov [rbp-37], al
  jz .LABEL__parse_access_expression_276__13
.LABEL__parse_access_expression_276__12:
  .loc 7 628 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 629 17
  # $18.1: @Token = call(consume_283, self.1, required_open_bracket)
  mov rdi, [rbp-8]
  mov rsi, required_open_bracket[rip]
  call consume_283
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 630 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] 
  .loc 7 631 40
  # index_expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] index_expression.1:rax 
  .loc 7 632 17
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-45], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 633 17
  # $20.1: @Token = call(consume_283, self.1, required_close_bracket)
  mov rdi, [rbp-8]
  mov rsi, required_close_bracket[rip]
  call consume_283
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] 
  .loc 7 634 73
  # $21.1: @Source_Location = load_struct_member(expression.12, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:rax:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] index_expression.1:[rbp-45] $21.1:rbx 
  .loc 7 634 30
  # expression.8: @AST_Expression = new AST_Array_Access_Expression(object_type = AST_Array_Access_Expression, location = $21.1, array_expression = expression.12, index_expression = index_expression.1, convert = anonymous_function_80_335.address)
  mov [rbp-53], rbx
  mov rdi, 40
  call malloc
  #     .object_type = AST_Array_Access_Expression
  mov rbx, AST_Array_Access_Expression[rip]
  mov [rax], rbx
  #     .location = $21.1
  mov rbx, [rbp-53]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_80_335.address
  lea r15, anonymous_function_80_335[rip]
  mov [rax+16], r15
  #     .array_expression = expression.12
  mov r15, [rbp-16]
  mov QWORD PTR [rax+24], r15
  #     .index_expression = index_expression.1
  mov r14, [rbp-45]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $21.1
  # [discarded value]: index_expression.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:r15:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:rax:[rbp-16] 
  # jump(.LABEL__parse_access_expression_276__13)
  mov [rbp-16], rax
.LABEL__parse_access_expression_276__13:
  # expression.9: @AST_Expression = phi(expression.12, expression.8)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  .loc 7 636 17
  # $23.1: bool = expression.9 == old_expression.1
  mov rax, [rbp-16]
  cmp rax, QWORD PTR [rbp-25]
  sete bl
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:rax:[rbp-16] $23.1:rbx 
  # jump($23.1, .LABEL__parse_access_expression_276__3, .LABEL__parse_access_expression_276__4)
  test bl, bl
  mov [rbp-38], bl
  jz .LABEL__parse_access_expression_276__4
.LABEL__parse_access_expression_276__3:
  # expression.10: @AST_Expression = phi(expression.1, expression.9)
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.10:[rbp-16] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $23.1:[rbp-38] 
  .loc 7 641 5
  # return(expression.10)
  mov rax, [rbp-16]
  jmp .LABEL__parse_access_expression_276__end
  # [discarded value]: expression.10
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] $23.1:[rbp-38] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] expression.9:[rbp-16] 
  # [discarded value]: expression.9
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] expression.8:[rbp-16] 
  # [discarded value]: expression.8
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] $17.1:[rbp-37] expression.6:[rbp-16] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.12:[rbp-16] expression.6:[rbp-16] 
  # [discarded value]: expression.12
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.6:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] expression.6:[rbp-16] 
  # [discarded value]: expression.6
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] $13.1:[rbp-36] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] call_arguments.1:[rbp-35] 
  # [discarded value]: call_arguments.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] $9.1:[rbp-27] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] expression.11:[rbp-16] 
  # [discarded value]: expression.11
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] 
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] expression.4:[rbp-16] 
  # [discarded value]: expression.4
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] $3.1:[rbp-26] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] expression.2:[rbp-16] old_expression.1:[rbp-25] 
  # [discarded value]: old_expression.1
  # [discarded value]: expression.2
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_access_expression_276__end:
  mov rsp, rbp
  pop rbp
  ret

parse_access_expression_276__stack_frame_size: .word 64

  .loc 7 647 8
  .text
parse_call_arguments_277:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_arguments_277__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_arguments_277__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # call_arguments.1: @List = load_variable(call_arguments)
  # [live values]: self.1:rdi call_arguments.1:rsi 
  .loc 7 648 9
  # $1.1: bool = call(matches_end_of_line_286, self.1)
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  call matches_end_of_line_286
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_call_arguments_277__2, .LABEL__parse_call_arguments_277__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__parse_call_arguments_277__4
.LABEL__parse_call_arguments_277__2:
  .loc 7 649 9
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  .loc 7 650 34
  # $6.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $6.1:rbx 
  .loc 7 650 34
  # $7.1: isize = $6.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $7.1:r15 
  .loc 7 650 9
  # store_struct_member(self.1, current_alignment, $7.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_277__8)
.LABEL__parse_call_arguments_277__8:
  .loc 7 651 16
  # $8.1: bool = call(matches_288, self.1, optional_space, required_close_paren)
  mov rdi, [rbp-16]
  mov rsi, optional_space[rip]
  mov rdx, required_close_paren[rip]
  call matches_288
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $8.1:rax 
  .loc 7 651 16
  # $9.1: bool = $8.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:rbx 
  # jump($9.1, .LABEL__parse_call_arguments_277__9, .LABEL__parse_call_arguments_277__10)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__parse_call_arguments_277__10
.LABEL__parse_call_arguments_277__9:
  .loc 7 652 32
  # $10.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $10.1:rbx 
  .loc 7 652 32
  # $11.1: isize = $10.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $11.1:r15 
  .loc 7 652 13
  # call(consume_space_282, self.1, $11.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  .loc 7 653 35
  # $12.1: @AST_Call_Argument = call(parse_call_argument_278, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_278
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $12.1:rax 
  .loc 7 653 13
  # call(append_364, call_arguments.1, $12.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_364
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  .loc 7 654 13
  # call(consume_end_of_line_280, self.1)
  mov rdi, [rbp-16]
  call consume_end_of_line_280
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_277__8)
  jmp .LABEL__parse_call_arguments_277__8
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
.LABEL__parse_call_arguments_277__10:
  .loc 7 656 34
  # $13.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $13.1:rbx 
  .loc 7 656 34
  # $14.1: isize = $13.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $14.1:r15 
  .loc 7 656 9
  # store_struct_member(self.1, current_alignment, $14.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  .loc 7 657 28
  # $15.1: isize = load_struct_member(self.1, current_alignment)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $15.1:rbx 
  .loc 7 657 28
  # $16.1: isize = $15.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] $16.1:r15 
  .loc 7 657 9
  # call(consume_space_282, self.1, $16.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_277__3)
.LABEL__parse_call_arguments_277__3:
  # return()
  jmp .LABEL__parse_call_arguments_277__end
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $9.1:[rbp-18] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
.LABEL__parse_call_arguments_277__4:
  .loc 7 659 31
  # $2.1: @AST_Call_Argument = call(parse_call_argument_278, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_278
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $2.1:rax 
  .loc 7 659 9
  # call(append_364, call_arguments.1, $2.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_364
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # jump(.LABEL__parse_call_arguments_277__5)
.LABEL__parse_call_arguments_277__5:
  .loc 7 660 16
  # $3.1: bool = call(matches_288, self.1, optional_space, required_comma)
  mov rdi, [rbp-16]
  mov rsi, optional_space[rip]
  mov rdx, required_comma[rip]
  call matches_288
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:rax 
  # jump($3.1, .LABEL__parse_call_arguments_277__6, .LABEL__parse_call_arguments_277__3)
  test al, al
  mov [rbp-18], al
  jz .LABEL__parse_call_arguments_277__3
.LABEL__parse_call_arguments_277__6:
  .loc 7 661 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-16]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] 
  .loc 7 662 13
  # $4.1: @Token = call(consume_283, self.1, required_comma)
  mov rdi, [rbp-16]
  mov rsi, required_comma[rip]
  call consume_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] 
  .loc 7 663 13
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-16]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] 
  .loc 7 664 35
  # $5.1: @AST_Call_Argument = call(parse_call_argument_278, self.1)
  mov rdi, [rbp-16]
  call parse_call_argument_278
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] $5.1:rax 
  .loc 7 664 13
  # call(append_364, call_arguments.1, $5.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call append_364
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] 
  # jump(.LABEL__parse_call_arguments_277__5)
  jmp .LABEL__parse_call_arguments_277__5
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] $3.1:[rbp-18] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-16] call_arguments.1:[rbp-8] 
  # [discarded value]: call_arguments.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_arguments_277__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_arguments_277__stack_frame_size: .word 32

  .loc 7 671 8
  .text
parse_call_argument_278:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_call_argument_278__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_call_argument_278__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 672 9
  # $1.1: bool = call(matches_289, self.1, required_identifier, optional_space, required_equals)
  mov rsi, required_identifier[rip]
  mov rdx, optional_space[rip]
  mov rcx, required_equals[rip]
  mov [rbp-8], rdi
  call matches_289
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_call_argument_278__2, .LABEL__parse_call_argument_278__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_call_argument_278__3
.LABEL__parse_call_argument_278__2:
  .loc 7 673 20
  # name.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] name.1:rax 
  .loc 7 674 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-17], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 675 9
  # $4.1: @Token = call(consume_283, self.1, required_equals)
  mov rdi, [rbp-8]
  mov rsi, required_equals[rip]
  call consume_283
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 676 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] name.1:[rbp-17] 
  .loc 7 677 21
  # value.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] name.1:[rbp-17] value.1:rax 
  .loc 7 678 16
  # $6.1: @AST_Call_Argument = new AST_Call_Argument(name = name.1, value_expression = value.1)
  mov [rbp-25], rax
  mov rdi, 16
  call malloc
  #     .name = name.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax], rbx
  #     .value_expression = value.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+8], r15
  # [discarded value]: value.1
  # [discarded value]: name.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $6.1:rax 
  .loc 7 678 9
  # return($6.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_278__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
.LABEL__parse_call_argument_278__3:
  .loc 7 680 17
  # value.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] value.1:rax 
  .loc 7 681 12
  # $8.1: @AST_Call_Argument = new AST_Call_Argument(name = null, value_expression = value.1)
  mov [rbp-17], rax
  mov rdi, 16
  call malloc
  #     .name = null
  mov QWORD PTR [rax], 0
  #     .value_expression = value.1
  mov rbx, [rbp-17]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $8.1:rax 
  .loc 7 681 5
  # return($8.1)
  mov [rbp-17], rax
  jmp .LABEL__parse_call_argument_278__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_call_argument_278__end:
  mov rsp, rbp
  pop rbp
  ret

parse_call_argument_278__stack_frame_size: .word 32

  .loc 7 696 8
  .text
parse_primary_expression_279:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR parse_primary_expression_279__stack_frame_size[rip]
  sub rsp, rax
.LABEL__parse_primary_expression_279__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 697 9
  # $1.1: bool = call(matches_287, self.1, required_new)
  mov rsi, required_new[rip]
  mov [rbp-8], rdi
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__parse_primary_expression_279__2, .LABEL__parse_primary_expression_279__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__parse_primary_expression_279__3
.LABEL__parse_primary_expression_279__2:
  .loc 7 698 21
  # token.1: @Token = call(consume_283, self.1, required_new)
  mov rdi, [rbp-8]
  mov rsi, required_new[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:rax 
  .loc 7 699 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  mov [rbp-17], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] 
  .loc 7 700 20
  # type.1: @AST_Type = call(parse_type_266, self.1)
  mov rdi, [rbp-8]
  call parse_type_266
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:rax 
  .loc 7 701 30
  # call_arguments.1: @List = new List(first_item = null, last_item = null, size = 0)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  #     .first_item = null
  mov QWORD PTR [rax], 0
  #     .last_item = null
  mov QWORD PTR [rax+8], 0
  #     .size = 0
  mov QWORD PTR [rax+16], 0
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:rax 
  .loc 7 702 13
  # $5.1: bool = call(matches_288, self.1, optional_space, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_open_paren[rip]
  mov [rbp-33], rax
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:rax 
  # jump($5.1, .LABEL__parse_primary_expression_279__4, .LABEL__parse_primary_expression_279__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__parse_primary_expression_279__5
.LABEL__parse_primary_expression_279__4:
  .loc 7 703 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] 
  .loc 7 704 13
  # $6.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] 
  .loc 7 705 17
  # $7.1: bool = call(matches_288, self.1, optional_space, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_close_paren[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $7.1:rax 
  .loc 7 705 17
  # $8.1: bool = $7.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:rbx 
  # jump($8.1, .LABEL__parse_primary_expression_279__6, .LABEL__parse_primary_expression_279__7)
  test bl, bl
  mov [rbp-35], bl
  jz .LABEL__parse_primary_expression_279__7
.LABEL__parse_primary_expression_279__6:
  .loc 7 706 17
  # call(parse_call_arguments_277, self.1, call_arguments.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-33]
  call parse_call_arguments_277
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  # jump(.LABEL__parse_primary_expression_279__7)
.LABEL__parse_primary_expression_279__7:
  .loc 7 708 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  .loc 7 709 13
  # $9.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  # jump(.LABEL__parse_primary_expression_279__5)
.LABEL__parse_primary_expression_279__5:
  .loc 7 711 50
  # $10.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:rax:[rbp-17] type.1:[rbp-25] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] $10.1:rbx 
  .loc 7 711 16
  # $11.1: @AST_New_Expression = new AST_New_Expression(object_type = AST_New_Expression, location = $10.1, type = type.1, init_arguments = call_arguments.1, convert = anonymous_function_76_331.address)
  mov [rbp-43], rbx
  mov rdi, 40
  call malloc
  #     .object_type = AST_New_Expression
  mov rbx, AST_New_Expression[rip]
  mov [rax], rbx
  #     .location = $10.1
  mov rbx, [rbp-43]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_76_331.address
  lea r15, anonymous_function_76_331[rip]
  mov [rax+16], r15
  #     .type = type.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+24], r15
  #     .init_arguments = call_arguments.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: $10.1
  # [discarded value]: type.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:r14:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] $11.1:rax 
  .loc 7 711 9
  # return($11.1)
  mov [rbp-43], rax
  jmp .LABEL__parse_primary_expression_279__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:[rbp-33] $5.1:[rbp-34] $8.1:[rbp-35] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:[rbp-33] $5.1:[rbp-34] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] token.1:[rbp-17] call_arguments.1:[rbp-33] 
  # [discarded value]: call_arguments.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
.LABEL__parse_primary_expression_279__3:
  .loc 7 713 9
  # $12.1: bool = call(matches_287, self.1, required_literal)
  mov rdi, [rbp-8]
  mov rsi, required_literal[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:rax 
  # jump($12.1, .LABEL__parse_primary_expression_279__9, .LABEL__parse_primary_expression_279__10)
  test al, al
  mov [rbp-10], al
  jz .LABEL__parse_primary_expression_279__10
.LABEL__parse_primary_expression_279__9:
  .loc 7 714 21
  # token.1: @Literal_Token = call(consume_283, self.1, required_literal)
  mov rdi, [rbp-8]
  mov rsi, required_literal[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] token.1:rax 
  .loc 7 715 54
  # $15.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] token.1:rax $15.1:rbx 
  .loc 7 715 16
  # $16.1: @AST_Literal_Expression = new AST_Literal_Expression(object_type = AST_Literal_Expression, location = $15.1, literal = token.1, convert = anonymous_function_59_314.address)
  mov [rbp-18], rax
  mov [rbp-26], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Literal_Expression
  mov rbx, AST_Literal_Expression[rip]
  mov [rax], rbx
  #     .location = $15.1
  mov rbx, [rbp-26]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_59_314.address
  lea r15, anonymous_function_59_314[rip]
  mov [rax+16], r15
  #     .literal = token.1
  mov r15, [rbp-18]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $15.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $16.1:rax 
  .loc 7 715 9
  # return($16.1)
  mov [rbp-18], rax
  jmp .LABEL__parse_primary_expression_279__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] 
.LABEL__parse_primary_expression_279__10:
  .loc 7 717 9
  # $17.1: bool = call(matches_287, self.1, required_func)
  mov rdi, [rbp-8]
  mov rsi, required_func[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:rax 
  # jump($17.1, .LABEL__parse_primary_expression_279__12, .LABEL__parse_primary_expression_279__13)
  test al, al
  mov [rbp-11], al
  jz .LABEL__parse_primary_expression_279__13
.LABEL__parse_primary_expression_279__12:
  .loc 7 718 29
  # $18.1: @String = call(clone_391, "anonymous_function_")
  lea rdi, .LABEL__string_317[rip] # "anonymous_function_"
  call clone_391
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $18.1:rax 
  .loc 7 718 65
  # $19.1: @Counter = load_struct_member_address(self.1, anonymous_functions_counter)
  mov rbx, [rbp-8]
  mov r15, rbx
  add r15, 24
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $18.1:rax $19.1:r15 
  .loc 7 718 65
  # $20.1: isize = call(next_146, $19.1)
  mov rdi, r15
  mov [rbp-19], rax
  call next_146
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $18.1:[rbp-19] $20.1:rax 
  .loc 7 718 29
  # function_name.1: @String = call(append_399, $18.1, $20.1)
  mov rdi, [rbp-19]
  mov rsi, rax
  call append_399
  # [discarded value]: $20.1
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_name.1:rax 
  .loc 7 719 96
  # $22.1: @Scanner = load_struct_member(self.1, scanner)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_name.1:rax $22.1:r15 
  .loc 7 719 96
  # $23.1: @Token = load_struct_member($22.1, current_token)
  mov r14, [r15+32]
  # [discarded value]: $22.1
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_name.1:rax $23.1:r14 
  .loc 7 719 96
  # $24.1: @Source_Location = load_struct_member($23.1, location)
  mov r15, [r14+16]
  # [discarded value]: $23.1
  # [live values]: self.1:rbx:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_name.1:rax $24.1:r15 
  .loc 7 719 54
  # $25.1: @Generated_Identifier_Token = new Generated_Identifier_Token(object_type = Generated_Identifier_Token, location = $24.1, lexeme = function_name.1, next_token = null)
  mov [rbp-19], rax
  mov [rbp-27], r15
  mov rdi, 32
  call malloc
  #     .object_type = Generated_Identifier_Token
  mov rbx, Generated_Identifier_Token[rip]
  mov [rax], rbx
  #     .lexeme = function_name.1
  mov rbx, [rbp-19]
  mov QWORD PTR [rax+8], rbx
  #     .location = $24.1
  mov r15, [rbp-27]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: $24.1
  # [discarded value]: function_name.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $25.1:rax 
  .loc 7 719 34
  # function_statement.1: @AST_Function_Statement = call(parse_function_258, self.1, $25.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call parse_function_258
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_statement.1:rax 
  .loc 7 720 55
  # $27.1: @Source_Location = load_struct_member(function_statement.1, location)
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] function_statement.1:rax $27.1:rbx 
  .loc 7 720 16
  # $28.1: @AST_Function_Expression = new AST_Function_Expression(object_type = AST_Function_Expression, location = $27.1, function_statement = function_statement.1, convert = anonymous_function_77_332.address)
  mov [rbp-19], rax
  mov [rbp-27], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Function_Expression
  mov rbx, AST_Function_Expression[rip]
  mov [rax], rbx
  #     .location = $27.1
  mov rbx, [rbp-27]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_77_332.address
  lea r15, anonymous_function_77_332[rip]
  mov [rax+16], r15
  #     .function_statement = function_statement.1
  mov r15, [rbp-19]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $27.1
  # [discarded value]: function_statement.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $28.1:rax 
  .loc 7 720 9
  # return($28.1)
  mov [rbp-19], rax
  jmp .LABEL__parse_primary_expression_279__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] 
.LABEL__parse_primary_expression_279__13:
  .loc 7 722 9
  # $29.1: bool = call(matches_287, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:rax 
  # jump($29.1, .LABEL__parse_primary_expression_279__15, .LABEL__parse_primary_expression_279__16)
  test al, al
  mov [rbp-12], al
  jz .LABEL__parse_primary_expression_279__16
.LABEL__parse_primary_expression_279__15:
  .loc 7 723 21
  # token.1: @Identifier_Token = call(consume_283, self.1, required_identifier)
  mov rdi, [rbp-8]
  mov rsi, required_identifier[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] token.1:rax 
  .loc 7 724 55
  # $32.1: @Source_Location = load_struct_member(token.1, location)
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] token.1:rax $32.1:rbx 
  .loc 7 724 16
  # $33.1: @AST_Variable_Expression = new AST_Variable_Expression(object_type = AST_Variable_Expression, location = $32.1, name = token.1, convert = anonymous_function_60_315.address)
  mov [rbp-20], rax
  mov [rbp-28], rbx
  mov rdi, 32
  call malloc
  #     .object_type = AST_Variable_Expression
  mov rbx, AST_Variable_Expression[rip]
  mov [rax], rbx
  #     .location = $32.1
  mov rbx, [rbp-28]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_60_315.address
  lea r15, anonymous_function_60_315[rip]
  mov [rax+16], r15
  #     .name = token.1
  mov r15, [rbp-20]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $32.1
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $33.1:rax 
  .loc 7 724 9
  # return($33.1)
  mov [rbp-20], rax
  jmp .LABEL__parse_primary_expression_279__end
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] 
.LABEL__parse_primary_expression_279__16:
  .loc 7 726 9
  # $34.1: bool = call(matches_287, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:rax 
  # jump($34.1, .LABEL__parse_primary_expression_279__18, .LABEL__parse_primary_expression_279__19)
  test al, al
  mov [rbp-13], al
  jz .LABEL__parse_primary_expression_279__19
.LABEL__parse_primary_expression_279__18:
  .loc 7 727 24
  # $35.1: @Token = call(consume_283, self.1, required_open_paren)
  mov rdi, [rbp-8]
  mov rsi, required_open_paren[rip]
  call consume_283
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] $35.1:rax 
  .loc 7 727 24
  # location.1: @Source_Location = load_struct_member($35.1, location)
  mov rbx, [rax+16]
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] location.1:rbx 
  .loc 7 728 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-21], rbx
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] location.1:[rbp-21] 
  .loc 7 729 26
  # expression.1: @AST_Expression = call(parse_expression_267, self.1)
  mov rdi, [rbp-8]
  call parse_expression_267
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] location.1:[rbp-21] expression.1:rax 
  .loc 7 730 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  mov [rbp-29], rax
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] location.1:[rbp-21] expression.1:[rbp-29] 
  .loc 7 731 9
  # $38.1: @Token = call(consume_283, self.1, required_close_paren)
  mov rdi, [rbp-8]
  mov rsi, required_close_paren[rip]
  call consume_283
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] location.1:[rbp-21] expression.1:[rbp-29] 
  .loc 7 732 16
  # $39.1: @AST_Atomic_Expression = new AST_Atomic_Expression(object_type = AST_Atomic_Expression, location = location.1, expression = expression.1, convert = anonymous_function_58_313.address)
  mov rdi, 32
  call malloc
  #     .object_type = AST_Atomic_Expression
  mov rbx, AST_Atomic_Expression[rip]
  mov [rax], rbx
  #     .location = location.1
  mov rbx, [rbp-21]
  mov QWORD PTR [rax+8], rbx
  #     .convert = anonymous_function_58_313.address
  lea r15, anonymous_function_58_313[rip]
  mov [rax+16], r15
  #     .expression = expression.1
  mov r15, [rbp-29]
  mov QWORD PTR [rax+24], r15
  # [discarded value]: expression.1
  # [discarded value]: location.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] $39.1:rax 
  .loc 7 732 9
  # return($39.1)
  mov [rbp-21], rax
  jmp .LABEL__parse_primary_expression_279__end
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] 
.LABEL__parse_primary_expression_279__19:
  .loc 7 734 5
  # return(null)
  xor rax, rax
  jmp .LABEL__parse_primary_expression_279__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] $34.1:[rbp-13] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] $29.1:[rbp-12] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] $17.1:[rbp-11] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $12.1:[rbp-10] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__parse_primary_expression_279__end:
  mov rsp, rbp
  pop rbp
  ret

parse_primary_expression_279__stack_frame_size: .word 48

  .loc 7 741 8
  .text
consume_end_of_line_280:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_end_of_line_280__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_end_of_line_280__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 742 9
  # $1.1: bool = call(matches_288, self.1, optional_space, required_comment)
  mov rsi, optional_space[rip]
  mov rdx, required_comment[rip]
  mov [rbp-8], rdi
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__consume_end_of_line_280__2, .LABEL__consume_end_of_line_280__4)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_end_of_line_280__4
.LABEL__consume_end_of_line_280__2:
  .loc 7 743 9
  # call(consume_space_282, self.1, 1)
  mov rdi, [rbp-8]
  mov rsi, 1
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  .loc 7 744 9
  # $2.1: @Token = call(consume_283, self.1, required_comment)
  mov rdi, [rbp-8]
  mov rsi, required_comment[rip]
  call consume_283
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_280__3)
.LABEL__consume_end_of_line_280__3:
  .loc 7 748 9
  # $3.1: bool = call(matches_287, self.1, required_end_of_file)
  mov rdi, [rbp-8]
  mov rsi, required_end_of_file[rip]
  call matches_287
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $3.1:rax 
  .loc 7 748 9
  # $4.1: bool = $3.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $4.1:rbx 
  # jump($4.1, .LABEL__consume_end_of_line_280__5, .LABEL__consume_end_of_line_280__6)
  test bl, bl
  mov [rbp-10], bl
  jz .LABEL__consume_end_of_line_280__6
.LABEL__consume_end_of_line_280__5:
  .loc 7 749 9
  # $5.1: @Token = call(consume_283, self.1, required_end_of_line)
  mov rdi, [rbp-8]
  mov rsi, required_end_of_line[rip]
  call consume_283
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $4.1:[rbp-10] 
  # jump(.LABEL__consume_end_of_line_280__6)
.LABEL__consume_end_of_line_280__6:
  # return()
  jmp .LABEL__consume_end_of_line_280__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $4.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
.LABEL__consume_end_of_line_280__4:
  .loc 7 746 9
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # jump(.LABEL__consume_end_of_line_280__3)
  jmp .LABEL__consume_end_of_line_280__3
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_end_of_line_280__end:
  mov rsp, rbp
  pop rbp
  ret

consume_end_of_line_280__stack_frame_size: .word 16

  .loc 7 753 8
  .text
consume_empty_line_281:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_empty_line_281__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_empty_line_281__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 754 9
  # $1.1: bool = call(matches_289, self.1, optional_space, optional_comment, required_end_of_line)
  mov rsi, optional_space[rip]
  mov rdx, optional_comment[rip]
  mov rcx, required_end_of_line[rip]
  mov [rbp-8], rdi
  call matches_289
  # [live values]: self.1:[rbp-8] $1.1:rax 
  # jump($1.1, .LABEL__consume_empty_line_281__2, .LABEL__consume_empty_line_281__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__consume_empty_line_281__3
.LABEL__consume_empty_line_281__2:
  .loc 7 755 13
  # $2.1: bool = call(matches_288, self.1, optional_space, required_comment)
  mov rdi, [rbp-8]
  mov rsi, optional_space[rip]
  mov rdx, required_comment[rip]
  call matches_288
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:rax 
  # jump($2.1, .LABEL__consume_empty_line_281__4, .LABEL__consume_empty_line_281__6)
  test al, al
  mov [rbp-10], al
  jz .LABEL__consume_empty_line_281__6
.LABEL__consume_empty_line_281__4:
  .loc 7 756 32
  # $3.1: isize = load_struct_member(self.1, current_alignment)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] $3.1:rbx 
  .loc 7 756 32
  # $4.1: isize = $3.1 * 4
  mov r15, rbx
  imul r15, 4
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] $4.1:r15 
  .loc 7 756 13
  # call(consume_space_282, self.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call consume_space_282
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  .loc 7 757 13
  # $5.1: @Token = call(consume_283, self.1, required_comment)
  mov rdi, [rbp-8]
  mov rsi, required_comment[rip]
  call consume_283
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_281__5)
.LABEL__consume_empty_line_281__5:
  .loc 7 761 9
  # $6.1: @Token = call(consume_283, self.1, required_end_of_line)
  mov rdi, [rbp-8]
  mov rsi, required_end_of_line[rip]
  call consume_283
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  .loc 7 762 9
  # return(true)
  mov al, 1
  jmp .LABEL__consume_empty_line_281__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
.LABEL__consume_empty_line_281__6:
  .loc 7 759 13
  # call(consume_space_282, self.1, 0)
  mov rdi, [rbp-8]
  xor rsi, rsi
  call consume_space_282
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  # jump(.LABEL__consume_empty_line_281__5)
  jmp .LABEL__consume_empty_line_281__5
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] $2.1:[rbp-10] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
.LABEL__consume_empty_line_281__3:
  .loc 7 764 5
  # return(false)
  mov al, 0
  jmp .LABEL__consume_empty_line_281__end
  # [live values]: self.1:[rbp-8] $1.1:[rbp-9] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_empty_line_281__end:
  mov rsp, rbp
  pop rbp
  ret

consume_empty_line_281__stack_frame_size: .word 16

  .loc 7 767 8
  .text
consume_space_282:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_space_282__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_space_282__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # expected_space_count.1: isize = load_variable(expected_space_count)
  # [live values]: self.1:rdi expected_space_count.1:rsi 
  .loc 7 769 17
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi expected_space_count.1:rsi $1.1:rax 
  .loc 7 769 17
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi expected_space_count.1:rsi token.1:rbx 
  .loc 7 770 9
  # $3.1: bool = call(is_389, token.1, Space_Token)
  mov [rbp-8], rdi
  mov rdi, rbx
  mov [rbp-16], rsi
  mov rsi, Space_Token[rip]
  mov [rbp-24], rbx
  call is_389
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:rax 
  # jump($3.1, .LABEL__consume_space_282__2, .LABEL__consume_space_282__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__consume_space_282__4
.LABEL__consume_space_282__2:
  .loc 7 771 9
  # $4.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] $4.1:rbx 
  .loc 7 771 9
  # $5.1: @Token = call(next_token_344, $4.1)
  mov rdi, rbx
  call next_token_344
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  .loc 7 772 21
  # space.1: @Space_Token = token.1
  mov rax, [rbp-24]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space.1:rax 
  .loc 7 773 23
  # space_count.3: isize = load_struct_member(space.1, count)
  mov rbx, [rax+32]
  # [discarded value]: space.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:rbx 
  # jump(.LABEL__consume_space_282__3)
  mov [rbp-33], rbx
.LABEL__consume_space_282__3:
  # space_count.4: isize = phi(space_count.2, space_count.3)
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  .loc 7 777 9
  # $8.1: bool = space_count.4 != expected_space_count.1
  mov rax, [rbp-33]
  cmp rax, QWORD PTR [rbp-16]
  setne bl
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:rax:[rbp-33] $8.1:rbx 
  # jump($8.1, .LABEL__consume_space_282__5, .LABEL__consume_space_282__6)
  test bl, bl
  mov [rbp-34], bl
  jz .LABEL__consume_space_282__6
.LABEL__consume_space_282__5:
  .loc 7 778 22
  # $9.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:rax:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $9.1:rbx 
  .loc 7 778 9
  # $10.1: @FILE = call(write_363, stderr, $9.1)
  mov rdi, stderr[rip]
  mov rsi, rbx
  call write_363
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $10.1:rax 
  .loc 7 778 9
  # $11.1: @FILE = call(write_383, $10.1, ": Consumed ")
  mov rdi, rax
  lea rsi, .LABEL__string_318[rip] # ": Consumed "
  call write_383
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $11.1:rax 
  .loc 7 778 9
  # $12.1: @FILE = call(write_382, $11.1, space_count.4)
  mov rdi, rax
  mov rsi, [rbp-33]
  call write_382
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $12.1:rax 
  .loc 7 778 9
  # $13.1: @FILE = call(write_383, $12.1, " spaces where ")
  mov rdi, rax
  lea rsi, .LABEL__string_319[rip] # " spaces where "
  call write_383
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $13.1:rax 
  .loc 7 778 9
  # $14.1: @FILE = call(write_382, $13.1, expected_space_count.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_382
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $14.1:rax 
  .loc 7 778 9
  # $15.1: @FILE = call(write_383, $14.1, " are expected")
  mov rdi, rax
  lea rsi, .LABEL__string_320[rip] # " are expected"
  call write_383
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] $15.1:rax 
  .loc 7 778 9
  # $16.1: @FILE = call(end_line_386, $15.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # jump(.LABEL__consume_space_282__6)
.LABEL__consume_space_282__6:
  # return()
  jmp .LABEL__consume_space_282__end
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] space_count.4:[rbp-33] 
  # [discarded value]: space_count.4
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.3:[rbp-33] 
  # [discarded value]: space_count.3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
.LABEL__consume_space_282__4:
  .loc 7 775 9
  # space_count.2: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:rax:[rbp-33] 
  # jump(.LABEL__consume_space_282__3)
  mov [rbp-33], rax
  jmp .LABEL__consume_space_282__3
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] space_count.2:[rbp-33] 
  # [discarded value]: space_count.2
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] $3.1:[rbp-25] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] expected_space_count.1:[rbp-16] token.1:[rbp-24] 
  # [discarded value]: token.1
  # [discarded value]: expected_space_count.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_space_282__end:
  mov rsp, rbp
  pop rbp
  ret

consume_space_282__stack_frame_size: .word 48

  .loc 7 782 8
  .text
consume_283:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_283__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_283__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 783 12
  # $1.1: @Token = call(consume_284, self.1, first_matcher.1, null)
  xor rdx, rdx
  call consume_284
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 783 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_283__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_283__end:
  mov rsp, rbp
  pop rbp
  ret

consume_283__stack_frame_size: .word 16

  .loc 7 786 8
  .text
consume_284:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_284__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_284__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 787 12
  # $1.1: @Token = call(consume_285, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call consume_285
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 787 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__consume_284__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__consume_284__end:
  mov rsp, rbp
  pop rbp
  ret

consume_284__stack_frame_size: .word 16

  .loc 7 790 8
  .text
consume_285:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR consume_285__stack_frame_size[rip]
  sub rsp, rax
.LABEL__consume_285__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 791 17
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 791 17
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 792 9
  # first_token.1: @Token = token.1
  mov [rbp-8], rbx
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:[rbp-8] first_token.1:rbx 
  .loc 7 793 9
  # $3.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(first_matcher.1, accepts)
  mov rax, [rsi+9]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:[rbp-8] first_token.1:rbx $3.1:rax 
  .loc 7 793 9
  # $4.1: bool = call($3.1, first_matcher.1, token.1)
  mov [rbp-16], rdi
  mov rdi, rsi
  mov [rbp-24], rsi
  mov rsi, [rbp-8]
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:rax 
  # jump($4.1, .LABEL__consume_285__2, .LABEL__consume_285__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__consume_285__4
.LABEL__consume_285__2:
  .loc 7 794 17
  # $6.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] $6.1:rbx 
  .loc 7 794 17
  # token.3: @Token = call(next_token_344, $6.1)
  mov rdi, rbx
  call next_token_344
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:rax:[rbp-8] 
  # jump(.LABEL__consume_285__3)
  mov [rbp-8], rax
.LABEL__consume_285__3:
  # token.10: @Token = phi(token.3, token.1)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  .loc 7 800 9
  # $8.1: bool = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:rax 
  # jump($8.1, .LABEL__consume_285__7, .LABEL__consume_285__8)
  test al, al
  mov [rbp-50], al
  jz .LABEL__consume_285__8
.LABEL__consume_285__7:
  .loc 7 801 13
  # $9.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(second_matcher.1, accepts)
  mov rax, [rbp-40]
  mov rbx, [rax+9]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $9.1:rbx 
  .loc 7 801 13
  # $10.1: bool = call($9.1, second_matcher.1, token.10)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rax, rbx
  call rax
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:rax 
  # jump($10.1, .LABEL__consume_285__9, .LABEL__consume_285__11)
  test al, al
  mov [rbp-51], al
  jz .LABEL__consume_285__11
.LABEL__consume_285__9:
  .loc 7 802 21
  # $12.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] $12.1:rbx 
  .loc 7 802 21
  # token.6: @Token = call(next_token_344, $12.1)
  mov rdi, rbx
  call next_token_344
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.6:rax:[rbp-8] 
  # jump(.LABEL__consume_285__8)
  mov [rbp-8], rax
.LABEL__consume_285__8:
  # token.11: @Token = phi(token.10, token.6)
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  .loc 7 809 9
  # $14.1: bool = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:rax token.6:[rbp-8] 
  # jump($14.1, .LABEL__consume_285__14, .LABEL__consume_285__15)
  test al, al
  mov [rbp-52], al
  jz .LABEL__consume_285__15
.LABEL__consume_285__14:
  .loc 7 810 13
  # $15.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(third_matcher.1, accepts)
  mov rax, [rbp-32]
  mov rbx, [rax+9]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $15.1:rbx 
  .loc 7 810 13
  # $16.1: bool = call($15.1, third_matcher.1, token.11)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov rax, rbx
  call rax
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:rax 
  # jump($16.1, .LABEL__consume_285__16, .LABEL__consume_285__18)
  test al, al
  mov [rbp-53], al
  jz .LABEL__consume_285__18
.LABEL__consume_285__16:
  .loc 7 811 21
  # $18.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] $18.1:rbx 
  .loc 7 811 21
  # token.9: @Token = call(next_token_344, $18.1)
  mov rdi, rbx
  call next_token_344
  # [discarded value]: token.9
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] 
  # jump(.LABEL__consume_285__15)
.LABEL__consume_285__15:
  .loc 7 818 5
  # return(first_token.1)
  mov rax, [rbp-48]
  jmp .LABEL__consume_285__end
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] 
.LABEL__consume_285__18:
  .loc 7 813 17
  # $17.1: bool = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] $17.1:rbx 
  # jump($17.1, .LABEL__consume_285__19, .LABEL__consume_285__15)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__consume_285__15
.LABEL__consume_285__19:
  .loc 7 814 17
  # call(abort_301, self.1, token.11)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_301
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] $17.1:[rbp-54] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] $16.1:[rbp-53] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] $14.1:[rbp-52] token.6:[rbp-8] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.11:[rbp-8] token.6:[rbp-8] 
  # [discarded value]: token.11
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.6:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] token.6:[rbp-8] 
  # [discarded value]: token.6
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] 
.LABEL__consume_285__11:
  .loc 7 804 17
  # $11.1: bool = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] $11.1:rbx 
  # jump($11.1, .LABEL__consume_285__12, .LABEL__consume_285__8)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__consume_285__8
.LABEL__consume_285__12:
  .loc 7 805 17
  # call(abort_301, self.1, token.10)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_301
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] $11.1:[rbp-52] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] $10.1:[rbp-51] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] $8.1:[rbp-50] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] token.10:[rbp-8] 
  # [discarded value]: token.10
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] 
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] token.3:[rbp-8] 
  # [discarded value]: token.3
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] 
.LABEL__consume_285__4:
  .loc 7 796 13
  # $5.1: bool = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-24]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-16] first_matcher.1:rax:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] $5.1:rbx 
  # jump($5.1, .LABEL__consume_285__5, .LABEL__consume_285__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__consume_285__3
.LABEL__consume_285__5:
  .loc 7 797 13
  # call(abort_301, self.1, token.1)
  mov rdi, [rbp-16]
  mov rsi, [rbp-8]
  call abort_301
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] $5.1:[rbp-50] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] $4.1:[rbp-49] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] first_matcher.1:[rbp-24] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-8] first_token.1:[rbp-48] 
  # [discarded value]: first_token.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__consume_285__end:
  mov rsp, rbp
  pop rbp
  ret

consume_285__stack_frame_size: .word 64

  .loc 7 821 8
  .text
matches_end_of_line_286:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_end_of_line_286__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_end_of_line_286__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 7 822 12
  # $1.1: bool = call(matches_289, self.1, optional_space, optional_comment, required_end_of_line)
  mov rsi, optional_space[rip]
  mov rdx, optional_comment[rip]
  mov rcx, required_end_of_line[rip]
  call matches_289
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 822 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_end_of_line_286__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_end_of_line_286__end:
  mov rsp, rbp
  pop rbp
  ret

matches_end_of_line_286__stack_frame_size: .word 16

  .loc 7 825 8
  .text
matches_287:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_287__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_287__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  .loc 7 826 12
  # $1.1: bool = call(matches_288, self.1, first_matcher.1, null)
  xor rdx, rdx
  call matches_288
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 826 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_287__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_287__end:
  mov rsp, rbp
  pop rbp
  ret

matches_287__stack_frame_size: .word 16

  .loc 7 829 8
  .text
matches_288:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_288__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_288__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  .loc 7 830 12
  # $1.1: bool = call(matches_289, self.1, first_matcher.1, second_matcher.1, null)
  xor rcx, rcx
  call matches_289
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 7 830 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__matches_288__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__matches_288__end:
  mov rsp, rbp
  pop rbp
  ret

matches_288__stack_frame_size: .word 16

  .loc 7 833 8
  .text
matches_289:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR matches_289__stack_frame_size[rip]
  sub rsp, rax
.LABEL__matches_289__1:
  # self.1: @Parser = load_variable(self)
  # [live values]: self.1:rdi 
  # first_matcher.1: @Matcher = load_variable(first_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi 
  # second_matcher.1: @Matcher = load_variable(second_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx 
  # third_matcher.1: @Matcher = load_variable(third_matcher)
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx 
  .loc 7 834 17
  # $1.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rdi]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx $1.1:rax 
  .loc 7 834 17
  # token.1: @Token = load_struct_member($1.1, current_token)
  mov rbx, [rax+32]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx 
  .loc 7 835 9
  # peek_offset.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax 
  .loc 7 836 9
  # $3.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(first_matcher.1, accepts)
  mov r15, [rsi+9]
  # [live values]: self.1:rdi first_matcher.1:rsi second_matcher.1:rdx third_matcher.1:rcx token.1:rbx peek_offset.1:rax $3.1:r15 
  .loc 7 836 9
  # $4.1: bool = call($3.1, first_matcher.1, token.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, rbx
  mov [rbp-24], rax
  mov rax, r15
  mov [rbp-32], rcx
  mov [rbp-40], rdx
  mov [rbp-48], rbx
  call rax
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:rax 
  # jump($4.1, .LABEL__matches_289__2, .LABEL__matches_289__4)
  test al, al
  mov [rbp-49], al
  jz .LABEL__matches_289__4
.LABEL__matches_289__2:
  .loc 7 837 17
  # $6.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] $6.1:rbx 
  .loc 7 837 17
  # token.2: @Token = call(peek_token_343, $6.1, peek_offset.1)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_343
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:rax:[rbp-48] 
  .loc 7 838 23
  # $8.1: isize = peek_offset.1 + 1
  mov rbx, [rbp-24]
  inc rbx
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:rax:[rbp-48] $8.1:rbx 
  .loc 7 838 9
  # peek_offset.3: isize = $8.1
  mov [rbp-57], rbx
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:rax:[rbp-48] peek_offset.3:rbx:[rbp-24] 
  # jump(.LABEL__matches_289__3)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_289__3:
  # peek_offset.8: isize = phi(peek_offset.3, peek_offset.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] 
  # token.7: @Token = phi(token.2, token.1)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  .loc 7 842 9
  # $9.1: bool = second_matcher.1 != null
  cmp QWORD PTR [rbp-40], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:rax 
  # jump($9.1, .LABEL__matches_289__8, .LABEL__matches_289__9)
  test al, al
  mov [rbp-50], al
  jz .LABEL__matches_289__9
.LABEL__matches_289__8:
  .loc 7 843 13
  # $10.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(second_matcher.1, accepts)
  mov rax, [rbp-40]
  mov rbx, [rax+9]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $10.1:rbx 
  .loc 7 843 13
  # $11.1: bool = call($10.1, second_matcher.1, token.7)
  mov rdi, rax
  mov rsi, [rbp-48]
  mov rax, rbx
  call rax
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:rax 
  # jump($11.1, .LABEL__matches_289__10, .LABEL__matches_289__12)
  test al, al
  mov [rbp-51], al
  jz .LABEL__matches_289__12
.LABEL__matches_289__10:
  .loc 7 844 21
  # $13.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] $13.1:rbx 
  .loc 7 844 21
  # token.4: @Token = call(peek_token_343, $13.1, peek_offset.8)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_343
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] token.4:rax:[rbp-48] 
  .loc 7 845 27
  # $15.1: isize = peek_offset.8 + 1
  mov rbx, [rbp-24]
  inc rbx
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] token.4:rax:[rbp-48] $15.1:rbx 
  .loc 7 845 13
  # peek_offset.5: isize = $15.1
  mov [rbp-59], rbx
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] token.4:rax:[rbp-48] peek_offset.5:rbx:[rbp-24] 
  # jump(.LABEL__matches_289__9)
  mov [rbp-48], rax
  mov [rbp-24], rbx
.LABEL__matches_289__9:
  # peek_offset.9: isize = phi(peek_offset.8, peek_offset.5)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # token.8: @Token = phi(token.7, token.4)
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  .loc 7 850 9
  # $16.1: bool = third_matcher.1 != null
  cmp QWORD PTR [rbp-32], 0
  setne al
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:rax token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # jump($16.1, .LABEL__matches_289__16, .LABEL__matches_289__17)
  test al, al
  mov [rbp-52], al
  jz .LABEL__matches_289__17
.LABEL__matches_289__16:
  .loc 7 851 13
  # $17.1: func (self: @Matcher, token: @Token) -> bool = load_struct_member(third_matcher.1, accepts)
  mov rax, [rbp-32]
  mov rbx, [rax+9]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $17.1:rbx 
  .loc 7 851 13
  # $18.1: bool = call($17.1, third_matcher.1, token.8)
  mov rdi, rax
  mov rsi, [rbp-48]
  mov rax, rbx
  call rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:rax 
  # jump($18.1, .LABEL__matches_289__18, .LABEL__matches_289__20)
  test al, al
  mov [rbp-53], al
  jz .LABEL__matches_289__20
.LABEL__matches_289__18:
  .loc 7 852 21
  # $20.1: @Scanner = load_struct_member(self.1, scanner)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] $20.1:rbx 
  .loc 7 852 21
  # token.6: @Token = call(peek_token_343, $20.1, peek_offset.9)
  mov rdi, rbx
  mov rsi, [rbp-24]
  call peek_token_343
  # [discarded value]: token.6
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] 
  .loc 7 853 27
  # $22.1: isize = peek_offset.9 + 1
  mov rax, [rbp-24]
  inc rax
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] $22.1:rax 
  .loc 7 853 13
  # peek_offset.7: isize = $22.1
  mov [rbp-61], rax
  # [discarded value]: peek_offset.7
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] 
  # jump(.LABEL__matches_289__17)
.LABEL__matches_289__17:
  .loc 7 858 5
  # return(true)
  mov al, 1
  jmp .LABEL__matches_289__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] 
.LABEL__matches_289__20:
  .loc 7 854 20
  # $19.1: bool = load_struct_member(third_matcher.1, is_required)
  mov rax, [rbp-32]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:rax:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] $19.1:rbx 
  # jump($19.1, .LABEL__matches_289__21, .LABEL__matches_289__17)
  test bl, bl
  mov [rbp-54], bl
  jz .LABEL__matches_289__17
.LABEL__matches_289__21:
  .loc 7 855 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_289__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] $19.1:[rbp-54] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] $18.1:[rbp-53] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] $16.1:[rbp-52] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] peek_offset.9:[rbp-24] token.8:[rbp-48] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: token.8
  # [discarded value]: peek_offset.9
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] token.4:[rbp-48] peek_offset.5:[rbp-24] 
  # [discarded value]: peek_offset.5
  # [discarded value]: token.4
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] 
.LABEL__matches_289__12:
  .loc 7 846 20
  # $12.1: bool = load_struct_member(second_matcher.1, is_required)
  mov rax, [rbp-40]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:rax:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] $12.1:rbx 
  # jump($12.1, .LABEL__matches_289__13, .LABEL__matches_289__9)
  test bl, bl
  mov [rbp-52], bl
  jz .LABEL__matches_289__9
.LABEL__matches_289__13:
  .loc 7 847 13
  # return(false)
  mov al, 0
  jmp .LABEL__matches_289__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] $12.1:[rbp-52] 
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] $11.1:[rbp-51] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] $9.1:[rbp-50] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] peek_offset.8:[rbp-24] token.7:[rbp-48] 
  # [discarded value]: token.7
  # [discarded value]: peek_offset.8
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] token.2:[rbp-48] peek_offset.3:[rbp-24] 
  # [discarded value]: peek_offset.3
  # [discarded value]: token.2
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] 
.LABEL__matches_289__4:
  .loc 7 839 16
  # $5.1: bool = load_struct_member(first_matcher.1, is_required)
  mov rax, [rbp-16]
  mov bl, [rax+8]
  # [live values]: self.1:[rbp-8] first_matcher.1:rax:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] $5.1:rbx 
  # jump($5.1, .LABEL__matches_289__5, .LABEL__matches_289__3)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__matches_289__3
.LABEL__matches_289__5:
  .loc 7 840 9
  # return(false)
  mov al, 0
  jmp .LABEL__matches_289__end
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] $5.1:[rbp-50] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] $4.1:[rbp-49] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] first_matcher.1:[rbp-16] second_matcher.1:[rbp-40] third_matcher.1:[rbp-32] token.1:[rbp-48] peek_offset.1:[rbp-24] 
  # [discarded value]: peek_offset.1
  # [discarded value]: token.1
  # [discarded value]: third_matcher.1
  # [discarded value]: second_matcher.1
  # [discarded value]: first_matcher.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__matches_289__end:
  mov rsp, rbp
  pop rbp
  ret

matches_289__stack_frame_size: .word 64

  .loc 7 864 59
  .text
anonymous_function_37_290:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_37_290__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_37_290__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 865 15
  # $1.1: @Source_Location = load_struct_member(token.1, location)
  mov rax, [rsi+16]
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 865 9
  # call(abort_360, $1.1, "Invalid state")
  mov rdi, rax
  lea rsi, .LABEL__string_47[rip] # "Invalid state"
  call abort_360
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_37_290__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_37_290__stack_frame_size: .word 0

  .loc 7 871 19
  .text
anonymous_function_38_291:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_38_291__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_38_291__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 872 20
  # $1.1: bool = call(is_389, token.1, Comment_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, Comment_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 872 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_38_291__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_38_291__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_38_291__stack_frame_size: .word 16

  .loc 7 879 19
  .text
anonymous_function_39_292:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_39_292__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_39_292__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 880 20
  # $1.1: bool = call(is_389, token.1, End_Of_File_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, End_Of_File_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 880 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_39_292__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_39_292__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_39_292__stack_frame_size: .word 16

  .loc 7 887 19
  .text
anonymous_function_40_293:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_40_293__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_40_293__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 888 20
  # $1.1: bool = call(is_389, token.1, End_Of_Line_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, End_Of_Line_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 888 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_40_293__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_40_293__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_40_293__stack_frame_size: .word 16

  .loc 7 895 19
  .text
anonymous_function_41_294:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_41_294__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_41_294__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 896 20
  # $1.1: bool = call(is_389, token.1, Identifier_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, Identifier_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 896 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_41_294__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_41_294__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_41_294__stack_frame_size: .word 16

  .loc 7 903 19
  .text
anonymous_function_42_295:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_42_295__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_42_295__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  .loc 7 904 17
  # $1.1: bool = call(is_389, token.1, Identifier_Token)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, Identifier_Token[rip]
  call is_389
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__anonymous_function_42_295__2, .LABEL__anonymous_function_42_295__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__anonymous_function_42_295__3
.LABEL__anonymous_function_42_295__2:
  .loc 7 905 24
  # $2.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx 
  .loc 7 905 45
  # $3.1: @Keyword_Matcher = self.1
  mov r15, [rbp-8]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx $3.1:r15 
  .loc 7 905 44
  # $4.1: @String = load_struct_member($3.1, lexeme)
  mov r14, [r15+17]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx $4.1:r14 
  .loc 7 905 24
  # $5.1: bool = call(equals_392, $2.1, $4.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_392
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 7 905 17
  # return($5.1)
  mov [rbp-18], al
  jmp .LABEL__anonymous_function_42_295__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__anonymous_function_42_295__3:
  .loc 7 907 13
  # return(false)
  mov al, 0
  jmp .LABEL__anonymous_function_42_295__end
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # [discarded value]: token.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__anonymous_function_42_295__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_42_295__stack_frame_size: .word 32

  .loc 7 915 19
  .text
anonymous_function_43_296:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_43_296__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_43_296__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 916 20
  # $2.1: bool = call(is_389, token.1, Integer_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, Integer_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__anonymous_function_43_296__11, .LABEL__anonymous_function_43_296__10)
  test al, al
  mov [rbp-9], al
  jz .LABEL__anonymous_function_43_296__10
.LABEL__anonymous_function_43_296__11:
  .loc 7 916 20
  # $4.1: bool = phi($2.1, $2.2)
  mov al, [rbp-9]
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.1:rax 
  # jump($4.1, .LABEL__anonymous_function_43_296__9, .LABEL__anonymous_function_43_296__8)
  test al, al
  mov [rbp-10], al
  jz .LABEL__anonymous_function_43_296__8
.LABEL__anonymous_function_43_296__9:
  .loc 7 916 20
  # $6.1: bool = phi($4.1, $4.2)
  mov al, [rbp-10]
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.1:rax $4.1:[rbp-10] 
  # jump($6.1, .LABEL__anonymous_function_43_296__7, .LABEL__anonymous_function_43_296__6)
  test al, al
  mov [rbp-11], al
  jz .LABEL__anonymous_function_43_296__6
.LABEL__anonymous_function_43_296__7:
  .loc 7 916 20
  # $8.1: bool = phi($6.1, $6.2)
  mov al, [rbp-11]
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.1:rax $6.1:[rbp-11] $4.1:[rbp-10] 
  # jump($8.1, .LABEL__anonymous_function_43_296__5, .LABEL__anonymous_function_43_296__4)
  test al, al
  mov [rbp-12], al
  jz .LABEL__anonymous_function_43_296__4
.LABEL__anonymous_function_43_296__5:
  .loc 7 916 20
  # $10.1: bool = phi($8.1, $8.2)
  mov al, [rbp-12]
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.1:rax $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # jump($10.1, .LABEL__anonymous_function_43_296__3, .LABEL__anonymous_function_43_296__2)
  test al, al
  mov [rbp-13], al
  jz .LABEL__anonymous_function_43_296__2
.LABEL__anonymous_function_43_296__3:
  .loc 7 916 20
  # $10.3: bool = phi($10.1, $10.2)
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.3:[rbp-13] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  .loc 7 916 13
  # return($10.3)
  mov al, [rbp-13]
  jmp .LABEL__anonymous_function_43_296__end
  # [discarded value]: $10.3
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
.LABEL__anonymous_function_43_296__2:
  .loc 7 916 153
  # $10.2: bool = call(is_389, token.1, Undefined_Token)
  mov rdi, [rbp-8]
  mov rsi, Undefined_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.2:rax:[rbp-13] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # jump(.LABEL__anonymous_function_43_296__3)
  mov [rbp-13], al
  jmp .LABEL__anonymous_function_43_296__3
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.2:[rbp-13] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $10.2
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $10.1:[rbp-13] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $10.1
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
.LABEL__anonymous_function_43_296__4:
  .loc 7 916 129
  # $8.2: bool = call(is_389, token.1, Null_Token)
  mov rdi, [rbp-8]
  mov rsi, Null_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.2:rax:[rbp-12] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # jump(.LABEL__anonymous_function_43_296__5)
  mov [rbp-12], al
  jmp .LABEL__anonymous_function_43_296__5
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.2:[rbp-12] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $8.2
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $8.1:[rbp-12] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $8.1
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-11] $4.1:[rbp-10] 
.LABEL__anonymous_function_43_296__6:
  .loc 7 916 102
  # $6.2: bool = call(is_389, token.1, Boolean_Token)
  mov rdi, [rbp-8]
  mov rsi, Boolean_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.2:rax:[rbp-11] $6.1:[rbp-11] $4.1:[rbp-10] 
  # jump(.LABEL__anonymous_function_43_296__7)
  mov [rbp-11], al
  jmp .LABEL__anonymous_function_43_296__7
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.2:[rbp-11] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $6.2
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $6.1:[rbp-11] $4.1:[rbp-10] 
  # [discarded value]: $6.1
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-10] 
.LABEL__anonymous_function_43_296__8:
  .loc 7 916 73
  # $4.2: bool = call(is_389, token.1, Character_Token)
  mov rdi, [rbp-8]
  mov rsi, Character_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.2:rax:[rbp-10] $4.1:[rbp-10] 
  # jump(.LABEL__anonymous_function_43_296__9)
  mov [rbp-10], al
  jmp .LABEL__anonymous_function_43_296__9
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.2:[rbp-10] $4.1:[rbp-10] 
  # [discarded value]: $4.2
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-10] 
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] 
.LABEL__anonymous_function_43_296__10:
  .loc 7 916 47
  # $2.2: bool = call(is_389, token.1, String_Token)
  mov rdi, [rbp-8]
  mov rsi, String_Token[rip]
  call is_389
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $2.2:rax:[rbp-9] 
  # jump(.LABEL__anonymous_function_43_296__11)
  mov [rbp-9], al
  jmp .LABEL__anonymous_function_43_296__11
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] $2.2:[rbp-9] 
  # [discarded value]: $2.2
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] 
  # [live values]: token.1:[rbp-8] $2.1:[rbp-9] 
  # [discarded value]: $2.1
  # [discarded value]: token.1
  # [live values]: 
.LABEL__anonymous_function_43_296__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_43_296__stack_frame_size: .word 16

  .loc 7 923 19
  .text
anonymous_function_44_297:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_44_297__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_44_297__1:
  # self.1: @Matcher = load_variable(self)
  # [live values]: self.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: self.1:rdi token.1:rsi 
  .loc 7 924 17
  # $1.1: bool = call(is_389, token.1, Other_Token)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, Other_Token[rip]
  call is_389
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__anonymous_function_44_297__2, .LABEL__anonymous_function_44_297__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__anonymous_function_44_297__3
.LABEL__anonymous_function_44_297__2:
  .loc 7 925 24
  # $2.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx 
  .loc 7 925 45
  # $3.1: @Other_Matcher = self.1
  mov r15, [rbp-8]
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx $3.1:r15 
  .loc 7 925 44
  # $4.1: @String = load_struct_member($3.1, lexeme)
  mov r14, [r15+17]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $2.1:rbx $4.1:r14 
  .loc 7 925 24
  # $5.1: bool = call(equals_392, $2.1, $4.1)
  mov rdi, rbx
  mov rsi, r14
  call equals_392
  # [discarded value]: $4.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 7 925 17
  # return($5.1)
  mov [rbp-18], al
  jmp .LABEL__anonymous_function_44_297__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__anonymous_function_44_297__3:
  .loc 7 927 13
  # return(false)
  mov al, 0
  jmp .LABEL__anonymous_function_44_297__end
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] token.1:[rbp-16] 
  # [discarded value]: token.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__anonymous_function_44_297__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_44_297__stack_frame_size: .word 32

  .loc 7 935 19
  .text
anonymous_function_45_298:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_45_298__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_45_298__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 936 20
  # $1.1: bool = call(is_389, token.1, Space_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, Space_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 936 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_45_298__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_45_298__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_45_298__stack_frame_size: .word 16

  .loc 7 943 19
  .text
anonymous_function_46_299:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_46_299__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_46_299__1:
  # self.1: @Matcher = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # token.1: @Token = load_variable(token)
  # [live values]: token.1:rsi 
  .loc 7 944 20
  # $1.1: bool = call(is_389, token.1, String_Token)
  mov rdi, rsi
  mov [rbp-8], rsi
  mov rsi, String_Token[rip]
  call is_389
  # [discarded value]: token.1
  # [live values]: $1.1:rax 
  .loc 7 944 13
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__anonymous_function_46_299__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_46_299__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_46_299__stack_frame_size: .word 16

  .loc 7 996 8
  .text
init_matchers_300:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR init_matchers_300__stack_frame_size[rip]
  sub rsp, rax
.LABEL__init_matchers_300__1:
  .loc 7 997 24
  # optional_comment.1: @Matcher = new Comment_Matcher(object_type = Comment_Matcher, is_required = false, accepts = anonymous_function_38_291.address)
  mov rdi, 17
  call malloc
  #     .object_type = Comment_Matcher
  mov rbx, Comment_Matcher[rip]
  mov [rax], rbx
  #     .is_required = false
  mov BYTE PTR [rax+8], 0
  #     .accepts = anonymous_function_38_291.address
  lea rbx, anonymous_function_38_291[rip]
  mov [rax+9], rbx
  # store global variable: optional_comment
  mov QWORD PTR optional_comment[rip], rax
  # [discarded value]: optional_comment.1
  # [live values]: 
  .loc 7 998 22
  # optional_space.1: @Matcher = new Space_Matcher(object_type = Space_Matcher, is_required = false, accepts = anonymous_function_45_298.address)
  mov rdi, 17
  call malloc
  #     .object_type = Space_Matcher
  mov rbx, Space_Matcher[rip]
  mov [rax], rbx
  #     .is_required = false
  mov BYTE PTR [rax+8], 0
  #     .accepts = anonymous_function_45_298.address
  lea rbx, anonymous_function_45_298[rip]
  mov [rax+9], rbx
  # store global variable: optional_space
  mov QWORD PTR optional_space[rip], rax
  # [discarded value]: optional_space.1
  # [live values]: 
  .loc 7 999 26
  # required_ampersand.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "&", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "&"
  lea rbx, .LABEL__string_321[rip] # "&"
  mov [rax+17], rbx
  # store global variable: required_ampersand
  mov QWORD PTR required_ampersand[rip], rax
  # [discarded value]: required_ampersand.1
  # [live values]: 
  .loc 7 1000 19
  # required_as.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "as", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "as"
  lea rbx, .LABEL__string_322[rip] # "as"
  mov [rax+17], rbx
  # store global variable: required_as
  mov QWORD PTR required_as[rip], rax
  # [discarded value]: required_as.1
  # [live values]: 
  .loc 7 1001 25
  # required_asterisk.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "*", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "*"
  lea rbx, .LABEL__string_323[rip] # "*"
  mov [rax+17], rbx
  # store global variable: required_asterisk
  mov QWORD PTR required_asterisk[rip], rax
  # [discarded value]: required_asterisk.1
  # [live values]: 
  .loc 7 1002 19
  # required_at.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "@", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "@"
  lea rbx, .LABEL__string_206[rip] # "@"
  mov [rax+17], rbx
  # store global variable: required_at
  mov QWORD PTR required_at[rip], rax
  # [discarded value]: required_at.1
  # [live values]: 
  .loc 7 1003 22
  # required_break.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "break", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "break"
  lea rbx, .LABEL__string_324[rip] # "break"
  mov [rax+17], rbx
  # store global variable: required_break
  mov QWORD PTR required_break[rip], rax
  # [discarded value]: required_break.1
  # [live values]: 
  .loc 7 1004 28
  # required_close_brace.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "}", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "}"
  lea rbx, .LABEL__string_325[rip] # "}"
  mov [rax+17], rbx
  # store global variable: required_close_brace
  mov QWORD PTR required_close_brace[rip], rax
  # [discarded value]: required_close_brace.1
  # [live values]: 
  .loc 7 1005 30
  # required_close_bracket.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "]", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "]"
  lea rbx, .LABEL__string_203[rip] # "]"
  mov [rax+17], rbx
  # store global variable: required_close_bracket
  mov QWORD PTR required_close_bracket[rip], rax
  # [discarded value]: required_close_bracket.1
  # [live values]: 
  .loc 7 1006 28
  # required_close_paren.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ")", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = ")"
  lea rbx, .LABEL__string_194[rip] # ")"
  mov [rax+17], rbx
  # store global variable: required_close_paren
  mov QWORD PTR required_close_paren[rip], rax
  # [discarded value]: required_close_paren.1
  # [live values]: 
  .loc 7 1007 22
  # required_colon.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ":", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = ":"
  lea rbx, .LABEL__string_25[rip] # ":"
  mov [rax+17], rbx
  # store global variable: required_colon
  mov QWORD PTR required_colon[rip], rax
  # [discarded value]: required_colon.1
  # [live values]: 
  .loc 7 1008 23
  # required_column.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ";", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = ";"
  lea rbx, .LABEL__string_326[rip] # ";"
  mov [rax+17], rbx
  # store global variable: required_column
  mov QWORD PTR required_column[rip], rax
  # [discarded value]: required_column.1
  # [live values]: 
  .loc 7 1009 22
  # required_comma.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ",", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = ","
  lea rbx, .LABEL__string_327[rip] # ","
  mov [rax+17], rbx
  # store global variable: required_comma
  mov QWORD PTR required_comma[rip], rax
  # [discarded value]: required_comma.1
  # [live values]: 
  .loc 7 1010 24
  # required_comment.1: @Matcher = new Comment_Matcher(object_type = Comment_Matcher, is_required = true, accepts = anonymous_function_38_291.address)
  mov rdi, 17
  call malloc
  #     .object_type = Comment_Matcher
  mov rbx, Comment_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_38_291.address
  lea rbx, anonymous_function_38_291[rip]
  mov [rax+9], rbx
  # store global variable: required_comment
  mov QWORD PTR required_comment[rip], rax
  # [discarded value]: required_comment.1
  # [live values]: 
  .loc 7 1011 23
  # required_define.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "define", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "define"
  lea rbx, .LABEL__string_328[rip] # "define"
  mov [rax+17], rbx
  # store global variable: required_define
  mov QWORD PTR required_define[rip], rax
  # [discarded value]: required_define.1
  # [live values]: 
  .loc 7 1012 20
  # required_dot.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ".", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "."
  lea rbx, .LABEL__string_329[rip] # "."
  mov [rax+17], rbx
  # store global variable: required_dot
  mov QWORD PTR required_dot[rip], rax
  # [discarded value]: required_dot.1
  # [live values]: 
  .loc 7 1013 21
  # required_else.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "else", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "else"
  lea rbx, .LABEL__string_330[rip] # "else"
  mov [rax+17], rbx
  # store global variable: required_else
  mov QWORD PTR required_else[rip], rax
  # [discarded value]: required_else.1
  # [live values]: 
  .loc 7 1014 28
  # required_end_of_file.1: @Matcher = new End_Of_File_Matcher(object_type = End_Of_File_Matcher, is_required = true, accepts = anonymous_function_39_292.address)
  mov rdi, 17
  call malloc
  #     .object_type = End_Of_File_Matcher
  mov rbx, End_Of_File_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_39_292.address
  lea rbx, anonymous_function_39_292[rip]
  mov [rax+9], rbx
  # store global variable: required_end_of_file
  mov QWORD PTR required_end_of_file[rip], rax
  # [discarded value]: required_end_of_file.1
  # [live values]: 
  .loc 7 1015 28
  # required_end_of_line.1: @Matcher = new End_Of_Line_Matcher(object_type = End_Of_Line_Matcher, is_required = true, accepts = anonymous_function_40_293.address)
  mov rdi, 17
  call malloc
  #     .object_type = End_Of_Line_Matcher
  mov rbx, End_Of_Line_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_40_293.address
  lea rbx, anonymous_function_40_293[rip]
  mov [rax+9], rbx
  # store global variable: required_end_of_line
  mov QWORD PTR required_end_of_line[rip], rax
  # [discarded value]: required_end_of_line.1
  # [live values]: 
  .loc 7 1016 23
  # required_equals.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "=", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "="
  lea rbx, .LABEL__string_331[rip] # "="
  mov [rax+17], rbx
  # store global variable: required_equals
  mov QWORD PTR required_equals[rip], rax
  # [discarded value]: required_equals.1
  # [live values]: 
  .loc 7 1017 33
  # required_exclamation_mark.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "!", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "!"
  lea rbx, .LABEL__string_332[rip] # "!"
  mov [rax+17], rbx
  # store global variable: required_exclamation_mark
  mov QWORD PTR required_exclamation_mark[rip], rax
  # [discarded value]: required_exclamation_mark.1
  # [live values]: 
  .loc 7 1018 24
  # required_extends.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "extends", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "extends"
  lea rbx, .LABEL__string_333[rip] # "extends"
  mov [rax+17], rbx
  # store global variable: required_extends
  mov QWORD PTR required_extends[rip], rax
  # [discarded value]: required_extends.1
  # [live values]: 
  .loc 7 1019 25
  # required_external.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "external", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "external"
  lea rbx, .LABEL__string_334[rip] # "external"
  mov [rax+17], rbx
  # store global variable: required_external
  mov QWORD PTR required_external[rip], rax
  # [discarded value]: required_external.1
  # [live values]: 
  .loc 7 1020 21
  # required_func.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "func", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "func"
  lea rbx, .LABEL__string_335[rip] # "func"
  mov [rax+17], rbx
  # store global variable: required_func
  mov QWORD PTR required_func[rip], rax
  # [discarded value]: required_func.1
  # [live values]: 
  .loc 7 1021 29
  # required_greater_than.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = ">", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = ">"
  lea rbx, .LABEL__string_336[rip] # ">"
  mov [rax+17], rbx
  # store global variable: required_greater_than
  mov QWORD PTR required_greater_than[rip], rax
  # [discarded value]: required_greater_than.1
  # [live values]: 
  .loc 7 1022 23
  # required_hyphen.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "-", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "-"
  lea rbx, .LABEL__string_337[rip] # "-"
  mov [rax+17], rbx
  # store global variable: required_hyphen
  mov QWORD PTR required_hyphen[rip], rax
  # [discarded value]: required_hyphen.1
  # [live values]: 
  .loc 7 1023 27
  # required_identifier.1: @Matcher = new Identifier_Matcher(object_type = Identifier_Matcher, is_required = true, accepts = anonymous_function_41_294.address)
  mov rdi, 17
  call malloc
  #     .object_type = Identifier_Matcher
  mov rbx, Identifier_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_41_294.address
  lea rbx, anonymous_function_41_294[rip]
  mov [rax+9], rbx
  # store global variable: required_identifier
  mov QWORD PTR required_identifier[rip], rax
  # [discarded value]: required_identifier.1
  # [live values]: 
  .loc 7 1024 19
  # required_if.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "if", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "if"
  lea rbx, .LABEL__string_338[rip] # "if"
  mov [rax+17], rbx
  # store global variable: required_if
  mov QWORD PTR required_if[rip], rax
  # [discarded value]: required_if.1
  # [live values]: 
  .loc 7 1025 24
  # required_include.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "include", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "include"
  lea rbx, .LABEL__string_339[rip] # "include"
  mov [rax+17], rbx
  # store global variable: required_include
  mov QWORD PTR required_include[rip], rax
  # [discarded value]: required_include.1
  # [live values]: 
  .loc 7 1026 26
  # required_less_than.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "<", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "<"
  lea rbx, .LABEL__string_340[rip] # "<"
  mov [rax+17], rbx
  # store global variable: required_less_than
  mov QWORD PTR required_less_than[rip], rax
  # [discarded value]: required_less_than.1
  # [live values]: 
  .loc 7 1027 20
  # required_let.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "let", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "let"
  lea rbx, .LABEL__string_341[rip] # "let"
  mov [rax+17], rbx
  # store global variable: required_let
  mov QWORD PTR required_let[rip], rax
  # [discarded value]: required_let.1
  # [live values]: 
  .loc 7 1028 24
  # required_literal.1: @Matcher = new Literal_Matcher(object_type = Literal_Matcher, is_required = true, accepts = anonymous_function_43_296.address)
  mov rdi, 17
  call malloc
  #     .object_type = Literal_Matcher
  mov rbx, Literal_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_43_296.address
  lea rbx, anonymous_function_43_296[rip]
  mov [rax+9], rbx
  # store global variable: required_literal
  mov QWORD PTR required_literal[rip], rax
  # [discarded value]: required_literal.1
  # [live values]: 
  .loc 7 1029 21
  # required_loop.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "loop", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "loop"
  lea rbx, .LABEL__string_342[rip] # "loop"
  mov [rax+17], rbx
  # store global variable: required_loop
  mov QWORD PTR required_loop[rip], rax
  # [discarded value]: required_loop.1
  # [live values]: 
  .loc 7 1030 20
  # required_new.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "new", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "new"
  lea rbx, .LABEL__string_288[rip] # "new"
  mov [rax+17], rbx
  # store global variable: required_new
  mov QWORD PTR required_new[rip], rax
  # [discarded value]: required_new.1
  # [live values]: 
  .loc 7 1031 27
  # required_open_brace.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "{", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "{"
  lea rbx, .LABEL__string_343[rip] # "{"
  mov [rax+17], rbx
  # store global variable: required_open_brace
  mov QWORD PTR required_open_brace[rip], rax
  # [discarded value]: required_open_brace.1
  # [live values]: 
  .loc 7 1032 29
  # required_open_bracket.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "[", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "["
  lea rbx, .LABEL__string_201[rip] # "["
  mov [rax+17], rbx
  # store global variable: required_open_bracket
  mov QWORD PTR required_open_bracket[rip], rax
  # [discarded value]: required_open_bracket.1
  # [live values]: 
  .loc 7 1033 27
  # required_open_paren.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "(", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "("
  lea rbx, .LABEL__string_344[rip] # "("
  mov [rax+17], rbx
  # store global variable: required_open_paren
  mov QWORD PTR required_open_paren[rip], rax
  # [discarded value]: required_open_paren.1
  # [live values]: 
  .loc 7 1034 21
  # required_plus.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "+", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "+"
  lea rbx, .LABEL__string_345[rip] # "+"
  mov [rax+17], rbx
  # store global variable: required_plus
  mov QWORD PTR required_plus[rip], rax
  # [discarded value]: required_plus.1
  # [live values]: 
  .loc 7 1035 30
  # required_question_mark.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "?", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "?"
  lea rbx, .LABEL__string_346[rip] # "?"
  mov [rax+17], rbx
  # store global variable: required_question_mark
  mov QWORD PTR required_question_mark[rip], rax
  # [discarded value]: required_question_mark.1
  # [live values]: 
  .loc 7 1036 23
  # required_return.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "return", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "return"
  lea rbx, .LABEL__string_290[rip] # "return"
  mov [rax+17], rbx
  # store global variable: required_return
  mov QWORD PTR required_return[rip], rax
  # [discarded value]: required_return.1
  # [live values]: 
  .loc 7 1037 22
  # required_slash.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "/", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "/"
  lea rbx, .LABEL__string_347[rip] # "/"
  mov [rax+17], rbx
  # store global variable: required_slash
  mov QWORD PTR required_slash[rip], rax
  # [discarded value]: required_slash.1
  # [live values]: 
  .loc 7 1038 31
  # required_string_literal.1: @Matcher = new String_Literal_Matcher(object_type = String_Literal_Matcher, is_required = true, accepts = anonymous_function_46_299.address)
  mov rdi, 17
  call malloc
  #     .object_type = String_Literal_Matcher
  mov rbx, String_Literal_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_46_299.address
  lea rbx, anonymous_function_46_299[rip]
  mov [rax+9], rbx
  # store global variable: required_string_literal
  mov QWORD PTR required_string_literal[rip], rax
  # [discarded value]: required_string_literal.1
  # [live values]: 
  .loc 7 1039 23
  # required_struct.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "struct", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "struct"
  lea rbx, .LABEL__string_348[rip] # "struct"
  mov [rax+17], rbx
  # store global variable: required_struct
  mov QWORD PTR required_struct[rip], rax
  # [discarded value]: required_struct.1
  # [live values]: 
  .loc 7 1040 24
  # required_unknown.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "unknown", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "unknown"
  lea rbx, .LABEL__string_349[rip] # "unknown"
  mov [rax+17], rbx
  # store global variable: required_unknown
  mov QWORD PTR required_unknown[rip], rax
  # [discarded value]: required_unknown.1
  # [live values]: 
  .loc 7 1041 29
  # required_vertical_bar.1: @Matcher = new Other_Matcher(object_type = Other_Matcher, is_required = true, lexeme = "|", accepts = anonymous_function_44_297.address)
  mov rdi, 25
  call malloc
  #     .object_type = Other_Matcher
  mov rbx, Other_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_44_297.address
  lea rbx, anonymous_function_44_297[rip]
  mov [rax+9], rbx
  #     .lexeme = "|"
  lea rbx, .LABEL__string_350[rip] # "|"
  mov [rax+17], rbx
  # store global variable: required_vertical_bar
  mov QWORD PTR required_vertical_bar[rip], rax
  # [discarded value]: required_vertical_bar.1
  # [live values]: 
  .loc 7 1042 22
  # required_while.1: @Matcher = new Keyword_Matcher(object_type = Keyword_Matcher, is_required = true, lexeme = "while", accepts = anonymous_function_42_295.address)
  mov rdi, 25
  call malloc
  #     .object_type = Keyword_Matcher
  mov rbx, Keyword_Matcher[rip]
  mov [rax], rbx
  #     .is_required = true
  mov BYTE PTR [rax+8], 1
  #     .accepts = anonymous_function_42_295.address
  lea rbx, anonymous_function_42_295[rip]
  mov [rax+9], rbx
  #     .lexeme = "while"
  lea rbx, .LABEL__string_351[rip] # "while"
  mov [rax+17], rbx
  # store global variable: required_while
  mov QWORD PTR required_while[rip], rax
  # [discarded value]: required_while.1
  # [live values]: 
  # return()
  jmp .LABEL__init_matchers_300__end
  # [live values]: 
.LABEL__init_matchers_300__end:
  mov rsp, rbp
  pop rbp
  ret

init_matchers_300__stack_frame_size: .word 0

  .loc 1 61 8
  .text
abort_301:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_301__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_301__1:
  # self.1: @Parser = load_variable(self)
  # [discarded value]: self.1
  # [live values]: 
  # unexpected_token.1: @Token = load_variable(unexpected_token)
  # [live values]: unexpected_token.1:rsi 
  .loc 1 62 18
  # $1.1: @Source_Location = load_struct_member(unexpected_token.1, location)
  mov rax, [rsi+16]
  # [live values]: unexpected_token.1:rsi $1.1:rax 
  .loc 1 62 5
  # $2.1: @FILE = call(write_363, stderr, $1.1)
  mov rdi, stderr[rip]
  mov [rbp-8], rsi
  mov rsi, rax
  call write_363
  # [discarded value]: $1.1
  # [live values]: unexpected_token.1:[rbp-8] $2.1:rax 
  .loc 1 62 5
  # $3.1: @FILE = call(write_383, $2.1, ": Unexpected ")
  mov rdi, rax
  lea rsi, .LABEL__string_352[rip] # ": Unexpected "
  call write_383
  # [discarded value]: $2.1
  # [live values]: unexpected_token.1:[rbp-8] $3.1:rax 
  .loc 1 62 74
  # $4.1: @Object_Type = load_struct_member(unexpected_token.1, object_type)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 1 62 74
  # $5.1: @String = load_struct_member_address($4.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: unexpected_token.1:rbx:[rbp-8] $3.1:rax $4.1:r15 $5.1:r14 
  .loc 1 62 5
  # $6.1: @FILE = call(write_383, $3.1, $5.1)
  mov rdi, rax
  mov rsi, r14
  call write_383
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: unexpected_token.1:[rbp-8] $6.1:rax 
  .loc 1 62 5
  # $7.1: @FILE = call(write_383, $6.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $6.1
  # [live values]: unexpected_token.1:[rbp-8] $7.1:rax 
  .loc 1 62 5
  # $8.1: @FILE = call(write_361, $7.1, unexpected_token.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_361
  # [discarded value]: $7.1
  # [discarded value]: unexpected_token.1
  # [live values]: $8.1:rax 
  .loc 1 62 5
  # $9.1: @FILE = call(end_line_386, $8.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: 
  .loc 1 63 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_301__end:
  mov rsp, rbp
  pop rbp
  ret

abort_301__stack_frame_size: .word 16

  .loc 8 14 80
  .text
anonymous_function_47_302:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_47_302__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_47_302__1:
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: statement.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [discarded value]: builder.1
  # [live values]: statement.1:rdi 
  .loc 8 15 15
  # $1.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rdi+8]
  # [live values]: statement.1:rdi $1.1:rax 
  .loc 8 15 35
  # $2.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov rbx, [rdi]
  # [discarded value]: statement.1
  # [live values]: $1.1:rax $2.1:rbx 
  .loc 8 15 9
  # call(abort_145, $1.1, $2.1)
  mov rdi, rax
  mov rsi, rbx
  call abort_145
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_47_302__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_47_302__stack_frame_size: .word 0

  .loc 8 41 19
  .text
anonymous_function_48_303:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_48_303__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_48_303__1:
  # $1.1: @AST_Block_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 42 13
  # call(convert_block_statement_98, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_block_statement_98
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_48_303__end
  # [live values]: 
.LABEL__anonymous_function_48_303__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_48_303__stack_frame_size: .word 16

  .loc 8 50 19
  .text
anonymous_function_49_304:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_49_304__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_49_304__1:
  # $1.1: @AST_Expression_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 51 13
  # call(convert_expression_statement_100, builder.1, $1.1, null)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  xor rdx, rdx
  call convert_expression_statement_100
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_49_304__end
  # [live values]: 
.LABEL__anonymous_function_49_304__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_49_304__stack_frame_size: .word 16

  .loc 8 59 19
  .text
anonymous_function_50_305:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_50_305__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_50_305__1:
  # $1.1: @AST_If_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 60 13
  # call(convert_if_statement_101, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_if_statement_101
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_50_305__end
  # [live values]: 
.LABEL__anonymous_function_50_305__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_50_305__stack_frame_size: .word 16

  .loc 8 70 19
  .text
anonymous_function_51_306:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_51_306__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_51_306__1:
  # $1.1: @AST_Loop_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 71 13
  # call(convert_loop_statement_102, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_loop_statement_102
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_51_306__end
  # [live values]: 
.LABEL__anonymous_function_51_306__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_51_306__stack_frame_size: .word 16

  .loc 8 79 19
  .text
anonymous_function_52_307:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_52_307__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_52_307__1:
  # $1.1: @AST_While_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 80 13
  # call(convert_while_statement_105, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_while_statement_105
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_52_307__end
  # [live values]: 
.LABEL__anonymous_function_52_307__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_52_307__stack_frame_size: .word 16

  .loc 8 89 19
  .text
anonymous_function_53_308:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_53_308__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_53_308__1:
  # $1.1: @AST_Break_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 90 13
  # call(convert_break_statement_99, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_break_statement_99
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_53_308__end
  # [live values]: 
.LABEL__anonymous_function_53_308__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_53_308__stack_frame_size: .word 16

  .loc 8 97 19
  .text
anonymous_function_54_309:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_54_309__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_54_309__1:
  # $1.1: @AST_Return_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 98 13
  # call(convert_return_statement_103, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_return_statement_103
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_54_309__end
  # [live values]: 
.LABEL__anonymous_function_54_309__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_54_309__stack_frame_size: .word 16

  .loc 8 106 19
  .text
anonymous_function_55_310:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_55_310__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_55_310__1:
  # $1.1: @AST_Variable_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 107 13
  # call(convert_variable_statement_104, builder.1, $1.1, false)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  mov dl, 0
  call convert_variable_statement_104
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_55_310__end
  # [live values]: 
.LABEL__anonymous_function_55_310__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_55_310__stack_frame_size: .word 16

  .loc 8 132 19
  .text
anonymous_function_56_311:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_56_311__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_56_311__1:
  # $1.1: @AST_Assignment_Statement = load_variable(statement)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 133 13
  # call(convert_assignment_statement_97, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_assignment_statement_97
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__anonymous_function_56_311__end
  # [live values]: 
.LABEL__anonymous_function_56_311__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_56_311__stack_frame_size: .word 16

  .loc 8 172 107
  .text
anonymous_function_57_312:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_57_312__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_57_312__1:
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: expression.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [discarded value]: builder.1
  # [live values]: expression.1:rdi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: expression.1:rdi 
  .loc 8 173 15
  # $1.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rdi+8]
  # [live values]: expression.1:rdi $1.1:rax 
  .loc 8 173 36
  # $2.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rdi]
  # [discarded value]: expression.1
  # [live values]: $1.1:rax $2.1:rbx 
  .loc 8 173 9
  # call(abort_145, $1.1, $2.1)
  mov rdi, rax
  mov rsi, rbx
  call abort_145
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__anonymous_function_57_312__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_57_312__stack_frame_size: .word 0

  .loc 8 179 19
  .text
anonymous_function_58_313:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_58_313__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_58_313__1:
  # $1.1: @AST_Atomic_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: $1.1:rdi builder.1:rsi expected_type.1:rdx 
  .loc 8 180 20
  # $2.1: @AST_Expression = load_struct_member($1.1, expression)
  mov rax, [rdi+24]
  # [discarded value]: $1.1
  # [live values]: builder.1:rsi expected_type.1:rdx $2.1:rax 
  .loc 8 180 20
  # $3.1: func (expression: @AST_Expression, builder: @IR_Builder, expected_type: @IR_Type) -> @IR_Value = load_struct_member($2.1, convert)
  mov rbx, [rax+16]
  # [live values]: builder.1:rsi expected_type.1:rdx $2.1:rax $3.1:rbx 
  .loc 8 180 20
  # $4.1: @IR_Value = call($3.1, $2.1, builder.1, expected_type.1)
  mov rdi, rax
  mov [rbp-8], rax
  mov rax, rbx
  call rax
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [discarded value]: expected_type.1
  # [discarded value]: builder.1
  # [live values]: $4.1:rax 
  .loc 8 180 13
  # return($4.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_58_313__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__anonymous_function_58_313__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_58_313__stack_frame_size: .word 16

  .loc 8 188 19
  .text
anonymous_function_59_314:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_59_314__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_59_314__1:
  # $1.1: @AST_Literal_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: $1.1:rdi builder.1:rsi expected_type.1:rdx 
  .loc 8 189 20
  # $2.1: @IR_Value = call(convert_literal_expression_123, builder.1, $1.1, expected_type.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_literal_expression_123
  # [discarded value]: expected_type.1
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 189 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_59_314__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_59_314__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_59_314__stack_frame_size: .word 16

  .loc 8 197 19
  .text
anonymous_function_60_315:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_60_315__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_60_315__1:
  # $1.1: @AST_Variable_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [live values]: $1.1:rdi builder.1:rsi expected_type.1:rdx 
  .loc 8 198 20
  # $2.1: @IR_Value = call(convert_variable_expression_138, builder.1, $1.1, expected_type.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_variable_expression_138
  # [discarded value]: expected_type.1
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 198 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_60_315__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_60_315__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_60_315__stack_frame_size: .word 16

  .loc 8 212 19
  .text
anonymous_function_61_316:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_61_316__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_61_316__1:
  # $1.1: @AST_Add_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 213 20
  # $2.1: @IR_Value = call(convert_add_expression_108, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_add_expression_108
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 213 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_61_316__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_61_316__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_61_316__stack_frame_size: .word 16

  .loc 8 220 19
  .text
anonymous_function_62_317:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_62_317__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_62_317__1:
  # $1.1: @AST_Divide_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 221 20
  # $2.1: @IR_Value = call(convert_divide_expression_116, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_divide_expression_116
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 221 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_62_317__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_62_317__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_62_317__stack_frame_size: .word 16

  .loc 8 228 19
  .text
anonymous_function_63_318:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_63_318__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_63_318__1:
  # $1.1: @AST_Equals_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 229 20
  # $2.1: @IR_Value = call(convert_equals_expression_117, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_equals_expression_117
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 229 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_63_318__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_63_318__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_63_318__stack_frame_size: .word 16

  .loc 8 236 19
  .text
anonymous_function_64_319:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_64_319__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_64_319__1:
  # $1.1: @AST_Greater_Than_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 237 20
  # $2.1: @IR_Value = call(convert_greater_than_expression_119, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_greater_than_expression_119
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 237 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_64_319__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_64_319__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_64_319__stack_frame_size: .word 16

  .loc 8 244 19
  .text
anonymous_function_65_320:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_65_320__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_65_320__1:
  # $1.1: @AST_Greater_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 245 20
  # $2.1: @IR_Value = call(convert_greater_than_or_equals_expression_120, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_greater_than_or_equals_expression_120
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 245 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_65_320__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_65_320__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_65_320__stack_frame_size: .word 16

  .loc 8 252 19
  .text
anonymous_function_66_321:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_66_321__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_66_321__1:
  # $1.1: @AST_Less_Than_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 253 20
  # $2.1: @IR_Value = call(convert_less_than_expression_121, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_less_than_expression_121
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 253 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_66_321__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_66_321__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_66_321__stack_frame_size: .word 16

  .loc 8 260 19
  .text
anonymous_function_67_322:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_67_322__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_67_322__1:
  # $1.1: @AST_Less_Than_Or_Equals_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 261 20
  # $2.1: @IR_Value = call(convert_less_than_or_equals_expression_122, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_less_than_or_equals_expression_122
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 261 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_67_322__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_67_322__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_67_322__stack_frame_size: .word 16

  .loc 8 268 19
  .text
anonymous_function_68_323:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_68_323__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_68_323__1:
  # $1.1: @AST_Logic_And_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 269 20
  # $2.1: @IR_Value = call(convert_logic_and_expression_124, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_logic_and_expression_124
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 269 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_68_323__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_68_323__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_68_323__stack_frame_size: .word 16

  .loc 8 276 19
  .text
anonymous_function_69_324:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_69_324__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_69_324__1:
  # $1.1: @AST_Logic_Or_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 277 20
  # $2.1: @IR_Value = call(convert_logic_or_expression_125, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_logic_or_expression_125
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 277 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_69_324__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_69_324__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_69_324__stack_frame_size: .word 16

  .loc 8 284 19
  .text
anonymous_function_70_325:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_70_325__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_70_325__1:
  # $1.1: @AST_Modulo_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 285 20
  # $2.1: @IR_Value = call(convert_modulo_expression_129, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_modulo_expression_129
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 285 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_70_325__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_70_325__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_70_325__stack_frame_size: .word 16

  .loc 8 292 19
  .text
anonymous_function_71_326:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_71_326__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_71_326__1:
  # $1.1: @AST_Multiply_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 293 20
  # $2.1: @IR_Value = call(convert_multiply_expression_130, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_multiply_expression_130
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 293 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_71_326__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_71_326__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_71_326__stack_frame_size: .word 16

  .loc 8 300 19
  .text
anonymous_function_72_327:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_72_327__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_72_327__1:
  # $1.1: @AST_Not_Equals_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 301 20
  # $2.1: @IR_Value = call(convert_not_equals_expression_136, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_not_equals_expression_136
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 301 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_72_327__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_72_327__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_72_327__stack_frame_size: .word 16

  .loc 8 308 19
  .text
anonymous_function_73_328:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_73_328__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_73_328__1:
  # $1.1: @AST_Substract_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 309 20
  # $2.1: @IR_Value = call(convert_substract_expression_137, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_substract_expression_137
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 309 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_73_328__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_73_328__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_73_328__stack_frame_size: .word 16

  .loc 8 321 19
  .text
anonymous_function_74_329:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_74_329__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_74_329__1:
  # $1.1: @AST_Negate_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 322 20
  # $2.1: @IR_Value = call(convert_negate_expression_131, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_negate_expression_131
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 322 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_74_329__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_74_329__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_74_329__stack_frame_size: .word 16

  .loc 8 329 19
  .text
anonymous_function_75_330:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_75_330__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_75_330__1:
  # $1.1: @AST_Cast_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 330 20
  # $2.1: @IR_Value = call(convert_cast_expression_115, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_cast_expression_115
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 330 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_75_330__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_75_330__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_75_330__stack_frame_size: .word 16

  .loc 8 339 19
  .text
anonymous_function_76_331:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_76_331__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_76_331__1:
  # $1.1: @AST_New_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 340 20
  # $2.1: @IR_Value = call(convert_new_expression_132, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_new_expression_132
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 340 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_76_331__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_76_331__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_76_331__stack_frame_size: .word 16

  .loc 8 349 19
  .text
anonymous_function_77_332:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_77_332__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_77_332__1:
  # $1.1: @AST_Function_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 350 20
  # $2.1: @IR_Value = call(convert_function_expression_118, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_function_expression_118
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 350 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_77_332__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_77_332__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_77_332__stack_frame_size: .word 16

  .loc 8 358 19
  .text
anonymous_function_78_333:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_78_333__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_78_333__1:
  # $1.1: @AST_Call_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 359 20
  # $2.1: @IR_Value = call(convert_call_expression_110, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_call_expression_110
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 359 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_78_333__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_78_333__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_78_333__stack_frame_size: .word 16

  .loc 8 377 19
  .text
anonymous_function_79_334:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_79_334__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_79_334__1:
  # $1.1: @AST_Member_Access_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 378 20
  # $2.1: @IR_Value = call(convert_member_access_expression_126, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_member_access_expression_126
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 378 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_79_334__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_79_334__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_79_334__stack_frame_size: .word 16

  .loc 8 387 19
  .text
anonymous_function_80_335:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR anonymous_function_80_335__stack_frame_size[rip]
  sub rsp, rax
.LABEL__anonymous_function_80_335__1:
  # $1.1: @AST_Array_Access_Expression = load_variable(expression)
  # [live values]: $1.1:rdi 
  # builder.1: @IR_Builder = load_variable(builder)
  # [live values]: $1.1:rdi builder.1:rsi 
  # expected_type.1: @IR_Type = load_variable(expected_type)
  # [discarded value]: expected_type.1
  # [live values]: $1.1:rdi builder.1:rsi 
  .loc 8 388 20
  # $2.1: @IR_Value = call(convert_array_access_expression_109, builder.1, $1.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call convert_array_access_expression_109
  # [discarded value]: builder.1
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 8 388 13
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__anonymous_function_80_335__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__anonymous_function_80_335__end:
  mov rsp, rbp
  pop rbp
  ret

anonymous_function_80_335__stack_frame_size: .word 16

  .loc 1 68 8
  .text
write_336:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_336__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_336__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # compilation_unit.1: @Compilation_Unit = load_variable(compilation_unit)
  # [live values]: file.1:rdi compilation_unit.1:rsi 
  .loc 1 69 22
  # $1.1: @List = load_struct_member(compilation_unit.1, statements)
  mov rax, [rsi+32]
  # [discarded value]: compilation_unit.1
  # [live values]: file.1:rdi $1.1:rax 
  .loc 1 69 22
  # statements.1: @List_Iterator = call(create_iterator_375, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call create_iterator_375
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statements.1:rax 
  # jump(.LABEL__write_336__2)
  mov [rbp-16], rax
.LABEL__write_336__2:
  .loc 1 70 12
  # $3.1: bool = call(has_next_378, statements.1)
  mov rdi, [rbp-16]
  call has_next_378
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:rax 
  # jump($3.1, .LABEL__write_336__3, .LABEL__write_336__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_336__4
.LABEL__write_336__3:
  .loc 1 71 25
  # statement.1: @AST_Statement = call(next_379, statements.1)
  mov rdi, [rbp-16]
  call next_379
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax 
  .loc 1 72 32
  # $6.1: @Source_Location = load_struct_member(statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:rax $6.1:rbx 
  .loc 1 72 9
  # $7.1: @FILE = call(write_source_line_338, file.1, $6.1, 0)
  mov rdi, [rbp-8]
  mov rsi, rbx
  xor rdx, rdx
  mov [rbp-25], rax
  call write_source_line_338
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] statement.1:[rbp-25] $7.1:rax 
  .loc 1 72 9
  # $8.1: @FILE = call(write_337, $7.1, statement.1, 0)
  mov rdi, rax
  mov rsi, [rbp-25]
  xor rdx, rdx
  call write_337
  # [discarded value]: $7.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] $8.1:rax 
  .loc 1 72 9
  # $9.1: @FILE = call(end_line_386, $8.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # jump(.LABEL__write_336__2)
  jmp .LABEL__write_336__2
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
.LABEL__write_336__4:
  .loc 1 74 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_336__end
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [live values]: file.1:[rbp-8] statements.1:[rbp-16] 
  # [discarded value]: statements.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_336__end:
  mov rsp, rbp
  pop rbp
  ret

write_336__stack_frame_size: .word 32

  .loc 1 77 8
  .text
write_337:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_337__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_337__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # statement.1: @AST_Statement = load_variable(statement)
  # [live values]: file.1:rdi statement.1:rsi 
  # alignment.1: isize = load_variable(alignment)
  # [live values]: file.1:rdi statement.1:rsi alignment.1:rdx 
  .loc 1 78 9
  # $1.1: bool = call(is_389, statement.1, AST_Assignment_Statement)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Assignment_Statement[rip]
  mov [rbp-24], rdx
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:rax 
  # jump($1.1, .LABEL__write_337__2, .LABEL__write_337__3)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_337__3
.LABEL__write_337__2:
  .loc 1 79 25
  # statement.1: @AST_Assignment_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax 
  .loc 1 80 27
  # $3.1: @AST_Expression = load_struct_member(statement.1, storage_expression)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rax $3.1:rbx 
  .loc 1 80 16
  # $4.1: @FILE = call(write_341, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-33], rax
  call write_341
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $4.1:rax 
  .loc 1 80 16
  # $5.1: @FILE = call(write_385, $4.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $5.1:rax 
  .loc 1 80 74
  # $6.1: @Other_Token = load_struct_member(statement.1, operator)
  mov rbx, [rbp-33]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:rbx:[rbp-33] $5.1:rax $6.1:r15 
  .loc 1 80 16
  # $7.1: @FILE = call(write_361, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_361
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $7.1:rax 
  .loc 1 80 16
  # $8.1: @FILE = call(write_385, $7.1, ' ')
  mov rdi, rax
  mov sil, 32
  call write_385
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] statement.1:[rbp-33] $8.1:rax 
  .loc 1 80 111
  # $9.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-33]
  mov r15, [rbx+40]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $8.1:rax $9.1:r15 
  .loc 1 80 16
  # $10.1: @FILE = call(write_341, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $10.1:rax 
  .loc 1 80 9
  # return($10.1)
  mov [rbp-33], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
.LABEL__write_337__3:
  .loc 1 83 9
  # $11.1: bool = call(is_389, statement.1, AST_Block_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Block_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:rax 
  # jump($11.1, .LABEL__write_337__5, .LABEL__write_337__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_337__6
.LABEL__write_337__5:
  .loc 1 84 9
  # $12.1: @FILE = call(write_385, file.1, '{')
  mov rdi, [rbp-8]
  mov sil, 123
  call write_385
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $12.1:rax 
  .loc 1 84 9
  # $13.1: @FILE = call(end_line_386, $12.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  .loc 1 85 33
  # $14.1: @AST_Block_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $14.1:rax 
  .loc 1 85 32
  # $15.1: @List = load_struct_member($14.1, statements)
  mov rbx, [rax+24]
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $15.1:rbx 
  .loc 1 85 32
  # block_statements.1: @List_Iterator = call(create_iterator_375, $15.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:rax 
  # jump(.LABEL__write_337__7)
  mov [rbp-34], rax
.LABEL__write_337__7:
  .loc 1 86 16
  # $17.1: bool = call(has_next_378, block_statements.1)
  mov rdi, [rbp-34]
  call has_next_378
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:rax 
  # jump($17.1, .LABEL__write_337__8, .LABEL__write_337__9)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_337__9
.LABEL__write_337__8:
  .loc 1 87 35
  # block_statement.1: @AST_Statement = call(next_379, block_statements.1)
  mov rdi, [rbp-34]
  call next_379
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax 
  .loc 1 88 36
  # $20.1: @Source_Location = load_struct_member(block_statement.1, location)
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx 
  .loc 1 88 62
  # $21.1: isize = alignment.1 + 1
  mov r15, [rbp-24]
  inc r15
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:rax $20.1:rbx $21.1:r15 
  .loc 1 88 13
  # $22.1: @FILE = call(write_source_line_338, file.1, $20.1, $21.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-43], rax
  call write_source_line_338
  # [discarded value]: $21.1
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax 
  .loc 1 88 100
  # $23.1: isize = alignment.1 + 1
  mov rbx, [rbp-24]
  inc rbx
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] block_statement.1:[rbp-43] $22.1:rax $23.1:rbx 
  .loc 1 88 13
  # $24.1: @FILE = call(write_337, $22.1, block_statement.1, $23.1)
  mov rdi, rax
  mov rsi, [rbp-43]
  mov rdx, rbx
  call write_337
  # [discarded value]: $23.1
  # [discarded value]: $22.1
  # [discarded value]: block_statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $24.1:rax 
  .loc 1 88 13
  # $25.1: @FILE = call(end_line_386, $24.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $25.1
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # jump(.LABEL__write_337__7)
  jmp .LABEL__write_337__7
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
.LABEL__write_337__9:
  .loc 1 90 39
  # $26.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $26.1:rbx 
  .loc 1 90 16
  # $27.1: @FILE = call(write_source_line_338, file.1, $26.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_338
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $27.1:rax 
  .loc 1 90 16
  # $28.1: @FILE = call(write_385, $27.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_385
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] $28.1:rax 
  .loc 1 90 9
  # return($28.1)
  mov [rbp-43], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] $17.1:[rbp-35] 
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] block_statements.1:[rbp-34] 
  # [discarded value]: block_statements.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
.LABEL__write_337__6:
  .loc 1 93 9
  # $29.1: bool = call(is_389, statement.1, AST_Break_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Break_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:rax 
  # jump($29.1, .LABEL__write_337__11, .LABEL__write_337__12)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_337__12
.LABEL__write_337__11:
  .loc 1 94 16
  # $30.1: @FILE = call(write_383, file.1, "break")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_324[rip] # "break"
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $30.1:rax 
  .loc 1 94 9
  # return($30.1)
  mov [rbp-35], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $30.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
.LABEL__write_337__12:
  .loc 1 97 9
  # $31.1: bool = call(is_389, statement.1, AST_Expression_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Expression_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:rax 
  # jump($31.1, .LABEL__write_337__14, .LABEL__write_337__15)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_337__15
.LABEL__write_337__14:
  .loc 1 98 28
  # $32.1: @AST_Expression_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $32.1:rax 
  .loc 1 98 27
  # $33.1: @AST_Expression = load_struct_member($32.1, expression)
  mov rbx, [rax+24]
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $33.1:rbx 
  .loc 1 98 16
  # $34.1: @FILE = call(write_341, file.1, $33.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_341
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $34.1:rax 
  .loc 1 98 9
  # return($34.1)
  mov [rbp-36], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
.LABEL__write_337__15:
  .loc 1 101 9
  # $35.1: bool = call(is_389, statement.1, AST_Function_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Function_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:rax 
  # jump($35.1, .LABEL__write_337__17, .LABEL__write_337__18)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_337__18
.LABEL__write_337__17:
  .loc 1 102 25
  # statement.1: @AST_Function_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax 
  .loc 1 103 20
  # $37.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax $37.1:rbx 
  .loc 1 103 9
  # $38.1: @FILE = call(write_361, file.1, $37.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-37], rax
  call write_361
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] $38.1:rax 
  .loc 1 103 9
  # $39.1: @FILE = call(write_383, $38.1, " :: (")
  mov rdi, rax
  lea rsi, .LABEL__string_193[rip] # " :: ("
  call write_383
  # [discarded value]: $39.1
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] 
  .loc 1 104 35
  # $40.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-37]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $40.1:rbx 
  .loc 1 104 35
  # $41.1: @List = load_struct_member($40.1, parameters)
  mov r15, [rbx+16]
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] $41.1:r15 
  .loc 1 104 35
  # function_parameters.1: @List_Iterator = call(create_iterator_375, $41.1)
  mov rdi, r15
  call create_iterator_375
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:rax 
  .loc 1 105 13
  # $43.1: bool = call(has_next_378, function_parameters.1)
  mov rdi, rax
  mov [rbp-45], rax
  call has_next_378
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:rax 
  # jump($43.1, .LABEL__write_337__21, .LABEL__write_337__20)
  test al, al
  mov [rbp-46], al
  jz .LABEL__write_337__20
.LABEL__write_337__21:
  .loc 1 107 28
  # $45.1: @AST_Function_Parameter = call(next_379, function_parameters.1)
  mov rdi, [rbp-45]
  call next_379
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $45.1:rax 
  .loc 1 107 17
  # $46.1: @FILE = call(write_339, file.1, $45.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_339
  # [discarded value]: $46.1
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  .loc 1 108 21
  # $47.1: bool = call(has_next_378, function_parameters.1)
  mov rdi, [rbp-45]
  call has_next_378
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:rax 
  # jump($47.1, .LABEL__write_337__23, .LABEL__write_337__20)
  test al, al
  mov [rbp-47], al
  jz .LABEL__write_337__20
.LABEL__write_337__23:
  .loc 1 109 21
  # $48.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $48.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # jump(.LABEL__write_337__21)
  jmp .LABEL__write_337__21
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
.LABEL__write_337__20:
  .loc 1 115 9
  # $49.1: @FILE = call(write_383, file.1, ") -> ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_254[rip] # ") -> "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $47.1:[rbp-47] 
  .loc 1 115 35
  # $50.1: @AST_Function_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-37]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $50.1:r15 $47.1:[rbp-47] 
  .loc 1 115 35
  # $51.1: @AST_Type = load_struct_member($50.1, return_type)
  mov r14, [r15+24]
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $49.1:rax $51.1:r14 $47.1:[rbp-47] 
  .loc 1 115 9
  # $52.1: @FILE = call(write_340, $49.1, $51.1)
  mov rdi, rax
  mov rsi, r14
  call write_340
  # [discarded value]: $52.1
  # [discarded value]: $51.1
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  .loc 1 116 13
  # $53.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rax, [rbp-37]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $53.1:rbx $47.1:[rbp-47] 
  .loc 1 116 13
  # $54.1: bool = $53.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rax:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:r15 $47.1:[rbp-47] 
  # jump($54.1, .LABEL__write_337__27, .LABEL__write_337__28)
  test r15b, r15b
  mov [rbp-48], r15b
  jz .LABEL__write_337__28
.LABEL__write_337__27:
  .loc 1 117 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_337__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
.LABEL__write_337__28:
  .loc 1 119 16
  # $55.1: @FILE = call(write_383, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_353[rip] # " "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax 
  .loc 1 119 38
  # $56.1: @AST_Block_Statement = load_struct_member(statement.1, body)
  mov rbx, [rbp-37]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:rbx:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $55.1:rax $56.1:r15 
  .loc 1 119 16
  # $57.1: @FILE = call(write_337, $55.1, $56.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_337
  # [discarded value]: $56.1
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] $57.1:rax 
  .loc 1 119 9
  # return($57.1)
  mov [rbp-56], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $54.1:[rbp-48] $47.1:[rbp-47] 
  # [discarded value]: $54.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] $47.1:[rbp-47] 
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] $43.1:[rbp-46] 
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] statement.1:[rbp-37] function_parameters.1:[rbp-45] 
  # [discarded value]: function_parameters.1
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
.LABEL__write_337__18:
  .loc 1 122 9
  # $58.1: bool = call(is_389, statement.1, AST_If_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_If_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:rax 
  # jump($58.1, .LABEL__write_337__31, .LABEL__write_337__32)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_337__32
.LABEL__write_337__31:
  .loc 1 123 25
  # statement.1: @AST_If_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax 
  .loc 1 124 9
  # $60.1: @FILE = call(write_383, file.1, "if (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_354[rip] # "if ("
  mov [rbp-38], rax
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $60.1:rax 
  .loc 1 124 34
  # $61.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-38]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $60.1:rax $61.1:r15 
  .loc 1 124 9
  # $62.1: @FILE = call(write_341, $60.1, $61.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $61.1
  # [discarded value]: $60.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $62.1:rax 
  .loc 1 124 9
  # $63.1: @FILE = call(write_383, $62.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_355[rip] # ") "
  call write_383
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $63.1:rax 
  .loc 1 124 84
  # $64.1: @AST_Statement = load_struct_member(statement.1, true_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $63.1:rax $64.1:r15 
  .loc 1 124 9
  # $65.1: @FILE = call(write_337, $63.1, $64.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_337
  # [discarded value]: $65.1
  # [discarded value]: $64.1
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  .loc 1 125 13
  # $66.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rax, [rbp-38]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $66.1:rbx 
  .loc 1 125 13
  # $67.1: bool = $66.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $66.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rax:[rbp-38] $67.1:r15 
  # jump($67.1, .LABEL__write_337__33, .LABEL__write_337__34)
  test r15b, r15b
  mov [rbp-39], r15b
  jz .LABEL__write_337__34
.LABEL__write_337__33:
  .loc 1 126 13
  # $68.1: @FILE = call(write_383, file.1, " else ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_356[rip] # " else "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] $68.1:rax 
  .loc 1 126 40
  # $69.1: @AST_Statement = load_struct_member(statement.1, false_statement)
  mov rbx, [rbp-38]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:rbx:[rbp-38] $67.1:[rbp-39] $68.1:rax $69.1:r15 
  .loc 1 126 13
  # $70.1: @FILE = call(write_337, $68.1, $69.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_337
  # [discarded value]: $70.1
  # [discarded value]: $69.1
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # jump(.LABEL__write_337__34)
.LABEL__write_337__34:
  .loc 1 128 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_337__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] $67.1:[rbp-39] 
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] statement.1:[rbp-38] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
.LABEL__write_337__32:
  .loc 1 131 9
  # $71.1: bool = call(is_389, statement.1, AST_Loop_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Loop_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:rax 
  # jump($71.1, .LABEL__write_337__36, .LABEL__write_337__37)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_337__37
.LABEL__write_337__36:
  .loc 1 132 25
  # statement.1: @AST_Loop_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:rax 
  .loc 1 133 16
  # $73.1: @FILE = call(write_383, file.1, "loop ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_357[rip] # "loop "
  mov [rbp-39], rax
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] statement.1:[rbp-39] $73.1:rax 
  .loc 1 133 42
  # $74.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-39]
  mov r15, [rbx+24]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $73.1:rax $74.1:r15 
  .loc 1 133 16
  # $75.1: @FILE = call(write_337, $73.1, $74.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_337
  # [discarded value]: $74.1
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $75.1:rax 
  .loc 1 133 9
  # return($75.1)
  mov [rbp-39], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
.LABEL__write_337__37:
  .loc 1 136 9
  # $76.1: bool = call(is_389, statement.1, AST_Return_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Return_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:rax 
  # jump($76.1, .LABEL__write_337__39, .LABEL__write_337__40)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_337__40
.LABEL__write_337__39:
  .loc 1 137 25
  # statement.1: @AST_Return_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax 
  .loc 1 138 9
  # $78.1: @FILE = call(write_383, file.1, "return")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_290[rip] # "return"
  mov [rbp-40], rax
  call write_383
  # [discarded value]: $78.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  .loc 1 139 13
  # $79.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-40]
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $79.1:rbx 
  .loc 1 139 13
  # $80.1: bool = $79.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rax:[rbp-40] $80.1:r15 
  # jump($80.1, .LABEL__write_337__41, .LABEL__write_337__42)
  test r15b, r15b
  mov [rbp-41], r15b
  jz .LABEL__write_337__42
.LABEL__write_337__41:
  .loc 1 140 13
  # $81.1: @FILE = call(write_383, file.1, " ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_353[rip] # " "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] $81.1:rax 
  .loc 1 140 35
  # $82.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-40]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:rbx:[rbp-40] $80.1:[rbp-41] $81.1:rax $82.1:r15 
  .loc 1 140 13
  # $83.1: @FILE = call(write_341, $81.1, $82.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $83.1
  # [discarded value]: $82.1
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # jump(.LABEL__write_337__42)
.LABEL__write_337__42:
  .loc 1 142 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_337__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] $80.1:[rbp-41] 
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] statement.1:[rbp-40] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
.LABEL__write_337__40:
  .loc 1 145 9
  # $84.1: bool = call(is_389, statement.1, AST_Struct_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Struct_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:rax 
  # jump($84.1, .LABEL__write_337__44, .LABEL__write_337__45)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_337__45
.LABEL__write_337__44:
  .loc 1 146 25
  # statement.1: @AST_Struct_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax 
  .loc 1 147 20
  # $86.1: @Identifier_Token = load_struct_member(statement.1, name)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax $86.1:rbx 
  .loc 1 147 9
  # $87.1: @FILE = call(write_361, file.1, $86.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov [rbp-41], rax
  call write_361
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $87.1:rax 
  .loc 1 147 9
  # $88.1: @FILE = call(write_383, $87.1, " :: struct")
  mov rdi, rax
  lea rsi, .LABEL__string_358[rip] # " :: struct"
  call write_383
  # [discarded value]: $88.1
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  .loc 1 148 13
  # $89.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rax, [rbp-41]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $89.1:rbx 
  .loc 1 148 13
  # $90.1: bool = $89.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:r15 
  # jump($90.1, .LABEL__write_337__46, .LABEL__write_337__47)
  test r15b, r15b
  mov [rbp-42], r15b
  jz .LABEL__write_337__47
.LABEL__write_337__46:
  .loc 1 149 13
  # $91.1: @FILE = call(write_383, file.1, " : ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_359[rip] # " : "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $91.1:rax 
  .loc 1 149 37
  # $92.1: @AST_Type = load_struct_member(statement.1, base_type)
  mov rbx, [rbp-41]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rbx:[rbp-41] $90.1:[rbp-42] $91.1:rax $92.1:r15 
  .loc 1 149 13
  # $93.1: @FILE = call(write_340, $91.1, $92.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $93.1
  # [discarded value]: $92.1
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # jump(.LABEL__write_337__47)
.LABEL__write_337__47:
  .loc 1 151 13
  # $94.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $94.1:rbx 
  .loc 1 151 13
  # $95.1: bool = $94.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:r15 
  # jump($95.1, .LABEL__write_337__48, .LABEL__write_337__49)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_337__49
.LABEL__write_337__48:
  .loc 1 152 13
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_337__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
.LABEL__write_337__49:
  .loc 1 154 9
  # $96.1: @FILE = call(write_383, file.1, " {")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_264[rip] # " {"
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $96.1:rax 
  .loc 1 154 9
  # $97.1: @FILE = call(end_line_386, $96.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  .loc 1 155 23
  # $98.1: @List = load_struct_member(statement.1, members)
  mov rax, [rbp-41]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] $98.1:rbx 
  .loc 1 155 23
  # members.1: @List_Iterator = call(create_iterator_375, $98.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:rax 
  # jump(.LABEL__write_337__51)
  mov [rbp-51], rax
.LABEL__write_337__51:
  .loc 1 156 16
  # $100.1: bool = call(has_next_378, members.1)
  mov rdi, [rbp-51]
  call has_next_378
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:rax 
  # jump($100.1, .LABEL__write_337__52, .LABEL__write_337__53)
  test al, al
  mov [rbp-52], al
  jz .LABEL__write_337__53
.LABEL__write_337__52:
  .loc 1 157 26
  # member.1: @AST_Struct_Member = call(next_379, members.1)
  mov rdi, [rbp-51]
  call next_379
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax 
  .loc 1 158 36
  # $103.1: @Source_Location = load_struct_member(member.1, location)
  mov rbx, [rax]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx 
  .loc 1 158 53
  # $104.1: isize = alignment.1 + 1
  mov r15, [rbp-24]
  inc r15
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rax $103.1:rbx $104.1:r15 
  .loc 1 158 13
  # $105.1: @FILE = call(write_source_line_338, file.1, $103.1, $104.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, r15
  mov [rbp-60], rax
  call write_source_line_338
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $105.1:rax 
  .loc 1 158 74
  # $106.1: @Identifier_Token = load_struct_member(member.1, name)
  mov rbx, [rbp-60]
  mov r15, [rbx+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:rbx:[rbp-60] $105.1:rax $106.1:r15 
  .loc 1 158 13
  # $107.1: @FILE = call(write_361, $105.1, $106.1)
  mov rdi, rax
  mov rsi, r15
  call write_361
  # [discarded value]: $106.1
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $107.1:rax 
  .loc 1 158 13
  # $108.1: @FILE = call(write_383, $107.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] member.1:[rbp-60] $108.1:rax 
  .loc 1 158 105
  # $109.1: @AST_Type = load_struct_member(member.1, type)
  mov rbx, [rbp-60]
  mov r15, [rbx+16]
  # [discarded value]: member.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $108.1:rax $109.1:r15 
  .loc 1 158 13
  # $110.1: @FILE = call(write_340, $108.1, $109.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $109.1
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $110.1:rax 
  .loc 1 158 13
  # $111.1: @FILE = call(end_line_386, $110.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $111.1
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # jump(.LABEL__write_337__51)
  jmp .LABEL__write_337__51
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
.LABEL__write_337__53:
  .loc 1 160 39
  # $112.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-41]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:rax:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $112.1:rbx 
  .loc 1 160 16
  # $113.1: @FILE = call(write_source_line_338, file.1, $112.1, alignment.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  mov rdx, [rbp-24]
  call write_source_line_338
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $113.1:rax 
  .loc 1 160 16
  # $114.1: @FILE = call(write_385, $113.1, '}')
  mov rdi, rax
  mov sil, 125
  call write_385
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] $114.1:rax 
  .loc 1 160 9
  # return($114.1)
  mov [rbp-60], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $114.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] $100.1:[rbp-52] 
  # [discarded value]: $100.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] members.1:[rbp-51] 
  # [discarded value]: members.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] $95.1:[rbp-43] 
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] $90.1:[rbp-42] 
  # [discarded value]: $90.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] statement.1:[rbp-41] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
.LABEL__write_337__45:
  .loc 1 163 9
  # $115.1: bool = call(is_389, statement.1, AST_Variable_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:rax 
  # jump($115.1, .LABEL__write_337__55, .LABEL__write_337__56)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_337__56
.LABEL__write_337__55:
  .loc 1 164 25
  # statement.1: @AST_Variable_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax 
  .loc 1 165 21
  # $117.1: @AST_Variable_Statement = statement.1
  mov [rbp-42], rax
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $117.1:rax 
  .loc 1 165 20
  # $118.1: @Identifier_Token = load_struct_member($117.1, name)
  mov rbx, [rax+24]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $118.1:rbx 
  .loc 1 165 9
  # $119.1: @FILE = call(write_361, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_361
  # [discarded value]: $119.1
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  .loc 1 166 13
  # $120.1: @AST_Type = load_struct_member(statement.1, type)
  mov rax, [rbp-42]
  mov rbx, [rax+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $120.1:rbx 
  .loc 1 166 13
  # $121.1: bool = $120.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:r15 
  # jump($121.1, .LABEL__write_337__57, .LABEL__write_337__59)
  test r15b, r15b
  mov [rbp-43], r15b
  jz .LABEL__write_337__59
.LABEL__write_337__57:
  .loc 1 167 13
  # $125.1: @FILE = call(write_383, file.1, ": ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $125.1:rax 
  .loc 1 167 36
  # $126.1: @AST_Type = load_struct_member(statement.1, type)
  mov rbx, [rbp-42]
  mov r15, [rbx+32]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $125.1:rax $126.1:r15 
  .loc 1 167 13
  # $127.1: @FILE = call(write_340, $125.1, $126.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $127.1
  # [discarded value]: $126.1
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  .loc 1 168 17
  # $128.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rax, [rbp-42]
  mov rbx, [rax+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $128.1:rbx 
  .loc 1 168 17
  # $129.1: bool = $128.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:r15 
  # jump($129.1, .LABEL__write_337__60, .LABEL__write_337__61)
  test r15b, r15b
  mov [rbp-44], r15b
  jz .LABEL__write_337__61
.LABEL__write_337__60:
  .loc 1 169 17
  # $130.1: @FILE = call(write_383, file.1, " = ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_92[rip] # " = "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax 
  .loc 1 169 41
  # $131.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $130.1:rax $131.1:r15 
  .loc 1 169 17
  # $132.1: @FILE = call(write_341, $130.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $132.1
  # [discarded value]: $131.1
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # jump(.LABEL__write_337__61)
.LABEL__write_337__61:
  .loc 1 171 17
  # $133.1: bool = load_struct_member(statement.1, is_external)
  mov rax, [rbp-42]
  mov bl, [rax+48]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rax:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:rbx 
  # jump($133.1, .LABEL__write_337__62, .LABEL__write_337__58)
  test bl, bl
  mov [rbp-45], bl
  jz .LABEL__write_337__58
.LABEL__write_337__62:
  .loc 1 172 17
  # $134.1: @FILE = call(write_383, file.1, " = external")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_360[rip] # " = external"
  call write_383
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # jump(.LABEL__write_337__58)
.LABEL__write_337__58:
  .loc 1 177 9
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_337__end
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] $133.1:[rbp-45] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $129.1:[rbp-44] 
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
.LABEL__write_337__59:
  .loc 1 175 13
  # $122.1: @FILE = call(write_383, file.1, " := ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_361[rip] # " := "
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] $122.1:rax 
  .loc 1 175 38
  # $123.1: @AST_Expression = load_struct_member(statement.1, value_expression)
  mov rbx, [rbp-42]
  mov r15, [rbx+40]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:rbx:[rbp-42] $121.1:[rbp-43] $122.1:rax $123.1:r15 
  .loc 1 175 13
  # $124.1: @FILE = call(write_341, $122.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $124.1
  # [discarded value]: $123.1
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # jump(.LABEL__write_337__58)
  jmp .LABEL__write_337__58
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] $121.1:[rbp-43] 
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] statement.1:[rbp-42] 
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
.LABEL__write_337__56:
  .loc 1 180 9
  # $135.1: bool = call(is_389, statement.1, AST_While_Statement)
  mov rdi, [rbp-16]
  mov rsi, AST_While_Statement[rip]
  call is_389
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:rax 
  # jump($135.1, .LABEL__write_337__65, .LABEL__write_337__66)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_337__66
.LABEL__write_337__65:
  .loc 1 181 25
  # statement.1: @AST_While_Statement = statement.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rax 
  .loc 1 182 16
  # $137.1: @FILE = call(write_383, file.1, "while (")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_362[rip] # "while ("
  mov [rbp-43], rax
  call write_383
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $137.1:rax 
  .loc 1 182 44
  # $138.1: @AST_Expression = load_struct_member(statement.1, condition_expression)
  mov rbx, [rbp-43]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:rbx:[rbp-43] $137.1:rax $138.1:r15 
  .loc 1 182 16
  # $139.1: @FILE = call(write_341, $137.1, $138.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $138.1
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $139.1:rax 
  .loc 1 182 16
  # $140.1: @FILE = call(write_383, $139.1, ") ")
  mov rdi, rax
  lea rsi, .LABEL__string_355[rip] # ") "
  call write_383
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] statement.1:[rbp-43] $140.1:rax 
  .loc 1 182 94
  # $141.1: @AST_Block_Statement = load_struct_member(statement.1, block)
  mov rbx, [rbp-43]
  mov r15, [rbx+32]
  # [discarded value]: statement.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $140.1:rax $141.1:r15 
  .loc 1 182 16
  # $142.1: @FILE = call(write_337, $140.1, $141.1, alignment.1)
  mov rdi, rax
  mov rsi, r15
  mov rdx, [rbp-24]
  call write_337
  # [discarded value]: $141.1
  # [discarded value]: $140.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $142.1:rax 
  .loc 1 182 9
  # return($142.1)
  mov [rbp-43], rax
  jmp .LABEL__write_337__end
  # [discarded value]: $142.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
.LABEL__write_337__66:
  .loc 1 185 5
  # $143.1: @FILE = call(flush_387, file.1)
  mov rdi, [rbp-8]
  call flush_387
  # [discarded value]: $143.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  .loc 1 186 11
  # $144.1: @Source_Location = load_struct_member(statement.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] statement.1:rax:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:rbx 
  .loc 1 186 31
  # $145.1: @String = call(clone_391, "Unsupported AST_Statement type: ")
  lea rdi, .LABEL__string_363[rip] # "Unsupported AST_Statement type: "
  mov [rbp-43], rbx
  call clone_391
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax 
  .loc 1 186 81
  # $146.1: @Object_Type = load_struct_member(statement.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $146.1:r15 
  .loc 1 186 81
  # $147.1: @String = load_struct_member_address($146.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] statement.1:rbx:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $145.1:rax $146.1:r15 $147.1:r14 
  .loc 1 186 31
  # $148.1: @String = call(append_400, $145.1, $147.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $147.1
  # [discarded value]: $146.1
  # [discarded value]: $145.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] $144.1:[rbp-43] $148.1:rax 
  .loc 1 186 5
  # call(abort_360, $144.1, $148.1)
  mov rdi, [rbp-43]
  mov rsi, rax
  call abort_360
  # [discarded value]: $148.1
  # [discarded value]: $144.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] $135.1:[rbp-35] 
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] $115.1:[rbp-34] 
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] $84.1:[rbp-33] 
  # [discarded value]: $84.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] $76.1:[rbp-32] 
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] $71.1:[rbp-31] 
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] $58.1:[rbp-30] 
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] $35.1:[rbp-29] 
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] $31.1:[rbp-28] 
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] $29.1:[rbp-27] 
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] $11.1:[rbp-26] 
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] $1.1:[rbp-25] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] statement.1:[rbp-16] alignment.1:[rbp-24] 
  # [discarded value]: alignment.1
  # [discarded value]: statement.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_337__end:
  mov rsp, rbp
  pop rbp
  ret

write_337__stack_frame_size: .word 64

  .loc 1 189 8
  .text
write_source_line_338:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_source_line_338__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_source_line_338__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: file.1:rdi location.1:rsi 
  # alignment.1: isize = load_variable(alignment)
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx 
  .loc 1 190 16
  # $1.1: @Source = load_struct_member(location.1, source)
  mov rax, [rsi]
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $1.1:rax 
  .loc 1 190 16
  # $2.1: @String = load_struct_member($1.1, file_path)
  mov rbx, [rax+8]
  # [discarded value]: $1.1
  # [live values]: file.1:rdi location.1:rsi alignment.1:rdx $2.1:rbx 
  .loc 1 190 5
  # $3.1: @FILE = call(write_383, file.1, $2.1)
  mov [rbp-8], rsi
  mov rsi, rbx
  mov [rbp-16], rdx
  mov [rbp-24], rdi
  call write_383
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] $3.1:rax 
  .loc 1 190 5
  # $4.1: @FILE = call(write_385, $3.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-24] location.1:[rbp-8] alignment.1:[rbp-16] 
  .loc 1 191 16
  # line.1: isize = load_struct_member(location.1, line)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [discarded value]: location.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx 
  .loc 1 192 9
  # $6.1: bool = line.1 < 1000
  cmp rbx, 1000
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:rbx $6.1:rax 
  # jump($6.1, .LABEL__write_source_line_338__2, .LABEL__write_source_line_338__3)
  test al, al
  mov [rbp-25], al
  mov [rbp-33], rbx
  jz .LABEL__write_source_line_338__3
.LABEL__write_source_line_338__2:
  .loc 1 193 9
  # $7.1: @FILE = call(write_385, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_385
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # jump(.LABEL__write_source_line_338__3)
.LABEL__write_source_line_338__3:
  .loc 1 195 9
  # $8.1: bool = line.1 < 100
  cmp QWORD PTR [rbp-33], 100
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:rax 
  # jump($8.1, .LABEL__write_source_line_338__4, .LABEL__write_source_line_338__5)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_source_line_338__5
.LABEL__write_source_line_338__4:
  .loc 1 196 9
  # $9.1: @FILE = call(write_385, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_385
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # jump(.LABEL__write_source_line_338__5)
.LABEL__write_source_line_338__5:
  .loc 1 198 9
  # $10.1: bool = line.1 < 10
  cmp QWORD PTR [rbp-33], 10
  setl al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:rax 
  # jump($10.1, .LABEL__write_source_line_338__6, .LABEL__write_source_line_338__7)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_source_line_338__7
.LABEL__write_source_line_338__6:
  .loc 1 199 9
  # $11.1: @FILE = call(write_385, file.1, '0')
  mov rdi, [rbp-24]
  mov sil, 48
  call write_385
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # jump(.LABEL__write_source_line_338__7)
.LABEL__write_source_line_338__7:
  .loc 1 201 5
  # $12.1: @FILE = call(write_382, file.1, line.1)
  mov rdi, [rbp-24]
  mov rsi, [rbp-33]
  call write_382
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] $12.1:rax 
  .loc 1 201 5
  # $13.1: @FILE = call(write_383, $12.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  .loc 1 203 23
  # $14.1: isize = alignment.1 * 2
  mov rax, [rbp-16]
  imul rax, 2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] $14.1:rax 
  .loc 1 203 9
  # space_count.1: isize = $14.1
  mov [rbp-43], rax
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:rax 
  # jump(.LABEL__write_source_line_338__8)
  mov [rbp-43], rax
.LABEL__write_source_line_338__8:
  # space_count.2: isize = phi(space_count.1, space_count.4)
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  .loc 1 204 12
  # $15.1: bool = space_count.2 > 0
  cmp QWORD PTR [rbp-43], 0
  setg al
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:rax 
  # jump($15.1, .LABEL__write_source_line_338__9, .LABEL__write_source_line_338__10)
  test al, al
  mov [rbp-44], al
  jz .LABEL__write_source_line_338__10
.LABEL__write_source_line_338__9:
  .loc 1 205 9
  # $16.1: @FILE = call(write_385, file.1, ' ')
  mov rdi, [rbp-24]
  mov sil, 32
  call write_385
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  .loc 1 206 23
  # $17.1: isize = space_count.2 - 1
  mov rax, [rbp-43]
  dec rax
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] $17.1:rax 
  .loc 1 206 9
  # space_count.4: isize = $17.1
  mov [rbp-52], rax
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:rax:[rbp-43] 
  # jump(.LABEL__write_source_line_338__8)
  mov [rbp-43], rax
  jmp .LABEL__write_source_line_338__8
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] space_count.4:[rbp-43] 
  # [discarded value]: space_count.4
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
.LABEL__write_source_line_338__10:
  .loc 1 209 5
  # return(file.1)
  mov rax, [rbp-24]
  jmp .LABEL__write_source_line_338__end
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] $15.1:[rbp-44] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] space_count.2:[rbp-43] 
  # [discarded value]: space_count.2
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] space_count.1:[rbp-43] 
  # [discarded value]: space_count.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] $8.1:[rbp-34] 
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] $6.1:[rbp-25] 
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-24] alignment.1:[rbp-16] line.1:[rbp-33] 
  # [discarded value]: line.1
  # [discarded value]: alignment.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_source_line_338__end:
  mov rsp, rbp
  pop rbp
  ret

write_source_line_338__stack_frame_size: .word 64

  .loc 1 212 8
  .text
write_339:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_339__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_339__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # parameter.1: @AST_Function_Parameter = load_variable(parameter)
  # [live values]: file.1:rdi parameter.1:rsi 
  .loc 1 213 23
  # $1.1: @Identifier_Token = load_struct_member(parameter.1, name)
  mov rax, [rsi+8]
  # [live values]: file.1:rdi parameter.1:rsi $1.1:rax 
  .loc 1 213 12
  # $2.1: @FILE = call(write_361, file.1, $1.1)
  mov [rbp-8], rsi
  mov rsi, rax
  call write_361
  # [discarded value]: $1.1
  # [discarded value]: file.1
  # [live values]: parameter.1:[rbp-8] $2.1:rax 
  .loc 1 213 12
  # $3.1: @FILE = call(write_383, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $2.1
  # [live values]: parameter.1:[rbp-8] $3.1:rax 
  .loc 1 213 57
  # $4.1: @AST_Type = load_struct_member(parameter.1, type)
  mov rbx, [rbp-8]
  mov r15, [rbx+16]
  # [discarded value]: parameter.1
  # [live values]: $3.1:rax $4.1:r15 
  .loc 1 213 12
  # $5.1: @FILE = call(write_340, $3.1, $4.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: $5.1:rax 
  .loc 1 213 5
  # return($5.1)
  mov [rbp-8], rax
  jmp .LABEL__write_339__end
  # [discarded value]: $5.1
  # [live values]: 
.LABEL__write_339__end:
  mov rsp, rbp
  pop rbp
  ret

write_339__stack_frame_size: .word 16

  .loc 1 216 8
  .text
write_340:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_340__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_340__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # type.1: @AST_Type = load_variable(type)
  # [live values]: file.1:rdi type.1:rsi 
  .loc 1 217 9
  # $1.1: bool = call(is_389, type.1, AST_Array_Type)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Type[rip]
  call is_389
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_340__2, .LABEL__write_340__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_340__3
.LABEL__write_340__2:
  .loc 1 218 20
  # type.1: @AST_Array_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax 
  .loc 1 219 13
  # $3.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rax+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $3.1:rbx 
  .loc 1 219 13
  # $4.1: bool = $3.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rax $4.1:r15 
  # jump($4.1, .LABEL__write_340__4, .LABEL__write_340__5)
  test r15b, r15b
  mov [rbp-25], rax
  mov [rbp-26], r15b
  jz .LABEL__write_340__5
.LABEL__write_340__4:
  .loc 1 220 20
  # $5.1: @FILE = call(write_385, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_385
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 1 220 42
  # $6.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $5.1:rax $6.1:r15 
  .loc 1 220 20
  # $7.1: @FILE = call(write_340, $5.1, $6.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $7.1:rax 
  .loc 1 220 20
  # $8.1: @FILE = call(write_383, $7.1, "; ")
  mov rdi, rax
  lea rsi, .LABEL__string_364[rip] # "; "
  call write_383
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $8.1:rax 
  .loc 1 220 76
  # $9.1: @AST_Expression = load_struct_member(type.1, size_expression)
  mov rbx, [rbp-25]
  mov r15, [rbx+24]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $8.1:rax $9.1:r15 
  .loc 1 220 20
  # $10.1: @FILE = call(write_341, $8.1, $9.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $10.1:rax 
  .loc 1 220 20
  # $11.1: @FILE = call(write_385, $10.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_385
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $11.1:rax 
  .loc 1 220 13
  # return($11.1)
  mov [rbp-34], rax
  jmp .LABEL__write_340__end
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__write_340__5:
  .loc 1 222 16
  # $12.1: @FILE = call(write_385, file.1, '[')
  mov rdi, [rbp-8]
  mov sil, 91
  call write_385
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $12.1:rax 
  .loc 1 222 38
  # $13.1: @AST_Type = load_struct_member(type.1, item_type)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:rbx:[rbp-25] $4.1:[rbp-26] $12.1:rax $13.1:r15 
  .loc 1 222 16
  # $14.1: @FILE = call(write_340, $12.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $14.1:rax 
  .loc 1 222 16
  # $15.1: @FILE = call(write_385, $14.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_385
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] $15.1:rax 
  .loc 1 222 9
  # return($15.1)
  mov [rbp-34], rax
  jmp .LABEL__write_340__end
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] type.1:[rbp-25] 
  # [discarded value]: type.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_340__3:
  .loc 1 225 9
  # $16.1: bool = call(is_389, type.1, AST_Named_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Named_Type[rip]
  call is_389
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:rax 
  # jump($16.1, .LABEL__write_340__8, .LABEL__write_340__9)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_340__9
.LABEL__write_340__8:
  .loc 1 226 28
  # $17.1: @AST_Named_Type = type.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $17.1:rax 
  .loc 1 226 27
  # $18.1: @Identifier_Token = load_struct_member($17.1, name)
  mov rbx, [rax+16]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $18.1:rbx 
  .loc 1 226 16
  # $19.1: @FILE = call(write_361, file.1, $18.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_361
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $19.1:rax 
  .loc 1 226 9
  # return($19.1)
  mov [rbp-26], rax
  jmp .LABEL__write_340__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
.LABEL__write_340__9:
  .loc 1 229 9
  # $20.1: bool = call(is_389, type.1, AST_Embedded_Type)
  mov rdi, [rbp-16]
  mov rsi, AST_Embedded_Type[rip]
  call is_389
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:rax 
  # jump($20.1, .LABEL__write_340__11, .LABEL__write_340__12)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_340__12
.LABEL__write_340__11:
  .loc 1 230 16
  # $21.1: @FILE = call(write_385, file.1, '!')
  mov rdi, [rbp-8]
  mov sil, 33
  call write_385
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax 
  .loc 1 230 39
  # $22.1: @AST_Embedded_Type = type.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $22.1:rbx 
  .loc 1 230 38
  # $23.1: @AST_Type = load_struct_member($22.1, embedded_type)
  mov r15, [rbx+16]
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $21.1:rax $23.1:r15 
  .loc 1 230 16
  # $24.1: @FILE = call(write_340, $21.1, $23.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $23.1
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $24.1:rax 
  .loc 1 230 9
  # return($24.1)
  mov [rbp-27], rax
  jmp .LABEL__write_340__end
  # [discarded value]: $24.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
.LABEL__write_340__12:
  .loc 1 233 5
  # $25.1: @FILE = call(flush_387, file.1)
  mov rdi, [rbp-8]
  call flush_387
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  .loc 1 234 11
  # $26.1: @Source_Location = load_struct_member(type.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] type.1:rax:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:rbx 
  .loc 1 234 26
  # $27.1: @String = call(clone_391, "Unsupported AST_Type type: ")
  lea rdi, .LABEL__string_365[rip] # "Unsupported AST_Type type: "
  mov [rbp-27], rbx
  call clone_391
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax 
  .loc 1 234 71
  # $28.1: @Object_Type = load_struct_member(type.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $28.1:r15 
  .loc 1 234 71
  # $29.1: @String = load_struct_member_address($28.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] type.1:rbx:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $27.1:rax $28.1:r15 $29.1:r14 
  .loc 1 234 26
  # $30.1: @String = call(append_400, $27.1, $29.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $29.1
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] $26.1:[rbp-27] $30.1:rax 
  .loc 1 234 5
  # call(abort_360, $26.1, $30.1)
  mov rdi, [rbp-27]
  mov rsi, rax
  call abort_360
  # [discarded value]: $30.1
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] $20.1:[rbp-19] 
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] $16.1:[rbp-18] 
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] type.1:[rbp-16] 
  # [discarded value]: type.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_340__end:
  mov rsp, rbp
  pop rbp
  ret

write_340__stack_frame_size: .word 48

  .loc 1 237 8
  .text
write_341:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_341__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_341__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # expression.1: @AST_Expression = load_variable(expression)
  # [live values]: file.1:rdi expression.1:rsi 
  .loc 1 238 9
  # $1.1: bool = call(is_389, expression.1, AST_Array_Access_Expression)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, AST_Array_Access_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_341__2, .LABEL__write_341__3)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_341__3
.LABEL__write_341__2:
  .loc 1 239 28
  # $2.1: @AST_Array_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  .loc 1 239 27
  # $3.1: @AST_Expression = load_struct_member($2.1, array_expression)
  mov rbx, [rax+24]
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $3.1:rbx 
  .loc 1 239 16
  # $4.1: @FILE = call(write_341, file.1, $3.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_341
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $4.1:rax 
  .loc 1 239 16
  # $5.1: @FILE = call(write_385, $4.1, '[')
  mov rdi, rax
  mov sil, 91
  call write_385
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax 
  .loc 1 239 107
  # $6.1: @AST_Array_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $6.1:rbx 
  .loc 1 239 106
  # $7.1: @AST_Expression = load_struct_member($6.1, index_expression)
  mov r15, [rbx+32]
  # [discarded value]: $6.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $5.1:rax $7.1:r15 
  .loc 1 239 16
  # $8.1: @FILE = call(write_341, $5.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $7.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $8.1:rax 
  .loc 1 239 16
  # $9.1: @FILE = call(write_385, $8.1, ']')
  mov rdi, rax
  mov sil, 93
  call write_385
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $9.1:rax 
  .loc 1 239 9
  # return($9.1)
  mov [rbp-25], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $9.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_341__3:
  .loc 1 242 9
  # $10.1: bool = call(is_389, expression.1, AST_Binary_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Binary_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:rax 
  # jump($10.1, .LABEL__write_341__5, .LABEL__write_341__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_341__6
.LABEL__write_341__5:
  .loc 1 243 9
  # $11.1: @FILE = call(write_385, file.1, '(')
  mov rdi, [rbp-8]
  mov sil, 40
  call write_385
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax 
  .loc 1 243 32
  # $12.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $12.1:rbx 
  .loc 1 243 31
  # $13.1: @AST_Expression = load_struct_member($12.1, left_expression)
  mov r15, [rbx+24]
  # [discarded value]: $12.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $11.1:rax $13.1:r15 
  .loc 1 243 9
  # $14.1: @FILE = call(write_341, $11.1, $13.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  .loc 1 244 13
  # $15.1: bool = call(is_389, expression.1, AST_Add_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Add_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:rax 
  # jump($15.1, .LABEL__write_341__7, .LABEL__write_341__8)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_341__8
.LABEL__write_341__7:
  .loc 1 245 20
  # $16.1: @FILE = call(write_383, file.1, " + ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_296[rip] # " + "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax 
  .loc 1 245 45
  # $17.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $17.1:rbx 
  .loc 1 245 44
  # $18.1: @AST_Expression = load_struct_member($17.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $16.1:rax $18.1:r15 
  .loc 1 245 20
  # $19.1: @FILE = call(write_341, $16.1, $18.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $18.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $19.1:rax 
  .loc 1 245 20
  # $20.1: @FILE = call(write_385, $19.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $20.1:rax 
  .loc 1 245 13
  # return($20.1)
  mov [rbp-27], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $20.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
.LABEL__write_341__8:
  .loc 1 247 13
  # $21.1: bool = call(is_389, expression.1, AST_Divide_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Divide_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:rax 
  # jump($21.1, .LABEL__write_341__10, .LABEL__write_341__11)
  test al, al
  mov [rbp-20], al
  jz .LABEL__write_341__11
.LABEL__write_341__10:
  .loc 1 248 20
  # $22.1: @FILE = call(write_383, file.1, " / ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_297[rip] # " / "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax 
  .loc 1 248 45
  # $23.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $23.1:rbx 
  .loc 1 248 44
  # $24.1: @AST_Expression = load_struct_member($23.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $23.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $22.1:rax $24.1:r15 
  .loc 1 248 20
  # $25.1: @FILE = call(write_341, $22.1, $24.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $24.1
  # [discarded value]: $22.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $25.1:rax 
  .loc 1 248 20
  # $26.1: @FILE = call(write_385, $25.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $25.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $26.1:rax 
  .loc 1 248 13
  # return($26.1)
  mov [rbp-28], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $26.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
.LABEL__write_341__11:
  .loc 1 250 13
  # $27.1: bool = call(is_389, expression.1, AST_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Equals_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:rax 
  # jump($27.1, .LABEL__write_341__13, .LABEL__write_341__14)
  test al, al
  mov [rbp-21], al
  jz .LABEL__write_341__14
.LABEL__write_341__13:
  .loc 1 251 20
  # $28.1: @FILE = call(write_383, file.1, " == ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_298[rip] # " == "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax 
  .loc 1 251 46
  # $29.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $29.1:rbx 
  .loc 1 251 45
  # $30.1: @AST_Expression = load_struct_member($29.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $29.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $28.1:rax $30.1:r15 
  .loc 1 251 20
  # $31.1: @FILE = call(write_341, $28.1, $30.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $30.1
  # [discarded value]: $28.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $31.1:rax 
  .loc 1 251 20
  # $32.1: @FILE = call(write_385, $31.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $31.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $32.1:rax 
  .loc 1 251 13
  # return($32.1)
  mov [rbp-29], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $32.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
.LABEL__write_341__14:
  .loc 1 253 13
  # $33.1: bool = call(is_389, expression.1, AST_Greater_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:rax 
  # jump($33.1, .LABEL__write_341__16, .LABEL__write_341__17)
  test al, al
  mov [rbp-22], al
  jz .LABEL__write_341__17
.LABEL__write_341__16:
  .loc 1 254 20
  # $34.1: @FILE = call(write_383, file.1, " > ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_299[rip] # " > "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax 
  .loc 1 254 45
  # $35.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $35.1:rbx 
  .loc 1 254 44
  # $36.1: @AST_Expression = load_struct_member($35.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $35.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $34.1:rax $36.1:r15 
  .loc 1 254 20
  # $37.1: @FILE = call(write_341, $34.1, $36.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $36.1
  # [discarded value]: $34.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $37.1:rax 
  .loc 1 254 20
  # $38.1: @FILE = call(write_385, $37.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $37.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $38.1:rax 
  .loc 1 254 13
  # return($38.1)
  mov [rbp-30], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $38.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
.LABEL__write_341__17:
  .loc 1 256 13
  # $39.1: bool = call(is_389, expression.1, AST_Greater_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Greater_Than_Or_Equals_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:rax 
  # jump($39.1, .LABEL__write_341__19, .LABEL__write_341__20)
  test al, al
  mov [rbp-23], al
  jz .LABEL__write_341__20
.LABEL__write_341__19:
  .loc 1 257 20
  # $40.1: @FILE = call(write_383, file.1, " >= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_300[rip] # " >= "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax 
  .loc 1 257 46
  # $41.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $41.1:rbx 
  .loc 1 257 45
  # $42.1: @AST_Expression = load_struct_member($41.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $41.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $40.1:rax $42.1:r15 
  .loc 1 257 20
  # $43.1: @FILE = call(write_341, $40.1, $42.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $42.1
  # [discarded value]: $40.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $43.1:rax 
  .loc 1 257 20
  # $44.1: @FILE = call(write_385, $43.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $43.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $44.1:rax 
  .loc 1 257 13
  # return($44.1)
  mov [rbp-31], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $44.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
.LABEL__write_341__20:
  .loc 1 259 13
  # $45.1: bool = call(is_389, expression.1, AST_Less_Than_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:rax 
  # jump($45.1, .LABEL__write_341__22, .LABEL__write_341__23)
  test al, al
  mov [rbp-24], al
  jz .LABEL__write_341__23
.LABEL__write_341__22:
  .loc 1 260 20
  # $46.1: @FILE = call(write_383, file.1, " < ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_301[rip] # " < "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax 
  .loc 1 260 45
  # $47.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $47.1:rbx 
  .loc 1 260 44
  # $48.1: @AST_Expression = load_struct_member($47.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $47.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $46.1:rax $48.1:r15 
  .loc 1 260 20
  # $49.1: @FILE = call(write_341, $46.1, $48.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $48.1
  # [discarded value]: $46.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $49.1:rax 
  .loc 1 260 20
  # $50.1: @FILE = call(write_385, $49.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $49.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $50.1:rax 
  .loc 1 260 13
  # return($50.1)
  mov [rbp-32], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $50.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
.LABEL__write_341__23:
  .loc 1 262 13
  # $51.1: bool = call(is_389, expression.1, AST_Less_Than_Or_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Less_Than_Or_Equals_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:rax 
  # jump($51.1, .LABEL__write_341__25, .LABEL__write_341__26)
  test al, al
  mov [rbp-25], al
  jz .LABEL__write_341__26
.LABEL__write_341__25:
  .loc 1 263 20
  # $52.1: @FILE = call(write_383, file.1, " <= ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_302[rip] # " <= "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax 
  .loc 1 263 46
  # $53.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $53.1:rbx 
  .loc 1 263 45
  # $54.1: @AST_Expression = load_struct_member($53.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $53.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $52.1:rax $54.1:r15 
  .loc 1 263 20
  # $55.1: @FILE = call(write_341, $52.1, $54.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $54.1
  # [discarded value]: $52.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $55.1:rax 
  .loc 1 263 20
  # $56.1: @FILE = call(write_385, $55.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $55.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $56.1:rax 
  .loc 1 263 13
  # return($56.1)
  mov [rbp-33], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $56.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
.LABEL__write_341__26:
  .loc 1 265 13
  # $57.1: bool = call(is_389, expression.1, AST_Logic_And_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_And_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:rax 
  # jump($57.1, .LABEL__write_341__28, .LABEL__write_341__29)
  test al, al
  mov [rbp-26], al
  jz .LABEL__write_341__29
.LABEL__write_341__28:
  .loc 1 266 20
  # $58.1: @FILE = call(write_383, file.1, " && ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_366[rip] # " && "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax 
  .loc 1 266 46
  # $59.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $59.1:rbx 
  .loc 1 266 45
  # $60.1: @AST_Expression = load_struct_member($59.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $59.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $58.1:rax $60.1:r15 
  .loc 1 266 20
  # $61.1: @FILE = call(write_341, $58.1, $60.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $60.1
  # [discarded value]: $58.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $61.1:rax 
  .loc 1 266 20
  # $62.1: @FILE = call(write_385, $61.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $61.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $62.1:rax 
  .loc 1 266 13
  # return($62.1)
  mov [rbp-34], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $62.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
.LABEL__write_341__29:
  .loc 1 268 13
  # $63.1: bool = call(is_389, expression.1, AST_Logic_Or_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Logic_Or_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:rax 
  # jump($63.1, .LABEL__write_341__31, .LABEL__write_341__32)
  test al, al
  mov [rbp-27], al
  jz .LABEL__write_341__32
.LABEL__write_341__31:
  .loc 1 269 20
  # $64.1: @FILE = call(write_383, file.1, " || ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_367[rip] # " || "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax 
  .loc 1 269 46
  # $65.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $65.1:rbx 
  .loc 1 269 45
  # $66.1: @AST_Expression = load_struct_member($65.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $65.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $64.1:rax $66.1:r15 
  .loc 1 269 20
  # $67.1: @FILE = call(write_341, $64.1, $66.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $66.1
  # [discarded value]: $64.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $67.1:rax 
  .loc 1 269 20
  # $68.1: @FILE = call(write_385, $67.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $67.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $68.1:rax 
  .loc 1 269 13
  # return($68.1)
  mov [rbp-35], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $68.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
.LABEL__write_341__32:
  .loc 1 271 13
  # $69.1: bool = call(is_389, expression.1, AST_Modulo_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Modulo_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:rax 
  # jump($69.1, .LABEL__write_341__34, .LABEL__write_341__35)
  test al, al
  mov [rbp-28], al
  jz .LABEL__write_341__35
.LABEL__write_341__34:
  .loc 1 272 20
  # $70.1: @FILE = call(write_383, file.1, " // ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_303[rip] # " // "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax 
  .loc 1 272 46
  # $71.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $71.1:rbx 
  .loc 1 272 45
  # $72.1: @AST_Expression = load_struct_member($71.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $71.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $70.1:rax $72.1:r15 
  .loc 1 272 20
  # $73.1: @FILE = call(write_341, $70.1, $72.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $72.1
  # [discarded value]: $70.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $73.1:rax 
  .loc 1 272 20
  # $74.1: @FILE = call(write_385, $73.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $73.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $74.1:rax 
  .loc 1 272 13
  # return($74.1)
  mov [rbp-36], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $74.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
.LABEL__write_341__35:
  .loc 1 274 13
  # $75.1: bool = call(is_389, expression.1, AST_Multiply_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Multiply_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:rax 
  # jump($75.1, .LABEL__write_341__37, .LABEL__write_341__38)
  test al, al
  mov [rbp-29], al
  jz .LABEL__write_341__38
.LABEL__write_341__37:
  .loc 1 275 20
  # $76.1: @FILE = call(write_383, file.1, " * ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_304[rip] # " * "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax 
  .loc 1 275 45
  # $77.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $77.1:rbx 
  .loc 1 275 44
  # $78.1: @AST_Expression = load_struct_member($77.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $77.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $76.1:rax $78.1:r15 
  .loc 1 275 20
  # $79.1: @FILE = call(write_341, $76.1, $78.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $78.1
  # [discarded value]: $76.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $79.1:rax 
  .loc 1 275 20
  # $80.1: @FILE = call(write_385, $79.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $79.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $80.1:rax 
  .loc 1 275 13
  # return($80.1)
  mov [rbp-37], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $80.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
.LABEL__write_341__38:
  .loc 1 277 13
  # $81.1: bool = call(is_389, expression.1, AST_Not_Equals_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Not_Equals_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:rax 
  # jump($81.1, .LABEL__write_341__40, .LABEL__write_341__41)
  test al, al
  mov [rbp-30], al
  jz .LABEL__write_341__41
.LABEL__write_341__40:
  .loc 1 278 20
  # $82.1: @FILE = call(write_383, file.1, " != ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_305[rip] # " != "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax 
  .loc 1 278 46
  # $83.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $83.1:rbx 
  .loc 1 278 45
  # $84.1: @AST_Expression = load_struct_member($83.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $83.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $82.1:rax $84.1:r15 
  .loc 1 278 20
  # $85.1: @FILE = call(write_341, $82.1, $84.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $84.1
  # [discarded value]: $82.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $85.1:rax 
  .loc 1 278 20
  # $86.1: @FILE = call(write_385, $85.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $85.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $86.1:rax 
  .loc 1 278 13
  # return($86.1)
  mov [rbp-38], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $86.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
.LABEL__write_341__41:
  .loc 1 280 13
  # $87.1: bool = call(is_389, expression.1, AST_Substract_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Substract_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:rax 
  # jump($87.1, .LABEL__write_341__43, .LABEL__write_341__6)
  test al, al
  mov [rbp-31], al
  jz .LABEL__write_341__6
.LABEL__write_341__43:
  .loc 1 281 20
  # $88.1: @FILE = call(write_383, file.1, " - ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_306[rip] # " - "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax 
  .loc 1 281 45
  # $89.1: @AST_Binary_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $89.1:rbx 
  .loc 1 281 44
  # $90.1: @AST_Expression = load_struct_member($89.1, right_expression)
  mov r15, [rbx+32]
  # [discarded value]: $89.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $88.1:rax $90.1:r15 
  .loc 1 281 20
  # $91.1: @FILE = call(write_341, $88.1, $90.1)
  mov rdi, rax
  mov rsi, r15
  call write_341
  # [discarded value]: $90.1
  # [discarded value]: $88.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $91.1:rax 
  .loc 1 281 20
  # $92.1: @FILE = call(write_385, $91.1, ')')
  mov rdi, rax
  mov sil, 41
  call write_385
  # [discarded value]: $91.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $92.1:rax 
  .loc 1 281 13
  # return($92.1)
  mov [rbp-39], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $92.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_341__6:
  .loc 1 285 9
  # $93.1: bool = call(is_389, expression.1, AST_Call_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Call_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:rax $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # jump($93.1, .LABEL__write_341__46, .LABEL__write_341__47)
  test al, al
  mov [rbp-32], al
  jz .LABEL__write_341__47
.LABEL__write_341__46:
  .loc 1 286 21
  # $94.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $94.1:rax 
  .loc 1 286 20
  # $95.1: @AST_Expression = load_struct_member($94.1, callee_expression)
  mov rbx, [rax+24]
  # [discarded value]: $94.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $95.1:rbx 
  .loc 1 286 9
  # $96.1: @FILE = call(write_341, file.1, $95.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_341
  # [discarded value]: $95.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $96.1:rax 
  .loc 1 286 9
  # $97.1: @FILE = call(write_385, $96.1, '(')
  mov rdi, rax
  mov sil, 40
  call write_385
  # [discarded value]: $97.1
  # [discarded value]: $96.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  .loc 1 287 31
  # $98.1: @AST_Call_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $98.1:rax 
  .loc 1 287 30
  # $99.1: @List = load_struct_member($98.1, arguments)
  mov rbx, [rax+32]
  # [discarded value]: $98.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $99.1:rbx 
  .loc 1 287 30
  # call_arguments.1: @List_Iterator = call(create_iterator_375, $99.1)
  mov rdi, rbx
  call create_iterator_375
  # [discarded value]: $99.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:rax 
  .loc 1 288 13
  # $101.1: bool = call(has_next_378, call_arguments.1)
  mov rdi, rax
  mov [rbp-40], rax
  call has_next_378
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:rax 
  # jump($101.1, .LABEL__write_341__50, .LABEL__write_341__49)
  test al, al
  mov [rbp-41], al
  jz .LABEL__write_341__49
.LABEL__write_341__50:
  .loc 1 290 28
  # $103.1: @AST_Expression = call(next_379, call_arguments.1)
  mov rdi, [rbp-40]
  call next_379
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $103.1:rax 
  .loc 1 290 17
  # $104.1: @FILE = call(write_341, file.1, $103.1)
  mov rdi, [rbp-8]
  mov rsi, rax
  call write_341
  # [discarded value]: $104.1
  # [discarded value]: $103.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  .loc 1 291 21
  # $105.1: bool = call(has_next_378, call_arguments.1)
  mov rdi, [rbp-40]
  call has_next_378
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:rax 
  # jump($105.1, .LABEL__write_341__52, .LABEL__write_341__49)
  test al, al
  mov [rbp-42], al
  jz .LABEL__write_341__49
.LABEL__write_341__52:
  .loc 1 292 21
  # $106.1: @FILE = call(write_383, file.1, ", ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_40[rip] # ", "
  call write_383
  # [discarded value]: $106.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # jump(.LABEL__write_341__50)
  jmp .LABEL__write_341__50
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
.LABEL__write_341__49:
  .loc 1 298 16
  # $107.1: @FILE = call(write_385, file.1, ')')
  mov rdi, [rbp-8]
  mov sil, 41
  call write_385
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $107.1:rax $105.1:[rbp-42] 
  .loc 1 298 9
  # return($107.1)
  mov [rbp-50], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $107.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] $105.1:[rbp-42] 
  # [discarded value]: $105.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] $101.1:[rbp-41] 
  # [discarded value]: $101.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] call_arguments.1:[rbp-40] 
  # [discarded value]: call_arguments.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
.LABEL__write_341__47:
  .loc 1 301 9
  # $108.1: bool = call(is_389, expression.1, AST_Cast_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Cast_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:rax 
  # jump($108.1, .LABEL__write_341__57, .LABEL__write_341__58)
  test al, al
  mov [rbp-33], al
  jz .LABEL__write_341__58
.LABEL__write_341__57:
  .loc 1 302 28
  # $109.1: @AST_Cast_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $109.1:rax 
  .loc 1 302 27
  # $110.1: @AST_Expression = load_struct_member($109.1, value_expression)
  mov rbx, [rax+24]
  # [discarded value]: $109.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $110.1:rbx 
  .loc 1 302 16
  # $111.1: @FILE = call(write_341, file.1, $110.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_341
  # [discarded value]: $110.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $111.1:rax 
  .loc 1 302 16
  # $112.1: @FILE = call(write_383, $111.1, " as ")
  mov rdi, rax
  lea rsi, .LABEL__string_368[rip] # " as "
  call write_383
  # [discarded value]: $111.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax 
  .loc 1 302 102
  # $113.1: @AST_Cast_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $113.1:rbx 
  .loc 1 302 101
  # $114.1: @AST_Type = load_struct_member($113.1, type)
  mov r15, [rbx+32]
  # [discarded value]: $113.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $112.1:rax $114.1:r15 
  .loc 1 302 16
  # $115.1: @FILE = call(write_340, $112.1, $114.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $114.1
  # [discarded value]: $112.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $115.1:rax 
  .loc 1 302 9
  # return($115.1)
  mov [rbp-41], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $115.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
.LABEL__write_341__58:
  .loc 1 305 9
  # $116.1: bool = call(is_389, expression.1, AST_Literal_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Literal_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:rax 
  # jump($116.1, .LABEL__write_341__60, .LABEL__write_341__61)
  test al, al
  mov [rbp-34], al
  jz .LABEL__write_341__61
.LABEL__write_341__60:
  .loc 1 306 28
  # $117.1: @AST_Literal_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $117.1:rax 
  .loc 1 306 27
  # $118.1: @Literal_Token = load_struct_member($117.1, literal)
  mov rbx, [rax+24]
  # [discarded value]: $117.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $118.1:rbx 
  .loc 1 306 16
  # $119.1: @FILE = call(write_361, file.1, $118.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_361
  # [discarded value]: $118.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $119.1:rax 
  .loc 1 306 9
  # return($119.1)
  mov [rbp-42], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $119.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
.LABEL__write_341__61:
  .loc 1 309 9
  # $120.1: bool = call(is_389, expression.1, AST_New_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_New_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:rax 
  # jump($120.1, .LABEL__write_341__63, .LABEL__write_341__64)
  test al, al
  mov [rbp-35], al
  jz .LABEL__write_341__64
.LABEL__write_341__63:
  .loc 1 310 16
  # $121.1: @FILE = call(write_383, file.1, "new ")
  mov rdi, [rbp-8]
  lea rsi, .LABEL__string_369[rip] # "new "
  call write_383
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax 
  .loc 1 310 42
  # $122.1: @AST_New_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $122.1:rbx 
  .loc 1 310 41
  # $123.1: @AST_Type = load_struct_member($122.1, type)
  mov r15, [rbx+24]
  # [discarded value]: $122.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $121.1:rax $123.1:r15 
  .loc 1 310 16
  # $124.1: @FILE = call(write_340, $121.1, $123.1)
  mov rdi, rax
  mov rsi, r15
  call write_340
  # [discarded value]: $123.1
  # [discarded value]: $121.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $124.1:rax 
  .loc 1 310 9
  # return($124.1)
  mov [rbp-43], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $124.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
.LABEL__write_341__64:
  .loc 1 313 9
  # $125.1: bool = call(is_389, expression.1, AST_Member_Access_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Member_Access_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:rax 
  # jump($125.1, .LABEL__write_341__66, .LABEL__write_341__67)
  test al, al
  mov [rbp-36], al
  jz .LABEL__write_341__67
.LABEL__write_341__66:
  .loc 1 314 28
  # $126.1: @AST_Member_Access_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $126.1:rax 
  .loc 1 314 27
  # $127.1: @AST_Expression = load_struct_member($126.1, object_expression)
  mov rbx, [rax+24]
  # [discarded value]: $126.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $127.1:rbx 
  .loc 1 314 16
  # $128.1: @FILE = call(write_341, file.1, $127.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_341
  # [discarded value]: $127.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $128.1:rax 
  .loc 1 314 16
  # $129.1: @FILE = call(write_385, $128.1, '.')
  mov rdi, rax
  mov sil, 46
  call write_385
  # [discarded value]: $128.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax 
  .loc 1 314 109
  # $130.1: @AST_Member_Access_Expression = expression.1
  mov rbx, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $130.1:rbx 
  .loc 1 314 108
  # $131.1: @Identifier_Token = load_struct_member($130.1, member_name)
  mov r15, [rbx+32]
  # [discarded value]: $130.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $129.1:rax $131.1:r15 
  .loc 1 314 16
  # $132.1: @FILE = call(write_361, $129.1, $131.1)
  mov rdi, rax
  mov rsi, r15
  call write_361
  # [discarded value]: $131.1
  # [discarded value]: $129.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $132.1:rax 
  .loc 1 314 9
  # return($132.1)
  mov [rbp-44], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $132.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
.LABEL__write_341__67:
  .loc 1 317 9
  # $133.1: bool = call(is_389, expression.1, AST_Variable_Expression)
  mov rdi, [rbp-16]
  mov rsi, AST_Variable_Expression[rip]
  call is_389
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:rax 
  # jump($133.1, .LABEL__write_341__69, .LABEL__write_341__70)
  test al, al
  mov [rbp-37], al
  jz .LABEL__write_341__70
.LABEL__write_341__69:
  .loc 1 318 28
  # $134.1: @AST_Variable_Expression = expression.1
  mov rax, [rbp-16]
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $134.1:rax 
  .loc 1 318 27
  # $135.1: @Identifier_Token = load_struct_member($134.1, name)
  mov rbx, [rax+24]
  # [discarded value]: $134.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $135.1:rbx 
  .loc 1 318 16
  # $136.1: @FILE = call(write_361, file.1, $135.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_361
  # [discarded value]: $135.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $136.1:rax 
  .loc 1 318 9
  # return($136.1)
  mov [rbp-45], rax
  jmp .LABEL__write_341__end
  # [discarded value]: $136.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
.LABEL__write_341__70:
  .loc 1 321 5
  # $137.1: @FILE = call(flush_387, file.1)
  mov rdi, [rbp-8]
  call flush_387
  # [discarded value]: $137.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  .loc 1 322 11
  # $138.1: @Source_Location = load_struct_member(expression.1, location)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] expression.1:rax:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:rbx 
  .loc 1 322 32
  # $139.1: @String = call(clone_391, "Unsupported AST_Expression type: ")
  lea rdi, .LABEL__string_370[rip] # "Unsupported AST_Expression type: "
  mov [rbp-45], rbx
  call clone_391
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax 
  .loc 1 322 83
  # $140.1: @Object_Type = load_struct_member(expression.1, object_type)
  mov rbx, [rbp-16]
  mov r15, [rbx]
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $140.1:r15 
  .loc 1 322 83
  # $141.1: @String = load_struct_member_address($140.1, name)
  mov r14, r15
  add r14, 8
  # [live values]: file.1:[rbp-8] expression.1:rbx:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $139.1:rax $140.1:r15 $141.1:r14 
  .loc 1 322 32
  # $142.1: @String = call(append_400, $139.1, $141.1)
  mov rdi, rax
  mov rsi, r14
  call append_400
  # [discarded value]: $141.1
  # [discarded value]: $140.1
  # [discarded value]: $139.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] $138.1:[rbp-45] $142.1:rax 
  .loc 1 322 5
  # call(abort_360, $138.1, $142.1)
  mov rdi, [rbp-45]
  mov rsi, rax
  call abort_360
  # [discarded value]: $142.1
  # [discarded value]: $138.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] $133.1:[rbp-37] 
  # [discarded value]: $133.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] $125.1:[rbp-36] 
  # [discarded value]: $125.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] $120.1:[rbp-35] 
  # [discarded value]: $120.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] $116.1:[rbp-34] 
  # [discarded value]: $116.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] $108.1:[rbp-33] 
  # [discarded value]: $108.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $93.1:[rbp-32] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $93.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] $87.1:[rbp-31] 
  # [discarded value]: $87.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] $81.1:[rbp-30] 
  # [discarded value]: $81.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] $75.1:[rbp-29] 
  # [discarded value]: $75.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] $69.1:[rbp-28] 
  # [discarded value]: $69.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] $63.1:[rbp-27] 
  # [discarded value]: $63.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] $57.1:[rbp-26] 
  # [discarded value]: $57.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] $51.1:[rbp-25] 
  # [discarded value]: $51.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] $45.1:[rbp-24] 
  # [discarded value]: $45.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] $39.1:[rbp-23] 
  # [discarded value]: $39.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] $33.1:[rbp-22] 
  # [discarded value]: $33.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] $27.1:[rbp-21] 
  # [discarded value]: $27.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] $21.1:[rbp-20] 
  # [discarded value]: $21.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] $15.1:[rbp-19] 
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] $10.1:[rbp-18] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] expression.1:[rbp-16] 
  # [discarded value]: expression.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_341__end:
  mov rsp, rbp
  pop rbp
  ret

write_341__stack_frame_size: .word 64

  .loc 9 11 8
  .text
create_scanner_342:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_scanner_342__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_scanner_342__1:
  # source.1: @Source = load_variable(source)
  # [live values]: source.1:rdi 
  .loc 9 12 19
  # scanner.1: @Scanner = new Scanner(source = source.1, current_char_index = 0, current_line = 1, current_column = 1, current_token = undefined)
  mov [rbp-8], rdi
  mov rdi, 40
  call malloc
  #     .source = source.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .current_char_index = 0
  mov QWORD PTR [rax+8], 0
  #     .current_line = 1
  mov QWORD PTR [rax+16], 1
  #     .current_column = 1
  mov QWORD PTR [rax+24], 1
  #     .current_token = undefined
  # [discarded value]: source.1
  # [live values]: scanner.1:rax 
  .loc 9 13 29
  # $2.1: @Token = call(scan_token_347, scanner.1)
  mov rdi, rax
  mov [rbp-8], rax
  call scan_token_347
  # [live values]: scanner.1:[rbp-8] $2.1:rax 
  .loc 9 13 5
  # store_struct_member(scanner.1, current_token, $2.1)
  mov rbx, [rbp-8]
  mov QWORD PTR [rbx+32], rax
  # [discarded value]: $2.1
  # [live values]: scanner.1:rbx:[rbp-8] 
  .loc 9 14 5
  # return(scanner.1)
  mov rax, rbx
  jmp .LABEL__create_scanner_342__end
  # [discarded value]: scanner.1
  # [live values]: 
.LABEL__create_scanner_342__end:
  mov rsp, rbp
  pop rbp
  ret

create_scanner_342__stack_frame_size: .word 16

  .loc 9 17 8
  .text
peek_token_343:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_token_343__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_token_343__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # offset.1: isize = load_variable(offset)
  # [live values]: self.1:rdi offset.1:rsi 
  .loc 9 18 9
  # $1.1: bool = offset.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi offset.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__peek_token_343__2, .LABEL__peek_token_343__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__peek_token_343__3
.LABEL__peek_token_343__2:
  .loc 9 19 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__peek_token_343__3:
  .loc 9 21 17
  # token.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-17]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:rbx 
  # jump(.LABEL__peek_token_343__4)
  mov [rbp-25], rbx
.LABEL__peek_token_343__4:
  # offset.5: isize = phi(offset.1, offset.4)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] 
  # token.2: @Token = phi(token.1, token.5)
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  .loc 9 23 13
  # $3.1: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $3.1:rbx 
  .loc 9 23 13
  # $4.1: bool = $3.1 == null
  cmp rbx, 0
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rax:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__peek_token_343__6, .LABEL__peek_token_343__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__peek_token_343__7
.LABEL__peek_token_343__6:
  .loc 9 24 32
  # $5.1: @Token = call(scan_token_347, self.1)
  mov rdi, [rbp-17]
  call scan_token_347
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] $5.1:rax 
  .loc 9 24 13
  # store_struct_member(token.2, next_token, $5.1)
  mov rbx, [rbp-25]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:rbx:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__peek_token_343__7)
.LABEL__peek_token_343__7:
  .loc 9 26 17
  # token.5: @Token = load_struct_member(token.2, next_token)
  mov rax, [rbp-25]
  mov rbx, [rax+24]
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] 
  .loc 9 27 13
  # $7.1: bool = offset.5 == 0
  cmp QWORD PTR [rbp-9], 0
  sete al
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:rbx:[rbp-25] $7.1:rax 
  # jump($7.1, .LABEL__peek_token_343__8, .LABEL__peek_token_343__9)
  test al, al
  mov [rbp-27], al
  mov [rbp-25], rbx
  jz .LABEL__peek_token_343__9
.LABEL__peek_token_343__8:
  .loc 9 28 13
  # return(token.5)
  mov rax, [rbp-25]
  jmp .LABEL__peek_token_343__end
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
.LABEL__peek_token_343__9:
  .loc 9 30 18
  # $8.1: isize = offset.5 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] $8.1:rax 
  .loc 9 30 9
  # offset.4: isize = $8.1
  mov [rbp-35], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:rax:[rbp-9] 
  # jump(.LABEL__peek_token_343__4)
  mov [rbp-9], rax
  jmp .LABEL__peek_token_343__4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] offset.4:[rbp-9] 
  # [discarded value]: offset.4
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] token.5:[rbp-25] 
  # [discarded value]: token.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] offset.5:[rbp-9] token.2:[rbp-25] 
  # [discarded value]: token.2
  # [discarded value]: offset.5
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] token.1:[rbp-25] 
  # [discarded value]: token.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] offset.1:[rbp-9] 
  # [discarded value]: offset.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__peek_token_343__end:
  mov rsp, rbp
  pop rbp
  ret

peek_token_343__stack_frame_size: .word 48

  .loc 9 34 8
  .text
next_token_344:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_token_344__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_token_344__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 35 9
  # $1.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rdi+32]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 35 9
  # $2.1: @Token = load_struct_member($1.1, next_token)
  mov rbx, [rax+24]
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  .loc 9 35 9
  # $3.1: bool = $2.1 == null
  cmp rbx, 0
  sete al
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $3.1:rax 
  # jump($3.1, .LABEL__next_token_344__2, .LABEL__next_token_344__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdi
  jz .LABEL__next_token_344__3
.LABEL__next_token_344__2:
  .loc 9 36 9
  # $4.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $4.1:rbx 
  .loc 9 36 41
  # $5.1: @Token = call(scan_token_347, self.1)
  mov rdi, rax
  mov [rbp-17], rbx
  call scan_token_347
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] $4.1:[rbp-17] $5.1:rax 
  .loc 9 36 9
  # store_struct_member($4.1, next_token, $5.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx+24], rax
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # jump(.LABEL__next_token_344__3)
.LABEL__next_token_344__3:
  .loc 9 38 26
  # $6.1: @Token = load_struct_member(self.1, current_token)
  mov rax, [rbp-9]
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $6.1:rbx 
  .loc 9 38 26
  # $7.1: @Token = load_struct_member($6.1, next_token)
  mov r15, [rbx+24]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $7.1:r15 
  .loc 9 38 5
  # store_struct_member(self.1, current_token, $7.1)
  mov QWORD PTR [rax+32], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] 
  .loc 9 39 12
  # $8.1: @Token = load_struct_member(self.1, current_token)
  mov rbx, [rax+32]
  # [live values]: self.1:rax:[rbp-9] $3.1:[rbp-1] $8.1:rbx 
  .loc 9 39 5
  # return($8.1)
  mov rax, rbx
  mov [rbp-17], rbx
  jmp .LABEL__next_token_344__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_token_344__end:
  mov rsp, rbp
  pop rbp
  ret

next_token_344__stack_frame_size: .word 32

  .loc 9 42 8
  .text
peek_char_345:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR peek_char_345__stack_frame_size[rip]
  sub rsp, rax
.LABEL__peek_char_345__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 43 32
  # $1.1: isize = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 43 12
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax $2.1:rbx 
  .loc 9 43 12
  # $3.1: [i8; ?] = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: $1.1:rax $3.1:r15 
  .loc 9 43 12
  # $4.1: i8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: $4.1:rbx 
  .loc 9 43 5
  # return($4.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__peek_char_345__end
  # [discarded value]: $4.1
  # [live values]: 
.LABEL__peek_char_345__end:
  mov rsp, rbp
  pop rbp
  ret

peek_char_345__stack_frame_size: .word 16

  .loc 9 46 8
  .text
next_char_346:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_char_346__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_char_346__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 9 47 41
  # $1.1: isize = load_struct_member(self.1, current_char_index)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 9 47 21
  # $2.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rdi]
  # [live values]: self.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 47 21
  # $3.1: [i8; ?] = load_struct_member($2.1, content)
  mov r15, [rbx+16]
  # [discarded value]: $2.1
  # [live values]: self.1:rdi $1.1:rax $3.1:r15 
  .loc 9 47 21
  # next_char.1: i8 = load_array_item($3.1, $1.1)
  mov rbx, r15
  mov r14, rax
  add rbx, r14
  mov bl, [rbx]
  # [discarded value]: $3.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi next_char.1:rbx 
  .loc 9 48 9
  # $5.1: bool = next_char.1 != '\0'
  cmp bl, 0
  setne al
  # [live values]: self.1:rdi next_char.1:rbx $5.1:rax 
  # jump($5.1, .LABEL__next_char_346__2, .LABEL__next_char_346__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], bl
  mov [rbp-10], rdi
  jz .LABEL__next_char_346__3
.LABEL__next_char_346__2:
  .loc 9 49 35
  # $6.1: isize = load_struct_member(self.1, current_char_index)
  mov rax, [rbp-10]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $6.1:rbx 
  .loc 9 49 35
  # $7.1: isize = $6.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $7.1:r15 
  .loc 9 49 9
  # store_struct_member(self.1, current_char_index, $7.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  .loc 9 50 13
  # $8.1: bool = next_char.1 == '\n'
  cmp BYTE PTR [rbp-2], 10
  sete bl
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:rbx 
  # jump($8.1, .LABEL__next_char_346__4, .LABEL__next_char_346__6)
  test bl, bl
  mov [rbp-11], bl
  jz .LABEL__next_char_346__6
.LABEL__next_char_346__4:
  .loc 9 51 33
  # $11.1: isize = load_struct_member(self.1, current_line)
  mov rax, [rbp-10]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $11.1:rbx 
  .loc 9 51 33
  # $12.1: isize = $11.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $12.1:r15 
  .loc 9 51 13
  # store_struct_member(self.1, current_line, $12.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  .loc 9 52 13
  # store_struct_member(self.1, current_column, 1)
  mov QWORD PTR [rax+24], 1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_346__3)
.LABEL__next_char_346__3:
  .loc 9 57 5
  # return(next_char.1)
  mov al, [rbp-2]
  jmp .LABEL__next_char_346__end
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
.LABEL__next_char_346__6:
  .loc 9 54 35
  # $9.1: isize = load_struct_member(self.1, current_column)
  mov rax, [rbp-10]
  mov rbx, [rax+24]
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $9.1:rbx 
  .loc 9 54 35
  # $10.1: isize = $9.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] $10.1:r15 
  .loc 9 54 13
  # store_struct_member(self.1, current_column, $10.1)
  mov QWORD PTR [rax+24], r15
  # [discarded value]: $10.1
  # [live values]: self.1:rax:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # jump(.LABEL__next_char_346__3)
  jmp .LABEL__next_char_346__3
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] $8.1:[rbp-11] 
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-10] next_char.1:[rbp-2] 
  # [discarded value]: next_char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_char_346__end:
  mov rsp, rbp
  pop rbp
  ret

next_char_346__stack_frame_size: .word 16

  .loc 9 60 8
  .text
scan_token_347:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_token_347__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_token_347__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 4 21
  # $2.1: [i8; ?] = call(malloc, 16)
  mov [rbp-8], rdi
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-8] $2.1:rax 
  .loc 9 61 24
  # token_lexeme.1: @String = new String(data = $2.1, data_size = 16, length = 0)
  mov [rbp-16], rax
  mov rdi, 24
  call malloc
  #     .data = $2.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:rax 
  .loc 9 62 55
  # $4.1: @Source = load_struct_member(self.1, source)
  mov rbx, [rbp-8]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 
  .loc 9 62 75
  # $5.1: isize = load_struct_member(self.1, current_line)
  mov r14, [rbx+16]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 
  .loc 9 62 103
  # $6.1: isize = load_struct_member(self.1, current_column)
  mov r13, [rbx+24]
  # [live values]: self.1:rbx:[rbp-8] token_lexeme.1:rax $4.1:r15 $5.1:r14 $6.1:r13 
  .loc 9 62 26
  # token_location.1: @Source_Location = new Source_Location(source = $4.1, line = $5.1, column = $6.1)
  mov [rbp-16], rax
  mov [rbp-24], r13
  mov [rbp-32], r14
  mov [rbp-40], r15
  mov rdi, 24
  call malloc
  #     .source = $4.1
  mov rbx, [rbp-40]
  mov QWORD PTR [rax], rbx
  #     .line = $5.1
  mov r15, [rbp-32]
  mov QWORD PTR [rax+8], r15
  #     .column = $6.1
  mov r14, [rbp-24]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:rax 
  .loc 9 64 21
  # next_char.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-8]
  mov [rbp-24], rax
  call peek_char_345
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:rax 
  .loc 9 65 9
  # $9.1: bool = call(is_identifier_start_349, next_char.1)
  mov dil, al
  mov [rbp-25], al
  call is_identifier_start_349
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:rax 
  # jump($9.1, .LABEL__scan_token_347__2, .LABEL__scan_token_347__3)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_token_347__3
.LABEL__scan_token_347__2:
  .loc 9 66 16
  # $10.1: @Token = call(scan_identifier_token_356, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_identifier_token_356
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $10.1:rax 
  .loc 9 66 9
  # return($10.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
.LABEL__scan_token_347__3:
  .loc 9 68 9
  # $11.1: bool = call(is_digit_348, next_char.1)
  mov dil, [rbp-25]
  call is_digit_348
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:rax 
  # jump($11.1, .LABEL__scan_token_347__5, .LABEL__scan_token_347__6)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_token_347__6
.LABEL__scan_token_347__5:
  .loc 9 69 16
  # $12.1: @Token = call(scan_integer_token_357, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_integer_token_357
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $12.1:rax 
  .loc 9 69 9
  # return($12.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
.LABEL__scan_token_347__6:
  .loc 9 71 9
  # $13.1: bool = next_char.1 == '\''
  cmp BYTE PTR [rbp-25], 39
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:rax 
  # jump($13.1, .LABEL__scan_token_347__8, .LABEL__scan_token_347__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_token_347__9
.LABEL__scan_token_347__8:
  .loc 9 72 16
  # $14.1: @Token = call(scan_character_token_353, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_character_token_353
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $14.1:rax 
  .loc 9 72 9
  # return($14.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
.LABEL__scan_token_347__9:
  .loc 9 74 9
  # $15.1: bool = next_char.1 == '"'
  cmp BYTE PTR [rbp-25], 34
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:rax 
  # jump($15.1, .LABEL__scan_token_347__11, .LABEL__scan_token_347__12)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_token_347__12
.LABEL__scan_token_347__11:
  .loc 9 75 16
  # $16.1: @Token = call(scan_string_token_359, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_string_token_359
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $16.1:rax 
  .loc 9 75 9
  # return($16.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
.LABEL__scan_token_347__12:
  .loc 9 77 9
  # $17.1: bool = next_char.1 == '\\'
  cmp BYTE PTR [rbp-25], 92
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:rax 
  # jump($17.1, .LABEL__scan_token_347__14, .LABEL__scan_token_347__15)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_token_347__15
.LABEL__scan_token_347__14:
  .loc 9 78 16
  # $18.1: @Token = call(scan_comment_token_355, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_comment_token_355
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $18.1:rax 
  .loc 9 78 9
  # return($18.1)
  mov [rbp-38], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
.LABEL__scan_token_347__15:
  .loc 9 80 9
  # $19.1: bool = call(is_space_352, next_char.1)
  mov dil, [rbp-25]
  call is_space_352
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:rax 
  # jump($19.1, .LABEL__scan_token_347__17, .LABEL__scan_token_347__18)
  test al, al
  mov [rbp-31], al
  jz .LABEL__scan_token_347__18
.LABEL__scan_token_347__17:
  .loc 9 81 16
  # $20.1: @Token = call(scan_space_token_358, self.1, token_lexeme.1, token_location.1)
  mov rdi, [rbp-8]
  mov rsi, [rbp-16]
  mov rdx, [rbp-24]
  call scan_space_token_358
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $20.1:rax 
  .loc 9 81 9
  # return($20.1)
  mov [rbp-39], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
.LABEL__scan_token_347__18:
  .loc 9 83 9
  # $21.1: bool = next_char.1 == '\n'
  cmp BYTE PTR [rbp-25], 10
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:rax 
  # jump($21.1, .LABEL__scan_token_347__20, .LABEL__scan_token_347__21)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_token_347__21
.LABEL__scan_token_347__20:
  .loc 9 84 9
  # $22.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-8]
  call next_char_346
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  .loc 9 85 16
  # $23.1: @End_Of_Line_Token = new End_Of_Line_Token(object_type = End_Of_Line_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = End_Of_Line_Token
  mov rbx, End_Of_Line_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $23.1:rax 
  .loc 9 85 9
  # return($23.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
.LABEL__scan_token_347__21:
  .loc 9 87 9
  # $24.1: bool = next_char.1 == '\0'
  cmp BYTE PTR [rbp-25], 0
  sete al
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:rax 
  # jump($24.1, .LABEL__scan_token_347__23, .LABEL__scan_token_347__24)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_token_347__24
.LABEL__scan_token_347__23:
  .loc 9 88 9
  # $25.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-8]
  call next_char_346
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 89 16
  # $26.1: @End_Of_File_Token = new End_Of_File_Token(object_type = End_Of_File_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = End_Of_File_Token
  mov rbx, End_Of_File_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $26.1:rax 
  .loc 9 89 9
  # return($26.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
.LABEL__scan_token_347__24:
  .loc 9 91 25
  # $27.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-8]
  call next_char_346
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $27.1:rax 
  .loc 9 91 5
  # $28.1: @String = call(append_398, token_lexeme.1, $27.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_398
  # [discarded value]: $28.1
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  .loc 9 92 12
  # $29.1: @Other_Token = new Other_Token(object_type = Other_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Other_Token
  mov rbx, Other_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-8] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] $29.1:rax 
  .loc 9 92 5
  # return($29.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_token_347__end
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] $24.1:[rbp-33] 
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] $21.1:[rbp-32] 
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] $19.1:[rbp-31] 
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] $17.1:[rbp-30] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] $15.1:[rbp-29] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] $13.1:[rbp-28] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] $11.1:[rbp-27] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] $9.1:[rbp-26] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-8] token_lexeme.1:[rbp-16] token_location.1:[rbp-24] next_char.1:[rbp-25] 
  # [discarded value]: next_char.1
  # [discarded value]: token_location.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_token_347__end:
  mov rsp, rbp
  pop rbp
  ret

scan_token_347__stack_frame_size: .word 48

  .loc 9 95 8
  .text
is_digit_348:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_digit_348__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_digit_348__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 96 12
  # $1.1: isize = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 96 29
  # $2.1: isize = cast('0')
  mov bl, 48
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 96 12
  # $3.1: bool = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $3.1:r15 
  .loc 9 96 12
  # $4.1: bool = $3.1
  mov [rbp-1], r15b
  # [discarded value]: $3.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_digit_348__2, .LABEL__is_digit_348__3)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_digit_348__3
.LABEL__is_digit_348__2:
  .loc 9 96 45
  # $5.1: isize = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 96 62
  # $6.1: isize = cast('9')
  mov bl, 57
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 96 45
  # $7.1: bool = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $7.1:r15 
  .loc 9 96 12
  # $4.2: bool = $7.1
  mov [rbp-3], r15b
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_digit_348__3)
  mov [rbp-2], r15b
.LABEL__is_digit_348__3:
  .loc 9 96 12
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $4.3:[rbp-2] 
  .loc 9 96 5
  # return($4.3)
  mov al, [rbp-2]
  jmp .LABEL__is_digit_348__end
  # [discarded value]: $4.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_digit_348__end:
  mov rsp, rbp
  pop rbp
  ret

is_digit_348__stack_frame_size: .word 16

  .loc 9 99 8
  .text
is_identifier_start_349:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_start_349__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_start_349__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 100 12
  # $2.1: bool = call(is_letter_351, char.1)
  mov [rbp-1], dil
  call is_letter_351
  # [live values]: char.1:[rbp-1] $2.1:rax 
  # jump($2.1, .LABEL__is_identifier_start_349__3, .LABEL__is_identifier_start_349__2)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_start_349__2
.LABEL__is_identifier_start_349__3:
  .loc 9 100 12
  # $2.3: bool = phi($2.1, $2.2)
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.3:[rbp-2] 
  .loc 9 100 5
  # return($2.3)
  mov al, [rbp-2]
  jmp .LABEL__is_identifier_start_349__end
  # [discarded value]: $2.3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
.LABEL__is_identifier_start_349__2:
  .loc 9 100 32
  # $3.1: bool = char.1 == '_'
  cmp BYTE PTR [rbp-1], 95
  sete al
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $3.1:rax 
  .loc 9 100 12
  # $2.2: bool = $3.1
  mov [rbp-3], al
  # [discarded value]: $3.1
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:rax:[rbp-2] 
  # jump(.LABEL__is_identifier_start_349__3)
  mov [rbp-2], al
  jmp .LABEL__is_identifier_start_349__3
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] $2.2:[rbp-2] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $2.1:[rbp-2] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_start_349__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_start_349__stack_frame_size: .word 16

  .loc 9 103 8
  .text
is_identifier_body_350:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_identifier_body_350__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_identifier_body_350__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 104 9
  # $1.1: bool = call(is_identifier_start_349, char.1)
  mov [rbp-1], dil
  call is_identifier_start_349
  # [live values]: char.1:[rbp-1] $1.1:rax 
  # jump($1.1, .LABEL__is_identifier_body_350__2, .LABEL__is_identifier_body_350__3)
  test al, al
  mov [rbp-2], al
  jz .LABEL__is_identifier_body_350__3
.LABEL__is_identifier_body_350__2:
  .loc 9 105 9
  # return(true)
  mov al, 1
  jmp .LABEL__is_identifier_body_350__end
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
.LABEL__is_identifier_body_350__3:
  .loc 9 107 12
  # $2.1: bool = call(is_digit_348, char.1)
  mov dil, [rbp-1]
  call is_digit_348
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] $2.1:rax 
  .loc 9 107 5
  # return($2.1)
  mov [rbp-3], al
  jmp .LABEL__is_identifier_body_350__end
  # [discarded value]: $2.1
  # [live values]: char.1:[rbp-1] $1.1:[rbp-2] 
  # [discarded value]: $1.1
  # [live values]: char.1:[rbp-1] 
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_identifier_body_350__end:
  mov rsp, rbp
  pop rbp
  ret

is_identifier_body_350__stack_frame_size: .word 16

  .loc 9 110 8
  .text
is_letter_351:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_letter_351__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_letter_351__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 111 13
  # $1.1: isize = cast(char.1)
  mov al, dil
  movsx rax, al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 111 30
  # $2.1: isize = cast('a')
  mov bl, 97
  movsx rbx, bl
  # [live values]: char.1:rdi $1.1:rax $2.1:rbx 
  .loc 9 111 13
  # $3.1: bool = $1.1 >= $2.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $3.1:r15 
  .loc 9 111 13
  # $4.1: bool = $3.1
  mov [rbp-1], r15b
  # [discarded value]: $3.1
  # [live values]: char.1:rdi $4.1:r15 
  # jump($4.1, .LABEL__is_letter_351__4, .LABEL__is_letter_351__5)
  test r15b, r15b
  mov [rbp-1], dil
  mov [rbp-2], r15b
  jz .LABEL__is_letter_351__5
.LABEL__is_letter_351__4:
  .loc 9 111 46
  # $5.1: isize = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax 
  .loc 9 111 63
  # $6.1: isize = cast('z')
  mov bl, 122
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $5.1:rax $6.1:rbx 
  .loc 9 111 46
  # $7.1: bool = $5.1 <= $6.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $7.1:r15 
  .loc 9 111 13
  # $4.2: bool = $7.1
  mov [rbp-3], r15b
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:r15:[rbp-2] 
  # jump(.LABEL__is_letter_351__5)
  mov [rbp-2], r15b
.LABEL__is_letter_351__5:
  .loc 9 111 13
  # $8.1: bool = phi($4.1, $4.2)
  mov al, [rbp-2]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:rax 
  # jump($8.1, .LABEL__is_letter_351__3, .LABEL__is_letter_351__2)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_letter_351__2
.LABEL__is_letter_351__3:
  .loc 9 111 12
  # $8.3: bool = phi($8.1, $8.2)
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $8.3:[rbp-3] $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 5
  # return($8.3)
  mov al, [rbp-3]
  jmp .LABEL__is_letter_351__end
  # [discarded value]: $8.3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
.LABEL__is_letter_351__2:
  .loc 9 111 81
  # $9.1: isize = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 98
  # $10.1: isize = cast('A')
  mov bl, 65
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $9.1:rax $10.1:rbx $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 81
  # $11.1: bool = $9.1 >= $10.1
  cmp rax, rbx
  setge r15b
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $11.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  .loc 9 111 81
  # $12.1: bool = $11.1
  mov [rbp-4], r15b
  # [discarded value]: $11.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:r15 $4.2:[rbp-2] $8.1:[rbp-3] 
  # jump($12.1, .LABEL__is_letter_351__6, .LABEL__is_letter_351__7)
  test r15b, r15b
  mov [rbp-4], r15b
  jz .LABEL__is_letter_351__7
.LABEL__is_letter_351__6:
  .loc 9 111 114
  # $13.1: isize = cast(char.1)
  mov al, [rbp-1]
  movsx rax, al
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax 
  .loc 9 111 131
  # $14.1: isize = cast('Z')
  mov bl, 90
  movsx rbx, bl
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $13.1:rax $14.1:rbx 
  .loc 9 111 114
  # $15.1: bool = $13.1 <= $14.1
  cmp rax, rbx
  setle r15b
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $15.1:r15 
  .loc 9 111 81
  # $12.2: bool = $15.1
  mov [rbp-5], r15b
  # [discarded value]: $15.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:r15:[rbp-4] 
  # jump(.LABEL__is_letter_351__7)
  mov [rbp-4], r15b
.LABEL__is_letter_351__7:
  .loc 9 111 81
  # $8.2: bool = phi($12.1, $12.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:rax:[rbp-3] 
  # jump(.LABEL__is_letter_351__3)
  mov [rbp-3], al
  jmp .LABEL__is_letter_351__3
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] $8.2:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] $12.2:[rbp-4] 
  # [discarded value]: $12.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $12.1:[rbp-4] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $12.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] $8.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] $4.2:[rbp-2] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [live values]: char.1:[rbp-1] $4.1:[rbp-2] 
  # [discarded value]: $4.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_letter_351__end:
  mov rsp, rbp
  pop rbp
  ret

is_letter_351__stack_frame_size: .word 16

  .loc 9 114 8
  .text
is_space_352:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_space_352__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_space_352__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 115 12
  # $1.1: bool = char.1 == ' '
  cmp dil, 32
  sete al
  # [discarded value]: char.1
  # [live values]: $1.1:rax 
  .loc 9 115 5
  # return($1.1)
  mov [rbp-1], al
  jmp .LABEL__is_space_352__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__is_space_352__end:
  mov rsp, rbp
  pop rbp
  ret

is_space_352__stack_frame_size: .word 16

  .loc 9 118 8
  .text
scan_character_token_353:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_character_token_353__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_character_token_353__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 119 9
  # $1.1: i8 = call(peek_char_345, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 119 9
  # $2.1: bool = $1.1 != '\''
  cmp al, 39
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_character_token_353__2, .LABEL__scan_character_token_353__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_character_token_353__3
.LABEL__scan_character_token_353__2:
  .loc 9 120 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_character_token_353__3:
  .loc 9 124 25
  # $3.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 124 5
  # $4.1: @String = call(append_398, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_398
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  .loc 9 125 16
  # char.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:rax 
  .loc 9 126 5
  # $6.1: @String = call(append_398, token_lexeme.1, char.1)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_398
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] 
  .loc 9 127 9
  # $7.1: bool = char.1 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_character_token_353__4, .LABEL__scan_character_token_353__5)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_character_token_353__5
.LABEL__scan_character_token_353__4:
  .loc 9 128 16
  # $8.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 128 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_character_token_353__5:
  .loc 9 130 9
  # $9.1: bool = char.1 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_character_token_353__7, .LABEL__scan_character_token_353__9)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_character_token_353__9
.LABEL__scan_character_token_353__7:
  .loc 9 131 16
  # char.8: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:rax:[rbp-26] 
  .loc 9 132 9
  # $21.1: @String = call(append_398, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_398
  # [discarded value]: $21.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  .loc 9 133 13
  # $22.1: bool = call(is_escape_354, char.8)
  mov dil, [rbp-26]
  call is_escape_354
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $22.1:rax 
  .loc 9 133 13
  # $23.1: bool = $22.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:rbx 
  # jump($23.1, .LABEL__scan_character_token_353__20, .LABEL__scan_character_token_353__21)
  test bl, bl
  mov [rbp-29], bl
  jz .LABEL__scan_character_token_353__21
.LABEL__scan_character_token_353__20:
  .loc 9 134 20
  # $24.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $24.1:rax 
  .loc 9 134 13
  # return($24.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $24.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
.LABEL__scan_character_token_353__21:
  .loc 9 136 13
  # $25.1: bool = char.8 == 'n'
  cmp BYTE PTR [rbp-26], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:rax 
  # jump($25.1, .LABEL__scan_character_token_353__23, .LABEL__scan_character_token_353__25)
  test al, al
  mov [rbp-30], al
  jz .LABEL__scan_character_token_353__25
.LABEL__scan_character_token_353__23:
  .loc 9 137 13
  # value.8: i8 = '\n'
  mov al, 10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:rax 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
.LABEL__scan_character_token_353__24:
  # value.10: i8 = phi(value.8, value.7, value.6, value.5, value.4, value.3)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  .loc 9 151 16
  # char.18: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:rax:[rbp-26] 
  .loc 9 152 9
  # $32.1: @String = call(append_398, token_lexeme.1, char.18)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_398
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] char.18:[rbp-26] 
  .loc 9 153 13
  # $33.1: bool = char.18 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:rax 
  # jump($33.1, .LABEL__scan_character_token_353__41, .LABEL__scan_character_token_353__8)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_353__8
.LABEL__scan_character_token_353__41:
  .loc 9 154 20
  # $34.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] $34.1:rax 
  .loc 9 154 13
  # return($34.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
.LABEL__scan_character_token_353__8:
  # value.9: i8 = phi(value.2, value.10)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] value.9:[rbp-31] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 12
  # $35.1: @Character_Token = new Character_Token(object_type = Character_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.9, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Character_Token
  mov rbx, Character_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.9
  mov r14b, [rbp-31]
  mov BYTE PTR [rax+32], r14b
  # [discarded value]: value.9
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $35.1:rax $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  .loc 9 167 5
  # return($35.1)
  mov [rbp-40], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] $33.1:[rbp-32] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] value.10:[rbp-31] 
  # [discarded value]: value.10
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] value.8:[rbp-31] 
  # [discarded value]: value.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
.LABEL__scan_character_token_353__25:
  .loc 9 138 20
  # $26.1: bool = char.8 == '\"'
  cmp BYTE PTR [rbp-26], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:rax 
  # jump($26.1, .LABEL__scan_character_token_353__26, .LABEL__scan_character_token_353__28)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_353__28
.LABEL__scan_character_token_353__26:
  .loc 9 139 13
  # value.7: i8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_353__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] value.7:[rbp-31] 
  # [discarded value]: value.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
.LABEL__scan_character_token_353__28:
  .loc 9 140 20
  # $27.1: bool = char.8 == '\''
  cmp BYTE PTR [rbp-26], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:rax 
  # jump($27.1, .LABEL__scan_character_token_353__29, .LABEL__scan_character_token_353__31)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_353__31
.LABEL__scan_character_token_353__29:
  .loc 9 141 13
  # value.6: i8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_353__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] value.6:[rbp-31] 
  # [discarded value]: value.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
.LABEL__scan_character_token_353__31:
  .loc 9 142 20
  # $28.1: bool = char.8 == '\\'
  cmp BYTE PTR [rbp-26], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:rax 
  # jump($28.1, .LABEL__scan_character_token_353__32, .LABEL__scan_character_token_353__34)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_353__34
.LABEL__scan_character_token_353__32:
  .loc 9 143 13
  # value.5: i8 = char.8
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_353__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] value.5:[rbp-31] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
.LABEL__scan_character_token_353__34:
  .loc 9 144 20
  # $29.1: bool = char.8 == 't'
  cmp BYTE PTR [rbp-26], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:rax 
  # jump($29.1, .LABEL__scan_character_token_353__35, .LABEL__scan_character_token_353__37)
  test al, al
  mov [rbp-35], al
  jz .LABEL__scan_character_token_353__37
.LABEL__scan_character_token_353__35:
  .loc 9 145 13
  # value.4: i8 = '\t'
  mov al, 9
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_353__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] value.4:[rbp-31] 
  # [discarded value]: value.4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
.LABEL__scan_character_token_353__37:
  .loc 9 146 20
  # $30.1: bool = char.8 == '0'
  cmp BYTE PTR [rbp-26], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:rax 
  # jump($30.1, .LABEL__scan_character_token_353__38, .LABEL__scan_character_token_353__40)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_character_token_353__40
.LABEL__scan_character_token_353__38:
  .loc 9 147 13
  # value.3: i8 = '\0'
  mov al, 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:rax:[rbp-31] 
  # jump(.LABEL__scan_character_token_353__24)
  mov [rbp-31], al
  jmp .LABEL__scan_character_token_353__24
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] value.3:[rbp-31] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
.LABEL__scan_character_token_353__40:
  .loc 9 149 13
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] $30.1:[rbp-36] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] $29.1:[rbp-35] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] $28.1:[rbp-34] 
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] $27.1:[rbp-33] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] $26.1:[rbp-32] 
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] $25.1:[rbp-30] 
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] $23.1:[rbp-29] 
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] char.8:[rbp-26] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_character_token_353__9:
  .loc 9 157 13
  # $10.1: bool = char.1 == '\0'
  cmp BYTE PTR [rbp-26], 0
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  .loc 9 157 13
  # $11.1: bool = $10.1
  mov [rbp-32], al
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_character_token_353__13, .LABEL__scan_character_token_353__12)
  test al, al
  mov [rbp-32], al
  jz .LABEL__scan_character_token_353__12
.LABEL__scan_character_token_353__13:
  .loc 9 157 13
  # $13.1: bool = phi($11.1, $11.2)
  mov al, [rbp-32]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:rax 
  # jump($13.1, .LABEL__scan_character_token_353__11, .LABEL__scan_character_token_353__10)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_character_token_353__10
.LABEL__scan_character_token_353__11:
  .loc 9 157 13
  # $13.3: bool = phi($13.1, $13.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # jump($13.3, .LABEL__scan_character_token_353__14, .LABEL__scan_character_token_353__15)
  mov al, [rbp-33]
  test al, al
  jz .LABEL__scan_character_token_353__15
.LABEL__scan_character_token_353__14:
  .loc 9 158 20
  # $15.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] $15.1:rax 
  .loc 9 158 13
  # return($15.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
.LABEL__scan_character_token_353__15:
  .loc 9 160 9
  # value.2: i8 = char.1
  mov al, [rbp-26]
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:rax:[rbp-31] 
  .loc 9 161 16
  # char.7: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  mov [rbp-31], al
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:rax:[rbp-26] 
  .loc 9 162 9
  # $17.1: @String = call(append_398, token_lexeme.1, char.7)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-26], al
  call append_398
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] char.7:[rbp-26] 
  .loc 9 163 13
  # $18.1: bool = char.7 != '\''
  cmp BYTE PTR [rbp-26], 39
  setne al
  # [discarded value]: char.7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:rax 
  # jump($18.1, .LABEL__scan_character_token_353__17, .LABEL__scan_character_token_353__8)
  test al, al
  mov [rbp-34], al
  jz .LABEL__scan_character_token_353__8
.LABEL__scan_character_token_353__17:
  .loc 9 164 20
  # $19.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] $19.1:rax 
  .loc 9 164 13
  # return($19.1)
  mov [rbp-42], rax
  jmp .LABEL__scan_character_token_353__end
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] $18.1:[rbp-34] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] value.2:[rbp-31] 
  # [discarded value]: value.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.3:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
.LABEL__scan_character_token_353__10:
  .loc 9 157 45
  # $14.1: bool = char.1 == '\t'
  cmp BYTE PTR [rbp-26], 9
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $14.1:rax $13.1:[rbp-33] 
  .loc 9 157 13
  # $13.2: bool = $14.1
  mov [rbp-34], al
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:rax:[rbp-33] $13.1:[rbp-33] 
  # jump(.LABEL__scan_character_token_353__11)
  mov [rbp-33], al
  jmp .LABEL__scan_character_token_353__11
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.2:[rbp-33] $13.1:[rbp-33] 
  # [discarded value]: $13.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $13.1:[rbp-33] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
.LABEL__scan_character_token_353__12:
  .loc 9 157 29
  # $12.1: bool = char.1 == '\n'
  cmp BYTE PTR [rbp-26], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $12.1:rax 
  .loc 9 157 13
  # $11.2: bool = $12.1
  mov [rbp-33], al
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:rax:[rbp-32] 
  # jump(.LABEL__scan_character_token_353__13)
  mov [rbp-32], al
  jmp .LABEL__scan_character_token_353__13
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] $11.2:[rbp-32] 
  # [discarded value]: $11.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-32] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] char.1:[rbp-26] 
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_character_token_353__end:
  mov rsp, rbp
  pop rbp
  ret

scan_character_token_353__stack_frame_size: .word 48

  .loc 9 170 8
  .text
is_escape_354:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_escape_354__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_escape_354__1:
  # char.1: i8 = load_variable(char)
  # [live values]: char.1:rdi 
  .loc 9 171 12
  # $1.1: bool = char.1 == 'n'
  cmp dil, 110
  sete al
  # [live values]: char.1:rdi $1.1:rax 
  .loc 9 171 12
  # $2.1: bool = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: char.1:rdi $2.1:rax 
  # jump($2.1, .LABEL__is_escape_354__11, .LABEL__is_escape_354__10)
  test al, al
  mov [rbp-1], al
  mov [rbp-2], dil
  jz .LABEL__is_escape_354__10
.LABEL__is_escape_354__11:
  .loc 9 171 12
  # $4.1: bool = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__is_escape_354__9, .LABEL__is_escape_354__8)
  test al, al
  mov [rbp-3], al
  jz .LABEL__is_escape_354__8
.LABEL__is_escape_354__9:
  .loc 9 171 12
  # $6.1: bool = phi($4.1, $4.2)
  mov al, [rbp-3]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:rax $4.1:[rbp-3] 
  # jump($6.1, .LABEL__is_escape_354__7, .LABEL__is_escape_354__6)
  test al, al
  mov [rbp-4], al
  jz .LABEL__is_escape_354__6
.LABEL__is_escape_354__7:
  .loc 9 171 12
  # $8.1: bool = phi($6.1, $6.2)
  mov al, [rbp-4]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($8.1, .LABEL__is_escape_354__5, .LABEL__is_escape_354__4)
  test al, al
  mov [rbp-5], al
  jz .LABEL__is_escape_354__4
.LABEL__is_escape_354__5:
  .loc 9 171 12
  # $10.1: bool = phi($8.1, $8.2)
  mov al, [rbp-5]
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump($10.1, .LABEL__is_escape_354__3, .LABEL__is_escape_354__2)
  test al, al
  mov [rbp-6], al
  jz .LABEL__is_escape_354__2
.LABEL__is_escape_354__3:
  .loc 9 171 12
  # $10.3: bool = phi($10.1, $10.2)
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.3:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 5
  # return($10.3)
  mov al, [rbp-6]
  jmp .LABEL__is_escape_354__end
  # [discarded value]: $10.3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_354__2:
  .loc 9 171 90
  # $11.1: bool = char.1 == '0'
  cmp BYTE PTR [rbp-2], 48
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $11.1:rax $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $10.2: bool = $11.1
  mov [rbp-7], al
  # [discarded value]: $11.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:rax:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_354__3)
  mov [rbp-6], al
  jmp .LABEL__is_escape_354__3
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.2:[rbp-6] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $10.1:[rbp-6] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $10.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_354__4:
  .loc 9 171 74
  # $9.1: bool = char.1 == '\\'
  cmp BYTE PTR [rbp-2], 92
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $9.1:rax $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $8.2: bool = $9.1
  mov [rbp-6], al
  # [discarded value]: $9.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:rax:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_354__5)
  mov [rbp-5], al
  jmp .LABEL__is_escape_354__5
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.2:[rbp-5] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $8.1:[rbp-5] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $8.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
.LABEL__is_escape_354__6:
  .loc 9 171 58
  # $7.1: bool = char.1 == '\''
  cmp BYTE PTR [rbp-2], 39
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $7.1:rax $6.1:[rbp-4] $4.1:[rbp-3] 
  .loc 9 171 12
  # $6.2: bool = $7.1
  mov [rbp-5], al
  # [discarded value]: $7.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:rax:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_354__7)
  mov [rbp-4], al
  jmp .LABEL__is_escape_354__7
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.2:[rbp-4] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $6.1:[rbp-4] $4.1:[rbp-3] 
  # [discarded value]: $6.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
.LABEL__is_escape_354__8:
  .loc 9 171 42
  # $5.1: bool = char.1 == '\"'
  cmp BYTE PTR [rbp-2], 34
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $5.1:rax $4.1:[rbp-3] 
  .loc 9 171 12
  # $4.2: bool = $5.1
  mov [rbp-4], al
  # [discarded value]: $5.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:rax:[rbp-3] $4.1:[rbp-3] 
  # jump(.LABEL__is_escape_354__9)
  mov [rbp-3], al
  jmp .LABEL__is_escape_354__9
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.2:[rbp-3] $4.1:[rbp-3] 
  # [discarded value]: $4.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $4.1:[rbp-3] 
  # [discarded value]: $4.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
.LABEL__is_escape_354__10:
  .loc 9 171 27
  # $3.1: bool = char.1 == 't'
  cmp BYTE PTR [rbp-2], 116
  sete al
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $3.1:rax 
  .loc 9 171 12
  # $2.2: bool = $3.1
  mov [rbp-3], al
  # [discarded value]: $3.1
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:rax:[rbp-1] 
  # jump(.LABEL__is_escape_354__11)
  mov [rbp-1], al
  jmp .LABEL__is_escape_354__11
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [live values]: char.1:[rbp-2] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [live values]: 
.LABEL__is_escape_354__end:
  mov rsp, rbp
  pop rbp
  ret

is_escape_354__stack_frame_size: .word 16

  .loc 9 174 8
  .text
scan_comment_token_355:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_comment_token_355__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_comment_token_355__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_comment_token_355__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_comment_token_355__2:
  .loc 9 175 12
  # $1.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-24]
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 175 12
  # $2.1: bool = $1.1 != '\n'
  cmp al, 10
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_comment_token_355__3, .LABEL__scan_comment_token_355__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_comment_token_355__4
.LABEL__scan_comment_token_355__3:
  .loc 9 176 29
  # $3.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 176 9
  # $4.1: @String = call(append_398, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_398
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_comment_token_355__2)
  jmp .LABEL__scan_comment_token_355__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_comment_token_355__4:
  .loc 9 178 12
  # $5.1: @Comment_Token = new Comment_Token(object_type = Comment_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Comment_Token
  mov rbx, Comment_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] $5.1:rax 
  .loc 9 178 5
  # return($5.1)
  mov [rbp-33], rax
  jmp .LABEL__scan_comment_token_355__end
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_comment_token_355__end:
  mov rsp, rbp
  pop rbp
  ret

scan_comment_token_355__stack_frame_size: .word 48

  .loc 9 181 8
  .text
scan_identifier_token_356:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_identifier_token_356__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_identifier_token_356__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  # jump(.LABEL__scan_identifier_token_356__2)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__scan_identifier_token_356__2:
  .loc 9 182 12
  # $1.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-24]
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 182 12
  # $2.1: bool = call(is_identifier_body_350, $1.1)
  mov dil, al
  call is_identifier_body_350
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_identifier_token_356__3, .LABEL__scan_identifier_token_356__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__scan_identifier_token_356__4
.LABEL__scan_identifier_token_356__3:
  .loc 9 183 29
  # $3.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $3.1:rax 
  .loc 9 183 9
  # $4.1: @String = call(append_398, token_lexeme.1, $3.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_398
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
  # jump(.LABEL__scan_identifier_token_356__2)
  jmp .LABEL__scan_identifier_token_356__2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_identifier_token_356__4:
  .loc 9 185 9
  # $5.1: bool = call(equals_392, token_lexeme.1, "false")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_371[rip] # "false"
  call equals_392
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:rax 
  # jump($5.1, .LABEL__scan_identifier_token_356__5, .LABEL__scan_identifier_token_356__6)
  test al, al
  mov [rbp-26], al
  jz .LABEL__scan_identifier_token_356__6
.LABEL__scan_identifier_token_356__5:
  .loc 9 186 16
  # $6.1: @Boolean_Token = new Boolean_Token(object_type = Boolean_Token, lexeme = token_lexeme.1, location = token_location.1, value = false, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Boolean_Token
  mov rbx, Boolean_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = false
  mov BYTE PTR [rax+32], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $6.1:rax 
  .loc 9 186 9
  # return($6.1)
  mov [rbp-34], rax
  jmp .LABEL__scan_identifier_token_356__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] 
.LABEL__scan_identifier_token_356__6:
  .loc 9 188 9
  # $7.1: bool = call(equals_392, token_lexeme.1, "null")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_372[rip] # "null"
  call equals_392
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:rax 
  # jump($7.1, .LABEL__scan_identifier_token_356__8, .LABEL__scan_identifier_token_356__9)
  test al, al
  mov [rbp-27], al
  jz .LABEL__scan_identifier_token_356__9
.LABEL__scan_identifier_token_356__8:
  .loc 9 189 16
  # $8.1: @Null_Token = new Null_Token(object_type = Null_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Null_Token
  mov rbx, Null_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $8.1:rax 
  .loc 9 189 9
  # return($8.1)
  mov [rbp-35], rax
  jmp .LABEL__scan_identifier_token_356__end
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
.LABEL__scan_identifier_token_356__9:
  .loc 9 191 9
  # $9.1: bool = call(equals_392, token_lexeme.1, "true")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_373[rip] # "true"
  call equals_392
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:rax 
  # jump($9.1, .LABEL__scan_identifier_token_356__11, .LABEL__scan_identifier_token_356__12)
  test al, al
  mov [rbp-28], al
  jz .LABEL__scan_identifier_token_356__12
.LABEL__scan_identifier_token_356__11:
  .loc 9 192 16
  # $10.1: @Boolean_Token = new Boolean_Token(object_type = Boolean_Token, lexeme = token_lexeme.1, location = token_location.1, value = true, next_token = null)
  mov rdi, 33
  call malloc
  #     .object_type = Boolean_Token
  mov rbx, Boolean_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = true
  mov BYTE PTR [rax+32], 1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $10.1:rax 
  .loc 9 192 9
  # return($10.1)
  mov [rbp-36], rax
  jmp .LABEL__scan_identifier_token_356__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
.LABEL__scan_identifier_token_356__12:
  .loc 9 194 9
  # $11.1: bool = call(equals_392, token_lexeme.1, "undefined")
  mov rdi, [rbp-16]
  lea rsi, .LABEL__string_258[rip] # "undefined"
  call equals_392
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:rax 
  # jump($11.1, .LABEL__scan_identifier_token_356__14, .LABEL__scan_identifier_token_356__15)
  test al, al
  mov [rbp-29], al
  jz .LABEL__scan_identifier_token_356__15
.LABEL__scan_identifier_token_356__14:
  .loc 9 195 16
  # $12.1: @Undefined_Token = new Undefined_Token(object_type = Undefined_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Undefined_Token
  mov rbx, Undefined_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $12.1:rax 
  .loc 9 195 9
  # return($12.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_identifier_token_356__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
.LABEL__scan_identifier_token_356__15:
  .loc 9 197 12
  # $13.1: @Identifier_Token = new Identifier_Token(object_type = Identifier_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Identifier_Token
  mov rbx, Identifier_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] $13.1:rax 
  .loc 9 197 5
  # return($13.1)
  mov [rbp-37], rax
  jmp .LABEL__scan_identifier_token_356__end
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] $11.1:[rbp-29] 
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] $9.1:[rbp-28] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] $7.1:[rbp-27] 
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_identifier_token_356__end:
  mov rsp, rbp
  pop rbp
  ret

scan_identifier_token_356__stack_frame_size: .word 48

  .loc 9 200 8
  .text
scan_integer_token_357:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_integer_token_357__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_integer_token_357__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 201 9
  # value.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx value.1:rax 
  # jump(.LABEL__scan_integer_token_357__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_integer_token_357__2:
  # value.5: isize = phi(value.1, value.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] 
  .loc 9 202 12
  # $1.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-32]
  call peek_char_345
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $1.1:rax 
  .loc 9 202 12
  # $2.1: bool = call(is_digit_348, $1.1)
  mov dil, al
  call is_digit_348
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__scan_integer_token_357__3, .LABEL__scan_integer_token_357__4)
  test al, al
  mov [rbp-33], al
  jz .LABEL__scan_integer_token_357__4
.LABEL__scan_integer_token_357__3:
  .loc 9 203 20
  # char.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-32]
  call next_char_346
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 204 17
  # $4.1: isize = value.5 * 10
  mov rbx, [rbp-8]
  imul rbx, 10
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx 
  .loc 9 204 31
  # $5.1: isize = cast(char.1)
  mov r15b, al
  movsx r15, r15b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 
  .loc 9 204 47
  # $6.1: isize = cast('0')
  mov r14b, 48
  movsx r14, r14b
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $5.1:r15 $6.1:r14 
  .loc 9 204 31
  # $7.1: isize = $5.1 - $6.1
  mov r13, r15
  sub r13, r14
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx $7.1:r13 
  .loc 9 204 17
  # $8.1: isize = $4.1 + $7.1
  mov r15, rbx
  add r15, r13
  # [discarded value]: $7.1
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax $8.1:r15 
  .loc 9 204 9
  # value.3: isize = $8.1
  mov [rbp-41], r15
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] char.1:rax value.3:r15:[rbp-8] 
  .loc 9 205 9
  # $9.1: @String = call(append_398, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], r15
  call append_398
  # [discarded value]: $9.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # jump(.LABEL__scan_integer_token_357__2)
  jmp .LABEL__scan_integer_token_357__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] value.3:[rbp-8] 
  # [discarded value]: value.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_integer_token_357__4:
  .loc 9 207 12
  # $10.1: @Integer_Token = new Integer_Token(object_type = Integer_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.5, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = Integer_Token
  mov rbx, Integer_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.5
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] value.1:[rbp-8] value.5:r14:[rbp-8] $2.1:[rbp-33] $10.1:rax 
  .loc 9 207 5
  # return($10.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_integer_token_357__end
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] value.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] value.5:[rbp-8] 
  # [discarded value]: value.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] value.1:[rbp-8] 
  # [discarded value]: value.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_integer_token_357__end:
  mov rsp, rbp
  pop rbp
  ret

scan_integer_token_357__stack_frame_size: .word 48

  .loc 9 210 8
  .text
scan_space_token_358:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_space_token_358__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_space_token_358__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 211 9
  # count.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx count.1:rax 
  # jump(.LABEL__scan_space_token_358__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
  mov [rbp-32], rdi
.LABEL__scan_space_token_358__2:
  # count.5: isize = phi(count.1, count.3)
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] 
  .loc 9 212 12
  # $1.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-32]
  call peek_char_345
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $1.1:rax 
  .loc 9 212 12
  # $2.1: bool = $1.1 == ' '
  cmp al, 32
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_space_token_358__3, .LABEL__scan_space_token_358__4)
  test bl, bl
  mov [rbp-33], bl
  jz .LABEL__scan_space_token_358__4
.LABEL__scan_space_token_358__3:
  .loc 9 213 20
  # char.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-32]
  call next_char_346
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax 
  .loc 9 214 17
  # $4.1: isize = count.5 + 1
  mov rbx, [rbp-8]
  inc rbx
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax $4.1:rbx 
  .loc 9 214 9
  # count.3: isize = $4.1
  mov [rbp-41], rbx
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] char.1:rax count.3:rbx:[rbp-8] 
  .loc 9 215 9
  # $5.1: @String = call(append_398, token_lexeme.1, char.1)
  mov rdi, [rbp-24]
  mov sil, al
  mov [rbp-8], rbx
  call append_398
  # [discarded value]: $5.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # jump(.LABEL__scan_space_token_358__2)
  jmp .LABEL__scan_space_token_358__2
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] count.3:[rbp-8] 
  # [discarded value]: count.3
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] token_location.1:[rbp-16] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
.LABEL__scan_space_token_358__4:
  .loc 9 217 12
  # $6.1: @Space_Token = new Space_Token(object_type = Space_Token, lexeme = token_lexeme.1, location = token_location.1, count = count.5, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = Space_Token
  mov rbx, Space_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-24]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .count = count.5
  mov r14, [rbp-8]
  mov QWORD PTR [rax+32], r14
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:rbx:[rbp-24] count.1:[rbp-8] count.5:r14:[rbp-8] $2.1:[rbp-33] $6.1:rax 
  .loc 9 217 5
  # return($6.1)
  mov [rbp-41], rax
  jmp .LABEL__scan_space_token_358__end
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] count.5:[rbp-8] $2.1:[rbp-33] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] count.5:[rbp-8] 
  # [discarded value]: count.5
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] 
  # [live values]: self.1:[rbp-32] token_lexeme.1:[rbp-24] count.1:[rbp-8] 
  # [discarded value]: count.1
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_space_token_358__end:
  mov rsp, rbp
  pop rbp
  ret

scan_space_token_358__stack_frame_size: .word 48

  .loc 9 220 8
  .text
scan_string_token_359:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR scan_string_token_359__stack_frame_size[rip]
  sub rsp, rax
.LABEL__scan_string_token_359__1:
  # self.1: @Scanner = load_variable(self)
  # [live values]: self.1:rdi 
  # token_lexeme.1: @String = load_variable(token_lexeme)
  # [live values]: self.1:rdi token_lexeme.1:rsi 
  # token_location.1: @Source_Location = load_variable(token_location)
  # [live values]: self.1:rdi token_lexeme.1:rsi token_location.1:rdx 
  .loc 9 221 9
  # $1.1: i8 = call(peek_char_345, self.1)
  mov [rbp-8], rdx
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $1.1:rax 
  .loc 9 221 9
  # $2.1: bool = $1.1 != '"'
  cmp al, 34
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__scan_string_token_359__2, .LABEL__scan_string_token_359__3)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__scan_string_token_359__3
.LABEL__scan_string_token_359__2:
  .loc 9 222 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] 
.LABEL__scan_string_token_359__3:
  .loc 14 4 21
  # $4.1: [i8; ?] = call(malloc, 16)
  mov rdi, 16
  call malloc
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] $4.1:rax 
  .loc 9 225 17
  # value.1: @String = new String(data = $4.1, data_size = 16, length = 0)
  mov [rbp-33], rax
  mov rdi, 24
  call malloc
  #     .data = $4.1
  mov rbx, [rbp-33]
  mov QWORD PTR [rax], rbx
  #     .data_size = 16
  mov QWORD PTR [rax+8], 16
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:rax 
  .loc 9 227 25
  # $6.1: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  mov [rbp-33], rax
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] $6.1:rax 
  .loc 9 227 5
  # $7.1: @String = call(append_398, token_lexeme.1, $6.1)
  mov rdi, [rbp-16]
  mov sil, al
  call append_398
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] 
  # jump(.LABEL__scan_string_token_359__4)
.LABEL__scan_string_token_359__4:
  .loc 9 229 20
  # char.1: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-24]
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax 
  .loc 9 230 13
  # $9.1: bool = char.1 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax $9.1:rbx 
  .loc 9 230 13
  # $10.1: bool = $9.1
  mov [rbp-34], bl
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:rax $10.1:rbx 
  # jump($10.1, .LABEL__scan_string_token_359__7, .LABEL__scan_string_token_359__6)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-35], bl
  jz .LABEL__scan_string_token_359__6
.LABEL__scan_string_token_359__7:
  .loc 9 230 13
  # $10.3: bool = phi($10.1, $10.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # jump($10.3, .LABEL__scan_string_token_359__8, .LABEL__scan_string_token_359__9)
  mov al, [rbp-35]
  test al, al
  jz .LABEL__scan_string_token_359__9
.LABEL__scan_string_token_359__8:
  .loc 9 231 20
  # $12.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] $12.1:rax 
  .loc 9 231 13
  # return($12.1)
  mov [rbp-43], rax
  jmp .LABEL__scan_string_token_359__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
.LABEL__scan_string_token_359__9:
  .loc 9 233 16
  # char.3: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:rax:[rbp-34] 
  .loc 9 234 9
  # $14.1: @String = call(append_398, token_lexeme.1, char.3)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_398
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  .loc 9 235 13
  # $15.1: bool = char.3 == '"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:rax 
  # jump($15.1, .LABEL__scan_string_token_359__11, .LABEL__scan_string_token_359__12)
  test al, al
  mov [rbp-36], al
  jz .LABEL__scan_string_token_359__12
.LABEL__scan_string_token_359__11:
  .loc 9 236 20
  # $16.1: @String_Token = new String_Token(object_type = String_Token, lexeme = token_lexeme.1, location = token_location.1, value = value.1, next_token = null)
  mov rdi, 40
  call malloc
  #     .object_type = String_Token
  mov rbx, String_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  #     .value = value.1
  mov r14, [rbp-33]
  mov QWORD PTR [rax+32], r14
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:r14:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $16.1:rax 
  .loc 9 236 13
  # return($16.1)
  mov [rbp-44], rax
  jmp .LABEL__scan_string_token_359__end
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
.LABEL__scan_string_token_359__12:
  .loc 9 238 13
  # $17.1: bool = char.3 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:rax 
  # jump($17.1, .LABEL__scan_string_token_359__14, .LABEL__scan_string_token_359__16)
  test al, al
  mov [rbp-37], al
  jz .LABEL__scan_string_token_359__16
.LABEL__scan_string_token_359__14:
  .loc 9 239 20
  # char.6: i8 = call(peek_char_345, self.1)
  mov rdi, [rbp-24]
  call peek_char_345
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] 
  .loc 9 240 17
  # $20.1: bool = char.6 == '\0'
  cmp al, 0
  sete bl
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] $20.1:rbx 
  .loc 9 240 17
  # $21.1: bool = $20.1
  mov [rbp-38], bl
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:rax:[rbp-34] $21.1:rbx 
  # jump($21.1, .LABEL__scan_string_token_359__18, .LABEL__scan_string_token_359__17)
  test bl, bl
  mov [rbp-34], al
  mov [rbp-38], bl
  jz .LABEL__scan_string_token_359__17
.LABEL__scan_string_token_359__18:
  .loc 9 240 17
  # $21.3: bool = phi($21.1, $21.2)
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # jump($21.3, .LABEL__scan_string_token_359__19, .LABEL__scan_string_token_359__20)
  mov al, [rbp-38]
  test al, al
  jz .LABEL__scan_string_token_359__20
.LABEL__scan_string_token_359__19:
  .loc 9 241 24
  # $23.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] token_location.1:r15:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] $23.1:rax 
  .loc 9 241 17
  # return($23.1)
  mov [rbp-46], rax
  jmp .LABEL__scan_string_token_359__end
  # [discarded value]: $23.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
.LABEL__scan_string_token_359__20:
  .loc 9 243 20
  # char.8: i8 = call(next_char_346, self.1)
  mov rdi, [rbp-24]
  call next_char_346
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:rax:[rbp-34] 
  .loc 9 244 13
  # $25.1: @String = call(append_398, token_lexeme.1, char.8)
  mov rdi, [rbp-16]
  mov sil, al
  mov [rbp-34], al
  call append_398
  # [discarded value]: $25.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  .loc 9 245 17
  # $26.1: bool = call(is_escape_354, char.8)
  mov dil, [rbp-34]
  call is_escape_354
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $26.1:rax 
  .loc 9 245 17
  # $27.1: bool = $26.1 == false
  cmp al, 0
  sete bl
  # [discarded value]: $26.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] token_location.1:[rbp-8] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:rbx 
  # jump($27.1, .LABEL__scan_string_token_359__22, .LABEL__scan_string_token_359__23)
  test bl, bl
  mov [rbp-39], bl
  jz .LABEL__scan_string_token_359__23
.LABEL__scan_string_token_359__22:
  .loc 9 246 24
  # $28.1: @Error_Token = new Error_Token(object_type = Error_Token, lexeme = token_lexeme.1, location = token_location.1, next_token = null)
  mov rdi, 32
  call malloc
  #     .object_type = Error_Token
  mov rbx, Error_Token[rip]
  mov [rax], rbx
  #     .lexeme = token_lexeme.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+8], rbx
  #     .location = token_location.1
  mov r15, [rbp-8]
  mov QWORD PTR [rax+16], r15
  #     .next_token = null
  mov QWORD PTR [rax+24], 0
  # [discarded value]: token_location.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:rbx:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $28.1:rax 
  .loc 9 246 17
  # return($28.1)
  mov [rbp-47], rax
  jmp .LABEL__scan_string_token_359__end
  # [discarded value]: $28.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
.LABEL__scan_string_token_359__23:
  .loc 9 248 17
  # $29.1: bool = char.8 == 'n'
  cmp BYTE PTR [rbp-34], 110
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:rax 
  # jump($29.1, .LABEL__scan_string_token_359__25, .LABEL__scan_string_token_359__27)
  test al, al
  mov [rbp-40], al
  jz .LABEL__scan_string_token_359__27
.LABEL__scan_string_token_359__25:
  .loc 9 249 17
  # $40.1: @String = call(append_398, value.1, '\n')
  mov rdi, [rbp-33]
  mov sil, 10
  call append_398
  # [discarded value]: $40.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
.LABEL__scan_string_token_359__27:
  .loc 9 250 24
  # $30.1: bool = char.8 == '\"'
  cmp BYTE PTR [rbp-34], 34
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:rax 
  # jump($30.1, .LABEL__scan_string_token_359__28, .LABEL__scan_string_token_359__30)
  test al, al
  mov [rbp-41], al
  jz .LABEL__scan_string_token_359__30
.LABEL__scan_string_token_359__28:
  .loc 9 251 17
  # $39.1: @String = call(append_398, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_398
  # [discarded value]: $39.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
.LABEL__scan_string_token_359__30:
  .loc 9 252 24
  # $31.1: bool = char.8 == '\''
  cmp BYTE PTR [rbp-34], 39
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:rax 
  # jump($31.1, .LABEL__scan_string_token_359__31, .LABEL__scan_string_token_359__33)
  test al, al
  mov [rbp-42], al
  jz .LABEL__scan_string_token_359__33
.LABEL__scan_string_token_359__31:
  .loc 9 253 17
  # $38.1: @String = call(append_398, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_398
  # [discarded value]: $38.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
.LABEL__scan_string_token_359__33:
  .loc 9 254 24
  # $32.1: bool = char.8 == '\\'
  cmp BYTE PTR [rbp-34], 92
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:rax 
  # jump($32.1, .LABEL__scan_string_token_359__34, .LABEL__scan_string_token_359__36)
  test al, al
  mov [rbp-43], al
  jz .LABEL__scan_string_token_359__36
.LABEL__scan_string_token_359__34:
  .loc 9 255 17
  # $37.1: @String = call(append_398, value.1, char.8)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_398
  # [discarded value]: $37.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
.LABEL__scan_string_token_359__36:
  .loc 9 256 24
  # $33.1: bool = char.8 == 't'
  cmp BYTE PTR [rbp-34], 116
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:rax 
  # jump($33.1, .LABEL__scan_string_token_359__37, .LABEL__scan_string_token_359__39)
  test al, al
  mov [rbp-44], al
  jz .LABEL__scan_string_token_359__39
.LABEL__scan_string_token_359__37:
  .loc 9 257 17
  # $36.1: @String = call(append_398, value.1, '\t')
  mov rdi, [rbp-33]
  mov sil, 9
  call append_398
  # [discarded value]: $36.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
.LABEL__scan_string_token_359__39:
  .loc 9 258 24
  # $34.1: bool = char.8 == '0'
  cmp BYTE PTR [rbp-34], 48
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:rax 
  # jump($34.1, .LABEL__scan_string_token_359__40, .LABEL__scan_string_token_359__42)
  test al, al
  mov [rbp-45], al
  jz .LABEL__scan_string_token_359__42
.LABEL__scan_string_token_359__40:
  .loc 9 259 17
  # $35.1: @String = call(append_398, value.1, '\0')
  mov rdi, [rbp-33]
  mov sil, 0
  call append_398
  # [discarded value]: $35.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
.LABEL__scan_string_token_359__42:
  .loc 9 261 17
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] $34.1:[rbp-45] 
  # [discarded value]: $34.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] $33.1:[rbp-44] 
  # [discarded value]: $33.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] $32.1:[rbp-43] 
  # [discarded value]: $32.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] $31.1:[rbp-42] 
  # [discarded value]: $31.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] $30.1:[rbp-41] 
  # [discarded value]: $30.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] $29.1:[rbp-40] 
  # [discarded value]: $29.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] $27.1:[rbp-39] 
  # [discarded value]: $27.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] char.8:[rbp-34] 
  # [discarded value]: char.8
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.3:[rbp-38] 
  # [discarded value]: $21.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
.LABEL__scan_string_token_359__17:
  .loc 9 240 33
  # $22.1: bool = char.6 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $22.1:rax 
  .loc 9 240 17
  # $21.2: bool = $22.1
  mov [rbp-39], al
  # [discarded value]: $22.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:rax:[rbp-38] 
  # jump(.LABEL__scan_string_token_359__18)
  mov [rbp-38], al
  jmp .LABEL__scan_string_token_359__18
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] $21.2:[rbp-38] 
  # [discarded value]: $21.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] char.6:[rbp-34] $21.1:[rbp-38] 
  # [discarded value]: $21.1
  # [discarded value]: char.6
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
.LABEL__scan_string_token_359__16:
  .loc 9 264 13
  # $18.1: @String = call(append_398, value.1, char.3)
  mov rdi, [rbp-33]
  mov sil, [rbp-34]
  call append_398
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # jump(.LABEL__scan_string_token_359__4)
  jmp .LABEL__scan_string_token_359__4
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] $17.1:[rbp-37] 
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] $15.1:[rbp-36] 
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] char.3:[rbp-34] 
  # [discarded value]: char.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.3:[rbp-35] 
  # [discarded value]: $10.3
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
.LABEL__scan_string_token_359__6:
  .loc 9 230 29
  # $11.1: bool = char.1 == '\n'
  cmp BYTE PTR [rbp-34], 10
  sete al
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $11.1:rax 
  .loc 9 230 13
  # $10.2: bool = $11.1
  mov [rbp-36], al
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:rax:[rbp-35] 
  # jump(.LABEL__scan_string_token_359__7)
  mov [rbp-35], al
  jmp .LABEL__scan_string_token_359__7
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] $10.2:[rbp-35] 
  # [discarded value]: $10.2
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] char.1:[rbp-34] $10.1:[rbp-35] 
  # [discarded value]: $10.1
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] value.1:[rbp-33] 
  # [discarded value]: value.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] token_lexeme.1:[rbp-16] 
  # [discarded value]: token_lexeme.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__scan_string_token_359__end:
  mov rsp, rbp
  pop rbp
  ret

scan_string_token_359__stack_frame_size: .word 48

  .loc 1 327 8
  .text
abort_360:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_360__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_360__1:
  # location.1: @Source_Location = load_variable(location)
  # [live values]: location.1:rdi 
  # message.1: @String = load_variable(message)
  # [live values]: location.1:rdi message.1:rsi 
  .loc 1 328 5
  # $1.1: @FILE = call(end_line_386, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  mov [rbp-16], rsi
  call end_line_386
  # [live values]: location.1:[rbp-8] message.1:[rbp-16] $1.1:rax 
  .loc 1 328 5
  # $2.1: @FILE = call(write_363, $1.1, location.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_363
  # [discarded value]: $1.1
  # [discarded value]: location.1
  # [live values]: message.1:[rbp-16] $2.1:rax 
  .loc 1 328 5
  # $3.1: @FILE = call(write_383, $2.1, ": ")
  mov rdi, rax
  lea rsi, .LABEL__string_93[rip] # ": "
  call write_383
  # [discarded value]: $2.1
  # [live values]: message.1:[rbp-16] $3.1:rax 
  .loc 1 328 5
  # $4.1: @FILE = call(write_383, $3.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-16]
  call write_383
  # [discarded value]: $3.1
  # [discarded value]: message.1
  # [live values]: $4.1:rax 
  .loc 1 328 5
  # $5.1: @FILE = call(end_line_386, $4.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $5.1
  # [discarded value]: $4.1
  # [live values]: 
  .loc 1 329 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_360__end:
  mov rsp, rbp
  pop rbp
  ret

abort_360__stack_frame_size: .word 16

  .loc 1 334 8
  .text
write_361:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_361__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_361__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # token.1: @Token = load_variable(token)
  # [live values]: file.1:rdi token.1:rsi 
  .loc 1 335 9
  # $1.1: bool = call(is_389, token.1, Other_Token)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, Other_Token[rip]
  call is_389
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:rax 
  # jump($1.1, .LABEL__write_361__2, .LABEL__write_361__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__write_361__4
.LABEL__write_361__2:
  .loc 1 336 20
  # $10.1: i8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $10.1:rax 
  .loc 1 336 9
  # $11.1: @FILE = call(write_385, file.1, $10.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_385
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $11.1:rax 
  .loc 1 336 9
  # $12.1: @FILE = call(write_383, $11.1, "[2;37m")
  mov rdi, rax
  lea rsi, .LABEL__string_374[rip] # "[2;37m"
  call write_383
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  # jump(.LABEL__write_361__3)
.LABEL__write_361__3:
  .loc 1 342 16
  # $13.1: @String = load_struct_member(token.1, lexeme)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: file.1:[rbp-8] token.1:rax:[rbp-16] $1.1:[rbp-17] $13.1:rbx 
  .loc 1 342 5
  # $14.1: @FILE = call(write_383, file.1, $13.1)
  mov rdi, [rbp-8]
  mov rsi, rbx
  call write_383
  # [discarded value]: $14.1
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  .loc 1 343 16
  # $15.1: i8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $15.1:rax 
  .loc 1 343 5
  # $16.1: @FILE = call(write_385, file.1, $15.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_385
  # [discarded value]: $15.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $16.1:rax 
  .loc 1 343 5
  # $17.1: @FILE = call(write_383, $16.1, "[0m")
  mov rdi, rax
  lea rsi, .LABEL__string_375[rip] # "[0m"
  call write_383
  # [discarded value]: $17.1
  # [discarded value]: $16.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  .loc 1 344 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_361__end
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
.LABEL__write_361__4:
  .loc 1 337 16
  # $2.1: bool = call(is_389, token.1, Literal_Token)
  mov rdi, [rbp-16]
  mov rsi, Literal_Token[rip]
  call is_389
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:rax 
  # jump($2.1, .LABEL__write_361__5, .LABEL__write_361__7)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_361__7
.LABEL__write_361__5:
  .loc 1 338 20
  # $7.1: i8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $7.1:rax 
  .loc 1 338 9
  # $8.1: @FILE = call(write_385, file.1, $7.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_385
  # [discarded value]: $7.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $8.1:rax 
  .loc 1 338 9
  # $9.1: @FILE = call(write_383, $8.1, "[1;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_376[rip] # "[1;33m"
  call write_383
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
  # jump(.LABEL__write_361__3)
  jmp .LABEL__write_361__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
.LABEL__write_361__7:
  .loc 1 339 16
  # $3.1: bool = call(is_389, token.1, Comment_Token)
  mov rdi, [rbp-16]
  mov rsi, Comment_Token[rip]
  call is_389
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:rax 
  # jump($3.1, .LABEL__write_361__8, .LABEL__write_361__3)
  test al, al
  mov [rbp-19], al
  jz .LABEL__write_361__3
.LABEL__write_361__8:
  .loc 1 340 20
  # $4.1: i8 = cast(27)
  mov rax, 27
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $4.1:rax 
  .loc 1 340 9
  # $5.1: @FILE = call(write_385, file.1, $4.1)
  mov rdi, [rbp-8]
  mov sil, al
  call write_385
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] $5.1:rax 
  .loc 1 340 9
  # $6.1: @FILE = call(write_383, $5.1, "[2;33m")
  mov rdi, rax
  lea rsi, .LABEL__string_377[rip] # "[2;33m"
  call write_383
  # [discarded value]: $6.1
  # [discarded value]: $5.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
  # jump(.LABEL__write_361__3)
  jmp .LABEL__write_361__3
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] $3.1:[rbp-19] 
  # [discarded value]: $3.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] $1.1:[rbp-17] 
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] token.1:[rbp-16] 
  # [discarded value]: token.1
  # [discarded value]: file.1
  # [live values]: 
.LABEL__write_361__end:
  mov rsp, rbp
  pop rbp
  ret

write_361__stack_frame_size: .word 32

  .loc 11 15 8
  .text
create_source_362:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_source_362__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_source_362__1:
  # file_path.1: @String = load_variable(file_path)
  # [live values]: file_path.1:rdi 
  .loc 11 16 22
  # $1.1: [i8; ?] = load_struct_member(file_path.1, data)
  mov rax, [rdi]
  # [live values]: file_path.1:rdi $1.1:rax 
  .loc 11 16 38
  # $2.1: [i8; ?] = load_struct_member("r", data)
  lea rbx, .LABEL__string_378[rip] # "r"
  mov r15, [rbx]
  # [live values]: file_path.1:rdi $1.1:rax $2.1:r15 
  .loc 11 16 16
  # file.1: @FILE = call(fopen, $1.1, $2.1)
  mov [rbp-8], rdi
  mov rdi, rax
  mov rsi, r15
  call fopen
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: file_path.1:[rbp-8] file.1:rax 
  .loc 11 17 9
  # $4.1: bool = file.1 == null
  cmp rax, 0
  sete bl
  # [live values]: file_path.1:[rbp-8] file.1:rax $4.1:rbx 
  # jump($4.1, .LABEL__create_source_362__2, .LABEL__create_source_362__3)
  test bl, bl
  mov [rbp-16], rax
  mov [rbp-17], bl
  jz .LABEL__create_source_362__3
.LABEL__create_source_362__2:
  .loc 11 18 9
  # return(null)
  xor rax, rax
  jmp .LABEL__create_source_362__end
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] 
.LABEL__create_source_362__3:
  .loc 11 21 9
  # content_size.1: isize = 1024
  mov rax, 1024
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:rax 
  .loc 11 22 19
  # content.1: [i8; ?] = call(malloc, content_size.1)
  mov rdi, rax
  mov [rbp-25], rax
  call malloc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax 
  .loc 11 23 9
  # content_length.1: isize = 0
  xor rbx, rbx
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:rax content_length.1:rbx 
  # jump(.LABEL__create_source_362__5)
  mov [rbp-33], rax
  mov [rbp-41], rbx
.LABEL__create_source_362__5:
  # content_size.5: isize = phi(content_size.1, content_size.6)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] 
  # content_length.6: isize = phi(content_length.1, content_length.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] 
  # content.6: [i8; ?] = phi(content.1, content.4)
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] 
  .loc 11 25 20
  # char.1: i32 = call(fgetc, file.1)
  mov rdi, [rbp-16]
  call fgetc
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:rax 
  .loc 11 26 13
  # $8.1: i32 = call(feof, file.1)
  mov rdi, [rbp-16]
  mov [rbp-45], eax
  call feof
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $8.1:rax 
  .loc 11 26 13
  # $9.1: isize = cast($8.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $8.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $9.1:rbx 
  .loc 11 26 13
  # $10.1: bool = $9.1 != 0
  cmp rbx, 0
  setne al
  # [discarded value]: $9.1
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:rax 
  # jump($10.1, .LABEL__create_source_362__6, .LABEL__create_source_362__8)
  test al, al
  mov [rbp-46], al
  jz .LABEL__create_source_362__8
.LABEL__create_source_362__6:
  .loc 11 36 5
  # store_array_item(content.6, content_length.6, '\0')
  mov rax, [rbp-33]
  mov rbx, [rbp-41]
  add rax, rbx
  mov BYTE PTR [rax], 0
  # [live values]: file_path.1:[rbp-8] file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  .loc 11 38 12
  # $19.1: @Source = new Source(file_path = file_path.1, content = content.6, id = undefined)
  mov rdi, 24
  call malloc
  #     .id = undefined
  #     .file_path = file_path.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .content = content.6
  mov r15, [rbp-33]
  mov QWORD PTR [rax+16], r15
  # [discarded value]: file_path.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:r15:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $19.1:rax 
  .loc 11 38 5
  # return($19.1)
  mov [rbp-54], rax
  jmp .LABEL__create_source_362__end
  # [discarded value]: $19.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
.LABEL__create_source_362__8:
  .loc 11 29 13
  # $11.1: isize = content_length.6 + 1
  mov rax, [rbp-41]
  inc rax
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax 
  .loc 11 29 34
  # $12.1: isize = content_size.5 - 1
  mov rbx, [rbp-25]
  dec rbx
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $11.1:rax $12.1:rbx 
  .loc 11 29 13
  # $13.1: bool = $11.1 > $12.1
  cmp rax, rbx
  setg r15b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:r15 
  # jump($13.1, .LABEL__create_source_362__10, .LABEL__create_source_362__11)
  test r15b, r15b
  mov [rbp-47], r15b
  jz .LABEL__create_source_362__11
.LABEL__create_source_362__10:
  .loc 11 30 28
  # $14.1: isize = content_size.5 + 1024
  mov rax, [rbp-25]
  add rax, 1024
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] $14.1:rax 
  .loc 11 30 13
  # content_size.4: isize = $14.1
  mov [rbp-55], rax
  # [discarded value]: $14.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:rax:[rbp-25] 
  .loc 11 31 23
  # content.3: [i8; ?] = call(realloc, content.6, content_size.4)
  mov rdi, [rbp-33]
  mov rsi, rax
  mov [rbp-25], rax
  call realloc
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:rax:[rbp-33] 
  # jump(.LABEL__create_source_362__11)
  mov [rbp-33], rax
.LABEL__create_source_362__11:
  # content_size.6: isize = phi(content_size.4, content_size.5)
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] 
  # content.4: [i8; ?] = phi(content.6, content.3)
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 33 35
  # $17.1: i8 = cast(char.1)
  mov eax, [rbp-45]
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] $17.1:rax 
  .loc 11 33 9
  # store_array_item(content.4, content_length.6, $17.1)
  mov rbx, [rbp-33]
  mov r15, [rbp-41]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [discarded value]: $17.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] 
  .loc 11 34 26
  # $18.1: isize = content_length.6 + 1
  mov rax, [rbp-41]
  inc rax
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] $18.1:rax 
  .loc 11 34 9
  # content_length.4: isize = $18.1
  mov [rbp-55], rax
  # [discarded value]: $18.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:rax:[rbp-41] 
  # jump(.LABEL__create_source_362__5)
  mov [rbp-41], rax
  jmp .LABEL__create_source_362__5
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] content_size.6:[rbp-25] content.4:[rbp-33] content_length.4:[rbp-41] 
  # [discarded value]: content_length.4
  # [discarded value]: content.4
  # [discarded value]: content_size.6
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] content_size.4:[rbp-25] content.3:[rbp-33] 
  # [discarded value]: content.3
  # [discarded value]: content_size.4
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] $13.1:[rbp-47] 
  # [discarded value]: $13.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] $10.1:[rbp-46] 
  # [discarded value]: $10.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] content_size.5:[rbp-25] content_length.6:[rbp-41] content.6:[rbp-33] char.1:[rbp-45] 
  # [discarded value]: char.1
  # [discarded value]: content.6
  # [discarded value]: content_length.6
  # [discarded value]: content_size.5
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] content_size.1:[rbp-25] content.1:[rbp-33] content_length.1:[rbp-41] 
  # [discarded value]: content_length.1
  # [discarded value]: content.1
  # [discarded value]: content_size.1
  # [live values]: file.1:[rbp-16] $4.1:[rbp-17] 
  # [discarded value]: $4.1
  # [live values]: file.1:[rbp-16] 
  # [discarded value]: file.1
  # [live values]: 
.LABEL__create_source_362__end:
  mov rsp, rbp
  pop rbp
  ret

create_source_362__stack_frame_size: .word 64

  .loc 1 349 8
  .text
write_363:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_363__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_363__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # location.1: @Source_Location = load_variable(location)
  # [live values]: self.1:rdi location.1:rsi 
  .loc 1 350 9
  # $1.1: bool = location.1 == null
  cmp rsi, 0
  sete al
  # [live values]: self.1:rdi location.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_363__2, .LABEL__write_363__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_363__3
.LABEL__write_363__2:
  .loc 1 351 16
  # $2.1: @FILE = call(write_383, self.1, "null")
  mov rdi, [rbp-17]
  lea rsi, .LABEL__string_372[rip] # "null"
  call write_383
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 351 9
  # return($2.1)
  mov [rbp-25], rax
  jmp .LABEL__write_363__end
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_363__3:
  .loc 1 353 23
  # $3.1: @Source = load_struct_member(location.1, source)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $3.1:rbx 
  .loc 1 353 23
  # $4.1: @String = load_struct_member($3.1, file_path)
  mov r15, [rbx+8]
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-17] location.1:rax:[rbp-9] $1.1:[rbp-1] $4.1:r15 
  .loc 1 353 12
  # $5.1: @FILE = call(write_383, self.1, $4.1)
  mov rdi, [rbp-17]
  mov rsi, r15
  call write_383
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  .loc 1 353 12
  # $6.1: @FILE = call(write_385, $5.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $6.1:rax 
  .loc 1 353 67
  # $7.1: isize = load_struct_member(location.1, line)
  mov rbx, [rbp-9]
  mov r15, [rbx+8]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $6.1:rax $7.1:r15 
  .loc 1 353 12
  # $8.1: @FILE = call(write_382, $6.1, $7.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $8.1:rax 
  .loc 1 353 12
  # $9.1: @FILE = call(write_385, $8.1, ':')
  mov rdi, rax
  mov sil, 58
  call write_385
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $9.1:rax 
  .loc 1 353 99
  # $10.1: isize = load_struct_member(location.1, column)
  mov rbx, [rbp-9]
  mov r15, [rbx+16]
  # [live values]: self.1:[rbp-17] location.1:rbx:[rbp-9] $1.1:[rbp-1] $9.1:rax $10.1:r15 
  .loc 1 353 12
  # $11.1: @FILE = call(write_382, $9.1, $10.1)
  mov rdi, rax
  mov rsi, r15
  call write_382
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] $11.1:rax 
  .loc 1 353 5
  # return($11.1)
  mov [rbp-25], rax
  jmp .LABEL__write_363__end
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] location.1:[rbp-9] 
  # [discarded value]: location.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_363__end:
  mov rsp, rbp
  pop rbp
  ret

write_363__stack_frame_size: .word 32

  .loc 12 9 8
  .text
append_364:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_364__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_364__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 10 55
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 10 16
  # item.1: @List_Item = new List_Item(data = data.1, prev_item = $1.1, next_item = null, is_removed = false)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  #     .prev_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax], rbx
  #     .next_item = null
  mov QWORD PTR [rax+8], 0
  #     .data = data.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .is_removed = false
  mov BYTE PTR [rax+24], 0
  # [discarded value]: $1.1
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 11 9
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rbx, [rbp-24]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 11 9
  # $4.1: bool = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__append_364__2, .LABEL__append_364__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__append_364__4
.LABEL__append_364__2:
  .loc 12 12 9
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_364__3)
.LABEL__append_364__3:
  .loc 12 16 5
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 17 17
  # $6.1: isize = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 17 17
  # $7.1: isize = $6.1 + 1
  mov r14, r15
  inc r14
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 17 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__append_364__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__append_364__4:
  .loc 12 14 9
  # $5.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-24]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 14 9
  # store_struct_member($5.1, next_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__append_364__3)
  jmp .LABEL__append_364__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_364__end:
  mov rsp, rbp
  pop rbp
  ret

append_364__stack_frame_size: .word 48

  .loc 12 20 8
  .text
prepend_365:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prepend_365__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prepend_365__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 21 55
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 21 16
  # item.1: @List_Item = new List_Item(data = data.1, next_item = $1.1, prev_item = null, is_removed = false)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
  mov rdi, 25
  call malloc
  #     .prev_item = null
  mov QWORD PTR [rax], 0
  #     .next_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  #     .data = data.1
  mov r15, [rbp-16]
  mov QWORD PTR [rax+16], r15
  #     .is_removed = false
  mov BYTE PTR [rax+24], 0
  # [discarded value]: $1.1
  # [discarded value]: data.1
  # [live values]: self.1:[rbp-24] item.1:rax 
  .loc 12 22 9
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $3.1:r15 
  .loc 12 22 9
  # $4.1: bool = $3.1 == null
  cmp r15, 0
  sete r14b
  # [discarded value]: $3.1
  # [live values]: self.1:rbx:[rbp-24] item.1:rax $4.1:r14 
  # jump($4.1, .LABEL__prepend_365__2, .LABEL__prepend_365__4)
  test r14b, r14b
  mov [rbp-32], rax
  mov [rbp-33], r14b
  jz .LABEL__prepend_365__4
.LABEL__prepend_365__2:
  .loc 12 23 9
  # store_struct_member(self.1, last_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax+8], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_365__3)
.LABEL__prepend_365__3:
  .loc 12 27 5
  # store_struct_member(self.1, first_item, item.1)
  mov rax, [rbp-24]
  mov rbx, [rbp-32]
  mov QWORD PTR [rax], rbx
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  .loc 12 28 17
  # $6.1: isize = load_struct_member(self.1, size)
  mov r15, [rax+16]
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $6.1:r15 
  .loc 12 28 17
  # $7.1: isize = $6.1 + 1
  mov r14, r15
  inc r14
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] $7.1:r14 
  .loc 12 28 5
  # store_struct_member(self.1, size, $7.1)
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-24] item.1:rbx:[rbp-32] $4.1:[rbp-33] 
  # return()
  jmp .LABEL__prepend_365__end
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
.LABEL__prepend_365__4:
  .loc 12 25 9
  # $5.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-24]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] $5.1:rbx 
  .loc 12 25 9
  # store_struct_member($5.1, prev_item, item.1)
  mov r15, [rbp-32]
  mov QWORD PTR [rbx], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-24] item.1:r15:[rbp-32] $4.1:[rbp-33] 
  # jump(.LABEL__prepend_365__3)
  jmp .LABEL__prepend_365__3
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] $4.1:[rbp-33] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] item.1:[rbp-32] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prepend_365__end:
  mov rsp, rbp
  pop rbp
  ret

prepend_365__stack_frame_size: .word 48

  .loc 12 31 8
  .text
remove_366:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_366__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_366__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 32 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_366__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_366__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 33 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_366__3, .LABEL__remove_366__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_366__4
.LABEL__remove_366__3:
  .loc 12 34 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 34 13
  # $4.1: bool = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_366__5, .LABEL__remove_366__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_366__6
.LABEL__remove_366__5:
  .loc 12 35 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_366__4)
.LABEL__remove_366__4:
  .loc 12 40 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_366__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__remove_366__6:
  .loc 12 38 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_366__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_366__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_366__end:
  mov rsp, rbp
  pop rbp
  ret

remove_366__stack_frame_size: .word 32

  .loc 12 43 8
  .text
remove_all_367:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_all_367__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_all_367__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 44 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi item.1:rax 
  # jump(.LABEL__remove_all_367__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__remove_all_367__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 45 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__remove_all_367__3, .LABEL__remove_all_367__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__remove_all_367__4
.LABEL__remove_all_367__3:
  .loc 12 46 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 46 13
  # $4.1: bool = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__remove_all_367__5, .LABEL__remove_all_367__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__remove_all_367__6
.LABEL__remove_all_367__5:
  .loc 12 47 13
  # store_struct_member(item.2, is_removed, true)
  mov rax, [rbp-8]
  mov BYTE PTR [rax+24], 1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__remove_all_367__6)
.LABEL__remove_all_367__6:
  .loc 12 49 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__remove_all_367__2)
  mov [rbp-8], rbx
  jmp .LABEL__remove_all_367__2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__remove_all_367__4:
  .loc 12 51 5
  # return(self.1)
  mov rax, [rbp-24]
  jmp .LABEL__remove_all_367__end
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_all_367__end:
  mov rsp, rbp
  pop rbp
  ret

remove_all_367__stack_frame_size: .word 32

  .loc 12 54 8
  .text
prune_368:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR prune_368__stack_frame_size[rip]
  sub rsp, rax
.LABEL__prune_368__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 55 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi item.1:rax 
  # jump(.LABEL__prune_368__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__prune_368__2:
  # item.2: @List_Item = phi(item.1, item.13)
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 56 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__prune_368__3, .LABEL__prune_368__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__prune_368__4
.LABEL__prune_368__3:
  .loc 12 57 13
  # $3.1: bool = load_struct_member(item.2, is_removed)
  mov rax, [rbp-8]
  mov bl, [rax+24]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  # jump($3.1, .LABEL__prune_368__5, .LABEL__prune_368__6)
  test bl, bl
  mov [rbp-18], bl
  jz .LABEL__prune_368__6
.LABEL__prune_368__5:
  .loc 12 58 17
  # $4.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $4.1:rbx 
  .loc 12 58 17
  # $5.1: bool = $4.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:r15 
  # jump($5.1, .LABEL__prune_368__7, .LABEL__prune_368__8)
  test r15b, r15b
  mov [rbp-19], r15b
  jz .LABEL__prune_368__8
.LABEL__prune_368__7:
  .loc 12 59 17
  # $6.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx 
  .loc 12 59 44
  # $7.1: @List_Item = load_struct_member(item.2, next_item)
  mov r15, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $6.1:rbx $7.1:r15 
  .loc 12 59 17
  # store_struct_member($6.1, next_item, $7.1)
  mov QWORD PTR [rbx+8], r15
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # jump(.LABEL__prune_368__8)
.LABEL__prune_368__8:
  .loc 12 61 17
  # $8.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $8.1:rbx 
  .loc 12 61 17
  # $9.1: bool = $8.1 != null
  cmp rbx, 0
  setne r15b
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:r15 
  # jump($9.1, .LABEL__prune_368__9, .LABEL__prune_368__10)
  test r15b, r15b
  mov [rbp-20], r15b
  jz .LABEL__prune_368__10
.LABEL__prune_368__9:
  .loc 12 62 17
  # $10.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx 
  .loc 12 62 44
  # $11.1: @List_Item = load_struct_member(item.2, prev_item)
  mov r15, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $10.1:rbx $11.1:r15 
  .loc 12 62 17
  # store_struct_member($10.1, prev_item, $11.1)
  mov QWORD PTR [rbx], r15
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # jump(.LABEL__prune_368__10)
.LABEL__prune_368__10:
  .loc 12 64 17
  # $12.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $12.1:rbx 
  .loc 12 64 17
  # $13.1: bool = $12.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:r15 
  # jump($13.1, .LABEL__prune_368__11, .LABEL__prune_368__12)
  test r15b, r15b
  mov [rbp-21], r15b
  jz .LABEL__prune_368__12
.LABEL__prune_368__11:
  .loc 12 65 35
  # $14.1: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $14.1:rbx 
  .loc 12 65 17
  # store_struct_member(self.1, first_item, $14.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15], rbx
  # [discarded value]: $14.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # jump(.LABEL__prune_368__12)
.LABEL__prune_368__12:
  .loc 12 67 17
  # $15.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $15.1:rbx 
  .loc 12 67 17
  # $16.1: bool = $15.1 == item.2
  cmp rbx, QWORD PTR [rbp-8]
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:r15 
  # jump($16.1, .LABEL__prune_368__13, .LABEL__prune_368__14)
  test r15b, r15b
  mov [rbp-22], r15b
  jz .LABEL__prune_368__14
.LABEL__prune_368__13:
  .loc 12 68 34
  # $17.1: @List_Item = load_struct_member(item.2, prev_item)
  mov rax, [rbp-8]
  mov rbx, [rax]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $17.1:rbx 
  .loc 12 68 17
  # store_struct_member(self.1, last_item, $17.1)
  mov r15, [rbp-16]
  mov QWORD PTR [r15+8], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:r15:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_368__14)
.LABEL__prune_368__14:
  .loc 12 70 25
  # $18.1: isize = load_struct_member(self.1, size)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $18.1:rbx 
  .loc 12 70 25
  # $19.1: isize = $18.1 - 1
  mov r15, rbx
  dec r15
  # [discarded value]: $18.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] $19.1:r15 
  .loc 12 70 13
  # store_struct_member(self.1, size, $19.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $19.1
  # [live values]: self.1:rax:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_368__6)
.LABEL__prune_368__6:
  .loc 12 72 16
  # item.13: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:rbx:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # jump(.LABEL__prune_368__2)
  mov [rbp-8], rbx
  jmp .LABEL__prune_368__2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] item.13:[rbp-8] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: item.13
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] $16.1:[rbp-22] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] $13.1:[rbp-21] 
  # [discarded value]: $13.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] $9.1:[rbp-20] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] $5.1:[rbp-19] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $3.1:[rbp-18] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__prune_368__4:
  .loc 12 74 5
  # return(self.1)
  mov rax, [rbp-16]
  jmp .LABEL__prune_368__end
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: self.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__prune_368__end:
  mov rsp, rbp
  pop rbp
  ret

prune_368__stack_frame_size: .word 32

  .loc 12 77 8
  .text
replace_369:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR replace_369__stack_frame_size[rip]
  sub rsp, rax
.LABEL__replace_369__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  # new_data.1: @Any = load_variable(new_data)
  # [live values]: self.1:rdi data.1:rsi new_data.1:rdx 
  .loc 12 78 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi new_data.1:rdx item.1:rax 
  # jump(.LABEL__replace_369__2)
  mov [rbp-8], rax
  mov [rbp-16], rdx
  mov [rbp-24], rsi
.LABEL__replace_369__2:
  # item.2: @List_Item = phi(item.1, item.6)
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 79 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__replace_369__3, .LABEL__replace_369__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__replace_369__4
.LABEL__replace_369__3:
  .loc 12 80 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 80 13
  # $4.1: bool = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__replace_369__5, .LABEL__replace_369__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__replace_369__6
.LABEL__replace_369__5:
  .loc 12 81 13
  # store_struct_member(item.2, data, new_data.1)
  mov rax, [rbp-8]
  mov rbx, [rbp-16]
  mov QWORD PTR [rax+16], rbx
  # [live values]: data.1:[rbp-24] new_data.1:rbx:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # jump(.LABEL__replace_369__6)
.LABEL__replace_369__6:
  .loc 12 83 16
  # item.6: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:rbx:[rbp-8] 
  # jump(.LABEL__replace_369__2)
  mov [rbp-8], rbx
  jmp .LABEL__replace_369__2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] item.6:[rbp-8] 
  # [discarded value]: item.6
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
.LABEL__replace_369__4:
  # return()
  jmp .LABEL__replace_369__end
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-24] new_data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: new_data.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__replace_369__end:
  mov rsp, rbp
  pop rbp
  ret

replace_369__stack_frame_size: .word 32

  .loc 12 87 8
  .text
contains_370:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR contains_370__stack_frame_size[rip]
  sub rsp, rax
.LABEL__contains_370__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 88 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi item.1:rax 
  # jump(.LABEL__contains_370__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__contains_370__2:
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  .loc 12 89 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-8], 0
  setne al
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__contains_370__3, .LABEL__contains_370__4)
  test al, al
  mov [rbp-17], al
  jz .LABEL__contains_370__4
.LABEL__contains_370__3:
  .loc 12 90 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $3.1:rbx 
  .loc 12 90 13
  # $4.1: bool = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-16]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:rax:[rbp-8] $2.1:[rbp-17] $4.1:r15 
  # jump($4.1, .LABEL__contains_370__5, .LABEL__contains_370__6)
  test r15b, r15b
  mov [rbp-18], r15b
  jz .LABEL__contains_370__6
.LABEL__contains_370__5:
  .loc 12 91 13
  # return(true)
  mov al, 1
  jmp .LABEL__contains_370__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
.LABEL__contains_370__6:
  .loc 12 93 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-8]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:rbx:[rbp-8] 
  # jump(.LABEL__contains_370__2)
  mov [rbp-8], rbx
  jmp .LABEL__contains_370__2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] item.5:[rbp-8] 
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__contains_370__4:
  .loc 12 95 5
  # return(false)
  mov al, 0
  jmp .LABEL__contains_370__end
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] item.2:[rbp-8] 
  # [discarded value]: item.2
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] item.1:[rbp-8] 
  # [discarded value]: item.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__contains_370__end:
  mov rsp, rbp
  pop rbp
  ret

contains_370__stack_frame_size: .word 32

  .loc 12 98 8
  .text
index_of_371:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_371__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_371__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 99 9
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi data.1:rsi index.1:rax 
  .loc 12 100 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rbx, [rdi]
  # [discarded value]: self.1
  # [live values]: data.1:rsi index.1:rax item.1:rbx 
  # jump(.LABEL__index_of_371__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  mov [rbp-24], rsi
.LABEL__index_of_371__2:
  # index.5: isize = phi(index.1, index.4)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] 
  # item.2: @List_Item = phi(item.1, item.5)
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  .loc 12 101 12
  # $2.1: bool = item.2 != null
  cmp QWORD PTR [rbp-16], 0
  setne al
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:rax 
  # jump($2.1, .LABEL__index_of_371__3, .LABEL__index_of_371__4)
  test al, al
  mov [rbp-25], al
  jz .LABEL__index_of_371__4
.LABEL__index_of_371__3:
  .loc 12 102 13
  # $3.1: @Any = load_struct_member(item.2, data)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $3.1:rbx 
  .loc 12 102 13
  # $4.1: bool = $3.1 == data.1
  cmp rbx, QWORD PTR [rbp-24]
  sete r15b
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:rax:[rbp-16] $2.1:[rbp-25] $4.1:r15 
  # jump($4.1, .LABEL__index_of_371__5, .LABEL__index_of_371__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__index_of_371__6
.LABEL__index_of_371__5:
  .loc 12 103 13
  # return(index.5)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_371__end
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
.LABEL__index_of_371__6:
  .loc 12 105 16
  # item.5: @List_Item = load_struct_member(item.2, next_item)
  mov rax, [rbp-16]
  mov rbx, [rax+8]
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] 
  .loc 12 106 17
  # $6.1: isize = index.5 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] $6.1:rax 
  .loc 12 106 9
  # index.4: isize = $6.1
  mov [rbp-34], rax
  # [discarded value]: $6.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:rbx:[rbp-16] index.4:rax:[rbp-8] 
  # jump(.LABEL__index_of_371__2)
  mov [rbp-8], rax
  mov [rbp-16], rbx
  jmp .LABEL__index_of_371__2
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] item.5:[rbp-16] index.4:[rbp-8] 
  # [discarded value]: index.4
  # [discarded value]: item.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
.LABEL__index_of_371__4:
  .loc 12 108 12
  # $7.1: isize =  - 1
  mov rax, 1
  neg rax
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] $7.1:rax 
  .loc 12 108 5
  # return($7.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_371__end
  # [discarded value]: $7.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] $2.1:[rbp-25] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] index.5:[rbp-8] item.2:[rbp-16] 
  # [discarded value]: item.2
  # [discarded value]: index.5
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [live values]: data.1:[rbp-24] index.1:[rbp-8] item.1:[rbp-16] 
  # [discarded value]: item.1
  # [discarded value]: index.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__index_of_371__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_371__stack_frame_size: .word 48

  .loc 12 111 8
  .text
get_372:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR get_372__stack_frame_size[rip]
  sub rsp, rax
.LABEL__get_372__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  # index.1: isize = load_variable(index)
  # [live values]: self.1:rdi index.1:rsi 
  .loc 12 112 18
  # $1.1: isize = load_struct_member(self.1, size)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi index.1:rsi $1.1:rax 
  .loc 12 112 9
  # $2.1: bool = index.1 >= $1.1
  cmp rsi, rax
  setge bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi index.1:rsi $2.1:rbx 
  .loc 12 112 9
  # $3.1: bool = $2.1
  mov [rbp-1], bl
  # [discarded value]: $2.1
  # [live values]: self.1:rdi index.1:rsi $3.1:rbx 
  # jump($3.1, .LABEL__get_372__3, .LABEL__get_372__2)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__get_372__2
.LABEL__get_372__3:
  .loc 12 112 9
  # $3.3: bool = phi($3.1, $3.2)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # jump($3.3, .LABEL__get_372__4, .LABEL__get_372__5)
  mov al, [rbp-1]
  test al, al
  jz .LABEL__get_372__5
.LABEL__get_372__4:
  .loc 12 113 9
  # return(null)
  xor rax, rax
  jmp .LABEL__get_372__end
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
.LABEL__get_372__5:
  .loc 12 115 16
  # item.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:rbx 
  # jump(.LABEL__get_372__7)
  mov [rbp-25], rbx
.LABEL__get_372__7:
  # item.5: @List_Item = phi(item.1, item.3)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] 
  # index.3: isize = phi(index.5, index.1)
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  .loc 12 116 12
  # $6.1: bool = index.3 > 0
  cmp QWORD PTR [rbp-9], 0
  setg al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:rax 
  # jump($6.1, .LABEL__get_372__8, .LABEL__get_372__9)
  test al, al
  mov [rbp-26], al
  jz .LABEL__get_372__9
.LABEL__get_372__8:
  .loc 12 117 16
  # item.3: @List_Item = load_struct_member(item.5, next_item)
  mov rax, [rbp-25]
  mov rbx, [rax+8]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] 
  .loc 12 118 17
  # $8.1: isize = index.3 - 1
  mov rax, [rbp-9]
  dec rax
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] $8.1:rax 
  .loc 12 118 9
  # index.5: isize = $8.1
  mov [rbp-34], rax
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:rbx:[rbp-25] index.5:rax:[rbp-9] 
  # jump(.LABEL__get_372__7)
  mov [rbp-9], rax
  mov [rbp-25], rbx
  jmp .LABEL__get_372__7
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] item.3:[rbp-25] index.5:[rbp-9] 
  # [discarded value]: index.5
  # [discarded value]: item.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
.LABEL__get_372__9:
  .loc 12 120 12
  # $9.1: @Any = load_struct_member(item.5, data)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:rax:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] $9.1:rbx 
  .loc 12 120 5
  # return($9.1)
  mov rax, rbx
  mov [rbp-34], rbx
  jmp .LABEL__get_372__end
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] $6.1:[rbp-26] 
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] item.5:[rbp-25] index.3:[rbp-9] 
  # [discarded value]: index.3
  # [discarded value]: item.5
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] item.1:[rbp-25] 
  # [discarded value]: item.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.3:[rbp-1] 
  # [discarded value]: $3.3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
.LABEL__get_372__2:
  .loc 12 112 31
  # $4.1: bool = index.1 < 0
  cmp QWORD PTR [rbp-9], 0
  setl al
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $4.1:rax 
  .loc 12 112 9
  # $3.2: bool = $4.1
  mov [rbp-18], al
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:rax:[rbp-1] 
  # jump(.LABEL__get_372__3)
  mov [rbp-1], al
  jmp .LABEL__get_372__3
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] $3.2:[rbp-1] 
  # [discarded value]: $3.2
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] index.1:[rbp-9] $3.1:[rbp-1] 
  # [discarded value]: $3.1
  # [discarded value]: index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__get_372__end:
  mov rsp, rbp
  pop rbp
  ret

get_372__stack_frame_size: .word 48

  .loc 12 123 8
  .text
first_373:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR first_373__stack_frame_size[rip]
  sub rsp, rax
.LABEL__first_373__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 124 9
  # $1.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 124 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__first_373__2, .LABEL__first_373__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__first_373__3
.LABEL__first_373__2:
  .loc 12 125 9
  # return(null)
  xor rax, rax
  jmp .LABEL__first_373__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__first_373__3:
  .loc 12 127 12
  # $3.1: @List_Item = load_struct_member(self.1, first_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 127 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 127 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__first_373__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__first_373__end:
  mov rsp, rbp
  pop rbp
  ret

first_373__stack_frame_size: .word 32

  .loc 12 130 8
  .text
last_374:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_374__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_374__1:
  # self.1: @List = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 131 9
  # $1.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 131 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__last_374__2, .LABEL__last_374__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__last_374__3
.LABEL__last_374__2:
  .loc 12 132 9
  # return(null)
  xor rax, rax
  jmp .LABEL__last_374__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__last_374__3:
  .loc 12 134 12
  # $3.1: @List_Item = load_struct_member(self.1, last_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 134 12
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 134 5
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__last_374__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_374__end:
  mov rsp, rbp
  pop rbp
  ret

last_374__stack_frame_size: .word 32

  .loc 12 149 8
  .text
create_iterator_375:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_iterator_375__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_iterator_375__1:
  # list.1: @List = load_variable(list)
  # [live values]: list.1:rdi 
  .loc 12 150 63
  # $1.1: @List_Item = load_struct_member(list.1, first_item)
  mov rax, [rdi]
  # [discarded value]: list.1
  # [live values]: $1.1:rax 
  .loc 12 150 12
  # $2.1: @List_Iterator = new List_Iterator(current_item = null, next_item = $1.1)
  mov [rbp-8], rax
  mov rdi, 16
  call malloc
  #     .current_item = null
  mov QWORD PTR [rax], 0
  #     .next_item = $1.1
  mov rbx, [rbp-8]
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $1.1
  # [live values]: $2.1:rax 
  .loc 12 150 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__create_iterator_375__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__create_iterator_375__end:
  mov rsp, rbp
  pop rbp
  ret

create_iterator_375__stack_frame_size: .word 16

  .loc 12 153 8
  .text
current_376:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR current_376__stack_frame_size[rip]
  sub rsp, rax
.LABEL__current_376__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 154 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 154 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__current_376__2, .LABEL__current_376__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__current_376__3
.LABEL__current_376__2:
  .loc 12 155 16
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-9]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 155 16
  # $4.1: @Any = load_struct_member($3.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:r15 
  .loc 12 155 9
  # return($4.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__current_376__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__current_376__3:
  .loc 12 157 5
  # return(null)
  xor rax, rax
  jmp .LABEL__current_376__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__current_376__end:
  mov rsp, rbp
  pop rbp
  ret

current_376__stack_frame_size: .word 32

  .loc 12 160 8
  .text
remove_current_377:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_current_377__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_current_377__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 161 5
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 161 5
  # store_struct_member($1.1, is_removed, true)
  mov BYTE PTR [rax+24], 1
  # [discarded value]: $1.1
  # [live values]: 
  # return()
  jmp .LABEL__remove_current_377__end
  # [live values]: 
.LABEL__remove_current_377__end:
  mov rsp, rbp
  pop rbp
  ret

remove_current_377__stack_frame_size: .word 0

  .loc 12 164 8
  .text
has_next_378:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR has_next_378__stack_frame_size[rip]
  sub rsp, rax
.LABEL__has_next_378__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 165 12
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 12 165 12
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: $2.1:rbx 
  .loc 12 165 5
  # return($2.1)
  mov al, bl
  mov [rbp-1], bl
  jmp .LABEL__has_next_378__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__has_next_378__end:
  mov rsp, rbp
  pop rbp
  ret

has_next_378__stack_frame_size: .word 16

  .loc 12 168 8
  .text
next_379:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR next_379__stack_frame_size[rip]
  sub rsp, rax
.LABEL__next_379__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 12 169 9
  # $1.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 12 169 9
  # $2.1: bool = $1.1 == null
  cmp rax, 0
  sete bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi $2.1:rbx 
  # jump($2.1, .LABEL__next_379__2, .LABEL__next_379__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rdi
  jz .LABEL__next_379__3
.LABEL__next_379__2:
  .loc 12 170 9
  # return(null)
  xor rax, rax
  jmp .LABEL__next_379__end
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__next_379__3:
  .loc 12 172 25
  # $3.1: @List_Item = load_struct_member(self.1, next_item)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 172 5
  # store_struct_member(self.1, current_item, $3.1)
  mov QWORD PTR [rax], rbx
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 173 22
  # $4.1: @List_Item = load_struct_member(self.1, next_item)
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $4.1:rbx 
  .loc 12 173 22
  # $5.1: @List_Item = load_struct_member($4.1, next_item)
  mov r15, [rbx+8]
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $5.1:r15 
  .loc 12 173 5
  # store_struct_member(self.1, next_item, $5.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] 
  .loc 12 174 12
  # $6.1: @List_Item = load_struct_member(self.1, current_item)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $6.1:rbx 
  .loc 12 174 12
  # $7.1: @Any = load_struct_member($6.1, data)
  mov r15, [rbx+16]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] $2.1:[rbp-1] $7.1:r15 
  .loc 12 174 5
  # return($7.1)
  mov rax, r15
  mov [rbp-17], r15
  jmp .LABEL__next_379__end
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-9] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__next_379__end:
  mov rsp, rbp
  pop rbp
  ret

next_379__stack_frame_size: .word 32

  .loc 12 177 8
  .text
change_380:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR change_380__stack_frame_size[rip]
  sub rsp, rax
.LABEL__change_380__1:
  # self.1: @List_Iterator = load_variable(self)
  # [live values]: self.1:rdi 
  # data.1: @Any = load_variable(data)
  # [live values]: self.1:rdi data.1:rsi 
  .loc 12 178 9
  # $1.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rdi]
  # [live values]: self.1:rdi data.1:rsi $1.1:rax 
  .loc 12 178 9
  # $2.1: bool = $1.1 != null
  cmp rax, 0
  setne bl
  # [discarded value]: $1.1
  # [live values]: self.1:rdi data.1:rsi $2.1:rbx 
  # jump($2.1, .LABEL__change_380__2, .LABEL__change_380__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__change_380__3
.LABEL__change_380__2:
  .loc 12 179 9
  # $3.1: @List_Item = load_struct_member(self.1, current_item)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 12 179 9
  # store_struct_member($3.1, data, data.1)
  mov r15, [rbp-9]
  mov QWORD PTR [rbx+16], r15
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] data.1:r15:[rbp-9] $2.1:[rbp-1] 
  # jump(.LABEL__change_380__3)
.LABEL__change_380__3:
  # return()
  jmp .LABEL__change_380__end
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] data.1:[rbp-9] 
  # [discarded value]: data.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__change_380__end:
  mov rsp, rbp
  pop rbp
  ret

change_380__stack_frame_size: .word 32

  .loc 1 358 8
  .text
write_line_381:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_line_381__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_line_381__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: file.1:rdi string.1:rsi 
  .loc 1 359 12
  # $1.1: @FILE = call(end_line_386, file.1)
  mov [rbp-8], rsi
  call end_line_386
  # [discarded value]: file.1
  # [live values]: string.1:[rbp-8] $1.1:rax 
  .loc 1 359 12
  # $2.1: @FILE = call(write_383, $1.1, string.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_383
  # [discarded value]: $1.1
  # [discarded value]: string.1
  # [live values]: $2.1:rax 
  .loc 1 359 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_line_381__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_line_381__end:
  mov rsp, rbp
  pop rbp
  ret

write_line_381__stack_frame_size: .word 16

  .loc 1 362 8
  .text
write_382:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_382__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_382__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: isize = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 1 363 9
  # $1.1: bool = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__write_382__2, .LABEL__write_382__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__write_382__3
.LABEL__write_382__2:
  .loc 1 364 16
  # $2.1: @FILE = call(write_385, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call write_385
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 1 364 38
  # $3.1: isize =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 1 364 16
  # $4.1: @FILE = call(write_382, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call write_382
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 1 364 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__write_382__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__write_382__3:
  .loc 1 366 9
  # $5.1: bool = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__write_382__5, .LABEL__write_382__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__write_382__6
.LABEL__write_382__5:
  .loc 1 367 20
  # $6.1: isize = number.1 / 10
  mov rax, [rbp-9]
  cqo
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 1 367 9
  # $7.1: @FILE = call(write_382, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__write_382__6)
.LABEL__write_382__6:
  .loc 1 369 12
  # $8.1: isize = number.1 // 10
  mov rax, [rbp-9]
  cqo
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 1 369 27
  # $9.1: isize = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 1 369 12
  # $10.1: isize = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 1 369 11
  # $11.1: i32 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 1 369 5
  # $12.1: i32 = call(fputc, $11.1, self.1)
  mov edi, eax
  mov rsi, [rbp-17]
  call fputc
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  .loc 1 370 5
  # return(self.1)
  mov rax, [rbp-17]
  jmp .LABEL__write_382__end
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_382__end:
  mov rsp, rbp
  pop rbp
  ret

write_382__stack_frame_size: .word 32

  .loc 1 373 8
  .text
write_383:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_383__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_383__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # string.1: @String = load_variable(string)
  # [live values]: self.1:rdi string.1:rsi 
  .loc 1 374 23
  # $1.1: [i8; ?] = load_struct_member(string.1, data)
  mov rax, [rsi]
  # [discarded value]: string.1
  # [live values]: self.1:rdi $1.1:rax 
  .loc 1 374 12
  # $2.1: @FILE = call(write_384, self.1, $1.1)
  mov rsi, rax
  call write_384
  # [discarded value]: $1.1
  # [discarded value]: self.1
  # [live values]: $2.1:rax 
  .loc 1 374 5
  # return($2.1)
  mov [rbp-8], rax
  jmp .LABEL__write_383__end
  # [discarded value]: $2.1
  # [live values]: 
.LABEL__write_383__end:
  mov rsp, rbp
  pop rbp
  ret

write_383__stack_frame_size: .word 16

  .loc 1 377 8
  .text
write_384:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_384__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_384__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # chars.1: [i8; ?] = load_variable(chars)
  # [live values]: self.1:rdi chars.1:rsi 
  .loc 1 378 9
  # $1.1: i32 = call(fputs, chars.1, self.1)
  mov [rbp-8], rdi
  mov rdi, rsi
  mov [rbp-16], rsi
  mov rsi, [rbp-8]
  call fputs
  # [discarded value]: chars.1
  # [live values]: self.1:[rbp-8] $1.1:rax 
  .loc 1 378 9
  # $2.1: isize = cast($1.1)
  mov ebx, eax
  movsx rbx, ebx
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $2.1:rbx 
  .loc 1 378 9
  # $3.1: bool = $2.1 < 0
  cmp rbx, 0
  setl al
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  # jump($3.1, .LABEL__write_384__2, .LABEL__write_384__3)
  test al, al
  mov [rbp-9], al
  jz .LABEL__write_384__3
.LABEL__write_384__2:
  .loc 1 379 9
  # $4.1: @FILE = call(end_line_386, stderr)
  mov rdi, stderr[rip]
  call end_line_386
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $4.1:rax 
  .loc 1 379 9
  # $5.1: @FILE = call(end_line_386, $4.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $5.1:rax 
  .loc 1 379 9
  # $6.1: @FILE = call(write_383, $5.1, "Failed to write text")
  mov rdi, rax
  lea rsi, .LABEL__string_379[rip] # "Failed to write text"
  call write_383
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] $6.1:rax 
  .loc 1 379 9
  # $7.1: @FILE = call(end_line_386, $6.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  .loc 1 380 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
.LABEL__write_384__3:
  .loc 1 382 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_384__end
  # [live values]: self.1:[rbp-8] $3.1:[rbp-9] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] 
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_384__end:
  mov rsp, rbp
  pop rbp
  ret

write_384__stack_frame_size: .word 16

  .loc 1 385 8
  .text
write_385:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR write_385__stack_frame_size[rip]
  sub rsp, rax
.LABEL__write_385__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: i8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 1 386 13
  # c.1: i32 = cast(char.1)
  mov al, sil
  movsx eax, al
  # [discarded value]: char.1
  # [live values]: self.1:rdi c.1:rax 
  .loc 1 387 9
  # $2.1: i32 = call(fputc, c.1, self.1)
  mov [rbp-8], rdi
  mov edi, eax
  mov rsi, [rbp-8]
  mov [rbp-12], eax
  call fputc
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $2.1:rax 
  .loc 1 387 9
  # $3.1: bool = $2.1 != c.1
  cmp eax, DWORD PTR [rbp-12]
  setne bl
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:rbx 
  # jump($3.1, .LABEL__write_385__2, .LABEL__write_385__3)
  test bl, bl
  mov [rbp-13], bl
  jz .LABEL__write_385__3
.LABEL__write_385__2:
  .loc 1 388 9
  # $4.1: @FILE = call(end_line_386, stderr)
  mov rdi, stderr[rip]
  call end_line_386
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $4.1:rax 
  .loc 1 388 9
  # $5.1: @FILE = call(end_line_386, $4.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $5.1:rax 
  .loc 1 388 9
  # $6.1: @FILE = call(write_383, $5.1, "Failed to write character: ")
  mov rdi, rax
  lea rsi, .LABEL__string_380[rip] # "Failed to write character: "
  call write_383
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax 
  .loc 1 388 81
  # $7.1: isize = cast(c.1)
  mov ebx, [rbp-12]
  movsx rbx, ebx
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $6.1:rax $7.1:rbx 
  .loc 1 388 9
  # $8.1: @FILE = call(write_382, $6.1, $7.1)
  mov rdi, rax
  mov rsi, rbx
  call write_382
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] $8.1:rax 
  .loc 1 388 9
  # $9.1: @FILE = call(end_line_386, $8.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  .loc 1 389 9
  # call(abort)
  call abort
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
.LABEL__write_385__3:
  .loc 1 391 5
  # return(self.1)
  mov rax, [rbp-8]
  jmp .LABEL__write_385__end
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] $3.1:[rbp-13] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] c.1:[rbp-12] 
  # [discarded value]: c.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__write_385__end:
  mov rsp, rbp
  pop rbp
  ret

write_385__stack_frame_size: .word 16

  .loc 1 394 8
  .text
end_line_386:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR end_line_386__stack_frame_size[rip]
  sub rsp, rax
.LABEL__end_line_386__1:
  # self.1: @FILE = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 1 395 12
  # $1.1: @FILE = call(write_385, self.1, '\n')
  mov sil, 10
  call write_385
  # [discarded value]: self.1
  # [live values]: $1.1:rax 
  .loc 1 395 5
  # return($1.1)
  mov [rbp-8], rax
  jmp .LABEL__end_line_386__end
  # [discarded value]: $1.1
  # [live values]: 
.LABEL__end_line_386__end:
  mov rsp, rbp
  pop rbp
  ret

end_line_386__stack_frame_size: .word 16

  .loc 1 398 8
  .text
flush_387:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR flush_387__stack_frame_size[rip]
  sub rsp, rax
.LABEL__flush_387__1:
  # file.1: @FILE = load_variable(file)
  # [live values]: file.1:rdi 
  .loc 1 399 5
  # $1.1: i32 = call(fflush, file.1)
  mov [rbp-8], rdi
  call fflush
  # [discarded value]: $1.1
  # [live values]: file.1:[rbp-8] 
  .loc 1 400 5
  # return(file.1)
  mov rax, [rbp-8]
  jmp .LABEL__flush_387__end
  # [discarded value]: file.1
  # [live values]: 
.LABEL__flush_387__end:
  mov rsp, rbp
  pop rbp
  ret

flush_387__stack_frame_size: .word 16

  .loc 1 403 8
  .text
abort_388:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR abort_388__stack_frame_size[rip]
  sub rsp, rax
.LABEL__abort_388__1:
  # message.1: @String = load_variable(message)
  # [live values]: message.1:rdi 
  .loc 1 404 5
  # $1.1: @FILE = call(end_line_386, stderr)
  mov [rbp-8], rdi
  mov rdi, stderr[rip]
  call end_line_386
  # [live values]: message.1:[rbp-8] $1.1:rax 
  .loc 1 404 5
  # $2.1: @FILE = call(end_line_386, $1.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $1.1
  # [live values]: message.1:[rbp-8] $2.1:rax 
  .loc 1 404 5
  # $3.1: @FILE = call(write_383, $2.1, message.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  call write_383
  # [discarded value]: $2.1
  # [discarded value]: message.1
  # [live values]: $3.1:rax 
  .loc 1 404 5
  # $4.1: @FILE = call(end_line_386, $3.1)
  mov rdi, rax
  call end_line_386
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: 
  .loc 1 405 5
  # call(abort)
  call abort
  # [live values]: 
.LABEL__abort_388__end:
  mov rsp, rbp
  pop rbp
  ret

abort_388__stack_frame_size: .word 16

  .loc 13 13 8
  .text
is_389:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR is_389__stack_frame_size[rip]
  sub rsp, rax
.LABEL__is_389__1:
  # self.1: @Object = load_variable(self)
  # [live values]: self.1:rdi 
  # object_type.1: @Object_Type = load_variable(object_type)
  # [live values]: self.1:rdi object_type.1:rsi 
  .loc 13 14 21
  # self_type.1: @Object_Type = load_struct_member(self.1, object_type)
  mov rax, [rdi]
  # [discarded value]: self.1
  # [live values]: object_type.1:rsi self_type.1:rax 
  # jump(.LABEL__is_389__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
.LABEL__is_389__2:
  # self_type.2: @Object_Type = phi(self_type.1, self_type.4)
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  .loc 13 16 13
  # $2.1: bool = self_type.2 == object_type.1
  mov rax, [rbp-8]
  cmp rax, QWORD PTR [rbp-16]
  sete bl
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:rax:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__is_389__4, .LABEL__is_389__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__is_389__5
.LABEL__is_389__4:
  .loc 13 17 13
  # return(true)
  mov al, 1
  jmp .LABEL__is_389__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__is_389__5:
  .loc 13 19 21
  # self_type.4: @Object_Type = load_struct_member(self_type.2, base_type)
  mov rax, [rbp-8]
  mov rbx, [rax+32]
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] 
  .loc 13 20 13
  # $4.1: bool = self_type.4 == null
  cmp rbx, 0
  sete al
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:rbx:[rbp-8] $4.1:rax 
  # jump($4.1, .LABEL__is_389__7, .LABEL__is_389__2)
  test al, al
  mov [rbp-18], al
  mov [rbp-8], rbx
  jz .LABEL__is_389__2
.LABEL__is_389__7:
  .loc 13 21 13
  # return(false)
  mov al, 0
  jmp .LABEL__is_389__end
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] $4.1:[rbp-18] 
  # [discarded value]: $4.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] self_type.4:[rbp-8] 
  # [discarded value]: self_type.4
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] self_type.2:[rbp-8] 
  # [discarded value]: self_type.2
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [live values]: object_type.1:[rbp-16] self_type.1:[rbp-8] 
  # [discarded value]: self_type.1
  # [discarded value]: object_type.1
  # [live values]: 
.LABEL__is_389__end:
  mov rsp, rbp
  pop rbp
  ret

is_389__stack_frame_size: .word 32

  .loc 14 9 8
  .text
create_string_390:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR create_string_390__stack_frame_size[rip]
  sub rsp, rax
.LABEL__create_string_390__1:
  # data.1: [i8; ?] = load_variable(data)
  # [live values]: data.1:rdi 
  .loc 14 10 9
  # data_length.1: isize = 0
  xor rax, rax
  # [live values]: data.1:rdi data_length.1:rax 
  # jump(.LABEL__create_string_390__2)
  mov [rbp-8], rax
  mov [rbp-16], rdi
.LABEL__create_string_390__2:
  # data_length.2: isize = phi(data_length.1, data_length.4)
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  .loc 14 12 20
  # char.1: i8 = load_array_item(data.1, data_length.2)
  mov rax, [rbp-16]
  mov rbx, [rbp-8]
  add rax, rbx
  mov al, [rax]
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] char.1:rax 
  .loc 14 13 13
  # $2.1: bool = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:rbx 
  # jump($2.1, .LABEL__create_string_390__3, .LABEL__create_string_390__5)
  test bl, bl
  mov [rbp-17], bl
  jz .LABEL__create_string_390__5
.LABEL__create_string_390__3:
  .loc 14 19 48
  # $4.1: isize = data_length.2 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $4.1:rax 
  .loc 14 19 12
  # $5.1: @String = new String(data = data.1, data_size = $4.1, length = data_length.2)
  mov [rbp-25], rax
  mov rdi, 24
  call malloc
  #     .data = data.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = $4.1
  mov r15, [rbp-25]
  mov QWORD PTR [rax+8], r15
  #     .length = data_length.2
  mov r14, [rbp-8]
  mov QWORD PTR [rax+16], r14
  # [discarded value]: $4.1
  # [live values]: data.1:rbx:[rbp-16] data_length.1:[rbp-8] data_length.2:r14:[rbp-8] $2.1:[rbp-17] $5.1:rax 
  .loc 14 19 5
  # return($5.1)
  mov [rbp-25], rax
  jmp .LABEL__create_string_390__end
  # [discarded value]: $5.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
.LABEL__create_string_390__5:
  .loc 14 16 23
  # $3.1: isize = data_length.2 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] $3.1:rax 
  .loc 14 16 9
  # data_length.4: isize = $3.1
  mov [rbp-25], rax
  # [discarded value]: $3.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:rax:[rbp-8] 
  # jump(.LABEL__create_string_390__2)
  mov [rbp-8], rax
  jmp .LABEL__create_string_390__2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] data_length.4:[rbp-8] 
  # [discarded value]: data_length.4
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] $2.1:[rbp-17] 
  # [discarded value]: $2.1
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] data_length.2:[rbp-8] 
  # [discarded value]: data_length.2
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [live values]: data.1:[rbp-16] data_length.1:[rbp-8] 
  # [discarded value]: data_length.1
  # [discarded value]: data.1
  # [live values]: 
.LABEL__create_string_390__end:
  mov rsp, rbp
  pop rbp
  ret

create_string_390__stack_frame_size: .word 32

  .loc 14 22 8
  .text
clone_391:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR clone_391__stack_frame_size[rip]
  sub rsp, rax
.LABEL__clone_391__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  .loc 14 23 42
  # $1.1: isize = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi $1.1:rax 
  .loc 14 23 35
  # $3.1: [i8; ?] = call(malloc, $1.1)
  mov [rbp-8], rdi
  mov rdi, rax
  call malloc
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-8] $3.1:rax 
  .loc 14 23 82
  # $4.1: isize = load_struct_member(self.1, data_size)
  mov rbx, [rbp-8]
  mov r15, [rbx+8]
  # [live values]: self.1:rbx:[rbp-8] $3.1:rax $4.1:r15 
  .loc 14 23 17
  # clone.1: @String = new String(data = $3.1, data_size = $4.1, length = 0)
  mov [rbp-16], rax
  mov [rbp-24], r15
  mov rdi, 24
  call malloc
  #     .data = $3.1
  mov rbx, [rbp-16]
  mov QWORD PTR [rax], rbx
  #     .data_size = $4.1
  mov r15, [rbp-24]
  mov QWORD PTR [rax+8], r15
  #     .length = 0
  mov QWORD PTR [rax+16], 0
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-8] clone.1:rax 
  .loc 14 24 5
  # $6.1: @String = call(append_400, clone.1, self.1)
  mov rdi, rax
  mov rsi, [rbp-8]
  mov [rbp-16], rax
  call append_400
  # [discarded value]: $6.1
  # [discarded value]: self.1
  # [live values]: clone.1:[rbp-16] 
  .loc 14 25 5
  # return(clone.1)
  mov rax, [rbp-16]
  jmp .LABEL__clone_391__end
  # [discarded value]: clone.1
  # [live values]: 
.LABEL__clone_391__end:
  mov rsp, rbp
  pop rbp
  ret

clone_391__stack_frame_size: .word 32

  .loc 14 28 8
  .text
equals_392:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR equals_392__stack_frame_size[rip]
  sub rsp, rax
.LABEL__equals_392__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 29 9
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 29 24
  # $2.1: isize = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 29 9
  # $3.1: bool = $1.1 == $2.1
  cmp rax, rbx
  sete r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__equals_392__2, .LABEL__equals_392__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__equals_392__3
.LABEL__equals_392__2:
  .loc 14 30 13
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__equals_392__4)
  mov [rbp-25], rax
.LABEL__equals_392__4:
  # index.2: isize = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 31 24
  # $4.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 31 16
  # $5.1: bool = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__equals_392__5, .LABEL__equals_392__6)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__equals_392__6
.LABEL__equals_392__5:
  .loc 14 32 17
  # $6.1: [i8; ?] = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 32 17
  # $7.1: i8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 32 37
  # $8.1: [i8; ?] = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 32 37
  # $9.1: i8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 32 17
  # $10.1: bool = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__equals_392__7, .LABEL__equals_392__8)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__equals_392__8
.LABEL__equals_392__7:
  .loc 14 33 17
  # return(false)
  mov al, 0
  jmp .LABEL__equals_392__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__equals_392__8:
  .loc 14 35 21
  # $11.1: isize = index.2 + 1
  mov rax, [rbp-25]
  inc rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] $11.1:rax 
  .loc 14 35 13
  # index.5: isize = $11.1
  mov [rbp-35], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__equals_392__4)
  mov [rbp-25], rax
  jmp .LABEL__equals_392__4
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__equals_392__6:
  .loc 14 37 9
  # return(true)
  mov al, 1
  jmp .LABEL__equals_392__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__equals_392__3:
  .loc 14 39 5
  # return(false)
  mov al, 0
  jmp .LABEL__equals_392__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__equals_392__end:
  mov rsp, rbp
  pop rbp
  ret

equals_392__stack_frame_size: .word 48

  .loc 14 42 8
  .text
index_of_393:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR index_of_393__stack_frame_size[rip]
  sub rsp, rax
.LABEL__index_of_393__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 43 9
  # self_index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:rdi other.1:rsi self_index.1:rax 
  # jump(.LABEL__index_of_393__2)
  mov [rbp-8], rax
  mov [rbp-16], rsi
  mov [rbp-24], rdi
.LABEL__index_of_393__2:
  # self_index.2: isize = phi(self_index.1, self_index.6)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  .loc 14 44 26
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-24]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx 
  .loc 14 44 40
  # $2.1: isize = load_struct_member(other.1, length)
  mov r15, [rbp-16]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $1.1:rbx $2.1:r14 
  .loc 14 44 26
  # $3.1: isize = $1.1 - $2.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $3.1:r13 
  .loc 14 44 12
  # $4.1: bool = self_index.2 <= $3.1
  cmp QWORD PTR [rbp-8], r13
  setle bl
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-24] other.1:r15:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:rbx 
  # jump($4.1, .LABEL__index_of_393__3, .LABEL__index_of_393__4)
  test bl, bl
  mov [rbp-25], bl
  jz .LABEL__index_of_393__4
.LABEL__index_of_393__3:
  .loc 14 45 13
  # other_index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:rax 
  # jump(.LABEL__index_of_393__5)
  mov [rbp-33], rax
.LABEL__index_of_393__5:
  # other_index.2: isize = phi(other_index.1, other_index.5)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] 
  .loc 14 46 30
  # $5.1: isize = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $5.1:rbx 
  .loc 14 46 16
  # $6.1: bool = other_index.2 < $5.1
  cmp QWORD PTR [rbp-33], rbx
  setl r15b
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $6.1:r15 
  .loc 14 46 16
  # $7.1: bool = $6.1
  mov [rbp-34], r15b
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:r15 
  # jump($7.1, .LABEL__index_of_393__8, .LABEL__index_of_393__9)
  test r15b, r15b
  mov [rbp-34], r15b
  jz .LABEL__index_of_393__9
.LABEL__index_of_393__8:
  .loc 14 46 56
  # $8.1: isize = self_index.2 + other_index.2
  mov rax, [rbp-8]
  add rax, QWORD PTR [rbp-33]
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax 
  .loc 14 46 46
  # $9.1: [i8; ?] = load_struct_member(self.1, data)
  mov rbx, [rbp-24]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $8.1:rax $9.1:r15 
  .loc 14 46 46
  # $10.1: i8 = load_array_item($9.1, $8.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov r14b, [r14]
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:rbx:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 
  .loc 14 46 85
  # $11.1: [i8; ?] = load_struct_member(other.1, data)
  mov rax, [rbp-16]
  mov r15, [rax]
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $11.1:r15 
  .loc 14 46 85
  # $12.1: i8 = load_array_item($11.1, other_index.2)
  mov r13, r15
  mov r12, [rbp-33]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $11.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $10.1:r14 $12.1:r13 
  .loc 14 46 46
  # $13.1: bool = $10.1 == $12.1
  cmp r14b, r13b
  sete r15b
  # [discarded value]: $12.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $13.1:r15 
  .loc 14 46 16
  # $7.2: bool = $13.1
  mov [rbp-35], r15b
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:r15:[rbp-34] 
  # jump(.LABEL__index_of_393__9)
  mov [rbp-34], r15b
.LABEL__index_of_393__9:
  .loc 14 46 16
  # $7.3: bool = phi($7.1, $7.2)
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($7.3, .LABEL__index_of_393__6, .LABEL__index_of_393__7)
  mov al, [rbp-34]
  test al, al
  jz .LABEL__index_of_393__7
.LABEL__index_of_393__6:
  .loc 14 47 27
  # $14.1: isize = other_index.2 + 1
  mov rax, [rbp-33]
  inc rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $14.1:rax $7.2:[rbp-34] $7.3:[rbp-34] 
  .loc 14 47 13
  # other_index.5: isize = $14.1
  mov [rbp-42], rax
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:rax:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump(.LABEL__index_of_393__5)
  mov [rbp-33], rax
  jmp .LABEL__index_of_393__5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] other_index.5:[rbp-33] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: other_index.5
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_393__7:
  .loc 14 49 28
  # $15.1: isize = load_struct_member(other.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $15.1:rbx $7.2:[rbp-34] $7.3:[rbp-34] 
  .loc 14 49 13
  # $16.1: bool = other_index.2 == $15.1
  cmp QWORD PTR [rbp-33], rbx
  sete r15b
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-24] other.1:rax:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:r15 $7.2:[rbp-34] $7.3:[rbp-34] 
  # jump($16.1, .LABEL__index_of_393__10, .LABEL__index_of_393__11)
  test r15b, r15b
  mov [rbp-35], r15b
  jz .LABEL__index_of_393__11
.LABEL__index_of_393__10:
  .loc 14 50 13
  # return(self_index.2)
  mov rax, [rbp-8]
  jmp .LABEL__index_of_393__end
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
.LABEL__index_of_393__11:
  .loc 14 52 22
  # $17.1: isize = self_index.2 + 1
  mov rax, [rbp-8]
  inc rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] $17.1:rax 
  .loc 14 52 9
  # self_index.6: isize = $17.1
  mov [rbp-43], rax
  # [discarded value]: $17.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:rax:[rbp-8] 
  # jump(.LABEL__index_of_393__2)
  mov [rbp-8], rax
  jmp .LABEL__index_of_393__2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] self_index.6:[rbp-8] 
  # [discarded value]: self_index.6
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $16.1:[rbp-35] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] $7.3:[rbp-34] 
  # [discarded value]: $7.3
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] $7.2:[rbp-34] 
  # [discarded value]: $7.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] other_index.2:[rbp-33] $7.1:[rbp-34] 
  # [discarded value]: $7.1
  # [discarded value]: other_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] other_index.1:[rbp-33] 
  # [discarded value]: other_index.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
.LABEL__index_of_393__4:
  .loc 14 54 12
  # $18.1: isize =  - 1
  mov rax, 1
  neg rax
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] $18.1:rax 
  .loc 14 54 5
  # return($18.1)
  mov [rbp-33], rax
  jmp .LABEL__index_of_393__end
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] $4.1:[rbp-25] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] self_index.2:[rbp-8] 
  # [discarded value]: self_index.2
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [live values]: self.1:[rbp-24] other.1:[rbp-16] self_index.1:[rbp-8] 
  # [discarded value]: self_index.1
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__index_of_393__end:
  mov rsp, rbp
  pop rbp
  ret

index_of_393__stack_frame_size: .word 48

  .loc 14 57 8
  .text
starts_with_394:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR starts_with_394__stack_frame_size[rip]
  sub rsp, rax
.LABEL__starts_with_394__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 58 9
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 58 23
  # $2.1: isize = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 58 9
  # $3.1: bool = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__starts_with_394__2, .LABEL__starts_with_394__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__starts_with_394__3
.LABEL__starts_with_394__2:
  .loc 14 59 9
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_394__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__starts_with_394__3:
  .loc 14 61 9
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__starts_with_394__5)
  mov [rbp-25], rax
.LABEL__starts_with_394__5:
  # index.2: isize = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 62 20
  # $4.1: isize = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 62 12
  # $5.1: bool = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__starts_with_394__6, .LABEL__starts_with_394__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__starts_with_394__7
.LABEL__starts_with_394__6:
  .loc 14 63 13
  # $6.1: [i8; ?] = load_struct_member(self.1, data)
  mov rax, [rbp-16]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 63 13
  # $7.1: i8 = load_array_item($6.1, index.2)
  mov r15, rbx
  mov r14, [rbp-25]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 
  .loc 14 63 33
  # $8.1: [i8; ?] = load_struct_member(other.1, data)
  mov rbx, [rbp-8]
  mov r14, [rbx]
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $8.1:r14 
  .loc 14 63 33
  # $9.1: i8 = load_array_item($8.1, index.2)
  mov r13, r14
  mov r12, [rbp-25]
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $7.1:r15 $9.1:r13 
  .loc 14 63 13
  # $10.1: bool = $7.1 != $9.1
  cmp r15b, r13b
  setne r14b
  # [discarded value]: $9.1
  # [discarded value]: $7.1
  # [live values]: self.1:rax:[rbp-16] other.1:rbx:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:r14 
  # jump($10.1, .LABEL__starts_with_394__8, .LABEL__starts_with_394__9)
  test r14b, r14b
  mov [rbp-27], r14b
  jz .LABEL__starts_with_394__9
.LABEL__starts_with_394__8:
  .loc 14 64 13
  # return(false)
  mov al, 0
  jmp .LABEL__starts_with_394__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
.LABEL__starts_with_394__9:
  .loc 14 66 17
  # $11.1: isize = index.2 + 1
  mov rax, [rbp-25]
  inc rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] $11.1:rax 
  .loc 14 66 9
  # index.5: isize = $11.1
  mov [rbp-35], rax
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__starts_with_394__5)
  mov [rbp-25], rax
  jmp .LABEL__starts_with_394__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $10.1:[rbp-27] 
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__starts_with_394__7:
  .loc 14 68 5
  # return(true)
  mov al, 1
  jmp .LABEL__starts_with_394__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__starts_with_394__end:
  mov rsp, rbp
  pop rbp
  ret

starts_with_394__stack_frame_size: .word 48

  .loc 14 71 8
  .text
ends_with_395:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR ends_with_395__stack_frame_size[rip]
  sub rsp, rax
.LABEL__ends_with_395__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 72 9
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 72 23
  # $2.1: isize = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 72 9
  # $3.1: bool = $1.1 < $2.1
  cmp rax, rbx
  setl r15b
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  # jump($3.1, .LABEL__ends_with_395__2, .LABEL__ends_with_395__3)
  test r15b, r15b
  mov [rbp-8], rsi
  mov [rbp-16], rdi
  mov [rbp-17], r15b
  jz .LABEL__ends_with_395__3
.LABEL__ends_with_395__2:
  .loc 14 73 9
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_395__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
.LABEL__ends_with_395__3:
  .loc 14 75 9
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:rax 
  # jump(.LABEL__ends_with_395__5)
  mov [rbp-25], rax
.LABEL__ends_with_395__5:
  # index.2: isize = phi(index.1, index.5)
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  .loc 14 76 20
  # $4.1: isize = load_struct_member(other.1, length)
  mov rax, [rbp-8]
  mov rbx, [rax+16]
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $4.1:rbx 
  .loc 14 76 12
  # $5.1: bool = index.2 < $4.1
  cmp QWORD PTR [rbp-25], rbx
  setl r15b
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-16] other.1:rax:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:r15 
  # jump($5.1, .LABEL__ends_with_395__6, .LABEL__ends_with_395__7)
  test r15b, r15b
  mov [rbp-26], r15b
  jz .LABEL__ends_with_395__7
.LABEL__ends_with_395__6:
  .loc 14 77 23
  # $6.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-16]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx 
  .loc 14 77 37
  # $7.1: isize = load_struct_member(other.1, length)
  mov r15, [rbp-8]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $6.1:rbx $7.1:r14 
  .loc 14 77 23
  # $8.1: isize = $6.1 - $7.1
  mov r13, rbx
  sub r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $8.1:r13 
  .loc 14 77 23
  # $9.1: isize = $8.1 + index.2
  mov rbx, r13
  add rbx, QWORD PTR [rbp-25]
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx 
  .loc 14 77 13
  # $10.1: [i8; ?] = load_struct_member(self.1, data)
  mov r14, [rax]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $9.1:rbx $10.1:r14 
  .loc 14 77 13
  # $11.1: i8 = load_array_item($10.1, $9.1)
  mov r13, r14
  mov r12, rbx
  add r13, r12
  mov r13b, [r13]
  # [discarded value]: $10.1
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 
  .loc 14 77 62
  # $12.1: [i8; ?] = load_struct_member(other.1, data)
  mov rbx, [r15]
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $12.1:rbx 
  .loc 14 77 62
  # $13.1: i8 = load_array_item($12.1, index.2)
  mov r14, rbx
  mov r12, [rbp-25]
  add r14, r12
  mov r14b, [r14]
  # [discarded value]: $12.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $11.1:r13 $13.1:r14 
  .loc 14 77 13
  # $14.1: bool = $11.1 != $13.1
  cmp r13b, r14b
  setne bl
  # [discarded value]: $13.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-16] other.1:r15:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:rbx 
  # jump($14.1, .LABEL__ends_with_395__8, .LABEL__ends_with_395__9)
  test bl, bl
  mov [rbp-27], bl
  jz .LABEL__ends_with_395__9
.LABEL__ends_with_395__8:
  .loc 14 78 13
  # return(false)
  mov al, 0
  jmp .LABEL__ends_with_395__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
.LABEL__ends_with_395__9:
  .loc 14 80 17
  # $15.1: isize = index.2 + 1
  mov rax, [rbp-25]
  inc rax
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] $15.1:rax 
  .loc 14 80 9
  # index.5: isize = $15.1
  mov [rbp-35], rax
  # [discarded value]: $15.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:rax:[rbp-25] 
  # jump(.LABEL__ends_with_395__5)
  mov [rbp-25], rax
  jmp .LABEL__ends_with_395__5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] index.5:[rbp-25] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] $14.1:[rbp-27] 
  # [discarded value]: $14.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
.LABEL__ends_with_395__7:
  .loc 14 82 5
  # return(true)
  mov al, 1
  jmp .LABEL__ends_with_395__end
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] $5.1:[rbp-26] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] index.1:[rbp-25] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] $3.1:[rbp-17] 
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-16] other.1:[rbp-8] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__ends_with_395__end:
  mov rsp, rbp
  pop rbp
  ret

ends_with_395__stack_frame_size: .word 48

  .loc 14 85 8
  .text
last_index_of_396:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_396__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_396__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: i8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 86 37
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 86 37
  # $2.1: isize = $1.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 86 12
  # $3.1: isize = call(last_index_of_397, self.1, char.1, $2.1)
  mov rdx, rbx
  call last_index_of_397
  # [discarded value]: $2.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: $3.1:rax 
  .loc 14 86 5
  # return($3.1)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_396__end
  # [discarded value]: $3.1
  # [live values]: 
.LABEL__last_index_of_396__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_396__stack_frame_size: .word 16

  .loc 14 89 8
  .text
last_index_of_397:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR last_index_of_397__stack_frame_size[rip]
  sub rsp, rax
.LABEL__last_index_of_397__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: i8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  # index.1: isize = load_variable(from_index)
  # [live values]: self.1:rdi char.1:rsi index.1:rdx 
  # jump(.LABEL__last_index_of_397__2)
  mov [rbp-8], rdx
  mov [rbp-9], sil
  mov [rbp-17], rdi
.LABEL__last_index_of_397__2:
  # index.2: isize = phi(index.1, index.5)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] 
  .loc 14 91 12
  # $1.1: bool = index.2 >= 0
  cmp QWORD PTR [rbp-8], 0
  setge al
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $1.1:rax 
  .loc 14 91 12
  # $2.1: bool = $1.1
  mov [rbp-18], al
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:rax 
  # jump($2.1, .LABEL__last_index_of_397__5, .LABEL__last_index_of_397__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__last_index_of_397__6
.LABEL__last_index_of_397__5:
  .loc 14 91 26
  # $3.1: [i8; ?] = load_struct_member(self.1, data)
  mov rax, [rbp-17]
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $3.1:rbx 
  .loc 14 91 26
  # $4.1: i8 = load_array_item($3.1, index.2)
  mov r15, rbx
  mov r14, [rbp-8]
  add r15, r14
  mov r15b, [r15]
  # [discarded value]: $3.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $4.1:r15 
  .loc 14 91 26
  # $5.1: bool = $4.1 != char.1
  cmp r15b, BYTE PTR [rbp-9]
  setne bl
  # [discarded value]: $4.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $5.1:rbx 
  .loc 14 91 12
  # $2.2: bool = $5.1
  mov [rbp-19], bl
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:rbx:[rbp-18] 
  # jump(.LABEL__last_index_of_397__6)
  mov [rbp-18], bl
.LABEL__last_index_of_397__6:
  .loc 14 91 12
  # $2.3: bool = phi($2.1, $2.2)
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump($2.3, .LABEL__last_index_of_397__3, .LABEL__last_index_of_397__4)
  mov al, [rbp-18]
  test al, al
  jz .LABEL__last_index_of_397__4
.LABEL__last_index_of_397__3:
  .loc 14 92 17
  # $6.1: isize = index.2 - 1
  mov rax, [rbp-8]
  dec rax
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $6.1:rax $2.2:[rbp-18] $2.3:[rbp-18] 
  .loc 14 92 9
  # index.5: isize = $6.1
  mov [rbp-26], rax
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:rax:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # jump(.LABEL__last_index_of_397__2)
  mov [rbp-8], rax
  jmp .LABEL__last_index_of_397__2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] index.5:[rbp-8] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: index.5
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
.LABEL__last_index_of_397__4:
  .loc 14 94 5
  # return(index.2)
  mov rax, [rbp-8]
  jmp .LABEL__last_index_of_397__end
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] $2.3:[rbp-18] 
  # [discarded value]: $2.3
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] $2.2:[rbp-18] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] index.2:[rbp-8] $2.1:[rbp-18] 
  # [discarded value]: $2.1
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [live values]: self.1:[rbp-17] char.1:[rbp-9] index.1:[rbp-8] 
  # [discarded value]: index.1
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__last_index_of_397__end:
  mov rsp, rbp
  pop rbp
  ret

last_index_of_397__stack_frame_size: .word 32

  .loc 14 97 8
  .text
append_398:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_398__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_398__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # char.1: i8 = load_variable(char)
  # [live values]: self.1:rdi char.1:rsi 
  .loc 14 98 9
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi char.1:rsi $1.1:rax 
  .loc 14 98 9
  # $2.1: isize = $1.1 + 1
  mov rbx, rax
  inc rbx
  # [discarded value]: $1.1
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx 
  .loc 14 98 28
  # $3.1: isize = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi char.1:rsi $2.1:rbx $3.1:rax 
  .loc 14 98 9
  # $4.1: bool = $2.1 >= $3.1
  cmp rbx, rax
  setge r15b
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:rdi char.1:rsi $4.1:r15 
  # jump($4.1, .LABEL__append_398__2, .LABEL__append_398__3)
  test r15b, r15b
  mov [rbp-1], sil
  mov [rbp-9], rdi
  mov [rbp-10], r15b
  jz .LABEL__append_398__3
.LABEL__append_398__2:
  .loc 14 99 26
  # $5.1: isize = load_struct_member(self.1, data_size)
  mov rax, [rbp-9]
  mov rbx, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $5.1:rbx 
  .loc 14 99 26
  # $6.1: isize = $5.1 + 16
  mov r15, rbx
  add r15, 16
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $6.1:r15 
  .loc 14 99 9
  # store_struct_member(self.1, data_size, $6.1)
  mov QWORD PTR [rax+8], r15
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  .loc 14 100 29
  # $7.1: [i8; ?] = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx 
  .loc 14 100 40
  # $8.1: isize = load_struct_member(self.1, data_size)
  mov r15, [rax+8]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $7.1:rbx $8.1:r15 
  .loc 14 100 21
  # $10.1: [i8; ?] = call(realloc, $7.1, $8.1)
  mov rdi, rbx
  mov rsi, r15
  call realloc
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $10.1:rax 
  .loc 14 100 9
  # store_struct_member(self.1, data, $10.1)
  mov rbx, [rbp-9]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # jump(.LABEL__append_398__3)
.LABEL__append_398__3:
  .loc 14 102 15
  # $11.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-9]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx 
  .loc 14 102 5
  # $12.1: [i8; ?] = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] $11.1:rbx $12.1:r15 
  .loc 14 102 5
  # store_array_item($12.1, $11.1, char.1)
  mov r14, r15
  mov r13, rbx
  add r14, r13
  mov r13b, [rbp-1]
  mov BYTE PTR [r14], r13b
  # [discarded value]: $12.1
  # [discarded value]: $11.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 103 19
  # $13.1: isize = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $13.1:rbx 
  .loc 14 103 19
  # $14.1: isize = $13.1 + 1
  mov r15, rbx
  inc r15
  # [discarded value]: $13.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $14.1:r15 
  .loc 14 103 5
  # store_struct_member(self.1, length, $14.1)
  mov QWORD PTR [rax+16], r15
  # [discarded value]: $14.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 104 15
  # $15.1: isize = load_struct_member(self.1, length)
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx 
  .loc 14 104 5
  # $16.1: [i8; ?] = load_struct_member(self.1, data)
  mov r15, [rax]
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] $15.1:rbx $16.1:r15 
  .loc 14 104 5
  # store_array_item($16.1, $15.1, '\0')
  mov r14, r15
  mov r12, rbx
  add r14, r12
  mov BYTE PTR [r14], 0
  # [discarded value]: $16.1
  # [discarded value]: $15.1
  # [live values]: self.1:rax:[rbp-9] char.1:r13:[rbp-1] $4.1:[rbp-10] 
  .loc 14 105 5
  # return(self.1)
  jmp .LABEL__append_398__end
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] $4.1:[rbp-10] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-9] char.1:[rbp-1] 
  # [discarded value]: char.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_398__end:
  mov rsp, rbp
  pop rbp
  ret

append_398__stack_frame_size: .word 16

  .loc 14 108 8
  .text
append_399:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_399__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_399__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # number.1: isize = load_variable(number)
  # [live values]: self.1:rdi number.1:rsi 
  .loc 14 109 9
  # $1.1: bool = number.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi number.1:rsi $1.1:rax 
  # jump($1.1, .LABEL__append_399__2, .LABEL__append_399__3)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_399__3
.LABEL__append_399__2:
  .loc 14 110 16
  # $2.1: @String = call(append_398, self.1, '-')
  mov rdi, [rbp-17]
  mov sil, 45
  call append_398
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax 
  .loc 14 110 40
  # $3.1: isize =  - number.1
  mov rbx, [rbp-9]
  neg rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $2.1:rax $3.1:rbx 
  .loc 14 110 16
  # $4.1: @String = call(append_399, $2.1, $3.1)
  mov rdi, rax
  mov rsi, rbx
  call append_399
  # [discarded value]: $3.1
  # [discarded value]: $2.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $4.1:rax 
  .loc 14 110 9
  # return($4.1)
  mov [rbp-25], rax
  jmp .LABEL__append_399__end
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
.LABEL__append_399__3:
  .loc 14 112 9
  # $5.1: bool = number.1 >= 10
  cmp QWORD PTR [rbp-9], 10
  setge al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:rax 
  # jump($5.1, .LABEL__append_399__5, .LABEL__append_399__6)
  test al, al
  mov [rbp-18], al
  jz .LABEL__append_399__6
.LABEL__append_399__5:
  .loc 14 113 21
  # $6.1: isize = number.1 / 10
  mov rax, [rbp-9]
  cqo
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $6.1:rax 
  .loc 14 113 9
  # $7.1: @String = call(append_399, self.1, $6.1)
  mov rdi, [rbp-17]
  mov rsi, rax
  call append_399
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # jump(.LABEL__append_399__6)
.LABEL__append_399__6:
  .loc 14 115 25
  # $8.1: isize = number.1 // 10
  mov rax, [rbp-9]
  cqo
  mov rbx, 10
  idiv rbx
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx 
  .loc 14 115 40
  # $9.1: isize = cast('0')
  mov al, 48
  movsx rax, al
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $8.1:rdx $9.1:rax 
  .loc 14 115 25
  # $10.1: isize = $8.1 + $9.1
  mov rbx, rdx
  add rbx, rax
  # [discarded value]: $9.1
  # [discarded value]: $8.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $10.1:rbx 
  .loc 14 115 24
  # $11.1: i8 = cast($10.1)
  mov rax, rbx
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $11.1:rax 
  .loc 14 115 12
  # $12.1: @String = call(append_398, self.1, $11.1)
  mov rdi, [rbp-17]
  mov sil, al
  call append_398
  # [discarded value]: $11.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] $12.1:rax 
  .loc 14 115 5
  # return($12.1)
  mov [rbp-26], rax
  jmp .LABEL__append_399__end
  # [discarded value]: $12.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] $5.1:[rbp-18] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] $1.1:[rbp-1] 
  # [discarded value]: $1.1
  # [live values]: self.1:[rbp-17] number.1:[rbp-9] 
  # [discarded value]: number.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_399__end:
  mov rsp, rbp
  pop rbp
  ret

append_399__stack_frame_size: .word 32

  .loc 14 118 8
  .text
append_400:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR append_400__stack_frame_size[rip]
  sub rsp, rax
.LABEL__append_400__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # other.1: @String = load_variable(other)
  # [live values]: self.1:rdi other.1:rsi 
  .loc 14 119 9
  # $1.1: isize = load_struct_member(self.1, length)
  mov rax, [rdi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax 
  .loc 14 119 23
  # $2.1: isize = load_struct_member(other.1, length)
  mov rbx, [rsi+16]
  # [live values]: self.1:rdi other.1:rsi $1.1:rax $2.1:rbx 
  .loc 14 119 9
  # $3.1: isize = $1.1 + $2.1
  mov r15, rax
  add r15, rbx
  # [discarded value]: $2.1
  # [discarded value]: $1.1
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 
  .loc 14 119 39
  # $4.1: isize = load_struct_member(self.1, data_size)
  mov rax, [rdi+8]
  # [live values]: self.1:rdi other.1:rsi $3.1:r15 $4.1:rax 
  .loc 14 119 9
  # $5.1: bool = $3.1 >= $4.1
  cmp r15, rax
  setge bl
  # [discarded value]: $4.1
  # [discarded value]: $3.1
  # [live values]: self.1:rdi other.1:rsi $5.1:rbx 
  # jump($5.1, .LABEL__append_400__2, .LABEL__append_400__3)
  test bl, bl
  mov [rbp-1], bl
  mov [rbp-9], rsi
  mov [rbp-17], rdi
  jz .LABEL__append_400__3
.LABEL__append_400__2:
  .loc 14 120 26
  # $6.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-17]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $6.1:rbx 
  .loc 14 120 40
  # $7.1: isize = load_struct_member(other.1, length)
  mov r15, [rbp-9]
  mov r14, [r15+16]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $6.1:rbx $7.1:r14 
  .loc 14 120 26
  # $8.1: isize = $6.1 + $7.1
  mov r13, rbx
  add r13, r14
  # [discarded value]: $7.1
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $8.1:r13 
  .loc 14 120 26
  # $9.1: isize = $8.1 + 1
  mov rbx, r13
  inc rbx
  # [discarded value]: $8.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $9.1:rbx 
  .loc 14 120 9
  # store_struct_member(self.1, data_size, $9.1)
  mov QWORD PTR [rax+8], rbx
  # [discarded value]: $9.1
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] 
  .loc 14 121 29
  # $10.1: [i8; ?] = load_struct_member(self.1, data)
  mov rbx, [rax]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx 
  .loc 14 121 40
  # $11.1: isize = load_struct_member(self.1, data_size)
  mov r14, [rax+8]
  # [live values]: self.1:rax:[rbp-17] other.1:r15:[rbp-9] $5.1:[rbp-1] $10.1:rbx $11.1:r14 
  .loc 14 121 21
  # $13.1: [i8; ?] = call(realloc, $10.1, $11.1)
  mov rdi, rbx
  mov rsi, r14
  call realloc
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] $13.1:rax 
  .loc 14 121 9
  # store_struct_member(self.1, data, $13.1)
  mov rbx, [rbp-17]
  mov QWORD PTR [rbx], rax
  # [discarded value]: $13.1
  # [live values]: self.1:rbx:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # jump(.LABEL__append_400__3)
.LABEL__append_400__3:
  .loc 14 123 9
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:rax 
  .loc 14 124 22
  # other_data.1: [i8; ?] = load_struct_member(other.1, data)
  mov rbx, [rbp-9]
  mov r15, [rbx]
  # [live values]: self.1:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 
  .loc 14 125 21
  # self_data.1: [i8; ?] = load_struct_member(self.1, data)
  mov r14, [rbp-17]
  mov r13, [r14]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 
  .loc 14 126 23
  # self_length.1: isize = load_struct_member(self.1, length)
  mov r12, [r14+16]
  # [live values]: self.1:r14:[rbp-17] other.1:rbx:[rbp-9] $5.1:[rbp-1] index.1:rax other_data.1:r15 self_data.1:r13 self_length.1:r12 
  # jump(.LABEL__append_400__4)
  mov [rbp-25], rax
  mov [rbp-33], r12
  mov [rbp-41], r13
  mov [rbp-49], r15
.LABEL__append_400__4:
  # self_length.2: isize = phi(self_length.1, self_length.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] 
  # index.2: isize = phi(index.1, index.4)
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  .loc 14 128 20
  # char.1: i8 = load_array_item(other_data.1, index.2)
  mov rax, [rbp-49]
  mov rbx, [rbp-25]
  add rax, rbx
  mov al, [rax]
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 129 9
  # store_array_item(self_data.1, self_length.2, char.1)
  mov rbx, [rbp-41]
  mov r15, [rbp-33]
  add rbx, r15
  mov BYTE PTR [rbx], al
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] char.1:rax 
  .loc 14 130 13
  # $18.1: bool = char.1 == '\0'
  cmp al, 0
  sete bl
  # [discarded value]: char.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:rbx 
  # jump($18.1, .LABEL__append_400__5, .LABEL__append_400__7)
  test bl, bl
  mov [rbp-50], bl
  jz .LABEL__append_400__7
.LABEL__append_400__5:
  .loc 14 136 5
  # store_struct_member(self.1, length, self_length.2)
  mov rax, [rbp-17]
  mov rbx, [rbp-33]
  mov QWORD PTR [rax+16], rbx
  # [live values]: self.1:rax:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:rbx:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  .loc 14 137 5
  # return(self.1)
  jmp .LABEL__append_400__end
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
.LABEL__append_400__7:
  .loc 14 133 23
  # $19.1: isize = self_length.2 + 1
  mov rax, [rbp-33]
  inc rax
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] $19.1:rax 
  .loc 14 133 9
  # self_length.4: isize = $19.1
  mov [rbp-58], rax
  # [discarded value]: $19.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] 
  .loc 14 134 17
  # $20.1: isize = index.2 + 1
  mov rbx, [rbp-25]
  inc rbx
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] $20.1:rbx 
  .loc 14 134 9
  # index.4: isize = $20.1
  mov [rbp-58], rbx
  # [discarded value]: $20.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:rax:[rbp-33] index.4:rbx:[rbp-25] 
  # jump(.LABEL__append_400__4)
  mov [rbp-33], rax
  mov [rbp-25], rbx
  jmp .LABEL__append_400__4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] self_length.4:[rbp-33] index.4:[rbp-25] 
  # [discarded value]: index.4
  # [discarded value]: self_length.4
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] $18.1:[rbp-50] 
  # [discarded value]: $18.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] self_length.2:[rbp-33] index.2:[rbp-25] 
  # [discarded value]: index.2
  # [discarded value]: self_length.2
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] index.1:[rbp-25] other_data.1:[rbp-49] self_data.1:[rbp-41] self_length.1:[rbp-33] 
  # [discarded value]: self_length.1
  # [discarded value]: self_data.1
  # [discarded value]: other_data.1
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] $5.1:[rbp-1] 
  # [discarded value]: $5.1
  # [live values]: self.1:[rbp-17] other.1:[rbp-9] 
  # [discarded value]: other.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__append_400__end:
  mov rsp, rbp
  pop rbp
  ret

append_400__stack_frame_size: .word 64

  .loc 14 140 8
  .text
remove_401:
  push rbp
  mov rbp, rsp
  movsx rax, WORD PTR remove_401__stack_frame_size[rip]
  sub rsp, rax
.LABEL__remove_401__1:
  # self.1: @String = load_variable(self)
  # [live values]: self.1:rdi 
  # begin_index.1: isize = load_variable(begin_index)
  # [live values]: self.1:rdi begin_index.1:rsi 
  # end_index.1: isize = load_variable(end_index)
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx 
  .loc 14 141 9
  # $1.1: bool = begin_index.1 < 0
  cmp rsi, 0
  setl al
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $1.1:rax 
  .loc 14 141 9
  # $2.1: bool = $1.1
  mov [rbp-1], al
  # [discarded value]: $1.1
  # [live values]: self.1:rdi begin_index.1:rsi end_index.1:rdx $2.1:rax 
  # jump($2.1, .LABEL__remove_401__5, .LABEL__remove_401__4)
  test al, al
  mov [rbp-1], al
  mov [rbp-9], rdx
  mov [rbp-17], rsi
  mov [rbp-25], rdi
  jz .LABEL__remove_401__4
.LABEL__remove_401__5:
  .loc 14 141 9
  # $4.1: bool = phi($2.1, $2.2)
  mov al, [rbp-1]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:rax 
  # jump($4.1, .LABEL__remove_401__3, .LABEL__remove_401__2)
  test al, al
  mov [rbp-26], al
  jz .LABEL__remove_401__2
.LABEL__remove_401__3:
  .loc 14 141 9
  # $4.3: bool = phi($4.1, $4.2)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # jump($4.3, .LABEL__remove_401__6, .LABEL__remove_401__7)
  mov al, [rbp-26]
  test al, al
  jz .LABEL__remove_401__7
.LABEL__remove_401__6:
  .loc 14 142 9
  # call(abort_388, "Invalid state")
  lea rdi, .LABEL__string_47[rip] # "Invalid state"
  call abort_388
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
.LABEL__remove_401__7:
  .loc 14 144 9
  # index.1: isize = 0
  xor rax, rax
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:rax 
  # jump(.LABEL__remove_401__8)
  mov [rbp-34], rax
.LABEL__remove_401__8:
  # index.2: isize = phi(index.1, index.4)
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  .loc 14 145 12
  # $7.1: isize = index.2 + end_index.1
  mov rax, [rbp-34]
  add rax, QWORD PTR [rbp-9]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax 
  .loc 14 145 33
  # $8.1: isize = load_struct_member(self.1, length)
  mov rbx, [rbp-25]
  mov r15, [rbx+16]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $7.1:rax $8.1:r15 
  .loc 14 145 12
  # $9.1: bool = $7.1 <= $8.1
  cmp rax, r15
  setle r14b
  # [discarded value]: $8.1
  # [discarded value]: $7.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:r14 
  # jump($9.1, .LABEL__remove_401__9, .LABEL__remove_401__10)
  test r14b, r14b
  mov [rbp-35], r14b
  jz .LABEL__remove_401__10
.LABEL__remove_401__9:
  .loc 14 146 19
  # $10.1: isize = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax 
  .loc 14 146 9
  # $11.1: [i8; ?] = load_struct_member(self.1, data)
  mov rbx, [rbp-25]
  mov r15, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 
  .loc 14 146 52
  # $12.1: isize = end_index.1 + index.2
  mov r14, [rbp-9]
  add r14, QWORD PTR [rbp-34]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 
  .loc 14 146 42
  # $13.1: [i8; ?] = load_struct_member(self.1, data)
  mov r13, [rbx]
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $12.1:r14 $13.1:r13 
  .loc 14 146 42
  # $14.1: i8 = load_array_item($13.1, $12.1)
  mov r12, r13
  mov r11, r14
  add r12, r11
  mov r12b, [r12]
  # [discarded value]: $13.1
  # [discarded value]: $12.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $10.1:rax $11.1:r15 $14.1:r12 
  .loc 14 146 9
  # store_array_item($11.1, $10.1, $14.1)
  mov r14, r15
  mov r13, rax
  add r14, r13
  mov BYTE PTR [r14], r12b
  # [discarded value]: $14.1
  # [discarded value]: $11.1
  # [discarded value]: $10.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 147 17
  # $15.1: isize = index.2 + 1
  mov rax, [rbp-34]
  inc rax
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $15.1:rax 
  .loc 14 147 9
  # index.4: isize = $15.1
  mov [rbp-43], rax
  # [discarded value]: $15.1
  # [live values]: self.1:rbx:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:rax:[rbp-34] 
  # jump(.LABEL__remove_401__8)
  mov [rbp-34], rax
  jmp .LABEL__remove_401__8
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] index.4:[rbp-34] 
  # [discarded value]: index.4
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
.LABEL__remove_401__10:
  .loc 14 149 19
  # $16.1: isize = begin_index.1 + index.2
  mov rax, [rbp-17]
  add rax, QWORD PTR [rbp-34]
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $16.1:rax 
  .loc 14 149 19
  # $17.1: isize = $16.1 - 1
  mov rbx, rax
  dec rbx
  # [discarded value]: $16.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] $17.1:rbx 
  .loc 14 149 5
  # store_struct_member(self.1, length, $17.1)
  mov rax, [rbp-25]
  mov QWORD PTR [rax+16], rbx
  # [discarded value]: $17.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  .loc 14 150 5
  # return(self.1)
  jmp .LABEL__remove_401__end
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] $9.1:[rbp-35] 
  # [discarded value]: $9.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] index.2:[rbp-34] 
  # [discarded value]: index.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] index.1:[rbp-34] 
  # [discarded value]: index.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.3:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
.LABEL__remove_401__2:
  .loc 14 141 68
  # $5.1: isize = load_struct_member(self.1, length)
  mov rax, [rbp-25]
  mov rbx, [rax+16]
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $5.1:rbx $4.1:[rbp-26] 
  .loc 14 141 55
  # $6.1: bool = end_index.1 >= $5.1
  cmp QWORD PTR [rbp-9], rbx
  setge r15b
  # [discarded value]: $5.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $6.1:r15 $4.1:[rbp-26] 
  .loc 14 141 9
  # $4.2: bool = $6.1
  mov [rbp-27], r15b
  # [discarded value]: $6.1
  # [live values]: self.1:rax:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:r15:[rbp-26] $4.1:[rbp-26] 
  # jump(.LABEL__remove_401__3)
  mov [rbp-26], r15b
  jmp .LABEL__remove_401__3
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.2:[rbp-26] $4.1:[rbp-26] 
  # [discarded value]: $4.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $4.1:[rbp-26] 
  # [discarded value]: $4.1
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
.LABEL__remove_401__4:
  .loc 14 141 28
  # $3.1: bool = begin_index.1 > end_index.1
  mov rax, [rbp-17]
  cmp rax, QWORD PTR [rbp-9]
  setg bl
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $3.1:rbx 
  .loc 14 141 9
  # $2.2: bool = $3.1
  mov [rbp-26], bl
  # [discarded value]: $3.1
  # [live values]: self.1:[rbp-25] begin_index.1:rax:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:rbx:[rbp-1] 
  # jump(.LABEL__remove_401__5)
  mov [rbp-1], bl
  jmp .LABEL__remove_401__5
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] $2.2:[rbp-1] 
  # [discarded value]: $2.2
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [live values]: self.1:[rbp-25] begin_index.1:[rbp-17] end_index.1:[rbp-9] $2.1:[rbp-1] 
  # [discarded value]: $2.1
  # [discarded value]: end_index.1
  # [discarded value]: begin_index.1
  # [discarded value]: self.1
  # [live values]: 
.LABEL__remove_401__end:
  mov rsp, rbp
  pop rbp
  ret

remove_401__stack_frame_size: .word 48

  .section .rodata

  .align 8
.LABEL__string_0:
  .quad .LABEL__string_0__data
  .quad 7
  .quad 6
.LABEL__string_0__data: .string "Usage:"

  .align 8
.LABEL__string_1:
  .quad .LABEL__string_1__data
  .quad 28
  .quad 27
.LABEL__string_1__data: .string " <INPUT FILE> <OUTPUT FILE>"

  .align 8
.LABEL__string_2:
  .quad .LABEL__string_2__data
  .quad 6
  .quad 5
.LABEL__string_2__data: .string ".code"

  .align 8
.LABEL__string_3:
  .quad .LABEL__string_3__data
  .quad 2
  .quad 1
.LABEL__string_3__data: .string "'"

  .align 8
.LABEL__string_4:
  .quad .LABEL__string_4__data
  .quad 28
  .quad 27
.LABEL__string_4__data: .string "' doesn't end with '.code'."

  .align 8
.LABEL__string_5:
  .quad .LABEL__string_5__data
  .quad 3
  .quad 2
.LABEL__string_5__data: .string ".s"

  .align 8
.LABEL__string_6:
  .quad .LABEL__string_6__data
  .quad 25
  .quad 24
.LABEL__string_6__data: .string "' doesn't end with '.s'."

  .align 8
.LABEL__string_7:
  .quad .LABEL__string_7__data
  .quad 4
  .quad 3
.LABEL__string_7__data: .string ".ir"

  .align 8
.LABEL__string_8:
  .quad .LABEL__string_8__data
  .quad 26
  .quad 25
.LABEL__string_8__data: .string "' doesn't end with '.ir'."

  .align 8
.LABEL__string_9:
  .quad .LABEL__string_9__data
  .quad 2
  .quad 1
.LABEL__string_9__data: .string "w"

  .align 8
.LABEL__string_10:
  .quad .LABEL__string_10__data
  .quad 9
  .quad 8
.LABEL__string_10__data: .string "  .file "

  .align 8
.LABEL__string_11:
  .quad .LABEL__string_11__data
  .quad 3
  .quad 2
.LABEL__string_11__data: .string " \""

  .align 8
.LABEL__string_12:
  .quad .LABEL__string_12__data
  .quad 2
  .quad 1
.LABEL__string_12__data: .string "\""

  .align 8
.LABEL__string_13:
  .quad .LABEL__string_13__data
  .quad 25
  .quad 24
.LABEL__string_13__data: .string "  .intel_syntax noprefix"

  .align 8
.LABEL__string_14:
  .quad .LABEL__string_14__data
  .quad 8
  .quad 7
.LABEL__string_14__data: .string "  .loc "

  .align 8
.LABEL__string_15:
  .quad .LABEL__string_15__data
  .quad 8
  .quad 7
.LABEL__string_15__data: .string "  .text"

  .align 8
.LABEL__string_16:
  .quad .LABEL__string_16__data
  .quad 5
  .quad 4
.LABEL__string_16__data: .string "main"

  .align 8
.LABEL__string_17:
  .quad .LABEL__string_17__data
  .quad 14
  .quad 13
.LABEL__string_17__data: .string "  .globl main"

  .align 8
.LABEL__string_18:
  .quad .LABEL__string_18__data
  .quad 6
  .quad 5
.LABEL__string_18__data: .string "main:"

  .align 8
.LABEL__string_19:
  .quad .LABEL__string_19__data
  .quad 11
  .quad 10
.LABEL__string_19__data: .string "  push rbp"

  .align 8
.LABEL__string_20:
  .quad .LABEL__string_20__data
  .quad 15
  .quad 14
.LABEL__string_20__data: .string "  mov rbp, rsp"

  .align 8
.LABEL__string_21:
  .quad .LABEL__string_21__data
  .quad 23
  .quad 22
.LABEL__string_21__data: .string "  movsx rax, WORD PTR "

  .align 8
.LABEL__string_22:
  .quad .LABEL__string_22__data
  .quad 19
  .quad 18
.LABEL__string_22__data: .string "__stack_frame_size"

  .align 8
.LABEL__string_23:
  .quad .LABEL__string_23__data
  .quad 6
  .quad 5
.LABEL__string_23__data: .string "[rip]"

  .align 8
.LABEL__string_24:
  .quad .LABEL__string_24__data
  .quad 15
  .quad 14
.LABEL__string_24__data: .string "  sub rsp, rax"

  .align 8
.LABEL__string_25:
  .quad .LABEL__string_25__data
  .quad 2
  .quad 1
.LABEL__string_25__data: .string ":"

  .align 8
.LABEL__string_26:
  .quad .LABEL__string_26__data
  .quad 15
  .quad 14
.LABEL__string_26__data: .string "  mov rsp, rbp"

  .align 8
.LABEL__string_27:
  .quad .LABEL__string_27__data
  .quad 10
  .quad 9
.LABEL__string_27__data: .string "  pop rbp"

  .align 8
.LABEL__string_28:
  .quad .LABEL__string_28__data
  .quad 15
  .quad 14
.LABEL__string_28__data: .string "  xor rax, rax"

  .align 8
.LABEL__string_29:
  .quad .LABEL__string_29__data
  .quad 6
  .quad 5
.LABEL__string_29__data: .string "  ret"

  .align 8
.LABEL__string_30:
  .quad .LABEL__string_30__data
  .quad 9
  .quad 8
.LABEL__string_30__data: .string ": .word "

  .align 8
.LABEL__string_31:
  .quad .LABEL__string_31__data
  .quad 9
  .quad 8
.LABEL__string_31__data: .string ".LABEL__"

  .align 8
.LABEL__string_32:
  .quad .LABEL__string_32__data
  .quad 3
  .quad 2
.LABEL__string_32__data: .string "__"

  .align 8
.LABEL__string_33:
  .quad .LABEL__string_33__data
  .quad 4
  .quad 3
.LABEL__string_33__data: .string "end"

  .align 8
.LABEL__string_34:
  .quad .LABEL__string_34__data
  .quad 32
  .quad 31
.LABEL__string_34__data: .string "  # [unreachable instruction]: "

  .align 8
.LABEL__string_35:
  .quad .LABEL__string_35__data
  .quad 5
  .quad 4
.LABEL__string_35__data: .string "  # "

  .align 8
.LABEL__string_36:
  .quad .LABEL__string_36__data
  .quad 26
  .quad 25
.LABEL__string_36__data: .string "Unsupported instruction: "

  .align 8
.LABEL__string_37:
  .quad .LABEL__string_37__data
  .quad 7
  .quad 6
.LABEL__string_37__data: .string "  inc "

  .align 8
.LABEL__string_38:
  .quad .LABEL__string_38__data
  .quad 24
  .quad 23
.LABEL__string_38__data: .string "Unsupported type size: "

  .align 8
.LABEL__string_39:
  .quad .LABEL__string_39__data
  .quad 7
  .quad 6
.LABEL__string_39__data: .string "  add "

  .align 8
.LABEL__string_40:
  .quad .LABEL__string_40__data
  .quad 3
  .quad 2
.LABEL__string_40__data: .string ", "

  .align 8
.LABEL__string_41:
  .quad .LABEL__string_41__data
  .quad 8
  .quad 7
.LABEL__string_41__data: .string "  call "

  .align 8
.LABEL__string_42:
  .quad .LABEL__string_42__data
  .quad 17
  .quad 16
.LABEL__string_42__data: .string ": Redundant cast"

  .align 8
.LABEL__string_43:
  .quad .LABEL__string_43__data
  .quad 9
  .quad 8
.LABEL__string_43__data: .string "  movsx "

  .align 8
.LABEL__string_44:
  .quad .LABEL__string_44__data
  .quad 13
  .quad 12
.LABEL__string_44__data: .string "Cannot cast "

  .align 8
.LABEL__string_45:
  .quad .LABEL__string_45__data
  .quad 5
  .quad 4
.LABEL__string_45__data: .string " to "

  .align 8
.LABEL__string_46:
  .quad .LABEL__string_46__data
  .quad 23
  .quad 22
.LABEL__string_46__data: .string "Unsupported value type"

  .align 8
.LABEL__string_47:
  .quad .LABEL__string_47__data
  .quad 14
  .quad 13
.LABEL__string_47__data: .string "Invalid state"

  .align 8
.LABEL__string_48:
  .quad .LABEL__string_48__data
  .quad 8
  .quad 7
.LABEL__string_48__data: .string "  test "

  .align 8
.LABEL__string_49:
  .quad .LABEL__string_49__data
  .quad 7
  .quad 6
.LABEL__string_49__data: .string "  jnz "

  .align 8
.LABEL__string_50:
  .quad .LABEL__string_50__data
  .quad 6
  .quad 5
.LABEL__string_50__data: .string "  jz "

  .align 8
.LABEL__string_51:
  .quad .LABEL__string_51__data
  .quad 7
  .quad 6
.LABEL__string_51__data: .string "  cmp "

  .align 8
.LABEL__string_52:
  .quad .LABEL__string_52__data
  .quad 8
  .quad 7
.LABEL__string_52__data: .string "  sete "

  .align 8
.LABEL__string_53:
  .quad .LABEL__string_53__data
  .quad 8
  .quad 7
.LABEL__string_53__data: .string "  setg "

  .align 8
.LABEL__string_54:
  .quad .LABEL__string_54__data
  .quad 9
  .quad 8
.LABEL__string_54__data: .string "  setge "

  .align 8
.LABEL__string_55:
  .quad .LABEL__string_55__data
  .quad 8
  .quad 7
.LABEL__string_55__data: .string "  setl "

  .align 8
.LABEL__string_56:
  .quad .LABEL__string_56__data
  .quad 9
  .quad 8
.LABEL__string_56__data: .string "  setle "

  .align 8
.LABEL__string_57:
  .quad .LABEL__string_57__data
  .quad 9
  .quad 8
.LABEL__string_57__data: .string "  setne "

  .align 8
.LABEL__string_58:
  .quad .LABEL__string_58__data
  .quad 42
  .quad 41
.LABEL__string_58__data: .string "Unsupported comparison instruction type: "

  .align 8
.LABEL__string_59:
  .quad .LABEL__string_59__data
  .quad 7
  .quad 6
.LABEL__string_59__data: .string "  jmp "

  .align 8
.LABEL__string_60:
  .quad .LABEL__string_60__data
  .quad 6
  .quad 5
.LABEL__string_60__data: .string "  cqo"

  .align 8
.LABEL__string_61:
  .quad .LABEL__string_61__data
  .quad 8
  .quad 7
.LABEL__string_61__data: .string "  idiv "

  .align 8
.LABEL__string_62:
  .quad .LABEL__string_62__data
  .quad 6
  .quad 5
.LABEL__string_62__data: .string "  cdq"

  .align 8
.LABEL__string_63:
  .quad .LABEL__string_63__data
  .quad 6
  .quad 5
.LABEL__string_63__data: .string "  cwd"

  .align 8
.LABEL__string_64:
  .quad .LABEL__string_64__data
  .quad 7
  .quad 6
.LABEL__string_64__data: .string "  mov "

  .align 8
.LABEL__string_65:
  .quad .LABEL__string_65__data
  .quad 8
  .quad 7
.LABEL__string_65__data: .string "  imul "

  .align 8
.LABEL__string_66:
  .quad .LABEL__string_66__data
  .quad 24
  .quad 23
.LABEL__string_66__data: .string "Variable has no address"

  .align 8
.LABEL__string_67:
  .quad .LABEL__string_67__data
  .quad 7
  .quad 6
.LABEL__string_67__data: .string "  lea "

  .align 8
.LABEL__string_68:
  .quad .LABEL__string_68__data
  .quad 28
  .quad 27
.LABEL__string_68__data: .string "Unsupported variable type: "

  .align 8
.LABEL__string_69:
  .quad .LABEL__string_69__data
  .quad 7
  .quad 6
.LABEL__string_69__data: .string "malloc"

  .align 8
.LABEL__string_70:
  .quad .LABEL__string_70__data
  .quad 12
  .quad 11
.LABEL__string_70__data: .string "Looks like "

  .align 8
.LABEL__string_71:
  .quad .LABEL__string_71__data
  .quad 29
  .quad 28
.LABEL__string_71__data: .string " is not properly initialized"

  .align 8
.LABEL__string_72:
  .quad .LABEL__string_72__data
  .quad 11
  .quad 10
.LABEL__string_72__data: .string "QWORD PTR "

  .align 8
.LABEL__string_73:
  .quad .LABEL__string_73__data
  .quad 11
  .quad 10
.LABEL__string_73__data: .string "DWORD PTR "

  .align 8
.LABEL__string_74:
  .quad .LABEL__string_74__data
  .quad 10
  .quad 9
.LABEL__string_74__data: .string "WORD PTR "

  .align 8
.LABEL__string_75:
  .quad .LABEL__string_75__data
  .quad 10
  .quad 9
.LABEL__string_75__data: .string "BYTE PTR "

  .align 8
.LABEL__string_76:
  .quad .LABEL__string_76__data
  .quad 19
  .quad 18
.LABEL__string_76__data: .string "Unsupported type: "

  .align 8
.LABEL__string_77:
  .quad .LABEL__string_77__data
  .quad 7
  .quad 6
.LABEL__string_77__data: .string "  neg "

  .align 8
.LABEL__string_78:
  .quad .LABEL__string_78__data
  .quad 7
  .quad 6
.LABEL__string_78__data: .string "  dec "

  .align 8
.LABEL__string_79:
  .quad .LABEL__string_79__data
  .quad 7
  .quad 6
.LABEL__string_79__data: .string "  sub "

  .align 8
.LABEL__string_80:
  .quad .LABEL__string_80__data
  .quad 7
  .quad 6
.LABEL__string_80__data: .string "  xor "

  .align 8
.LABEL__string_81:
  .quad .LABEL__string_81__data
  .quad 4
  .quad 3
.LABEL__string_81__data: .string " # "

  .align 8
.LABEL__string_82:
  .quad .LABEL__string_82__data
  .quad 27
  .quad 26
.LABEL__string_82__data: .string "Unsupported literal type: "

  .align 8
.LABEL__string_83:
  .quad .LABEL__string_83__data
  .quad 25
  .quad 24
.LABEL__string_83__data: .string "Unsupported value type: "

  .align 8
.LABEL__string_84:
  .quad .LABEL__string_84__data
  .quad 56
  .quad 55
.LABEL__string_84__data: .string "The required variable value has been discarded already?"

  .align 8
.LABEL__string_85:
  .quad .LABEL__string_85__data
  .quad 17
  .quad 16
.LABEL__string_85__data: .string "  mov QWORD PTR "

  .align 8
.LABEL__string_86:
  .quad .LABEL__string_86__data
  .quad 16
  .quad 15
.LABEL__string_86__data: .string "  mov WORD PTR "

  .align 8
.LABEL__string_87:
  .quad .LABEL__string_87__data
  .quad 17
  .quad 16
.LABEL__string_87__data: .string "  mov DWORD PTR "

  .align 8
.LABEL__string_88:
  .quad .LABEL__string_88__data
  .quad 16
  .quad 15
.LABEL__string_88__data: .string "  mov BYTE PTR "

  .align 8
.LABEL__string_89:
  .quad .LABEL__string_89__data
  .quad 4
  .quad 3
.LABEL__string_89__data: .string ", 0"

  .align 8
.LABEL__string_90:
  .quad .LABEL__string_90__data
  .quad 20
  .quad 19
.LABEL__string_90__data: .string "Unsupported value: "

  .align 8
.LABEL__string_91:
  .quad .LABEL__string_91__data
  .quad 10
  .quad 9
.LABEL__string_91__data: .string "  #     ."

  .align 8
.LABEL__string_92:
  .quad .LABEL__string_92__data
  .quad 4
  .quad 3
.LABEL__string_92__data: .string " = "

  .align 8
.LABEL__string_93:
  .quad .LABEL__string_93__data
  .quad 3
  .quad 2
.LABEL__string_93__data: .string ": "

  .align 8
.LABEL__string_94:
  .quad .LABEL__string_94__data
  .quad 20
  .quad 19
.LABEL__string_94__data: .string " is not initialized"

  .align 8
.LABEL__string_95:
  .quad .LABEL__string_95__data
  .quad 31
  .quad 30
.LABEL__string_95__data: .string "Unsupported constant literal: "

  .align 8
.LABEL__string_96:
  .quad .LABEL__string_96__data
  .quad 13
  .quad 12
.LABEL__string_96__data: .string "[Generator] "

  .align 8
.LABEL__string_97:
  .quad .LABEL__string_97__data
  .quad 4
  .quad 3
.LABEL__string_97__data: .string "rax"

  .align 8
.LABEL__string_98:
  .quad .LABEL__string_98__data
  .quad 4
  .quad 3
.LABEL__string_98__data: .string "eax"

  .align 8
.LABEL__string_99:
  .quad .LABEL__string_99__data
  .quad 3
  .quad 2
.LABEL__string_99__data: .string "ax"

  .align 8
.LABEL__string_100:
  .quad .LABEL__string_100__data
  .quad 3
  .quad 2
.LABEL__string_100__data: .string "al"

  .align 8
.LABEL__string_101:
  .quad .LABEL__string_101__data
  .quad 4
  .quad 3
.LABEL__string_101__data: .string "rcx"

  .align 8
.LABEL__string_102:
  .quad .LABEL__string_102__data
  .quad 4
  .quad 3
.LABEL__string_102__data: .string "ecx"

  .align 8
.LABEL__string_103:
  .quad .LABEL__string_103__data
  .quad 3
  .quad 2
.LABEL__string_103__data: .string "cx"

  .align 8
.LABEL__string_104:
  .quad .LABEL__string_104__data
  .quad 3
  .quad 2
.LABEL__string_104__data: .string "cl"

  .align 8
.LABEL__string_105:
  .quad .LABEL__string_105__data
  .quad 4
  .quad 3
.LABEL__string_105__data: .string "rdx"

  .align 8
.LABEL__string_106:
  .quad .LABEL__string_106__data
  .quad 4
  .quad 3
.LABEL__string_106__data: .string "edx"

  .align 8
.LABEL__string_107:
  .quad .LABEL__string_107__data
  .quad 3
  .quad 2
.LABEL__string_107__data: .string "dx"

  .align 8
.LABEL__string_108:
  .quad .LABEL__string_108__data
  .quad 3
  .quad 2
.LABEL__string_108__data: .string "dl"

  .align 8
.LABEL__string_109:
  .quad .LABEL__string_109__data
  .quad 4
  .quad 3
.LABEL__string_109__data: .string "rbx"

  .align 8
.LABEL__string_110:
  .quad .LABEL__string_110__data
  .quad 4
  .quad 3
.LABEL__string_110__data: .string "ebx"

  .align 8
.LABEL__string_111:
  .quad .LABEL__string_111__data
  .quad 3
  .quad 2
.LABEL__string_111__data: .string "bx"

  .align 8
.LABEL__string_112:
  .quad .LABEL__string_112__data
  .quad 3
  .quad 2
.LABEL__string_112__data: .string "bl"

  .align 8
.LABEL__string_113:
  .quad .LABEL__string_113__data
  .quad 4
  .quad 3
.LABEL__string_113__data: .string "rsi"

  .align 8
.LABEL__string_114:
  .quad .LABEL__string_114__data
  .quad 4
  .quad 3
.LABEL__string_114__data: .string "esi"

  .align 8
.LABEL__string_115:
  .quad .LABEL__string_115__data
  .quad 3
  .quad 2
.LABEL__string_115__data: .string "si"

  .align 8
.LABEL__string_116:
  .quad .LABEL__string_116__data
  .quad 4
  .quad 3
.LABEL__string_116__data: .string "sil"

  .align 8
.LABEL__string_117:
  .quad .LABEL__string_117__data
  .quad 4
  .quad 3
.LABEL__string_117__data: .string "rdi"

  .align 8
.LABEL__string_118:
  .quad .LABEL__string_118__data
  .quad 4
  .quad 3
.LABEL__string_118__data: .string "edi"

  .align 8
.LABEL__string_119:
  .quad .LABEL__string_119__data
  .quad 3
  .quad 2
.LABEL__string_119__data: .string "di"

  .align 8
.LABEL__string_120:
  .quad .LABEL__string_120__data
  .quad 4
  .quad 3
.LABEL__string_120__data: .string "dil"

  .align 8
.LABEL__string_121:
  .quad .LABEL__string_121__data
  .quad 4
  .quad 3
.LABEL__string_121__data: .string "rsp"

  .align 8
.LABEL__string_122:
  .quad .LABEL__string_122__data
  .quad 4
  .quad 3
.LABEL__string_122__data: .string "esp"

  .align 8
.LABEL__string_123:
  .quad .LABEL__string_123__data
  .quad 3
  .quad 2
.LABEL__string_123__data: .string "sp"

  .align 8
.LABEL__string_124:
  .quad .LABEL__string_124__data
  .quad 4
  .quad 3
.LABEL__string_124__data: .string "spl"

  .align 8
.LABEL__string_125:
  .quad .LABEL__string_125__data
  .quad 4
  .quad 3
.LABEL__string_125__data: .string "rbp"

  .align 8
.LABEL__string_126:
  .quad .LABEL__string_126__data
  .quad 4
  .quad 3
.LABEL__string_126__data: .string "ebp"

  .align 8
.LABEL__string_127:
  .quad .LABEL__string_127__data
  .quad 3
  .quad 2
.LABEL__string_127__data: .string "bp"

  .align 8
.LABEL__string_128:
  .quad .LABEL__string_128__data
  .quad 4
  .quad 3
.LABEL__string_128__data: .string "bpl"

  .align 8
.LABEL__string_129:
  .quad .LABEL__string_129__data
  .quad 3
  .quad 2
.LABEL__string_129__data: .string "r8"

  .align 8
.LABEL__string_130:
  .quad .LABEL__string_130__data
  .quad 4
  .quad 3
.LABEL__string_130__data: .string "r8d"

  .align 8
.LABEL__string_131:
  .quad .LABEL__string_131__data
  .quad 4
  .quad 3
.LABEL__string_131__data: .string "r8w"

  .align 8
.LABEL__string_132:
  .quad .LABEL__string_132__data
  .quad 4
  .quad 3
.LABEL__string_132__data: .string "r8b"

  .align 8
.LABEL__string_133:
  .quad .LABEL__string_133__data
  .quad 3
  .quad 2
.LABEL__string_133__data: .string "r9"

  .align 8
.LABEL__string_134:
  .quad .LABEL__string_134__data
  .quad 4
  .quad 3
.LABEL__string_134__data: .string "r9d"

  .align 8
.LABEL__string_135:
  .quad .LABEL__string_135__data
  .quad 4
  .quad 3
.LABEL__string_135__data: .string "r9w"

  .align 8
.LABEL__string_136:
  .quad .LABEL__string_136__data
  .quad 4
  .quad 3
.LABEL__string_136__data: .string "r9b"

  .align 8
.LABEL__string_137:
  .quad .LABEL__string_137__data
  .quad 4
  .quad 3
.LABEL__string_137__data: .string "r10"

  .align 8
.LABEL__string_138:
  .quad .LABEL__string_138__data
  .quad 5
  .quad 4
.LABEL__string_138__data: .string "r10d"

  .align 8
.LABEL__string_139:
  .quad .LABEL__string_139__data
  .quad 5
  .quad 4
.LABEL__string_139__data: .string "r10w"

  .align 8
.LABEL__string_140:
  .quad .LABEL__string_140__data
  .quad 5
  .quad 4
.LABEL__string_140__data: .string "r10b"

  .align 8
.LABEL__string_141:
  .quad .LABEL__string_141__data
  .quad 4
  .quad 3
.LABEL__string_141__data: .string "r11"

  .align 8
.LABEL__string_142:
  .quad .LABEL__string_142__data
  .quad 5
  .quad 4
.LABEL__string_142__data: .string "r11d"

  .align 8
.LABEL__string_143:
  .quad .LABEL__string_143__data
  .quad 5
  .quad 4
.LABEL__string_143__data: .string "r11w"

  .align 8
.LABEL__string_144:
  .quad .LABEL__string_144__data
  .quad 5
  .quad 4
.LABEL__string_144__data: .string "r11b"

  .align 8
.LABEL__string_145:
  .quad .LABEL__string_145__data
  .quad 4
  .quad 3
.LABEL__string_145__data: .string "r12"

  .align 8
.LABEL__string_146:
  .quad .LABEL__string_146__data
  .quad 5
  .quad 4
.LABEL__string_146__data: .string "r12d"

  .align 8
.LABEL__string_147:
  .quad .LABEL__string_147__data
  .quad 5
  .quad 4
.LABEL__string_147__data: .string "r12w"

  .align 8
.LABEL__string_148:
  .quad .LABEL__string_148__data
  .quad 5
  .quad 4
.LABEL__string_148__data: .string "r12b"

  .align 8
.LABEL__string_149:
  .quad .LABEL__string_149__data
  .quad 4
  .quad 3
.LABEL__string_149__data: .string "r13"

  .align 8
.LABEL__string_150:
  .quad .LABEL__string_150__data
  .quad 5
  .quad 4
.LABEL__string_150__data: .string "r13d"

  .align 8
.LABEL__string_151:
  .quad .LABEL__string_151__data
  .quad 5
  .quad 4
.LABEL__string_151__data: .string "r13w"

  .align 8
.LABEL__string_152:
  .quad .LABEL__string_152__data
  .quad 5
  .quad 4
.LABEL__string_152__data: .string "r13b"

  .align 8
.LABEL__string_153:
  .quad .LABEL__string_153__data
  .quad 4
  .quad 3
.LABEL__string_153__data: .string "r14"

  .align 8
.LABEL__string_154:
  .quad .LABEL__string_154__data
  .quad 5
  .quad 4
.LABEL__string_154__data: .string "r14d"

  .align 8
.LABEL__string_155:
  .quad .LABEL__string_155__data
  .quad 5
  .quad 4
.LABEL__string_155__data: .string "r14w"

  .align 8
.LABEL__string_156:
  .quad .LABEL__string_156__data
  .quad 5
  .quad 4
.LABEL__string_156__data: .string "r14b"

  .align 8
.LABEL__string_157:
  .quad .LABEL__string_157__data
  .quad 4
  .quad 3
.LABEL__string_157__data: .string "r15"

  .align 8
.LABEL__string_158:
  .quad .LABEL__string_158__data
  .quad 5
  .quad 4
.LABEL__string_158__data: .string "r15d"

  .align 8
.LABEL__string_159:
  .quad .LABEL__string_159__data
  .quad 5
  .quad 4
.LABEL__string_159__data: .string "r15w"

  .align 8
.LABEL__string_160:
  .quad .LABEL__string_160__data
  .quad 5
  .quad 4
.LABEL__string_160__data: .string "r15b"

  .align 8
.LABEL__string_161:
  .quad .LABEL__string_161__data
  .quad 24
  .quad 23
.LABEL__string_161__data: .string "All registered are used"

  .align 8
.LABEL__string_162:
  .quad .LABEL__string_162__data
  .quad 10
  .quad 9
.LABEL__string_162__data: .string "Register "

  .align 8
.LABEL__string_163:
  .quad .LABEL__string_163__data
  .quad 30
  .quad 29
.LABEL__string_163__data: .string " already mapped to variable: "

  .align 8
.LABEL__string_164:
  .quad .LABEL__string_164__data
  .quad 28
  .quad 27
.LABEL__string_164__data: .string "  # store global variable: "

  .align 8
.LABEL__string_165:
  .quad .LABEL__string_165__data
  .quad 24
  .quad 23
.LABEL__string_165__data: .string "  # [discarded value]: "

  .align 8
.LABEL__string_166:
  .quad .LABEL__string_166__data
  .quad 20
  .quad 19
.LABEL__string_166__data: .string "  # [live values]: "

  .align 8
.LABEL__string_167:
  .quad .LABEL__string_167__data
  .quad 23
  .quad 22
.LABEL__string_167__data: .string "  # [used registers]: "

  .align 8
.LABEL__string_168:
  .quad .LABEL__string_168__data
  .quad 19
  .quad 18
.LABEL__string_168__data: .string "  .section .rodata"

  .align 8
.LABEL__string_169:
  .quad .LABEL__string_169__data
  .quad 11
  .quad 10
.LABEL__string_169__data: .string "  .align 8"

  .align 8
.LABEL__string_170:
  .quad .LABEL__string_170__data
  .quad 9
  .quad 8
.LABEL__string_170__data: .string "  .quad "

  .align 8
.LABEL__string_171:
  .quad .LABEL__string_171__data
  .quad 7
  .quad 6
.LABEL__string_171__data: .string "__data"

  .align 8
.LABEL__string_172:
  .quad .LABEL__string_172__data
  .quad 17
  .quad 16
.LABEL__string_172__data: .string "__data: .string "

  .align 8
.LABEL__string_173:
  .quad .LABEL__string_173__data
  .quad 16
  .quad 15
.LABEL__string_173__data: .string ".LABEL__string_"

  .align 8
.LABEL__string_174:
  .quad .LABEL__string_174__data
  .quad 17
  .quad 16
.LABEL__string_174__data: .string "  .quad .LABEL__"

  .align 8
.LABEL__string_175:
  .quad .LABEL__string_175__data
  .quad 14
  .quad 13
.LABEL__string_175__data: .string "__object_type"

  .align 8
.LABEL__string_176:
  .quad .LABEL__string_176__data
  .quad 26
  .quad 25
.LABEL__string_176__data: .string "__object_type__name__data"

  .align 8
.LABEL__string_177:
  .quad .LABEL__string_177__data
  .quad 37
  .quad 36
.LABEL__string_177__data: .string "__object_type__name__data: .string \""

  .align 8
.LABEL__string_178:
  .quad .LABEL__string_178__data
  .quad 10
  .quad 9
.LABEL__string_178__data: .string "  .quad 0"

  .align 8
.LABEL__string_179:
  .quad .LABEL__string_179__data
  .quad 7
  .quad 6
.LABEL__string_179__data: .string "  .bss"

  .align 8
.LABEL__string_180:
  .quad .LABEL__string_180__data
  .quad 55
  .quad 54
.LABEL__string_180__data: .string "Global variables must be declared as undefined for now"

  .align 8
.LABEL__string_181:
  .quad .LABEL__string_181__data
  .quad 9
  .quad 8
.LABEL__string_181__data: .string "  .skip "

  .align 8
.LABEL__string_182:
  .quad .LABEL__string_182__data
  .quad 4
  .quad 3
.LABEL__string_182__data: .string "Any"

  .align 8
.LABEL__string_183:
  .quad .LABEL__string_183__data
  .quad 5
  .quad 4
.LABEL__string_183__data: .string "bool"

  .align 8
.LABEL__string_184:
  .quad .LABEL__string_184__data
  .quad 6
  .quad 5
.LABEL__string_184__data: .string "isize"

  .align 8
.LABEL__string_185:
  .quad .LABEL__string_185__data
  .quad 3
  .quad 2
.LABEL__string_185__data: .string "i8"

  .align 8
.LABEL__string_186:
  .quad .LABEL__string_186__data
  .quad 4
  .quad 3
.LABEL__string_186__data: .string "i16"

  .align 8
.LABEL__string_187:
  .quad .LABEL__string_187__data
  .quad 4
  .quad 3
.LABEL__string_187__data: .string "i32"

  .align 8
.LABEL__string_188:
  .quad .LABEL__string_188__data
  .quad 4
  .quad 3
.LABEL__string_188__data: .string "i64"

  .align 8
.LABEL__string_189:
  .quad .LABEL__string_189__data
  .quad 8
  .quad 7
.LABEL__string_189__data: .string "Nothing"

  .align 8
.LABEL__string_190:
  .quad .LABEL__string_190__data
  .quad 5
  .quad 4
.LABEL__string_190__data: .string "Null"

  .align 8
.LABEL__string_191:
  .quad .LABEL__string_191__data
  .quad 10
  .quad 9
.LABEL__string_191__data: .string "Undefined"

  .align 8
.LABEL__string_192:
  .quad .LABEL__string_192__data
  .quad 21
  .quad 20
.LABEL__string_192__data: .string "Undefined function: "

  .align 8
.LABEL__string_193:
  .quad .LABEL__string_193__data
  .quad 6
  .quad 5
.LABEL__string_193__data: .string " :: ("

  .align 8
.LABEL__string_194:
  .quad .LABEL__string_194__data
  .quad 2
  .quad 1
.LABEL__string_194__data: .string ")"

  .align 8
.LABEL__string_195:
  .quad .LABEL__string_195__data
  .quad 2
  .quad 1
.LABEL__string_195__data: .string "$"

  .align 8
.LABEL__string_196:
  .quad .LABEL__string_196__data
  .quad 29
  .quad 28
.LABEL__string_196__data: .string "Duplicate type declaration: "

  .align 8
.LABEL__string_197:
  .quad .LABEL__string_197__data
  .quad 29
  .quad 28
.LABEL__string_197__data: .string "Cannot be used as base type."

  .align 8
.LABEL__string_198:
  .quad .LABEL__string_198__data
  .quad 19
  .quad 18
.LABEL__string_198__data: .string "Not a struct type."

  .align 8
.LABEL__string_199:
  .quad .LABEL__string_199__data
  .quad 12
  .quad 11
.LABEL__string_199__data: .string "Object_Type"

  .align 8
.LABEL__string_200:
  .quad .LABEL__string_200__data
  .quad 42
  .quad 41
.LABEL__string_200__data: .string "Checked array types are not supported yet"

  .align 8
.LABEL__string_201:
  .quad .LABEL__string_201__data
  .quad 2
  .quad 1
.LABEL__string_201__data: .string "["

  .align 8
.LABEL__string_202:
  .quad .LABEL__string_202__data
  .quad 4
  .quad 3
.LABEL__string_202__data: .string "; ?"

  .align 8
.LABEL__string_203:
  .quad .LABEL__string_203__data
  .quad 2
  .quad 1
.LABEL__string_203__data: .string "]"

  .align 8
.LABEL__string_204:
  .quad .LABEL__string_204__data
  .quad 17
  .quad 16
.LABEL__string_204__data: .string "Unsupported type"

  .align 8
.LABEL__string_205:
  .quad .LABEL__string_205__data
  .quad 15
  .quad 14
.LABEL__string_205__data: .string "Unknown type: "

  .align 8
.LABEL__string_206:
  .quad .LABEL__string_206__data
  .quad 2
  .quad 1
.LABEL__string_206__data: .string "@"

  .align 8
.LABEL__string_207:
  .quad .LABEL__string_207__data
  .quad 25
  .quad 24
.LABEL__string_207__data: .string "Missing return statement"

  .align 8
.LABEL__string_208:
  .quad .LABEL__string_208__data
  .quad 42
  .quad 41
.LABEL__string_208__data: .string "Found non-empty unreachable block: block."

  .align 8
.LABEL__string_209:
  .quad .LABEL__string_209__data
  .quad 25
  .quad 24
.LABEL__string_209__data: .string " requires a basic block."

  .align 8
.LABEL__string_210:
  .quad .LABEL__string_210__data
  .quad 19
  .quad 18
.LABEL__string_210__data: .string "Not an array value"

  .align 8
.LABEL__string_211:
  .quad .LABEL__string_211__data
  .quad 20
  .quad 19
.LABEL__string_211__data: .string "Not a pointer value"

  .align 8
.LABEL__string_212:
  .quad .LABEL__string_212__data
  .quad 22
  .quad 21
.LABEL__string_212__data: .string " is not a struct type"

  .align 8
.LABEL__string_213:
  .quad .LABEL__string_213__data
  .quad 17
  .quad 16
.LABEL__string_213__data: .string " doesn't have a "

  .align 8
.LABEL__string_214:
  .quad .LABEL__string_214__data
  .quad 8
  .quad 7
.LABEL__string_214__data: .string " member"

  .align 8
.LABEL__string_215:
  .quad .LABEL__string_215__data
  .quad 22
  .quad 21
.LABEL__string_215__data: .string "Undeclared variable: "

  .align 8
.LABEL__string_216:
  .quad .LABEL__string_216__data
  .quad 25
  .quad 24
.LABEL__string_216__data: .string "Break outside of a loop?"

  .align 8
.LABEL__string_217:
  .quad .LABEL__string_217__data
  .quad 18
  .quad 17
.LABEL__string_217__data: .string "Cannot assign a '"

  .align 8
.LABEL__string_218:
  .quad .LABEL__string_218__data
  .quad 15
  .quad 14
.LABEL__string_218__data: .string "' value to a '"

  .align 8
.LABEL__string_219:
  .quad .LABEL__string_219__data
  .quad 11
  .quad 10
.LABEL__string_219__data: .string "' variable"

  .align 8
.LABEL__string_220:
  .quad .LABEL__string_220__data
  .quad 29
  .quad 28
.LABEL__string_220__data: .string ": Redundant type declaration"

  .align 8
.LABEL__string_221:
  .quad .LABEL__string_221__data
  .quad 24
  .quad 23
.LABEL__string_221__data: .string "Invalid variable type: "

  .align 8
.LABEL__string_222:
  .quad .LABEL__string_222__data
  .quad 34
  .quad 33
.LABEL__string_222__data: .string "Cannot infer type from null value"

  .align 8
.LABEL__string_223:
  .quad .LABEL__string_223__data
  .quad 25
  .quad 24
.LABEL__string_223__data: .string "Incompatible types: got "

  .align 8
.LABEL__string_224:
  .quad .LABEL__string_224__data
  .quad 13
  .quad 12
.LABEL__string_224__data: .string " instead of "

  .align 8
.LABEL__string_225:
  .quad .LABEL__string_225__data
  .quad 21
  .quad 20
.LABEL__string_225__data: .string "Not an integer value"

  .align 8
.LABEL__string_226:
  .quad .LABEL__string_226__data
  .quad 35
  .quad 34
.LABEL__string_226__data: .string "TODO: Evaluate constant expression"

  .align 8
.LABEL__string_227:
  .quad .LABEL__string_227__data
  .quad 5
  .quad 4
.LABEL__string_227__data: .string "Got "

  .align 8
.LABEL__string_228:
  .quad .LABEL__string_228__data
  .quad 27
  .quad 26
.LABEL__string_228__data: .string " value instead of an array"

  .align 8
.LABEL__string_229:
  .quad .LABEL__string_229__data
  .quad 16
  .quad 15
.LABEL__string_229__data: .string "Values of type "

  .align 8
.LABEL__string_230:
  .quad .LABEL__string_230__data
  .quad 18
  .quad 17
.LABEL__string_230__data: .string " are not callable"

  .align 8
.LABEL__string_231:
  .quad .LABEL__string_231__data
  .quad 28
  .quad 27
.LABEL__string_231__data: .string "Invalid type literal syntax"

  .align 8
.LABEL__string_232:
  .quad .LABEL__string_232__data
  .quad 38
  .quad 37
.LABEL__string_232__data: .string "Found at least two matching functions"

  .align 8
.LABEL__string_233:
  .quad .LABEL__string_233__data
  .quad 29
  .quad 28
.LABEL__string_233__data: .string "Found no matching function: "

  .align 8
.LABEL__string_234:
  .quad .LABEL__string_234__data
  .quad 10
  .quad 9
.LABEL__string_234__data: .string " = func ("

  .align 8
.LABEL__string_235:
  .quad .LABEL__string_235__data
  .quad 9
  .quad 8
.LABEL__string_235__data: .string ") -> Any"

  .align 8
.LABEL__string_236:
  .quad .LABEL__string_236__data
  .quad 22
  .quad 21
.LABEL__string_236__data: .string "Unsupported arguments"

  .align 8
.LABEL__string_237:
  .quad .LABEL__string_237__data
  .quad 54
  .quad 53
.LABEL__string_237__data: .string "Positional arguments cannot be added after named ones"

  .align 8
.LABEL__string_238:
  .quad .LABEL__string_238__data
  .quad 31
  .quad 30
.LABEL__string_238__data: .string "Operands are not the same type"

  .align 8
.LABEL__string_239:
  .quad .LABEL__string_239__data
  .quad 7
  .quad 6
.LABEL__string_239__data: .string "String"

  .align 8
.LABEL__string_240:
  .quad .LABEL__string_240__data
  .quad 22
  .quad 21
.LABEL__string_240__data: .string " has no such member: "

  .align 8
.LABEL__string_241:
  .quad .LABEL__string_241__data
  .quad 25
  .quad 24
.LABEL__string_241__data: .string "Unuspported value type: "

  .align 8
.LABEL__string_242:
  .quad .LABEL__string_242__data
  .quad 37
  .quad 36
.LABEL__string_242__data: .string "Not a IR_Struct_Type pointer value: "

  .align 8
.LABEL__string_243:
  .quad .LABEL__string_243__data
  .quad 31
  .quad 30
.LABEL__string_243__data: .string "Not an IR_Pointer_Type value: "

  .align 8
.LABEL__string_244:
  .quad .LABEL__string_244__data
  .quad 1
  .quad 0
.LABEL__string_244__data: .string ""

  .align 8
.LABEL__string_245:
  .quad .LABEL__string_245__data
  .quad 17
  .quad 16
.LABEL__string_245__data: .string "Unuspported type"

  .align 8
.LABEL__string_246:
  .quad .LABEL__string_246__data
  .quad 12
  .quad 11
.LABEL__string_246__data: .string "object_type"

  .align 8
.LABEL__string_247:
  .quad .LABEL__string_247__data
  .quad 34
  .quad 33
.LABEL__string_247__data: .string "Struct init argument without name"

  .align 8
.LABEL__string_248:
  .quad .LABEL__string_248__data
  .quad 28
  .quad 27
.LABEL__string_248__data: .string "Undeclared variable value: "

  .align 8
.LABEL__string_249:
  .quad .LABEL__string_249__data
  .quad 32
  .quad 31
.LABEL__string_249__data: .string "Variable type without address: "

  .align 8
.LABEL__string_250:
  .quad .LABEL__string_250__data
  .quad 19
  .quad 18
.LABEL__string_250__data: .string "Unknown function: "

  .align 8
.LABEL__string_251:
  .quad .LABEL__string_251__data
  .quad 19
  .quad 18
.LABEL__string_251__data: .string "Unknown variable: "

  .align 8
.LABEL__string_252:
  .quad .LABEL__string_252__data
  .quad 20
  .quad 19
.LABEL__string_252__data: .string ": Unexpected type: "

  .align 8
.LABEL__string_253:
  .quad .LABEL__string_253__data
  .quad 7
  .quad 6
.LABEL__string_253__data: .string "func ("

  .align 8
.LABEL__string_254:
  .quad .LABEL__string_254__data
  .quad 6
  .quad 5
.LABEL__string_254__data: .string ") -> "

  .align 8
.LABEL__string_255:
  .quad .LABEL__string_255__data
  .quad 7
  .quad 6
.LABEL__string_255__data: .string "Object"

  .align 8
.LABEL__string_256:
  .quad .LABEL__string_256__data
  .quad 7
  .quad 6
.LABEL__string_256__data: .string "Found "

  .align 8
.LABEL__string_257:
  .quad .LABEL__string_257__data
  .quad 29
  .quad 28
.LABEL__string_257__data: .string " without user instructions: "

  .align 8
.LABEL__string_258:
  .quad .LABEL__string_258__data
  .quad 10
  .quad 9
.LABEL__string_258__data: .string "undefined"

  .align 8
.LABEL__string_259:
  .quad .LABEL__string_259__data
  .quad 9
  .quad 8
.LABEL__string_259__data: .string ".address"

  .align 8
.LABEL__string_260:
  .quad .LABEL__string_260__data
  .quad 10
  .quad 9
.LABEL__string_260__data: .string "condition"

  .align 8
.LABEL__string_261:
  .quad .LABEL__string_261__data
  .quad 55
  .quad 54
.LABEL__string_261__data: .string "Tried to remove instruction belonging to another block"

  .align 8
.LABEL__string_262:
  .quad .LABEL__string_262__data
  .quad 7
  .quad 6
.LABEL__string_262__data: .string "block."

  .align 8
.LABEL__string_263:
  .quad .LABEL__string_263__data
  .quad 4
  .quad 3
.LABEL__string_263__data: .string "   "

  .align 8
.LABEL__string_264:
  .quad .LABEL__string_264__data
  .quad 3
  .quad 2
.LABEL__string_264__data: .string " {"

  .align 8
.LABEL__string_265:
  .quad .LABEL__string_265__data
  .quad 6
  .quad 5
.LABEL__string_265__data: .string "abort"

  .align 8
.LABEL__string_266:
  .quad .LABEL__string_266__data
  .quad 5
  .quad 4
.LABEL__string_266__data: .string "exit"

  .align 8
.LABEL__string_267:
  .quad .LABEL__string_267__data
  .quad 17
  .quad 16
.LABEL__string_267__data: .string "argument-0-value"

  .align 8
.LABEL__string_268:
  .quad .LABEL__string_268__data
  .quad 17
  .quad 16
.LABEL__string_268__data: .string "argument-1-value"

  .align 8
.LABEL__string_269:
  .quad .LABEL__string_269__data
  .quad 17
  .quad 16
.LABEL__string_269__data: .string "argument-2-value"

  .align 8
.LABEL__string_270:
  .quad .LABEL__string_270__data
  .quad 17
  .quad 16
.LABEL__string_270__data: .string "argument-3-value"

  .align 8
.LABEL__string_271:
  .quad .LABEL__string_271__data
  .quad 17
  .quad 16
.LABEL__string_271__data: .string "argument-4-value"

  .align 8
.LABEL__string_272:
  .quad .LABEL__string_272__data
  .quad 17
  .quad 16
.LABEL__string_272__data: .string "argument-5-value"

  .align 8
.LABEL__string_273:
  .quad .LABEL__string_273__data
  .quad 25
  .quad 24
.LABEL__string_273__data: .string "Missing argument index: "

  .align 8
.LABEL__string_274:
  .quad .LABEL__string_274__data
  .quad 5
  .quad 4
.LABEL__string_274__data: .string "call"

  .align 8
.LABEL__string_275:
  .quad .LABEL__string_275__data
  .quad 17
  .quad 16
.LABEL__string_275__data: .string "function_address"

  .align 8
.LABEL__string_276:
  .quad .LABEL__string_276__data
  .quad 5
  .quad 4
.LABEL__string_276__data: .string "cast"

  .align 8
.LABEL__string_277:
  .quad .LABEL__string_277__data
  .quad 6
  .quad 5
.LABEL__string_277__data: .string "value"

  .align 8
.LABEL__string_278:
  .quad .LABEL__string_278__data
  .quad 5
  .quad 4
.LABEL__string_278__data: .string "jump"

  .align 8
.LABEL__string_279:
  .quad .LABEL__string_279__data
  .quad 16
  .quad 15
.LABEL__string_279__data: .string "load_array_item"

  .align 8
.LABEL__string_280:
  .quad .LABEL__string_280__data
  .quad 12
  .quad 11
.LABEL__string_280__data: .string "array_value"

  .align 8
.LABEL__string_281:
  .quad .LABEL__string_281__data
  .quad 12
  .quad 11
.LABEL__string_281__data: .string "index_value"

  .align 8
.LABEL__string_282:
  .quad .LABEL__string_282__data
  .quad 27
  .quad 26
.LABEL__string_282__data: .string "load_struct_member_address"

  .align 8
.LABEL__string_283:
  .quad .LABEL__string_283__data
  .quad 19
  .quad 18
.LABEL__string_283__data: .string "load_struct_member"

  .align 8
.LABEL__string_284:
  .quad .LABEL__string_284__data
  .quad 21
  .quad 20
.LABEL__string_284__data: .string "struct_pointer_value"

  .align 8
.LABEL__string_285:
  .quad .LABEL__string_285__data
  .quad 22
  .quad 21
.LABEL__string_285__data: .string "load_variable_address"

  .align 8
.LABEL__string_286:
  .quad .LABEL__string_286__data
  .quad 15
  .quad 14
.LABEL__string_286__data: .string "variable_value"

  .align 8
.LABEL__string_287:
  .quad .LABEL__string_287__data
  .quad 14
  .quad 13
.LABEL__string_287__data: .string "load_variable"

  .align 8
.LABEL__string_288:
  .quad .LABEL__string_288__data
  .quad 4
  .quad 3
.LABEL__string_288__data: .string "new"

  .align 8
.LABEL__string_289:
  .quad .LABEL__string_289__data
  .quad 11
  .quad 10
.LABEL__string_289__data: .string "init_value"

  .align 8
.LABEL__string_290:
  .quad .LABEL__string_290__data
  .quad 7
  .quad 6
.LABEL__string_290__data: .string "return"

  .align 8
.LABEL__string_291:
  .quad .LABEL__string_291__data
  .quad 13
  .quad 12
.LABEL__string_291__data: .string "return_value"

  .align 8
.LABEL__string_292:
  .quad .LABEL__string_292__data
  .quad 17
  .quad 16
.LABEL__string_292__data: .string "store_array_item"

  .align 8
.LABEL__string_293:
  .quad .LABEL__string_293__data
  .quad 20
  .quad 19
.LABEL__string_293__data: .string "store_struct_member"

  .align 8
.LABEL__string_294:
  .quad .LABEL__string_294__data
  .quad 11
  .quad 10
.LABEL__string_294__data: .string "left_value"

  .align 8
.LABEL__string_295:
  .quad .LABEL__string_295__data
  .quad 12
  .quad 11
.LABEL__string_295__data: .string "right_value"

  .align 8
.LABEL__string_296:
  .quad .LABEL__string_296__data
  .quad 4
  .quad 3
.LABEL__string_296__data: .string " + "

  .align 8
.LABEL__string_297:
  .quad .LABEL__string_297__data
  .quad 4
  .quad 3
.LABEL__string_297__data: .string " / "

  .align 8
.LABEL__string_298:
  .quad .LABEL__string_298__data
  .quad 5
  .quad 4
.LABEL__string_298__data: .string " == "

  .align 8
.LABEL__string_299:
  .quad .LABEL__string_299__data
  .quad 4
  .quad 3
.LABEL__string_299__data: .string " > "

  .align 8
.LABEL__string_300:
  .quad .LABEL__string_300__data
  .quad 5
  .quad 4
.LABEL__string_300__data: .string " >= "

  .align 8
.LABEL__string_301:
  .quad .LABEL__string_301__data
  .quad 4
  .quad 3
.LABEL__string_301__data: .string " < "

  .align 8
.LABEL__string_302:
  .quad .LABEL__string_302__data
  .quad 5
  .quad 4
.LABEL__string_302__data: .string " <= "

  .align 8
.LABEL__string_303:
  .quad .LABEL__string_303__data
  .quad 5
  .quad 4
.LABEL__string_303__data: .string " // "

  .align 8
.LABEL__string_304:
  .quad .LABEL__string_304__data
  .quad 4
  .quad 3
.LABEL__string_304__data: .string " * "

  .align 8
.LABEL__string_305:
  .quad .LABEL__string_305__data
  .quad 5
  .quad 4
.LABEL__string_305__data: .string " != "

  .align 8
.LABEL__string_306:
  .quad .LABEL__string_306__data
  .quad 4
  .quad 3
.LABEL__string_306__data: .string " - "

  .align 8
.LABEL__string_307:
  .quad .LABEL__string_307__data
  .quad 4
  .quad 3
.LABEL__string_307__data: .string "phi"

  .align 8
.LABEL__string_308:
  .quad .LABEL__string_308__data
  .quad 22
  .quad 21
.LABEL__string_308__data: .string "Failed to open file: "

  .align 8
.LABEL__string_309:
  .quad .LABEL__string_309__data
  .quad 35
  .quad 34
.LABEL__string_309__data: .string ": File doesn't end with a new line"

  .align 8
.LABEL__string_310:
  .quad .LABEL__string_310__data
  .quad 24
  .quad 23
.LABEL__string_310__data: .string "Unsupported file path: "

  .align 8
.LABEL__string_311:
  .quad .LABEL__string_311__data
  .quad 3
  .quad 2
.LABEL__string_311__data: .string "./"

  .align 8
.LABEL__string_312:
  .quad .LABEL__string_312__data
  .quad 4
  .quad 3
.LABEL__string_312__data: .string "../"

  .align 8
.LABEL__string_313:
  .quad .LABEL__string_313__data
  .quad 5
  .quad 4
.LABEL__string_313__data: .string "/../"

  .align 8
.LABEL__string_314:
  .quad .LABEL__string_314__data
  .quad 32
  .quad 31
.LABEL__string_314__data: .string "Anonymous function without body"

  .align 8
.LABEL__string_315:
  .quad .LABEL__string_315__data
  .quad 49
  .quad 48
.LABEL__string_315__data: .string "Only global variables can have an external value"

  .align 8
.LABEL__string_316:
  .quad .LABEL__string_316__data
  .quad 34
  .quad 33
.LABEL__string_316__data: .string "External variables require a type"

  .align 8
.LABEL__string_317:
  .quad .LABEL__string_317__data
  .quad 20
  .quad 19
.LABEL__string_317__data: .string "anonymous_function_"

  .align 8
.LABEL__string_318:
  .quad .LABEL__string_318__data
  .quad 12
  .quad 11
.LABEL__string_318__data: .string ": Consumed "

  .align 8
.LABEL__string_319:
  .quad .LABEL__string_319__data
  .quad 15
  .quad 14
.LABEL__string_319__data: .string " spaces where "

  .align 8
.LABEL__string_320:
  .quad .LABEL__string_320__data
  .quad 14
  .quad 13
.LABEL__string_320__data: .string " are expected"

  .align 8
.LABEL__string_321:
  .quad .LABEL__string_321__data
  .quad 2
  .quad 1
.LABEL__string_321__data: .string "&"

  .align 8
.LABEL__string_322:
  .quad .LABEL__string_322__data
  .quad 3
  .quad 2
.LABEL__string_322__data: .string "as"

  .align 8
.LABEL__string_323:
  .quad .LABEL__string_323__data
  .quad 2
  .quad 1
.LABEL__string_323__data: .string "*"

  .align 8
.LABEL__string_324:
  .quad .LABEL__string_324__data
  .quad 6
  .quad 5
.LABEL__string_324__data: .string "break"

  .align 8
.LABEL__string_325:
  .quad .LABEL__string_325__data
  .quad 2
  .quad 1
.LABEL__string_325__data: .string "}"

  .align 8
.LABEL__string_326:
  .quad .LABEL__string_326__data
  .quad 2
  .quad 1
.LABEL__string_326__data: .string ";"

  .align 8
.LABEL__string_327:
  .quad .LABEL__string_327__data
  .quad 2
  .quad 1
.LABEL__string_327__data: .string ","

  .align 8
.LABEL__string_328:
  .quad .LABEL__string_328__data
  .quad 7
  .quad 6
.LABEL__string_328__data: .string "define"

  .align 8
.LABEL__string_329:
  .quad .LABEL__string_329__data
  .quad 2
  .quad 1
.LABEL__string_329__data: .string "."

  .align 8
.LABEL__string_330:
  .quad .LABEL__string_330__data
  .quad 5
  .quad 4
.LABEL__string_330__data: .string "else"

  .align 8
.LABEL__string_331:
  .quad .LABEL__string_331__data
  .quad 2
  .quad 1
.LABEL__string_331__data: .string "="

  .align 8
.LABEL__string_332:
  .quad .LABEL__string_332__data
  .quad 2
  .quad 1
.LABEL__string_332__data: .string "!"

  .align 8
.LABEL__string_333:
  .quad .LABEL__string_333__data
  .quad 8
  .quad 7
.LABEL__string_333__data: .string "extends"

  .align 8
.LABEL__string_334:
  .quad .LABEL__string_334__data
  .quad 9
  .quad 8
.LABEL__string_334__data: .string "external"

  .align 8
.LABEL__string_335:
  .quad .LABEL__string_335__data
  .quad 5
  .quad 4
.LABEL__string_335__data: .string "func"

  .align 8
.LABEL__string_336:
  .quad .LABEL__string_336__data
  .quad 2
  .quad 1
.LABEL__string_336__data: .string ">"

  .align 8
.LABEL__string_337:
  .quad .LABEL__string_337__data
  .quad 2
  .quad 1
.LABEL__string_337__data: .string "-"

  .align 8
.LABEL__string_338:
  .quad .LABEL__string_338__data
  .quad 3
  .quad 2
.LABEL__string_338__data: .string "if"

  .align 8
.LABEL__string_339:
  .quad .LABEL__string_339__data
  .quad 8
  .quad 7
.LABEL__string_339__data: .string "include"

  .align 8
.LABEL__string_340:
  .quad .LABEL__string_340__data
  .quad 2
  .quad 1
.LABEL__string_340__data: .string "<"

  .align 8
.LABEL__string_341:
  .quad .LABEL__string_341__data
  .quad 4
  .quad 3
.LABEL__string_341__data: .string "let"

  .align 8
.LABEL__string_342:
  .quad .LABEL__string_342__data
  .quad 5
  .quad 4
.LABEL__string_342__data: .string "loop"

  .align 8
.LABEL__string_343:
  .quad .LABEL__string_343__data
  .quad 2
  .quad 1
.LABEL__string_343__data: .string "{"

  .align 8
.LABEL__string_344:
  .quad .LABEL__string_344__data
  .quad 2
  .quad 1
.LABEL__string_344__data: .string "("

  .align 8
.LABEL__string_345:
  .quad .LABEL__string_345__data
  .quad 2
  .quad 1
.LABEL__string_345__data: .string "+"

  .align 8
.LABEL__string_346:
  .quad .LABEL__string_346__data
  .quad 2
  .quad 1
.LABEL__string_346__data: .string "?"

  .align 8
.LABEL__string_347:
  .quad .LABEL__string_347__data
  .quad 2
  .quad 1
.LABEL__string_347__data: .string "/"

  .align 8
.LABEL__string_348:
  .quad .LABEL__string_348__data
  .quad 7
  .quad 6
.LABEL__string_348__data: .string "struct"

  .align 8
.LABEL__string_349:
  .quad .LABEL__string_349__data
  .quad 8
  .quad 7
.LABEL__string_349__data: .string "unknown"

  .align 8
.LABEL__string_350:
  .quad .LABEL__string_350__data
  .quad 2
  .quad 1
.LABEL__string_350__data: .string "|"

  .align 8
.LABEL__string_351:
  .quad .LABEL__string_351__data
  .quad 6
  .quad 5
.LABEL__string_351__data: .string "while"

  .align 8
.LABEL__string_352:
  .quad .LABEL__string_352__data
  .quad 14
  .quad 13
.LABEL__string_352__data: .string ": Unexpected "

  .align 8
.LABEL__string_353:
  .quad .LABEL__string_353__data
  .quad 2
  .quad 1
.LABEL__string_353__data: .string " "

  .align 8
.LABEL__string_354:
  .quad .LABEL__string_354__data
  .quad 5
  .quad 4
.LABEL__string_354__data: .string "if ("

  .align 8
.LABEL__string_355:
  .quad .LABEL__string_355__data
  .quad 3
  .quad 2
.LABEL__string_355__data: .string ") "

  .align 8
.LABEL__string_356:
  .quad .LABEL__string_356__data
  .quad 7
  .quad 6
.LABEL__string_356__data: .string " else "

  .align 8
.LABEL__string_357:
  .quad .LABEL__string_357__data
  .quad 6
  .quad 5
.LABEL__string_357__data: .string "loop "

  .align 8
.LABEL__string_358:
  .quad .LABEL__string_358__data
  .quad 11
  .quad 10
.LABEL__string_358__data: .string " :: struct"

  .align 8
.LABEL__string_359:
  .quad .LABEL__string_359__data
  .quad 4
  .quad 3
.LABEL__string_359__data: .string " : "

  .align 8
.LABEL__string_360:
  .quad .LABEL__string_360__data
  .quad 12
  .quad 11
.LABEL__string_360__data: .string " = external"

  .align 8
.LABEL__string_361:
  .quad .LABEL__string_361__data
  .quad 5
  .quad 4
.LABEL__string_361__data: .string " := "

  .align 8
.LABEL__string_362:
  .quad .LABEL__string_362__data
  .quad 8
  .quad 7
.LABEL__string_362__data: .string "while ("

  .align 8
.LABEL__string_363:
  .quad .LABEL__string_363__data
  .quad 33
  .quad 32
.LABEL__string_363__data: .string "Unsupported AST_Statement type: "

  .align 8
.LABEL__string_364:
  .quad .LABEL__string_364__data
  .quad 3
  .quad 2
.LABEL__string_364__data: .string "; "

  .align 8
.LABEL__string_365:
  .quad .LABEL__string_365__data
  .quad 28
  .quad 27
.LABEL__string_365__data: .string "Unsupported AST_Type type: "

  .align 8
.LABEL__string_366:
  .quad .LABEL__string_366__data
  .quad 5
  .quad 4
.LABEL__string_366__data: .string " && "

  .align 8
.LABEL__string_367:
  .quad .LABEL__string_367__data
  .quad 5
  .quad 4
.LABEL__string_367__data: .string " || "

  .align 8
.LABEL__string_368:
  .quad .LABEL__string_368__data
  .quad 5
  .quad 4
.LABEL__string_368__data: .string " as "

  .align 8
.LABEL__string_369:
  .quad .LABEL__string_369__data
  .quad 5
  .quad 4
.LABEL__string_369__data: .string "new "

  .align 8
.LABEL__string_370:
  .quad .LABEL__string_370__data
  .quad 34
  .quad 33
.LABEL__string_370__data: .string "Unsupported AST_Expression type: "

  .align 8
.LABEL__string_371:
  .quad .LABEL__string_371__data
  .quad 6
  .quad 5
.LABEL__string_371__data: .string "false"

  .align 8
.LABEL__string_372:
  .quad .LABEL__string_372__data
  .quad 5
  .quad 4
.LABEL__string_372__data: .string "null"

  .align 8
.LABEL__string_373:
  .quad .LABEL__string_373__data
  .quad 5
  .quad 4
.LABEL__string_373__data: .string "true"

  .align 8
.LABEL__string_374:
  .quad .LABEL__string_374__data
  .quad 7
  .quad 6
.LABEL__string_374__data: .string "[2;37m"

  .align 8
.LABEL__string_375:
  .quad .LABEL__string_375__data
  .quad 4
  .quad 3
.LABEL__string_375__data: .string "[0m"

  .align 8
.LABEL__string_376:
  .quad .LABEL__string_376__data
  .quad 7
  .quad 6
.LABEL__string_376__data: .string "[1;33m"

  .align 8
.LABEL__string_377:
  .quad .LABEL__string_377__data
  .quad 7
  .quad 6
.LABEL__string_377__data: .string "[2;33m"

  .align 8
.LABEL__string_378:
  .quad .LABEL__string_378__data
  .quad 2
  .quad 1
.LABEL__string_378__data: .string "r"

  .align 8
.LABEL__string_379:
  .quad .LABEL__string_379__data
  .quad 21
  .quad 20
.LABEL__string_379__data: .string "Failed to write text"

  .align 8
.LABEL__string_380:
  .quad .LABEL__string_380__data
  .quad 28
  .quad 27
.LABEL__string_380__data: .string "Failed to write character: "

  .section .rodata

  .align 8
MC_Register:
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register__object_type:
  .quad 0
  .quad .LABEL__MC_Register__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__MC_Register__object_type__name__data: .string "MC_Register"

  .align 8
Object:
  .quad .LABEL__Object__object_type
.LABEL__Object__object_type:
  .quad 0
  .quad .LABEL__Object__object_type__name__data
  .quad 7
  .quad 6
  .quad 0
.LABEL__Object__object_type__name__data: .string "Object"

  .align 8
IR_Instruction:
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Instruction__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__Object__object_type
.LABEL__IR_Instruction__object_type__name__data: .string "IR_Instruction"

  .align 8
IR_Variable_Value:
  .quad .LABEL__IR_Variable_Value__object_type
.LABEL__IR_Variable_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Variable_Value__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Variable_Value__object_type__name__data: .string "IR_Variable_Value"

  .align 8
IR_Value:
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Value__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__IR_Value__object_type__name__data: .string "IR_Value"

  .align 8
IR_Type:
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Type__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__IR_Type__object_type__name__data: .string "IR_Type"

  .align 8
IR_Variable:
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Variable__object_type:
  .quad 0
  .quad .LABEL__IR_Variable__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__IR_Variable__object_type__name__data: .string "IR_Variable"

  .align 8
IR_Block:
  .quad .LABEL__IR_Block__object_type
.LABEL__IR_Block__object_type:
  .quad 0
  .quad .LABEL__IR_Block__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__IR_Block__object_type__name__data: .string "IR_Block"

  .align 8
IR_Function:
  .quad .LABEL__IR_Function__object_type
.LABEL__IR_Function__object_type:
  .quad 0
  .quad .LABEL__IR_Function__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Object__object_type
.LABEL__IR_Function__object_type__name__data: .string "IR_Function"

  .align 8
IR_Function_Type:
  .quad .LABEL__IR_Function_Type__object_type
.LABEL__IR_Function_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Type__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Function_Type__object_type__name__data: .string "IR_Function_Type"

  .align 8
MC_Address:
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Address__object_type__name__data
  .quad 11
  .quad 10
  .quad .LABEL__Object__object_type
.LABEL__MC_Address__object_type__name__data: .string "MC_Address"

  .align 8
MC_Register_RAX:
  .quad .LABEL__MC_Register_RAX__object_type
.LABEL__MC_Register_RAX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RAX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RAX__object_type__name__data: .string "MC_Register_RAX"

  .align 8
MC_Register_RCX:
  .quad .LABEL__MC_Register_RCX__object_type
.LABEL__MC_Register_RCX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RCX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RCX__object_type__name__data: .string "MC_Register_RCX"

  .align 8
MC_Register_RDX:
  .quad .LABEL__MC_Register_RDX__object_type
.LABEL__MC_Register_RDX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RDX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RDX__object_type__name__data: .string "MC_Register_RDX"

  .align 8
MC_Register_RBX:
  .quad .LABEL__MC_Register_RBX__object_type
.LABEL__MC_Register_RBX__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RBX__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RBX__object_type__name__data: .string "MC_Register_RBX"

  .align 8
MC_Register_RSI:
  .quad .LABEL__MC_Register_RSI__object_type
.LABEL__MC_Register_RSI__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RSI__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RSI__object_type__name__data: .string "MC_Register_RSI"

  .align 8
MC_Register_RDI:
  .quad .LABEL__MC_Register_RDI__object_type
.LABEL__MC_Register_RDI__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RDI__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RDI__object_type__name__data: .string "MC_Register_RDI"

  .align 8
MC_Register_RSP:
  .quad .LABEL__MC_Register_RSP__object_type
.LABEL__MC_Register_RSP__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RSP__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RSP__object_type__name__data: .string "MC_Register_RSP"

  .align 8
MC_Register_RBP:
  .quad .LABEL__MC_Register_RBP__object_type
.LABEL__MC_Register_RBP__object_type:
  .quad 0
  .quad .LABEL__MC_Register_RBP__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_RBP__object_type__name__data: .string "MC_Register_RBP"

  .align 8
MC_Register_R8:
  .quad .LABEL__MC_Register_R8__object_type
.LABEL__MC_Register_R8__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R8__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R8__object_type__name__data: .string "MC_Register_R8"

  .align 8
MC_Register_R9:
  .quad .LABEL__MC_Register_R9__object_type
.LABEL__MC_Register_R9__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R9__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R9__object_type__name__data: .string "MC_Register_R9"

  .align 8
MC_Register_R10:
  .quad .LABEL__MC_Register_R10__object_type
.LABEL__MC_Register_R10__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R10__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R10__object_type__name__data: .string "MC_Register_R10"

  .align 8
MC_Register_R11:
  .quad .LABEL__MC_Register_R11__object_type
.LABEL__MC_Register_R11__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R11__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R11__object_type__name__data: .string "MC_Register_R11"

  .align 8
MC_Register_R12:
  .quad .LABEL__MC_Register_R12__object_type
.LABEL__MC_Register_R12__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R12__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R12__object_type__name__data: .string "MC_Register_R12"

  .align 8
MC_Register_R13:
  .quad .LABEL__MC_Register_R13__object_type
.LABEL__MC_Register_R13__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R13__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R13__object_type__name__data: .string "MC_Register_R13"

  .align 8
MC_Register_R14:
  .quad .LABEL__MC_Register_R14__object_type
.LABEL__MC_Register_R14__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R14__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R14__object_type__name__data: .string "MC_Register_R14"

  .align 8
MC_Register_R15:
  .quad .LABEL__MC_Register_R15__object_type
.LABEL__MC_Register_R15__object_type:
  .quad 0
  .quad .LABEL__MC_Register_R15__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__MC_Register__object_type
.LABEL__MC_Register_R15__object_type__name__data: .string "MC_Register_R15"

  .align 8
MC_Global_Variable_Address:
  .quad .LABEL__MC_Global_Variable_Address__object_type
.LABEL__MC_Global_Variable_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Global_Variable_Address__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Global_Variable_Address__object_type__name__data: .string "MC_Global_Variable_Address"

  .align 8
MC_Register_Based_Address:
  .quad .LABEL__MC_Register_Based_Address__object_type
.LABEL__MC_Register_Based_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Register_Based_Address__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__MC_Address__object_type
.LABEL__MC_Register_Based_Address__object_type__name__data: .string "MC_Register_Based_Address"

  .align 8
MC_Local_Variable_Address:
  .quad .LABEL__MC_Local_Variable_Address__object_type
.LABEL__MC_Local_Variable_Address__object_type:
  .quad 0
  .quad .LABEL__MC_Local_Variable_Address__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__MC_Register_Based_Address__object_type
.LABEL__MC_Local_Variable_Address__object_type__name__data: .string "MC_Local_Variable_Address"

  .align 8
String_Token:
  .quad .LABEL__String_Token__object_type
.LABEL__String_Token__object_type:
  .quad 0
  .quad .LABEL__String_Token__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__Literal_Token__object_type
.LABEL__String_Token__object_type__name__data: .string "String_Token"

  .align 8
Literal_Token:
  .quad .LABEL__Literal_Token__object_type
.LABEL__Literal_Token__object_type:
  .quad 0
  .quad .LABEL__Literal_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Token__object_type
.LABEL__Literal_Token__object_type__name__data: .string "Literal_Token"

  .align 8
Token:
  .quad .LABEL__Token__object_type
.LABEL__Token__object_type:
  .quad 0
  .quad .LABEL__Token__object_type__name__data
  .quad 6
  .quad 5
  .quad .LABEL__Object__object_type
.LABEL__Token__object_type__name__data: .string "Token"

  .align 8
IR_Any_Type:
  .quad .LABEL__IR_Any_Type__object_type
.LABEL__IR_Any_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Any_Type__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Any_Type__object_type__name__data: .string "IR_Any_Type"

  .align 8
IR_Boolean_Type:
  .quad .LABEL__IR_Boolean_Type__object_type
.LABEL__IR_Boolean_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Boolean_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Boolean_Type__object_type__name__data: .string "IR_Boolean_Type"

  .align 8
IR_Integer_Type:
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Integer_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Integer_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Integer_Type__object_type__name__data: .string "IR_Integer_Type"

  .align 8
IR_Int_Type:
  .quad .LABEL__IR_Int_Type__object_type
.LABEL__IR_Int_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int_Type__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Int_Type__object_type__name__data: .string "IR_Int_Type"

  .align 8
IR_Int8_Type:
  .quad .LABEL__IR_Int8_Type__object_type
.LABEL__IR_Int8_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int8_Type__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Int8_Type__object_type__name__data: .string "IR_Int8_Type"

  .align 8
IR_Int16_Type:
  .quad .LABEL__IR_Int16_Type__object_type
.LABEL__IR_Int16_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int16_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Int16_Type__object_type__name__data: .string "IR_Int16_Type"

  .align 8
IR_Int32_Type:
  .quad .LABEL__IR_Int32_Type__object_type
.LABEL__IR_Int32_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int32_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Int32_Type__object_type__name__data: .string "IR_Int32_Type"

  .align 8
IR_Int64_Type:
  .quad .LABEL__IR_Int64_Type__object_type
.LABEL__IR_Int64_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Int64_Type__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__IR_Integer_Type__object_type
.LABEL__IR_Int64_Type__object_type__name__data: .string "IR_Int64_Type"

  .align 8
IR_Nothing_Type:
  .quad .LABEL__IR_Nothing_Type__object_type
.LABEL__IR_Nothing_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Nothing_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Nothing_Type__object_type__name__data: .string "IR_Nothing_Type"

  .align 8
IR_Null_Type:
  .quad .LABEL__IR_Null_Type__object_type
.LABEL__IR_Null_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Null_Type__object_type__name__data
  .quad 13
  .quad 12
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Null_Type__object_type__name__data: .string "IR_Null_Type"

  .align 8
IR_Undefined_Type:
  .quad .LABEL__IR_Undefined_Type__object_type
.LABEL__IR_Undefined_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Undefined_Type__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Undefined_Type__object_type__name__data: .string "IR_Undefined_Type"

  .align 8
IR_Pointer_Type:
  .quad .LABEL__IR_Pointer_Type__object_type
.LABEL__IR_Pointer_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Pointer_Type__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Pointer_Type__object_type__name__data: .string "IR_Pointer_Type"

  .align 8
IR_Unchecked_Array_Type:
  .quad .LABEL__IR_Unchecked_Array_Type__object_type
.LABEL__IR_Unchecked_Array_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Unchecked_Array_Type__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Unchecked_Array_Type__object_type__name__data: .string "IR_Unchecked_Array_Type"

  .align 8
IR_Struct_Type:
  .quad .LABEL__IR_Struct_Type__object_type
.LABEL__IR_Struct_Type__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__IR_Type__object_type
.LABEL__IR_Struct_Type__object_type__name__data: .string "IR_Struct_Type"

  .align 8
AST_Struct_Statement:
  .quad .LABEL__AST_Struct_Statement__object_type
.LABEL__AST_Struct_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Struct_Statement__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Struct_Statement__object_type__name__data: .string "AST_Struct_Statement"

  .align 8
AST_Statement:
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Statement__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Object__object_type
.LABEL__AST_Statement__object_type__name__data: .string "AST_Statement"

  .align 8
Identifier_Token:
  .quad .LABEL__Identifier_Token__object_type
.LABEL__Identifier_Token__object_type:
  .quad 0
  .quad .LABEL__Identifier_Token__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__Token__object_type
.LABEL__Identifier_Token__object_type__name__data: .string "Identifier_Token"

  .align 8
AST_Type:
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Type__object_type__name__data
  .quad 9
  .quad 8
  .quad .LABEL__Object__object_type
.LABEL__AST_Type__object_type__name__data: .string "AST_Type"

  .align 8
IR_Link:
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Link__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__IR_Link__object_type__name__data: .string "IR_Link"

  .align 8
IR_Requires_Value_Link:
  .quad .LABEL__IR_Requires_Value_Link__object_type
.LABEL__IR_Requires_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Requires_Value_Link__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Requires_Value_Link__object_type__name__data: .string "IR_Requires_Value_Link"

  .align 8
IR_Required_By_Value_Link:
  .quad .LABEL__IR_Required_By_Value_Link__object_type
.LABEL__IR_Required_By_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Required_By_Value_Link__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Link__object_type
.LABEL__IR_Required_By_Value_Link__object_type__name__data: .string "IR_Required_By_Value_Link"

  .align 8
IR_Undefined_Value:
  .quad .LABEL__IR_Undefined_Value__object_type
.LABEL__IR_Undefined_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Undefined_Value__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Undefined_Value__object_type__name__data: .string "IR_Undefined_Value"

  .align 8
IR_Constant_Value:
  .quad .LABEL__IR_Constant_Value__object_type
.LABEL__IR_Constant_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Constant_Value__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Constant_Value__object_type__name__data: .string "IR_Constant_Value"

  .align 8
IR_Struct_Literal_Value:
  .quad .LABEL__IR_Struct_Literal_Value__object_type
.LABEL__IR_Struct_Literal_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Literal_Value__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Struct_Literal_Value__object_type__name__data: .string "IR_Struct_Literal_Value"

  .align 8
IR_Struct_Literal_Member_Value_Link:
  .quad .LABEL__IR_Struct_Literal_Member_Value_Link__object_type
.LABEL__IR_Struct_Literal_Member_Value_Link__object_type:
  .quad 0
  .quad .LABEL__IR_Struct_Literal_Member_Value_Link__object_type__name__data
  .quad 36
  .quad 35
  .quad .LABEL__IR_Requires_Value_Link__object_type
.LABEL__IR_Struct_Literal_Member_Value_Link__object_type__name__data: .string "IR_Struct_Literal_Member_Value_Link"

  .align 8
IR_Global_Variable_Value:
  .quad .LABEL__IR_Global_Variable_Value__object_type
.LABEL__IR_Global_Variable_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable_Value__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Global_Variable_Value__object_type__name__data: .string "IR_Global_Variable_Value"

  .align 8
IR_Global_Variable_Address_Value:
  .quad .LABEL__IR_Global_Variable_Address_Value__object_type
.LABEL__IR_Global_Variable_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable_Address_Value__object_type__name__data
  .quad 33
  .quad 32
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Global_Variable_Address_Value__object_type__name__data: .string "IR_Global_Variable_Address_Value"

  .align 8
IR_Variable_Address_Value:
  .quad .LABEL__IR_Variable_Address_Value__object_type
.LABEL__IR_Variable_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Variable_Address_Value__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Variable_Address_Value__object_type__name__data: .string "IR_Variable_Address_Value"

  .align 8
IR_Function_Address_Value:
  .quad .LABEL__IR_Function_Address_Value__object_type
.LABEL__IR_Function_Address_Value__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Address_Value__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Value__object_type
.LABEL__IR_Function_Address_Value__object_type__name__data: .string "IR_Function_Address_Value"

  .align 8
IR_Global_Variable:
  .quad .LABEL__IR_Global_Variable__object_type
.LABEL__IR_Global_Variable__object_type:
  .quad 0
  .quad .LABEL__IR_Global_Variable__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Global_Variable__object_type__name__data: .string "IR_Global_Variable"

  .align 8
IR_Function_Parameter:
  .quad .LABEL__IR_Function_Parameter__object_type
.LABEL__IR_Function_Parameter__object_type:
  .quad 0
  .quad .LABEL__IR_Function_Parameter__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Variable__object_type
.LABEL__IR_Function_Parameter__object_type__name__data: .string "IR_Function_Parameter"

  .align 8
IR_Call_Instruction:
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Call_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Call_Instruction__object_type__name__data: .string "IR_Call_Instruction"

  .align 8
IR_Direct_Call_Instruction:
  .quad .LABEL__IR_Direct_Call_Instruction__object_type
.LABEL__IR_Direct_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Direct_Call_Instruction__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Direct_Call_Instruction__object_type__name__data: .string "IR_Direct_Call_Instruction"

  .align 8
IR_Dynamic_Call_Instruction:
  .quad .LABEL__IR_Dynamic_Call_Instruction__object_type
.LABEL__IR_Dynamic_Call_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Dynamic_Call_Instruction__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__IR_Call_Instruction__object_type
.LABEL__IR_Dynamic_Call_Instruction__object_type__name__data: .string "IR_Dynamic_Call_Instruction"

  .align 8
IR_Cast_Instruction:
  .quad .LABEL__IR_Cast_Instruction__object_type
.LABEL__IR_Cast_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Cast_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Cast_Instruction__object_type__name__data: .string "IR_Cast_Instruction"

  .align 8
IR_Jump_Instruction:
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Jump_Instruction__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Jump_Instruction__object_type__name__data: .string "IR_Jump_Instruction"

  .align 8
IR_Conditional_Jump_Instruction:
  .quad .LABEL__IR_Conditional_Jump_Instruction__object_type
.LABEL__IR_Conditional_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Conditional_Jump_Instruction__object_type__name__data
  .quad 32
  .quad 31
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Conditional_Jump_Instruction__object_type__name__data: .string "IR_Conditional_Jump_Instruction"

  .align 8
IR_Direct_Jump_Instruction:
  .quad .LABEL__IR_Direct_Jump_Instruction__object_type
.LABEL__IR_Direct_Jump_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Direct_Jump_Instruction__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__IR_Jump_Instruction__object_type
.LABEL__IR_Direct_Jump_Instruction__object_type__name__data: .string "IR_Direct_Jump_Instruction"

  .align 8
IR_Load_Array_Item_Instruction:
  .quad .LABEL__IR_Load_Array_Item_Instruction__object_type
.LABEL__IR_Load_Array_Item_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Array_Item_Instruction__object_type__name__data
  .quad 31
  .quad 30
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Array_Item_Instruction__object_type__name__data: .string "IR_Load_Array_Item_Instruction"

  .align 8
IR_Load_Struct_Member_Instruction:
  .quad .LABEL__IR_Load_Struct_Member_Instruction__object_type
.LABEL__IR_Load_Struct_Member_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Struct_Member_Instruction__object_type__name__data
  .quad 34
  .quad 33
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Struct_Member_Instruction__object_type__name__data: .string "IR_Load_Struct_Member_Instruction"

  .align 8
IR_Load_Variable_Address_Instruction:
  .quad .LABEL__IR_Load_Variable_Address_Instruction__object_type
.LABEL__IR_Load_Variable_Address_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Address_Instruction__object_type__name__data
  .quad 37
  .quad 36
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Variable_Address_Instruction__object_type__name__data: .string "IR_Load_Variable_Address_Instruction"

  .align 8
IR_Load_Variable_Instruction:
  .quad .LABEL__IR_Load_Variable_Instruction__object_type
.LABEL__IR_Load_Variable_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Load_Variable_Instruction__object_type__name__data
  .quad 29
  .quad 28
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Load_Variable_Instruction__object_type__name__data: .string "IR_Load_Variable_Instruction"

  .align 8
IR_New_Instruction:
  .quad .LABEL__IR_New_Instruction__object_type
.LABEL__IR_New_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_New_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_New_Instruction__object_type__name__data: .string "IR_New_Instruction"

  .align 8
IR_Return_Instruction:
  .quad .LABEL__IR_Return_Instruction__object_type
.LABEL__IR_Return_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Return_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Return_Instruction__object_type__name__data: .string "IR_Return_Instruction"

  .align 8
IR_Set_Instruction:
  .quad .LABEL__IR_Set_Instruction__object_type
.LABEL__IR_Set_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Set_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Set_Instruction__object_type__name__data: .string "IR_Set_Instruction"

  .align 8
IR_Store_Array_Item_Instruction:
  .quad .LABEL__IR_Store_Array_Item_Instruction__object_type
.LABEL__IR_Store_Array_Item_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Store_Array_Item_Instruction__object_type__name__data
  .quad 32
  .quad 31
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Store_Array_Item_Instruction__object_type__name__data: .string "IR_Store_Array_Item_Instruction"

  .align 8
IR_Store_Struct_Member_Instruction:
  .quad .LABEL__IR_Store_Struct_Member_Instruction__object_type
.LABEL__IR_Store_Struct_Member_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Store_Struct_Member_Instruction__object_type__name__data
  .quad 35
  .quad 34
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Store_Struct_Member_Instruction__object_type__name__data: .string "IR_Store_Struct_Member_Instruction"

  .align 8
IR_Binary_Instruction:
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Binary_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Binary_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Binary_Instruction__object_type__name__data: .string "IR_Binary_Instruction"

  .align 8
IR_Add_Instruction:
  .quad .LABEL__IR_Add_Instruction__object_type
.LABEL__IR_Add_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Add_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Add_Instruction__object_type__name__data: .string "IR_Add_Instruction"

  .align 8
IR_Comparison_Instruction:
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Comparison_Instruction__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Comparison_Instruction__object_type__name__data: .string "IR_Comparison_Instruction"

  .align 8
IR_Divide_Instruction:
  .quad .LABEL__IR_Divide_Instruction__object_type
.LABEL__IR_Divide_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Divide_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Divide_Instruction__object_type__name__data: .string "IR_Divide_Instruction"

  .align 8
IR_Equals_Comparison_Instruction:
  .quad .LABEL__IR_Equals_Comparison_Instruction__object_type
.LABEL__IR_Equals_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Equals_Comparison_Instruction__object_type__name__data
  .quad 33
  .quad 32
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Equals_Comparison_Instruction__object_type__name__data: .string "IR_Equals_Comparison_Instruction"

  .align 8
IR_Greater_Comparison_Instruction:
  .quad .LABEL__IR_Greater_Comparison_Instruction__object_type
.LABEL__IR_Greater_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Greater_Comparison_Instruction__object_type__name__data
  .quad 34
  .quad 33
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Greater_Comparison_Instruction__object_type__name__data: .string "IR_Greater_Comparison_Instruction"

  .align 8
IR_Greater_Or_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type
.LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type__name__data
  .quad 43
  .quad 42
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Greater_Or_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Greater_Or_Equal_Comparison_Instruction"

  .align 8
IR_Less_Comparison_Instruction:
  .quad .LABEL__IR_Less_Comparison_Instruction__object_type
.LABEL__IR_Less_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Less_Comparison_Instruction__object_type__name__data
  .quad 31
  .quad 30
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Less_Comparison_Instruction__object_type__name__data: .string "IR_Less_Comparison_Instruction"

  .align 8
IR_Less_Or_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type
.LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type__name__data
  .quad 40
  .quad 39
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Less_Or_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Less_Or_Equal_Comparison_Instruction"

  .align 8
IR_Modulo_Instruction:
  .quad .LABEL__IR_Modulo_Instruction__object_type
.LABEL__IR_Modulo_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Modulo_Instruction__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Modulo_Instruction__object_type__name__data: .string "IR_Modulo_Instruction"

  .align 8
IR_Multiply_Instruction:
  .quad .LABEL__IR_Multiply_Instruction__object_type
.LABEL__IR_Multiply_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Multiply_Instruction__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Multiply_Instruction__object_type__name__data: .string "IR_Multiply_Instruction"

  .align 8
IR_Not_Equal_Comparison_Instruction:
  .quad .LABEL__IR_Not_Equal_Comparison_Instruction__object_type
.LABEL__IR_Not_Equal_Comparison_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Not_Equal_Comparison_Instruction__object_type__name__data
  .quad 36
  .quad 35
  .quad .LABEL__IR_Comparison_Instruction__object_type
.LABEL__IR_Not_Equal_Comparison_Instruction__object_type__name__data: .string "IR_Not_Equal_Comparison_Instruction"

  .align 8
IR_Substract_Instruction:
  .quad .LABEL__IR_Substract_Instruction__object_type
.LABEL__IR_Substract_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Substract_Instruction__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__IR_Binary_Instruction__object_type
.LABEL__IR_Substract_Instruction__object_type__name__data: .string "IR_Substract_Instruction"

  .align 8
IR_Phi_Instruction:
  .quad .LABEL__IR_Phi_Instruction__object_type
.LABEL__IR_Phi_Instruction__object_type:
  .quad 0
  .quad .LABEL__IR_Phi_Instruction__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__IR_Instruction__object_type
.LABEL__IR_Phi_Instruction__object_type__name__data: .string "IR_Phi_Instruction"

  .align 8
Generated_Identifier_Token:
  .quad .LABEL__Generated_Identifier_Token__object_type
.LABEL__Generated_Identifier_Token__object_type:
  .quad 0
  .quad .LABEL__Generated_Identifier_Token__object_type__name__data
  .quad 27
  .quad 26
  .quad .LABEL__Identifier_Token__object_type
.LABEL__Generated_Identifier_Token__object_type__name__data: .string "Generated_Identifier_Token"

  .align 8
Matcher:
  .quad .LABEL__Matcher__object_type
.LABEL__Matcher__object_type:
  .quad 0
  .quad .LABEL__Matcher__object_type__name__data
  .quad 8
  .quad 7
  .quad .LABEL__Object__object_type
.LABEL__Matcher__object_type__name__data: .string "Matcher"

  .align 8
Comment_Matcher:
  .quad .LABEL__Comment_Matcher__object_type
.LABEL__Comment_Matcher__object_type:
  .quad 0
  .quad .LABEL__Comment_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Comment_Matcher__object_type__name__data: .string "Comment_Matcher"

  .align 8
End_Of_File_Matcher:
  .quad .LABEL__End_Of_File_Matcher__object_type
.LABEL__End_Of_File_Matcher__object_type:
  .quad 0
  .quad .LABEL__End_Of_File_Matcher__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__Matcher__object_type
.LABEL__End_Of_File_Matcher__object_type__name__data: .string "End_Of_File_Matcher"

  .align 8
End_Of_Line_Matcher:
  .quad .LABEL__End_Of_Line_Matcher__object_type
.LABEL__End_Of_Line_Matcher__object_type:
  .quad 0
  .quad .LABEL__End_Of_Line_Matcher__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__Matcher__object_type
.LABEL__End_Of_Line_Matcher__object_type__name__data: .string "End_Of_Line_Matcher"

  .align 8
Identifier_Matcher:
  .quad .LABEL__Identifier_Matcher__object_type
.LABEL__Identifier_Matcher__object_type:
  .quad 0
  .quad .LABEL__Identifier_Matcher__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__Matcher__object_type
.LABEL__Identifier_Matcher__object_type__name__data: .string "Identifier_Matcher"

  .align 8
Keyword_Matcher:
  .quad .LABEL__Keyword_Matcher__object_type
.LABEL__Keyword_Matcher__object_type:
  .quad 0
  .quad .LABEL__Keyword_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Keyword_Matcher__object_type__name__data: .string "Keyword_Matcher"

  .align 8
Literal_Matcher:
  .quad .LABEL__Literal_Matcher__object_type
.LABEL__Literal_Matcher__object_type:
  .quad 0
  .quad .LABEL__Literal_Matcher__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Matcher__object_type
.LABEL__Literal_Matcher__object_type__name__data: .string "Literal_Matcher"

  .align 8
Other_Matcher:
  .quad .LABEL__Other_Matcher__object_type
.LABEL__Other_Matcher__object_type:
  .quad 0
  .quad .LABEL__Other_Matcher__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Matcher__object_type
.LABEL__Other_Matcher__object_type__name__data: .string "Other_Matcher"

  .align 8
Space_Matcher:
  .quad .LABEL__Space_Matcher__object_type
.LABEL__Space_Matcher__object_type:
  .quad 0
  .quad .LABEL__Space_Matcher__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Matcher__object_type
.LABEL__Space_Matcher__object_type__name__data: .string "Space_Matcher"

  .align 8
String_Literal_Matcher:
  .quad .LABEL__String_Literal_Matcher__object_type
.LABEL__String_Literal_Matcher__object_type:
  .quad 0
  .quad .LABEL__String_Literal_Matcher__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__Matcher__object_type
.LABEL__String_Literal_Matcher__object_type__name__data: .string "String_Literal_Matcher"

  .align 8
AST_Include_Statement:
  .quad .LABEL__AST_Include_Statement__object_type
.LABEL__AST_Include_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Include_Statement__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Include_Statement__object_type__name__data: .string "AST_Include_Statement"

  .align 8
AST_Function_Statement:
  .quad .LABEL__AST_Function_Statement__object_type
.LABEL__AST_Function_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Function_Statement__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Function_Statement__object_type__name__data: .string "AST_Function_Statement"

  .align 8
AST_Function_Type:
  .quad .LABEL__AST_Function_Type__object_type
.LABEL__AST_Function_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Function_Type__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Function_Type__object_type__name__data: .string "AST_Function_Type"

  .align 8
AST_Block_Statement:
  .quad .LABEL__AST_Block_Statement__object_type
.LABEL__AST_Block_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Block_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Block_Statement__object_type__name__data: .string "AST_Block_Statement"

  .align 8
AST_Expression_Statement:
  .quad .LABEL__AST_Expression_Statement__object_type
.LABEL__AST_Expression_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Expression_Statement__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Expression_Statement__object_type__name__data: .string "AST_Expression_Statement"

  .align 8
AST_Expression:
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Expression__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__Object__object_type
.LABEL__AST_Expression__object_type__name__data: .string "AST_Expression"

  .align 8
AST_If_Statement:
  .quad .LABEL__AST_If_Statement__object_type
.LABEL__AST_If_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_If_Statement__object_type__name__data
  .quad 17
  .quad 16
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_If_Statement__object_type__name__data: .string "AST_If_Statement"

  .align 8
AST_Loop_Statement:
  .quad .LABEL__AST_Loop_Statement__object_type
.LABEL__AST_Loop_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Loop_Statement__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Loop_Statement__object_type__name__data: .string "AST_Loop_Statement"

  .align 8
AST_While_Statement:
  .quad .LABEL__AST_While_Statement__object_type
.LABEL__AST_While_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_While_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_While_Statement__object_type__name__data: .string "AST_While_Statement"

  .align 8
AST_Break_Statement:
  .quad .LABEL__AST_Break_Statement__object_type
.LABEL__AST_Break_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Break_Statement__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Break_Statement__object_type__name__data: .string "AST_Break_Statement"

  .align 8
AST_Return_Statement:
  .quad .LABEL__AST_Return_Statement__object_type
.LABEL__AST_Return_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Return_Statement__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Return_Statement__object_type__name__data: .string "AST_Return_Statement"

  .align 8
AST_Variable_Statement:
  .quad .LABEL__AST_Variable_Statement__object_type
.LABEL__AST_Variable_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Variable_Statement__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Variable_Statement__object_type__name__data: .string "AST_Variable_Statement"

  .align 8
AST_Assignment_Statement:
  .quad .LABEL__AST_Assignment_Statement__object_type
.LABEL__AST_Assignment_Statement__object_type:
  .quad 0
  .quad .LABEL__AST_Assignment_Statement__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Statement__object_type
.LABEL__AST_Assignment_Statement__object_type__name__data: .string "AST_Assignment_Statement"

  .align 8
Other_Token:
  .quad .LABEL__Other_Token__object_type
.LABEL__Other_Token__object_type:
  .quad 0
  .quad .LABEL__Other_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Other_Token__object_type__name__data: .string "Other_Token"

  .align 8
AST_Named_Type:
  .quad .LABEL__AST_Named_Type__object_type
.LABEL__AST_Named_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Named_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Named_Type__object_type__name__data: .string "AST_Named_Type"

  .align 8
AST_Embedded_Type:
  .quad .LABEL__AST_Embedded_Type__object_type
.LABEL__AST_Embedded_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Embedded_Type__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Embedded_Type__object_type__name__data: .string "AST_Embedded_Type"

  .align 8
AST_Array_Type:
  .quad .LABEL__AST_Array_Type__object_type
.LABEL__AST_Array_Type__object_type:
  .quad 0
  .quad .LABEL__AST_Array_Type__object_type__name__data
  .quad 15
  .quad 14
  .quad .LABEL__AST_Type__object_type
.LABEL__AST_Array_Type__object_type__name__data: .string "AST_Array_Type"

  .align 8
AST_Atomic_Expression:
  .quad .LABEL__AST_Atomic_Expression__object_type
.LABEL__AST_Atomic_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Atomic_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Atomic_Expression__object_type__name__data: .string "AST_Atomic_Expression"

  .align 8
AST_Literal_Expression:
  .quad .LABEL__AST_Literal_Expression__object_type
.LABEL__AST_Literal_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Literal_Expression__object_type__name__data
  .quad 23
  .quad 22
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Literal_Expression__object_type__name__data: .string "AST_Literal_Expression"

  .align 8
AST_Variable_Expression:
  .quad .LABEL__AST_Variable_Expression__object_type
.LABEL__AST_Variable_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Variable_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Variable_Expression__object_type__name__data: .string "AST_Variable_Expression"

  .align 8
AST_Binary_Expression:
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Binary_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Binary_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Binary_Expression__object_type__name__data: .string "AST_Binary_Expression"

  .align 8
AST_Add_Expression:
  .quad .LABEL__AST_Add_Expression__object_type
.LABEL__AST_Add_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Add_Expression__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Add_Expression__object_type__name__data: .string "AST_Add_Expression"

  .align 8
AST_Divide_Expression:
  .quad .LABEL__AST_Divide_Expression__object_type
.LABEL__AST_Divide_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Divide_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Divide_Expression__object_type__name__data: .string "AST_Divide_Expression"

  .align 8
AST_Equals_Expression:
  .quad .LABEL__AST_Equals_Expression__object_type
.LABEL__AST_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Equals_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Equals_Expression__object_type__name__data: .string "AST_Equals_Expression"

  .align 8
AST_Greater_Than_Expression:
  .quad .LABEL__AST_Greater_Than_Expression__object_type
.LABEL__AST_Greater_Than_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Expression__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Greater_Than_Expression__object_type__name__data: .string "AST_Greater_Than_Expression"

  .align 8
AST_Greater_Than_Or_Equals_Expression:
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__object_type
.LABEL__AST_Greater_Than_Or_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Greater_Than_Or_Equals_Expression__object_type__name__data
  .quad 38
  .quad 37
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Greater_Than_Or_Equals_Expression__object_type__name__data: .string "AST_Greater_Than_Or_Equals_Expression"

  .align 8
AST_Less_Than_Expression:
  .quad .LABEL__AST_Less_Than_Expression__object_type
.LABEL__AST_Less_Than_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Less_Than_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Less_Than_Expression__object_type__name__data: .string "AST_Less_Than_Expression"

  .align 8
AST_Less_Than_Or_Equals_Expression:
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__object_type
.LABEL__AST_Less_Than_Or_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Less_Than_Or_Equals_Expression__object_type__name__data
  .quad 35
  .quad 34
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Less_Than_Or_Equals_Expression__object_type__name__data: .string "AST_Less_Than_Or_Equals_Expression"

  .align 8
AST_Logic_And_Expression:
  .quad .LABEL__AST_Logic_And_Expression__object_type
.LABEL__AST_Logic_And_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Logic_And_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Logic_And_Expression__object_type__name__data: .string "AST_Logic_And_Expression"

  .align 8
AST_Logic_Or_Expression:
  .quad .LABEL__AST_Logic_Or_Expression__object_type
.LABEL__AST_Logic_Or_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Logic_Or_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Logic_Or_Expression__object_type__name__data: .string "AST_Logic_Or_Expression"

  .align 8
AST_Modulo_Expression:
  .quad .LABEL__AST_Modulo_Expression__object_type
.LABEL__AST_Modulo_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Modulo_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Modulo_Expression__object_type__name__data: .string "AST_Modulo_Expression"

  .align 8
AST_Multiply_Expression:
  .quad .LABEL__AST_Multiply_Expression__object_type
.LABEL__AST_Multiply_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Multiply_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Multiply_Expression__object_type__name__data: .string "AST_Multiply_Expression"

  .align 8
AST_Not_Equals_Expression:
  .quad .LABEL__AST_Not_Equals_Expression__object_type
.LABEL__AST_Not_Equals_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Not_Equals_Expression__object_type__name__data
  .quad 26
  .quad 25
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Not_Equals_Expression__object_type__name__data: .string "AST_Not_Equals_Expression"

  .align 8
AST_Substract_Expression:
  .quad .LABEL__AST_Substract_Expression__object_type
.LABEL__AST_Substract_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Substract_Expression__object_type__name__data
  .quad 25
  .quad 24
  .quad .LABEL__AST_Binary_Expression__object_type
.LABEL__AST_Substract_Expression__object_type__name__data: .string "AST_Substract_Expression"

  .align 8
AST_Unary_Expression:
  .quad .LABEL__AST_Unary_Expression__object_type
.LABEL__AST_Unary_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Unary_Expression__object_type__name__data
  .quad 21
  .quad 20
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Unary_Expression__object_type__name__data: .string "AST_Unary_Expression"

  .align 8
AST_Negate_Expression:
  .quad .LABEL__AST_Negate_Expression__object_type
.LABEL__AST_Negate_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Negate_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Unary_Expression__object_type
.LABEL__AST_Negate_Expression__object_type__name__data: .string "AST_Negate_Expression"

  .align 8
AST_Cast_Expression:
  .quad .LABEL__AST_Cast_Expression__object_type
.LABEL__AST_Cast_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Cast_Expression__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Cast_Expression__object_type__name__data: .string "AST_Cast_Expression"

  .align 8
AST_New_Expression:
  .quad .LABEL__AST_New_Expression__object_type
.LABEL__AST_New_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_New_Expression__object_type__name__data
  .quad 19
  .quad 18
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_New_Expression__object_type__name__data: .string "AST_New_Expression"

  .align 8
AST_Function_Expression:
  .quad .LABEL__AST_Function_Expression__object_type
.LABEL__AST_Function_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Function_Expression__object_type__name__data
  .quad 24
  .quad 23
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Function_Expression__object_type__name__data: .string "AST_Function_Expression"

  .align 8
AST_Call_Expression:
  .quad .LABEL__AST_Call_Expression__object_type
.LABEL__AST_Call_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Call_Expression__object_type__name__data
  .quad 20
  .quad 19
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Call_Expression__object_type__name__data: .string "AST_Call_Expression"

  .align 8
AST_Access_Expression:
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Access_Expression__object_type__name__data
  .quad 22
  .quad 21
  .quad .LABEL__AST_Expression__object_type
.LABEL__AST_Access_Expression__object_type__name__data: .string "AST_Access_Expression"

  .align 8
AST_Member_Access_Expression:
  .quad .LABEL__AST_Member_Access_Expression__object_type
.LABEL__AST_Member_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Member_Access_Expression__object_type__name__data
  .quad 29
  .quad 28
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Member_Access_Expression__object_type__name__data: .string "AST_Member_Access_Expression"

  .align 8
AST_Array_Access_Expression:
  .quad .LABEL__AST_Array_Access_Expression__object_type
.LABEL__AST_Array_Access_Expression__object_type:
  .quad 0
  .quad .LABEL__AST_Array_Access_Expression__object_type__name__data
  .quad 28
  .quad 27
  .quad .LABEL__AST_Access_Expression__object_type
.LABEL__AST_Array_Access_Expression__object_type__name__data: .string "AST_Array_Access_Expression"

  .align 8
Character_Token:
  .quad .LABEL__Character_Token__object_type
.LABEL__Character_Token__object_type:
  .quad 0
  .quad .LABEL__Character_Token__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Literal_Token__object_type
.LABEL__Character_Token__object_type__name__data: .string "Character_Token"

  .align 8
Boolean_Token:
  .quad .LABEL__Boolean_Token__object_type
.LABEL__Boolean_Token__object_type:
  .quad 0
  .quad .LABEL__Boolean_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Literal_Token__object_type
.LABEL__Boolean_Token__object_type__name__data: .string "Boolean_Token"

  .align 8
Comment_Token:
  .quad .LABEL__Comment_Token__object_type
.LABEL__Comment_Token__object_type:
  .quad 0
  .quad .LABEL__Comment_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Token__object_type
.LABEL__Comment_Token__object_type__name__data: .string "Comment_Token"

  .align 8
End_Of_File_Token:
  .quad .LABEL__End_Of_File_Token__object_type
.LABEL__End_Of_File_Token__object_type:
  .quad 0
  .quad .LABEL__End_Of_File_Token__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__Token__object_type
.LABEL__End_Of_File_Token__object_type__name__data: .string "End_Of_File_Token"

  .align 8
End_Of_Line_Token:
  .quad .LABEL__End_Of_Line_Token__object_type
.LABEL__End_Of_Line_Token__object_type:
  .quad 0
  .quad .LABEL__End_Of_Line_Token__object_type__name__data
  .quad 18
  .quad 17
  .quad .LABEL__Token__object_type
.LABEL__End_Of_Line_Token__object_type__name__data: .string "End_Of_Line_Token"

  .align 8
Error_Token:
  .quad .LABEL__Error_Token__object_type
.LABEL__Error_Token__object_type:
  .quad 0
  .quad .LABEL__Error_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Error_Token__object_type__name__data: .string "Error_Token"

  .align 8
Integer_Token:
  .quad .LABEL__Integer_Token__object_type
.LABEL__Integer_Token__object_type:
  .quad 0
  .quad .LABEL__Integer_Token__object_type__name__data
  .quad 14
  .quad 13
  .quad .LABEL__Literal_Token__object_type
.LABEL__Integer_Token__object_type__name__data: .string "Integer_Token"

  .align 8
Null_Token:
  .quad .LABEL__Null_Token__object_type
.LABEL__Null_Token__object_type:
  .quad 0
  .quad .LABEL__Null_Token__object_type__name__data
  .quad 11
  .quad 10
  .quad .LABEL__Literal_Token__object_type
.LABEL__Null_Token__object_type__name__data: .string "Null_Token"

  .align 8
Space_Token:
  .quad .LABEL__Space_Token__object_type
.LABEL__Space_Token__object_type:
  .quad 0
  .quad .LABEL__Space_Token__object_type__name__data
  .quad 12
  .quad 11
  .quad .LABEL__Token__object_type
.LABEL__Space_Token__object_type__name__data: .string "Space_Token"

  .align 8
Undefined_Token:
  .quad .LABEL__Undefined_Token__object_type
.LABEL__Undefined_Token__object_type:
  .quad 0
  .quad .LABEL__Undefined_Token__object_type__name__data
  .quad 16
  .quad 15
  .quad .LABEL__Literal_Token__object_type
.LABEL__Undefined_Token__object_type__name__data: .string "Undefined_Token"
